<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>PPMY RSS</title>
    <link>https://www.ppmy.cn/news</link>
    <description>PPMY 网站文章 RSS</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 31 Oct 2025 14:18:19 +0000</lastBuildDate>
    <item>
      <title>股市形势复杂多变，投资者该如何应对？</title>
      <link>https://www.ppmy.cn/news/1540832.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维股市形势复杂多变，投资者该如何应对？news/2025/10/31 22:20:30/炒股自动化：申请官方API接口，散户也可以python炒股自动化（0），申请券商API接口python炒股自动化（1），量化交易接口区别Python炒股自动化（2）：获取股票实时数据和历史数据Python炒股自动化（3）：分析取回的实时数据和历史数据Python炒股自动化（4）：通过接口向交易所发送订单Python炒股自动化（5）：通过接口查询订单，查询账户资产股票量化，Python炒股，CSDN交流社区 &gt;&gt;&gt;近期股市成交量从几千亿到接近3.5万亿再到稳定在2万亿左右，这种变化表明资金流入股市，市场活跃度明显提升。资金的大量涌入是投资者对股市兴趣增加的表现，这使得股市交易更加频繁，更多的股票参与到交易之中，也反映出市场的机会增多。尽管资金流入明显，市场关注度持续上升，但这是否意味着全面牛市的到来仍不确定。牛市需要股票整体持续上涨并且对实体经济有积极推动作用。目前的情况虽然积极，但仍需要更多的时间和数据来验证是否进入牛市阶段。经过疫情冲击和房地产市场调整，上市公司业绩和股市都受到波及。当前经济的转型和调整阶段，上市公司面临着不同的挑战，这也在一定程度上影响着股市的走势。股市作为经济的晴雨表，反映着经济的现状。政策支持的重要性随着国内政策的调整，政府重视股市问题并出台刺激经济措施，这有助于市场信心的建立。政策的支持就像给股市注入了一针强心剂，引导资金流入，稳定市场预期，是股市稳健发展不可或缺的因素，投资者也应从政策导向中寻找投资机会。股市被视为经济的晴雨表，当前的波动体现了经济转型期的不确定性。股市往往会提前反映经济的走势，如果股市开始好转，可能预示着经济在之后半年到一年有复苏迹象，所以投资者要关注股市动态来预判经济走向。经济的健康发展也会对股市产生积极的反向影响。当经济逐步复苏，上市公司的业绩会得到改善，这会吸引更多资金流入股市，推动股票价格上涨，从而形成股市与经济相互促进的良性循环。历史走势虽然不会完全重复，但有一定的参考性。如2017年股市的下跌趋势和相关市场行为，能提醒投资者在市场高位下跌初期的走势往往预示着后续调整。投资者可以从历史中学习应对市场变化的经验。风险控制的重要性基于历史走势的启示，投资者在当前形势下要更加注重风险控制。不能只看到短期的反弹，而要综合分析长期趋势，避免因盲目乐观而遭受损失。国际机构的看好国际机构像大摩、高盛看好A股，这表明全球资金对中国市场兴趣增加。这可能是由于中国经济的韧性和巨大的市场潜力，国际资本的流入会给A股带来支撑，提升市场的整体价值。国际资本的流入也增加了市场的复杂性，因为全球金融市场存在联动效应。国际市场的波动可能会传导到国内市场，这就要求投资者在关注国内市场的也要关注国际市场的动态。投资者的心态与投资策略理性与耐心的心态在当前股市形势下，投资者应保持理性和耐心。市场波动是正常现象，不能被短期的涨跌所左右。要有长远的眼光，理性分析市场情况，不盲目跟风操作。投资者应采取分散投资的策略，将资金分散到不同的股票、行业甚至不同的资产类别中，降低风险。长期持有也是一种较好的策略，避免频繁交易带来的成本增加和错误决策。相关问答当前股市资金流入对市场有什么影响？资金流入增加了市场的活跃度，更多股票参与交易，机会增多，但目前还不能确定这就意味着牛市到来，还需综合考量。政策调整如何影响股市？政策调整通过稳定市场信心、引导资金流向等方式影响股市。例如刺激经济的措施能吸引资金流入，对股市的稳健发展起到重要支撑作用。股市波动如何反映经济转型？股市波动反映经济转型期的不确定性，股市好转可能预示半年到一年后经济复苏，投资者可据此预判经济走向。历史走势对现在的股市投资有何帮助？历史走势可提供经验，如2017年的下跌走势提醒投资者注重风险控制，不能只看短期反弹，要综合分析长期趋势。国际机构看好A股会带来什么？国际机构看好会使国际资本流入，给A股带来支撑提升价值，但也因全球联动增加市场复杂性。投资者应保持怎样的心态？投资者应保持理性和耐心，不被短期涨跌左右，用长远眼光看待市场，避免盲目跟风操作。http://www.ppmy.cn/news/1540832.html相关文章基于springboot的网上服装商城推荐系统的设计与实现基于springboot的网上服装商城推荐系统的设计与实现 
开发语言&amp;#xff1a;Java 框架&amp;#xff1a;springboot JDK版本&amp;#xff1a;JDK1.8 服务器&amp;#xff1a;tomcat7 数据库&amp;#xff1a;mysql 5.7 数据库工具&amp;#xff1a;Navicat11 开发软件&amp;#xff1a;idea 
源码获取&amp;#xf…阅读更多...HTML5_引用_语法规范_开发工具_常用标签目录 1. HTML 语法规范 
1.1 基本语法概述 
1.2 标签关系 
2. HTML 基本结构标签 
2.1 第一个 HTML 网页 
1.创建新文件 
2.进行保存&amp;#xff0c;这里可以选择保存到桌面&amp;#xff0c;但是后缀名一定要是.html 
2.2 基本结构标签总结 
3. 网页开发工具 
VSCode 的使用 
VSCode 工…阅读更多...并发编程的艺术Volatile 
作用 1. 保证共享变量的可见性&amp;#xff08;volatile修饰的变量进行操作对其他线程是可见的&amp;#xff09; 2. 插入读写屏障&amp;#xff0c;防止指令重排序。 
volatile 的底层实现 以下代码是对volatile修饰的instance变量赋值的汇编语言 
volatile Singleton instance
in…阅读更多...vue后台管理系统从0到1（5）文章目录 vue后台管理系统从0到1&amp;#xff08;5&amp;#xff09;完善侧边栏修改bug渲染header导航栏 vue后台管理系统从0到1&amp;#xff08;5&amp;#xff09; 接上一期&amp;#xff0c;我们需要完善我们的侧边狼 
完善侧边栏 
我们在 element 组件中可以看见&amp;#xff0c;这一个侧边栏是符合我们…阅读更多...element plus e-table表格中使用多选,当翻页时已选中的数据丢失摘要&amp;#xff1a; 点击第一页选中两个&amp;#xff0c;再选择第二页&amp;#xff0c;选中&amp;#xff0c;回到第一页&amp;#xff0c;之前选中的要保留&amp;#xff01; element ui table 
解决办法&amp;#xff1a; :row-key“getRowKeys” &amp;#xff08;写在el-table中&amp;#xff09; 
methods中声明 ge…阅读更多...99. UE5 GAS RPG 被动技能实现在这一篇&amp;#xff0c;我们在之前打下的基础下&amp;#xff0c;实现一下被动技能。 被动技能需要我们在技能栏上面选择升级解锁技能后&amp;#xff0c;将其设置到技能栏&amp;#xff0c;我们先增加被动技能使用的标签。 FGameplayTag Abilities_Passive_HaloOfProtection; //被动技能-守护光…阅读更多...【微信小程序_17_生命周期】摘要：本文介绍了小程序的生命周期，包括生命周期的定义、分类、生命周期函数等内容。生命周期分为应用生命周期和页面生命周期，生命周期函数由小程序框架提供，会按次序自动执行，开发人员可利用这些函数在特定时间点执行操作，如在页面加载时初始化数据。 微信小程序_17_生命…阅读更多...【进阶OpenCV】 （21） --卷积神经网络实现人脸检测文章目录 卷积神经网络实现人脸检测一、加载CNN人脸检测模型二、图像预处理三、绘制人脸矩形框 总结 卷积神经网络实现人脸检测 
opencv可以直接通过readnet来读取神经网络。dlib也可以的。 
任务&amp;#xff1a;使用dlib库中的卷积神经网络&amp;#xff08;CNN&amp;#xff09;人脸检测模…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:30 +0000</pubDate>
    </item>
    <item>
      <title>基于springboot的网上服装商城推荐系统的设计与实现</title>
      <link>https://www.ppmy.cn/news/1540831.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维基于springboot的网上服装商城推荐系统的设计与实现news/2025/10/31 22:20:29/基于springboot的网上服装商城推荐系统的设计与实现开发语言：Java框架：springbootJDK版本：JDK1.8服务器：tomcat7数据库：mysql 5.7数据库工具：Navicat11开发软件：idea源码获取：：https://gitee.com/ss-i-gg/Springboot-Online-Clothing-Store-Recommendation-System/blob/master/springboot%E7%BD%91%E4%B8%8A%E6%9C%8D%E8%A3%85%E5%95%86%E5%9F%8E%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81.zip或者https://download.csdn.net/download/weixin_46115961/89901325项目介绍:后端框架使用Springboot+mybatis前端框架使用Vue+hrml数据库使用mysql数据库表设计项目开发结构系统功能展示前端用户系统后台管理系统用户管理登录管理员登录：源码获取：网上服装商城推荐系统源码http://www.ppmy.cn/news/1540831.html相关文章HTML5_引用_语法规范_开发工具_常用标签目录 1. HTML 语法规范 
1.1 基本语法概述 
1.2 标签关系 
2. HTML 基本结构标签 
2.1 第一个 HTML 网页 
1.创建新文件 
2.进行保存&amp;#xff0c;这里可以选择保存到桌面&amp;#xff0c;但是后缀名一定要是.html 
2.2 基本结构标签总结 
3. 网页开发工具 
VSCode 的使用 
VSCode 工…阅读更多...并发编程的艺术Volatile 
作用 1. 保证共享变量的可见性&amp;#xff08;volatile修饰的变量进行操作对其他线程是可见的&amp;#xff09; 2. 插入读写屏障&amp;#xff0c;防止指令重排序。 
volatile 的底层实现 以下代码是对volatile修饰的instance变量赋值的汇编语言 
volatile Singleton instance
in…阅读更多...vue后台管理系统从0到1（5）文章目录 vue后台管理系统从0到1&amp;#xff08;5&amp;#xff09;完善侧边栏修改bug渲染header导航栏 vue后台管理系统从0到1&amp;#xff08;5&amp;#xff09; 接上一期&amp;#xff0c;我们需要完善我们的侧边狼 
完善侧边栏 
我们在 element 组件中可以看见&amp;#xff0c;这一个侧边栏是符合我们…阅读更多...element plus e-table表格中使用多选,当翻页时已选中的数据丢失摘要&amp;#xff1a; 点击第一页选中两个&amp;#xff0c;再选择第二页&amp;#xff0c;选中&amp;#xff0c;回到第一页&amp;#xff0c;之前选中的要保留&amp;#xff01; element ui table 
解决办法&amp;#xff1a; :row-key“getRowKeys” &amp;#xff08;写在el-table中&amp;#xff09; 
methods中声明 ge…阅读更多...99. UE5 GAS RPG 被动技能实现在这一篇&amp;#xff0c;我们在之前打下的基础下&amp;#xff0c;实现一下被动技能。 被动技能需要我们在技能栏上面选择升级解锁技能后&amp;#xff0c;将其设置到技能栏&amp;#xff0c;我们先增加被动技能使用的标签。 FGameplayTag Abilities_Passive_HaloOfProtection; //被动技能-守护光…阅读更多...【微信小程序_17_生命周期】摘要：本文介绍了小程序的生命周期，包括生命周期的定义、分类、生命周期函数等内容。生命周期分为应用生命周期和页面生命周期，生命周期函数由小程序框架提供，会按次序自动执行，开发人员可利用这些函数在特定时间点执行操作，如在页面加载时初始化数据。 微信小程序_17_生命…阅读更多...【进阶OpenCV】 （21） --卷积神经网络实现人脸检测文章目录 卷积神经网络实现人脸检测一、加载CNN人脸检测模型二、图像预处理三、绘制人脸矩形框 总结 卷积神经网络实现人脸检测 
opencv可以直接通过readnet来读取神经网络。dlib也可以的。 
任务&amp;#xff1a;使用dlib库中的卷积神经网络&amp;#xff08;CNN&amp;#xff09;人脸检测模…阅读更多...OpenGL、OpenCL 和 OpenAL 定义及用途OpenGL 
全称&amp;#xff1a;Open Graphics Library&amp;#xff0c;即开放图形库。是一种跨编程语言、跨平台的编程接口规格&amp;#xff0c;用于二维和三维图形的绘制。它是一个功能强大、调用方便的底层图形库&amp;#xff0c;提供了丰富的绘图函数&amp;#xff0c;包括基本图形绘制、变换、光照…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:29 +0000</pubDate>
    </item>
    <item>
      <title>HTML5_引用_语法规范_开发工具_常用标签</title>
      <link>https://www.ppmy.cn/news/1540830.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维HTML5_引用_语法规范_开发工具_常用标签news/2025/10/31 22:20:27/目录1. HTML 语法规范1.1 基本语法概述1.2 标签关系2. HTML 基本结构标签2.1 第一个 HTML 网页1.创建新文件2.进行保存，这里可以选择保存到桌面，但是后缀名一定要是.html2.2 基本结构标签总结3. 网页开发工具VSCode 的使用VSCode 工具生成骨架标签新增代码3.1 文档类型声明标签VSCode快捷键的使用：1.快速复制一行2.选定多个相同的单词3.添加多个光标4.全局替换某个单词5.快速定位到某一行6.放大缩小整个编辑器7.快捷键的修改3.2 lang 语言种类3.3 字符集3.4 总结4.标签4.1 标签语义4.2 标题标签-（重要）特点：4.3 段落和换行标签（重要）特点：特点：4.4 文本格式化标签4.5和标签1.标签用来布局，但是现在一行只能放一个。 大盒子2.  标签用来布局，一行上可以多个 。小盒子4.6 图像标签和路径 (重点）1. 图像标签4.7 图像标签和路径 (重点）1. 路径(前期铺垫知识)(1)目录文件夹和根目录:(2) VSCode打开目录文件夹:2. 路径4.8 超链接标签 (重点）1. 链接的语法格式2.链接分类：5. HTML 中的注释和特殊字符5.1 注释5.2 特殊字符1. HTML 语法规范1.1 基本语法概述1. HTML 标签是由尖括号包围的关键词，例如&lt;html&gt;。2. HTML 标签通常是成对出现的，例如 &lt;html&gt; 和 &lt;/html&gt; ，我们称为双标签。标签对中的第一个标签是开始标签，第二个标签是结束标签。3. 有些特殊的标签必须是单个标签（极少情况），例如 &lt;br /&gt; 或者 &lt;br&gt;，我们称为单标签。1.2 标签关系双标签关系可以分为两类：包含关系和并列关系.2. HTML 基本结构标签2.1 第一个 HTML 网页每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写。HTML页面也称为 HTML 文档.&lt;html&gt;&lt;head&gt;&lt;title&gt;我的第一个页面&lt;/title&gt;&lt;/head&gt;&lt;body&gt;你我之间,黑马洗练,月薪过万,一飞冲天&lt;/body&gt;&lt;/html&gt;每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写.标签名定义说明&lt;html&gt;&lt;/html&gt;HTML标签页面中最大的标签，我们称为跟标签&lt;head&gt;&lt;/head&gt;文档的头部注意在head标签中我们必须要设置的标签是title&lt;title&gt;&lt;/title&gt;文档的标题让页面拥有一个属于自己的网页标题&lt;body&gt;&lt;/body&gt;文档的主体元素包含文档的所有内容，页面内容基本都是放在body里面HTML 文档的的后缀名必须是 .html 或 .htm，浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。此时，用浏览器打开这个网页，我们就可以预览我们写的第一个 HTML 文件了。1.创建新文件2.进行保存，这里可以选择保存到桌面，但是后缀名一定要是.html2.2 基本结构标签总结3. 网页开发工具网页开发工具种类繁多，但是这里推荐使用VSCode。以后都是以VSCode为例。VSCode 的使用1. 双击打开软件。2. 新建文件（Ctrl + N ）。3. 保存（Ctrl + S ）, 注意移动要保存为 .html 文件4. Ctrl + 加号键 ，Ctrl + 减号键 可以放大缩小视图5. 生成页面骨架结构。输入! 按下 Tab 键。6. 利用插件在浏览器中预览页面：单击鼠标右键，在弹出窗口中点击“Open In Default Browser”。VSCode 工具生成骨架标签新增代码1. &lt;!DOCTYPE&gt; 标签2. lang 语言3. charset 字符集3.1 文档类型声明标签&lt;!DOCTYPE&gt;文档类型声明，作用就是告诉浏览器使用哪种HTML版本来显示网页。&lt;!DOCTYPE html&gt;这句代码的意思是: 当前页面采取的是 HTML5 版本来显示网页.注意:1. &lt;!DOCTYPE&gt; 声明位于文档中的最前面的位置，处于 &lt;html&gt; 标签之前。2. &lt;!DOCTYPE&gt;不是一个 HTML 标签，它就是 文档类型声明标签。VSCode快捷键的使用：1.快速复制一行shift + alt + 下箭头(上箭头) 或者ctrl + c , ctrl + v2.选定多个相同的单词ctrl + d先双击选定一个单词，然后按下ctrl + d 可以往下依次选择相同的单词，这样同时修改相同的单词就非常方便多次按d后就会多次选择相同的单词。3.添加多个光标ctrl + alt + 上箭头(下箭头)4.全局替换某个单词当我们一个页面需要修改大量相同文字的时候，我们一个个修改超级麻烦，此时我们可以通过全局替换进行修改ctrl + h那么查找就是：ctrl + f5.快速定位到某一行当我们页面比较长的时候，上下滚动的页面不方便，其实可以利用快捷键快速的调到指定的行数上面。ctrl + g进行输入行数：6.放大缩小整个编辑器ctrl + / -7.快捷键的修改这里建议讲多行注释修改为ctrl + shift + /3.2 lang 语言种类用来定义当前文档显示的语言。1. en定义语言为英语2. zh-CN定义语言为中文简单来说,定义为en 就是英文网页, 定义为 zh-CN 就是中文网页其实对于文档显示来说，定义成en的文档也可以显示中文，定义成zh-CN的文档也可以显示英文这个属性对浏览器和搜索引擎(百度.谷歌等)还是有作用的。如果这个是en英文网站，可以网页会提示你是否要翻译成中文。3.3 字符集字符集 (Character set)是多个字符的集合。以便计算机能够识别和存储各种文字。在&lt;head&gt;标签内，可以通过&lt;meta&gt;标签的charset属性来规定 HTML 文档应该使用哪种字符编码。&lt;meta charset="UTF-8" /&gt;charset常用的值有：GB2312 、BIG5 、GBK 和 UTF-8，其中UTF-8也被称为万国码，基本包含了全世界所有国家需要用到的字符。注意：上面语法是必须要写的代码，否则可能引起乱码的情况。一般情况下，统一使用“UTF-8”编码，尽量统一写成标准的 "UTF-8"，不要写成 "utf8" 或 "UTF8"。3.4 总结1. 以上三个代码 vscode 自动生成,基本不需要我们重写.2. &lt;!DOCTYPE html&gt;文档类型声明标签,告诉浏览器这个页面采取html5版本来显示页面.3. &lt;html lang=“en”&gt; 告诉浏览器或者搜索引擎这是一个英文网站. 本页面采取英文来显示.4. &lt;meta charset=“UTF-8” /&gt;必须写.采取UTF-8来保存文字.如果不写就会乱码.具体原理后面分析.4.标签4.1 标签语义学习标签是有技巧的，重点是记住每个标签的语义。简单理解就是指标签的含义，即这个标签是用来干嘛的。根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。4.2 标题标签 &lt;h1&gt; - &lt;h6&gt;（重要）为了使网页更具有语义化，我们经常会在页面中用到标题标签。HTML 提供了 6 个等级的网页标题，即&lt;h1&gt; - &lt;h6&gt;&lt;h1&gt;我是一级标题&lt;/h1&gt;单词 head 的缩写，意为头部、标题。标签语义：作为标题使用，并且依据重要性递减。特点：1. 加了标题的文字会变的加粗，字号也会依次变大。2. 一个标题独占一行。&lt;h1&gt;标题一共六级选,&lt;/h1&gt;&lt;h2&gt;文字加粗一行显。&lt;/h2&gt;&lt;h3&gt;由大到小依次减，&lt;/h3&gt;&lt;h4&gt;从重到轻随之变。&lt;/h4&gt;&lt;h5&gt;语法规范书写后，&lt;/h5&gt;&lt;h6&gt;具体效果刷新见。&lt;/h6&gt;4.3 段落和换行标签（重要）在网页中，要把文字有条理地显示出来，就需要将这些文字分段显示。在 HTML 标签中，&lt;p&gt;标签用于定义段落，它可以将整个网页分为若干个段落。&lt;p&gt;我是一个段落标签&lt;/p&gt;单词 paragraph [ˈpærəgræf] 的缩写，意为段落。标签语义：可以把 HTML 文档分割为若干段落。特点：1. 文本在一个段落中会根据浏览器窗口的大小自动换行。2. 段落和段落之间保有空隙&lt;br&gt; 或 &lt;br /&gt; :在 HTML 中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后才自动换行。如果希望某段文本强制换行显示，就需要使用换行标签 &lt;br /&gt;。&lt;br /&gt;单词 break 的缩写，意为打断、换行。标签语义：强制换行。特点：1. &lt;br /&gt; 是个单标签。2. &lt;br /&gt; 标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。eg:只需要像上面的语法内容加上标题和换行就能变的很完美：添上&lt;p&gt;&lt;/p&gt; 和 &lt;br&gt; 就会进行分段和换行。4.4 文本格式化标签在网页中，有时需要为文字设置粗体、斜体或下划线等效果，这时就需要用到 HTML 中的文本格式化标签，使文字以特殊的方式显示。标签语义: 突出重要性, 比普通文字更重要语义标签说明加粗&lt;strong&gt;&lt;/strong&gt;或者&lt;b&gt;&lt;/b&gt;更推荐使用&lt;strong&gt;,语气更强烈倾斜&lt;em&gt;&lt;/em&gt;或者&lt;i&gt;&lt;/i&gt;更推荐使用&lt;em&gt;删除线&lt;del&gt;&lt;/del&gt;或者&lt;s&gt;&lt;/s&gt;更推荐使用&lt;del&gt;下划线&lt;ins&gt;&lt;ins&gt;或者&lt;u&gt;&lt;/u&gt;更推荐使用&lt;ins&gt;4.5 &lt;div&gt; 和&lt;span&gt;标签&lt;div&gt; 和 &lt;span&gt; 是没有语义的，它们就是一个盒子，用来装内容的。&lt;div&gt;这是头部&lt;/div&gt;&lt;span&gt;今日价格&lt;/span&gt;div 是 division 的缩写，表示分割、分区。span 意为跨度、跨距。特点：1. &lt;div&gt; 标签用来布局，但是现在一行只能放一个&lt;div&gt;。大盒子2. &lt;span&gt; 标签用来布局，一行上可以多个 &lt;span&gt;。小盒子4.6 图像标签和路径 (重点）1. 图像标签在 HTML 标签中，&lt;img&gt; 标签用于定义 HTML 页面中的图像。&lt;img src="图像URL" /&gt;单词 image 的缩写，意为图像。src是&lt;img&gt;标签的必须属性，它用于指定图像文件的路径和文件名。所谓属性：简单理解就是属于这个图像标签的特性。不存在mag1.png这个图像，所以不会显示，而是会显示出alt里面的内容；这里第三个图片上，鼠标放上去会显示“我是lyh思密达”的内容。那么介绍了上面的那么多关于图像的属性，来总结一下吧：图像标签的其他属性：属性属性值说明src图片路径必须属性alt文本替换文本，在图片不能显示文字的时候title文本提示文本，鼠标放到图像上，显示的文字width像素设置图像的宽度height像素设置图像的高度border像素设置图像的边框粗细这里的border只是暂时了解一下，以后学习了CSS3，会更加深入的学习包括改边角为圆角，换颜色等等。图像标签属性注意点：① 图像标签可以拥有多个属性，必须写在标签名的后面。② 属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。③ 属性采取键值对的格式，即 key=“value" 的格式，属性 =“属性值”。4.7 图像标签和路径 (重点）1. 路径(前期铺垫知识)1. 目录文件夹和根目录2. VSCode 打开目录文件夹可以直接进行拖拽，或者进行打开文件夹(1)目录文件夹和根目录:实际工作中，我们的文件不能随便乱放，否则用起来很难快速的找到他们，因此我们需要一个文件夹来管理他们。目录文件夹：就是普通文件夹，里面只不过存放了我们做页面所需要的相关素材，比如 html 文件、图片等。根目录：打开目录文件夹的第一层就是根目录(2) VSCode打开目录文件夹:文件---- 打开文件夹 . 选择目录文件夹. 后期非常方便管理文件2. 路径页面中的图片会非常多， 通常我们会新建一个文件夹来存放这些图像文件（images），这时再查找图像，就需要采用“路径”的方式来指定图像文件的位置。路径可以分为：1. 相对路径2. 绝对路径路径之相对路径相对路径：以引用文件所在位置为参考基础，而建立出的目录路径。这里简单来说，图片相对于 HTML 页面的位置相对路劲分类符号说明同一级路劲图像文件位于HTML文件同一级，eg:&lt;img src="baidu.gif" /&gt;下一级路径/图像位于HTML文件下一级，eg:&lt;img src="images/baidu.gif" /&gt;上一级路径../图像文件位于HTML文件上一级，eg:&lt;img src="../baidu.gif" /&gt;相对路径是从代码所在的这个文件出发，去寻找目标文件的，而我们这里所说的上一级 、下一级和同一级就是图片相对于 HTML 页面的位置4.8 超链接标签 (重点）在 HTML 标签中，&lt;a&gt; 标签用于定义超链接，作用是从一个页面链接到另一个页面。1. 链接的语法格式2. 链接的分类1. 链接的语法格式&lt;a href="跳转目标" target="目标窗口的弹出方式"&gt;文本或图像&lt;/a&gt;单词 anchor [ˈæŋkə(r)] 的缩写，意为：锚。两个属性的作用如下：属性作用href用于指定链接目标的url地址（必须属性）当为标签应用href属性时，它就具有了超链接的功能target用于指定连接页面的打开方式，其中_self为默认值，_blank为在新窗口中打开2.链接分类：1. 外部链接: 例如 &lt; a href="http:// www.baidu.com "&gt; 百度&lt;/a &gt;。2. 内部链接:网站内部页面之间的相互链接. 直接链接内部页面名称即可，例如 &lt; a href="index.html"&gt; 首页 &lt;/a &gt;。3. 空链接: 如果当时没有确定链接目标时，&lt; a href="#"&gt; 首页 &lt;/a &gt; 。4. 下载链接: 如果 href 里面地址是一个文件或者压缩包，会下载这个文件。5. 网页元素链接: 在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接.6. 锚点链接: 点我们点击链接,可以快速定位到页面中的某个位置.在链接文本的 href 属性中，设置属性值为#名字的形式，如&lt;a href="#two"&gt; 第2集 &lt;/a&gt;找到目标位置标签，里面添加一个 id 属性 = 刚才的名字 ，如：&lt;h3 id="two"&gt;第2集介绍&lt;/h3&gt;5. HTML 中的注释和特殊字符5.1 注释如果需要在 HTML 文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。HTML中的注释以“&lt;!--”开头，以“ --&gt;”结束。&lt;!--注释语句--&gt;快捷键: ctrl + /一句话:注释标签里面的内容是给程序猿看的, 这个代码是不执行不显示到页面中的.添加注释是为了更好地解释代码的功能，便于相关开发人员理解和阅读代码，程序是不会执行注释内容的.5.2 特殊字符在 HTML 页面中，一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代重点记住：空格 、大于号、 小于号 这三个， 其余的使用很少，如果需要回头查阅即可。总结不易~对我自己有很大收获，希望对你也是~http://www.ppmy.cn/news/1540830.html相关文章并发编程的艺术Volatile 
作用 1. 保证共享变量的可见性&amp;#xff08;volatile修饰的变量进行操作对其他线程是可见的&amp;#xff09; 2. 插入读写屏障&amp;#xff0c;防止指令重排序。 
volatile 的底层实现 以下代码是对volatile修饰的instance变量赋值的汇编语言 
volatile Singleton instance
in…阅读更多...vue后台管理系统从0到1（5）文章目录 vue后台管理系统从0到1&amp;#xff08;5&amp;#xff09;完善侧边栏修改bug渲染header导航栏 vue后台管理系统从0到1&amp;#xff08;5&amp;#xff09; 接上一期&amp;#xff0c;我们需要完善我们的侧边狼 
完善侧边栏 
我们在 element 组件中可以看见&amp;#xff0c;这一个侧边栏是符合我们…阅读更多...element plus e-table表格中使用多选,当翻页时已选中的数据丢失摘要&amp;#xff1a; 点击第一页选中两个&amp;#xff0c;再选择第二页&amp;#xff0c;选中&amp;#xff0c;回到第一页&amp;#xff0c;之前选中的要保留&amp;#xff01; element ui table 
解决办法&amp;#xff1a; :row-key“getRowKeys” &amp;#xff08;写在el-table中&amp;#xff09; 
methods中声明 ge…阅读更多...99. UE5 GAS RPG 被动技能实现在这一篇&amp;#xff0c;我们在之前打下的基础下&amp;#xff0c;实现一下被动技能。 被动技能需要我们在技能栏上面选择升级解锁技能后&amp;#xff0c;将其设置到技能栏&amp;#xff0c;我们先增加被动技能使用的标签。 FGameplayTag Abilities_Passive_HaloOfProtection; //被动技能-守护光…阅读更多...【微信小程序_17_生命周期】摘要：本文介绍了小程序的生命周期，包括生命周期的定义、分类、生命周期函数等内容。生命周期分为应用生命周期和页面生命周期，生命周期函数由小程序框架提供，会按次序自动执行，开发人员可利用这些函数在特定时间点执行操作，如在页面加载时初始化数据。 微信小程序_17_生命…阅读更多...【进阶OpenCV】 （21） --卷积神经网络实现人脸检测文章目录 卷积神经网络实现人脸检测一、加载CNN人脸检测模型二、图像预处理三、绘制人脸矩形框 总结 卷积神经网络实现人脸检测 
opencv可以直接通过readnet来读取神经网络。dlib也可以的。 
任务&amp;#xff1a;使用dlib库中的卷积神经网络&amp;#xff08;CNN&amp;#xff09;人脸检测模…阅读更多...OpenGL、OpenCL 和 OpenAL 定义及用途OpenGL 
全称&amp;#xff1a;Open Graphics Library&amp;#xff0c;即开放图形库。是一种跨编程语言、跨平台的编程接口规格&amp;#xff0c;用于二维和三维图形的绘制。它是一个功能强大、调用方便的底层图形库&amp;#xff0c;提供了丰富的绘图函数&amp;#xff0c;包括基本图形绘制、变换、光照…阅读更多...【Lean 4 学习】用Lean 4证明自然数的平方差公式引言 
最近开始学习Lean 4来做数学证明&amp;#xff0c;虽然挺有挑战&amp;#xff0c;但是对于我这个30多岁的大叔来说有种刚学编程时候探索的乐趣hhh自然数平方差公式这个问题&amp;#xff0c;是我刚学了平方和公式&amp;#xff0c;想变变给自己练手用的&amp;#xff0c;结果卡了我好久&amp;#xff0c…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:28 +0000</pubDate>
    </item>
    <item>
      <title>并发编程的艺术</title>
      <link>https://www.ppmy.cn/news/1540829.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维并发编程的艺术news/2025/10/31 22:20:26/Volatile作用1. 保证共享变量的可见性（volatile修饰的变量进行操作对其他线程是可见的） 2. 插入读写屏障，防止指令重排序。volatile 的底层实现以下代码是对volatile修饰的instance变量赋值的汇编语言volatileSingletoninstance
instance=newSingleton();第二行代码是给instance变量进行赋值的操作。在赋值后，相比于普通变量，多执行了第五行lock······操作。在lock这一行代码中，有一个’addl $0x0 %esp’的操作，意思是esp寄存器的值+0。Lock字段在汇编语言中，Lock字段有两个作用： 1. 使修改的缓存立刻刷新回主存；2. 使其他处理器缓存中相同变量无效。如何让其他缓存中的变量变得无效？遵守缓存一致性协议：MESI，MESI使用了总线嗅探机制，当一个处理器修改了volatile变量，会通过数据总线将数据刷新回共享内存，其他处理器通过总线嗅探机制监听数据总线，如果发现自己缓存中对应内存地址被修改，就会使缓存无效，需要重新从共享内存中读取，防止其他缓存存储的是脏数据。Volatile禁止指令重排序+ store（存储）： 作用于工作内存的变量，把工作内存中的变量值传送到主内存中，以便后续的write操作。 + write（写入）： 作用于主存变量，把store操作从工作内存中得到的变量值放入主存变量中。JMM规定：如果将一个变量从工作内存同步回主存中，就要按顺序执行store和write操作。volatile空操作的作用：在lock这一行代码中，有一个’addl $0x0 %esp’的操作，意思是esp寄存器的值+0。这个空操作的作用就是将本处理器的缓存写入了内存，相当于执行了store和write操作；该空操作指令把修改同步到内存时，一位置所有之前的操作都已经执行完成，这样便形成了“指令重排序无法越过内存屏障”的效果。Volatile的原子性如何保证共享变量的修改是原子的？1. 锁总线在早期CPU中，当一个处理器通过数据总线将Volatile修饰的变量刷新回内存前会在总线上声言’**Lock#‘**信号，该信号会使其他处理器不能通过总线访问，修改共享内存，这样该处理器就可以独占共享内存。锁缓存锁总线的开销十分大，目前CPU采用粒度更小的锁缓存，锁定对应缓存行来保证原子性，不会发生修改由两个以上处理器缓存的变量。复合修改Volatile变量的单次修改是原子的，但是**复合操作是非原子的**。如果线程A执行&lt;font style="color:rgb(5, 7, 59);background-color:rgb(253, 253, 254);"&gt;count = count + 1;&lt;/font&gt;（这是一个复合操作），即使count是volatile的，这个操作也不是原子的。因为&lt;font style="color:rgb(5, 7, 59);background-color:rgb(253, 253, 254);"&gt;count = count + 1;&lt;/font&gt;可以分解为读取count的值、将值加1、写回count三个步骤。在这三个步骤中，如果线程B也访问了count，就可能导致数据不一致的问题。可以使用自旋+CAS来保证符合操作的原子性。总线风暴总线嗅探机制是导致总线风暴的主要原因，在多核处理器上，多个核心共用同一根数据总线进行数据交互，如果”缓存一致性流量“突然激增，必然会使得总线的处理能力收到影响，缓存一致性流量：当主存的数据被多个核心缓存，某一个核心修改了该变量的缓存，通过数据总线将数据刷新回主存，其他核心通过总线嗅探机制使自己缓存无效，这种通过总线来进行通信则称之为–缓存一致性流量。JDK7中Volatile的使用优化在JDK7并发包中,有一个LinkedTransferQueue,通过追加字节的方式,来优化队列的入队出队操作，追加64字节，使队首队尾不在同一个缓存行，这样锁缓存的开销就会变小.SynchronizedSynchronized的用法静态同步方法锁是 当前类的class对象publicstaticsynchronizedvoidtest(){...}普通同步方法锁是 当前实例对象publicsynchronizedvoidtest(){...}同步代码块锁是 括号内对象synchronized（）{...}Synchronized 锁升级synchronized使用偏向锁在非多线程竞争下减小锁的开销,轻量锁使用线程栈上的数据结构避免了操作系统级别的锁,重锁则涉及到操作系统级的互斥锁.偏向锁偏向锁是乐观锁，实际上并没有真正意义上的加锁。加锁在线程进入同步代码块前，首先会查看锁对象头MarkWord信息，是否为当前线程ID是，则表示已经加锁成功，执行同步代码块。不是查看对象头信息中偏向锁标志位是否为1为1，通过CAS尝试置换MarkWord字段，将偏向锁指向当前线程置换成功，则加锁成功置换失败，则表示发生了竞争，偏向锁释放，锁升级为轻量锁不为1，将标志位改为1，通过CAS获取锁释放锁持有偏向锁的线程不会主动释放锁，偏向锁是等待竞争才会释放，当发生了竞争，首先会暂停持有偏向锁的线程，等待全局安全点，检查持有偏向锁的线程是否存活？- 如果存活：升级为轻量锁
- 不存活： 将偏向锁标志位设置为0，无锁状态。如何判断线程是否存活？线程start的时候会将自己写入一个thread_list中，是一个链表；当线程不存活的时候，会将自己从thread_list中清理掉；因此只需要判断thread_list中是否含有线程即可。轻量锁+ **获取锁：**复制锁对象的markword字段到当前线程的栈帧中成为displaced Markword，然后使用CAS将锁对象的markword字段替换为指向线程栈帧锁记录的指针，替换成功则枷锁成功。替换失败，表示其他线程竞争锁；尝试使用自旋获取锁，当自旋达到阈值获取锁失败，锁升级为重锁。替换成功，不升级。重锁重锁是依赖对象内部的monitor锁来实现，monitor锁依赖操作系统的MutexLock实现，所以重锁也称为互斥锁。当锁升级为重锁，锁对象的markword字段存储的是： 指向mutex的指针。同步代码块中 代码同步是通过monitorenter和monitorexit进出monitor实现；而同步方法是通过方法修饰符的Acc_Synchronized字段来完成。为什么重锁开销大？操作系统会将争夺锁的线程阻塞，被阻塞的线程会消耗CPU，但是阻塞或者唤醒一个线程都需要操作系统从用户态到内核态相互转换，转换是十分耗费时间的。CAS进程线程线程是比进程更轻量级的调度执行单位，线程的引入可以将一个进程的资源分配和执行调度分开，各个线程共享进程资源，独立调度，线程是Java中处理器资源调度最基本单位。内核线程的实现内核线程就是直接由操作系统内核支持的线程，由内核完成线程的切换调度，并负责将线程的任务映射到各个处理器上。程序一般不会直接使用内核线程，而是使用内核线程提供的轻量级进程。这种轻量级进程和内核线程之间是1：1的关系，称为一对一线程模型。Java线程的实现主流商用Java虚拟机的线程模型采用的都是基于操作系统的原生线程模型来实现，即采用1：1的线程模型。Java与协程内核线程的局限+ 今天Web应用业务量的增长，应对业务复杂化而不断进行服务的细分，减少单个服务的复杂度，增加复用性的同时，也不可避免增加了服务的数量，缩短了留给每一个服务响应的时间，也要求每个服务的提供者能够同时处理数量更庞大的请求，这样才不会出现请求由于某个服务被阻塞而出现等待。 + 1比1的内核线程模型，这种映射到操作系统上的线程缺陷是切换，调度成本高昂，系统容纳线程数量有限，但现在每个请求本身的执行时间变得很短，数量变得很多的前提下，用户线程切换的开销甚至可能会接近计算本身的开销，造成严重浪费。协程的复苏处理器要去执行线程 
A 
的程序代码时，并不是仅有代码程序就能跑得起来，程序是数据与代码的组合体，代码执行时还必须要有上下文数据的支撑。而这里说的“上下文”，以程序员的角度来看，是方法调用过程中的各种局部的变量与资源；以线程的角度来看，是方法的调用栈中存储的各类信息内核线程的调度成本来自于用户态与内核态之间的状态转换，开销主要来自于响应中断，保护，恢复，执行现场的成本。将这些工作从操作系统交到程序员手里，那么就可以主动控制开销。**协程：**协程拥有自己的上下文和栈，完全由用户控制，所以是用户态的轻量级线程；协程调度切换的时候将寄存器上下文和栈保存到其他地方，再切回来的时候恢复之前保存的寄存器上下文和栈，因此协程能够保留上一次调用时的状态。协程的优点：轻量级：由用户态的程序库自己管理，不需要操作系统的介入**非阻塞：**协程允许编写非阻塞代码，可以提高IO密集型应用的性能**减少上下文切换开销：**协程由程序控制，因此可以减少上下文切换的开销，这对于高并发很重要线程状态1. NEW 初始状态，线程刚被创建但没有执行； 2. Runnable 运行状态，线程运行，在OS中是就绪和运行的统称； 3. Blocked 阻塞状态，线程阻塞于锁； 4. Waiting 等待状态，表示等待其他线程通知或者唤醒； 5. Time_Waiting 超时等待，指定时间自己返回； 6. Terminated 终止状态，线程已执行完毕，被销毁。线程之间通信**线程通信的本质就是"同步"和"数据共享".由于线程是共享进程的内存空间的,因此他们可以直接访问彼此的数据,数据共享有个前提,就是线程之间的协调与同步,确保多个线程能够安全且高效地共享资源和数据,而不会产生数据不一致问题.**通过volatile和synchronized关键字+ volatile可以保证多个线程缓存的同一个共享变量被修改时的可见性,但是过多的使用volatile修饰成员变量会使得程序的执行效率降低. + synchronized确保在同一时刻,只有一个线程处于同步方法或者同步代码块中;对于同步块的使用,通过monitorenter和monitorexit指令进出同步代码块;而对于同步方法是通过**方法修饰符的ACC_SYNCHRONIZED字段**来完成,无论通过哪种方法,本质都是通过对象监视器(monitor,任意一个对象都拥有自己地monitor)进行获取,而这个过程是排他的,同一时刻只有一个线程获取monitor;只有先获取对象监视器才能进入同步方法,如果有线程没有获取成功,就会阻塞在同步方法的入口中.通过volatile来实现线程之间数据的共享,搭配synchronized关键字确保多线程的数据安全,以此来实现线程之间的通信.等待通知模式**等待通知模式是指,线程A调用了对象O的wait()方法进入等待状态,而另一线程B调用了对象O的notify()或者notifyAll()方法,线程A收到通知后从对象O的wait()方法返回,进而执行后续操作.这两个线程通过对象O完成交互.**wait()释放锁,该线程进入Waiting状态,等待其他线程通知或者被中断才会返回notify()通知一个在对象上Waiting的线程notifyAll()通知所有Waiting在该对象上的线程线程的等待/通知通过同步块/同步方法的加锁来调用Object.wait(),Object.notify()等方法实现等待的线程会被放在锁对象的等待队列中当有线程执行notify()唤醒,就会将等待队列中的线程唤醒,进入同步队列变为Blocked状态等待CPU的调度:::success使用wait(),notify()…时,需要先获取锁调用wait()方法后,线程状态有Running-&gt;Waiting状态并将当前线程放入锁对象的等待队列中notify或者notifyAll方法调用后等待线程依旧不会从wait方法返回,还需要调用notify或者notifyAll方法的线程释放锁被通知的线程,从对象的等待队列移动到同步队列,状态由Waiting-&gt;Blocked从wait方法返回的前提就是获得锁.:::等待通知的经典范式://等待方synchronized(lockObject){while(判断条件){不符合lockObject.wait();}符合...}//通知方synchronized(lockObject){改变条件;lockObject.notifyAll();}管道**管道的输入输出流和普通IO或者网络IO不同之处在于,它主要是用于线程之间的数据传输,而传输的媒介为内存.**具体实现:PipedOutputStream,PipedInputStream,PipedReader,PipedWriter,前两种面向字节,后两种面向字符publicclassMain{publicstaticvoidmain(String[]args)throwsIOException{PipedReaderpr=newPipedReader();PipedWriterpw=newPipedWriter();//将输入输出流进行连接pr.connect(pw);ThreadprintThread=newThread(newPrint(pr),"PrintThread");printThread.start();intreceice=0;try{while((receice=System.in.read())!=-1){pw.write(receice);}}catch(IOExceptione){}}staticclassPrintimplementsRunnable{PipedReaderin;publicPrint(PipedReaderpipedReader){this.in=pipedReader;}publicvoidrun(){intreceive=0;try{while((receive=in.read())!=-1){System.out.print((char)receive);}}catch(IOExceptione){}}}}输出结果:Thread.join()方法当一个线程A在执行过程中调用B.join()方法,就会立即进入B线程中执行,A进入等待队列,等待B线程调用自身的B.notifyAll()唤醒才会返回A中执行.ThreadLocalThreadLocalMap线程中断**线程中断是线程之间协作的主要方法之一,在程序中经常会有一些不达目的不退出的线程,当达到了目的我们可以通知这个线程可以结束了;当然,线程在不同状态下遇到中断会产生不同的响应,有的会抛出异常,有的没有变化,有的会结束线程.**API每一个线程都有一个状态位,标识当前线程对象是否被中断状态.//isInterrupted是一个实例方法,主要用于判断当前线程对象中断标志位是否被标记.如果被标记返回true,表示当前线程已经被中断.publicbooleanisInterrupted()//interrupt是一个实例方法，该方法用于设置当前线程对象的中断标识位。publicvoidinterrupt()//interrupted是一个静态的方法，用于返回当前线程是否被中断并复位。publicstaticbooleaninterrupted()锁**锁可以防止多个线程同时访问共享资源,在Lock出来之前,Java一直使用Synchronized关键字实现锁的功能**Lock和Synchronizedsynchronized和Lock的差异1. 所处层面:::infosynchronized是JVM层面的锁Lock是一个类,属于应用层面的锁:::锁的效率:::color1在少量竞争情况下,synchronized和lock效率差不多但是在竞争十分激烈的情况下,synchronized需要内核态到用户态的转换,所以效率极低:::加锁的方式:::infosynchronized是隐式获取锁和释放锁Lock需要手动获取锁和释放锁相比于synchronized更加灵活;但是也容易造成死锁的现象发生:::等待与非阻塞:::color1synchronized同步块中A获取了锁,B线程会一直等待,不会释放CPU,直到A释放锁Lock可以使用tryLock()尝试获取锁,是非阻塞式地获取锁,方法会立即返回,true表示获取成功,false表示获取失败:::公平与非公平:::infosynchronized是非公平锁,肯能会导致线程饥饿Lock可以设置为公平锁,通过线程等待时间来实现公平锁,会使用更多的CPU资源:::响应中断:::color1synchronized在等待锁的时候不可以被中断,synchronized获取到锁不响应中断Lock可以响应中断,Lock的 lockInterruptibly 方法获取到锁的线程被中断的时候抛出异常并且释放锁:::实现调度的方式:::infosynchronized使用Object的notify,wait,notifyAll实现调度Lock通过condition监视器实现线程的调度:::实现原理:::color1synchronized底层是通过操作系统指令实现同步Lock通过AQS和CAS操作实现线程同步:::Lock接口提供的synchronized不具备的特性+ 非阻塞式获取锁,tryLock() + 超时获取锁: Lock(long),指定时间内没有获取锁则返回 + 能被中断获取锁: 获取到锁的线程能够响应中断,当被中断时,抛出中断异常,并且释放同步锁AQSAQS队列同步器,是用来构建锁或同步组件的基础框架,通过内置FIFO队列和int成员变量完成同步资源获取线程的排队和同步状态工作;同步器是面向锁的实现者,简化锁的实现方式,屏蔽了线程排队,同步状态管理,等待唤醒等底层操作.锁是面向使用者,锁和同步器很好隔离了使用者和实现者锁关注的领域.同步队列同步器内部有一个FIFO同步队列(双向队列)来完成同步状态的管理;当多个线程竞争锁,有线程获取锁失败就会被构造成同步队列的Node节点加入同步队列,同时会阻塞该线程,当锁空闲的时候,就会唤醒同步队列的首节点Head,使其再次尝试获取同步状态.同步器{队列首节点指针;队列尾节点指针;}同步队列节点{等待状态 waitStatus,前驱节点 prev,后继节点 next,等待队列的后继节点 nextWaiter,获取同步状态的线程 thread}获取同步状态失败的线程会被添加值同步队列的尾部:当一个线程成功获取同步状态,其他线程无法获取同步状态,就会被构造成节点添加值同步队列的尾部,而加入队列尾部的线程有多个,需要保证线程安全,所以使用CAS设置成尾节点.获取同步状态成功的线程添加为队列首节点:因为获取同步状态的线程只有一个,所以设置首节点的时候不需要使用CAS,只需要将首节点设置为原首节点的后继节点,并断开原首节点的next指针即可替换成功.独占式同步状态的获取与释放在获取同步状态时,同步器维护了一个同步队列,同步状态获取成功的线程为队列的head,失败的线程通过CAS自旋加入到队列的尾部,线程进入Waiting状态;head释放同步状态后,使用LockSupport方法唤醒后继节点,或者非首节点被中断后,检查自己前驱节点是否为head,如果是,尝试获取同步状态,不是线程进入等待状态;节点自旋获取同步状态的行为刚好可以满足队列的FIFO原则,也防止了过早通知发生同步状态争夺.共享式同步状态的获取与释放共享与独占最大的区别就是,共享可以有多个线程同时获取到同步状态,通过资源数量控制同时获取同步状态的线程数量.**释放:**共享式同步状态的head释放后,会唤醒后续处于等待状态的节点而不是head的后继节点,与独占式不同的是,释放同步状态(或资源数)必须确保线程安全,一般通过CAS循环保证,因为释放同步状态的操作会同时来自多个线程.独占式曹氏获取同步状态独占曹氏获取同步状态,区别在于未获取到同步状态的线程进入等待状态,当被唤醒的时候,需要先判断是否超时,如果超时直接返回,没超市再尝试获取同步状态.ReentrantLock重入锁ReentrantLock重入锁,表示该锁能够支持一个线程对资源的重复加锁,该锁还能支持获取锁公平和非公平的选择,公平锁的效率没有非公平锁的效率高,公平锁能够减少线程线程饥饿的发生.实现重进入+ 线程再次获取锁,锁需要去识别请求锁的线程是否为当前占据锁的线程,如果是则再次获取成功. + 锁的最终释放: 线程重复n次获取锁,随后在第n次释放锁,其他线程能够获取到锁; 锁对于获取进行计数自增,锁释放计数自减,当计数器=0表示锁已经释放.公平锁与非公平锁公平锁需要满足请求的绝对时间顺序,也就是FIFO;非公平锁只需要使用CAS设置同步状态成功则表示当前线程成功获取了锁;公平锁在获取同步状态的时候判断条件多了一个hasQueuedPredecessors()方法,同步队列中当前节点是否有前驱节点的判断,如果返回true表示需要等待前驱节点线程获取锁并释放锁后才能继续获取锁.非公平锁,关键在tryAcquire()方法,该方法有线尝试直接获取锁,不必进入同步队列.当获取锁失败才会进入同步队列中等待被唤醒,从而可以插队获取锁;在非公平锁中,刚释放锁的线程再次尝试获取锁的概率会更大,因为这样可以减少线程的切换,提高锁的效率,系统的吞吐量,但是插队会带来线程饥饿的问题.读写锁ReentrantLock和Mutex都是排他锁,同一时刻只允许一个线程获取同步状态.而读写锁可以允许多个读线程访问,写线程独占.在没有读写锁的时候,Java使用等待通知机制+synchronized完成读写操作.Java并发包中读写锁的实现是通过ReentrantReadWriteLock实现.该包提供特性:公平性选择重入锁降级ReadWriteLock常用方法:getReadLockCount() 返回当前读锁被获取的次数(包括重入次数)getReadHoldCount() 返回当前线程获取读锁的次数(保存在ThreadLocal)getWriteHoldCount()返回写锁的获取次数isWriteLocked()判断写锁是否被获取写锁的获取与释放**获取:**写锁是一个排他锁,如果一个线程成功获取写锁,写锁状态+1;获取写锁的时候需要判断读锁是否存在,如果存在不能获取,进入Waiting状态,因为写锁需要对所有读锁可见,等待所有读锁释放,才可以获取写锁;当一个线程获取写锁的时候,写锁的状态不是0,并且获取写锁的线程不是自己,则当前线程进入Waiting状态.释放:写锁的释放与ReentrantLock类似,每次释放,写状态-1,直到写状态为0,释放成功,前面的写锁对于后面是可见的.读锁的获取与释放读写锁通过一个int32变量维护多个线程的读,和一个写线程的状态;前16位记录写状态,后16位记录读状态;如果想获取写状态=int&amp;0x0000FFFF,读状态=int&gt;&gt;&gt;16(无符号右移),当写状态+1=int+1,当读状态+1=S+1&lt;&lt;16;上图表示,写状态=3,一个线程获取了写锁并且重进入了2次;读状态=2表示这个线程同时获取读锁2次.锁降级当前线程释放写锁之前,需要先获取读锁,最后处理完数据再释放读锁,为了当获取写锁的线程在修改完数据后,需要用到修改后的数据,防止被其他线程修改;publicstaticvoidrun(){writeLock.lock();try{atomicInteger.compareAndSet(atomicInteger.get(),atomicInteger.get()+1);readLock.lock();}finally{writeLock.unlock();}try{System.out.println(atomicInteger.get());}finally{readLock.unlock();}}LockSupportCondition在Java中,每一个Object都有一组监视器方法wait,notify,notifyAll,配合synchronized可以实现等待通知模式;Condition也提供类似监视器方法,依赖Lock对象相互配合与Object监视器不同的是:依赖Lock对象,获取Lock锁,通过Lock.newCondition()获取监视器等待队列有多个调用方法不同,await(),signal()既可以设置不支持等待线程响应中断,也可以xiangying其他线程中断返回使用方法:一般都会将Condition作为成员变量;await() 当前线程进入等待状态;直到被唤醒,或者被其他线程中断;当线程从await()返回,表    示该线程已经获取到了锁;awaitUninterruptibly()不响应中断的等待;直到被唤醒;awaitNanos(long nanos)等待超时;awaitUntil(Date dealine)等待至指定时间;signal()唤醒一个在等待队列的线程;signalAll()唤醒所有在等待队列的线程;实现分析Condition是AbstractQueuedSynchronized的内部类,等待队列的节点同样是内部类;等待队列:每一个Condition都包含一个等待队列,同样是FIFO队列,也就是说有多个等待队列,而且Condition是Object同步器的内部类,每一个Condition实例都可以访问同步器方法;等待队列的加入:当线程成功获取到锁,才可以调用await()方法,该线程将会释放锁,并且构造成节点加入等待队列的尾部,加入尾部的时候不需要CAS保证,因为调用await()的前置条件是获取到锁,线程是安全的.释放锁后唤醒同步队列的后继节点;通知唤醒:signal()方法会唤醒等待队列中等待时间最长的节点,调用该方法的前置条件也是先获取到了锁,然后找到等待队列的首节点,将其加入到同步队列,然后使用LockSupport方法唤醒,进而调用同步器的acquireQueued()加入到获取同步状态的竞争.成功获取到锁后从之前的await()方法返回;signalAll()相当于对等待队列的所有节点均执行一次signal(),节点全部移动到同步队列当中;实战(线程安全的消费生产)```java public class 多个等待队列 {private static final Lock lock = new ReentrantLock();
//生产者等待队列
private static final Condition condition1 = lock.newCondition();
//消费者等待队列
private static final Condition condition2 = lock.newCondition();
private static volatile AtomicInteger num =new AtomicInteger(10);public static void main(String[] args) {while(true){new Thread(() -&gt; {runProducter();}).start();new Thread(() -&gt; {runUser();}).start();}}//生产者
public static void runProducter(){lock.lock();try{while(num.get()&gt;5){condition1.await();}System.out.println(Thread.currentThread().getName()+" 生产+1 ="+(num.incrementAndGet()));condition2.signalAll();}catch (Exception e){}finally {lock.unlock();}
}
//生产者
public static void runUser(){lock.lock();try{while(num.get()&lt;1){condition2.await();}System.out.println(Thread.currentThread().getName()+" 消费+1 ="+(num.decrementAndGet()));condition1.signalAll();}catch (Exception e){}finally {lock.unlock();}
}}&lt;h2 id="cQj4K"&gt;并发容器&lt;/h2&gt;
&lt;h3 id="v3Wqd"&gt;ConcurrentHashMap&lt;/h3&gt;
&lt;h4 id="a4Sjp"&gt;JDK1.7&lt;/h4&gt;
1.7中ConcurrentHashMap是通过分段锁来保证容器的线程安全;首先将数据分为一段一段(这个段存储在segment数组中),为每一段分配一把锁,当一个线程占用锁访问段中的数据时,其他线程只能访问其他段的数据![](https://cdn.nlark.com/yuque/0/2024/png/42842095/1725433158554-51a0dbc2-46b0-4eb0-a511-b4856e7f91ad.png)Segment数组继承了ReentrantLock,所以Segment是一种可重入锁,默认大小为16,也就是同时支持16个线程并发写;&lt;h4 id="kRxK3"&gt;JDK1.8&lt;/h4&gt;
1.8取消了分段锁,采用Node+CAS+Synchronized.锁的粒度由一段变成了当前链表/红黑树,也就是说不发生Hash冲突也就不会产生并发问题,不会影响其他Node读写.&lt;h4 id="MuAL1"&gt;不保证复合操作的原子性&lt;/h4&gt;
复合操作是指由put,get组成的操作序列;例如,先判断一个键是否存在,根据结果进行插入和更新,这种操作过程可能会被其他线程打断,导致结果不符合预期.ConcurrnetHashMap提供了一些原子性的复合操作,如 putIfAbsent,compute,computeIfAbsent,computeIfPresent,merge等.这些方法都可以接收一个函数作为参数,根据给定的key和value来计算一个新的value,并且将其更新到map中.```java
// 线程 A
map.putIfAbsent(key, value);
// 线程 B
map.putIfAbsent(key, anotherValue);
或者：
// 线程 A
map.computeIfAbsent(key, k -&gt; value);
// 线程 B
map.computeIfAbsent(key, k -&gt; anotherValue);很多同学可能会说了，这种情况也能加锁同步呀！确实可以，但不建议使用加锁的同步机制，违背了使用 ConcurrentHashMap 的初衷。在使用 ConcurrentHashMap 的时候，尽量使用这些原子性的复合操作方法来保证原子性。ConcurrentLinkedQueue阻塞队列+ 支持阻塞的插入方法: 添加队列的时候,如果队列已满,会阻塞添加元素的线程直到队列有空位. + 支持阻塞的移除方法: 当队列为空的时候,会阻塞获取元素的线程,等待队列变为非空.Forkjoin1. 分治 fork 2. 工作队列 3. 工作窃取 4. 结果合并join并发工具Semaphore信号量Semaphore是用于控制同时访问特定资源变量的线程数量;通过内部维护一个原子计数器和提供线程安全的访问控制方法来保证资源的并发安全.Semaphore提供两个主要的方法来控制资源的访问:1. acquire() 用于请求资源,如果资源不可用会阻塞线程
2. release() 用于释放资源,使得其他被阻塞的线程可以继续执行Exchange线程交换数据线程池线程池的工作流程![](https://img-blog.csdnimg.cn/img_convert/0210534be7c6e0f5d39696f78f7b3ee7.png)如果当前运行线程&lt;CorePoolSize,则创建新的线程去执行任务(需要获取全局锁)如果当前运行线程&gt;=CorePoolSize,则将任务加入到任务队列BlockingQueue如果任务队列已满,则创建新的线程去执行任务(获取全局锁)如果当前运行线程&gt;MaximumPoolSize,任务将会被拒绝,并调用rejectedExecution()采取上述步骤的总体设计思路,是为了在执行execute()方法的时候,尽可能避免获取全局锁,当ThreadPoolExecutor完成预热之后(线程数量&gt;=CorePoolSize),几乎所有的execute()方法调用都是执行步骤2,步骤2不需要获取全局锁.线程池的核心参数1. 最大线程数量 2. 核心线程数量 3. 线程存活时间 4. 线程存活时间单位 5. 线程工厂 6. 任务队列 7. 拒绝策略线程池的核心线程数的设置http://www.ppmy.cn/news/1540829.html相关文章vue后台管理系统从0到1（5）文章目录 vue后台管理系统从0到1&amp;#xff08;5&amp;#xff09;完善侧边栏修改bug渲染header导航栏 vue后台管理系统从0到1&amp;#xff08;5&amp;#xff09; 接上一期&amp;#xff0c;我们需要完善我们的侧边狼 
完善侧边栏 
我们在 element 组件中可以看见&amp;#xff0c;这一个侧边栏是符合我们…阅读更多...element plus e-table表格中使用多选,当翻页时已选中的数据丢失摘要&amp;#xff1a; 点击第一页选中两个&amp;#xff0c;再选择第二页&amp;#xff0c;选中&amp;#xff0c;回到第一页&amp;#xff0c;之前选中的要保留&amp;#xff01; element ui table 
解决办法&amp;#xff1a; :row-key“getRowKeys” &amp;#xff08;写在el-table中&amp;#xff09; 
methods中声明 ge…阅读更多...99. UE5 GAS RPG 被动技能实现在这一篇&amp;#xff0c;我们在之前打下的基础下&amp;#xff0c;实现一下被动技能。 被动技能需要我们在技能栏上面选择升级解锁技能后&amp;#xff0c;将其设置到技能栏&amp;#xff0c;我们先增加被动技能使用的标签。 FGameplayTag Abilities_Passive_HaloOfProtection; //被动技能-守护光…阅读更多...【微信小程序_17_生命周期】摘要：本文介绍了小程序的生命周期，包括生命周期的定义、分类、生命周期函数等内容。生命周期分为应用生命周期和页面生命周期，生命周期函数由小程序框架提供，会按次序自动执行，开发人员可利用这些函数在特定时间点执行操作，如在页面加载时初始化数据。 微信小程序_17_生命…阅读更多...【进阶OpenCV】 （21） --卷积神经网络实现人脸检测文章目录 卷积神经网络实现人脸检测一、加载CNN人脸检测模型二、图像预处理三、绘制人脸矩形框 总结 卷积神经网络实现人脸检测 
opencv可以直接通过readnet来读取神经网络。dlib也可以的。 
任务&amp;#xff1a;使用dlib库中的卷积神经网络&amp;#xff08;CNN&amp;#xff09;人脸检测模…阅读更多...OpenGL、OpenCL 和 OpenAL 定义及用途OpenGL 
全称&amp;#xff1a;Open Graphics Library&amp;#xff0c;即开放图形库。是一种跨编程语言、跨平台的编程接口规格&amp;#xff0c;用于二维和三维图形的绘制。它是一个功能强大、调用方便的底层图形库&amp;#xff0c;提供了丰富的绘图函数&amp;#xff0c;包括基本图形绘制、变换、光照…阅读更多...【Lean 4 学习】用Lean 4证明自然数的平方差公式引言 
最近开始学习Lean 4来做数学证明&amp;#xff0c;虽然挺有挑战&amp;#xff0c;但是对于我这个30多岁的大叔来说有种刚学编程时候探索的乐趣hhh自然数平方差公式这个问题&amp;#xff0c;是我刚学了平方和公式&amp;#xff0c;想变变给自己练手用的&amp;#xff0c;结果卡了我好久&amp;#xff0c…阅读更多...入侵及防护：7个迹象说明你的手机可能被入侵！在现代社会中&amp;#xff0c;手机已成为我们生活中不可或缺的一部分。然而&amp;#xff0c;随着智能手机的普及&amp;#xff0c;手机安全问题也日益严重。手机被入侵的风险不仅影响个人隐私&amp;#xff0c;还可能导致财产损失。本文将为你介绍7个迹象&amp;#xff0c;帮助你判断手机是否可能被入侵…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:26 +0000</pubDate>
    </item>
    <item>
      <title>vue后台管理系统从0到1（5）</title>
      <link>https://www.ppmy.cn/news/1540828.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维vue后台管理系统从0到1（5）news/2025/10/31 22:20:24/文章目录vue后台管理系统从0到1（5）完善侧边栏修改bug渲染header导航栏vue后台管理系统从0到1（5）接上一期，我们需要完善我们的侧边狼完善侧边栏我们在 element 组件中可以看见，这一个侧边栏是符合我们的要求的我们就使用这样一个侧边栏动态渲染我们的各个选项，但是目前没有接入后端接口，我们需要自己先定义静态侧边栏数据，然后在使用v-for动态渲染上去这是我写好的侧边栏动态v-for渲染代码这里是渲染数据和渲染方法这里是加上的样式以上代码，不懂的自己查gpt或者查一些aiCommonAside.vue 完整代码&lt;template&gt;&lt;el-aside width="200px"&gt;&lt;el-menu @select="handleMenuSelect"background-color="#545c64"text-color="#fff"&gt;&lt;h3&gt;通用后台管理系统&lt;/h3&gt;&lt;el-menu-itemv-for="item in noChildren":index="item.path":key="item.path"&gt;&lt;i:class="item.icon"&gt;&lt;/i&gt;&lt;span&gt;{{item.label}}&lt;/span&gt;&lt;/el-menu-item&gt;&lt;el-sub-menuv-for="item in hasChildren":index="item.path":key="item.path"&gt;&lt;template#title&gt;&lt;i:class="item.icon"&gt;&lt;/i&gt;&lt;span&gt;{{item.label}}&lt;/span&gt;&lt;/template&gt;&lt;el-menu-itemv-for="subItem in item.children":index="subItem.path":key="subItem.path"&gt;&lt;i:class="subItem.icon"&gt;&lt;/i&gt;&lt;span&gt;{{subItem.label}}&lt;/span&gt;&lt;/el-menu-item&gt;&lt;/el-sub-menu&gt;&lt;/el-menu&gt;&lt;/el-aside&gt;&lt;/template&gt;&lt;script setup&gt;import{ref,computed}from'vue';import{useRouter}from'vue-router';constrouter=useRouter();constlist=ref([{path:'/home',name:'home',label:'首页',icon:'el-icon-house',url:'Home'},{path:'/mall',name:'mall',label:'商品管理',icon:'el-icon-video-play',url:'Mall'},{path:'/user',name:'user',label:'用户管理',icon:'el-icon-user',url:'User'},{path:'/other',label:'其他',icon:'el-icon-location',children:[{path:'/page1',name:'page1',label:'页面1',icon:'el-icon-setting',url:'Page1'},{path:'/page2',name:'page2',label:'页2',icon:'el-icon-setting',url:'Page2'}]}]);constnoChildren=computed(()=&gt;list.value.filter(item=&gt;!item.children));consthasChildren=computed(()=&gt;list.value.filter(item=&gt;item.children));consthandleMenuSelect=(index)=&gt;{constitem=list.value.find(item=&gt;item.path===index)||list.value.flat().find(item=&gt;item.path===index);if(item){router.push(item.path);}};&lt;/script&gt;&lt;style lang="less"scoped&gt;.icons{width:18px;height:18px;margin-right:5px;}.el-menu{border-right:none;h3{line-height:48px;color:#fff;text-align:center;}}.el-aside{height:10000px;background-color:#545c64;}&lt;/style&gt;为了防止出错，重构 Main.vue 代码如下，不懂的gpt，我认为重要的是整个项目完成的流程&lt;script setup&gt;// 可以在这里添加组件的逻辑import CommonAside from'@/components/CommonAside.vue'&lt;/script&gt;&lt;template&gt;&lt;divclass="common-layout"&gt;&lt;el-container&gt;&lt;el-aside width="200px"class="aside-container"&gt;&lt;!--侧边栏内容--&gt;&lt;common-aside&gt;&lt;/common-aside&gt;&lt;/el-aside&gt;&lt;el-container&gt;&lt;el-headerclass="el-header"&gt;&lt;common-header&gt;&lt;/common-header&gt;&lt;/el-header&gt;&lt;el-mainclass="right-main"&gt;main&lt;/el-main&gt;&lt;/el-container&gt;&lt;/el-container&gt;&lt;/div&gt;&lt;/template&gt;&lt;style&gt;.common-layout{width:100%;height:100%;margin:0;padding:0;overflow:hidden;}el-container{width:100%;height:100%;margin:0;padding:0;overflow:hidden;}.el-header{background-color:#333;}&lt;/style&gt;然后就是重新跑项目：如果对于以上代码有问题可以私信我，我们的侧边栏就渲染完成了，这里有一个bug，就是我们的 icon 没有加载出来，我还没有发现问题在哪，如果你们发现了，可以私信我。紧接着上文，我们的项目目前仍然存在侧边栏 icon 加载问题，我今天好好的看了一下代码，发现展示 icon 的地方代码出了问题修改bug这是我修改过的代码我原本写的展示 icon 使用标签，并且把 icon 的渲染写成了 class 属性里重构 commonAside.vue 如下：&lt;template&gt;&lt;el-aside width="200px"&gt;&lt;el-menu @select="handleMenuSelect"background-color="#545c64"text-color="#fff"&gt;&lt;h3&gt;通用后台管理系统&lt;/h3&gt;&lt;el-menu-itemv-for="item in noChildren":index="item.path":key="item.path"&gt;&lt;componentclass="icons":is="item.icon"&gt;&lt;/component&gt;&lt;span&gt;{{item.label}}&lt;/span&gt;&lt;/el-menu-item&gt;&lt;el-sub-menuv-for="item in hasChildren":index="item.path":key="item.path"&gt;&lt;template#title&gt;&lt;componentclass="icons":is="item.icon"&gt;&lt;/component&gt;&lt;span&gt;{{item.label}}&lt;/span&gt;&lt;/template&gt;&lt;el-menu-itemv-for="subItem in item.children":index="subItem.path":key="subItem.path"&gt;&lt;componentclass="icons":is="subItem.icon"&gt;&lt;/component&gt;&lt;span&gt;{{subItem.label}}&lt;/span&gt;&lt;/el-menu-item&gt;&lt;/el-sub-menu&gt;&lt;/el-menu&gt;&lt;/el-aside&gt;&lt;/template&gt;&lt;script setup&gt;import{ref,computed}from'vue';import{useRouter}from'vue-router';constrouter=useRouter();constlist=ref([{path:'/home',name:'home',label:'首页',icon:'house',url:'Home'},{path:'/mall',name:'mall',label:'商品管理',icon:'video-play',url:'Mall'},{path:'/user',name:'user',label:'用户管理',icon:'user',url:'User'},{path:'/other',label:'其他',icon:'location',children:[{path:'/page1',name:'page1',label:'页面1',icon:'setting',url:'Page1'},{path:'/page2',name:'page2',label:'页2',icon:'setting',url:'Page2'}]}]);constnoChildren=computed(()=&gt;list.value.filter(item=&gt;!item.children));consthasChildren=computed(()=&gt;list.value.filter(item=&gt;item.children));consthandleMenuSelect=(index)=&gt;{constitem=list.value.find(item=&gt;item.path===index)||list.value.flat().find(item=&gt;item.path===index);if(item){router.push(item.path);}};&lt;/script&gt;&lt;style lang="less"scoped&gt;.icons{width:18px;height:18px;margin-right:5px;}.el-menu{border-right:none;h3{line-height:48px;color:#fff;text-align:center;}}.el-aside{height:10000px;background-color:#545c64;}&lt;/style&gt;渲染header导航栏然后我们接着渲染我们的 header 导航栏部分，目标是渲染成这样那么第一步分析界面布局可以得出以下两个部分，也是我们需要分开写的两个部件首先，使用一个 header 把整体包起来&lt;divclass="header"&gt;&lt;/div&gt;然后我们把导航栏分成左右两部分，左边有图标和首页字体，右边是用户头像&lt;divclass="header"&gt;&lt;divclass="l-content"&gt;&lt;/div&gt;&lt;divclass="r-content"&gt;&lt;/div&gt;&lt;/div&gt;然后我们具体实现左右两边的东西&lt;divclass="header"&gt;&lt;divclass="l-content"&gt;//图标&lt;el-button size="small"&gt;&lt;componentclass="icons"is="menu"&gt;&lt;/component&gt;&lt;/el-button&gt;//面包屑字体&lt;el-breadcrumb separator="/"class="bread"&gt;&lt;el-breadcrumb-item:to="{path:'/'}"&gt;首页&lt;/el-breadcrumb-item&gt;&lt;/el-breadcrumb&gt;&lt;/div&gt;&lt;divclass="r-content"&gt;//用户头像&lt;el-dropdown&gt;&lt;spanclass="el-dropdown-link"&gt;&lt;img:src="getImageUrl(user)"class="user"/&gt;&lt;/span&gt;&lt;template#dropdown&gt;//单击头像退出按钮&lt;el-dropdown-menu&gt;&lt;el-dropdown-item&gt;个人中心&lt;/el-dropdown-item&gt;&lt;el-dropdown-item&gt;退出&lt;/el-dropdown-item&gt;&lt;/el-dropdown-menu&gt;&lt;/template&gt;&lt;/el-dropdown&gt;&lt;/div&gt;&lt;/div&gt;然后我们加入样式&lt;style lang="less"scoped&gt;.header{display:flex;justify-content:space-between;align-items:center;width:100%;height:100%;background-color:#333;}.icons{width:20px;height:20px;}.l-content{display:flex;align-items:center;.el-button{margin-right:20px;}}.r-content{.user{width:40px;height:40px;border-radius:50%;}}/* 注意：:deep() 是一个 Vue.js 中的作用域穿透伪元素，用于在 scoped CSS 中访问子组件的样式。但它不是标准的 CSS 语法，且在新版本的 Vue.js 中可能已经被废弃或替换。如果这段代码是在 Vue.js 项目中使用的，请确保你的项目支持这种语法。此外，由于选择器中包含特殊字符（如点号和括号），你可能需要对其进行适当的转义或使用其他方法来实现相同的效果。但在这里，为了保持原始信息的完整性，我保留了这段代码的原样。 */:deep(.bread span){color:#fff!important;cursor:pointer!important;}&lt;/style&gt;再加入渲染数据的代码&lt;script setup&gt;import{ref,computed}from'vue';import{useRouter}from'vue-router';constrouter=useRouter();constlist=ref([{path:'/home',name:'home',label:'首页',icon:'el-icon-house',url:'Home'},{path:'/mall',name:'mall',label:'商品管理',icon:'el-icon-video-play',url:'Mall'},{path:'/user',name:'user',label:'用户管理',icon:'el-icon-user',url:'User'},{path:'/other',label:'其他',icon:'el-icon-location',children:[{path:'/page1',name:'page1',label:'页面1',icon:'el-icon-setting',url:'Page1'},{path:'/page2',name:'page2',label:'页2',icon:'el-icon-setting',url:'Page2'}]}]);constgetImageUrl=(user)=&gt;{returnnewURL(`../assets/images/${user}.png`,import.meta.url).href;};&lt;/script&gt;最后整合代码：CommonHeader.vue代码：&lt;template&gt;&lt;divclass="header"&gt;&lt;divclass="l-content"&gt;&lt;el-button size="small"&gt;&lt;componentclass="icons"is="menu"&gt;&lt;/component&gt;&lt;/el-button&gt;&lt;el-breadcrumb separator="/"class="bread"&gt;&lt;el-breadcrumb-item:to="{path:'/'}"&gt;首页&lt;/el-breadcrumb-item&gt;&lt;/el-breadcrumb&gt;&lt;/div&gt;&lt;divclass="r-content"&gt;&lt;el-dropdown&gt;&lt;spanclass="el-dropdown-link"&gt;&lt;img:src="getImageUrl(user)"class="user"/&gt;&lt;/span&gt;&lt;template#dropdown&gt;&lt;el-dropdown-menu&gt;&lt;el-dropdown-item&gt;个人中心&lt;/el-dropdown-item&gt;&lt;el-dropdown-item&gt;退出&lt;/el-dropdown-item&gt;&lt;/el-dropdown-menu&gt;&lt;/template&gt;&lt;/el-dropdown&gt;&lt;/div&gt;&lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import{ref,computed}from'vue';import{useRouter}from'vue-router';constrouter=useRouter();constlist=ref([{path:'/home',name:'home',label:'首页',icon:'el-icon-house',url:'Home'},{path:'/mall',name:'mall',label:'商品管理',icon:'el-icon-video-play',url:'Mall'},{path:'/user',name:'user',label:'用户管理',icon:'el-icon-user',url:'User'},{path:'/other',label:'其他',icon:'el-icon-location',children:[{path:'/page1',name:'page1',label:'页面1',icon:'el-icon-setting',url:'Page1'},{path:'/page2',name:'page2',label:'页2',icon:'el-icon-setting',url:'Page2'}]}]);constgetImageUrl=(user)=&gt;{returnnewURL(`../assets/images/${user}.png`,import.meta.url).href;};&lt;/script&gt;&lt;style lang="less"scoped&gt;.header{display:flex;justify-content:space-between;align-items:center;width:100%;height:100%;background-color:#333;}.icons{width:20px;height:20px;}.l-content{display:flex;align-items:center;.el-button{margin-right:20px;}}.r-content{.user{width:40px;height:40px;border-radius:50%;}}/* 注意：:deep() 是一个 Vue.js 中的作用域穿透伪元素，用于在 scoped CSS 中访问子组件的样式。但它不是标准的 CSS 语法，且在新版本的 Vue.js 中可能已经被废弃或替换。如果这段代码是在 Vue.js 项目中使用的，请确保你的项目支持这种语法。此外，由于选择器中包含特殊字符（如点号和括号），你可能需要对其进行适当的转义或使用其他方法来实现相同的效果。但在这里，为了保持原始信息的完整性，我保留了这段代码的原样。 */:deep(.bread span){color:#fff!important;cursor:pointer!important;}&lt;/style&gt;然后，我们启动项目，查看如下：这样一个新的组件就被我们写好了。http://www.ppmy.cn/news/1540828.html相关文章element plus e-table表格中使用多选,当翻页时已选中的数据丢失摘要&amp;#xff1a; 点击第一页选中两个&amp;#xff0c;再选择第二页&amp;#xff0c;选中&amp;#xff0c;回到第一页&amp;#xff0c;之前选中的要保留&amp;#xff01; element ui table 
解决办法&amp;#xff1a; :row-key“getRowKeys” &amp;#xff08;写在el-table中&amp;#xff09; 
methods中声明 ge…阅读更多...99. UE5 GAS RPG 被动技能实现在这一篇&amp;#xff0c;我们在之前打下的基础下&amp;#xff0c;实现一下被动技能。 被动技能需要我们在技能栏上面选择升级解锁技能后&amp;#xff0c;将其设置到技能栏&amp;#xff0c;我们先增加被动技能使用的标签。 FGameplayTag Abilities_Passive_HaloOfProtection; //被动技能-守护光…阅读更多...【微信小程序_17_生命周期】摘要：本文介绍了小程序的生命周期，包括生命周期的定义、分类、生命周期函数等内容。生命周期分为应用生命周期和页面生命周期，生命周期函数由小程序框架提供，会按次序自动执行，开发人员可利用这些函数在特定时间点执行操作，如在页面加载时初始化数据。 微信小程序_17_生命…阅读更多...【进阶OpenCV】 （21） --卷积神经网络实现人脸检测文章目录 卷积神经网络实现人脸检测一、加载CNN人脸检测模型二、图像预处理三、绘制人脸矩形框 总结 卷积神经网络实现人脸检测 
opencv可以直接通过readnet来读取神经网络。dlib也可以的。 
任务&amp;#xff1a;使用dlib库中的卷积神经网络&amp;#xff08;CNN&amp;#xff09;人脸检测模…阅读更多...OpenGL、OpenCL 和 OpenAL 定义及用途OpenGL 
全称&amp;#xff1a;Open Graphics Library&amp;#xff0c;即开放图形库。是一种跨编程语言、跨平台的编程接口规格&amp;#xff0c;用于二维和三维图形的绘制。它是一个功能强大、调用方便的底层图形库&amp;#xff0c;提供了丰富的绘图函数&amp;#xff0c;包括基本图形绘制、变换、光照…阅读更多...【Lean 4 学习】用Lean 4证明自然数的平方差公式引言 
最近开始学习Lean 4来做数学证明&amp;#xff0c;虽然挺有挑战&amp;#xff0c;但是对于我这个30多岁的大叔来说有种刚学编程时候探索的乐趣hhh自然数平方差公式这个问题&amp;#xff0c;是我刚学了平方和公式&amp;#xff0c;想变变给自己练手用的&amp;#xff0c;结果卡了我好久&amp;#xff0c…阅读更多...入侵及防护：7个迹象说明你的手机可能被入侵！在现代社会中&amp;#xff0c;手机已成为我们生活中不可或缺的一部分。然而&amp;#xff0c;随着智能手机的普及&amp;#xff0c;手机安全问题也日益严重。手机被入侵的风险不仅影响个人隐私&amp;#xff0c;还可能导致财产损失。本文将为你介绍7个迹象&amp;#xff0c;帮助你判断手机是否可能被入侵…阅读更多...electron-vite_10electron-updater软件更新网很多electron-updater更新文章&amp;#xff0c;这里只简单写一下演示代码&amp;#xff1b; 为什么选择 electron-updater插件可以自动更新应用程序,同时支持多个平台;比官方要强; 官方的autoUpdater仅支持macOS 和 Windows 自动更新; 注意是自动&amp;#xff0c;直接更新那种; 脚手架中是…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:25 +0000</pubDate>
    </item>
    <item>
      <title>element plus e-table表格中使用多选,当翻页时已选中的数据丢失</title>
      <link>https://www.ppmy.cn/news/1540827.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维element plus e-table表格中使用多选,当翻页时已选中的数据丢失news/2025/10/31 22:20:23/摘要：点击第一页选中两个，再选择第二页，选中，回到第一页，之前选中的要保留！element ui table解决办法： :row-key=“getRowKeys” （写在el-table中）methods中声明 getRowKeys()方法 
getRowKeys(row){returnrow.id},:reserve-selection=“true” （写在el-table-column中type为select的行中）&lt;el-table-columntype="selection":reserve-selection="true"width="44px"/&gt;因为表格分页，点击会刷新第一页的数据的，只会加载第二页的数据，前面页面的数据是拿不到的，上面的还是不行的话加入@selection-change，当选择项发生变化时会触发该事件回调selection！终极方法：使用toggleRowSelection方法把数据硬塞进去this.$nextTick(()=&gt;{// this.multipleSelection：第一页和第二页选中的数据数组, this.tableList是表格数据if(this.multipleSelection.length){// this.$refs.elTable 当前表格refthis.$refs.elTable.clearSelection()this.multipleSelection.forEach(row=&gt;{const selectedRow=this.tableList.find(item=&gt;item.id===row.id)if(selectedRow){// 当前页(第一页)需要被选中的数据使其选中this.$refs.elTable.toggleRowSelection(selectedRow,true);}else{// 不在当前页(第二页)的数据，也硬塞到@selection-change的参数中，这时当你在第一页选中其他数据时，selection-change的参数也会带着第二页的数据this.$refs.elTable.toggleRowSelection(row,true);}})}})或者获取所有数据回来就更加好处理了！记录选中的，但是最傻了！mounted(){init()},
asyncinit(){await setCheck()await getTableList()},
// 这里是请求接口获取表格分页数据getTableList(){// this.tableList=},
// 这里获取所有的数据getAllTableList(){// 请求获取所有的数据，然后return出去//returnallList},
// 设置选中
asyncsetCheck(){const allTableList=await getAllTableList()allTableList.forEach((item)=&gt;{if(ids.has(item.id)){this.$refs.elTable.toggleRowSelection(item,true)}})}http://www.ppmy.cn/news/1540827.html相关文章99. UE5 GAS RPG 被动技能实现在这一篇&amp;#xff0c;我们在之前打下的基础下&amp;#xff0c;实现一下被动技能。 被动技能需要我们在技能栏上面选择升级解锁技能后&amp;#xff0c;将其设置到技能栏&amp;#xff0c;我们先增加被动技能使用的标签。 FGameplayTag Abilities_Passive_HaloOfProtection; //被动技能-守护光…阅读更多...【微信小程序_17_生命周期】摘要：本文介绍了小程序的生命周期，包括生命周期的定义、分类、生命周期函数等内容。生命周期分为应用生命周期和页面生命周期，生命周期函数由小程序框架提供，会按次序自动执行，开发人员可利用这些函数在特定时间点执行操作，如在页面加载时初始化数据。 微信小程序_17_生命…阅读更多...【进阶OpenCV】 （21） --卷积神经网络实现人脸检测文章目录 卷积神经网络实现人脸检测一、加载CNN人脸检测模型二、图像预处理三、绘制人脸矩形框 总结 卷积神经网络实现人脸检测 
opencv可以直接通过readnet来读取神经网络。dlib也可以的。 
任务&amp;#xff1a;使用dlib库中的卷积神经网络&amp;#xff08;CNN&amp;#xff09;人脸检测模…阅读更多...OpenGL、OpenCL 和 OpenAL 定义及用途OpenGL 
全称&amp;#xff1a;Open Graphics Library&amp;#xff0c;即开放图形库。是一种跨编程语言、跨平台的编程接口规格&amp;#xff0c;用于二维和三维图形的绘制。它是一个功能强大、调用方便的底层图形库&amp;#xff0c;提供了丰富的绘图函数&amp;#xff0c;包括基本图形绘制、变换、光照…阅读更多...【Lean 4 学习】用Lean 4证明自然数的平方差公式引言 
最近开始学习Lean 4来做数学证明&amp;#xff0c;虽然挺有挑战&amp;#xff0c;但是对于我这个30多岁的大叔来说有种刚学编程时候探索的乐趣hhh自然数平方差公式这个问题&amp;#xff0c;是我刚学了平方和公式&amp;#xff0c;想变变给自己练手用的&amp;#xff0c;结果卡了我好久&amp;#xff0c…阅读更多...入侵及防护：7个迹象说明你的手机可能被入侵！在现代社会中&amp;#xff0c;手机已成为我们生活中不可或缺的一部分。然而&amp;#xff0c;随着智能手机的普及&amp;#xff0c;手机安全问题也日益严重。手机被入侵的风险不仅影响个人隐私&amp;#xff0c;还可能导致财产损失。本文将为你介绍7个迹象&amp;#xff0c;帮助你判断手机是否可能被入侵…阅读更多...electron-vite_10electron-updater软件更新网很多electron-updater更新文章&amp;#xff0c;这里只简单写一下演示代码&amp;#xff1b; 为什么选择 electron-updater插件可以自动更新应用程序,同时支持多个平台;比官方要强; 官方的autoUpdater仅支持macOS 和 Windows 自动更新; 注意是自动&amp;#xff0c;直接更新那种; 脚手架中是…阅读更多...LoadBalancer 类型的 Service工作期间，kube-proxy做了什么？kube-proxy 是 Kubernetes 集群中一个重要的组件&amp;#xff0c;负责实现服务的网络代理和负载均衡功能。当创建一个 LoadBalancer 类型的 Service 时&amp;#xff0c;kube-proxy 在整个过程中扮演了关键角色。以下是 kube-proxy 在 LoadBalancer 类型 Service 创建和使用过程中所做的…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:23 +0000</pubDate>
    </item>
    <item>
      <title>99. UE5 GAS RPG 被动技能实现</title>
      <link>https://www.ppmy.cn/news/1540826.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维99. UE5 GAS RPG 被动技能实现news/2025/10/31 22:20:22/在这一篇，我们在之前打下的基础下，实现一下被动技能。被动技能需要我们在技能栏上面选择升级解锁技能后，将其设置到技能栏，我们先增加被动技能使用的标签。FGameplayTag Abilities_Passive_HaloOfProtection;//被动技能-守护光环FGameplayTag Abilities_Passive_LifeSiphon;//被动技能-生命回复FGameplayTag Abilities_Passive_ManaSiphon;//被动技能-蓝量回复注册一下/** 被动技能*/GameplayTags.Abilities_Passive_HaloOfProtection=UGameplayTagsManager::Get().AddNativeGameplayTag(FName("Abilities.Passive.HaloOfProtection"),FString("守护光环"));GameplayTags.Abilities_Passive_LifeSiphon=UGameplayTagsManager::Get().AddNativeGameplayTag(FName("Abilities.Passive.LifeSiphon"),FString("生命自动回复"));GameplayTags.Abilities_Passive_ManaSiphon=UGameplayTagsManager::Get().AddNativeGameplayTag(FName("Abilities.Passive.ManaSiphon"),FString("蓝量自动回复"));添加被动技能基类我们基于技能基类创建一个派生类，用于作为被动技能的基类命名为RPGPassiveAbility在类里增加两个函数，一个是覆写激活技能函数，在技能被调用激活时，绑定结束回调监听，如果ASC调用了结束技能，并且此被动技能刚好有对应的标签，我们可以通过第二个技能结束此技能实力的激活。public:/*** 覆写激活技能函数* @param Handle 技能实力的句柄* @param ActorInfo 技能拥有者* @param ActivationInfo 激活信息* @param TriggerEventData 游戏事件信息*/virtualvoidActivateAbility(constFGameplayAbilitySpecHandle Handle,constFGameplayAbilityActorInfo*ActorInfo,constFGameplayAbilityActivationInfo ActivationInfo,constFGameplayEventData*TriggerEventData)override;/*** 接收到技能结束回调函数* @param AbilityTag 结束的技能标识标签*/voidReceiveDeactivate(constFGameplayTag&amp;AbilityTag);我们在ASC里增加一个新的委托定义，用来定义技能结束DECLARE_MULTICAST_DELEGATE_OneParam(FDeactivatePassiveAbility,constFGameplayTag&amp;/*技能标签*/);//中止一个技能激活的回调并在ASC类里新增一个变量FDeactivatePassiveAbility DeactivatePassiveAbility;//取消技能激活的委托在被动技能基类里，激活技能时，绑定委托的监听voidURPGPassiveAbility::ActivateAbility(constFGameplayAbilitySpecHandle Handle,constFGameplayAbilityActorInfo*ActorInfo,constFGameplayAbilityActivationInfo ActivationInfo,constFGameplayEventData*TriggerEventData){Super::ActivateAbility(Handle,ActorInfo,ActivationInfo,TriggerEventData);//获取到ASCif(URPGAbilitySystemComponent*RPGASC=Cast&lt;URPGAbilitySystemComponent&gt;(UAbilitySystemBlueprintLibrary::GetAbilitySystemComponent(GetAvatarActorFromActorInfo()))){//绑定技能取消回调RPGASC-&gt;DeactivatePassiveAbility.AddUObject(this,&amp;URPGPassiveAbility::ReceiveDeactivate);}}在回调里，判断委托返回的标签是否为当前被动技能的标识，如果是，将调用结束技能voidURPGPassiveAbility::ReceiveDeactivate(constFGameplayTag&amp;AbilityTag){//判断技能标签容器里是否包含此标签if(AbilityTags.HasTagExact(AbilityTag)){EndAbility(CurrentSpecHandle,CurrentActorInfo,CurrentActivationInfo,true,true);}}创建对应被动技能蓝图有了被动技能基类，我们在UE里创建对应的蓝图基于之前创建的基类创建三个被动技能在技能标识标签这里设置对应的标签然后在DA_AbilityInfo里添加对应的技能的相关数据接下来，我们在UI里实现设置按钮显示哪个技能标签接着运行，查看按钮是否能够正确显示以及操作记得在主窗口的UI上设置对应的按钮Tag运行设置后查看，是否主界面也能够跟随变动实现被动技能的装配时激活技能可以实现了装配，并且，我们在技能里监听了取消事件，在触发对应回调时，技能会自动取消激活。所以，我们在被动技能里设置调试节点，方便测试，在激活时和结束技能时都可以打印信息。由于被动技能应用时就需要激活，所以，我们不需要预测它，直接在服务器初始化即可。这是我们现在的ASC里装配技能时的处理逻辑，没有考虑到主动技能和被动技能的区别接下来，我们将修改技能装配的逻辑，让其兼容对被动技能的处理。前面的这一段还是一样，通过技能标签获取到技能实例，并获取到技能未修改前装配的槽位和状态，对技能的状态进行判断voidURPGAbilitySystemComponent::ServerEquipAbility_Implementation(constFGameplayTag&amp;AbilityTag,constFGameplayTag&amp;Slot){constFRPGGameplayTags GameplayTags=FRPGGameplayTags::Get();//获取到技能实例if(FGameplayAbilitySpec*AbilitySpec=GetSpecFromAbilityTag(AbilityTag)){constFGameplayTag&amp;PrevSlot=GetInputTagFromSpec(*AbilitySpec);//技能之前装配的插槽constFGameplayTag&amp;Status=GetStatusTagFromSpec(*AbilitySpec);//当前技能的状态标签//判断技能的状态，技能状态只有在已装配或者已解锁的状态才可以装配if(Status==GameplayTags.Abilities_Status_Equipped||Status==GameplayTags.Abilities_Status_Unlocked){接着，我们先处理目标槽位，判断目标槽位现在是否装配技能，如果装配，我们则获取到装配的技能实例，如果槽位装配的技能和我们需要装配的技能相同，则不做处理。如果槽位的技能是被动技能，我们将通过委托结束技能（被动技能基类在激活技能时，会监听技能结束委托）并且，我们将会清除槽位所有装配的技能（清除装配技能上设置的输入标签）//判断插槽是否有技能，有则需要将其清除if(!SlotIsEmpty(Slot)){//获取目标插槽现在装配的技能if(constFGameplayAbilitySpec*SpecWithSlot=GetSpecWithSlot(Slot)){//技能槽位装配相同的技能，直接返回，不做额外的处理if(AbilityTag.MatchesTagExact(GetAbilityTagFromSpec(*SpecWithSlot))){ClientEquipAbility(AbilityTag,Status,Slot,PrevSlot);return;}//如果是被动技能，我们需要先将技能取消执行if(IsPassiveAbility(*SpecWithSlot)){DeactivatePassiveAbility.Broadcast(GetAbilityTagFromSpec(*SpecWithSlot));}ClearAbilitiesOfSlot(Slot);//清除目标插槽装配的技能}}接下来，我们对需要装配的技能判断，如果它之前没有被装配到技能槽位，并且还是被动技能，证明技能还未被激活，我们需要将技能激活。//技能没有设置到插槽（没有激活）if(!AbilityHasAnySlot(*AbilitySpec)){//如果是被动技能，装配即激活if(IsPassiveAbility(*AbilitySpec)){TryActivateAbility(AbilitySpec-&gt;Handle);}}然后修改技能的的输入标签为装配的槽位//修改技能装配的插槽AssignSlotToAbility(*AbilitySpec,Slot);最后网络同步和触发装配委托回调//回调更新UIClientEquipAbility(AbilityTag,Status,Slot,PrevSlot);MarkAbilitySpecDirty(*AbilitySpec);//立即将其复制到每个客户端逻辑梳理完成，下面为使用到的一些函数boolURPGAbilitySystemComponent::SlotIsEmpty(constFGameplayTag&amp;Slot){FScopedAbilityListLockActiveScopeLoc(*this);for(FGameplayAbilitySpec&amp;AbilitySpec:GetActivatableAbilities()){if(AbilityHasSlot(AbilitySpec,Slot)){returnfalse;}}returntrue;}boolURPGAbilitySystemComponent::AbilityHasSlot(constFGameplayAbilitySpec&amp;Spec,constFGameplayTag&amp;Slot){returnSpec.DynamicAbilityTags.HasTagExact(Slot);}boolURPGAbilitySystemComponent::AbilityHasAnySlot(constFGameplayAbilitySpec&amp;Spec){//通过判断动态标签是否含有Input的标签来判断技能是否装配到槽位returnSpec.DynamicAbilityTags.HasTag(FGameplayTag::RequestGameplayTag(FName("InputTag")));}FGameplayAbilitySpec*URPGAbilitySystemComponent::GetSpecWithSlot(constFGameplayTag&amp;Slot){FScopedAbilityListLockActiveScopeLoc(*this);for(FGameplayAbilitySpec&amp;AbilitySpec:GetActivatableAbilities()){if(AbilityHasSlot(AbilitySpec,Slot)){return&amp;AbilitySpec;}}returnnullptr;}boolURPGAbilitySystemComponent::IsPassiveAbility(constFGameplayAbilitySpec&amp;Spec)const{//从技能配置数据里获取到技能对于的配置信息UAbilityInfo*AbilityInfo=URPGAbilitySystemLibrary::GetAbilityInfo(GetAvatarActor());constFGameplayTag AbilityTag=GetAbilityTagFromSpec(Spec);constFRPGAbilityInfo&amp;Info=AbilityInfo-&gt;FindAbilityInfoForTag(AbilityTag);//判断信息里配置的技能类型是否为被动技能constFGameplayTag AbilityType=Info.AbilityType;returnAbilityType.MatchesTagExact(FRPGGameplayTags::Get().Abilities_Type_Passive);}voidURPGAbilitySystemComponent::AssignSlotToAbility(FGameplayAbilitySpec&amp;Spec,constFGameplayTag&amp;Slot){constFRPGGameplayTags GameplayTags=FRPGGameplayTags::Get();ClearSlot(&amp;Spec);Spec.DynamicAbilityTags.AddTag(Slot);Spec.DynamicAbilityTags.RemoveTag(GameplayTags.Abilities_Status_Unlocked);Spec.DynamicAbilityTags.AddTag(GameplayTags.Abilities_Status_Equipped);}voidURPGAbilitySystemComponent::ClearSlot(FGameplayAbilitySpec*Spec){constFGameplayTag Slot=GetInputTagFromSpec(*Spec);Spec-&gt;DynamicAbilityTags.RemoveTag(Slot);// MarkAbilitySpecDirty(*Spec);}voidURPGAbilitySystemComponent::ClearAbilitiesOfSlot(constFGameplayTag&amp;Slot){FScopedAbilityListLockActiveScopeLock(*this);for(FGameplayAbilitySpec&amp;Spec:GetActivatableAbilities()){if(AbilityHasSlot(&amp;Spec,Slot)){ClearSlot(&amp;Spec);}}}最后展示一下实现装配的所有代码voidURPGAbilitySystemComponent::ServerEquipAbility_Implementation(constFGameplayTag&amp;AbilityTag,constFGameplayTag&amp;Slot){constFRPGGameplayTags GameplayTags=FRPGGameplayTags::Get();//获取到技能实例if(FGameplayAbilitySpec*AbilitySpec=GetSpecFromAbilityTag(AbilityTag)){constFGameplayTag&amp;PrevSlot=GetInputTagFromSpec(*AbilitySpec);//技能之前装配的插槽constFGameplayTag&amp;Status=GetStatusTagFromSpec(*AbilitySpec);//当前技能的状态标签//判断技能的状态，技能状态只有在已装配或者已解锁的状态才可以装配if(Status==GameplayTags.Abilities_Status_Equipped||Status==GameplayTags.Abilities_Status_Unlocked){//判断插槽是否有技能，有则需要将其清除if(!SlotIsEmpty(Slot)){//获取目标插槽现在装配的技能if(constFGameplayAbilitySpec*SpecWithSlot=GetSpecWithSlot(Slot)){//技能槽位装配相同的技能，直接返回，不做额外的处理if(AbilityTag.MatchesTagExact(GetAbilityTagFromSpec(*SpecWithSlot))){ClientEquipAbility(AbilityTag,Status,Slot,PrevSlot);return;}//如果是被动技能，我们需要先将技能取消执行if(IsPassiveAbility(*SpecWithSlot)){DeactivatePassiveAbility.Broadcast(GetAbilityTagFromSpec(*SpecWithSlot));}ClearAbilitiesOfSlot(Slot);//清除目标插槽装配的技能}}//技能没有设置到插槽（没有激活）if(!AbilityHasAnySlot(*AbilitySpec)){//如果是被动技能，装配即激活if(IsPassiveAbility(*AbilitySpec)){TryActivateAbility(AbilitySpec-&gt;Handle);}}//修改技能装配的插槽AssignSlotToAbility(*AbilitySpec,Slot);//回调更新UIClientEquipAbility(AbilityTag,Status,Slot,PrevSlot);MarkAbilitySpecDirty(*AbilitySpec);//立即将其复制到每个客户端}}}运行查看装配后，对应的打印是否能够正常打印。添加被动技能表现特效现在技能可以激活了，我们需要让玩家能够知道被动技能生效的效果，参照之前的debuff应用，我们将参照之前的方式实现，即使出现了问题，那是一种比较好的解耦方式。首先，我们创建一个被动技能表现基类命名为PassiveNiagaraComponent在基类里，我们需要一个设置标签，用于启动时对应的被动技能标签，然后添加一个监听回调的函数。UCLASS()classRPG_APIUPassiveNiagaraComponent:publicUNiagaraComponent{GENERATED_BODY()public:UPassiveNiagaraComponent();//激活此被动技能特效的技能标签UPROPERTY(EditDefaultsOnly)FGameplayTag PassiveSpellTag;protected:virtualvoidBeginPlay()override;/*** 监听技能变动后的委托回调，用于设置此实例是否需要激活* @param AbilityTag 对应的技能的标签* @param bActivate 激活还是关闭*/voidOnPassiveActivate(constFGameplayTag&amp;AbilityTag,boolbActivate);};在构造函数里，将特效自动激活关闭在事件开始时，绑定ASC里被动技能应用委托，通过监听被动技能应用委托来触发回调在回调里，判断标签是否对应，根据需要开启和关闭设置特效组件的开启关闭。UPassiveNiagaraComponent::UPassiveNiagaraComponent(){bAutoActivate=false;}voidUPassiveNiagaraComponent::BeginPlay(){Super::BeginPlay();if(URPGAbilitySystemComponent*RPGASC=Cast&lt;URPGAbilitySystemComponent&gt;(UAbilitySystemBlueprintLibrary::GetAbilitySystemComponent(GetOwner()))){RPGASC-&gt;ActivatePassiveEffect.AddUObject(this,&amp;UPassiveNiagaraComponent::OnPassiveActivate);}elseif(ICombatInterface*CombatInterface=Cast&lt;ICombatInterface&gt;(GetOwner())){//AddWeakLambda 这种绑定方式的主要好处是，当绑定的对象被销毁时，委托不会保持对象的引用，从而避免悬空指针问题和内存泄漏。CombatInterface-&gt;GetOnASCRegisteredDelegate().AddWeakLambda(this,[this](UAbilitySystemComponent*InASC){if(URPGAbilitySystemComponent*RPGASC=Cast&lt;URPGAbilitySystemComponent&gt;(InASC)){RPGASC-&gt;ActivatePassiveEffect.AddUObject(this,&amp;UPassiveNiagaraComponent::OnPassiveActivate);}});}}voidUPassiveNiagaraComponent::OnPassiveActivate(constFGameplayTag&amp;AbilityTag,boolbActivate){//判断技能标签是否一致if(AbilityTag.MatchesTagExact(PassiveSpellTag)){//判断是否需要激活if(bActivate){//不需要重复激活if(!IsActive())Activate();}else{Deactivate();}}}在ASC类里，我们增加一个新的委托类型DECLARE_MULTICAST_DELEGATE_TwoParams(FActivePassiveEffect,constFGameplayTag&amp;/*被动技能标签*/,bool/*激活或取消*/);//被动技能特效监听委托，对应特效是否开启在ASC类里新增一个对应类型的属性FActivePassiveEffect ActivatePassiveEffect;//被动技能对应特效委托增加一个多播函数，它会在每个客户端和服务器运行，保证都能够查看到对应效果，设置Unreliable，用来设置它不是重要的，不需要优先同步/*** 多网络被动特效委托广播，让每个客户端都可以看到特效* @param AbilityTag 被动技能标签* @param bActivate 激活或者关闭*/UFUNCTION(NetMulticast,Unreliable)voidMulticastActivatePassiveEffect(constFGameplayTag&amp;AbilityTag,boolbActivate);然后在函数里调用委托，让每个客户端对应的ASC都会调用此函数voidURPGAbilitySystemComponent::MulticastActivatePassiveEffect_Implementation(constFGameplayTag&amp;AbilityTag,boolbActivate){ActivatePassiveEffect.Broadcast(AbilityTag,bActivate);}然后在我们装配技能时，取消被动执行时，调用它传入false在激活一个被动技能时，我们设置对应的特效激活最后，就是在角色类里，我们需要对应的特效组件，对每一种特效都创建一个对应的特效//光环被动技能特效组件UPROPERTY(VisibleAnywhere)TObjectPtr&lt;UPassiveNiagaraComponent&gt;HaloOfProtectionNiagaraComponent;//回血被动技能特效组件UPROPERTY(VisibleAnywhere)TObjectPtr&lt;UPassiveNiagaraComponent&gt;LifeSiphonNiagaraComponent;//回蓝被动技能特效组件UPROPERTY(VisibleAnywhere)TObjectPtr&lt;UPassiveNiagaraComponent&gt;ManaSiphonNiagaraComponent;//被动技能挂载的组件UPROPERTY(VisibleAnywhere)TObjectPtr&lt;USceneComponent&gt;EffectAttachComponent;然后在构造函数里创建实例，并挂载到特效根组件，我们创建特效根组件的原因是为了保证特效不会跟随角色旋转//实例化被动技能组件，并挂载EffectAttachComponent=CreateDefaultSubobject&lt;USceneComponent&gt;("EffectAttachPoint");EffectAttachComponent-&gt;SetupAttachment(GetRootComponent());HaloOfProtectionNiagaraComponent=CreateDefaultSubobject&lt;UPassiveNiagaraComponent&gt;("HaloOfProtectionComponent");HaloOfProtectionNiagaraComponent-&gt;SetupAttachment(EffectAttachComponent);LifeSiphonNiagaraComponent=CreateDefaultSubobject&lt;UPassiveNiagaraComponent&gt;("LifeSiphonComponent");LifeSiphonNiagaraComponent-&gt;SetupAttachment(EffectAttachComponent);ManaSiphonNiagaraComponent=CreateDefaultSubobject&lt;UPassiveNiagaraComponent&gt;("ManaSiphonComponent");ManaSiphonNiagaraComponent-&gt;SetupAttachment(EffectAttachComponent);我们需要在帧更新里去修改特效根组件的旋转，让其保证相对于世界不会旋转，所以需要覆写帧更新函数virtualvoidTick(floatDeltaSeconds)override;在帧更新函数里，我们每一帧都将其旋转值设置为相对于世界坐标默认为0voidARPGCharacterBase::Tick(floatDeltaSeconds){Super::Tick(DeltaSeconds);//防止特效跟随人物旋转，每一帧更新修改旋转为默认EffectAttachComponent-&gt;SetWorldRotation(FRotator::ZeroRotator);}之前我们没有使用帧更新，它是关掉的，现在我们需要将其开启// 将这个字符设置为true时，将每帧进行更新。不需要可以关闭提高性能。PrimaryActorTick.bCanEverTick=true;接下来，我们编译打开蓝图，查看玩家角色蓝图是否生成了对应的组件我们为每个特效组件设置对应的资产并设置特效组件对应的被动技能，这样，在被动技能被应用时，特效也将会激活。接下来就是运行查看效果。实现被动技能效果在前面，被动技能可以触发对应技能里的激活和结束回调节点，我们可以以此为出发点，来给玩家角色应用GE。我们创建一个基础的被动技能蓝图，将一些公共的配置和函数在此函数完成在蓝图里，我们添加一个设置GE类的变量增加一个添加GE给自身的函数再增加一个通过类删除GE的函数默认激活技能时，调用添加函数，技能结束时删除GE接着，我们增加一个新的GE类这里我先做一个蓝量回复的类，类型设置为时间无限，每一秒执行一次在Modifiers里，我们增加一个属性修改，属性基于之前设置的蓝量回复的值在被动技能里，我们将被动技能基类修改为创建的蓝图基类事件调用修改为调用父节点父节点可以通过右键查找到添加最后修改GE的默认值的类在我们应用了被动技能后，你会发现蓝量在慢慢回复，并且是每一秒回复一次。被动技能这里只是给大家一个实现思路，大家可以实现更多的被动技能。http://www.ppmy.cn/news/1540826.html相关文章【微信小程序_17_生命周期】摘要：本文介绍了小程序的生命周期，包括生命周期的定义、分类、生命周期函数等内容。生命周期分为应用生命周期和页面生命周期，生命周期函数由小程序框架提供，会按次序自动执行，开发人员可利用这些函数在特定时间点执行操作，如在页面加载时初始化数据。 微信小程序_17_生命…阅读更多...【进阶OpenCV】 （21） --卷积神经网络实现人脸检测文章目录 卷积神经网络实现人脸检测一、加载CNN人脸检测模型二、图像预处理三、绘制人脸矩形框 总结 卷积神经网络实现人脸检测 
opencv可以直接通过readnet来读取神经网络。dlib也可以的。 
任务&amp;#xff1a;使用dlib库中的卷积神经网络&amp;#xff08;CNN&amp;#xff09;人脸检测模…阅读更多...OpenGL、OpenCL 和 OpenAL 定义及用途OpenGL 
全称&amp;#xff1a;Open Graphics Library&amp;#xff0c;即开放图形库。是一种跨编程语言、跨平台的编程接口规格&amp;#xff0c;用于二维和三维图形的绘制。它是一个功能强大、调用方便的底层图形库&amp;#xff0c;提供了丰富的绘图函数&amp;#xff0c;包括基本图形绘制、变换、光照…阅读更多...【Lean 4 学习】用Lean 4证明自然数的平方差公式引言 
最近开始学习Lean 4来做数学证明&amp;#xff0c;虽然挺有挑战&amp;#xff0c;但是对于我这个30多岁的大叔来说有种刚学编程时候探索的乐趣hhh自然数平方差公式这个问题&amp;#xff0c;是我刚学了平方和公式&amp;#xff0c;想变变给自己练手用的&amp;#xff0c;结果卡了我好久&amp;#xff0c…阅读更多...入侵及防护：7个迹象说明你的手机可能被入侵！在现代社会中&amp;#xff0c;手机已成为我们生活中不可或缺的一部分。然而&amp;#xff0c;随着智能手机的普及&amp;#xff0c;手机安全问题也日益严重。手机被入侵的风险不仅影响个人隐私&amp;#xff0c;还可能导致财产损失。本文将为你介绍7个迹象&amp;#xff0c;帮助你判断手机是否可能被入侵…阅读更多...electron-vite_10electron-updater软件更新网很多electron-updater更新文章&amp;#xff0c;这里只简单写一下演示代码&amp;#xff1b; 为什么选择 electron-updater插件可以自动更新应用程序,同时支持多个平台;比官方要强; 官方的autoUpdater仅支持macOS 和 Windows 自动更新; 注意是自动&amp;#xff0c;直接更新那种; 脚手架中是…阅读更多...LoadBalancer 类型的 Service工作期间，kube-proxy做了什么？kube-proxy 是 Kubernetes 集群中一个重要的组件&amp;#xff0c;负责实现服务的网络代理和负载均衡功能。当创建一个 LoadBalancer 类型的 Service 时&amp;#xff0c;kube-proxy 在整个过程中扮演了关键角色。以下是 kube-proxy 在 LoadBalancer 类型 Service 创建和使用过程中所做的…阅读更多...CentOS 8配置阿里云yum源最近正好搞一套3.x体系的大数据技术集群&amp;#xff0c;用CentOS8的系统&amp;#xff0c;发现默认自带的所有yum源貌似无法使用&amp;#xff0c;这里记录一下配置阿里的yum源。后面研究了一下&amp;#xff0c;CentOS 8现在24年&amp;#xff0c;最好是慎用&amp;#xff0c;因为往后的系统升级就没有完全…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:22 +0000</pubDate>
    </item>
    <item>
      <title>【微信小程序_17_生命周期】</title>
      <link>https://www.ppmy.cn/news/1540825.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【微信小程序_17_生命周期】news/2025/10/31 22:20:20/摘要：本文介绍了小程序的生命周期，包括生命周期的定义、分类、生命周期函数等内容。生命周期分为应用生命周期和页面生命周期，生命周期函数由小程序框架提供，会按次序自动执行，开发人员可利用这些函数在特定时间点执行操作，如在页面加载时初始化数据。微信小程序_17_生命周期1.生命周期概念2.生命周期分类2.1 应用生命周期onLaunchonShowonHide2.2 页面生命周期onLoadonShowonReadyonHideonUnload3.生命周期函数1.生命周期概念定义：生命周期是指一个对象从创建到运行到销毁的整个阶段，强调时间段。对于小程序来说，小程序的启动表示生命周期的开始，小程序的关闭表示生命周期的结束，中间运行的过程就是小程序的生命周期。举例：就像一个人从出生到离世的过程，出生是生命的开始，离世是生命的结束，中间的一生就是人的生命周期。小程序也一样，从启动到关闭的整个过程就是其生命周期。2.生命周期分类2.1 应用生命周期定义：特指小程序从启动、运行到销毁的过程。函数onLaunch在小程序初始化完成时执行，全局只触发一次，可用于做一些初始化工作，例如初始化数据、设置默认配置等。示例代码：App({http://www.ppmy.cn/news/1540825.html相关文章【进阶OpenCV】 （21） --卷积神经网络实现人脸检测文章目录 卷积神经网络实现人脸检测一、加载CNN人脸检测模型二、图像预处理三、绘制人脸矩形框 总结 卷积神经网络实现人脸检测 
opencv可以直接通过readnet来读取神经网络。dlib也可以的。 
任务&amp;#xff1a;使用dlib库中的卷积神经网络&amp;#xff08;CNN&amp;#xff09;人脸检测模…阅读更多...OpenGL、OpenCL 和 OpenAL 定义及用途OpenGL 
全称&amp;#xff1a;Open Graphics Library&amp;#xff0c;即开放图形库。是一种跨编程语言、跨平台的编程接口规格&amp;#xff0c;用于二维和三维图形的绘制。它是一个功能强大、调用方便的底层图形库&amp;#xff0c;提供了丰富的绘图函数&amp;#xff0c;包括基本图形绘制、变换、光照…阅读更多...【Lean 4 学习】用Lean 4证明自然数的平方差公式引言 
最近开始学习Lean 4来做数学证明&amp;#xff0c;虽然挺有挑战&amp;#xff0c;但是对于我这个30多岁的大叔来说有种刚学编程时候探索的乐趣hhh自然数平方差公式这个问题&amp;#xff0c;是我刚学了平方和公式&amp;#xff0c;想变变给自己练手用的&amp;#xff0c;结果卡了我好久&amp;#xff0c…阅读更多...入侵及防护：7个迹象说明你的手机可能被入侵！在现代社会中&amp;#xff0c;手机已成为我们生活中不可或缺的一部分。然而&amp;#xff0c;随着智能手机的普及&amp;#xff0c;手机安全问题也日益严重。手机被入侵的风险不仅影响个人隐私&amp;#xff0c;还可能导致财产损失。本文将为你介绍7个迹象&amp;#xff0c;帮助你判断手机是否可能被入侵…阅读更多...electron-vite_10electron-updater软件更新网很多electron-updater更新文章&amp;#xff0c;这里只简单写一下演示代码&amp;#xff1b; 为什么选择 electron-updater插件可以自动更新应用程序,同时支持多个平台;比官方要强; 官方的autoUpdater仅支持macOS 和 Windows 自动更新; 注意是自动&amp;#xff0c;直接更新那种; 脚手架中是…阅读更多...LoadBalancer 类型的 Service工作期间，kube-proxy做了什么？kube-proxy 是 Kubernetes 集群中一个重要的组件&amp;#xff0c;负责实现服务的网络代理和负载均衡功能。当创建一个 LoadBalancer 类型的 Service 时&amp;#xff0c;kube-proxy 在整个过程中扮演了关键角色。以下是 kube-proxy 在 LoadBalancer 类型 Service 创建和使用过程中所做的…阅读更多...CentOS 8配置阿里云yum源最近正好搞一套3.x体系的大数据技术集群&amp;#xff0c;用CentOS8的系统&amp;#xff0c;发现默认自带的所有yum源貌似无法使用&amp;#xff0c;这里记录一下配置阿里的yum源。后面研究了一下&amp;#xff0c;CentOS 8现在24年&amp;#xff0c;最好是慎用&amp;#xff0c;因为往后的系统升级就没有完全…阅读更多...【算法】---栈与队列基础前置准备 
数据结构篇&amp;#xff1a;学习过栈与队列这两种基本数据结构 前面会迅速回顾栈与队列的使用 
本篇以Java为主&amp;#xff0c; 其它语言可自行对应内置的栈与队列容器。 
栈 
栈是一种后进先出的容器。 如下图&amp;#xff0c; 栈只有一个开口。 
栈顶&amp;#xff1a;栈的开口处&amp;a…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:21 +0000</pubDate>
    </item>
    <item>
      <title>【进阶OpenCV】 （21） --卷积神经网络实现人脸检测</title>
      <link>https://www.ppmy.cn/news/1540824.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【进阶OpenCV】 （21） --卷积神经网络实现人脸检测news/2025/10/31 22:20:19/文章目录卷积神经网络实现人脸检测一、加载CNN人脸检测模型二、图像预处理三、绘制人脸矩形框总结卷积神经网络实现人脸检测opencv可以直接通过readnet来读取神经网络。dlib也可以的。任务：使用dlib库中的卷积神经网络（CNN）人脸检测模型来检测一张图片中的人脸，并使用OpenCV库在检测到的人脸周围绘制矩形框。一、加载CNN人脸检测模型这个模型可以用来检测图片中的人脸。cnn_face_detector=dlib.cnn_face_detection_model_v1("mmod_human_face_detector.dat")二、图像预处理使用加载好的网络模型对图像进行处理，使用加载的CNN人脸检测模型对图片img进行人脸检测。img=cv2.imread("pic.jpg")faces=cnn_face_detector(img,0)--0:是一个可选参数，表示对图像进行上采样次数（即图像的缩放级别），这里设置为0表示不进行额外的上采样。--faces:是一个包含检测到的人脸对象的列表。三、绘制人脸矩形框遍历每一个人脸列表，fordinfaces:# 计算每个人脸的位置rect=d.rectleft=rect.left()top=rect.top()right=rect.right()bottom=rect.bottom()# 绘制人脸对应的矩形框cv2.rectangle(img,(left,top),(right,bottom),(0,255,0),3)cv2.imshow("result",img)k=cv2.waitKey()cv2.destroyAllWindows()总结本篇介绍了如何通过使用dlib库中的卷积神经网络（CNN）人脸检测模型来检测一张图片中的人脸。注意！！：为例减少模型的计算，使用加载的CNN人脸检测模型对图片进行人脸检测时，上采样次数可以少一点。http://www.ppmy.cn/news/1540824.html相关文章OpenGL、OpenCL 和 OpenAL 定义及用途OpenGL 
全称&amp;#xff1a;Open Graphics Library&amp;#xff0c;即开放图形库。是一种跨编程语言、跨平台的编程接口规格&amp;#xff0c;用于二维和三维图形的绘制。它是一个功能强大、调用方便的底层图形库&amp;#xff0c;提供了丰富的绘图函数&amp;#xff0c;包括基本图形绘制、变换、光照…阅读更多...【Lean 4 学习】用Lean 4证明自然数的平方差公式引言 
最近开始学习Lean 4来做数学证明&amp;#xff0c;虽然挺有挑战&amp;#xff0c;但是对于我这个30多岁的大叔来说有种刚学编程时候探索的乐趣hhh自然数平方差公式这个问题&amp;#xff0c;是我刚学了平方和公式&amp;#xff0c;想变变给自己练手用的&amp;#xff0c;结果卡了我好久&amp;#xff0c…阅读更多...入侵及防护：7个迹象说明你的手机可能被入侵！在现代社会中&amp;#xff0c;手机已成为我们生活中不可或缺的一部分。然而&amp;#xff0c;随着智能手机的普及&amp;#xff0c;手机安全问题也日益严重。手机被入侵的风险不仅影响个人隐私&amp;#xff0c;还可能导致财产损失。本文将为你介绍7个迹象&amp;#xff0c;帮助你判断手机是否可能被入侵…阅读更多...electron-vite_10electron-updater软件更新网很多electron-updater更新文章&amp;#xff0c;这里只简单写一下演示代码&amp;#xff1b; 为什么选择 electron-updater插件可以自动更新应用程序,同时支持多个平台;比官方要强; 官方的autoUpdater仅支持macOS 和 Windows 自动更新; 注意是自动&amp;#xff0c;直接更新那种; 脚手架中是…阅读更多...LoadBalancer 类型的 Service工作期间，kube-proxy做了什么？kube-proxy 是 Kubernetes 集群中一个重要的组件&amp;#xff0c;负责实现服务的网络代理和负载均衡功能。当创建一个 LoadBalancer 类型的 Service 时&amp;#xff0c;kube-proxy 在整个过程中扮演了关键角色。以下是 kube-proxy 在 LoadBalancer 类型 Service 创建和使用过程中所做的…阅读更多...CentOS 8配置阿里云yum源最近正好搞一套3.x体系的大数据技术集群&amp;#xff0c;用CentOS8的系统&amp;#xff0c;发现默认自带的所有yum源貌似无法使用&amp;#xff0c;这里记录一下配置阿里的yum源。后面研究了一下&amp;#xff0c;CentOS 8现在24年&amp;#xff0c;最好是慎用&amp;#xff0c;因为往后的系统升级就没有完全…阅读更多...【算法】---栈与队列基础前置准备 
数据结构篇&amp;#xff1a;学习过栈与队列这两种基本数据结构 前面会迅速回顾栈与队列的使用 
本篇以Java为主&amp;#xff0c; 其它语言可自行对应内置的栈与队列容器。 
栈 
栈是一种后进先出的容器。 如下图&amp;#xff0c; 栈只有一个开口。 
栈顶&amp;#xff1a;栈的开口处&amp;a…阅读更多...二层交换机的工作原理与局域网设备通信详解二层交换机&amp;#xff08;Layer 2 Switch&amp;#xff09;在计算机网络中是用于连接同一个局域网&amp;#xff08;LAN&amp;#xff09;内的设备&amp;#xff0c;它的核心作用是根据MAC 地址来转发数据包&amp;#xff0c;使得同一局域网中的不同设备能够相互通信。其主要功能是通过创建独立的冲突域来优…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:19 +0000</pubDate>
    </item>
    <item>
      <title>OpenGL、OpenCL 和 OpenAL 定义及用途</title>
      <link>https://www.ppmy.cn/news/1540823.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维OpenGL、OpenCL 和 OpenAL 定义及用途news/2025/10/31 22:20:18/OpenGL全称：Open Graphics Library，即开放图形库。是一种跨编程语言、跨平台的编程接口规格，用于二维和三维图形的绘制。它是一个功能强大、调用方便的底层图形库，提供了丰富的绘图函数，包括基本图形绘制、变换、光照、颜色、纹理等方面的功能，可用于创建复杂的三维场景和交互式应用程序。用途：游戏开发：能够为游戏提供高质量的实时 3D 图形渲染，创造出逼真的游戏场景和精彩的视觉效果，如各种大型 3D 游戏《古墓丽影》《使命召唤》等都广泛使用 OpenGL 来实现游戏画面的绘制。动画制作：在三维动画制作中，OpenGL 可以用于快速渲染动画场景，提高动画的制作效率和质量，像著名的动画制作软件 3D Studio Max 就是使用 OpenGL 的典型代表。科学可视化：帮助科学家和研究人员将复杂的科学数据以直观的图形形式呈现出来，以便更好地理解和分析数据，例如在气象预测、医学影像、地质勘探等领域的数据分析和可视化中发挥重要作用。虚拟现实和增强现实：为 VR 头盔和 AR 应用程序提供高质量的图形渲染，创造出沉浸式的虚拟环境和逼真的增强现实效果，让用户获得身临其境的体验。CAD/CAM 设计：在计算机辅助设计和计算机辅助制造领域，OpenGL 用于精确地绘制和显示三维模型，方便设计师进行产品设计和制造工艺的规划。OpenCL全称：Open Computing Language，即开放运算语言。是第一个面向异构系统通用目的并行编程的开放式、免费标准，也是一个统一的编程环境。它允许软件开发人员为高性能计算服务器、桌面计算系统、手持设备编写高效轻便的代码，广泛适用于多核心处理器（CPU）、图形处理器（GPU）、Cell 类型架构以及数字信号处理器（DSP）等其他并行处理器。用途：科学计算：在科学研究中，许多复杂的计算任务需要大量的计算资源和并行处理能力。OpenCL 可以用于加速物理模拟、生物信息学、气象预测等科学计算任务，例如在量子力学计算、蛋白质结构预测等方面的应用，能够大大缩短计算时间，提高研究效率。图像处理：对于图像的处理和分析，如图像滤波、图像识别、图像增强等操作，OpenCL 可以充分利用 GPU 等并行计算设备的优势，快速处理大量的图像数据，提高图像处理的速度和质量。比如对高分辨率照片的批量处理、视频的实时特效处理等。机器学习和人工智能：在机器学习和人工智能领域，训练神经网络、数据挖掘等任务通常需要大量的计算。OpenCL 可以用于加速这些计算过程，提高机器学习算法的训练速度和性能，使模型能够更快地收敛和得到更准确的结果。金融分析：在金融领域，对大量的金融数据进行分析和风险评估是一项重要的工作。OpenCL 可以用于加速金融模型的计算，如期权定价、投资组合优化等，帮助金融机构更快地做出决策。OpenAL全称：Open Audio Library，即开放音频库。是自由软件界的跨平台音效 API。它主要用于多通道三维位置音效的特效表现，其 API 风格模仿自 OpenGL。用途：游戏音效：在游戏中，OpenAL 用于实现多通道三维位置音效，使玩家能够根据声音的来源方向、距离等因素感受到逼真的音效体验，增强游戏的沉浸感。例如在《生化奇兵》《毁灭战士 3》等游戏中，OpenAL 被用于营造紧张刺激的游戏音效氛围。音频编辑和处理软件：一些音频编辑和处理软件使用 OpenAL 来实现音频的播放、处理和特效添加等功能。例如，音频编辑人员可以使用支持 OpenAL 的软件来对音频进行混音、特效处理等操作，提高音频的质量和表现力。虚拟现实和模拟应用：在虚拟现实和模拟应用中，OpenAL 可以为用户提供逼真的音频效果，增强虚拟环境的真实感。例如在飞行模拟器、驾驶模拟器等应用中，OpenAL 可以模拟飞机发动机的声音、汽车行驶的声音等，使用户感觉更加真实。多媒体应用：在多媒体播放器、在线视频平台等多媒体应用中，OpenAL 可以用于音频的播放和处理，提供高质量的音频输出。例如，一些高清视频播放器使用 OpenAL 来实现音频的解码和播放，提高音频的质量和同步性。http://www.ppmy.cn/news/1540823.html相关文章【Lean 4 学习】用Lean 4证明自然数的平方差公式引言 
最近开始学习Lean 4来做数学证明&amp;#xff0c;虽然挺有挑战&amp;#xff0c;但是对于我这个30多岁的大叔来说有种刚学编程时候探索的乐趣hhh自然数平方差公式这个问题&amp;#xff0c;是我刚学了平方和公式&amp;#xff0c;想变变给自己练手用的&amp;#xff0c;结果卡了我好久&amp;#xff0c…阅读更多...入侵及防护：7个迹象说明你的手机可能被入侵！在现代社会中&amp;#xff0c;手机已成为我们生活中不可或缺的一部分。然而&amp;#xff0c;随着智能手机的普及&amp;#xff0c;手机安全问题也日益严重。手机被入侵的风险不仅影响个人隐私&amp;#xff0c;还可能导致财产损失。本文将为你介绍7个迹象&amp;#xff0c;帮助你判断手机是否可能被入侵…阅读更多...electron-vite_10electron-updater软件更新网很多electron-updater更新文章&amp;#xff0c;这里只简单写一下演示代码&amp;#xff1b; 为什么选择 electron-updater插件可以自动更新应用程序,同时支持多个平台;比官方要强; 官方的autoUpdater仅支持macOS 和 Windows 自动更新; 注意是自动&amp;#xff0c;直接更新那种; 脚手架中是…阅读更多...LoadBalancer 类型的 Service工作期间，kube-proxy做了什么？kube-proxy 是 Kubernetes 集群中一个重要的组件&amp;#xff0c;负责实现服务的网络代理和负载均衡功能。当创建一个 LoadBalancer 类型的 Service 时&amp;#xff0c;kube-proxy 在整个过程中扮演了关键角色。以下是 kube-proxy 在 LoadBalancer 类型 Service 创建和使用过程中所做的…阅读更多...CentOS 8配置阿里云yum源最近正好搞一套3.x体系的大数据技术集群&amp;#xff0c;用CentOS8的系统&amp;#xff0c;发现默认自带的所有yum源貌似无法使用&amp;#xff0c;这里记录一下配置阿里的yum源。后面研究了一下&amp;#xff0c;CentOS 8现在24年&amp;#xff0c;最好是慎用&amp;#xff0c;因为往后的系统升级就没有完全…阅读更多...【算法】---栈与队列基础前置准备 
数据结构篇&amp;#xff1a;学习过栈与队列这两种基本数据结构 前面会迅速回顾栈与队列的使用 
本篇以Java为主&amp;#xff0c; 其它语言可自行对应内置的栈与队列容器。 
栈 
栈是一种后进先出的容器。 如下图&amp;#xff0c; 栈只有一个开口。 
栈顶&amp;#xff1a;栈的开口处&amp;a…阅读更多...二层交换机的工作原理与局域网设备通信详解二层交换机&amp;#xff08;Layer 2 Switch&amp;#xff09;在计算机网络中是用于连接同一个局域网&amp;#xff08;LAN&amp;#xff09;内的设备&amp;#xff0c;它的核心作用是根据MAC 地址来转发数据包&amp;#xff0c;使得同一局域网中的不同设备能够相互通信。其主要功能是通过创建独立的冲突域来优…阅读更多...5. Node.js Http模块2.4 Http模块 
2.4.1创建Http服务端 
//1.导入http模块
let httprequire(http)//2.创建服务对象
let serverhttp.createServer((request,response)&gt;{console.log(request.method)        //获取请求方式console.log(request.url)           //获取请求url(路径和参数部份)co…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:18 +0000</pubDate>
    </item>
    <item>
      <title>【Lean 4 学习】用Lean 4证明自然数的平方差公式</title>
      <link>https://www.ppmy.cn/news/1540822.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【Lean 4 学习】用Lean 4证明自然数的平方差公式news/2025/10/31 22:20:17/引言最近开始学习Lean 4来做数学证明，虽然挺有挑战，但是对于我这个30多岁的大叔来说有种刚学编程时候探索的乐趣hhh自然数平方差公式这个问题，是我刚学了平方和公式，想变变给自己练手用的，结果卡了我好久，因为要的是自然数，而非整数，所以需要加上大小约束关系，而加上关系之后怎么使用rw规则就晕了最后各种尝试终于搞定小小记录一下ps 由于一些语法规则还搞的不是很清楚，现在先记录一下通过编译验证的，一些重要细节的补充，等我学习更深入了再回来补充～Lean 4 codetheorem square_diff_nat (a b: ℕ) (h: b ≤ a) : a ^ 2 - b ^ 2 = (a + b) * (a - b) := bycalca ^ 2 - b ^ 2= a * a - b * b := by repeat rw [Nat.pow_two]_ = a * a - b * b + 0 := by rw [add_zero (a * a - b * b)]_ = a * a - b * b + (a * b - a * b) := by rw [←Nat.sub_self (a * b)]have h1: a * b ≤ a * b := by rflhave h2: b * b ≤ a * a := Nat.mul_self_le_mul_self hcalc_ = a * a + (a * b - a * b) - b * b  := by rw[←Nat.sub_add_comm h2]_ = a * a + a * b - a * b - b * b := by rw [← Nat.add_sub_assoc h1]_ = a * (a + b) - (b * (a + b)) := by rw[←Nat.mul_add, Nat.sub_sub, ← Nat.add_mul, Nat.mul_comm (a + b) b]_ = (a + b) * (a - b) := by rw [← Nat.sub_mul, Nat.mul_comm]http://www.ppmy.cn/news/1540822.html相关文章入侵及防护：7个迹象说明你的手机可能被入侵！在现代社会中&amp;#xff0c;手机已成为我们生活中不可或缺的一部分。然而&amp;#xff0c;随着智能手机的普及&amp;#xff0c;手机安全问题也日益严重。手机被入侵的风险不仅影响个人隐私&amp;#xff0c;还可能导致财产损失。本文将为你介绍7个迹象&amp;#xff0c;帮助你判断手机是否可能被入侵…阅读更多...electron-vite_10electron-updater软件更新网很多electron-updater更新文章&amp;#xff0c;这里只简单写一下演示代码&amp;#xff1b; 为什么选择 electron-updater插件可以自动更新应用程序,同时支持多个平台;比官方要强; 官方的autoUpdater仅支持macOS 和 Windows 自动更新; 注意是自动&amp;#xff0c;直接更新那种; 脚手架中是…阅读更多...LoadBalancer 类型的 Service工作期间，kube-proxy做了什么？kube-proxy 是 Kubernetes 集群中一个重要的组件&amp;#xff0c;负责实现服务的网络代理和负载均衡功能。当创建一个 LoadBalancer 类型的 Service 时&amp;#xff0c;kube-proxy 在整个过程中扮演了关键角色。以下是 kube-proxy 在 LoadBalancer 类型 Service 创建和使用过程中所做的…阅读更多...CentOS 8配置阿里云yum源最近正好搞一套3.x体系的大数据技术集群&amp;#xff0c;用CentOS8的系统&amp;#xff0c;发现默认自带的所有yum源貌似无法使用&amp;#xff0c;这里记录一下配置阿里的yum源。后面研究了一下&amp;#xff0c;CentOS 8现在24年&amp;#xff0c;最好是慎用&amp;#xff0c;因为往后的系统升级就没有完全…阅读更多...【算法】---栈与队列基础前置准备 
数据结构篇&amp;#xff1a;学习过栈与队列这两种基本数据结构 前面会迅速回顾栈与队列的使用 
本篇以Java为主&amp;#xff0c; 其它语言可自行对应内置的栈与队列容器。 
栈 
栈是一种后进先出的容器。 如下图&amp;#xff0c; 栈只有一个开口。 
栈顶&amp;#xff1a;栈的开口处&amp;a…阅读更多...二层交换机的工作原理与局域网设备通信详解二层交换机&amp;#xff08;Layer 2 Switch&amp;#xff09;在计算机网络中是用于连接同一个局域网&amp;#xff08;LAN&amp;#xff09;内的设备&amp;#xff0c;它的核心作用是根据MAC 地址来转发数据包&amp;#xff0c;使得同一局域网中的不同设备能够相互通信。其主要功能是通过创建独立的冲突域来优…阅读更多...5. Node.js Http模块2.4 Http模块 
2.4.1创建Http服务端 
//1.导入http模块
let httprequire(http)//2.创建服务对象
let serverhttp.createServer((request,response)&gt;{console.log(request.method)        //获取请求方式console.log(request.url)           //获取请求url(路径和参数部份)co…阅读更多...基于SpringBoot的课程辅助教学系统作者&amp;#xff1a;计算机学姐 开发技术&amp;#xff1a;SpringBoot、SSM、Vue、MySQL、JSP、ElementUI、Python、小程序等&amp;#xff0c;“文末源码”。 专栏推荐&amp;#xff1a;前后端分离项目源码、SpringBoot项目源码、Vue项目源码、SSM项目源码、微信小程序源码 精品专栏&amp;#xff1a;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:17 +0000</pubDate>
    </item>
    <item>
      <title>入侵及防护：7个迹象说明你的手机可能被入侵！</title>
      <link>https://www.ppmy.cn/news/1540821.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维入侵及防护：7个迹象说明你的手机可能被入侵！news/2025/10/31 22:20:15/在现代社会中，手机已成为我们生活中不可或缺的一部分。然而，随着智能手机的普及，手机安全问题也日益严重。手机被入侵的风险不仅影响个人隐私，还可能导致财产损失。本文将为你介绍7个迹象，帮助你判断手机是否可能被入侵，并提供相应的防护建议。1. 手机运行缓慢如果你的手机突然变得异常缓慢，可能是被恶意软件入侵的迹象。恶意软件会占用手机的系统资源，导致设备运行不畅。如果你发现手机在打开应用程序、切换界面时反应迟钝，建议进行全面的病毒扫描。2. 不明应用程序定期检查手机上的应用程序，如果发现一些你未曾下载或不记得安装的应用，可能是黑客通过恶意软件在你的手机上安装了后门程序。这些应用可能会窃取你的个人信息或监控你的活动。3. 电池消耗异常手机电池的消耗速度加快也是一个警示信号。正常情况下，电池的使用时间应该是相对稳定的。如果你发现电池在短时间内迅速耗尽，可能是因为某些恶意程序在后台运行，消耗了大量的电量。4. 数据流量异常如果你发现手机的数据流量使用量异常增加，可能是手机被入侵的迹象。黑客可能通过恶意软件在后台上传或下载数据，导致流量消耗增加。建议定期查看数据使用情况，并对异常流量进行调查。5. 短信或通话记录异常如果你发现手机上有不明的短信或通话记录，尤其是那些你没有发送或接听的，可能是黑客在监控你的通讯。此时，建议立即更改手机密码，并检查是否有其他异常活动。6. 手机频繁重启手机频繁重启或自动关机也是一个警示信号。恶意软件可能会干扰手机的正常运行，导致设备出现异常。如果你的手机经常无故重启，建议进行系统恢复或重置。7. 账户安全警报如果你收到来自社交媒体、邮箱等账户的安全警报，提示有不明设备尝试登录，说明你的账户可能已经被入侵。此时，立即更改密码，并启用双重验证，以增强账户的安全性。防护建议定期更新系统和应用：确保你的手机操作系统和应用程序始终保持最新版本，以修补已知的安全漏洞。安装安全软件：选择信誉良好的安全软件进行定期扫描，及时发现并清除恶意软件。谨慎下载应用：只从官方应用商店下载应用，避免下载来源不明的应用程序。定期备份数据：定期备份手机数据，以防止数据丢失或被恶意软件加密。使用强密码：为手机和各类账户设置强密码，并定期更换。启用双重验证：在支持的账户上启用双重验证，增加账户安全性。保持警惕：时刻关注手机的异常行为，及时采取措施。总之，手机安全问题不容忽视。通过了解手机被入侵的迹象，并采取相应的防护措施，可以有效降低风险，保护个人隐私和财产安全。希望本文能帮助你更好地维护手机安全，享受数字生活的便利。http://www.ppmy.cn/news/1540821.html相关文章electron-vite_10electron-updater软件更新网很多electron-updater更新文章&amp;#xff0c;这里只简单写一下演示代码&amp;#xff1b; 为什么选择 electron-updater插件可以自动更新应用程序,同时支持多个平台;比官方要强; 官方的autoUpdater仅支持macOS 和 Windows 自动更新; 注意是自动&amp;#xff0c;直接更新那种; 脚手架中是…阅读更多...LoadBalancer 类型的 Service工作期间，kube-proxy做了什么？kube-proxy 是 Kubernetes 集群中一个重要的组件&amp;#xff0c;负责实现服务的网络代理和负载均衡功能。当创建一个 LoadBalancer 类型的 Service 时&amp;#xff0c;kube-proxy 在整个过程中扮演了关键角色。以下是 kube-proxy 在 LoadBalancer 类型 Service 创建和使用过程中所做的…阅读更多...CentOS 8配置阿里云yum源最近正好搞一套3.x体系的大数据技术集群&amp;#xff0c;用CentOS8的系统&amp;#xff0c;发现默认自带的所有yum源貌似无法使用&amp;#xff0c;这里记录一下配置阿里的yum源。后面研究了一下&amp;#xff0c;CentOS 8现在24年&amp;#xff0c;最好是慎用&amp;#xff0c;因为往后的系统升级就没有完全…阅读更多...【算法】---栈与队列基础前置准备 
数据结构篇&amp;#xff1a;学习过栈与队列这两种基本数据结构 前面会迅速回顾栈与队列的使用 
本篇以Java为主&amp;#xff0c; 其它语言可自行对应内置的栈与队列容器。 
栈 
栈是一种后进先出的容器。 如下图&amp;#xff0c; 栈只有一个开口。 
栈顶&amp;#xff1a;栈的开口处&amp;a…阅读更多...二层交换机的工作原理与局域网设备通信详解二层交换机&amp;#xff08;Layer 2 Switch&amp;#xff09;在计算机网络中是用于连接同一个局域网&amp;#xff08;LAN&amp;#xff09;内的设备&amp;#xff0c;它的核心作用是根据MAC 地址来转发数据包&amp;#xff0c;使得同一局域网中的不同设备能够相互通信。其主要功能是通过创建独立的冲突域来优…阅读更多...5. Node.js Http模块2.4 Http模块 
2.4.1创建Http服务端 
//1.导入http模块
let httprequire(http)//2.创建服务对象
let serverhttp.createServer((request,response)&gt;{console.log(request.method)        //获取请求方式console.log(request.url)           //获取请求url(路径和参数部份)co…阅读更多...基于SpringBoot的课程辅助教学系统作者&amp;#xff1a;计算机学姐 开发技术&amp;#xff1a;SpringBoot、SSM、Vue、MySQL、JSP、ElementUI、Python、小程序等&amp;#xff0c;“文末源码”。 专栏推荐&amp;#xff1a;前后端分离项目源码、SpringBoot项目源码、Vue项目源码、SSM项目源码、微信小程序源码 精品专栏&amp;#xff1a;…阅读更多...如何使用Python调用API数据在信息爆炸的今天&amp;#xff0c;数据成为了新的石油。API&amp;#xff08;应用程序编程接口&amp;#xff09;作为获取数据的重要途径&amp;#xff0c;已经深入到软件开发的各个角落。Python&amp;#xff0c;因其简洁的语法和强大的功能&amp;#xff0c;成为了调用API数据的首选语言之一。本文将带你了…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:16 +0000</pubDate>
    </item>
    <item>
      <title>electron-vite_10electron-updater软件更新</title>
      <link>https://www.ppmy.cn/news/1540820.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维electron-vite_10electron-updater软件更新news/2025/10/31 22:20:14/网很多electron-updater更新文章，这里只简单写一下演示代码；为什么选择electron-updater插件可以自动更新应用程序,同时支持多个平台;比官方要强;官方的autoUpdater仅支持macOS 和 Windows 自动更新; 注意是自动，直接更新那种;脚手架中是含有的electron-updater的// 安装依赖如果你没有的话npm i electron-updater// 引入项目const{autoUpdater}=require('electron-updater');// 配置项autoUpdater.forceDevUpdateConfig=true//开发环境下强制更新autoUpdater.autoDownload=false;// 自动下载autoUpdater.autoInstallOnAppQuit=true;// 应用退出后自动安装封装一个简单方法/****************  检查版本更新 start ***************** autoUpdater.checkForUpdates(); 检测是否最新版* autoUpdater.downloadUpdate(); 下载最新版
*/// 检查是否更新// 是否开启了检测letisStartCheckForUpdates=false;letcustomDialog:any=null;functioncheckForUpdates(mainWindow,url?:string){if(isStartCheckForUpdates){return;}isStartCheckForUpdates=true;if(typeofurl!=='string'){url='https://xxx.cn/yyhDesktopUpdate/'}// 指定更新地址autoUpdater.setFeedURL(url);autoUpdater.autoDownload=false;autoUpdater.checkForUpdates();// 开始检查更新事件; 提示语: '正在检查更新';autoUpdater.on('checking-for-update',function(){});// 发现可更新版本; 提示语: 检测到新版本，准备下载autoUpdater.on('update-available',function(){if(customDialog){customDialog.close();customDialog=null;}// 系统原生弹窗让用户选择是否更新customDialog=dialog.showMessageBox(mainWindow,{type:'info',title:'检测到有新版本',message:'检测到新版本,是否立即更新?',buttons:['确定','取消'],cancelId:1,// 指定“取消”按钮的索引}).then((result)=&gt;{customDialog=null;if(result.response===0){// 下载最新版autoUpdater.downloadUpdate();}else{// 用户点击了“取消”}isStartCheckForUpdates=false;}).catch(()=&gt;{customDialog=null;isStartCheckForUpdates=false;});});// 没有可更新版本事件; 提示语: '已经是最新版本';autoUpdater.on('update-not-available',function(){isStartCheckForUpdates=false;});// 更新发生错误时事件; 提示语: '软件更新异常,请重试';autoUpdater.on('error',function(){if(customDialog){customDialog.close();customDialog=null;}// 提示用户更新失败customDialog=dialog.showMessageBox({type:'info',title:'更新检查',message:'软件更新异常,请重试!',buttons:['好的'],}).then(()=&gt;{customDialog=null;});});// 更新下载完毕后事件; 提示语: '下载完成,准备安装';autoUpdater.on('update-downloaded',function(){if(customDialog){customDialog.close();customDialog=null;}// 下载后安装更新customDialog=dialog.showMessageBox({type:'info',title:'更新完成',message:'更新已下载完成，是否立即安装应用?',buttons:['立即安装'],}).then((result)=&gt;{customDialog=null;if(result.response===0){autoUpdater.quitAndInstall();}}).catch(()=&gt;{customDialog=null;});});// 更新下载进度事件; 提示语: '软件下载中,请耐心等待';autoUpdater.on('download-progress',function(progressObj){/** progressObj {total: 1000000, // 总字节数，例如 1MBdelta: 1024, // 自上次事件以来下载的字节数，例如 1KBtransferred: 512000, // 已下载的总字节数，例如 512KBpercent: 0.5, // 下载进度的百分比，例如 50%bytesPerSecond: 2048 // 当前下载速度，例如 2KB/s}*/// 使用原生进度条if(progressObj.percent!==undefined){mainWindow.setProgressBar(progressObj.percent);}else{mainWindow.setProgressBar(-1);}});}/****************  检查版本更新 end *****************/调用mainWindow.on('ready-to-show',()=&gt;{mainWindow.webContents.closeDevTools();mainWindow.show()// 调用检测方法checkForUpdates(mainWindow);})软件更新win下载到哪个文件夹了C:\Users\Administrator\AppData\Local判断当前是那个系统_如果做系统差异化说不定用得到/* 判断当前是那个系统* 如果 process.platform 返回的是 'darwin'，则表示当前操作系统是 macOS。* 如果 process.platform 返回的是 'win32'，则表示当前操作系统是 Windows。- 如果 process.arch 返回的是 'ia32'，则表示当前系统是 32 位。- 如果 process.arch 返回的是 'x64'，则表示当前系统是 64 位。* 如果 process.platform 返回的是 'linux'，则表示当前操作系统是 Linux。
*/http://www.ppmy.cn/news/1540820.html相关文章LoadBalancer 类型的 Service工作期间，kube-proxy做了什么？kube-proxy 是 Kubernetes 集群中一个重要的组件&amp;#xff0c;负责实现服务的网络代理和负载均衡功能。当创建一个 LoadBalancer 类型的 Service 时&amp;#xff0c;kube-proxy 在整个过程中扮演了关键角色。以下是 kube-proxy 在 LoadBalancer 类型 Service 创建和使用过程中所做的…阅读更多...CentOS 8配置阿里云yum源最近正好搞一套3.x体系的大数据技术集群&amp;#xff0c;用CentOS8的系统&amp;#xff0c;发现默认自带的所有yum源貌似无法使用&amp;#xff0c;这里记录一下配置阿里的yum源。后面研究了一下&amp;#xff0c;CentOS 8现在24年&amp;#xff0c;最好是慎用&amp;#xff0c;因为往后的系统升级就没有完全…阅读更多...【算法】---栈与队列基础前置准备 
数据结构篇&amp;#xff1a;学习过栈与队列这两种基本数据结构 前面会迅速回顾栈与队列的使用 
本篇以Java为主&amp;#xff0c; 其它语言可自行对应内置的栈与队列容器。 
栈 
栈是一种后进先出的容器。 如下图&amp;#xff0c; 栈只有一个开口。 
栈顶&amp;#xff1a;栈的开口处&amp;a…阅读更多...二层交换机的工作原理与局域网设备通信详解二层交换机&amp;#xff08;Layer 2 Switch&amp;#xff09;在计算机网络中是用于连接同一个局域网&amp;#xff08;LAN&amp;#xff09;内的设备&amp;#xff0c;它的核心作用是根据MAC 地址来转发数据包&amp;#xff0c;使得同一局域网中的不同设备能够相互通信。其主要功能是通过创建独立的冲突域来优…阅读更多...5. Node.js Http模块2.4 Http模块 
2.4.1创建Http服务端 
//1.导入http模块
let httprequire(http)//2.创建服务对象
let serverhttp.createServer((request,response)&gt;{console.log(request.method)        //获取请求方式console.log(request.url)           //获取请求url(路径和参数部份)co…阅读更多...基于SpringBoot的课程辅助教学系统作者&amp;#xff1a;计算机学姐 开发技术&amp;#xff1a;SpringBoot、SSM、Vue、MySQL、JSP、ElementUI、Python、小程序等&amp;#xff0c;“文末源码”。 专栏推荐&amp;#xff1a;前后端分离项目源码、SpringBoot项目源码、Vue项目源码、SSM项目源码、微信小程序源码 精品专栏&amp;#xff1a;…阅读更多...如何使用Python调用API数据在信息爆炸的今天&amp;#xff0c;数据成为了新的石油。API&amp;#xff08;应用程序编程接口&amp;#xff09;作为获取数据的重要途径&amp;#xff0c;已经深入到软件开发的各个角落。Python&amp;#xff0c;因其简洁的语法和强大的功能&amp;#xff0c;成为了调用API数据的首选语言之一。本文将带你了…阅读更多...mysql 10 单表访问方法01.优化的过程 
对于我们这些 MySQL 的使用者来说&amp;#xff0c; MySQL 其实就是一个软件&amp;#xff0c;平时用的最多的就是查询功能。DBA时不时丢过来一些慢查询语句让优化&amp;#xff0c;我们如果连查询是怎么执行的都不清楚还优化个毛线&amp;#xff0c;所以是时候掌握真正的技术了。我…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:15 +0000</pubDate>
    </item>
    <item>
      <title>LoadBalancer 类型的 Service工作期间，kube-proxy做了什么？</title>
      <link>https://www.ppmy.cn/news/1540819.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维LoadBalancer 类型的 Service工作期间，kube-proxy做了什么？news/2025/10/31 22:20:13/kube-proxy是 Kubernetes 集群中一个重要的组件，负责实现服务的网络代理和负载均衡功能。当创建一个LoadBalancer类型的Service时，kube-proxy在整个过程中扮演了关键角色。以下是kube-proxy在LoadBalancer类型Service创建和使用过程中所做的工作：1. 监听 Service 和 Endpoint 变更kube-proxy运行在每个节点上，并持续监听 Kubernetes API 服务器上的Service和Endpoint对象的变更。当创建一个LoadBalancer类型的Service时，kube-proxy会收到关于这个新Service的通知。当Service的Endpoint发生变化（例如，匹配的 Pod 增加或减少）时，kube-proxy也会收到相应的通知。2. 更新 iptables 或 IPVS 规则kube-proxy使用两种主要的方式来处理网络代理和负载均衡：iptables和IPVS（IP Virtual Server）。默认情况下，kube-proxy可能使用iptables，但可以通过配置切换到IPVS。a. 使用 iptableskube-proxy会在每个节点上更新iptables规则，将流量从Service的 ClusterIP 和端口转发到匹配的 Pod 的 IP 地址和端口。对于LoadBalancer类型的Service，kube-proxy还会配置iptables规则，将外部流量从负载均衡器的外部 IP 地址和端口转发到Service的 ClusterIP 和端口。b. 使用 IPVSkube-proxy会在每个节点上维护一个 IPVS 表，将流量从Service的 ClusterIP 和端口转发到匹配的 Pod 的 IP 地址和端口。对于LoadBalancer类型的Service，kube-proxy还会配置 IPVS 规则，将外部流量从负载均衡器的外部 IP 地址和端口转发到Service的 ClusterIP 和端口。3. 处理外部流量当外部客户端通过负载均衡器的外部 IP 地址和端口访问服务时，kube-proxy会根据配置的iptables或IPVS规则将流量转发到Service的 ClusterIP。a. 内部转发kube-proxy会将接收到的流量从Service的 ClusterIP 转发到匹配的 Pod 的 IP 地址和端口。这个过程对于外部客户端是透明的，外部客户端只需要知道负载均衡器的外部 IP 地址和端口即可访问服务。4. 处理内部流量当集群内部的 Pod 访问LoadBalancer类型的Service时，kube-proxy也会根据配置的iptables或IPVS规则将流量转发到匹配的 Pod。5. 更新和删除规则当Service或Endpoint发生变化时，kube-proxy会及时更新或删除相应的iptables或IPVS规则，以确保流量正确地转发到最新的 Pod。总结监听变更：kube-proxy持续监听Service和Endpoint对象的变更。更新规则：kube-proxy根据变更更新节点上的iptables或IPVS规则。处理流量：kube-proxy将外部流量从负载均衡器的外部 IP 地址和端口转发到Service的 ClusterIP，并进一步转发到匹配的 Pod。内部转发：kube-proxy也将集群内部的流量从Service的 ClusterIP 转发到匹配的 Pod。更新和删除：kube-proxy及时更新或删除规则，以应对Service或Endpoint的变化。通过这些操作，kube-proxy确保了LoadBalancer类型的Service能够正确地处理和转发流量，提供了可靠的网络代理和负载均衡功能。http://www.ppmy.cn/news/1540819.html相关文章CentOS 8配置阿里云yum源最近正好搞一套3.x体系的大数据技术集群&amp;#xff0c;用CentOS8的系统&amp;#xff0c;发现默认自带的所有yum源貌似无法使用&amp;#xff0c;这里记录一下配置阿里的yum源。后面研究了一下&amp;#xff0c;CentOS 8现在24年&amp;#xff0c;最好是慎用&amp;#xff0c;因为往后的系统升级就没有完全…阅读更多...【算法】---栈与队列基础前置准备 
数据结构篇&amp;#xff1a;学习过栈与队列这两种基本数据结构 前面会迅速回顾栈与队列的使用 
本篇以Java为主&amp;#xff0c; 其它语言可自行对应内置的栈与队列容器。 
栈 
栈是一种后进先出的容器。 如下图&amp;#xff0c; 栈只有一个开口。 
栈顶&amp;#xff1a;栈的开口处&amp;a…阅读更多...二层交换机的工作原理与局域网设备通信详解二层交换机&amp;#xff08;Layer 2 Switch&amp;#xff09;在计算机网络中是用于连接同一个局域网&amp;#xff08;LAN&amp;#xff09;内的设备&amp;#xff0c;它的核心作用是根据MAC 地址来转发数据包&amp;#xff0c;使得同一局域网中的不同设备能够相互通信。其主要功能是通过创建独立的冲突域来优…阅读更多...5. Node.js Http模块2.4 Http模块 
2.4.1创建Http服务端 
//1.导入http模块
let httprequire(http)//2.创建服务对象
let serverhttp.createServer((request,response)&gt;{console.log(request.method)        //获取请求方式console.log(request.url)           //获取请求url(路径和参数部份)co…阅读更多...基于SpringBoot的课程辅助教学系统作者&amp;#xff1a;计算机学姐 开发技术&amp;#xff1a;SpringBoot、SSM、Vue、MySQL、JSP、ElementUI、Python、小程序等&amp;#xff0c;“文末源码”。 专栏推荐&amp;#xff1a;前后端分离项目源码、SpringBoot项目源码、Vue项目源码、SSM项目源码、微信小程序源码 精品专栏&amp;#xff1a;…阅读更多...如何使用Python调用API数据在信息爆炸的今天&amp;#xff0c;数据成为了新的石油。API&amp;#xff08;应用程序编程接口&amp;#xff09;作为获取数据的重要途径&amp;#xff0c;已经深入到软件开发的各个角落。Python&amp;#xff0c;因其简洁的语法和强大的功能&amp;#xff0c;成为了调用API数据的首选语言之一。本文将带你了…阅读更多...mysql 10 单表访问方法01.优化的过程 
对于我们这些 MySQL 的使用者来说&amp;#xff0c; MySQL 其实就是一个软件&amp;#xff0c;平时用的最多的就是查询功能。DBA时不时丢过来一些慢查询语句让优化&amp;#xff0c;我们如果连查询是怎么执行的都不清楚还优化个毛线&amp;#xff0c;所以是时候掌握真正的技术了。我…阅读更多...无人机之自动驾驶技术无人机的自动驾驶技术是一个集成了多学科领域的复杂系统&amp;#xff0c;它使无人机能够在没有人工干预的情况下&amp;#xff0c;自主完成起飞、飞行、执行任务、降落等全过程。 
一、技术原理 
传感器技术&amp;#xff1a; 
无人机通常配备多种传感器&amp;#xff0c;如摄像头、激光雷达、GPS接…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:13 +0000</pubDate>
    </item>
    <item>
      <title>CentOS 8配置阿里云yum源</title>
      <link>https://www.ppmy.cn/news/1540818.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维CentOS 8配置阿里云yum源news/2025/10/31 22:20:12/最近正好搞一套3.x体系的大数据技术集群，用CentOS8的系统，发现默认自带的所有yum源貌似无法使用，这里记录一下配置阿里的yum源。后面研究了一下，CentOS 8现在24年，最好是慎用，因为往后的系统升级就没有完全可离线的OS版本了，8本身也是为了下一代产品的前置版本CentOS Stream，生态环境目前还不完善，貌似有离线版的，不过内核是7的，所以现在要正式用的话，还是建议用centos 7第一步：移动走所有自带的repo文件，不然会影响cd/etc/yum.repos.dmkdirbaksmv./*.repo ./baks第二步：生成新的repo文件viCentos-Linux-BaseOS.repo追加如下内容[baseos]
name=Alibaba Cloud Linux $releasever - BaseOS
baseurl=https://mirrors.aliyun.com/centos/$releasever/BaseOS/$basearch/os/
enabled=1
gpgcheck=1
gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official[appstream]
name=Alibaba Cloud Linux $releasever - AppStream
baseurl=https://mirrors.aliyun.com/centos/$releasever/AppStream/$basearch/os/
enabled=1
gpgcheck=1
gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official第三步：更新yum缓存sudoyum clean allsudoyum makecachehttp://www.ppmy.cn/news/1540818.html相关文章【算法】---栈与队列基础前置准备 
数据结构篇&amp;#xff1a;学习过栈与队列这两种基本数据结构 前面会迅速回顾栈与队列的使用 
本篇以Java为主&amp;#xff0c; 其它语言可自行对应内置的栈与队列容器。 
栈 
栈是一种后进先出的容器。 如下图&amp;#xff0c; 栈只有一个开口。 
栈顶&amp;#xff1a;栈的开口处&amp;a…阅读更多...二层交换机的工作原理与局域网设备通信详解二层交换机&amp;#xff08;Layer 2 Switch&amp;#xff09;在计算机网络中是用于连接同一个局域网&amp;#xff08;LAN&amp;#xff09;内的设备&amp;#xff0c;它的核心作用是根据MAC 地址来转发数据包&amp;#xff0c;使得同一局域网中的不同设备能够相互通信。其主要功能是通过创建独立的冲突域来优…阅读更多...5. Node.js Http模块2.4 Http模块 
2.4.1创建Http服务端 
//1.导入http模块
let httprequire(http)//2.创建服务对象
let serverhttp.createServer((request,response)&gt;{console.log(request.method)        //获取请求方式console.log(request.url)           //获取请求url(路径和参数部份)co…阅读更多...基于SpringBoot的课程辅助教学系统作者&amp;#xff1a;计算机学姐 开发技术&amp;#xff1a;SpringBoot、SSM、Vue、MySQL、JSP、ElementUI、Python、小程序等&amp;#xff0c;“文末源码”。 专栏推荐&amp;#xff1a;前后端分离项目源码、SpringBoot项目源码、Vue项目源码、SSM项目源码、微信小程序源码 精品专栏&amp;#xff1a;…阅读更多...如何使用Python调用API数据在信息爆炸的今天&amp;#xff0c;数据成为了新的石油。API&amp;#xff08;应用程序编程接口&amp;#xff09;作为获取数据的重要途径&amp;#xff0c;已经深入到软件开发的各个角落。Python&amp;#xff0c;因其简洁的语法和强大的功能&amp;#xff0c;成为了调用API数据的首选语言之一。本文将带你了…阅读更多...mysql 10 单表访问方法01.优化的过程 
对于我们这些 MySQL 的使用者来说&amp;#xff0c; MySQL 其实就是一个软件&amp;#xff0c;平时用的最多的就是查询功能。DBA时不时丢过来一些慢查询语句让优化&amp;#xff0c;我们如果连查询是怎么执行的都不清楚还优化个毛线&amp;#xff0c;所以是时候掌握真正的技术了。我…阅读更多...无人机之自动驾驶技术无人机的自动驾驶技术是一个集成了多学科领域的复杂系统&amp;#xff0c;它使无人机能够在没有人工干预的情况下&amp;#xff0c;自主完成起飞、飞行、执行任务、降落等全过程。 
一、技术原理 
传感器技术&amp;#xff1a; 
无人机通常配备多种传感器&amp;#xff0c;如摄像头、激光雷达、GPS接…阅读更多...资料分析学习资料分析考查对各种文字、图表等资料的综合理解和分析加工的能力&amp;#xff0c;公考中有20道。 
统计术语 
增长量现期量-基期量 
增长率增长量/基期量现期量/基期量-1 
基期量现期量/&amp;#xff08;1增长率&amp;#xff09; 
已知增长率、基期量、现期量任意两个&amp;#xff0c;都可以求出…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:12 +0000</pubDate>
    </item>
    <item>
      <title>【算法】---栈与队列基础</title>
      <link>https://www.ppmy.cn/news/1540817.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【算法】---栈与队列基础news/2025/10/31 22:20:11/前置准备数据结构篇：学习过栈与队列这两种基本数据结构前面会迅速回顾栈与队列的使用本篇以Java为主， 其它语言可自行对应内置的栈与队列容器。栈栈是一种后进先出的容器。如下图， 栈只有一个开口。栈顶：栈的开口处，所有的插入（push）和删除（pop）操作都只能在栈顶进行。栈底：栈的最底部，没有办法直接访问栈底的数据，必须通过逐步“弹出”栈顶元素才能到达栈底。后进先出（LIFO）：最后放入栈中的元素会最先被取出，像叠盘子一样，最新放上去的盘子最先被拿走。增删查询操作只允许在栈顶进行。由于必定操作最近进入栈的数， 因此栈的特性是后进先出。Java中的Stack：Java—Stack全局静态数组实现:解算法题常用， 因为其常数时间快且可以空间复用算法题效率由于语言自带的栈， 比如纯C选手就可以用这个迅速手搓一个栈不需要封装直接用。classStack{publicint[]stack;publicintr;publicStack(intn){stack=newint[n];r=0;}publicvoidpush(intval){stack[r++]=val;}publicintpop(){returnstack[--r];}publicintpeek(){returnstack[r-1];}publicbooleanisEmpty(){returnr==0;}publicintsize(){returnr;}}Java中的LinkedList(双向链表)和ArrayDeque(双端队列）：两者也支持栈操作， 具体查看手册。队列队列是一种先进先出的容器Java中的Queue接口位于java.util包中，它有两个常见实现类可以充当队列。LinkedList,ArrayDeque.offer(E e)：将指定元素插入队列尾部，如果插入成功返回true。poll()：移除并返回队首元素，如果队列为空则返回null。peek()：获取队首元素但不移除，如果队列为空返回null。isEmpty()：判断队列是否为空。size():获取队列的长度1.LinkedList使用LinkedList类可以用来实现队列。支持队列操作。importjava.util.LinkedList;importjava.util.Queue;publicclassQueueExample{publicstaticvoidmain(String[]args){// 使用LinkedList实现队列Queue&lt;Integer&gt;queue=newLinkedList&lt;&gt;();// 队列是否为空·System.out.println(queue.isEmpty());// 入队操作queue.offer(1);queue.offer(2);queue.offer(3);// 查看队首元素（不移除）System.out.println("队首元素: "+queue.peek());// 出队操作System.out.println("移除的元素: "+queue.poll());// 队列长度·System.out.println(queue.size());// 查看出队后的队列System.out.println("队首元素: "+queue.peek());}}2.ArrayDequeArrayDeque是一个基于数组的双端队列，它可以高效地作为队列或栈使用。importjava.util.ArrayDeque;importjava.util.Queue;publicclassArrayDequeExample{publicstaticvoidmain(String[]args){// 使用ArrayDeque实现队列Queue&lt;String&gt;arrayDeque=newArrayDeque&lt;&gt;();// 队列是否为空·System.out.println(arrayDueue.isEmpty());// 入队操作arrayDeque.offer("A");arrayDeque.offer("B");arrayDeque.offer("C");// 查看队首元素System.out.println("队首元素: "+arrayDeque.peek());// 出队操作System.out.println("移除的元素: "+arrayDeque.poll());// 队列长度System.out.println(arrayDueue.size());// 查看出队后的队列System.out.println("队首元素: "+arrayDeque.peek());}}3.常数时间快的数组实现如果题目确定最大数据量是5000， 那么意味着这个队列最多进入5000个元素。publicclassMyQueue{publicstaticintMAX=5000;publicint[]queue=newint[MAX];publicintl,r,size;publicMyQueue(){l=r=size=0;}//[l,r)是有效数据， l==r意味队列为空publicvoidoffer(intval){queue[r++]=val;size++;}publicintpoll(){size--;returnqueue[l++];}publicintpeek(){returnqueue[l];}publicintsize(){returnsize;}publicbooleanisEmpty(){returnl==r;//或者size==0}publicstaticvoidmain(String[]args){MyQueuequeue=newMyQueue();System.out.println(queue.isEmpty());queue.offer(1);queue.offer(2);queue.offer(3);System.out.println("queue.size():"+queue.size());System.out.println(queue.poll());System.out.println("queue.size():"+queue.size());System.out.println(queue.poll());}}MAX取决于算法题的测试数据量。这里没有引入多余的检查可自行补充。事实上，这个类都不用封装，只需要MAX,queue数组，l,r这3个字段就可以直接充当队列解题， 而且常数时间也优于Java自带的Queue的两个实现类。C语言选手采用这种写法，时间性能最佳。环形队列实现设计循环队列测试链接//本题接口/classMyCircularDeque{publicMyCircularDeque(intk){}publicbooleaninsertFront(intvalue){}publicbooleaninsertLast(intvalue){}publicbooleandeleteFront(){}publicbooleandeleteLast(){}publicintgetFront(){}publicintgetRear(){}publicbooleanisEmpty(){}publicbooleanisFull(){}}解决方案阅读题目。引入size,limit字段，方便维护。先实现isEmpty(),isFull()方法。设计[l,r)区间，l指向当前有效数据，r当前第一个无效数据。，插入，先左移动后插入，r先插入再往后移动。注意数组边界处理， 使得整个数组循环起来。删除同3，但只需要挪动l或者r， 注意边界。getFront(),getRear()方法中，如果队列为空要返回-1，否则返回队列中对应的值。再次强调l指向当前有效数据，r当前第一个无效数据.publicint[]queue;privateintl,r,limit,size;//limit:队列的最大容量//size：队列的长度//[l,r) 队列区间。publicMyCircularDeque(intk){queue=newint[k];l=r=size=0;limit=k;}publicbooleaninsertFront(intvalue){if(isFull()){returnfalse;}queue[l=l==0?limit-1:l-1]=value;size++;returntrue;}publicbooleaninsertLast(intvalue){if(isFull()){returnfalse;}queue[r]=value;r=r==limit-1?0:r+1;size++;returntrue;}publicbooleandeleteFront(){if(isEmpty()){returnfalse;}l=l==limit-1?0:l+1;size--;returntrue;}publicbooleandeleteLast(){if(isEmpty()){returnfalse;}r=r==0?limit-1:r-1;size--;returntrue;}publicintgetFront(){returnisEmpty()?-1:queue[l];}publicintgetRear(){returnisEmpty()?-1:queue[r==0?limit-1:r-1];}publicbooleanisEmpty(){returnsize==0;}publicbooleanisFull(){returnsize==limit;}结束http://www.ppmy.cn/news/1540817.html相关文章二层交换机的工作原理与局域网设备通信详解二层交换机&amp;#xff08;Layer 2 Switch&amp;#xff09;在计算机网络中是用于连接同一个局域网&amp;#xff08;LAN&amp;#xff09;内的设备&amp;#xff0c;它的核心作用是根据MAC 地址来转发数据包&amp;#xff0c;使得同一局域网中的不同设备能够相互通信。其主要功能是通过创建独立的冲突域来优…阅读更多...5. Node.js Http模块2.4 Http模块 
2.4.1创建Http服务端 
//1.导入http模块
let httprequire(http)//2.创建服务对象
let serverhttp.createServer((request,response)&gt;{console.log(request.method)        //获取请求方式console.log(request.url)           //获取请求url(路径和参数部份)co…阅读更多...基于SpringBoot的课程辅助教学系统作者&amp;#xff1a;计算机学姐 开发技术&amp;#xff1a;SpringBoot、SSM、Vue、MySQL、JSP、ElementUI、Python、小程序等&amp;#xff0c;“文末源码”。 专栏推荐&amp;#xff1a;前后端分离项目源码、SpringBoot项目源码、Vue项目源码、SSM项目源码、微信小程序源码 精品专栏&amp;#xff1a;…阅读更多...如何使用Python调用API数据在信息爆炸的今天&amp;#xff0c;数据成为了新的石油。API&amp;#xff08;应用程序编程接口&amp;#xff09;作为获取数据的重要途径&amp;#xff0c;已经深入到软件开发的各个角落。Python&amp;#xff0c;因其简洁的语法和强大的功能&amp;#xff0c;成为了调用API数据的首选语言之一。本文将带你了…阅读更多...mysql 10 单表访问方法01.优化的过程 
对于我们这些 MySQL 的使用者来说&amp;#xff0c; MySQL 其实就是一个软件&amp;#xff0c;平时用的最多的就是查询功能。DBA时不时丢过来一些慢查询语句让优化&amp;#xff0c;我们如果连查询是怎么执行的都不清楚还优化个毛线&amp;#xff0c;所以是时候掌握真正的技术了。我…阅读更多...无人机之自动驾驶技术无人机的自动驾驶技术是一个集成了多学科领域的复杂系统&amp;#xff0c;它使无人机能够在没有人工干预的情况下&amp;#xff0c;自主完成起飞、飞行、执行任务、降落等全过程。 
一、技术原理 
传感器技术&amp;#xff1a; 
无人机通常配备多种传感器&amp;#xff0c;如摄像头、激光雷达、GPS接…阅读更多...资料分析学习资料分析考查对各种文字、图表等资料的综合理解和分析加工的能力&amp;#xff0c;公考中有20道。 
统计术语 
增长量现期量-基期量 
增长率增长量/基期量现期量/基期量-1 
基期量现期量/&amp;#xff08;1增长率&amp;#xff09; 
已知增长率、基期量、现期量任意两个&amp;#xff0c;都可以求出…阅读更多...jmeter用csv data set config做参数化1在jmeter中&amp;#xff0c;csv data set config的作用非常强大&amp;#xff0c;用它来做批量测试和参数化非常好用。 
csv data set config的常用配置项如下&amp;#xff1a; Variable Names处&amp;#xff0c;写上源文件中的参数名&amp;#xff0c;用于后续接口发送请求时引用 
Ignore first line…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:11 +0000</pubDate>
    </item>
    <item>
      <title>二层交换机的工作原理与局域网设备通信详解</title>
      <link>https://www.ppmy.cn/news/1540816.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维二层交换机的工作原理与局域网设备通信详解news/2025/10/31 22:20:09/二层交换机（Layer 2 Switch）在计算机网络中是用于连接同一个局域网（LAN）内的设备，它的核心作用是根据MAC 地址来转发数据包，使得同一局域网中的不同设备能够相互通信。其主要功能是通过创建独立的冲突域来优化网络效率，并通过学习 MAC 地址表实现智能数据转发。二层交换机的工作原理和它如何处理局域网中的主机通信问题，是理解计算机网络的重要部分。二层交换机的工作原理MAC 地址表学习： 二层交换机工作在OSI 模型的第二层（数据链路层），它根据设备的MAC 地址（网卡地址）来转发数据包。每当主机通过交换机发送数据时，交换机会学习发送设备的 MAC 地址并将其与对应的交换机端口关联起来，记录在MAC 地址表中。数据帧转发： 当一台主机向另一台主机发送数据时，交换机会查看目标 MAC 地址，然后根据 MAC 地址表将数据帧转发到目标设备所在的端口。这样避免了广播所有端口，提升了网络效率。冲突域隔离： 交换机每个端口对应一个独立的冲突域，设备之间的数据通信不会发生冲突。这是相对于集线器的一大优势，集线器会将所有设备置于一个共享的冲突域中，容易造成数据冲突。同一个局域网中主机的通信过程假设局域网内有三台主机 A、B、C，分别连接到一个二层交换机的不同端口上：主机 A：IP 地址192.168.1.10，MAC 地址AA:AA:AA:AA:AA:AA主机 B：IP 地址192.168.1.20，MAC 地址BB:BB:BB:BB:BB:BB主机 C：IP 地址192.168.1.30，MAC 地址CC:CC:CC:CC:CC:CC二层交换机：提供相互连接的端口1.MAC 地址表学习当主机 A 向主机 B 发送数据时，A 的数据包通过交换机发送。此时，交换机会学习到主机 A 的 MAC 地址AA:AA:AA:AA:AA:AA，并将其与端口 1绑定。交换机会更新 MAC 地址表，例如：MAC 地址AA:AA:AA:AA:AA:AA→ 端口 1MAC 地址BB:BB:BB:BB:BB:BB→ 端口 2MAC 地址CC:CC:CC:CC:CC:CC→ 端口 32.ARP 请求与广播主机 A 要和主机 B 通信时，A 只知道主机 B 的 IP 地址192.168.1.20，但不知道其 MAC 地址。此时，A 会发送一个ARP 请求来询问：“谁是 192.168.1.20？”这是一个广播帧，目标 MAC 地址是全 F（FF:FF:FF:FF:FF:FF），表示广播。交换机会将这个广播数据帧转发到所有端口，因此主机 B 和 C 都能收到这个 ARP 请求。主机 B 看到 IP 地址匹配自己的 IP192.168.1.20，于是会回应一个ARP 响应，告知主机 A 自己的 MAC 地址BB:BB:BB:BB:BB:BB。3.数据传输主机 A 得到主机 B 的 MAC 地址后，就可以将数据帧发送给主机 B。此时，交换机会查找 MAC 地址表，发现目标 MAC 地址BB:BB:BB:BB:BB:BB关联到端口 2，因此只会将数据帧发送到端口 2，而不会广播给其他端口。同理，主机 B 也可以向主机 A 发起数据通信，交换机会根据 MAC 地址表转发数据帧，确保数据只在相关的端口之间传递。IP 地址分配的原理在局域网中，每台设备需要有一个唯一的 IP 地址，以便在网络层进行通信。IP 地址可以通过以下几种方式分配：手动静态分配： 每台主机手动设置 IP 地址和子网掩码，确保同一个局域网中的设备使用相同的子网。例如，在局域网中可以为主机分配 IP 地址192.168.1.10到192.168.1.30，子网掩码255.255.255.0。动态分配（DHCP）： 如果局域网中有DHCP 服务器，设备可以通过 DHCP 自动获取 IP 地址。DHCP 服务器会从一个预设的地址池中分配 IP 地址，例如分配给主机 A192.168.1.10，主机 B192.168.1.20。无论是静态还是动态分配，确保局域网内的主机位于相同的 IP 地址段和子网（如192.168.1.x）是设备互相通信的前提。二层交换机解决的关键问题优化局域网通信： 二层交换机根据 MAC 地址转发数据包，使得局域网中的设备可以高效通信，避免了不必要的广播。隔离冲突域： 每个设备通过独立的端口连接到交换机，数据不会在所有设备之间碰撞，解决了集线器带来的冲突域问题。动态学习和高效转发： 二层交换机可以自动学习网络中设备的 MAC 地址表，并智能地将数据帧转发到合适的端口，提升了局域网的通信效率。总结二层交换机在局域网中的核心作用是通过MAC 地址表转发数据，实现设备之间的高效通信，并隔离冲突域，提升网络性能。主机之间的通信流程包括 MAC 地址学习、ARP 广播以及基于 IP 地址的最终数据传输。IP 地址可以通过手动或 DHCP 动态分配，确保每台设备在同一个子网内，才能顺利通信。http://www.ppmy.cn/news/1540816.html相关文章5. Node.js Http模块2.4 Http模块 
2.4.1创建Http服务端 
//1.导入http模块
let httprequire(http)//2.创建服务对象
let serverhttp.createServer((request,response)&gt;{console.log(request.method)        //获取请求方式console.log(request.url)           //获取请求url(路径和参数部份)co…阅读更多...基于SpringBoot的课程辅助教学系统作者&amp;#xff1a;计算机学姐 开发技术&amp;#xff1a;SpringBoot、SSM、Vue、MySQL、JSP、ElementUI、Python、小程序等&amp;#xff0c;“文末源码”。 专栏推荐&amp;#xff1a;前后端分离项目源码、SpringBoot项目源码、Vue项目源码、SSM项目源码、微信小程序源码 精品专栏&amp;#xff1a;…阅读更多...如何使用Python调用API数据在信息爆炸的今天&amp;#xff0c;数据成为了新的石油。API&amp;#xff08;应用程序编程接口&amp;#xff09;作为获取数据的重要途径&amp;#xff0c;已经深入到软件开发的各个角落。Python&amp;#xff0c;因其简洁的语法和强大的功能&amp;#xff0c;成为了调用API数据的首选语言之一。本文将带你了…阅读更多...mysql 10 单表访问方法01.优化的过程 
对于我们这些 MySQL 的使用者来说&amp;#xff0c; MySQL 其实就是一个软件&amp;#xff0c;平时用的最多的就是查询功能。DBA时不时丢过来一些慢查询语句让优化&amp;#xff0c;我们如果连查询是怎么执行的都不清楚还优化个毛线&amp;#xff0c;所以是时候掌握真正的技术了。我…阅读更多...无人机之自动驾驶技术无人机的自动驾驶技术是一个集成了多学科领域的复杂系统&amp;#xff0c;它使无人机能够在没有人工干预的情况下&amp;#xff0c;自主完成起飞、飞行、执行任务、降落等全过程。 
一、技术原理 
传感器技术&amp;#xff1a; 
无人机通常配备多种传感器&amp;#xff0c;如摄像头、激光雷达、GPS接…阅读更多...资料分析学习资料分析考查对各种文字、图表等资料的综合理解和分析加工的能力&amp;#xff0c;公考中有20道。 
统计术语 
增长量现期量-基期量 
增长率增长量/基期量现期量/基期量-1 
基期量现期量/&amp;#xff08;1增长率&amp;#xff09; 
已知增长率、基期量、现期量任意两个&amp;#xff0c;都可以求出…阅读更多...jmeter用csv data set config做参数化1在jmeter中&amp;#xff0c;csv data set config的作用非常强大&amp;#xff0c;用它来做批量测试和参数化非常好用。 
csv data set config的常用配置项如下&amp;#xff1a; Variable Names处&amp;#xff0c;写上源文件中的参数名&amp;#xff0c;用于后续接口发送请求时引用 
Ignore first line…阅读更多...Flink事件时间和Watermark前言 
Flink 提供了三种时间语义&amp;#xff0c;分别是 事件时间、摄入时间和处理时间。其中&amp;#xff0c;只有事件时间需要配合 Watermark 使用&amp;#xff0c;这是为什么呢&amp;#xff1f;Watermark 又是个什么东西呢&amp;#xff1f; 
诞生背景 
时间窗口计算模型的三大属性&amp;#xff0c;分…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:10 +0000</pubDate>
    </item>
    <item>
      <title>5. Node.js Http模块</title>
      <link>https://www.ppmy.cn/news/1540815.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维5. Node.js Http模块news/2025/10/31 22:20:08/2.4 Http模块2.4.1创建Http服务端//1.导入http模块lethttp=require('http')//2.创建服务对象letserver=http.createServer((request,response)=&gt;{console.log(request.method)//获取请求方式console.log(request.url)//获取请求url(路径和参数部份)console.log(request.httpVersion)//获取请求http版本号console.log(request.headers)//获取请求头//设置响应头，如果返回的内容中有中文，需要设置一下以下响应头，否则会出现乱码response.setHeader("content-type","text/html;charset=utf-8")//响应结束后返回的内容response.end('你好HTTP Server')})//启动服务，并配置监听端口server.listen(9000,()=&gt;{console.log('服务已启动')})执行这个js文件后，就可以通过浏览器访问本机的9000端口，并得到了响应2.4.2获取request中的请求体//1.导入http模块lethttp=require('http')//2.创建服务对象letserver=http.createServer((request,response)=&gt;{letbody=''request.on('data',chunk=&gt;{//持续读取request中的请求体body+=chunk})request.on('end',()=&gt;{//读取request中的请求体结束后，执行的代码console.log(typeof(body))console.log(body)response.end('Hello Http server')})})//启动服务，并配置监听端口server.listen(9000,()=&gt;{console.log('服务已启动')})使用postman发送post请求输出：服务已启动
string{"name":"muyi","gender":1,"birth":"1983-03-13","grade":3}2.4.3获取url中的路径和参数用户访问的url:http://localhost:9000/test/?arg1=1&amp;arg2=2//获取url中的路径和参数（方法1）//1.导入http模块lethttp=require('http')//2.导入url模块leturl=require('url')//3.创建服务对象letserver=http.createServer((request,response)=&gt;{//解析request.url，后面不如不加true，则获取到的参数是字符串，加上true后获取到的参数是一个字典，方便提取数据res=url.parse(request.url,true)console.log(res)console.log('path:',res.pathname)//获取路径：/test/console.log('args1:',res.query.args1)//获取参数1：1console.log('args2:',res.query.args2)//获取参数2：2response.end('Hello Http Server')})//4.启动服务，并配置监听端口server.listen(9000,()=&gt;{console.log('服务已启动')})输出：Url{protocol:null,slashes:null,auth:null,host:null,port:null,hostname:null,hash:null,search:'?arg1=1&amp;arg2=2',query:[Object:nullprototype]{arg1:'1',arg2:'2'},pathname:'/test/',path:'/test/?arg1=1&amp;arg2=2',href:'/test/?arg1=1&amp;arg2=2'}path:/test/args1:1args2:2//获取url中的路径和参数（方法2）//1.导入http模块lethttp=require('http')//2.创建服务对象letserver=http.createServer((request,response)=&gt;{leturl=newURL(request.url,'http://127.0.0.1')console.log(url)console.log('path:',url.pathname)//获取路径：/test/console.log('arg1:',url.searchParams.get('arg1'))//获取参数1:1console.log('arg2:',url.searchParams.get('arg2'))//获取参数2：2response.end('Hello Http Server')})//3.启动服务，并配置监听端口server.listen(9000,()=&gt;{console.log('服务已启动')})输出：URL{href:'http://127.0.0.1/test/?arg1=1&amp;arg2=2',origin:'http://127.0.0.1',protocol:'http:',username:'',password:'',host:'127.0.0.1',hostname:'127.0.0.1',port:'',pathname:'/test/',search:'?arg1=1&amp;arg2=2',searchParams:URLSearchParams{'arg1'=&gt;'1','arg2'=&gt;'2'},hash:''}path:/test/arg1:1arg2:22.4.4 HTTP请求练习需求：​ 当用户的请求路径是GET且请求路径为/login或/login/时，返回login;​ 当用户的请求路径是GET且请求路径为/reg或/reg/时，返回login;​ 上面两种情况都不符合时，返回‘Not Found’//1.导入http模块lethttp=require('http')//2.创建服务对象letserver=http.createServer((request,response)=&gt;{leturl=newURL(request.url,'http://127.0.0.1')if(request.method=='GET'&amp;&amp;(url.pathname=='/login/'||url.pathname=='/login')){//判断请求类型是不是为GET,且路径是否为'/login/'或'/login'response.end('login')}elseif(request.method=='GET'&amp;&amp;(url.pathname=='/reg/'||url.pathname=='/reg')){//判断请求类型是不是为GET,且路径是否为'/reg/'或'/reg'response.end('reg')}else{response.end('Not Found')}})//3.启动服务，并配置监听端口server.listen(9000,()=&gt;{console.log('服务已启动')})2.4.5设置HTTP响应报文//1.导入http模块lethttp=require('http')//2.创建服务对象letserver=http.createServer((request,response)=&gt;{response.statusCode=201//设置响应coderesponse.statusMessage='success'//设置响应信息response.setHeader('content-type','text/html;charset=utf-8')//设置响应头response.setHeader('Server','node.js')//设置自定义响应头response.setHeader('myHeader',[1,2,3])//设置多个同名响应头response.write('I love sally1')//设置响应体response.write('I love sally2')//设置响应体response.end('success')//end方法只能有一个})//3.启动服务，并配置监听端口server.listen(9000,()=&gt;{console.log('服务已启动')})浏览器中查看响应报文2.4.6将HTML文件做为响应体1）创建一个HTML文件&lt;!-- template.html --&gt;&lt;!DOCTYPEhtml&gt;&lt;htmllang="en"&gt;&lt;head&gt;&lt;metacharset="UTF-8"&gt;&lt;metaname="viewport"content="width=device-width, initial-scale=1.0"&gt;&lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;node.js学习&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;2)node.js//1.导入http模块lethttp=require('http')varfs=require('fs')//2.创建服务对象letserver=http.createServer((request,response)=&gt;{lethtml=fs.readFileSync('./template.html')//读取html文件中的内容response.end(html)//将读取到的html文件中的内容传递给用户})//3.启动服务，并配置监听端口server.listen(9000,()=&gt;{console.log('服务已启动')})2.4.7设置资源类型（mime类型）媒体类型（通常称为Multipurpose Internet Mail Extensions或MIME类型）是一种标准，用来表示文档、文件或字节流的性质和格式。mime 类型结构：[type]/[subType]
例如： text/html,text/css,text/jpeg,image/png,application/jsonHTTP服务可以设置响应头Content-Type来表明响应体的MIME类型，浏览器会根据该类型决定如何处理资源。常见的文件对应的mime类型html:'text/html',
css:'text/css',
js:'text/js',
png:'image/png',
jpg:'image/jpeg',
gif:'image/gif',
mp4:'video/mp4',
mp3:'audio/mpeg',
json:'application/json'对于未知的资源类型，可以选择类型，浏览器在遇到该类型的响应时，会对响应体内容进行独立存储，也就是我们常见的下载效果。2.4.8搭建静态资源服务并设置响应头//1.导入http模块lethttp=require('http')varfs=require('fs')varpath=require('path')varroot='g:\\py_project\\nodejs_study\\page'//指定项目根目录varindex='index.html'//默认访问的文件//定义所有资源类型（mime类型）varmimes={html:'text/html',css:'text/css',js:'text/js',png:'image/png',jpg:'image/jpeg',gif:'image/gif',mp4:'video/mp4',mp3:'audio/mpeg',json:'application/json'}//2.创建服务对象letserver=http.createServer((request,response)=&gt;{if(request.method!='GET'){//如果请求类型不是GET，则返回错误信息response.statusCode=404;response.end('405 Method Not Allowed')return}//获取请求路径letfilePath=request.urlif(filePath=='/'){//如果请求的路径是/，则让它等于默认访问的文件filePath='/'+index}//获取请求中的文件名扩展名letext=path.extname(filePath).substring(1,)//获取请求访问的资源类型（响应头content-type的值）lettype=mimes[ext]fs.readFile(root+filePath,(err,data)=&gt;{//读取请求中要访问的文件内容，并设置响应头//如请求的是/index.html，就去读取g:\\py_project\\nodejs_study\\page\\index.html//如果请求的是/img/img.png,就去读取g:\\py_project\\nodejs_study\\page\\img\\img.png文件if(err){response.setHeader('content-type','text/html;charset=utf-8')console.log(err);switch(err.code){//根据不同的err.code返回给用户不同的错误信息case'ENOENT':response.statusCode=404;response.end('404 Page Not Found');case'EPERM':response.statusCode=403;response.end('403 Operation not permitted')default:response.statusCode=400;response.end('400 Unknown error')return}}else{if(type){response.setHeader('content-type',type+';charset=utf-8')}else{//如果请求访问的资源类型不存在，则将content-type设为'application/octet-stream'//浏览器在遇到该类型的响应时，会对响应体内容进行独立存储，也就是我们常见的下载效果。response.setHeader('content-type','application/octet-stream')}//将读取到的文件内容传递给用户response.end(data)}})})//3.启动服务，并配置监听端口server.listen(9000,()=&gt;{console.log('服务已启动')})2.4.9常见错误码Common system errors
This is a list of system errors commonly-encountered when writing a Node.js program. For a comprehensive list, see the errno(3) man page.EACCES (Permission denied): An attempt was made to access a file in a way forbidden by its file access permissions.EADDRINUSE (Address already in use): An attempt to bind a server (net, http, or https) to a local address failed due to another server on the local system already occupying that address.ECONNREFUSED (Connection refused): No connection could be made because the target machine actively refused it. This usually results from trying to connect to a service that is inactive on the foreign host.ECONNRESET (Connection reset by peer): A connection was forcibly closed by a peer. This normally results from a loss of the connection on the remote socket due to a timeout or reboot. Commonly encountered via the http and net modules.EEXIST (File exists): An existing file was the target of an operation that required that the target not exist.EISDIR (Is a directory): An operation expected a file, but the given pathname was a directory.EMFILE (Too many open files in system): Maximum number of file descriptors allowable on the system has been reached, and requests for another descriptor cannot be fulfilled until at least one has been closed. This is encountered when opening many files at once in parallel, especially on systems (in particular, macOS) where there is a low file descriptor limit for processes. To remedy a low limit, run ulimit -n 2048 in the same shell that will run the Node.js process.ENOENT (No such file or directory): Commonly raised by fs operations to indicate that a component of the specified pathname does not exist. No entity (file or directory) could be found by the given path.ENOTDIR (Not a directory): A component of the given pathname existed, but was not a directory as expected. Commonly raised by fs.readdir.ENOTEMPTY (Directory not empty): A directory with entries was the target of an operation that requires an empty directory, usually fs.unlink.ENOTFOUND (DNS lookup failed): Indicates a DNS failure of either EAI_NODATA or EAI_NONAME. This is not a standard POSIX error.EPERM (Operation not permitted): An attempt was made to perform an operation that requires elevated privileges.EPIPE (Broken pipe): A write on a pipe, socket, or FIFO for which there is no process to read the data. Commonly encountered at the net and http layers, indicative that the remote side of the stream being written to has been closed.ETIMEDOUT (Operation timed out): A connect or send request failed because the connected party did not properly respond after a period of time. Usually encountered by http or net. Often a sign that a socket.end() was not properly called.http://www.ppmy.cn/news/1540815.html相关文章基于SpringBoot的课程辅助教学系统作者&amp;#xff1a;计算机学姐 开发技术&amp;#xff1a;SpringBoot、SSM、Vue、MySQL、JSP、ElementUI、Python、小程序等&amp;#xff0c;“文末源码”。 专栏推荐&amp;#xff1a;前后端分离项目源码、SpringBoot项目源码、Vue项目源码、SSM项目源码、微信小程序源码 精品专栏&amp;#xff1a;…阅读更多...如何使用Python调用API数据在信息爆炸的今天&amp;#xff0c;数据成为了新的石油。API&amp;#xff08;应用程序编程接口&amp;#xff09;作为获取数据的重要途径&amp;#xff0c;已经深入到软件开发的各个角落。Python&amp;#xff0c;因其简洁的语法和强大的功能&amp;#xff0c;成为了调用API数据的首选语言之一。本文将带你了…阅读更多...mysql 10 单表访问方法01.优化的过程 
对于我们这些 MySQL 的使用者来说&amp;#xff0c; MySQL 其实就是一个软件&amp;#xff0c;平时用的最多的就是查询功能。DBA时不时丢过来一些慢查询语句让优化&amp;#xff0c;我们如果连查询是怎么执行的都不清楚还优化个毛线&amp;#xff0c;所以是时候掌握真正的技术了。我…阅读更多...无人机之自动驾驶技术无人机的自动驾驶技术是一个集成了多学科领域的复杂系统&amp;#xff0c;它使无人机能够在没有人工干预的情况下&amp;#xff0c;自主完成起飞、飞行、执行任务、降落等全过程。 
一、技术原理 
传感器技术&amp;#xff1a; 
无人机通常配备多种传感器&amp;#xff0c;如摄像头、激光雷达、GPS接…阅读更多...资料分析学习资料分析考查对各种文字、图表等资料的综合理解和分析加工的能力&amp;#xff0c;公考中有20道。 
统计术语 
增长量现期量-基期量 
增长率增长量/基期量现期量/基期量-1 
基期量现期量/&amp;#xff08;1增长率&amp;#xff09; 
已知增长率、基期量、现期量任意两个&amp;#xff0c;都可以求出…阅读更多...jmeter用csv data set config做参数化1在jmeter中&amp;#xff0c;csv data set config的作用非常强大&amp;#xff0c;用它来做批量测试和参数化非常好用。 
csv data set config的常用配置项如下&amp;#xff1a; Variable Names处&amp;#xff0c;写上源文件中的参数名&amp;#xff0c;用于后续接口发送请求时引用 
Ignore first line…阅读更多...Flink事件时间和Watermark前言 
Flink 提供了三种时间语义&amp;#xff0c;分别是 事件时间、摄入时间和处理时间。其中&amp;#xff0c;只有事件时间需要配合 Watermark 使用&amp;#xff0c;这是为什么呢&amp;#xff1f;Watermark 又是个什么东西呢&amp;#xff1f; 
诞生背景 
时间窗口计算模型的三大属性&amp;#xff0c;分…阅读更多...每天五分钟深度学习pytorch：L1和L2范数、L1和L2归一化本文重点 
我们在另外一个专栏《机器学习和深度学习数学基础》中介绍了常用的范数，这里我们就不进行详细介绍了。这里我们只介绍，如何使用pytorch来计算L1、L2范数，以及如何计算L1和L2归一化。 
L1和L2范数 
torch.norm(input, p=fro, dim=None, keepdim=False, out=None, d…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:08 +0000</pubDate>
    </item>
    <item>
      <title>基于SpringBoot的课程辅助教学系统</title>
      <link>https://www.ppmy.cn/news/1540814.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维基于SpringBoot的课程辅助教学系统news/2025/10/31 22:20:07/作者：计算机学姐开发技术：SpringBoot、SSM、Vue、MySQL、JSP、ElementUI、Python、小程序等，“文末源码”。专栏推荐：前后端分离项目源码、SpringBoot项目源码、Vue项目源码、SSM项目源码、微信小程序源码精品专栏：Java精选实战项目源码、Python精选实战项目源码、大数据精选实战项目源码系统展示【2025最新】基于Java+SpringBoot+Vue+MySQL的课程辅助教学系统，前后端分离。开发语言：Java数据库：MySQL技术：SpringBoot、Vue、Mybaits Plus、ELementUI工具：IDEA/Ecilpse、Navicat、Maven后台界面管理员教师摘要随着科技的进步和教育理念的创新，传统的教学方式已难以满足现代教育的需求。特别是在高校教育中，实践教学的重要性日益凸显，但存在资源分配不均、管理效率低下、学生参与度不高等问题。本研究提出了一种基于SpringBoot的课程辅助教学系统，实现了在线课堂、课堂测试、资源管理、考试管理等核心功能。该系统利用计算机和网络技术，为实践教学提供全面的支持和服务，旨在实现实践教学的数字化、智能化和个性化，提高实践教学的效率和质量，为学生的自主学习和教师的专业成长提供更多可能。研究意义课程辅助教学系统的研发与应用具有重要意义。首先，它可以有效改善实践教学的效果和质量，使教师更方便地组织和管理教学活动，学生也能更自主地参与学习。其次，该系统能提升实践教学的管理效率，通过数字化和智能化的管理方式，降低管理成本和时间成本，实现资源的优化配置。此外，它还能促进学生的自主学习和教师的专业成长，为学生提供更多的学习资源和指导，为教师提供教学数据和反馈，助力教学反思和改进。研究目的本研究旨在设计和实现一款功能完善、易于操作的教学辅助系统，以满足教师和学生的需求。通过系统的建设和优化，提供多样化的教学资源和交互方式，以提高教学效果和学习成果。具体而言，该系统将涵盖课程管理、作业管理、讨论区、在线测试等关键环节，方便教师上传教学资料、安排课程进度，学生随时查看课程内容，提高作业处理效率，促进知识分享和问题解决，及时检验学习成果。文档目录1.绪论1.1 研究背景1.2 研究意义1.3 研究现状1.4 研究内容2.相关技术2.1 Java语言2.2 B/S架构2.3 MySQL数据库2.4 SpringBoot框架2.5 Vue框架3.系统分析3.1 系统可行性分析3.1.1 技术可行性分析3.1.2 经济可行性分析3.1.3 操作可行性分析3.2 系统性能分析3.2.1 易用性指标3.2.2 可扩展性指标3.2.3 健壮性指标3.2.4 安全性指标3.3 系统流程分析3.3.1 操作流程分析3.3.2 登录流程分析3.3.3 信息添加流程分析3.3.4 信息删除流程分析3.4 系统功能分析4.系统设计4.1 系统概要设计4.2 系统功能结构设计4.3 数据库设计4.3.1 数据库E-R图设计4.3.2 数据库表结构设计5.系统实现5.1 前台功能实现5.2 后台功能实现6.系统测试6.1 测试目的及方法6.2 系统功能测试6.2.1 登录功能测试6.2.2 添加功能测试6.2.3 删除功能测试6.3 测试结果分析代码@RestController  
@RequestMapping("/api/courses")public class CourseController{@Autowired  private CourseService courseService;@GetMapping("/{id}")public ResponseEntity&lt;Course&gt;getCourseById(@PathVariable Longid){Course course=courseService.getCourseById(id);returnResponseEntity.ok(course);}@PostMapping  public ResponseEntity&lt;Course&gt;createCourse(@RequestBody Course course){Course createdCourse=courseService.createCourse(course);returnResponseEntity.status(HttpStatus.CREATED).body(createdCourse);}}总结本研究基于SpringBoot的课程辅助教学系统，成功实现了在线课堂、资源管理、考试管理等功能，有效提升了实践教学的效率和质量。该系统操作便捷，界面简洁美观，能够满足教师和学生的多样化需求。通过实际应用验证，该系统在提高教学质量和效率方面效果显著，为教育现代化进程提供了有力支持。未来，我们将继续优化系统功能，提升用户体验，推动教育教学水平的持续提升。获取源码一键三连噢~http://www.ppmy.cn/news/1540814.html相关文章如何使用Python调用API数据在信息爆炸的今天&amp;#xff0c;数据成为了新的石油。API&amp;#xff08;应用程序编程接口&amp;#xff09;作为获取数据的重要途径&amp;#xff0c;已经深入到软件开发的各个角落。Python&amp;#xff0c;因其简洁的语法和强大的功能&amp;#xff0c;成为了调用API数据的首选语言之一。本文将带你了…阅读更多...mysql 10 单表访问方法01.优化的过程 
对于我们这些 MySQL 的使用者来说&amp;#xff0c; MySQL 其实就是一个软件&amp;#xff0c;平时用的最多的就是查询功能。DBA时不时丢过来一些慢查询语句让优化&amp;#xff0c;我们如果连查询是怎么执行的都不清楚还优化个毛线&amp;#xff0c;所以是时候掌握真正的技术了。我…阅读更多...无人机之自动驾驶技术无人机的自动驾驶技术是一个集成了多学科领域的复杂系统&amp;#xff0c;它使无人机能够在没有人工干预的情况下&amp;#xff0c;自主完成起飞、飞行、执行任务、降落等全过程。 
一、技术原理 
传感器技术&amp;#xff1a; 
无人机通常配备多种传感器&amp;#xff0c;如摄像头、激光雷达、GPS接…阅读更多...资料分析学习资料分析考查对各种文字、图表等资料的综合理解和分析加工的能力&amp;#xff0c;公考中有20道。 
统计术语 
增长量现期量-基期量 
增长率增长量/基期量现期量/基期量-1 
基期量现期量/&amp;#xff08;1增长率&amp;#xff09; 
已知增长率、基期量、现期量任意两个&amp;#xff0c;都可以求出…阅读更多...jmeter用csv data set config做参数化1在jmeter中&amp;#xff0c;csv data set config的作用非常强大&amp;#xff0c;用它来做批量测试和参数化非常好用。 
csv data set config的常用配置项如下&amp;#xff1a; Variable Names处&amp;#xff0c;写上源文件中的参数名&amp;#xff0c;用于后续接口发送请求时引用 
Ignore first line…阅读更多...Flink事件时间和Watermark前言 
Flink 提供了三种时间语义&amp;#xff0c;分别是 事件时间、摄入时间和处理时间。其中&amp;#xff0c;只有事件时间需要配合 Watermark 使用&amp;#xff0c;这是为什么呢&amp;#xff1f;Watermark 又是个什么东西呢&amp;#xff1f; 
诞生背景 
时间窗口计算模型的三大属性&amp;#xff0c;分…阅读更多...每天五分钟深度学习pytorch：L1和L2范数、L1和L2归一化本文重点 
我们在另外一个专栏《机器学习和深度学习数学基础》中介绍了常用的范数，这里我们就不进行详细介绍了。这里我们只介绍，如何使用pytorch来计算L1、L2范数，以及如何计算L1和L2归一化。 
L1和L2范数 
torch.norm(input, p=fro, dim=None, keepdim=False, out=None, d…阅读更多...做一篇有趣的SVG如何获取灵感？（ 计育韬老师高校公益巡讲答疑实录2024）这是计育韬老师第 8 次开展面向全国高校的新媒体技术公益巡讲活动了。而在每场讲座尾声&amp;#xff0c;互动答疑环节往往反映了高校师生当前最普遍的运营困境&amp;#xff0c;特此计老师在现场即兴答疑之外&amp;#xff0c;会尽量选择有较高价值的提问进行文字答疑梳理。 *本轮巡讲主题除了…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:07 +0000</pubDate>
    </item>
    <item>
      <title>如何使用Python调用API数据</title>
      <link>https://www.ppmy.cn/news/1540813.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维如何使用Python调用API数据news/2025/10/31 22:20:06/在信息爆炸的今天，数据成为了新的石油。API（应用程序编程接口）作为获取数据的重要途径，已经深入到软件开发的各个角落。Python，因其简洁的语法和强大的功能，成为了调用API数据的首选语言之一。本文将带你了解如何使用Python调用API数据，以及如何将这些数据转化为有价值的信息。为什么使用Python调用API数据？简洁的语法：Python的简洁性使得编写API调用代码变得直观易懂。强大的库支持：Python拥有如requests这样的库，极大地简化了HTTP请求的发送和响应的处理。数据处理能力：Python的数据处理库，如Pandas，使得数据的分析和处理变得简单。社区支持：Python社区庞大，提供了大量的资源和工具，帮助开发者快速解决问题。如何使用Python调用API数据？安装请求库：requests是Python中最受欢迎的HTTP请求库，可以通过以下命令安装：pip install requests构建API请求：使用requests库构建API请求，包括指定API的URL、请求方法（如GET或POST）、请求头（如API密钥）和请求参数。发送请求并处理响应：发送请求并接收响应数据，检查响应状态码以确保请求成功，并解析响应体中的数据。异常处理：正确处理可能发生的异常，如网络错误、API限制超出等。数据解析：将响应数据解析为Python数据结构，如字典或列表，以便进一步分析和处理。代码示例：使用requests库调用API以下是一个使用Python语言和requests库调用API的示例代码。import requestsdef fetch_api_data(api_url, params):try:response = requests.get(api_url, params=params)response.raise_for_status()  # 检查响应状态码return response.json()  # 返回JSON格式的响应数据except requests.RequestException as e:print(f"请求错误：{e}")return Noneapi_url = "https://api.example.com/data"
params = {"api_key": "你的API密钥","query": "示例查询"
}data = fetch_api_data(api_url, params)
if data:print("API响应数据：", data)# 在这里，你可以进一步处理数据，例如分析、存储或可视化在这个示例中，我们定义了一个fetch_api_data函数来发送HTTP GET请求到API接口。我们使用requests库来发送请求，并检查响应状态码以确保请求成功。然后，我们解析JSON格式的响应数据。总结使用Python调用API数据是现代软件开发中的一项基本技能。通过选择合适的库、构建有效的API请求、处理响应和异常，以及解析数据，你可以确保你的应用能够快速、可靠地获取数据，从而提升用户体验和业务竞争力。在数字化时代，掌握如何使用Python调用API数据将使你的应用更加智能和响应迅速，为用户带来更加丰富和实时的体验。http://www.ppmy.cn/news/1540813.html相关文章mysql 10 单表访问方法01.优化的过程 
对于我们这些 MySQL 的使用者来说&amp;#xff0c; MySQL 其实就是一个软件&amp;#xff0c;平时用的最多的就是查询功能。DBA时不时丢过来一些慢查询语句让优化&amp;#xff0c;我们如果连查询是怎么执行的都不清楚还优化个毛线&amp;#xff0c;所以是时候掌握真正的技术了。我…阅读更多...无人机之自动驾驶技术无人机的自动驾驶技术是一个集成了多学科领域的复杂系统&amp;#xff0c;它使无人机能够在没有人工干预的情况下&amp;#xff0c;自主完成起飞、飞行、执行任务、降落等全过程。 
一、技术原理 
传感器技术&amp;#xff1a; 
无人机通常配备多种传感器&amp;#xff0c;如摄像头、激光雷达、GPS接…阅读更多...资料分析学习资料分析考查对各种文字、图表等资料的综合理解和分析加工的能力&amp;#xff0c;公考中有20道。 
统计术语 
增长量现期量-基期量 
增长率增长量/基期量现期量/基期量-1 
基期量现期量/&amp;#xff08;1增长率&amp;#xff09; 
已知增长率、基期量、现期量任意两个&amp;#xff0c;都可以求出…阅读更多...jmeter用csv data set config做参数化1在jmeter中&amp;#xff0c;csv data set config的作用非常强大&amp;#xff0c;用它来做批量测试和参数化非常好用。 
csv data set config的常用配置项如下&amp;#xff1a; Variable Names处&amp;#xff0c;写上源文件中的参数名&amp;#xff0c;用于后续接口发送请求时引用 
Ignore first line…阅读更多...Flink事件时间和Watermark前言 
Flink 提供了三种时间语义&amp;#xff0c;分别是 事件时间、摄入时间和处理时间。其中&amp;#xff0c;只有事件时间需要配合 Watermark 使用&amp;#xff0c;这是为什么呢&amp;#xff1f;Watermark 又是个什么东西呢&amp;#xff1f; 
诞生背景 
时间窗口计算模型的三大属性&amp;#xff0c;分…阅读更多...每天五分钟深度学习pytorch：L1和L2范数、L1和L2归一化本文重点 
我们在另外一个专栏《机器学习和深度学习数学基础》中介绍了常用的范数，这里我们就不进行详细介绍了。这里我们只介绍，如何使用pytorch来计算L1、L2范数，以及如何计算L1和L2归一化。 
L1和L2范数 
torch.norm(input, p=fro, dim=None, keepdim=False, out=None, d…阅读更多...做一篇有趣的SVG如何获取灵感？（ 计育韬老师高校公益巡讲答疑实录2024）这是计育韬老师第 8 次开展面向全国高校的新媒体技术公益巡讲活动了。而在每场讲座尾声&amp;#xff0c;互动答疑环节往往反映了高校师生当前最普遍的运营困境&amp;#xff0c;特此计老师在现场即兴答疑之外&amp;#xff0c;会尽量选择有较高价值的提问进行文字答疑梳理。 *本轮巡讲主题除了…阅读更多...如何应对大数据集 dask VS pandas在Kaggle比赛中会遇到一些超大数据集&amp;#xff0c;甚至无法在notebook中用pandas加载。如果你没有性能炸裂的电脑&amp;#xff0c;很有可能你连比赛数据都获取不了。 
当然&amp;#xff0c;办法还是有的。 
tip1&amp;#xff1a;删除无用的变量&amp;#xff0c;使用gc.collect()清空内存tip2&amp;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:06 +0000</pubDate>
    </item>
    <item>
      <title>mysql 10 单表访问方法</title>
      <link>https://www.ppmy.cn/news/1540812.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维mysql 10 单表访问方法news/2025/10/31 22:20:05/01.优化的过程对于我们这些 MySQL 的使用者来说， MySQL 其实就是一个软件，平时用的最多的就是查询功能。DBA时不时丢过来一些慢查询语句让优化，我们如果连查询是怎么执行的都不清楚还优化个毛线，所以是时候掌握真正的技术了。我们在第一章的时候就曾说过， MySQL Server 有一个称为 查询优化器 的模块，一条查询语句进行语法解析之后就会被交给查询优化器来进行优化，优化的结果就是生成一个所谓的 执行计划 ，这个执行计划表明了应该使用哪些索引进行查询，表之间的连接顺序是啥样的，最后会按照执行计划中的步骤调用存储引擎提供的方法来真正的执行查询，并将查询结果返回给用户。1.2 举个例子02.查询有两种方式：回到 MySQL 中来，我们平时所写的那些查询语句本质上只是一种声明式的语法，只是告诉 MySQL 我们要获取的数据符合哪些规则，至于 MySQL 背地里是怎么把查询结果搞出来的那是 MySQL 自己的事儿。对于单个表的查询来说，设计MySQL的大叔把查询的执行方式大致分为下边两种：设计 MySQL 的大叔把 MySQL 执行查询语句的方式称之为 访问方法 或者 访问类型 。同一个查询语句可能可以使用多种不同的访问方法来执行，虽然最后的查询结果都是一样的，但是执行的时间可能差老鼻子远了，就像是从钟楼到大雁塔，你可以坐火箭去，也可以坐飞机去，当然也可以坐乌龟去。下边细细道来各种 访问方法 的具体内容。2.1 const2.1.1 主键查询原谅我把聚簇索引对应的复杂的 B+ 树结构搞了一个极度精简版，为了突出重点，我们忽略掉了 页 的结构，直接把所有的叶子节点的记录都放在一起展示，而且记录中只展示我们关心的索引列，对于 single_table 表的聚簇索引来说，展示的就是 id 列。我们想突出的重点就是： B+ 树叶子节点中的记录是按照索引列排序的，对于的聚簇索引来说，它对应的 B+ 树叶子节点中的记录就是按照 id 列排序的。2.1.2 唯一二级索引B+ 树本来就是一个矮矮的大胖子，所以这样根据主键值定位一条记录的速度贼快。类似的，我们根据唯一二级索引列来定位一条记录的速度也是贼快的，比如下边这个查询：可以看到这个查询的执行分两步，第一步先从 idx_key2 对应的 B+ 树索引中根据 key2 列与常数的等值比较条件定位到一条二级索引记录，然后再根据该记录的 id 值到聚簇索引中获取到完整的用户记录。设计 MySQL 的大叔认为通过主键或者唯一二级索引列与常数的等值比较来定位一条记录是像坐火箭一样快的，所以他们把这种通过主键或者唯一二级索引列来定位一条记录的访问方法定义为： const ，意思是常数级别的，代价是可以忽略不计的。2.2 ref有时候我们对某个普通的二级索引列与常数进行等值比较，比如这样：对于这个查询，我们当然可以选择全表扫描来逐一对比搜索条件是否满足要求，我们也可以先使用二级索引找到对应记录的 id 值，然后再回表到聚簇索引中查找完整的用户记录。由于普通二级索引并不限制索引列值的唯一性，所以可能找到多条对应的记录，也就是说使用二级索引来执行查询的代价取决于等值匹配到的二级索引记录条数。如果匹配的记录较少，则回表的代价还是比较低的，所以 MySQL 可能选择使用索引而不是全表扫描的方式来执行查询。设计 MySQL 的大叔就把这种搜索条件为二级索引列与常数等值比较，采用二级索引来执行查询的访问方法称为： ref 。我们看一下采用 ref 访问方法执行查询的图示：从图示中可以看出，对于普通的二级索引来说，通过索引列进行等值比较后可能匹配到多条连续的记录，而不是像主键或者唯一二级索引那样最多只能匹配1条记录，所以这种 ref 访问方法比 const 差了那么一丢丢，但是在二级索引等值比较时匹配的记录数较少时的效率还是很高的。2.3 ref_or_null有时候我们不仅想找出某个二级索引列的值等于某个常数的记录，还想把该列的值为 NULL 的记录也找出来，就像下边这个查询：SELECT * FROM single_demo WHERE key1='abc'OR key1 IS NULL;当使用二级索引而不是全表扫描的方式执行该查询时，这种类型的查询使用的访问方法就称为ref_or_null ，这个 ref_or_null 访问方法的执行过程如下：可以看到，上边的查询相当于先分别从 idx_key1 索引对应的 B+ 树中找出 key1 IS NULL 和 key1 = ‘abc’ 的两个连续的记录范围，然后根据这些二级索引记录中的 id 值再回表查找完整的用户记录。2.4 range2.5 index2.6 重温 二级索引 + 回表2.7 明确range访问方法使用的范围区间2.7.1 所有搜索条件都可以使用某个索引的情况也就是说上边这个查询使用 idx_key2 的范围区间就是 (100， +∞) 。2.7.2 有的搜索条件无法使用索引的情况2.7.3复杂搜索条件下找出范围匹配的区间3.0 索引合并我们前边说过 MySQL 在一般情况下执行一个查询时最多只会用到单个二级索引，但不是还有特殊情况么，在这些特殊情况下也可能在一个查询中使用到多个二级索引，设计 MySQL 的大叔把这种使用到多个索引来完成一次查询的执行方法称之为： index merge ，具体的索引合并算法有下边三种。3.1 AND Intersection合并什么时候使用3.2 OR Union合并3.3 Sort-Union合并http://www.ppmy.cn/news/1540812.html相关文章无人机之自动驾驶技术无人机的自动驾驶技术是一个集成了多学科领域的复杂系统&amp;#xff0c;它使无人机能够在没有人工干预的情况下&amp;#xff0c;自主完成起飞、飞行、执行任务、降落等全过程。 
一、技术原理 
传感器技术&amp;#xff1a; 
无人机通常配备多种传感器&amp;#xff0c;如摄像头、激光雷达、GPS接…阅读更多...资料分析学习资料分析考查对各种文字、图表等资料的综合理解和分析加工的能力&amp;#xff0c;公考中有20道。 
统计术语 
增长量现期量-基期量 
增长率增长量/基期量现期量/基期量-1 
基期量现期量/&amp;#xff08;1增长率&amp;#xff09; 
已知增长率、基期量、现期量任意两个&amp;#xff0c;都可以求出…阅读更多...jmeter用csv data set config做参数化1在jmeter中&amp;#xff0c;csv data set config的作用非常强大&amp;#xff0c;用它来做批量测试和参数化非常好用。 
csv data set config的常用配置项如下&amp;#xff1a; Variable Names处&amp;#xff0c;写上源文件中的参数名&amp;#xff0c;用于后续接口发送请求时引用 
Ignore first line…阅读更多...Flink事件时间和Watermark前言 
Flink 提供了三种时间语义&amp;#xff0c;分别是 事件时间、摄入时间和处理时间。其中&amp;#xff0c;只有事件时间需要配合 Watermark 使用&amp;#xff0c;这是为什么呢&amp;#xff1f;Watermark 又是个什么东西呢&amp;#xff1f; 
诞生背景 
时间窗口计算模型的三大属性&amp;#xff0c;分…阅读更多...每天五分钟深度学习pytorch：L1和L2范数、L1和L2归一化本文重点 
我们在另外一个专栏《机器学习和深度学习数学基础》中介绍了常用的范数，这里我们就不进行详细介绍了。这里我们只介绍，如何使用pytorch来计算L1、L2范数，以及如何计算L1和L2归一化。 
L1和L2范数 
torch.norm(input, p=fro, dim=None, keepdim=False, out=None, d…阅读更多...做一篇有趣的SVG如何获取灵感？（ 计育韬老师高校公益巡讲答疑实录2024）这是计育韬老师第 8 次开展面向全国高校的新媒体技术公益巡讲活动了。而在每场讲座尾声&amp;#xff0c;互动答疑环节往往反映了高校师生当前最普遍的运营困境&amp;#xff0c;特此计老师在现场即兴答疑之外&amp;#xff0c;会尽量选择有较高价值的提问进行文字答疑梳理。 *本轮巡讲主题除了…阅读更多...如何应对大数据集 dask VS pandas在Kaggle比赛中会遇到一些超大数据集&amp;#xff0c;甚至无法在notebook中用pandas加载。如果你没有性能炸裂的电脑&amp;#xff0c;很有可能你连比赛数据都获取不了。 
当然&amp;#xff0c;办法还是有的。 
tip1&amp;#xff1a;删除无用的变量&amp;#xff0c;使用gc.collect()清空内存tip2&amp;…阅读更多...综合小案例目录 
1、简单计算器  
2、猜数字小游戏 3、开发一个验证码 
4、找素数  1、简单计算器  目标&amp;#xff1a;  设计一个可以执行基本数学运算&amp;#xff08;加、减、乘、除&amp;#xff09;的计算器程序。 功能描述&amp;#xff1a;  用户输入两个数字、一个运算符&amp;#xff08;、-、*、/&amp;am…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:05 +0000</pubDate>
    </item>
    <item>
      <title>无人机之自动驾驶技术</title>
      <link>https://www.ppmy.cn/news/1540811.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维无人机之自动驾驶技术news/2025/10/31 22:20:04/无人机的自动驾驶技术是一个集成了多学科领域的复杂系统，它使无人机能够在没有人工干预的情况下，自主完成起飞、飞行、执行任务、降落等全过程。一、技术原理传感器技术：无人机通常配备多种传感器，如摄像头、激光雷达、GPS接收器、惯性测量单元（IMU）等，用于收集飞行过程中的各种数据。这些传感器收集的数据通过融合算法进行处理，以提高无人机的定位精度和环境感知能力。人工智能技术：基于深度学习和计算机视觉算法，无人机能够自主识别障碍物、调整飞行路径并做出决策，以应对突发情况和干扰。通过机器视觉技术和深度学习算法，无人机能够实时分析传感器数据，识别目标、障碍物和地形等信息，以做出更加精准的决策。通信导航定位技术：无人机采用多频段、多通道通信技术，建立冗余通信系统，以提高数据传输的可靠性和抗干扰能力。集成多种卫星导航系统（如GPS、GLONASS、Galileo等），并采用差分GPS技术，提高无人机的定位精度和抗干扰能力。数据处理与感知技术：无人机通过高级信号处理技术，如自适应滤波、波形识别等，提高在复杂电磁环境下的信号提取和识别能力。利用IMU等惯性元件，在GPS信号中断时提供短时间的连续定位服务，确保飞行安全。二、技术特点自主性：无人机能够自主完成飞行任务，无需人工干预。智能性：通过人工智能算法和机器视觉技术，无人机能够实时分析数据并做出决策。适应性：无人机能够适应复杂环境和干扰条件，确保飞行安全和任务完成。高效性：通过优化飞行路径和自主决策，无人机能够提高飞行效率和任务执行效率。三、应用领域无人机自动驾驶技术广泛应用于多个领域，包括但不限于：军事侦察：无人机能够自主执行侦察任务，获取敌方情报和地形信息。环境监测：无人机可用于气象探测、水质监测等环境监测任务，实现自动化和高效化。地理测绘：无人机能够自主进行地理测绘，获取高精度地图和地形数据。物流配送：利用无人机自动完成货物的装卸、搬运和送达等作业，提高物流效率并降低成本。农业种植：无人机在农业生产中可用于自动化种植、管理和采摘等环节，提高农业生产效率。http://www.ppmy.cn/news/1540811.html相关文章资料分析学习资料分析考查对各种文字、图表等资料的综合理解和分析加工的能力&amp;#xff0c;公考中有20道。 
统计术语 
增长量现期量-基期量 
增长率增长量/基期量现期量/基期量-1 
基期量现期量/&amp;#xff08;1增长率&amp;#xff09; 
已知增长率、基期量、现期量任意两个&amp;#xff0c;都可以求出…阅读更多...jmeter用csv data set config做参数化1在jmeter中&amp;#xff0c;csv data set config的作用非常强大&amp;#xff0c;用它来做批量测试和参数化非常好用。 
csv data set config的常用配置项如下&amp;#xff1a; Variable Names处&amp;#xff0c;写上源文件中的参数名&amp;#xff0c;用于后续接口发送请求时引用 
Ignore first line…阅读更多...Flink事件时间和Watermark前言 
Flink 提供了三种时间语义&amp;#xff0c;分别是 事件时间、摄入时间和处理时间。其中&amp;#xff0c;只有事件时间需要配合 Watermark 使用&amp;#xff0c;这是为什么呢&amp;#xff1f;Watermark 又是个什么东西呢&amp;#xff1f; 
诞生背景 
时间窗口计算模型的三大属性&amp;#xff0c;分…阅读更多...每天五分钟深度学习pytorch：L1和L2范数、L1和L2归一化本文重点 
我们在另外一个专栏《机器学习和深度学习数学基础》中介绍了常用的范数，这里我们就不进行详细介绍了。这里我们只介绍，如何使用pytorch来计算L1、L2范数，以及如何计算L1和L2归一化。 
L1和L2范数 
torch.norm(input, p=fro, dim=None, keepdim=False, out=None, d…阅读更多...做一篇有趣的SVG如何获取灵感？（ 计育韬老师高校公益巡讲答疑实录2024）这是计育韬老师第 8 次开展面向全国高校的新媒体技术公益巡讲活动了。而在每场讲座尾声&amp;#xff0c;互动答疑环节往往反映了高校师生当前最普遍的运营困境&amp;#xff0c;特此计老师在现场即兴答疑之外&amp;#xff0c;会尽量选择有较高价值的提问进行文字答疑梳理。 *本轮巡讲主题除了…阅读更多...如何应对大数据集 dask VS pandas在Kaggle比赛中会遇到一些超大数据集&amp;#xff0c;甚至无法在notebook中用pandas加载。如果你没有性能炸裂的电脑&amp;#xff0c;很有可能你连比赛数据都获取不了。 
当然&amp;#xff0c;办法还是有的。 
tip1&amp;#xff1a;删除无用的变量&amp;#xff0c;使用gc.collect()清空内存tip2&amp;…阅读更多...综合小案例目录 
1、简单计算器  
2、猜数字小游戏 3、开发一个验证码 
4、找素数  1、简单计算器  目标&amp;#xff1a;  设计一个可以执行基本数学运算&amp;#xff08;加、减、乘、除&amp;#xff09;的计算器程序。 功能描述&amp;#xff1a;  用户输入两个数字、一个运算符&amp;#xff08;、-、*、/&amp;am…阅读更多...基于SSM的校园跑腿网站的设计与实现文未可获取一份本项目的java源码和数据库参考。 
课题来源及研究的目的和意义 
随着网络技术的不断完善与发展&amp;#xff0c;各种互联网公司不断如雨后春笋般不断涌现&amp;#xff0c;丰富了人们生活的各个方面。近年来由于 Online To 0ffline即线上到线下(020)模式的发展和兴起&amp;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:04 +0000</pubDate>
    </item>
    <item>
      <title>资料分析学习</title>
      <link>https://www.ppmy.cn/news/1540810.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维资料分析学习news/2025/10/31 22:20:02/资料分析考查对各种文字、图表等资料的综合理解和分析加工的能力，公考中有20道。统计术语增长量=现期量-基期量增长率=增长量/基期量=现期量/基期量-1基期量=现期量/（1+增长率）已知增长率、基期量、现期量任意两个，都可以求出第三个。同比增长：与上一年的同一时期相比的的增长率环比增长：与紧邻的上一期相比的增长率指数：指数是用一种比例的方式来表示一种量的大小。GDP(国内生产总值)：一个国家（或地区）所有常驻单位在一定时期内生产的最终产品和服务价值的总和GNP(国民生产总值)：一个国家所有国民在一定时期内生产的最终产品和服务价值的总和贸易顺差：出口额大于进口额贸易逆差：出口额小于进口额基尼系数：用来衡量一个国家或地区人民收入差距的常用指标。基尼系数越大，表示不平等程度越高。恩格尔系数：食品支出占总消费的比例，这个比例越小，反应生活水平越高必会速算技巧图形法直接通过图形进行估算估算法直除法是指计算复杂分数时，直接相除的方式得到商的首位（或者多位）分母扩大缩小1%，误差也差不多在1%左右放缩法截位法截位法，是指在精度允许的范围内，将计算过程中的数字，近似为与之相近的数字，来简化整个计算过程。加减截位法首先观察选项，发现第四位不一样，然后计算6+12+5+3=26 ，所以排除了A，然后看下一位是否有进位，计算8+4+3=15，有进位，这时离二十还差好多，所以不需要在判断下一位了乘除截位法两个数相乘，那么两个数的相对误差率之和可以近似为总体的相对误差率两个数相除，那么两个数的相对误差之差，近似为总体的相对误差率凑整截位法参照截位法是指在计算的过程中，以某一个数字为”参照“，将其他的数字化为”参照+差异的“形式化同法差分法差分法可以用浓度混合原理来理解，材料类型http://www.ppmy.cn/news/1540810.html相关文章jmeter用csv data set config做参数化1在jmeter中&amp;#xff0c;csv data set config的作用非常强大&amp;#xff0c;用它来做批量测试和参数化非常好用。 
csv data set config的常用配置项如下&amp;#xff1a; Variable Names处&amp;#xff0c;写上源文件中的参数名&amp;#xff0c;用于后续接口发送请求时引用 
Ignore first line…阅读更多...Flink事件时间和Watermark前言 
Flink 提供了三种时间语义&amp;#xff0c;分别是 事件时间、摄入时间和处理时间。其中&amp;#xff0c;只有事件时间需要配合 Watermark 使用&amp;#xff0c;这是为什么呢&amp;#xff1f;Watermark 又是个什么东西呢&amp;#xff1f; 
诞生背景 
时间窗口计算模型的三大属性&amp;#xff0c;分…阅读更多...每天五分钟深度学习pytorch：L1和L2范数、L1和L2归一化本文重点 
我们在另外一个专栏《机器学习和深度学习数学基础》中介绍了常用的范数，这里我们就不进行详细介绍了。这里我们只介绍，如何使用pytorch来计算L1、L2范数，以及如何计算L1和L2归一化。 
L1和L2范数 
torch.norm(input, p=fro, dim=None, keepdim=False, out=None, d…阅读更多...做一篇有趣的SVG如何获取灵感？（ 计育韬老师高校公益巡讲答疑实录2024）这是计育韬老师第 8 次开展面向全国高校的新媒体技术公益巡讲活动了。而在每场讲座尾声&amp;#xff0c;互动答疑环节往往反映了高校师生当前最普遍的运营困境&amp;#xff0c;特此计老师在现场即兴答疑之外&amp;#xff0c;会尽量选择有较高价值的提问进行文字答疑梳理。 *本轮巡讲主题除了…阅读更多...如何应对大数据集 dask VS pandas在Kaggle比赛中会遇到一些超大数据集&amp;#xff0c;甚至无法在notebook中用pandas加载。如果你没有性能炸裂的电脑&amp;#xff0c;很有可能你连比赛数据都获取不了。 
当然&amp;#xff0c;办法还是有的。 
tip1&amp;#xff1a;删除无用的变量&amp;#xff0c;使用gc.collect()清空内存tip2&amp;…阅读更多...综合小案例目录 
1、简单计算器  
2、猜数字小游戏 3、开发一个验证码 
4、找素数  1、简单计算器  目标&amp;#xff1a;  设计一个可以执行基本数学运算&amp;#xff08;加、减、乘、除&amp;#xff09;的计算器程序。 功能描述&amp;#xff1a;  用户输入两个数字、一个运算符&amp;#xff08;、-、*、/&amp;am…阅读更多...基于SSM的校园跑腿网站的设计与实现文未可获取一份本项目的java源码和数据库参考。 
课题来源及研究的目的和意义 
随着网络技术的不断完善与发展&amp;#xff0c;各种互联网公司不断如雨后春笋般不断涌现&amp;#xff0c;丰富了人们生活的各个方面。近年来由于 Online To 0ffline即线上到线下(020)模式的发展和兴起&amp;…阅读更多...字符、解释型语言、编程语言的互操作、输出字符 同样是1&amp;#xff0c;有人看到的是数字&amp;#xff0c;有人看到的是字符&amp;#xff0c;还有人看到的是一个小目标。 不同语言的字符 正则表达式把字符分成普通字符和元字符&amp;#xff0c;元字符为了搭配匹配。比如.代表任意非换行字符&amp;#xff0c;这对于通配很简便&amp;#xff0c;用\…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:03 +0000</pubDate>
    </item>
    <item>
      <title>jmeter用csv data set config做参数化1</title>
      <link>https://www.ppmy.cn/news/1540809.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维jmeter用csv data set config做参数化1news/2025/10/31 22:20:01/在jmeter中，csv data set config的作用非常强大，用它来做批量测试和参数化非常好用。csv data set config的常用配置项如下：Variable Names处，写上源文件中的参数名，用于后续接口发送请求时引用Ignore first line：如果csv文件中的首行是表示字段名称的，那么这里一定记得设为True,否则会报错。Allow Quoted data?: 这里如果参数数据中有逗号的，这里一定设为True,可以以原貌读取数据，而不是截断读取。Stop thread on EOF?: 当循环到文件结尾时，停止线程操作与否？选择True，就是无论线程数设置为多少，到文件结尾都停止线程操作。接下来，看个例子，csv data set config这个设置可以让参数调用在各个地方，包括断言内容。csv文件的内容为：其中看到包括两列数据，一列是要断言的字段，一列是断言的结果值在csv data set config元件上，这样设置接下来，看重磅部分，参数引用真的可以用在各个地方这里，断言的字段，和断言的结果值都可以引用csv文件里的字段。这样就能实现接口参数化了，覆盖各种正常和异常场景的数据不同和响应结果不同的情况了！非常强大和好用！最后，运行看下结果：这样，就非常高效地完成了同一接口的参数化的测试。其他的，如http请求上的字段，都可以参数化，如下图这些参数化的字段都是csv文件里对应的字段总结：csv data set config这个元件的功能很强大，能将参数化做到，用来做批量测试很好。http://www.ppmy.cn/news/1540809.html相关文章Flink事件时间和Watermark前言 
Flink 提供了三种时间语义&amp;#xff0c;分别是 事件时间、摄入时间和处理时间。其中&amp;#xff0c;只有事件时间需要配合 Watermark 使用&amp;#xff0c;这是为什么呢&amp;#xff1f;Watermark 又是个什么东西呢&amp;#xff1f; 
诞生背景 
时间窗口计算模型的三大属性&amp;#xff0c;分…阅读更多...每天五分钟深度学习pytorch：L1和L2范数、L1和L2归一化本文重点 
我们在另外一个专栏《机器学习和深度学习数学基础》中介绍了常用的范数，这里我们就不进行详细介绍了。这里我们只介绍，如何使用pytorch来计算L1、L2范数，以及如何计算L1和L2归一化。 
L1和L2范数 
torch.norm(input, p=fro, dim=None, keepdim=False, out=None, d…阅读更多...做一篇有趣的SVG如何获取灵感？（ 计育韬老师高校公益巡讲答疑实录2024）这是计育韬老师第 8 次开展面向全国高校的新媒体技术公益巡讲活动了。而在每场讲座尾声&amp;#xff0c;互动答疑环节往往反映了高校师生当前最普遍的运营困境&amp;#xff0c;特此计老师在现场即兴答疑之外&amp;#xff0c;会尽量选择有较高价值的提问进行文字答疑梳理。 *本轮巡讲主题除了…阅读更多...如何应对大数据集 dask VS pandas在Kaggle比赛中会遇到一些超大数据集&amp;#xff0c;甚至无法在notebook中用pandas加载。如果你没有性能炸裂的电脑&amp;#xff0c;很有可能你连比赛数据都获取不了。 
当然&amp;#xff0c;办法还是有的。 
tip1&amp;#xff1a;删除无用的变量&amp;#xff0c;使用gc.collect()清空内存tip2&amp;…阅读更多...综合小案例目录 
1、简单计算器  
2、猜数字小游戏 3、开发一个验证码 
4、找素数  1、简单计算器  目标&amp;#xff1a;  设计一个可以执行基本数学运算&amp;#xff08;加、减、乘、除&amp;#xff09;的计算器程序。 功能描述&amp;#xff1a;  用户输入两个数字、一个运算符&amp;#xff08;、-、*、/&amp;am…阅读更多...基于SSM的校园跑腿网站的设计与实现文未可获取一份本项目的java源码和数据库参考。 
课题来源及研究的目的和意义 
随着网络技术的不断完善与发展&amp;#xff0c;各种互联网公司不断如雨后春笋般不断涌现&amp;#xff0c;丰富了人们生活的各个方面。近年来由于 Online To 0ffline即线上到线下(020)模式的发展和兴起&amp;…阅读更多...字符、解释型语言、编程语言的互操作、输出字符 同样是1&amp;#xff0c;有人看到的是数字&amp;#xff0c;有人看到的是字符&amp;#xff0c;还有人看到的是一个小目标。 不同语言的字符 正则表达式把字符分成普通字符和元字符&amp;#xff0c;元字符为了搭配匹配。比如.代表任意非换行字符&amp;#xff0c;这对于通配很简便&amp;#xff0c;用\…阅读更多...Golang Map简介Go Map 
Map 简介 
在Go语言中提供了map数据结构来存储键值对数据。map的数据类型为map[K]V&amp;#xff0c;其中K为键的类型&amp;#xff0c;V为值的类型。map的键类型必须支持操作符&amp;#xff0c;用来比较两个键是否相等。Go语言提供了4种内置的map操作: len、delete、comparison、ass…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:01 +0000</pubDate>
    </item>
    <item>
      <title>Flink事件时间和Watermark</title>
      <link>https://www.ppmy.cn/news/1540808.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Flink事件时间和Watermarknews/2025/10/31 22:20:00/前言Flink 提供了三种时间语义，分别是 事件时间、摄入时间和处理时间。其中，只有事件时间需要配合 Watermark 使用，这是为什么呢？Watermark 又是个什么东西呢？诞生背景时间窗口计算模型的三大属性，分别是：窗口的大小、计算的频次、窗口数据的处理逻辑。其中，计算的频次 Flink 要如何确定呢？举个例子，现在要每隔1分钟计算某个商品过去1分钟的销量。这是一个典型的滚动窗口计算场景，窗口大小和计算频次都是1分钟。在摄入时间或处理时间语义下，Flink 很容易处理，因为这俩时间语义都是采用的 subTask 本地机器时间来分配窗口的，本地机器时间有个特点，那就是单调递增，对于窗口算子来说，数据都是顺序到达的，subTask 无须处理乱序数据。窗口的分配和关闭计算全凭本地机器时间推动，Flink 只需要启动一个单独的线程，在窗口关闭时间到达的时候触发计算即可。可是，在事件时间语义下，因为数据是乱序的，窗口算子必须要考虑如何处理“迟到”的数据，这件事就变得复杂起来了。举个例子，窗口算子 subTask 分别接收到了下单时间为 10:00:20、10:00:40 的两条订单数据，于是将其分配到 [10:00,10:01] 窗口并缓存起来，接着又收到了下单事件为 10:01:30 的订单数据，此时，Flink 可以将 [10:00,10:01] 窗口关闭并触发计算吗？？？此时，Flink 面临两个选择：1、关闭窗口并计算，数据处理的效率和实时性更好，但是面对后续到达的迟到数据，只能选择丢弃，结果的准确性会降低；2、不关闭窗口，继续等待迟到数据，结果的准确性会更高，但是效率和实时性会降低。Flink 面对两难的抉择，其实不知道如何选择，索性把这个选择权交给开发者。于是，Watermark 诞生了，它其实就是 事件时间时钟，发送 Watermark 其实就是推进下游算子 subTask 的事件时间时钟，告诉下游算子，Watermark 之前的数据已经全部到达，对应的窗口可以关闭并触发计算了。如果业务对实时性要求更高，那么我们就可以把 Watermark 设置的激进些；如果业务对结果准确性更高，那么就可以把 Watermark 设置的保守些。Watermark 是什么Watermark 是一个单位为毫秒的Unix时间戳，用于维护事件时间时钟。如下示例，代表创建了一个时间为2024-01-01 00:00:00的Watermark：Watermarkwatermark=newWatermark(1704038400L);需要注意的是，Watermark 的生成规则应该遵循单调递增原则，就像时间一样不能回退，否则可能会导致数据结果不正确。在 Flink 中，在所有算子间传输的数据都被抽象成了 StreamElement 类。普通数据被封装成子类 StreamRecord，Watermark 是一种可以在算子间传输的特殊数据，它只携带一个时间戳，所以被封装成了子类org.apache.flink.streaming.api.watermark.WatermarkpublicclassWatermarkextendsStreamElement{publicstaticfinalWatermarkMAX_WATERMARK=newWatermark(Long.MAX_VALUE);publicstaticfinalWatermarkUNINITIALIZED=newWatermark(Long.MIN_VALUE);protectedfinallongtimestamp;}Watermark生成策略Watermark 生成策略被 Flink 抽象成了 WatermarkStrategy 接口publicinterfaceWatermarkStrategy&lt;T&gt;extendsTimestampAssignerSupplier&lt;T&gt;,WatermarkGeneratorSupplier&lt;T&gt;{WatermarkGenerator&lt;T&gt;createWatermarkGenerator(WatermarkGeneratorSupplier.Contextvar1);defaultTimestampAssigner&lt;T&gt;createTimestampAssigner(TimestampAssignerSupplier.Contextcontext){returnnewRecordTimestampAssigner();}}它包含两个组件，WatermarkGenerator 用于生成 Watermark，TimestampAssigner 用于提取数据中的事件时间。WatermarkGenerator 接口中，onEvent() 会在每次处理数据时调用，适用于数据本身携带 Watermark 的场景；onPeriodicEmit() 会按照一定的频率周期性的调用，适用于数据本身没有 Watermark 标志的场景。publicinterfaceWatermarkGenerator&lt;T&gt;{voidonEvent(Tvar1,longvar2,WatermarkOutputvar4);voidonPeriodicEmit(WatermarkOutputvar1);}TimestampAssigner 默认会使用子类 RecordTimestampAssigner，它直接使用 Source 算子采集数据时指定的时间戳，即通过以下方式采集数据时使用：publicvoidrun(SourceContext&lt;String&gt;sourceContext)throwsException{sourceContext.collectWithTimestamp("element",System.currentTimeMillis());}如果 Source 算子没有指定时间戳，就需要我们实现 TimestampAssigner 接口自己从数据中提取时间戳了。内置的WatermarkGeneratorFlink 内置了一些常用的Watermark生成策略，如果满足业务需求，可以拿来即用。1、BoundedOutOfOrdernessWatermarks你能接受的最大乱序程度是多少？假如说，你认为数据延迟最多不超过10秒，即到达 10:00:10时，10点之前的数据肯定全部到达，那么就可以直接使用 BoundedOutOfOrdernessWatermarks。publicclassBoundedOutOfOrdernessWatermarks&lt;T&gt;implementsWatermarkGenerator&lt;T&gt;{privatelongmaxTimestamp;privatefinallongoutOfOrdernessMillis;// 最大乱序程度 时间publicBoundedOutOfOrdernessWatermarks(DurationmaxOutOfOrderness){Preconditions.checkNotNull(maxOutOfOrderness,"maxOutOfOrderness");Preconditions.checkArgument(!maxOutOfOrderness.isNegative(),"maxOutOfOrderness cannot be negative");this.outOfOrdernessMillis=maxOutOfOrderness.toMillis();this.maxTimestamp=Long.MIN_VALUE+this.outOfOrdernessMillis+1L;}publicvoidonEvent(Tevent,longeventTimestamp,WatermarkOutputoutput){this.maxTimestamp=Math.max(this.maxTimestamp,eventTimestamp);}publicvoidonPeriodicEmit(WatermarkOutputoutput){output.emitWatermark(newWatermark(this.maxTimestamp-this.outOfOrdernessMillis-1L));}}实例化 BoundedOutOfOrdernessWatermarks 需要传入一个你能接受的最大乱序程度时间，Watermark 会周期性的发送，但是发送的时间戳会比当前最大的事件时间减去一个 maxOutOfOrderness。2、AscendingTimestampsWatermarks如果你确定数据流中永远也不会有迟到数据，即你处理的是一条有序数据流，那么直接使用 AscendingTimestampsWatermarks，它继承自 BoundedOutOfOrdernessWatermarks，只不过不接收乱序。publicclassAscendingTimestampsWatermarks&lt;T&gt;extendsBoundedOutOfOrdernessWatermarks&lt;T&gt;{publicAscendingTimestampsWatermarks(){super(Duration.ofMillis(0L));}}自定义WatermarkGenerator内置 WatermarkGenerator 不满足需求时，也可以自定义Watermark生成策略。如果数据本身携带 Watermark 标志，那么可以重写 onEvent() 来发送 Watermark。publicclassMyWatermarkGeneratorimplementsWatermarkGenerator&lt;Tuple2&lt;String,Long&gt;&gt;{@OverridepublicvoidonEvent(Tuple2&lt;String,Long&gt;tuple2,longl,WatermarkOutputwatermarkOutput){// 假设数据格式中 字符串W开头是Watermark，其中f1是时间戳if(tuple2.f0.startsWith("W")){watermarkOutput.emitWatermark(newWatermark(tuple2.f1));}}@OverridepublicvoidonPeriodicEmit(WatermarkOutputwatermarkOutput){// NOOP}}如果数据本身没有Watermark标志，我们也可以直接根据系统时钟，周期性的发送 Watermark。先通过 StreamExecutionEnvironment 设置周期性发送 Watermark 的频率StreamExecutionEnvironmentenvironment=StreamExecutionEnvironment.getExecutionEnvironment();environment.getConfig().setAutoWatermarkInterval(500L);再重写 onPeriodicEmit()publicclassMyWatermarkGeneratorimplementsWatermarkGenerator&lt;Tuple2&lt;String,Long&gt;&gt;{@OverridepublicvoidonEvent(Tuple2&lt;String,Long&gt;tuple2,longl,WatermarkOutputwatermarkOutput){// NOOP}@OverridepublicvoidonPeriodicEmit(WatermarkOutputwatermarkOutput){watermarkOutput.emitWatermark(newWatermark(System.currentTimeMillis()));}}迟到数据的处理针对迟到数据的处理，Flink 提供了三种方案。1、推送延迟的 Watermark通过设置最大乱序容忍度，让 Flink 发送 Watermark 时主动把最大事件时间减去一个延迟时间，为乱序数据争取更多的时间进入窗口。WatermarkStrategy.forBoundedOutOfOrderness(Duration.ofSeconds(5));2、窗口延迟关闭如果延迟后的 Watermark 还是没能等到迟到的数据，我们可以用第二招：窗口延迟关闭。Watermark 到了窗口的关闭时间，先触发计算，但是不关闭窗口，窗口内缓存的数据会保存一段时间，这段时间内如果有迟到的数据，Flink 会重新计算。直到 Watermark 超过了 窗口关闭时间+延迟时间，窗口才会真的关闭。注意，延迟的时间不宜过长，会增加 Flink 作业的负担。.windowAll(TumblingEventTimeWindows.of(Duration.ofSeconds(10L))).allowedLateness(Duration.ofSeconds(3L))3、迟到数据输出到另外一个数据流如果延迟的窗口还是没能等到迟到的数据，Flink 还给我们准备了最后一招。通过Flink提供的侧输出流能力，将迟到数据输出到另外一个数据流里，迟到数据流再对计算结果做一定的修正。.windowAll(TumblingEventTimeWindows.of(Duration.ofSeconds(10L))).allowedLateness(Duration.ofSeconds(3L)).sideOutputLateData(newOutputTag&lt;&gt;("late-data"))尾巴Flink 在事件时间语义下需要搭配 Watermark 使用，Watermark 是一种特殊的数据类型，它可以在算子间传输。它本身就是一个时间戳，本质上是一个衡量事件时间进度的标记，subTask 收到 Watermark 会认为早于该时间戳的数据都收到了，相应的窗口可以关闭并触发计算了。Watermark 是为了平衡数据处理的时效性和结果准确性的一个手段，如果业务对时效性敏感，Watermark就可以设置的激进些；如果业务对结果准确性更敏感，Watermark 就可以设置的保守些。另外需要注意，Watermark 生成要遵循单调递增的原则，不能发生时钟回退。Watermark 生成也不宜太频繁，以免影响 Flink 作业的性能。http://www.ppmy.cn/news/1540808.html相关文章每天五分钟深度学习pytorch：L1和L2范数、L1和L2归一化本文重点 
我们在另外一个专栏《机器学习和深度学习数学基础》中介绍了常用的范数，这里我们就不进行详细介绍了。这里我们只介绍，如何使用pytorch来计算L1、L2范数，以及如何计算L1和L2归一化。 
L1和L2范数 
torch.norm(input, p=fro, dim=None, keepdim=False, out=None, d…阅读更多...做一篇有趣的SVG如何获取灵感？（ 计育韬老师高校公益巡讲答疑实录2024）这是计育韬老师第 8 次开展面向全国高校的新媒体技术公益巡讲活动了。而在每场讲座尾声&amp;#xff0c;互动答疑环节往往反映了高校师生当前最普遍的运营困境&amp;#xff0c;特此计老师在现场即兴答疑之外&amp;#xff0c;会尽量选择有较高价值的提问进行文字答疑梳理。 *本轮巡讲主题除了…阅读更多...如何应对大数据集 dask VS pandas在Kaggle比赛中会遇到一些超大数据集&amp;#xff0c;甚至无法在notebook中用pandas加载。如果你没有性能炸裂的电脑&amp;#xff0c;很有可能你连比赛数据都获取不了。 
当然&amp;#xff0c;办法还是有的。 
tip1&amp;#xff1a;删除无用的变量&amp;#xff0c;使用gc.collect()清空内存tip2&amp;…阅读更多...综合小案例目录 
1、简单计算器  
2、猜数字小游戏 3、开发一个验证码 
4、找素数  1、简单计算器  目标&amp;#xff1a;  设计一个可以执行基本数学运算&amp;#xff08;加、减、乘、除&amp;#xff09;的计算器程序。 功能描述&amp;#xff1a;  用户输入两个数字、一个运算符&amp;#xff08;、-、*、/&amp;am…阅读更多...基于SSM的校园跑腿网站的设计与实现文未可获取一份本项目的java源码和数据库参考。 
课题来源及研究的目的和意义 
随着网络技术的不断完善与发展&amp;#xff0c;各种互联网公司不断如雨后春笋般不断涌现&amp;#xff0c;丰富了人们生活的各个方面。近年来由于 Online To 0ffline即线上到线下(020)模式的发展和兴起&amp;…阅读更多...字符、解释型语言、编程语言的互操作、输出字符 同样是1&amp;#xff0c;有人看到的是数字&amp;#xff0c;有人看到的是字符&amp;#xff0c;还有人看到的是一个小目标。 不同语言的字符 正则表达式把字符分成普通字符和元字符&amp;#xff0c;元字符为了搭配匹配。比如.代表任意非换行字符&amp;#xff0c;这对于通配很简便&amp;#xff0c;用\…阅读更多...Golang Map简介Go Map 
Map 简介 
在Go语言中提供了map数据结构来存储键值对数据。map的数据类型为map[K]V&amp;#xff0c;其中K为键的类型&amp;#xff0c;V为值的类型。map的键类型必须支持操作符&amp;#xff0c;用来比较两个键是否相等。Go语言提供了4种内置的map操作: len、delete、comparison、ass…阅读更多...Jmeter学习深入Jmeter学习深入 
一、jmeter接口关联 
提取器: 。 CS5:给网页使用 。JSON:给JSON数据使用 。 边界:给字符串使用 。正则:更加高级的字符使用 。XPath:给网页使用 
必须掌握: JSON边界 JSON  正则 
1.边界提取器 给定两边取中间 2.正则提取器 
正则:强大并且复杂 通过指定正则表…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:20:00 +0000</pubDate>
    </item>
    <item>
      <title>每天五分钟深度学习pytorch：L1和L2范数、L1和L2归一化</title>
      <link>https://www.ppmy.cn/news/1540807.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维每天五分钟深度学习pytorch：L1和L2范数、L1和L2归一化news/2025/10/31 22:19:59/本文重点我们在另外一个专栏《机器学习和深度学习数学基础》中介绍了常用的范数，这里我们就不进行详细介绍了。这里我们只介绍，如何使用pytorch来计算L1、L2范数，以及如何计算L1和L2归一化。L1和L2范数torch.norm(input, p='fro', dim=None, keepdim=False, out=None, dtype=None)L1和L2范数的函数如上所示，参数如下：input：输入数据p：p=1的时候表示1范数，p=2的时候表示2范数dim：指定计算的维度keepdim：输出tensor的维度dim是否保留out：tensor的输出dtype：指定返回tensor的期望数据类型举例：http://www.ppmy.cn/news/1540807.html相关文章做一篇有趣的SVG如何获取灵感？（ 计育韬老师高校公益巡讲答疑实录2024）这是计育韬老师第 8 次开展面向全国高校的新媒体技术公益巡讲活动了。而在每场讲座尾声&amp;#xff0c;互动答疑环节往往反映了高校师生当前最普遍的运营困境&amp;#xff0c;特此计老师在现场即兴答疑之外&amp;#xff0c;会尽量选择有较高价值的提问进行文字答疑梳理。 *本轮巡讲主题除了…阅读更多...如何应对大数据集 dask VS pandas在Kaggle比赛中会遇到一些超大数据集&amp;#xff0c;甚至无法在notebook中用pandas加载。如果你没有性能炸裂的电脑&amp;#xff0c;很有可能你连比赛数据都获取不了。 
当然&amp;#xff0c;办法还是有的。 
tip1&amp;#xff1a;删除无用的变量&amp;#xff0c;使用gc.collect()清空内存tip2&amp;…阅读更多...综合小案例目录 
1、简单计算器  
2、猜数字小游戏 3、开发一个验证码 
4、找素数  1、简单计算器  目标&amp;#xff1a;  设计一个可以执行基本数学运算&amp;#xff08;加、减、乘、除&amp;#xff09;的计算器程序。 功能描述&amp;#xff1a;  用户输入两个数字、一个运算符&amp;#xff08;、-、*、/&amp;am…阅读更多...基于SSM的校园跑腿网站的设计与实现文未可获取一份本项目的java源码和数据库参考。 
课题来源及研究的目的和意义 
随着网络技术的不断完善与发展&amp;#xff0c;各种互联网公司不断如雨后春笋般不断涌现&amp;#xff0c;丰富了人们生活的各个方面。近年来由于 Online To 0ffline即线上到线下(020)模式的发展和兴起&amp;…阅读更多...字符、解释型语言、编程语言的互操作、输出字符 同样是1&amp;#xff0c;有人看到的是数字&amp;#xff0c;有人看到的是字符&amp;#xff0c;还有人看到的是一个小目标。 不同语言的字符 正则表达式把字符分成普通字符和元字符&amp;#xff0c;元字符为了搭配匹配。比如.代表任意非换行字符&amp;#xff0c;这对于通配很简便&amp;#xff0c;用\…阅读更多...Golang Map简介Go Map 
Map 简介 
在Go语言中提供了map数据结构来存储键值对数据。map的数据类型为map[K]V&amp;#xff0c;其中K为键的类型&amp;#xff0c;V为值的类型。map的键类型必须支持操作符&amp;#xff0c;用来比较两个键是否相等。Go语言提供了4种内置的map操作: len、delete、comparison、ass…阅读更多...Jmeter学习深入Jmeter学习深入 
一、jmeter接口关联 
提取器: 。 CS5:给网页使用 。JSON:给JSON数据使用 。 边界:给字符串使用 。正则:更加高级的字符使用 。XPath:给网页使用 
必须掌握: JSON边界 JSON  正则 
1.边界提取器 给定两边取中间 2.正则提取器 
正则:强大并且复杂 通过指定正则表…阅读更多...【环境搭建】Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法 
vmware虚拟机ubuntu系统 
vmware虚拟机17.5个人版可以免费使用&amp;#xff0c;在官网上下载。前提是需要在官网上注册一下&amp;#xff0c;然后具体的方法可以搜一下。然后下载ubuntu镜像&amp;#xff0c;最好下载22.04的版本…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:59 +0000</pubDate>
    </item>
    <item>
      <title>做一篇有趣的SVG如何获取灵感？（ 计育韬老师高校公益巡讲答疑实录2024）</title>
      <link>https://www.ppmy.cn/news/1540806.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维做一篇有趣的SVG如何获取灵感？（ 计育韬老师高校公益巡讲答疑实录2024）news/2025/10/31 22:19:58/这是计育韬老师第 8 次开展面向全国高校的新媒体技术公益巡讲活动了。而在每场讲座尾声，互动答疑环节往往反映了高校师生当前最普遍的运营困境，特此计老师在现场即兴答疑之外，会尽量选择有较高价值的提问进行文字答疑梳理。*本轮巡讲主题除了涉及 SVG 交互外，还包含了新媒体中 AI 人工智能工作流的详解，为高校师生带来包括与多家央媒的项目合作经验和复旦大学本校的案例分析，因此答疑梳理中也会出现与 AI 相关的知识点，如有任何偏颇之处也欢迎在评论区斧正。第十六期计育韬老师继续梳理了在浙江高校的讲座中，关于「做一篇有趣的SVG如何获取灵感？」的问题，一起来看看计育韬老师的答复吧！「有趣」是一种喜闻乐见的创意效果论「创意」本身，计育韬老师在《如何策划交互设计创意？》中已做解答。而同学此番提出的「有趣」，则更是「创意」范畴下的一种具体表现。而「有趣」是易于在不同领域共情的感受，所以它的设计灵感可以不在 SVG 案例中——看了一段有趣的 MV，你或许会想到创作《**成年人请在未成年人指导下浏览**》这样的视频与 SVG 双层交互；玩过一些有趣的游戏，你或许会如《来玩玩玩玩玩玩玩玩玩玩玩玩啊！》中创作各类现实游戏的组合模拟；看了一季有趣的电视剧，你或许会在《🦑点开即玩🦑鱿鱼游戏🦑》中复现故事中的剧情……有趣的 SVG，往往不是因为 SVG 本身而有趣。明白了这一点，你也就明白了「做一篇有趣的SVG如何获取灵感？」——善于发现生活中的有趣，并积极加入你所知的有趣活动，灵感自然而然会转化为 SVG 的创作思路。尤其是，当你自己成为一个有趣的人，有趣的灵感自然源源不断。当然，SVG 本身作为一种交互设计产品，自然也可以在不同设计师聚合网站找到有趣的参考。推荐同学们在闲暇之余多多在 Dribbble、Behance、Pinterest 等平台浏览：后续答疑预告#排版的审美如何培养？#SVG技能对应的求职岗位是哪些？如有意向报名承办巡讲的高校站点，欢迎查看「报名须知」并在评论区留下你的联系方式和组织信息，助教老师将协助前期对接工作。-END-http://www.ppmy.cn/news/1540806.html相关文章如何应对大数据集 dask VS pandas在Kaggle比赛中会遇到一些超大数据集&amp;#xff0c;甚至无法在notebook中用pandas加载。如果你没有性能炸裂的电脑&amp;#xff0c;很有可能你连比赛数据都获取不了。 
当然&amp;#xff0c;办法还是有的。 
tip1&amp;#xff1a;删除无用的变量&amp;#xff0c;使用gc.collect()清空内存tip2&amp;…阅读更多...综合小案例目录 
1、简单计算器  
2、猜数字小游戏 3、开发一个验证码 
4、找素数  1、简单计算器  目标&amp;#xff1a;  设计一个可以执行基本数学运算&amp;#xff08;加、减、乘、除&amp;#xff09;的计算器程序。 功能描述&amp;#xff1a;  用户输入两个数字、一个运算符&amp;#xff08;、-、*、/&amp;am…阅读更多...基于SSM的校园跑腿网站的设计与实现文未可获取一份本项目的java源码和数据库参考。 
课题来源及研究的目的和意义 
随着网络技术的不断完善与发展&amp;#xff0c;各种互联网公司不断如雨后春笋般不断涌现&amp;#xff0c;丰富了人们生活的各个方面。近年来由于 Online To 0ffline即线上到线下(020)模式的发展和兴起&amp;…阅读更多...字符、解释型语言、编程语言的互操作、输出字符 同样是1&amp;#xff0c;有人看到的是数字&amp;#xff0c;有人看到的是字符&amp;#xff0c;还有人看到的是一个小目标。 不同语言的字符 正则表达式把字符分成普通字符和元字符&amp;#xff0c;元字符为了搭配匹配。比如.代表任意非换行字符&amp;#xff0c;这对于通配很简便&amp;#xff0c;用\…阅读更多...Golang Map简介Go Map 
Map 简介 
在Go语言中提供了map数据结构来存储键值对数据。map的数据类型为map[K]V&amp;#xff0c;其中K为键的类型&amp;#xff0c;V为值的类型。map的键类型必须支持操作符&amp;#xff0c;用来比较两个键是否相等。Go语言提供了4种内置的map操作: len、delete、comparison、ass…阅读更多...Jmeter学习深入Jmeter学习深入 
一、jmeter接口关联 
提取器: 。 CS5:给网页使用 。JSON:给JSON数据使用 。 边界:给字符串使用 。正则:更加高级的字符使用 。XPath:给网页使用 
必须掌握: JSON边界 JSON  正则 
1.边界提取器 给定两边取中间 2.正则提取器 
正则:强大并且复杂 通过指定正则表…阅读更多...【环境搭建】Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法 
vmware虚拟机ubuntu系统 
vmware虚拟机17.5个人版可以免费使用&amp;#xff0c;在官网上下载。前提是需要在官网上注册一下&amp;#xff0c;然后具体的方法可以搜一下。然后下载ubuntu镜像&amp;#xff0c;最好下载22.04的版本…阅读更多...正在等待缓存锁：无法获得锁 /var/lib/dpkg/lock-frontend。锁正由进程 5427（unattended-upgr）持有这段信息表示你的系统正在等待一个锁文件 (/var/lib/dpkg/lock-frontend) 解除。锁文件用于防止多个进程同时修改系统的包管理器&amp;#xff08;apt 或 dpkg&amp;#xff09;&amp;#xff0c;避免冲突或损坏系统。 
在这种情况下&amp;#xff0c;进程 unattended-upgr&amp;#xff08;自动升级进程…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:58 +0000</pubDate>
    </item>
    <item>
      <title>如何应对大数据集 dask VS pandas</title>
      <link>https://www.ppmy.cn/news/1540805.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维如何应对大数据集 dask VS pandasnews/2025/10/31 22:19:56/在Kaggle比赛中会遇到一些超大数据集，甚至无法在notebook中用pandas加载。如果你没有性能炸裂的电脑，很有可能你连比赛数据都获取不了。当然，办法还是有的。tip1：删除无用的变量，使用gc.collect()清空内存tip2：预设数据类型tip3：只导入需要的行和列，即子样本tip4：批量导入，单独处理每个部分tip5：使用Dask这里只讨论Dask方法，并与pandas作对比。Dask之所以出名，是因为它加载大数据集非常快。赶紧做个试验，对比一下。有一个csv文件，大小为2.4个G，分别用pandas和dask加载，观察他们所需要的时间。# 先导入需要的库
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import dask.dataframe as dd
import dask
import gc
# 先用pandas读取整个文件
%%time
train = pd.read_csv("jiancezhongxin_50_vehicles_data.csv")
print("Pandas dataframe : ",train.shape)
gc.collect()结果：Pandas dataframe : (18970955, 21) Wall time: 2min 3s# 再用dask读取
%%time
train_df = dd.read_csv("jiancezhongxin_50_vehicles_data.csv")
gc.collect()结果：Wall time: 81.8 ms对比一下两者的时间吧pandas dask2min 3s 81.8 mshttp://www.ppmy.cn/news/1540805.html相关文章综合小案例目录 
1、简单计算器  
2、猜数字小游戏 3、开发一个验证码 
4、找素数  1、简单计算器  目标&amp;#xff1a;  设计一个可以执行基本数学运算&amp;#xff08;加、减、乘、除&amp;#xff09;的计算器程序。 功能描述&amp;#xff1a;  用户输入两个数字、一个运算符&amp;#xff08;、-、*、/&amp;am…阅读更多...基于SSM的校园跑腿网站的设计与实现文未可获取一份本项目的java源码和数据库参考。 
课题来源及研究的目的和意义 
随着网络技术的不断完善与发展&amp;#xff0c;各种互联网公司不断如雨后春笋般不断涌现&amp;#xff0c;丰富了人们生活的各个方面。近年来由于 Online To 0ffline即线上到线下(020)模式的发展和兴起&amp;…阅读更多...字符、解释型语言、编程语言的互操作、输出字符 同样是1&amp;#xff0c;有人看到的是数字&amp;#xff0c;有人看到的是字符&amp;#xff0c;还有人看到的是一个小目标。 不同语言的字符 正则表达式把字符分成普通字符和元字符&amp;#xff0c;元字符为了搭配匹配。比如.代表任意非换行字符&amp;#xff0c;这对于通配很简便&amp;#xff0c;用\…阅读更多...Golang Map简介Go Map 
Map 简介 
在Go语言中提供了map数据结构来存储键值对数据。map的数据类型为map[K]V&amp;#xff0c;其中K为键的类型&amp;#xff0c;V为值的类型。map的键类型必须支持操作符&amp;#xff0c;用来比较两个键是否相等。Go语言提供了4种内置的map操作: len、delete、comparison、ass…阅读更多...Jmeter学习深入Jmeter学习深入 
一、jmeter接口关联 
提取器: 。 CS5:给网页使用 。JSON:给JSON数据使用 。 边界:给字符串使用 。正则:更加高级的字符使用 。XPath:给网页使用 
必须掌握: JSON边界 JSON  正则 
1.边界提取器 给定两边取中间 2.正则提取器 
正则:强大并且复杂 通过指定正则表…阅读更多...【环境搭建】Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法 
vmware虚拟机ubuntu系统 
vmware虚拟机17.5个人版可以免费使用&amp;#xff0c;在官网上下载。前提是需要在官网上注册一下&amp;#xff0c;然后具体的方法可以搜一下。然后下载ubuntu镜像&amp;#xff0c;最好下载22.04的版本…阅读更多...正在等待缓存锁：无法获得锁 /var/lib/dpkg/lock-frontend。锁正由进程 5427（unattended-upgr）持有这段信息表示你的系统正在等待一个锁文件 (/var/lib/dpkg/lock-frontend) 解除。锁文件用于防止多个进程同时修改系统的包管理器&amp;#xff08;apt 或 dpkg&amp;#xff09;&amp;#xff0c;避免冲突或损坏系统。 
在这种情况下&amp;#xff0c;进程 unattended-upgr&amp;#xff08;自动升级进程…阅读更多...word建立目录以及修改页码1、为word建立新的目录 
&amp;#xff08;1&amp;#xff09;选中word中的标题设置为第几级标题&amp;#xff0c;将所有的标题均设置完成。最后可以鼠标右击标题&amp;#xff0c;对不同的标题字体大小等进行设置。右击--&gt;修改--&gt;格式--&gt;段落 &amp;#xff08;2&amp;#xff09;在word中插入新的…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:57 +0000</pubDate>
    </item>
    <item>
      <title>综合小案例</title>
      <link>https://www.ppmy.cn/news/1540804.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维综合小案例news/2025/10/31 22:19:55/目录1、简单计算器2、猜数字小游戏3、开发一个验证码4、找素数1、简单计算器目标：设计一个可以执行基本数学运算（加、减、乘、除）的计算器程序。功能描述：用户输入两个数字、一个运算符（+、-、*、/）。根据所选运算符执行相应的数学运算，显示运算结果。import java.util.Scanner;public class Cal {public static void main(String[] args) {System.out.println("请输入算式（如1 - 1): ");Scanner scanner = new Scanner(System.in);double a=scanner.nextInt();String c=scanner.next();double b=scanner.nextInt();double result=cal(a,c,b);System.out.println("输出结果："+a+c+b+"="+result);}public static double cal(double a,String c,double b){boolean Conditions=false;double result = 0;do {switch (c) {case "+":result = a + b;break;case "-":result = a - b;break;case "*":result = a * b;break;case "/":if (b == 0) {System.out.println("Error:The dividend cannot be 0!");break;}result = a / b;break;default:System.out.println("算式输入错误，请重新输入！");Conditions=true;}}while (Conditions);return result;}
}2、猜数字小游戏需求：随机生成一个1-100之间的数据，提示用户猜测，猜大提示过大，猜小提示过小，直到猜中结束游戏。分析：先随机生成一个1-100之间的数据。定义一个死循环让用户可以一直猜测。在死循环里，每次都提示用户输入一个猜测的数字，猜大提示过大，猜小提示过小，猜中则结束游戏。import java.util.Scanner;public class Rad {public static void main(String[] args) {System.out.println("----------游戏开始----------");rad();System.out.println("----------游戏结束----------");}public static void rad(){int GuessNum=(int)(Math.random()*100)+1;//System.out.println("内部测试数据："+GuessNum);Scanner sc=new Scanner(System.in);int count=0;while(true) {System.out.print("请输入你所想的数字(1~100)：");int num = sc.nextInt();count++;if (num &gt; GuessNum) {System.out.println("猜大了！");} else if (num == GuessNum) {System.out.println("恭喜你，猜对了！");System.out.println("总共猜了" + count + "次！");break;} else{System.out.println("猜小了！");}}}
}注：得到随机数的两种方式：1、 通过Random类Random random=new Random();int randomNum=random.nextInt(100)+1; //[1,100]2、通过Math类（Math.random()返回值为[0,1)的小数）int randomNum=(int)(Math.random()*100)+1;//[0,100]3、开发一个验证码需求：开发一个程序，可以生成指定位数的验证码，每位可以是数字、大小写字母。分析：使用for循环依次生成每位随机字符 并使用一个String类的变量把每个字符连接起来，最后返回该变量即可。import java.util.Scanner;public class Check {public static void main(String[] args) {System.out.println("------验证开始------");Scanner sc= new Scanner(System.in);String Code=GetCode(5);System.out.println("验证码："+Code);System.out.print("请输入验证码：");String Input=sc.nextLine();while(!Input.equals(Code)){Code=GetCode(5);System.out.println("验证码错误，请重新输入！");System.out.println("验证码："+Code);System.out.print("请输入验证码：");Input=sc.nextLine();}System.out.println("验证码输入正确！");System.out.print("------验证成功------");}public static String GetCode(int n){int type=0;String Code="";for (int i = 0; i &lt; n; i++) {type =(int)(Math.random()*3);switch (type){case 0:int num1=(int)(Math.random()*10);Code+=num1;break;case 1:int num2=(int)(Math.random()*26);char ch1=(char)('A'+num2);Code+=ch1;break;case 2:int num3=(int)(Math.random()*26);char ch2=(char)('A'+num3);Code+=ch2;break;}}return Code;}
}4、找素数说明：除了1和它本身以外，不能被其他正整数整除，就叫素数。比如：3、7就是素数，而9、21等等不是素数。public class ISPRIME {public static void main(String[] args) {int count=0;for (int i = 2; i &lt;1000; i++) {boolean log=Isprime(i);if(log) {count++;System.out.print(i+" ");if(count%10==0)System.out.println();}}}public static boolean Isprime(int n){for(int i=2;i&lt;=Math.sqrt(n);i++){if(n%i==0){return false;}}return true;}
}http://www.ppmy.cn/news/1540804.html相关文章基于SSM的校园跑腿网站的设计与实现文未可获取一份本项目的java源码和数据库参考。 
课题来源及研究的目的和意义 
随着网络技术的不断完善与发展&amp;#xff0c;各种互联网公司不断如雨后春笋般不断涌现&amp;#xff0c;丰富了人们生活的各个方面。近年来由于 Online To 0ffline即线上到线下(020)模式的发展和兴起&amp;…阅读更多...字符、解释型语言、编程语言的互操作、输出字符 同样是1&amp;#xff0c;有人看到的是数字&amp;#xff0c;有人看到的是字符&amp;#xff0c;还有人看到的是一个小目标。 不同语言的字符 正则表达式把字符分成普通字符和元字符&amp;#xff0c;元字符为了搭配匹配。比如.代表任意非换行字符&amp;#xff0c;这对于通配很简便&amp;#xff0c;用\…阅读更多...Golang Map简介Go Map 
Map 简介 
在Go语言中提供了map数据结构来存储键值对数据。map的数据类型为map[K]V&amp;#xff0c;其中K为键的类型&amp;#xff0c;V为值的类型。map的键类型必须支持操作符&amp;#xff0c;用来比较两个键是否相等。Go语言提供了4种内置的map操作: len、delete、comparison、ass…阅读更多...Jmeter学习深入Jmeter学习深入 
一、jmeter接口关联 
提取器: 。 CS5:给网页使用 。JSON:给JSON数据使用 。 边界:给字符串使用 。正则:更加高级的字符使用 。XPath:给网页使用 
必须掌握: JSON边界 JSON  正则 
1.边界提取器 给定两边取中间 2.正则提取器 
正则:强大并且复杂 通过指定正则表…阅读更多...【环境搭建】Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法 
vmware虚拟机ubuntu系统 
vmware虚拟机17.5个人版可以免费使用&amp;#xff0c;在官网上下载。前提是需要在官网上注册一下&amp;#xff0c;然后具体的方法可以搜一下。然后下载ubuntu镜像&amp;#xff0c;最好下载22.04的版本…阅读更多...正在等待缓存锁：无法获得锁 /var/lib/dpkg/lock-frontend。锁正由进程 5427（unattended-upgr）持有这段信息表示你的系统正在等待一个锁文件 (/var/lib/dpkg/lock-frontend) 解除。锁文件用于防止多个进程同时修改系统的包管理器&amp;#xff08;apt 或 dpkg&amp;#xff09;&amp;#xff0c;避免冲突或损坏系统。 
在这种情况下&amp;#xff0c;进程 unattended-upgr&amp;#xff08;自动升级进程…阅读更多...word建立目录以及修改页码1、为word建立新的目录 
&amp;#xff08;1&amp;#xff09;选中word中的标题设置为第几级标题&amp;#xff0c;将所有的标题均设置完成。最后可以鼠标右击标题&amp;#xff0c;对不同的标题字体大小等进行设置。右击--&gt;修改--&gt;格式--&gt;段落 &amp;#xff08;2&amp;#xff09;在word中插入新的…阅读更多...基于SpringBoot+Vue+uniapp微信小程序的校园反诈骗微信小程序的详细设计和实现(源码+lw+部署文档+讲解等)项目运行截图 技术框架 
后端采用SpringBoot框架 
Spring Boot 是一个用于快速开发基于 Spring 框架的应用程序的开源框架。它采用约定大于配置的理念&amp;#xff0c;提供了一套默认的配置&amp;#xff0c;让开发者可以更专注于业务逻辑而不是配置文件。Spring Boot 通过自动化配置和约…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:55 +0000</pubDate>
    </item>
    <item>
      <title>基于SSM的校园跑腿网站的设计与实现</title>
      <link>https://www.ppmy.cn/news/1540803.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维基于SSM的校园跑腿网站的设计与实现news/2025/10/31 22:19:54/文未可获取一份本项目的java源码和数据库参考。课题来源及研究的目的和意义随着网络技术的不断完善与发展，各种互联网公司不断如雨后春笋般不断涌现，丰富了人们生活的各个方面。近年来由于 Online To 0ffline即线上到线下(020)模式的发展和兴起，各种服务网站不断建立，提高了人们工作和生活的效率。计算机在大学生的生活中成为了不可或缺的部分，在这个新的消费模式潮流引领之下，大学生作为新科技，新文化最直接的接触者和受益者，利用互联网平台为大学生提供快捷，高效的服务，是商业化发展的需求，也是解决大学生学习与生活之间的可行方法。现今大学生的生活水平不断提高，每年双11购物狂欢节校园接收快递的形势日益提高，几度造成快递中心瘫痪，人员拥挤，大大浪费了每位取快递师生的宝贵时间，据调査，大学校园内活跃于学生微信中的线上跑腿服务群聊已高达百余个，但是校园内至今并没有便捷安全的跑腿平台入驻，为占据这一市场，高效的利用师生需求和兼职赚钱的利益关系，以在校师生身份认证为保障，给予在校大学生高效实惠的生活体验。大学生的网购物活动相当频繁，而且许多大学生急需兼职机会，大学生跑腿网提供了良好的供给需求。结合市场分析和调，以及大学生心理和消费观念的分析，为此设计此系统。大学生跑腿网的设计，不仅提高了大学生学习和生活的效率，而且在互联网发达的时代，为大学生提供了兼职的机会，炼了社会能力，有利于大学生培养正确的消费观和价值观。国内外在该方向的研究现状及分析跑腿行业整体渗透率在过去的一年处于上升状态，截止到2018年7月，整体渗透率为0.47％同比増长约1倍。根据极光大数据显示，跑腿行业用户主要集中在沿海或中部经済较发达地区(如北京、郑州、上海、西安、成都等)，现已逐渐向二三线城市发展，6成以上的用户均为年轻群体，平均每个人会安装1.14个具有跑腿功能的。通过数据我们不难看出，跑腿行业作为蓝海产业，其市场还没有完全铺开，目前除了像北上广深这样的大城市非常普及外，像东三省中的吉林、黑龙江;西北的新疆、青海、甘肃.及各大省份的三线城市等多地还未覆盖，而随着大家认真的改变，和小城市经水平的提升，大家在寻求方便的同时会降低价格的敏感性，所以不管是现在还是未来，在跑腿行业中创业或发展都有更多的机会，尤其在三、四线城市创业成本极低，不需要多少启动资金就可以创办跑腿公司，领先同行抢占市场并迅速成长，从而获得的高额回报，快速掘金。就市场调研分析得出，目前市场上很多跑腿公司运营十分不规范，尤其是一些夫妻店，都是通过电话的形式进行下单，人工记录跑腿信息的方式经常出现错单、漏单等，还有许多小型跑腿商家还停留在用电脑 EXCEL录入的层次，不仅效率低，而目还容易与骑手在结算问题上产生纠纷，增加工作中的摩擦。除此之外，还会存在部分跑腿员随口开价、延退送达、损坏物品等题，用户无法维权，损失只能自己承担，诸如此类的问题特别多，所以想要运营的好，就要从根本上解决这题。主要研究内容开发一个基于SSM的校园跑腿网站。系统有管理员、用户、骑手三种角色，具体功能如下：管理员；个人中心、用户管理、骑手管理、商品信息管理、校园帮买管理、协议和规则管理、校园急送管理、骑手接单管理、留言板管理、系统管理、订单管理。用户：个人中心、商品信息、协议和规则、校园帮买、校园急送、骑手接单、客服中心、购物车、我的订单、留言板。骑手：个人中心、订单信息、协议和规则、校园帮买、校园急送、骑手接单。模块框图如图1所示：图1 基于SSM的校园跑腿网站模块框图研究方案及进度安排，预期达到的目标研究方案：1、在课题背景分析中，对校园跑腿网站的设计开发背景以及开发所需要达到的目标进行一定程度上的研究，对国内外对该种校园跑腿网站的研究进行剖析，找到自己需要的部分进行利用。2、项目需求分析部分，对于本课题中涉及到的用户需求部分进行研究和调查，将整理好的需求进行归类总结合并开发，从而确定系统具体开发时所涉及到的模块设计分析内容。3、项目设计部分，系统设计流程的展示和确定，从模块的设计和开发到数据库的设计部分，数据库是如何进行建立和分表的，根据模块分析的结果确定数据字段信息以及数据表之间的联系信息。4、项目实现部分，数据库表设立之后，如何实现页面后台逻辑代码部分与数据库进行调用连接，以及各个模块的代码编写，系统中主要功能是如何实现和编写代码的。预期达到的目标：（1）掌握基于java web的框架搭建，开发过程中代码逻辑清楚，项目需求明确。（2）实现后台管理系统的所有模块管理与显示，前台给予用户良好的用户体验。（3）系统响应效率：页面响应时问应该在3秒以内，最长不能超过4秒，并支持至少50人同时在线所有系统。（4）界面简洁清晰：系统界面要求简单明了，容易操作，符合用户操作习惯。为完成课题已具备和所需的条件（1）熟练使用Eclipse开发工具和MySQL数据库的可视化工具Navicat 。（2）掌握开发环境的配置。（3）掌握数据库的安装运行。（4）熟练运用Java语言和SQL语句。（5）掌握SSM架构，以及部分前端知识。预计研究过程中可能遇到的困难和问题，以及解决的措施1、遇到的问题（1）不能以多条件查询为基础的信息增加、删除、查找、修改操作（2）输入账号、密码不能对权限进行准确的跳转。（3）数据库的设计、表与表之间不能关联。2、解决办法（1） 去百度、B站查看相关资料和视频；（2） 如若无法解决，与导师交流，请求导师协助和指导。（3） 对系统功能的基本测试，进行完善和优化。主要参考文献[1]元梓谕,钱瑛,林敏捷.外卖订餐平台模式分析及优化[J].电子商务.2018: 47-48[2]王英瀚. 基于移动终端的开放型外卖订餐系统的设计[J]. 才智,2019:73[3]刘冰冰,郭群.综合型外卖网站设计与实现[J]. 软件工程.2020:39-40[4]余圣寅.关于餐饮小店外卖配送系统的优化[J].电子技术与软件工程. 2018(11):216[5]杨琪,张甫吟,刘梦硕,文雯,杨嘉康. 上海市松江大学城外卖网站现状分析及 合理化建议[J]. 经济研究导刊.2019:154[6]陈云鹏.饿了么:校园走出的“O2O”闭环订餐平台[J].上海信息化.2018(06):76-79[7]王漪.外卖O2O 送饭上门的新生意[J].投资北京. 2019(11):49-51[8]付婷.基于外卖行业的O2O电商新模式的现状分析[J].通讯世界.2019(14):244-245[9]Etienn Payet, Fausto Spoto. Static analysis of Android programs[J]. Information and Software Technology, 2019, 54 (11): 1192-1201[10]Domenico Amalfitano, Anna Rita Fasolino, Porfirio Tramontana, Bryan Robbins. Testing Android Mobile Applications: Challenges, Strategies, and Approaches[J]. Advances In Computers, 2019,89http://www.ppmy.cn/news/1540803.html相关文章字符、解释型语言、编程语言的互操作、输出字符 同样是1&amp;#xff0c;有人看到的是数字&amp;#xff0c;有人看到的是字符&amp;#xff0c;还有人看到的是一个小目标。 不同语言的字符 正则表达式把字符分成普通字符和元字符&amp;#xff0c;元字符为了搭配匹配。比如.代表任意非换行字符&amp;#xff0c;这对于通配很简便&amp;#xff0c;用\…阅读更多...Golang Map简介Go Map 
Map 简介 
在Go语言中提供了map数据结构来存储键值对数据。map的数据类型为map[K]V&amp;#xff0c;其中K为键的类型&amp;#xff0c;V为值的类型。map的键类型必须支持操作符&amp;#xff0c;用来比较两个键是否相等。Go语言提供了4种内置的map操作: len、delete、comparison、ass…阅读更多...Jmeter学习深入Jmeter学习深入 
一、jmeter接口关联 
提取器: 。 CS5:给网页使用 。JSON:给JSON数据使用 。 边界:给字符串使用 。正则:更加高级的字符使用 。XPath:给网页使用 
必须掌握: JSON边界 JSON  正则 
1.边界提取器 给定两边取中间 2.正则提取器 
正则:强大并且复杂 通过指定正则表…阅读更多...【环境搭建】Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法 
vmware虚拟机ubuntu系统 
vmware虚拟机17.5个人版可以免费使用&amp;#xff0c;在官网上下载。前提是需要在官网上注册一下&amp;#xff0c;然后具体的方法可以搜一下。然后下载ubuntu镜像&amp;#xff0c;最好下载22.04的版本…阅读更多...正在等待缓存锁：无法获得锁 /var/lib/dpkg/lock-frontend。锁正由进程 5427（unattended-upgr）持有这段信息表示你的系统正在等待一个锁文件 (/var/lib/dpkg/lock-frontend) 解除。锁文件用于防止多个进程同时修改系统的包管理器&amp;#xff08;apt 或 dpkg&amp;#xff09;&amp;#xff0c;避免冲突或损坏系统。 
在这种情况下&amp;#xff0c;进程 unattended-upgr&amp;#xff08;自动升级进程…阅读更多...word建立目录以及修改页码1、为word建立新的目录 
&amp;#xff08;1&amp;#xff09;选中word中的标题设置为第几级标题&amp;#xff0c;将所有的标题均设置完成。最后可以鼠标右击标题&amp;#xff0c;对不同的标题字体大小等进行设置。右击--&gt;修改--&gt;格式--&gt;段落 &amp;#xff08;2&amp;#xff09;在word中插入新的…阅读更多...基于SpringBoot+Vue+uniapp微信小程序的校园反诈骗微信小程序的详细设计和实现(源码+lw+部署文档+讲解等)项目运行截图 技术框架 
后端采用SpringBoot框架 
Spring Boot 是一个用于快速开发基于 Spring 框架的应用程序的开源框架。它采用约定大于配置的理念&amp;#xff0c;提供了一套默认的配置&amp;#xff0c;让开发者可以更专注于业务逻辑而不是配置文件。Spring Boot 通过自动化配置和约…阅读更多...【论文笔记】X-Former: Unifying Contrastive and Reconstruction Learning for MLLMs&amp;#x1f34e;个人主页&amp;#xff1a;小嗷犬的个人主页 &amp;#x1f34a;个人网站&amp;#xff1a;小嗷犬的技术小站 &amp;#x1f96d;个人信条&amp;#xff1a;为天地立心&amp;#xff0c;为生民立命&amp;#xff0c;为往圣继绝学&amp;#xff0c;为万世开太平。 基本信息 
标题: X-Former: Unifying Contr…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:54 +0000</pubDate>
    </item>
    <item>
      <title>字符、解释型语言、编程语言的互操作、输出</title>
      <link>https://www.ppmy.cn/news/1540802.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维字符、解释型语言、编程语言的互操作、输出news/2025/10/31 22:19:53/字符同样是1，有人看到的是数字，有人看到的是字符，还有人看到的是一个小目标。不同语言的字符正则表达式把字符分成普通字符和元字符，元字符为了搭配匹配。比如'.'代表任意非换行字符，这对于通配很简便，用'\.'表示真正的字符'.', 但方括号里面所有的元字符都失去意义，即[\.]代表匹配'\'或者'.'任意字符。解释型语言如果这个世界不需要解释，那就太简单了。解释器可能隐藏编译器没有任何证据表明，一个解释器仅仅是解释，不会私自做一些编译中间代码甚至native代码的事情。事实上，很多解释器会编译成中间代码再执行，比如Lua.编程语言的互操作世界这么多国家，仅用一种语言肯定有人会不高兴。说中文中间也许插一句英文更能表达意思。常见的语言互操作Lua和CKotlin和JavaC/ObjCC++/Objective C++C/C++输出没有输出的编程语言似乎是没有意义的。不同编程语言的输出标准输入输出 有提到不同语言的输入输出形式，一些语言为了简化，最终的结果可能出乎意料。JS console.log参数如果只有一个，会直接输出字符串形式，而不考虑任何格式，参数多于一个才会按格式串输出。console.log("%d")输出%d, console.log("%d", 1)输出1.若文章对您有帮助，欢迎关注。助您在编程路上越走越好！微风不燥，阳光正好，你就像风一样经过这里，愿你停留的片刻温暖舒心。我是程序员小迷（致力于C、C++、Java、Kotlin、Android、iOS、Shell、JavaScript、TypeScript、Python等编程技术的技巧经验分享），若作品对您有帮助，请关注、分享、点赞、收藏、在看、喜欢，您的支持是我们为您提供帮助的最大动力。http://www.ppmy.cn/news/1540802.html相关文章Golang Map简介Go Map 
Map 简介 
在Go语言中提供了map数据结构来存储键值对数据。map的数据类型为map[K]V&amp;#xff0c;其中K为键的类型&amp;#xff0c;V为值的类型。map的键类型必须支持操作符&amp;#xff0c;用来比较两个键是否相等。Go语言提供了4种内置的map操作: len、delete、comparison、ass…阅读更多...Jmeter学习深入Jmeter学习深入 
一、jmeter接口关联 
提取器: 。 CS5:给网页使用 。JSON:给JSON数据使用 。 边界:给字符串使用 。正则:更加高级的字符使用 。XPath:给网页使用 
必须掌握: JSON边界 JSON  正则 
1.边界提取器 给定两边取中间 2.正则提取器 
正则:强大并且复杂 通过指定正则表…阅读更多...【环境搭建】Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法 
vmware虚拟机ubuntu系统 
vmware虚拟机17.5个人版可以免费使用&amp;#xff0c;在官网上下载。前提是需要在官网上注册一下&amp;#xff0c;然后具体的方法可以搜一下。然后下载ubuntu镜像&amp;#xff0c;最好下载22.04的版本…阅读更多...正在等待缓存锁：无法获得锁 /var/lib/dpkg/lock-frontend。锁正由进程 5427（unattended-upgr）持有这段信息表示你的系统正在等待一个锁文件 (/var/lib/dpkg/lock-frontend) 解除。锁文件用于防止多个进程同时修改系统的包管理器&amp;#xff08;apt 或 dpkg&amp;#xff09;&amp;#xff0c;避免冲突或损坏系统。 
在这种情况下&amp;#xff0c;进程 unattended-upgr&amp;#xff08;自动升级进程…阅读更多...word建立目录以及修改页码1、为word建立新的目录 
&amp;#xff08;1&amp;#xff09;选中word中的标题设置为第几级标题&amp;#xff0c;将所有的标题均设置完成。最后可以鼠标右击标题&amp;#xff0c;对不同的标题字体大小等进行设置。右击--&gt;修改--&gt;格式--&gt;段落 &amp;#xff08;2&amp;#xff09;在word中插入新的…阅读更多...基于SpringBoot+Vue+uniapp微信小程序的校园反诈骗微信小程序的详细设计和实现(源码+lw+部署文档+讲解等)项目运行截图 技术框架 
后端采用SpringBoot框架 
Spring Boot 是一个用于快速开发基于 Spring 框架的应用程序的开源框架。它采用约定大于配置的理念&amp;#xff0c;提供了一套默认的配置&amp;#xff0c;让开发者可以更专注于业务逻辑而不是配置文件。Spring Boot 通过自动化配置和约…阅读更多...【论文笔记】X-Former: Unifying Contrastive and Reconstruction Learning for MLLMs&amp;#x1f34e;个人主页&amp;#xff1a;小嗷犬的个人主页 &amp;#x1f34a;个人网站&amp;#xff1a;小嗷犬的技术小站 &amp;#x1f96d;个人信条&amp;#xff1a;为天地立心&amp;#xff0c;为生民立命&amp;#xff0c;为往圣继绝学&amp;#xff0c;为万世开太平。 基本信息 
标题: X-Former: Unifying Contr…阅读更多...诺奖印证产业方向，AI先行者晶泰科技开拓黄金赛道2024年诺贝尔奖揭晓的各奖项中&amp;#xff0c;AI领域无疑成为“最大赢家”。 
从诺贝尔物理学奖被授予两名AI科学家&amp;#xff0c;到诺贝尔化学奖表彰三位科学家“用人工智能&amp;#xff08;AI&amp;#xff09;破译蛋白质的密码”&amp;#xff0c;本届诺贝尔奖“含AI量”之高引起市场热议。 
值…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:53 +0000</pubDate>
    </item>
    <item>
      <title>Golang Map简介</title>
      <link>https://www.ppmy.cn/news/1540801.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Golang Map简介news/2025/10/31 22:19:52/Go MapMap 简介在Go语言中提供了map数据结构来存储键值对数据。map的数据类型为map[K]V，其中K为键的类型，V为值的类型。map的键类型必须支持==操作符，用来比较两个键是否相等。Go语言提供了4种内置的map操作:len、delete、comparison、assign。Map 定义map_var:=make(map[K]V)// 用make函数创建一个空的map，其中K和V分别为键和值的类型map_var[key]=value// 向map中添加一个键值对value:=map_var[key]// 获取指定键的值delete(map_var,key)// 从map中删除指定的键及其对应的值Map IterationGo语言提供了两个方法来遍历map中的所有键值对，分别是range方法和Len()方法。// 使用range循环遍历map中的所有键值对forkey,value:=rangemap_var{// TODO ...}// 计算map中的元素数量iflen(map_var)&gt;0{// TODO ...}Map 的线程安全在Go语言中，map是非线程安全的，在多线程并发访问时可能导致程序报错。当map被多个协程同时访问时，我们需要使用sync包中的sync.Mutex来确保操作的原子性和并发安全。import"sync"typeSafeMapstruct{mu sync.Mutexmmap[string]int}func(sm*SafeMap)Get(keystring)int{sm.mu.Lock()defersm.mu.Unlock()returnsm.m[key]}func(sm*SafeMap)Set(keystring,valueint){sm.mu.Lock()defersm.mu.Unlock()sm.m[key]=value}func(sm*SafeMap)Delete(keystring){sm.mu.Lock()defersm.mu.Unlock()delete(sm.m,key)}map 底层原理Go语言的map在设计上是一种哈希表的数据结构。它利用哈希函数将键映射到不同的存储空间，从而实现高效的查找和插入操作。哈希函数哈希函数将字符串映射到一个整数上，这称为哈希值。不同的字符串可能会有相同的哈希值，但相同的字符串必定具有相同的哈希值。哈希函数需要满足两点：哈希函数的计算结果必须是非负整数，因为负数无法在数组中表示。两个不同字符串的哈希值尽量不要相等，这样可以避免在查找时产生冲突。在Go语言中，字符串的哈希函数采用的是FNV-1哈希算法，算法代码如下：const(offset64=14695981039346656037prime64=1099511628211)funcstringHash(sstring)uint64{h:=uint64(offset64)fori:=0;i&lt;len(s);i++{h^=uint64(s[i])h*=prime64}returnh}哈希冲突在哈希表中，哈希值相同的多个字符串可能会存储在同一个位置上，这种现象叫做哈希冲突。哈希冲突处理策略有开放寻址法、再哈希法和链地址法。开放寻址法：将发生冲突的条目逐个检索新的空棑直到找到一个空位置来存储当前键值对再哈希法：对于发生冲突的键，用另一个不同的哈希函数计算地址链地址法：对于发生冲突的键，将其存储在一个链表中Go语言使用链地址法处理哈希冲突。对于每个存储单元，map结构体中还维护了一个[]keyValue类型的链表。typehmapstruct{countint// 映射中的键值对数量flagsuint8// 控制哈希表的一些属性Buint8// 用于计算哈希地址的初始大小noverflowuint16// 链表上的溢出桶的数量}Growing在Go语言中，动态数组会自动地为map分配更多的空间。Growing过程涉及到将原始的数组重新复制到一个更大的数组中，其中原数组的元素需要重新计算其在新数组中的位置，而新数组的元素则需要将其键值对填充到相应的位置。Growing的过程比较复杂，可以由函数hashGrow()来控制。// hashGrow() 将map的数组的大小翻倍，并处理哈希冲突。funchashGrow(h*hmap){// ...buf:=make([]keyValue,newCap)//...fori:=uintptr(0);i&lt;cap;i++{// ...evacuate(h,&amp;h.oldbuckets[i],&amp;buf)// ...}// ...}// evacuate() 将一个bucket中的键值对重新映射到新的数组中funcevacuate(h*hmap,oldbuck*bucket,newbuck*[]keyValue){// ...}map扩容双倍扩容Go语言中的哈希表在map的数组容量达到一定程度时，就会自动进行扩容。扩容的依据是当前已存储的元素数量和数组的长度之间的比值：当map的已存储元素数量小于map数组长度的一半时，元素的数量未达到哈希表效率的最大值，无需扩容；当map已存储的元素数量大于等于map数组长度的一半时，哈希表的查找效率已达到最大值，所以需要扩容。Go语言的map会优先选择数组大小为原数组大小的2倍，以确保map在存储过程中有足够的空间存放新的元素。当元素数量达到85%时，Go语言就会再次对数组进行扩容，此时数组长度翻倍，以保证数组长度和元素数量的比例始终维持在0.75左右，以平衡效率和空间占用。Growing过程当映射中的元素数量超过85%时，Go语言就会触发map的扩容过程。在扩容的过程中，map会将原有的元素复制到新的数组中，并将新数组的初始大小设置为原数组的2倍。对于发生哈希冲突的元素，需要在新的数组中重新计算哈希地址。避免溢出当数组中元素的数量超过0x7fffffff(2^31-1，即int类型的最大值)时，就会发生溢出，此时数组的大小将无法达到原数组的2倍。所以Go语言会在初始创建map时，为其初始化一个较小的数组，并设置map的B值，以便在元素数量超过限制时再次进行扩容。当map中元素的数量超过阈值时，会再次翻倍，直到数组大小小于0x7fffffff为止。代码分析hashmap.go包含在Go语言源码中的src/container/map.go文件中。其中map结构体的定义和Growing实现都在runtime包中，在src/runtime/map.go文件中。附录为什么哈希表的容量要设置为2的n次幂？为什么不是其他数字？Go语言中的map是如何进行线程安全的？原理是什么？map的数据结构是怎样的？如何实现键值对的查找、添加、删除操作？如何实现Growing过程？为什么map的扩容条件是85%，而不是100%？在go语言中如何创建map？为什么哈希冲突处理策略有开放寻址法、再哈希法和链地址法？如果存在冲突，键值对是如何存储在数组中的？为什么Growing过程中会创建一个较大的临时数组，而不是直接在原数组上扩展空间？如何实现map的迭代？总结本节我们学习了Go语言中的map数据类型，使用方法以及map的数据安全问题。http://www.ppmy.cn/news/1540801.html相关文章Jmeter学习深入Jmeter学习深入 
一、jmeter接口关联 
提取器: 。 CS5:给网页使用 。JSON:给JSON数据使用 。 边界:给字符串使用 。正则:更加高级的字符使用 。XPath:给网页使用 
必须掌握: JSON边界 JSON  正则 
1.边界提取器 给定两边取中间 2.正则提取器 
正则:强大并且复杂 通过指定正则表…阅读更多...【环境搭建】Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法 
vmware虚拟机ubuntu系统 
vmware虚拟机17.5个人版可以免费使用&amp;#xff0c;在官网上下载。前提是需要在官网上注册一下&amp;#xff0c;然后具体的方法可以搜一下。然后下载ubuntu镜像&amp;#xff0c;最好下载22.04的版本…阅读更多...正在等待缓存锁：无法获得锁 /var/lib/dpkg/lock-frontend。锁正由进程 5427（unattended-upgr）持有这段信息表示你的系统正在等待一个锁文件 (/var/lib/dpkg/lock-frontend) 解除。锁文件用于防止多个进程同时修改系统的包管理器&amp;#xff08;apt 或 dpkg&amp;#xff09;&amp;#xff0c;避免冲突或损坏系统。 
在这种情况下&amp;#xff0c;进程 unattended-upgr&amp;#xff08;自动升级进程…阅读更多...word建立目录以及修改页码1、为word建立新的目录 
&amp;#xff08;1&amp;#xff09;选中word中的标题设置为第几级标题&amp;#xff0c;将所有的标题均设置完成。最后可以鼠标右击标题&amp;#xff0c;对不同的标题字体大小等进行设置。右击--&gt;修改--&gt;格式--&gt;段落 &amp;#xff08;2&amp;#xff09;在word中插入新的…阅读更多...基于SpringBoot+Vue+uniapp微信小程序的校园反诈骗微信小程序的详细设计和实现(源码+lw+部署文档+讲解等)项目运行截图 技术框架 
后端采用SpringBoot框架 
Spring Boot 是一个用于快速开发基于 Spring 框架的应用程序的开源框架。它采用约定大于配置的理念&amp;#xff0c;提供了一套默认的配置&amp;#xff0c;让开发者可以更专注于业务逻辑而不是配置文件。Spring Boot 通过自动化配置和约…阅读更多...【论文笔记】X-Former: Unifying Contrastive and Reconstruction Learning for MLLMs&amp;#x1f34e;个人主页&amp;#xff1a;小嗷犬的个人主页 &amp;#x1f34a;个人网站&amp;#xff1a;小嗷犬的技术小站 &amp;#x1f96d;个人信条&amp;#xff1a;为天地立心&amp;#xff0c;为生民立命&amp;#xff0c;为往圣继绝学&amp;#xff0c;为万世开太平。 基本信息 
标题: X-Former: Unifying Contr…阅读更多...诺奖印证产业方向，AI先行者晶泰科技开拓黄金赛道2024年诺贝尔奖揭晓的各奖项中&amp;#xff0c;AI领域无疑成为“最大赢家”。 
从诺贝尔物理学奖被授予两名AI科学家&amp;#xff0c;到诺贝尔化学奖表彰三位科学家“用人工智能&amp;#xff08;AI&amp;#xff09;破译蛋白质的密码”&amp;#xff0c;本届诺贝尔奖“含AI量”之高引起市场热议。 
值…阅读更多...探讨Node.js生态中的npm与npx工具在Node.js生态中&amp;#xff0c;npm和npx是两个重要的工具&amp;#xff0c;它们的功能虽然有所重叠&amp;#xff0c;但使用场景却不同。理解它们的区别可以帮助开发者更高效地管理项目依赖与执行工具。 
npm与npx的区别 
npm&amp;#xff1a;主要用于管理项目依赖。通过 npm install&amp;#xff0…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:52 +0000</pubDate>
    </item>
    <item>
      <title>Jmeter学习深入</title>
      <link>https://www.ppmy.cn/news/1540800.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Jmeter学习深入news/2025/10/31 22:19:51/Jmeter学习深入一、jmeter接口关联提取器:。 CS5:给网页使用。JSON:给JSON数据使用。 边界:给字符串使用。正则:更加高级的字符使用。XPath:给网页使用必须掌握:JSON+边界JSON + 正则1.边界提取器给定两边取中间2.正则提取器正则:强大并且复杂通过指定正则表达式，把数据提取出来N个，保存到变量中使用变量时，通过 变量名+ gN 选择第几个变量3.json提取器JSON Extractor 是 JMeter 中的一个后处理器，用于从 HTTP 响应中的 JSON 内容提取值。它基于 JSONPath 表达式来查询 JSON 数据。JSONPath 是到 JSON 文档中的特定部分的路径表达式（类似于 XPath 用于 XML），用于简化和加速数据访问。常用 JSONPath 语法$：根元素.或[]：子元素操作符，可以用来访问子字段或者属性。例如，$.store.book或$['store']['book']…：递归下降。无论位置如何，都会查找某个名称的字段。[*]：通配符，匹配所有元素项。[0,1]：数组索引，可以直接访问数组中的元素。[:2]：数组切片操作，提取到第二个元素为止但不包括它（索引基于0）。[?(@.age&gt;18)]：过滤表达式。可用于查找数组中满足条件的元素。@：当前节点的符号。如何使用 JSON Extractor添加 JSON Extractor：在您的测试计划中，首先进行一个 HTTP 请求，然后作为该请求的子元素添加 JSON Extractor。在 JMeter 中，右击请求 -&gt; 添加 -&gt; 后处理器 -&gt; JSON 提取器。配置 JSON Extractor：变量名称：提取出的数据将存储在这个变量名中，供后续使用。JSONPath 表达式：用于定位和提取 JSON 数据的表达式。默认值：如果 JSONPath 没有找到数据，将使用这个值。使用提取的数据：提取的数据将存储在变量中，可以在后续的请求或断言中使用这些变量。示例假设您有以下 JSON 响应：{"store":{"book":[{"category":"reference","author":"Nigel Rees","title":"Sayings of the Century","price":8.95},{"category":"fiction","author":"Evelyn Waugh","title":"Sword of Honour","price":12.99}],"bicycle":{"color":"red","price":19.95}}}如果您想提取第二本书的作者名，JSONPath 表达式将是$.store.book[1].author。在 JSON Extractor 中，您将此表达式输入到 JSONPath 表达式字段，并为输出定义一个变量名称，例如secondAuthor。这种方式使 JMeter 能够在性能测试中非常灵活地处理和校验 JSON 格式的响应数据，从而更好地模拟复杂的用户交互和数据驱动的场景。二、Jmeter接口断言1.默认断言默认情况下，预期状态码小于400状态码:。1xx:继续请求。2xx:请求成功。3xx:重新请求。4xx:客户端错误(你错了)。5xx:眼务端错误(我错了)2.普通断言对提取结果进行断言3.自定义断言在 JMeter 中，除了使用内置的断言组件外，还可以通过自定义断言来实现更复杂和特定的验证逻辑。使用 JSR223 断言JSR223 断言提供了一个灵活的环境，您可以在其中使用支持的脚本语言（如 Groovy, JavaScript, Python 等）来编写自定义逻辑。Groovy 是最常推荐的，因为它与 Java 高度集成，并且性能优异。步骤：添加 JSR223 断言：在您的测试计划中，选择需要添加断言的采样器（如 HTTP 请求）。右击采样器 -&gt; 添加 -&gt; 断言 -&gt; JSR223 断言。编写断言脚本：在断言组件的脚本部分，您可以编写自定义的脚本来验证响应是否符合预期。可以访问 JMeter API 和 Java 类库，以及通过前面处理器或采样器定义的变量。示例脚本：假设从前面的 JSON 提取器中获取了一个变量secondAuthor，现在需要验证这个作者是否是 “Evelyn Waugh”。// Groovy 断言脚本String expectedAuthor="Evelyn Waugh"String actualAuthor=vars.get("secondAuthor")if(actualAuthor==null||!actualAuthor.equals(expectedAuthor)){AssertionResult.setFailure(true)AssertionResult.setFailureMessage("Author does not match expected. Expected: "+expectedAuthor+", but was: "+actualAuthor)}脚本解释：vars：这是一个 JMeter 内置对象，用于访问所有定义的变量。AssertionResult：用于设置断言结果。如果条件不满足，需要手动设置失败状态和失败消息。注意事项：性能影响：自定义脚本可能会比内置的断言组件执行更慢，因为脚本需要在运行时编译和执行。在高负载测试中，这可能会影响整体性能测试的结果。脚本错误处理：确保脚本中有适当的错误处理逻辑，避免因脚本错误而导致测试计划意外中断。调试：调试自定义脚本可能比使用内置组件更复杂。建议在开发过程中添加适当的日志记录，帮助跟踪问题。三、实战1.仔细分析项目2.创建公共元件3.补全取样器和子级辅助元件4.测试http://www.ppmy.cn/news/1540800.html相关文章【环境搭建】Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法 
vmware虚拟机ubuntu系统 
vmware虚拟机17.5个人版可以免费使用&amp;#xff0c;在官网上下载。前提是需要在官网上注册一下&amp;#xff0c;然后具体的方法可以搜一下。然后下载ubuntu镜像&amp;#xff0c;最好下载22.04的版本…阅读更多...正在等待缓存锁：无法获得锁 /var/lib/dpkg/lock-frontend。锁正由进程 5427（unattended-upgr）持有这段信息表示你的系统正在等待一个锁文件 (/var/lib/dpkg/lock-frontend) 解除。锁文件用于防止多个进程同时修改系统的包管理器&amp;#xff08;apt 或 dpkg&amp;#xff09;&amp;#xff0c;避免冲突或损坏系统。 
在这种情况下&amp;#xff0c;进程 unattended-upgr&amp;#xff08;自动升级进程…阅读更多...word建立目录以及修改页码1、为word建立新的目录 
&amp;#xff08;1&amp;#xff09;选中word中的标题设置为第几级标题&amp;#xff0c;将所有的标题均设置完成。最后可以鼠标右击标题&amp;#xff0c;对不同的标题字体大小等进行设置。右击--&gt;修改--&gt;格式--&gt;段落 &amp;#xff08;2&amp;#xff09;在word中插入新的…阅读更多...基于SpringBoot+Vue+uniapp微信小程序的校园反诈骗微信小程序的详细设计和实现(源码+lw+部署文档+讲解等)项目运行截图 技术框架 
后端采用SpringBoot框架 
Spring Boot 是一个用于快速开发基于 Spring 框架的应用程序的开源框架。它采用约定大于配置的理念&amp;#xff0c;提供了一套默认的配置&amp;#xff0c;让开发者可以更专注于业务逻辑而不是配置文件。Spring Boot 通过自动化配置和约…阅读更多...【论文笔记】X-Former: Unifying Contrastive and Reconstruction Learning for MLLMs&amp;#x1f34e;个人主页&amp;#xff1a;小嗷犬的个人主页 &amp;#x1f34a;个人网站&amp;#xff1a;小嗷犬的技术小站 &amp;#x1f96d;个人信条&amp;#xff1a;为天地立心&amp;#xff0c;为生民立命&amp;#xff0c;为往圣继绝学&amp;#xff0c;为万世开太平。 基本信息 
标题: X-Former: Unifying Contr…阅读更多...诺奖印证产业方向，AI先行者晶泰科技开拓黄金赛道2024年诺贝尔奖揭晓的各奖项中&amp;#xff0c;AI领域无疑成为“最大赢家”。 
从诺贝尔物理学奖被授予两名AI科学家&amp;#xff0c;到诺贝尔化学奖表彰三位科学家“用人工智能&amp;#xff08;AI&amp;#xff09;破译蛋白质的密码”&amp;#xff0c;本届诺贝尔奖“含AI量”之高引起市场热议。 
值…阅读更多...探讨Node.js生态中的npm与npx工具在Node.js生态中&amp;#xff0c;npm和npx是两个重要的工具&amp;#xff0c;它们的功能虽然有所重叠&amp;#xff0c;但使用场景却不同。理解它们的区别可以帮助开发者更高效地管理项目依赖与执行工具。 
npm与npx的区别 
npm&amp;#xff1a;主要用于管理项目依赖。通过 npm install&amp;#xff0…阅读更多...oracle 19c 配置开机自启动文章目录 一、修改/etc/oratab二、创建启动脚本并授权三、创建service服务四、设置开机自启并进行测试 一、修改/etc/oratab 
实例名:/opt/oracle/product/19c/dbhome_1:N修改为实例名:/opt/oracle/product/19c/dbhome_1:Y二、创建启动脚本并授权 
vi /usr/bin/oracle19c.sh
##…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:51 +0000</pubDate>
    </item>
    <item>
      <title>【环境搭建】Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法</title>
      <link>https://www.ppmy.cn/news/1540799.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【环境搭建】Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法news/2025/10/31 22:19:49/Windows系统中使用VScode在虚拟机ubuntu系统中进行开发的方法vmware虚拟机+ubuntu系统vmware虚拟机17.5个人版可以免费使用，在官网上下载。前提是需要在官网上注册一下，然后具体的方法可以搜一下。然后下载ubuntu镜像，最好下载22.04的版本，最新的版本太大了，内存要分配很多，会卡死。安装ubuntu后最好找教程把ip改为静态的，不然后续开关机ip总是变化会频繁修改ssh的配置文件。在ubuntu虚拟机上要安装对应的开发环境，我是用的是C++开发，所以就直接用如下命令安装。sudoaptinstallbuild-essentialsudoaptinstallgdbvscode上安装插件Remote Development(会连带安装其他必要的相关插件)C/C++code runner在vscode中使用ssh连接虚拟机系统红色圈的地方要修改成自己机器对应的信息，Host就是ubuntu终端中@符号后面的内容，Hostname就是你虚拟机的ip，User就是使用的登录用户（@符号前面的内容）。配置完之后连接，输入密码后就可以登陆了。然后在左边一列第一个选项卡中点击，选择open folder。选择一个你需要操作的文件夹，就可以在这个文件夹中进行开发了。http://www.ppmy.cn/news/1540799.html相关文章正在等待缓存锁：无法获得锁 /var/lib/dpkg/lock-frontend。锁正由进程 5427（unattended-upgr）持有这段信息表示你的系统正在等待一个锁文件 (/var/lib/dpkg/lock-frontend) 解除。锁文件用于防止多个进程同时修改系统的包管理器&amp;#xff08;apt 或 dpkg&amp;#xff09;&amp;#xff0c;避免冲突或损坏系统。 
在这种情况下&amp;#xff0c;进程 unattended-upgr&amp;#xff08;自动升级进程…阅读更多...word建立目录以及修改页码1、为word建立新的目录 
&amp;#xff08;1&amp;#xff09;选中word中的标题设置为第几级标题&amp;#xff0c;将所有的标题均设置完成。最后可以鼠标右击标题&amp;#xff0c;对不同的标题字体大小等进行设置。右击--&gt;修改--&gt;格式--&gt;段落 &amp;#xff08;2&amp;#xff09;在word中插入新的…阅读更多...基于SpringBoot+Vue+uniapp微信小程序的校园反诈骗微信小程序的详细设计和实现(源码+lw+部署文档+讲解等)项目运行截图 技术框架 
后端采用SpringBoot框架 
Spring Boot 是一个用于快速开发基于 Spring 框架的应用程序的开源框架。它采用约定大于配置的理念&amp;#xff0c;提供了一套默认的配置&amp;#xff0c;让开发者可以更专注于业务逻辑而不是配置文件。Spring Boot 通过自动化配置和约…阅读更多...【论文笔记】X-Former: Unifying Contrastive and Reconstruction Learning for MLLMs&amp;#x1f34e;个人主页&amp;#xff1a;小嗷犬的个人主页 &amp;#x1f34a;个人网站&amp;#xff1a;小嗷犬的技术小站 &amp;#x1f96d;个人信条&amp;#xff1a;为天地立心&amp;#xff0c;为生民立命&amp;#xff0c;为往圣继绝学&amp;#xff0c;为万世开太平。 基本信息 
标题: X-Former: Unifying Contr…阅读更多...诺奖印证产业方向，AI先行者晶泰科技开拓黄金赛道2024年诺贝尔奖揭晓的各奖项中&amp;#xff0c;AI领域无疑成为“最大赢家”。 
从诺贝尔物理学奖被授予两名AI科学家&amp;#xff0c;到诺贝尔化学奖表彰三位科学家“用人工智能&amp;#xff08;AI&amp;#xff09;破译蛋白质的密码”&amp;#xff0c;本届诺贝尔奖“含AI量”之高引起市场热议。 
值…阅读更多...探讨Node.js生态中的npm与npx工具在Node.js生态中&amp;#xff0c;npm和npx是两个重要的工具&amp;#xff0c;它们的功能虽然有所重叠&amp;#xff0c;但使用场景却不同。理解它们的区别可以帮助开发者更高效地管理项目依赖与执行工具。 
npm与npx的区别 
npm&amp;#xff1a;主要用于管理项目依赖。通过 npm install&amp;#xff0…阅读更多...oracle 19c 配置开机自启动文章目录 一、修改/etc/oratab二、创建启动脚本并授权三、创建service服务四、设置开机自启并进行测试 一、修改/etc/oratab 
实例名:/opt/oracle/product/19c/dbhome_1:N修改为实例名:/opt/oracle/product/19c/dbhome_1:Y二、创建启动脚本并授权 
vi /usr/bin/oracle19c.sh
##…阅读更多...机器学习与神经网络：诺贝尔物理学奖的新篇章机器学习与神经网络&amp;#xff1a;诺贝尔物理学奖的新篇章 
Introduction 
Recently, the 2024 Nobel Prize in Physics was awarded to researchers in the field of machine learning and neural networks, marking a historic first. Traditionally, this prestigious award h…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:49 +0000</pubDate>
    </item>
    <item>
      <title>正在等待缓存锁：无法获得锁 /var/lib/dpkg/lock-frontend。锁正由进程 5427（unattended-upgr）持有</title>
      <link>https://www.ppmy.cn/news/1540798.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维正在等待缓存锁：无法获得锁 /var/lib/dpkg/lock-frontend。锁正由进程 5427（unattended-upgr）持有news/2025/10/31 22:19:48/这段信息表示你的系统正在等待一个锁文件 (/var/lib/dpkg/lock-frontend) 解除。锁文件用于防止多个进程同时修改系统的包管理器（apt或dpkg），避免冲突或损坏系统。在这种情况下，进程unattended-upgr（自动升级进程）正在占用锁文件，这通常是因为系统正在自动安装或更新软件包。当这个进程完成时，锁会自动解除，之后你就可以运行你的apt命令。解决方法：等待：你可以等待几分钟，等unattended-upgr进程完成自动更新后，系统会释放锁。然后你可以再次尝试安装python3-pip。手动停止自动更新进程（谨慎操作）：如果你不想等待，或者unattended-upgr进程卡住了，你可以手动终止它。首先，找到unattended-upgr的进程号（PID），然后使用kill命令终止该进程。使用以下命令查找进程：psaux|grepunattended-upgr然后使用kill命令终止进程：sudokill-9&lt;PID&gt;（将&lt;PID&gt;替换为实际的进程号）清除锁文件（如果锁文件被遗留）：如果进程已经终止但锁文件没有被删除，你可以手动删除它。sudorm/var/lib/dpkg/lock-frontendsudorm/var/lib/dpkg/lock然后运行以下命令修复可能的损坏包：sudodpkg --configure -asudoaptupdate之后你可以再次运行sudo apt install python3-pip安装pip3。如果问题仍然存在，请告诉我进一步的细节，我会帮助你解决。http://www.ppmy.cn/news/1540798.html相关文章word建立目录以及修改页码1、为word建立新的目录 
&amp;#xff08;1&amp;#xff09;选中word中的标题设置为第几级标题&amp;#xff0c;将所有的标题均设置完成。最后可以鼠标右击标题&amp;#xff0c;对不同的标题字体大小等进行设置。右击--&gt;修改--&gt;格式--&gt;段落 &amp;#xff08;2&amp;#xff09;在word中插入新的…阅读更多...基于SpringBoot+Vue+uniapp微信小程序的校园反诈骗微信小程序的详细设计和实现(源码+lw+部署文档+讲解等)项目运行截图 技术框架 
后端采用SpringBoot框架 
Spring Boot 是一个用于快速开发基于 Spring 框架的应用程序的开源框架。它采用约定大于配置的理念&amp;#xff0c;提供了一套默认的配置&amp;#xff0c;让开发者可以更专注于业务逻辑而不是配置文件。Spring Boot 通过自动化配置和约…阅读更多...【论文笔记】X-Former: Unifying Contrastive and Reconstruction Learning for MLLMs&amp;#x1f34e;个人主页&amp;#xff1a;小嗷犬的个人主页 &amp;#x1f34a;个人网站&amp;#xff1a;小嗷犬的技术小站 &amp;#x1f96d;个人信条&amp;#xff1a;为天地立心&amp;#xff0c;为生民立命&amp;#xff0c;为往圣继绝学&amp;#xff0c;为万世开太平。 基本信息 
标题: X-Former: Unifying Contr…阅读更多...诺奖印证产业方向，AI先行者晶泰科技开拓黄金赛道2024年诺贝尔奖揭晓的各奖项中&amp;#xff0c;AI领域无疑成为“最大赢家”。 
从诺贝尔物理学奖被授予两名AI科学家&amp;#xff0c;到诺贝尔化学奖表彰三位科学家“用人工智能&amp;#xff08;AI&amp;#xff09;破译蛋白质的密码”&amp;#xff0c;本届诺贝尔奖“含AI量”之高引起市场热议。 
值…阅读更多...探讨Node.js生态中的npm与npx工具在Node.js生态中&amp;#xff0c;npm和npx是两个重要的工具&amp;#xff0c;它们的功能虽然有所重叠&amp;#xff0c;但使用场景却不同。理解它们的区别可以帮助开发者更高效地管理项目依赖与执行工具。 
npm与npx的区别 
npm&amp;#xff1a;主要用于管理项目依赖。通过 npm install&amp;#xff0…阅读更多...oracle 19c 配置开机自启动文章目录 一、修改/etc/oratab二、创建启动脚本并授权三、创建service服务四、设置开机自启并进行测试 一、修改/etc/oratab 
实例名:/opt/oracle/product/19c/dbhome_1:N修改为实例名:/opt/oracle/product/19c/dbhome_1:Y二、创建启动脚本并授权 
vi /usr/bin/oracle19c.sh
##…阅读更多...机器学习与神经网络：诺贝尔物理学奖的新篇章机器学习与神经网络&amp;#xff1a;诺贝尔物理学奖的新篇章 
Introduction 
Recently, the 2024 Nobel Prize in Physics was awarded to researchers in the field of machine learning and neural networks, marking a historic first. Traditionally, this prestigious award h…阅读更多...智慧交通新征程：亿维锐创与图为科技达成战略合作在人工智能技术备受瞩目的当下&amp;#xff0c;如何更有效地利用AI技术为各行各业激发新活力&amp;#xff0c;成为了众多科技企业探索的重要课题。科技巨擘之间强强联手&amp;#xff0c;通过共享资源、优势互补&amp;#xff0c;成为推动这一进程、引领未来产业变革的有力途径。 
今日&amp;#xff0…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:48 +0000</pubDate>
    </item>
    <item>
      <title>word建立目录以及修改页码</title>
      <link>https://www.ppmy.cn/news/1540797.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维word建立目录以及修改页码news/2025/10/31 22:19:47/1、为word建立新的目录（1）选中word中的标题设置为第几级标题，将所有的标题均设置完成。最后可以鼠标右击标题，对不同的标题字体大小等进行设置。右击--&gt;修改--&gt;格式--&gt;段落（2）在word中插入新的一页作为目录页，然后点击引用---&gt;目录，选择适合自己的目录格式，可以实时的更新目录：2、为word在不同位置建立页码（1）插入分节符首先，将光标放置在需要开始设置新页码的前一页的末尾。然后，点击“布局”选项卡中的“分隔符”按钮，在下拉菜单中选择“下一页”。这样，就在光标所在位置插入了一个分节符，将文档分为两部分。（2）打开页脚编辑模式，取消链接到前一节接下来，我们需要双击需要开始设置新页码的那一页的页脚区域，进入页脚编辑模式。在页脚编辑模式下，我们可以看到页脚中的页码和其他内容。注意查看“设计”选项卡中的“链接到前一节”选项是否被选中。如果选中了，需要点击它取消链接，以确保我们接下来设置的页码不会受到前面页码的影响。（3）插入页码并设置页码格式此时就可以从指定位置插入页码，点击“页码”按钮，在下拉菜单中选择“设置页码格式”。在弹出的对话框中，我们可以设置页码的编号格式和起始页码。对于需要从指定页开始设置页码的情况，我们需要将起始页码设置为1（或你想要的任何数字）。http://www.ppmy.cn/news/1540797.html相关文章基于SpringBoot+Vue+uniapp微信小程序的校园反诈骗微信小程序的详细设计和实现(源码+lw+部署文档+讲解等)项目运行截图 技术框架 
后端采用SpringBoot框架 
Spring Boot 是一个用于快速开发基于 Spring 框架的应用程序的开源框架。它采用约定大于配置的理念&amp;#xff0c;提供了一套默认的配置&amp;#xff0c;让开发者可以更专注于业务逻辑而不是配置文件。Spring Boot 通过自动化配置和约…阅读更多...【论文笔记】X-Former: Unifying Contrastive and Reconstruction Learning for MLLMs&amp;#x1f34e;个人主页&amp;#xff1a;小嗷犬的个人主页 &amp;#x1f34a;个人网站&amp;#xff1a;小嗷犬的技术小站 &amp;#x1f96d;个人信条&amp;#xff1a;为天地立心&amp;#xff0c;为生民立命&amp;#xff0c;为往圣继绝学&amp;#xff0c;为万世开太平。 基本信息 
标题: X-Former: Unifying Contr…阅读更多...诺奖印证产业方向，AI先行者晶泰科技开拓黄金赛道2024年诺贝尔奖揭晓的各奖项中&amp;#xff0c;AI领域无疑成为“最大赢家”。 
从诺贝尔物理学奖被授予两名AI科学家&amp;#xff0c;到诺贝尔化学奖表彰三位科学家“用人工智能&amp;#xff08;AI&amp;#xff09;破译蛋白质的密码”&amp;#xff0c;本届诺贝尔奖“含AI量”之高引起市场热议。 
值…阅读更多...探讨Node.js生态中的npm与npx工具在Node.js生态中&amp;#xff0c;npm和npx是两个重要的工具&amp;#xff0c;它们的功能虽然有所重叠&amp;#xff0c;但使用场景却不同。理解它们的区别可以帮助开发者更高效地管理项目依赖与执行工具。 
npm与npx的区别 
npm&amp;#xff1a;主要用于管理项目依赖。通过 npm install&amp;#xff0…阅读更多...oracle 19c 配置开机自启动文章目录 一、修改/etc/oratab二、创建启动脚本并授权三、创建service服务四、设置开机自启并进行测试 一、修改/etc/oratab 
实例名:/opt/oracle/product/19c/dbhome_1:N修改为实例名:/opt/oracle/product/19c/dbhome_1:Y二、创建启动脚本并授权 
vi /usr/bin/oracle19c.sh
##…阅读更多...机器学习与神经网络：诺贝尔物理学奖的新篇章机器学习与神经网络&amp;#xff1a;诺贝尔物理学奖的新篇章 
Introduction 
Recently, the 2024 Nobel Prize in Physics was awarded to researchers in the field of machine learning and neural networks, marking a historic first. Traditionally, this prestigious award h…阅读更多...智慧交通新征程：亿维锐创与图为科技达成战略合作在人工智能技术备受瞩目的当下&amp;#xff0c;如何更有效地利用AI技术为各行各业激发新活力&amp;#xff0c;成为了众多科技企业探索的重要课题。科技巨擘之间强强联手&amp;#xff0c;通过共享资源、优势互补&amp;#xff0c;成为推动这一进程、引领未来产业变革的有力途径。 
今日&amp;#xff0…阅读更多...openai swarm多智能体框架使用案例；调用第三方deepseek大模型接口服务参考： https://github.com/openai/swarm 
安装： 
pip install git+ssh://git@github.com/openai/swarm.git
pip install python-dotenv 代码：  
.env 
OPENAI_BASE_URL="https://api.deepseek.com/v1"
OPENAI_API_KEY阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:47 +0000</pubDate>
    </item>
    <item>
      <title>基于SpringBoot+Vue+uniapp微信小程序的校园反诈骗微信小程序的详细设计和实现(源码+lw+部署文档+讲解等)</title>
      <link>https://www.ppmy.cn/news/1540796.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维基于SpringBoot+Vue+uniapp微信小程序的校园反诈骗微信小程序的详细设计和实现(源码+lw+部署文档+讲解等)news/2025/10/31 22:19:46/项目运行截图技术框架后端采用SpringBoot框架Spring Boot 是一个用于快速开发基于 Spring 框架的应用程序的开源框架。它采用约定大于配置的理念，提供了一套默认的配置，让开发者可以更专注于业务逻辑而不是配置文件。Spring Boot 通过自动化配置和约定大于配置的方式，大大简化了应用程序的配置工作。开发者不再需要手动配置大量的 XML 文件或繁琐的注解，框架提供了默认的配置，根据项目的依赖关系和约定，自动完成配置。Spring Boot 使用Maven或 Gradle 进行构建，自动下载项目依赖，并提供了许多插件简化构建过程。开发者可以使用 Spring Initializr 来生成一个基础的项目结构，然后根据需要选择所需的依赖。前端框架VueVue.js的设计目标之一是使其尽可能简单、易于理解和上手。Vue 提供了直观的 API，使开发者能够轻松地构建交互式的用户界面。Vue.js 提供了简单而强大的数据绑定机制，通过使用指令（例如 v-model）可以实现视图和数据的双向绑定。当数据发生变化时，视图会自动更新，反之亦然，使得开发者不必手动处理 DOM 操作。Vue.js 提供了一组生命周期钩子函数，允许开发者在组件的不同阶段执行自定义逻辑。这包括创建、挂载、更新和销毁等阶段，为开发者提供了更多灵活性。可行性分析可行性分析是每开发一个项目必不可少的一部分，可行性分析可以直接影响一个系统的存活问题，针对开发意义进行分析，还有就是是否可以通过所开发的系统来弥补传统手工统计模式的不足，是否能够更好的解决阿博图书馆管理系统存在的问题等，通过对该阿博图书馆管理系统的开发设计，不仅能够逐步减少工作人员的工作量，而且还可以进行高效工作和管理。所以该系统的开发实现了最大的意义和价值，在系统完成后，利益是否大过于成本，是否能够达到预期效果，这些方面都要进行可行性分析，再通过分析之后，就可以决定是否开发此系统。该阿博图书馆管理系统的开发设计中，以下几点进行了可行性分析：技术可行性：通过Java技术的采用，由于该技术不断成熟，所以使用该技术设计阿博图书馆管理系统是具有可行性的。经济可行性：在开发过程中，系统完成后的利益是否大过于开发成本。操作可行性：阿博图书馆管理系统的开发设计中，方便用户的可操作性和实用性。系统测试从多个角度进行测试找到系统中存在的问题是本系统首要的测试目的，通过功能测试寻找出系统缺陷并改正，确保系统没有缺陷。在测试过程中证明系统满足客户需求，发现问题和不足及时改正。测试完成之后得出测试结论。系统测试的目的系统测试是必不可少且考验耐心的过程。其重要性在于，它是保证系统质量和牢靠性的最后一道关，也是整个系统开发过程的最后一次检查。系统测试主要是为了避免用户在使用时发生问题，增强用户体验感，为了不影响用户的使用，我们需要从多角度、多思路去考虑系统可能遇到的问题，通过不同的模拟场景来发现缺陷并解决问题。在测试的过程中也可以了解到该系统的质量情况，系统功能是否健全，系统逻辑是否顺畅。一个合格的系统测试过程完成后将大大提升系统质量和使用感。测试的目标是验证系统是否符合需求规格说明书的定义，并找出与需求规格说明书不符合或与之冲突的内容。测试过程中一定站在用户的角度考虑问题，避免一些不切实际的场景，浪费测试时间，从而可能会引起问题导致预期结果与实际结果不符。系统功能测试对系统功能模块进行测试，通过点击、输入边界值和必填项非必填项的验证等方法进行一系列的黑盒测试。通过编写测试用例，根据测试用例中的内容进行测试，最后得出测试结论。登录功能测试方案：当需要登入该系统时，通过账户密码等功能点进行验证，用户在输入时需要输入与数据库内存储的数据匹配的内容，当其中某项输入错误时系统将提示输入错误。此界面对角色权限也有相应的校验，当用户角色的帐号选择管理员角色登录时，也会报错。登录功能测试用例如下表所示。输入数据预期结果实际结果结果分析用户名：guanliyuan 密码：123456 验证码：正确输入登入系统成功登入系统和估算结果一样用户名：guanliyuan 密码：111111 验证码：正确输入密码错误密码错误，请重新输入密码和估算结果一样用户名：guanliyuan 密码：123456 验证码：错误输入验证码错误验证码信息错误和估算结果一样用户名：空 密码：123456 验证码：正确输入用户名必填请输入用户名和估算结果一样用户名：guanliyuan 密码：空 验证码：正确输入密码错误密码错误，请重新输入密码和估算结果一样用户管理功能测试方案：用户管理主要有添加、编辑、删除、查找用户功能。添加用户时，必填项不填，检验系统是否有非空检验；添加已有的用户信息，检验是否提示用户名已被使用；删除用户信息，系统将检验是否进行此操作；更改用户信息，更改用户信息后页面是否可以展示出来。用户管理测试用例如下表所示。输入数据预期结果实际结果结果分析填入用户基本信息添加成功，在用户列表中显示该用户出现在在列表中和估算结果一样修改用户信息编辑成功，修改信息成功被修改用户信息被修改和估算结果一样选中删除用户系统询问是否删除用户，确认后用户被删除系统询问是否删除用户，确认后查找不到用户信息和估算结果一样添加用户时不填用户名提示用户名不能为空提示用户名不能为空和估算结果一样填入已有用户名添加失败，提示用户名重复添加失败，提示用户名重复和估算结果一样数据库表设计列名数据类型长度约束idint11PRIMARY KEYaddtime行2内容行2内容DEFAULT NULLjieyuedanhaovarchar64DEFAULT NULLtushubianhaovarchar64DEFAULT NULLtushumingchengvarchar12DEFAULT NULLfakuanshuomingvarchar64DEFAULT NULLfakuanjinevarchar64DEFAULT NULLfakuanriqivarchar64DEFAULT NULLyonghumingvarchar64DEFAULT NULLshoujivarchar64DEFAULT NULL代码参考/*** 通用接口*/
@RestController
public class CommonController{@Autowiredprivate CommonService commonService;@Autowiredprivate ConfigService configService;private static AipFace client = null;private static String BAIDU_DITU_AK = null;@RequestMapping("/location")public R location(String lng,String lat) {if(BAIDU_DITU_AK==null) {BAIDU_DITU_AK = configService.selectOne(new EntityWrapper&lt;ConfigEntity&gt;().eq("name", "baidu_ditu_ak")).getValue();if(BAIDU_DITU_AK==null) {return R.error("请在配置管理中正确配置baidu_ditu_ak");}}Map&lt;String, String&gt; map = BaiduUtil.getCityByLonLat(BAIDU_DITU_AK, lng, lat);return R.ok().put("data", map);}/*** 人脸比对* * @param face1 人脸1* @param face2 人脸2* @return*/@RequestMapping("/matchFace")public R matchFace(String face1, String face2) {if(client==null) {/*String AppID = configService.selectOne(new EntityWrapper&lt;ConfigEntity&gt;().eq("name", "AppID")).getValue();*/String APIKey = configService.selectOne(new EntityWrapper&lt;ConfigEntity&gt;().eq("name", "APIKey")).getValue();String SecretKey = configService.selectOne(new EntityWrapper&lt;ConfigEntity&gt;().eq("name", "SecretKey")).getValue();String token = BaiduUtil.getAuth(APIKey, SecretKey);if(token==null) {return R.error("请在配置管理中正确配置APIKey和SecretKey");}client = new AipFace(null, APIKey, SecretKey);client.setConnectionTimeoutInMillis(2000);client.setSocketTimeoutInMillis(60000);}JSONObject res = null;try {File file1 = new File(ResourceUtils.getFile("classpath:static/upload").getAbsolutePath()+"/"+face1);File file2 = new File(ResourceUtils.getFile("classpath:static/upload").getAbsolutePath()+"/"+face2);String img1 = Base64Util.encode(FileUtil.FileToByte(file1));String img2 = Base64Util.encode(FileUtil.FileToByte(file2));MatchRequest req1 = new MatchRequest(img1, "BASE64");MatchRequest req2 = new MatchRequest(img2, "BASE64");ArrayList&lt;MatchRequest&gt; requests = new ArrayList&lt;MatchRequest&gt;();requests.add(req1);requests.add(req2);res = client.match(requests);System.out.println(res.get("result"));} catch (FileNotFoundException e) {e.printStackTrace();return R.error("文件不存在");} catch (IOException e) {e.printStackTrace();} return R.ok().put("data", com.alibaba.fastjson.JSONObject.parse(res.get("result").toString()));}数据库脚本CREATE TABLE `yonghu` (`id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',`addtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',`yonghuming` varchar(200) NOT NULL COMMENT '用户名',`mima` varchar(200) NOT NULL COMMENT '密码',`xingming` varchar(200) DEFAULT NULL COMMENT '姓名',`xingbie` varchar(200) DEFAULT NULL COMMENT '性别',`touxiang` varchar(200) DEFAULT NULL COMMENT '头像',`shouji` varchar(200) DEFAULT NULL COMMENT '手机',`shenfenzheng` varchar(200) DEFAULT NULL COMMENT '身份证',PRIMARY KEY (`id`),UNIQUE KEY `yonghuming` (`yonghuming`)
) ENGINE=InnoDB AUTO_INCREMENT=1616222324596 DEFAULT CHARSET=utf8mb3 COMMENT='用户';
CREATE TABLE `messages` (`id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',`addtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',`userid` bigint NOT NULL COMMENT '留言人id',`username` varchar(200) DEFAULT NULL COMMENT '用户名',`content` longtext NOT NULL COMMENT '留言内容',`reply` longtext COMMENT '回复内容',PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1616222424131 DEFAULT CHARSET=utf8mb3 COMMENT='留言板';
CREATE TABLE `token` (`id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',`userid` bigint NOT NULL COMMENT '用户id',`username` varchar(100) NOT NULL COMMENT '用户名',`tablename` varchar(100) DEFAULT NULL COMMENT '表名',`role` varchar(100) DEFAULT NULL COMMENT '角色',`token` varchar(200) NOT NULL COMMENT '密码',`addtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '新增时间',`expiratedtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '过期时间',PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb3 COMMENT='token表';获取源码我们有上万多套源码，欢迎咨询。可定制、修改、部署、讲解、代写文档、PPT。获取源码查看底部卡片或者顶部名字http://www.ppmy.cn/news/1540796.html相关文章【论文笔记】X-Former: Unifying Contrastive and Reconstruction Learning for MLLMs&amp;#x1f34e;个人主页&amp;#xff1a;小嗷犬的个人主页 &amp;#x1f34a;个人网站&amp;#xff1a;小嗷犬的技术小站 &amp;#x1f96d;个人信条&amp;#xff1a;为天地立心&amp;#xff0c;为生民立命&amp;#xff0c;为往圣继绝学&amp;#xff0c;为万世开太平。 基本信息 
标题: X-Former: Unifying Contr…阅读更多...诺奖印证产业方向，AI先行者晶泰科技开拓黄金赛道2024年诺贝尔奖揭晓的各奖项中&amp;#xff0c;AI领域无疑成为“最大赢家”。 
从诺贝尔物理学奖被授予两名AI科学家&amp;#xff0c;到诺贝尔化学奖表彰三位科学家“用人工智能&amp;#xff08;AI&amp;#xff09;破译蛋白质的密码”&amp;#xff0c;本届诺贝尔奖“含AI量”之高引起市场热议。 
值…阅读更多...探讨Node.js生态中的npm与npx工具在Node.js生态中&amp;#xff0c;npm和npx是两个重要的工具&amp;#xff0c;它们的功能虽然有所重叠&amp;#xff0c;但使用场景却不同。理解它们的区别可以帮助开发者更高效地管理项目依赖与执行工具。 
npm与npx的区别 
npm&amp;#xff1a;主要用于管理项目依赖。通过 npm install&amp;#xff0…阅读更多...oracle 19c 配置开机自启动文章目录 一、修改/etc/oratab二、创建启动脚本并授权三、创建service服务四、设置开机自启并进行测试 一、修改/etc/oratab 
实例名:/opt/oracle/product/19c/dbhome_1:N修改为实例名:/opt/oracle/product/19c/dbhome_1:Y二、创建启动脚本并授权 
vi /usr/bin/oracle19c.sh
##…阅读更多...机器学习与神经网络：诺贝尔物理学奖的新篇章机器学习与神经网络&amp;#xff1a;诺贝尔物理学奖的新篇章 
Introduction 
Recently, the 2024 Nobel Prize in Physics was awarded to researchers in the field of machine learning and neural networks, marking a historic first. Traditionally, this prestigious award h…阅读更多...智慧交通新征程：亿维锐创与图为科技达成战略合作在人工智能技术备受瞩目的当下&amp;#xff0c;如何更有效地利用AI技术为各行各业激发新活力&amp;#xff0c;成为了众多科技企业探索的重要课题。科技巨擘之间强强联手&amp;#xff0c;通过共享资源、优势互补&amp;#xff0c;成为推动这一进程、引领未来产业变革的有力途径。 
今日&amp;#xff0…阅读更多...openai swarm多智能体框架使用案例；调用第三方deepseek大模型接口服务参考： https://github.com/openai/swarm 
安装： 
pip install git+ssh://git@github.com/openai/swarm.git
pip install python-dotenv 代码：  
.env 
OPENAI_BASE_URL="https://api.deepseek.com/v1"
OPENAI_API_KEY阅读更多...未来智慧城市发展的四大引领方向随着全球城市化进程的加速和科技创新的不断推动&amp;#xff0c;智慧城市作为未来城市发展的重要方向&amp;#xff0c;将在多个领域引领城市实现可持续、智能、高效的发展。以下是智慧城市引领未来城市发展的四个关键方向&amp;#xff1a; 1. 智慧交通&amp;#xff1a; 
智慧交通是智慧城市建设…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:46 +0000</pubDate>
    </item>
    <item>
      <title>【论文笔记】X-Former: Unifying Contrastive and Reconstruction Learning for MLLMs</title>
      <link>https://www.ppmy.cn/news/1540795.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【论文笔记】X-Former: Unifying Contrastive and Reconstruction Learning for MLLMsnews/2025/10/31 22:19:44/🍎个人主页：小嗷犬的个人主页🍊个人网站：小嗷犬的技术小站🥭个人信条：为天地立心，为生民立命，为往圣继绝学，为万世开太平。基本信息标题: X-Former: Unifying Contrastive and Reconstruction Learning for MLLMs作者: Sirnam Swetha, Jinyu Yang, Tal Neiman, Mamshad Nayeem Rizve, Son Tran, Benjamin Yao, Trishul Chilimbi, Mubarak Shah发表: ECCV 2024arXiv: https://arxiv.org/abs/2407.13851摘要近期在多模态大型语言模型（MLLMs）方面的进步，通过将视觉感知能力整合到大型语言模型（LLMs）中，已经彻底改变了视觉-语言理解领域。该领域的流行趋势涉及使用来自视觉-语言对比学习（CL）的视觉编码器，擅长捕捉整体表示，但在捕捉详细局部模式方面存在困难。在本工作中，我们通过结合通过掩码图像建模（MIM）获得的高频和详细视觉表示与由CL捕获的语义丰富的低频表示，来增强MLLMs的视觉表示。为了实现这一目标，我们引入了X-Former，这是一个轻量级的Transformer模块，通过创新交互机制利用CL和MIM的互补优势。具体来说，X-Former首先从两个冻结的视觉编码器，即基于CL的CLIP-ViT和基于MIM的MAEViT，启动视觉-语言表示学习和多模态到多模态生成学习。它进一步从冻结的LLM启动视觉到语言的生成学习，以确保X-Former的视觉特征可以被LLM解释。为了证明我们方法的有效性，我们在需要详细视觉理解的任务上对其性能进行了评估。广泛的评估表明，X-Former在涉及GQA数据集中结构和语义类别的视觉推理任务中表现出色。对细粒度视觉感知基准的评估进一步证实了其在视觉理解方面的优越能力。主要贡献提出利用CL和MIM中的视觉编码器，从冻结的图像编码器中捕捉全局和局部视觉表示，以提升视觉语言理解能力。提出具有双重交叉注意力的X-Former，用于通过图像-文本对启动多模态到多模态的生成学习，完全无需使用精心挑选或视觉指令数据。方法预备知识CLIP-ViT与MAE-ViT的训练目标使得其关注点有所不同。CLIP-ViT更多关注低频信号和全局视觉表示，而MAE-ViT在理解详细视觉特征方面更加出色。原生的Q-Former仅采用CLIP-ViT特征，尽管其在VQA和图像描述等下游任务上表现出色，但在详细视觉特征理解方面遇到了挑战。如何融合CLIP-ViT特征和MAE-ViT特征成为了本文的研究重点。X-FormerPre-TrainingCLIP-ViT: pre-trained ViT-G model from EVA-CLIPMAE-ViT: pre-trained ViT-H modelX-Former通过优化重建、ITC、ITM和ITG损失来学习提取局部和全局表示。🔥 X-Former❄️ CLIP Image Encoder、MAE Image Encoder、MAE Image DecoderLLM AlignmentLLM Decoder: OPT model将X-Former的特征与冻结的LLM对齐。🔥 X-Former、FC❄️ CLIP Image Encoder、MAE Image Encoder、LLM Decoder实验主实验VQAv2数据集上的零样本视觉问答结果。GQA和OKVQA数据集上零样本视觉问答结果。GQA中的详细比较。MLLMs在物体计数（OC）和多类识别（MCI）任务上的零样本细粒度视觉感知评估。COCO与NoCaps上的无微调结果零样本图像描述结果。消融实验Table 5: 对MAE-ViT特征的消融。将MAE-ViT特征替换为CLIP-ViT的浅层特征。Table 6: 重建损失的消融。总结在这篇论文中，我们介绍了X-Former，这是一种新型架构，旨在通过整合预训练的MAE和CLIP视觉编码器来增强多模态语言模型（MLLMs）的视觉表示。我们的动机源于以下几点观察：现有的MLLMs主要依赖于CLIP-ViT，但往往无法捕捉到细粒度的视觉信号；我们的实证研究表明，简单地将CLIP-ViT和MAE-ViT相结合并不一定能带来性能提升；MLLMs的有效性高度依赖于大规模图像-文本对进行预训练和精心策划的指令调整数据集进行微调。X-Former通过双重交叉注意力机制有效地整合了CLIP-ViT和MAE-ViT，同时保持计算需求可控。我们的方法即插即用，可以应用于其他模型。我们的实验结果明确表明，X-Former在各种需要稳健视觉理解的视觉推理任务中超越了BLIP-2。值得注意的是，这些优越的结果仅使用了十分之一的图像-文本对数据集，且无需任何指令调整数据集。http://www.ppmy.cn/news/1540795.html相关文章诺奖印证产业方向，AI先行者晶泰科技开拓黄金赛道2024年诺贝尔奖揭晓的各奖项中&amp;#xff0c;AI领域无疑成为“最大赢家”。 
从诺贝尔物理学奖被授予两名AI科学家&amp;#xff0c;到诺贝尔化学奖表彰三位科学家“用人工智能&amp;#xff08;AI&amp;#xff09;破译蛋白质的密码”&amp;#xff0c;本届诺贝尔奖“含AI量”之高引起市场热议。 
值…阅读更多...探讨Node.js生态中的npm与npx工具在Node.js生态中&amp;#xff0c;npm和npx是两个重要的工具&amp;#xff0c;它们的功能虽然有所重叠&amp;#xff0c;但使用场景却不同。理解它们的区别可以帮助开发者更高效地管理项目依赖与执行工具。 
npm与npx的区别 
npm&amp;#xff1a;主要用于管理项目依赖。通过 npm install&amp;#xff0…阅读更多...oracle 19c 配置开机自启动文章目录 一、修改/etc/oratab二、创建启动脚本并授权三、创建service服务四、设置开机自启并进行测试 一、修改/etc/oratab 
实例名:/opt/oracle/product/19c/dbhome_1:N修改为实例名:/opt/oracle/product/19c/dbhome_1:Y二、创建启动脚本并授权 
vi /usr/bin/oracle19c.sh
##…阅读更多...机器学习与神经网络：诺贝尔物理学奖的新篇章机器学习与神经网络&amp;#xff1a;诺贝尔物理学奖的新篇章 
Introduction 
Recently, the 2024 Nobel Prize in Physics was awarded to researchers in the field of machine learning and neural networks, marking a historic first. Traditionally, this prestigious award h…阅读更多...智慧交通新征程：亿维锐创与图为科技达成战略合作在人工智能技术备受瞩目的当下&amp;#xff0c;如何更有效地利用AI技术为各行各业激发新活力&amp;#xff0c;成为了众多科技企业探索的重要课题。科技巨擘之间强强联手&amp;#xff0c;通过共享资源、优势互补&amp;#xff0c;成为推动这一进程、引领未来产业变革的有力途径。 
今日&amp;#xff0…阅读更多...openai swarm多智能体框架使用案例；调用第三方deepseek大模型接口服务参考： https://github.com/openai/swarm 
安装： 
pip install git+ssh://git@github.com/openai/swarm.git
pip install python-dotenv 代码：  
.env 
OPENAI_BASE_URL="https://api.deepseek.com/v1"
OPENAI_API_KEY阅读更多...未来智慧城市发展的四大引领方向随着全球城市化进程的加速和科技创新的不断推动&amp;#xff0c;智慧城市作为未来城市发展的重要方向&amp;#xff0c;将在多个领域引领城市实现可持续、智能、高效的发展。以下是智慧城市引领未来城市发展的四个关键方向&amp;#xff1a; 1. 智慧交通&amp;#xff1a; 
智慧交通是智慧城市建设…阅读更多...vmware虚拟机linux系统安装一、下载linux镜像安装包 
步骤1---网址地址下载镜像 
地址&amp;#xff1a;Index of /ubuntu-releases/22.04/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror 
步骤2---下载linux版本号 步骤3---查看下载的linuxiso 
linux镜像操作系统 二、vmware新建安装linux操作系统…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:45 +0000</pubDate>
    </item>
    <item>
      <title>诺奖印证产业方向，AI先行者晶泰科技开拓黄金赛道</title>
      <link>https://www.ppmy.cn/news/1540794.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维诺奖印证产业方向，AI先行者晶泰科技开拓黄金赛道news/2025/10/31 22:19:43/2024年诺贝尔奖揭晓的各奖项中，AI领域无疑成为“最大赢家”。从诺贝尔物理学奖被授予两名AI科学家，到诺贝尔化学奖表彰三位科学家“用人工智能（AI）破译蛋白质的密码”，本届诺贝尔奖“含AI量”之高引起市场热议。值得关注的是，今年6月，以“香港18C规则下特专科技企业上市第一股”登陆港交所的晶泰科技（QUANTUMPH-P，02228.HK)，其科研方向与三项诺贝尔奖青睐的领域相吻合，堪称喜提诺奖背书的“头号玩家”。如此精准命中AI创新的技术趋势，晶泰科技成长潜力如何？“AI+科研”渐成主流晶泰科技储备技术，命中三项诺奖方向作为技术发展的风向标，今年诺贝尔奖对人工智能领域的青睐，揭示了AI 技术正在全面渗透各学科领域，重写科研的“游戏规则”。近年来，人工智能的触角延伸到科学的每个角落，AI+学科的产业化进程也在不断提速。在诺奖关注的这些领域中，晶泰科技就颇具前瞻性地落子布局。资料显示，晶泰科技是一个基于量子物理、以人工智能赋能和机器人驱动的创新型研发平台，主要提供药物及材料科学研发解决方案及服务。在物理学奖关注的“AI+物理”方向上，晶泰科技拥有量子物理+AI+机器人驱动的核心技术平台，是国内最早开始布局“物理学+AI”跨学科算法的企业之一；在生理学或医学奖授予的microRNA领域，晶泰科技也与长江生命科技等企业开展了研发合作，包括开发基于miRNA 和 AI的癌症预后风险预测分子诊断模型。此外，就在诺贝尔化学奖颁发给AlphaFold开发者的第二天，晶泰科技正式官宣旗下与AlphaFold同类型技术平台XtalFold与强生公司下属公司Janssen Biotech签署了商业授权协议，获得大厂认证。不难看出，今年诺贝尔自然科学领域三大奖项均与晶泰科技业务布局高度关联。而晶泰科技之所以能屡屡“预判”前沿技术趋势，本质是“大样本”下的大概率事件。晶泰科技量子物理+AI+机器人的平台适用于生物医药、新材料，这覆盖了化学药、生物药、新能源、石油化工、化学品、农业、消费品等广泛的研发领域。科创领域的“尖子生”标签，也体现在公司成为港交所第18C章特专科技制度落地一年多来的首只上市新股方面。港交所推出18C改革，向高“含科量”的“专精特新”硬核科技公司伸出橄榄枝，因对企业的科技属性和市值门槛要求较高，18c 规则被认为是面向真正受资本青睐的独角兽科技企业量身定制。后又在 8 月下调了市值门槛。在这样的背景下，“18C第一股”晶泰科技的含金量不言而喻。值得一提的是，18C规则要求有2-5名领航资深独立投资者“保驾护航”，而晶泰科技的领航资深独立投资者达到5位的上限，包括意像架构（腾讯）、红杉、五源资本、国寿成达、人保健康养老基金。根据18C规则，领航资深独立投资者禁售锁定期或高达12个月（未商业化公司），这体现了众多顶级投资机构对“AI+机器人”赋能研发以及晶泰科技作为这一赛道领跑者的长期发展信心。技术上，晶泰科技拥有“AI 制药”、“AI+机器人”第一股的光环，量子物理+AI+机器人的技术组合具备一定的稀缺性。公司综合技术优势显著，例如，在全球AI行业面临数据短缺，尤其缺乏高质量数据的背景下，晶泰科技自主研发了机器人实验室，具备持续为AI算法迭代而快速产生真实数据的能力。据晶泰科技介绍，其已经建立上万平米的实验室，计划在北美等地继续规模化部署其自动化机器人工作站，而自动化实验室作为独立的解决方案也已获得复旦大学、中石化等机构和企业的采购订单。注：晶泰科技自研的AI+机器人实验室除了技术实力，晶泰科技的商业模式也颠覆了传统模式的局限。公司定位于一家AI平台型生态科技企业，通过对外赋能从AI制药的内卷中突围。根据中报，公司综合技术平台已使用逾7亿核心小时数的云计算且为超500个项目做出贡献，包括药物发现及固态研发等项目。在收获强生等大药企认可的同时，晶泰科技还将底层技术优势外溢，突破AI制药行业边界，迎着产业数字化转型与智能制造的政策东风，在新材料、石油化工、新能源等众多产业签署合作，带来“智创大引擎”。外延内拓之下，晶泰科技站在爆发前夜。而本届诺贝尔奖各奖项揭晓，进一步明确了AI作为技术与学科交叉融合的核心驱动力之一，公司长期增长的确定性也得到加强。打造AI全球创新生态，释放平台经济价值随着新的科研范式形成并带来深远的影响，“AI+ 智造” 的产业前景更加光明。而将AI技术与科学创新场景商业化“嫁接”，晶泰科技具备三大优势：1.拥有国际化视野的创业团队，链接全球优质创新资源。晶泰科技三位创始人均为麻省理工学院（MIT）博士后，与本届诺贝尔生理学或医学奖得主之一为校友，且与MIT科研团队紧密合作，如与Bradley L. Pentelute教授合作推进肽化学和分子生物学研究。今年8月，公司联合创始人、董事长温书豪受校方邀请加入MIT外部顾问委员会，成为该委员会化学分部最年轻的委员。晶泰科技凭借创始团队技术背景，坚持创新自主研发，打造具有全球竞争力的技术平台，证明了优秀管理者是企业重要资产。正如查理芒格所说：“卓越的人很少，有机会追随他们，和他们走到一起，或许值得付出溢价，将来可能获得丰厚的回报。”2.深度融入全球创新网络，将平台型生态科技企业的道路走宽。以开放促创新，完善面向全球的创新体系，是中国科创企业发展潮流。晶泰科技以创新平台为定位，服务全球市场。根据弗若斯特沙利文的资料，公司已为全球300多家生物技术与制药公司及研究机构提供服务，其中包括全球前20大生物技术与制药公司中的16家。在这个过程中，晶泰科技实现了AI与生物医药的双向赋能。一方面，晶泰科技以AI推动医药研发创新，参与辉瑞主导的全球首款获FDA批准上市的新冠小分子口服药 Paxlovid研发，将原本需要数月的研发任务缩短至6周时间内，显著缩短药物研发到上市的周期。另一方面，晶泰科技释放了AI技术的商业潜力。公司在2023年与礼来合作开展AI+机器人的小分子药物研发，预付款及里程碑总收益达2.5亿美元，刷新了当年中国AI制药单管线金额纪录。这体现出晶泰科技“硬实力”在全球范围内的认可度持续提升，也意味着公司的全球创新生态圈持续扩容，海外市场业务潜力可期。3.共性技术产生溢出效应，开拓N条黄金赛道。晶泰科技打造集量子物理、AI、云计算、机器人实验于一体的创新型研发平台，实现共性技术的集成，为未来业务发展可持续性和可扩展性奠基。例如，今年8月，晶泰科技与协鑫集团签署5年合作协议，预计将分期获得约1.35亿美元（约10亿元人民币）的研发付费，共同开发一系列具有行业竞争力和工业应用潜力的差异化新材料，并为协鑫打造材料领域大模型驱动的AI+自动化数智创制系统。随着晶泰科技在药物及材料科学领域取得成果，业务量快速增长，公司已形成技术投入与商业成果的良性循环。未来，更多传统产业将拥抱“AI+ 智造”，公司亦有望开拓更广泛业务版图，发挥“AI+”千行百业的乘数效应。总之，晶泰科技拥有全球视野的创始团队和丰富的全球合作资源，“从1到N”的商业化潜力也清晰可见。打造“AI+”新时代产业引擎，公司成长性有望逐步兑现本届诺贝尔奖之后，整个科学研究领域都会搭上AI驱动的科研新范式。随着AI技术的潜力和价值进一步释放，晶泰科技现在的布局会逐步进入收获期。贝恩咨询公司预测，随着人工智能技术的迅速普及颠覆了企业和经济，人工智能相关产品的全球市场正在膨胀，到2027年将达到9900亿美元。在人工智能领域，晶泰科技拥有双重稀缺性：既是具有稀缺性的技术平台，得到国际大厂签单和三重诺奖背书的双重加持，又是全球资本市场中垂直领域AI板块的稀缺标的，展现出强劲的发展势头。图源：贝恩咨询公司科研力量的爆发点已至，再次纵览晶泰科技的业务版图，公司不仅仅抓住了AI与科学研究交叉融合的技术红利，更是通过持续赋能生态圈里的公司，直面全球市场的创新红利。同时，随着全球医药产业持续扩容，公司也将保持业务需求的高增长。再结合“AI+智造”的广阔版图，公司拥有较高的业务量天花板。行业前景优异、自身发展潜力巨大，这也是晶泰科技成为港交所18C规则下“尖子生”的原因。查理芒格说过：“钓鱼的第一条规则是，在有鱼的地方钓鱼。钓鱼的第二条规则是，记住第一条规则。”AI+智造产业高增长，晶泰科技潜在投资价值也获机构长期看好。诺奖之后，公司战略方向和业务价值的确定性势必会进入更多投资者认知之中，这有望吸引关注科技创新的投资者。展望未来，晶泰科技AI+智造价值释放的巨大预期，会在估值变化中彻底呈现在市场面前。来源：港股研究社http://www.ppmy.cn/news/1540794.html相关文章探讨Node.js生态中的npm与npx工具在Node.js生态中&amp;#xff0c;npm和npx是两个重要的工具&amp;#xff0c;它们的功能虽然有所重叠&amp;#xff0c;但使用场景却不同。理解它们的区别可以帮助开发者更高效地管理项目依赖与执行工具。 
npm与npx的区别 
npm&amp;#xff1a;主要用于管理项目依赖。通过 npm install&amp;#xff0…阅读更多...oracle 19c 配置开机自启动文章目录 一、修改/etc/oratab二、创建启动脚本并授权三、创建service服务四、设置开机自启并进行测试 一、修改/etc/oratab 
实例名:/opt/oracle/product/19c/dbhome_1:N修改为实例名:/opt/oracle/product/19c/dbhome_1:Y二、创建启动脚本并授权 
vi /usr/bin/oracle19c.sh
##…阅读更多...机器学习与神经网络：诺贝尔物理学奖的新篇章机器学习与神经网络&amp;#xff1a;诺贝尔物理学奖的新篇章 
Introduction 
Recently, the 2024 Nobel Prize in Physics was awarded to researchers in the field of machine learning and neural networks, marking a historic first. Traditionally, this prestigious award h…阅读更多...智慧交通新征程：亿维锐创与图为科技达成战略合作在人工智能技术备受瞩目的当下&amp;#xff0c;如何更有效地利用AI技术为各行各业激发新活力&amp;#xff0c;成为了众多科技企业探索的重要课题。科技巨擘之间强强联手&amp;#xff0c;通过共享资源、优势互补&amp;#xff0c;成为推动这一进程、引领未来产业变革的有力途径。 
今日&amp;#xff0…阅读更多...openai swarm多智能体框架使用案例；调用第三方deepseek大模型接口服务参考： https://github.com/openai/swarm 
安装： 
pip install git+ssh://git@github.com/openai/swarm.git
pip install python-dotenv 代码：  
.env 
OPENAI_BASE_URL="https://api.deepseek.com/v1"
OPENAI_API_KEY阅读更多...未来智慧城市发展的四大引领方向随着全球城市化进程的加速和科技创新的不断推动&amp;#xff0c;智慧城市作为未来城市发展的重要方向&amp;#xff0c;将在多个领域引领城市实现可持续、智能、高效的发展。以下是智慧城市引领未来城市发展的四个关键方向&amp;#xff1a; 1. 智慧交通&amp;#xff1a; 
智慧交通是智慧城市建设…阅读更多...vmware虚拟机linux系统安装一、下载linux镜像安装包 
步骤1---网址地址下载镜像 
地址&amp;#xff1a;Index of /ubuntu-releases/22.04/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror 
步骤2---下载linux版本号 步骤3---查看下载的linuxiso 
linux镜像操作系统 二、vmware新建安装linux操作系统…阅读更多...2024.10.16 软考学习笔记刷题网站&amp;#xff1a; 
软考中级软件设计师在线试题、软考解析及答案-51CTO题库-软考在线做题备考工具阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:43 +0000</pubDate>
    </item>
    <item>
      <title>探讨Node.js生态中的npm与npx工具</title>
      <link>https://www.ppmy.cn/news/1540793.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维探讨Node.js生态中的npm与npx工具news/2025/10/31 22:19:42/在Node.js生态中，npm和npx是两个重要的工具，它们的功能虽然有所重叠，但使用场景却不同。理解它们的区别可以帮助开发者更高效地管理项目依赖与执行工具。npm与npx的区别npm：主要用于管理项目依赖。通过npm install，你可以安装、共享、管理项目中的包，并执行项目脚本。npx：主要用于临时执行命令行工具。npx无需全局安装包，而是自动处理下载、执行，并在执行后清理。何时使用npm安装依赖：当需要长期使用某个包时，使用npm install本地安装。例如：npminstalllodash这样可以将lodash添加到项目依赖中，方便团队协作。运行项目脚本：npm可以管理和执行项目中的脚本：npmrun build何时使用npx一次性执行命令：当你只需临时使用某个工具时，比如快速创建一个React应用：npx create-react-app my-app测试不同版本：使用npx可以指定工具的特定版本：npx webpack@5总结npm：用于安装和管理依赖。npx：用于临时执行工具，避免全局安装。掌握它们的使用场景有助于提升开发效率，避免环境污染。http://www.ppmy.cn/news/1540793.html相关文章oracle 19c 配置开机自启动文章目录 一、修改/etc/oratab二、创建启动脚本并授权三、创建service服务四、设置开机自启并进行测试 一、修改/etc/oratab 
实例名:/opt/oracle/product/19c/dbhome_1:N修改为实例名:/opt/oracle/product/19c/dbhome_1:Y二、创建启动脚本并授权 
vi /usr/bin/oracle19c.sh
##…阅读更多...机器学习与神经网络：诺贝尔物理学奖的新篇章机器学习与神经网络&amp;#xff1a;诺贝尔物理学奖的新篇章 
Introduction 
Recently, the 2024 Nobel Prize in Physics was awarded to researchers in the field of machine learning and neural networks, marking a historic first. Traditionally, this prestigious award h…阅读更多...智慧交通新征程：亿维锐创与图为科技达成战略合作在人工智能技术备受瞩目的当下&amp;#xff0c;如何更有效地利用AI技术为各行各业激发新活力&amp;#xff0c;成为了众多科技企业探索的重要课题。科技巨擘之间强强联手&amp;#xff0c;通过共享资源、优势互补&amp;#xff0c;成为推动这一进程、引领未来产业变革的有力途径。 
今日&amp;#xff0…阅读更多...openai swarm多智能体框架使用案例；调用第三方deepseek大模型接口服务参考： https://github.com/openai/swarm 
安装： 
pip install git+ssh://git@github.com/openai/swarm.git
pip install python-dotenv 代码：  
.env 
OPENAI_BASE_URL="https://api.deepseek.com/v1"
OPENAI_API_KEY阅读更多...未来智慧城市发展的四大引领方向随着全球城市化进程的加速和科技创新的不断推动&amp;#xff0c;智慧城市作为未来城市发展的重要方向&amp;#xff0c;将在多个领域引领城市实现可持续、智能、高效的发展。以下是智慧城市引领未来城市发展的四个关键方向&amp;#xff1a; 1. 智慧交通&amp;#xff1a; 
智慧交通是智慧城市建设…阅读更多...vmware虚拟机linux系统安装一、下载linux镜像安装包 
步骤1---网址地址下载镜像 
地址&amp;#xff1a;Index of /ubuntu-releases/22.04/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror 
步骤2---下载linux版本号 步骤3---查看下载的linuxiso 
linux镜像操作系统 二、vmware新建安装linux操作系统…阅读更多...2024.10.16 软考学习笔记刷题网站&amp;#xff1a; 
软考中级软件设计师在线试题、软考解析及答案-51CTO题库-软考在线做题备考工具阅读更多...Git下载及安装教程（简单易懂）一、Git的下载 
1.下载方式 
这里提供Git官网和阿里云镜像下载两种方式&amp;#xff0c;这里博主用的是阿里云镜像&amp;#xff0c;速度快。 
Git官网https://git-scm.com/阿里云镜像https://registry.npmmirror.com/binary.html?pathgit-for-windows/ 
二、Git的安装 
1.下载完成后&amp;a…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:42 +0000</pubDate>
    </item>
    <item>
      <title>oracle 19c 配置开机自启动</title>
      <link>https://www.ppmy.cn/news/1540792.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维oracle 19c 配置开机自启动news/2025/10/31 22:19:41/文章目录一、修改/etc/oratab二、创建启动脚本并授权三、创建service服务四、设置开机自启并进行测试一、修改/etc/oratab实例名:/opt/oracle/product/19c/dbhome_1:N修改为实例名:/opt/oracle/product/19c/dbhome_1:Y二、创建启动脚本并授权vi/usr/bin/oracle19c.sh######添加以下内容（注意修改路径）#######!/bin/bash/u01/app/oracle/product/19c/dbhome_1/bin/lsnrctlstart/u01/app/oracle/product/19c/dbhome_1/bin/dbstart/opt/oracle/product/19c/dbhome_1######赋执行权限######chmod+x/usr/bin/oracle19c.sh三、创建service服务vi/etc/systemd/system/oracle19c.service######添加以下内容（注意修改路径）######[Unit]Description=Oracle19cAfter=syslog.target network.target[Service]LimitMEMLOCK=infinity
LimitNOFILE=65535Type=oneshot
RemainAfterExit=yesUser=oracle
Environment="ORACLE_HOME=/u01/app/oracle/product/19c/dbhome_1"ExecStart=/usr/bin/oracle19c.sh[Install]WantedBy=multi-user.target四、设置开机自启并进行测试systemctlenableoracle19c# 查看服务状态systemctl status oracle19c# 启动systemctl start oracle19c# 停止systemctl stop oracle19c# 重启systemctl restart oracle19creboot 重启验证：http://www.ppmy.cn/news/1540792.html相关文章机器学习与神经网络：诺贝尔物理学奖的新篇章机器学习与神经网络&amp;#xff1a;诺贝尔物理学奖的新篇章 
Introduction 
Recently, the 2024 Nobel Prize in Physics was awarded to researchers in the field of machine learning and neural networks, marking a historic first. Traditionally, this prestigious award h…阅读更多...智慧交通新征程：亿维锐创与图为科技达成战略合作在人工智能技术备受瞩目的当下&amp;#xff0c;如何更有效地利用AI技术为各行各业激发新活力&amp;#xff0c;成为了众多科技企业探索的重要课题。科技巨擘之间强强联手&amp;#xff0c;通过共享资源、优势互补&amp;#xff0c;成为推动这一进程、引领未来产业变革的有力途径。 
今日&amp;#xff0…阅读更多...openai swarm多智能体框架使用案例；调用第三方deepseek大模型接口服务参考： https://github.com/openai/swarm 
安装： 
pip install git+ssh://git@github.com/openai/swarm.git
pip install python-dotenv 代码：  
.env 
OPENAI_BASE_URL="https://api.deepseek.com/v1"
OPENAI_API_KEY阅读更多...未来智慧城市发展的四大引领方向随着全球城市化进程的加速和科技创新的不断推动&amp;#xff0c;智慧城市作为未来城市发展的重要方向&amp;#xff0c;将在多个领域引领城市实现可持续、智能、高效的发展。以下是智慧城市引领未来城市发展的四个关键方向&amp;#xff1a; 1. 智慧交通&amp;#xff1a; 
智慧交通是智慧城市建设…阅读更多...vmware虚拟机linux系统安装一、下载linux镜像安装包 
步骤1---网址地址下载镜像 
地址&amp;#xff1a;Index of /ubuntu-releases/22.04/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror 
步骤2---下载linux版本号 步骤3---查看下载的linuxiso 
linux镜像操作系统 二、vmware新建安装linux操作系统…阅读更多...2024.10.16 软考学习笔记刷题网站&amp;#xff1a; 
软考中级软件设计师在线试题、软考解析及答案-51CTO题库-软考在线做题备考工具阅读更多...Git下载及安装教程（简单易懂）一、Git的下载 
1.下载方式 
这里提供Git官网和阿里云镜像下载两种方式&amp;#xff0c;这里博主用的是阿里云镜像&amp;#xff0c;速度快。 
Git官网https://git-scm.com/阿里云镜像https://registry.npmmirror.com/binary.html?pathgit-for-windows/ 
二、Git的安装 
1.下载完成后&amp;a…阅读更多...React.memo和useMemoReact.memo和usememo 
React.memo 
React.memo是一个高阶组件&amp;#xff0c;对组件进行性能优化&amp;#xff0c;主要用于优化函数组件的性能&amp;#xff0c;如果一个组件在相同的props下渲染出相同的结果&amp;#xff0c;但是又不需要在组件更新的时候重新渲染&amp;#xff0c;就可以使用react.…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:41 +0000</pubDate>
    </item>
    <item>
      <title>机器学习与神经网络：诺贝尔物理学奖的新篇章</title>
      <link>https://www.ppmy.cn/news/1540791.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维机器学习与神经网络：诺贝尔物理学奖的新篇章news/2025/10/31 22:19:40/机器学习与神经网络：诺贝尔物理学奖的新篇章IntroductionRecently, the 2024 Nobel Prize in Physics was awarded to researchers in the field of machine learning and neural networks, marking a historic first. Traditionally, this prestigious award has been given to scientists who have made significant contributions to the study of natural phenomena and physical matter. This year’s decision, however, recognizes the profound impact of research and development in machine learning and neural networks on our lives and future.Machine learning and neural networks, known for their efficiency, accuracy, and practicality, have found widespread applications in various fields such as manufacturing, finance, and healthcare. The awarding of the Nobel Prize in Physics to these technologies has sparked extensive discussions and debates within the global academic and scientific communities.机器学习与神经网络的发展 (Development of Machine Learning and Neural Networks)Machine learning and neural networks are two important branches of artificial intelligence. Machine learning is a technique that enables computers to learn patterns and rules from data, while neural networks are algorithmic models that mimic the structure of human neurons. In recent years, these technologies have seen rapid advancements and have been widely applied in various sectors:Production Manufacturing(生产制造):By predicting maintenance needs and optimizing production processes, machine learning and neural networks have significantly improved production efficiency and product quality.Finance(金融):These technologies have greatly enhanced operational efficiency in areas such as risk management, fraud detection, and investment strategy optimization.Healthcare(医疗):In disease diagnosis, drug development, and patient management, machine learning and neural networks have brought about revolutionary changes in the healthcare industry.诺贝尔物理学奖的新篇章 (A New Chapter for the Nobel Prize in Physics)The Nobel Prize in Physics is typically awarded to scientists who have made significant contributions to the study of natural phenomena and physical matter. However, the 2024 decision to award the prize to researchers in machine learning and neural networks breaks with tradition. The reasons behind this decision include:Interdisciplinary Integration(跨学科融合):The development of machine learning and neural networks relies heavily on foundational theories from physics, such as statistical mechanics and quantum computing. The success of these technologies demonstrates the enormous potential of interdisciplinary research.Significant Impact(重大影响):Machine learning and neural networks have shown substantial value in multiple fields, significantly impacting society and the economy. The Nobel Committee believes that the development and application of these technologies deserve recognition.Future Prospects(未来前景):As technology continues to advance, machine learning and neural networks are expected to play increasingly important roles in more areas, bringing more benefits to humanity.社会反响与讨论 (Social Reactions and Discussions)This decision has generated widespread attention and heated discussions within the global academic and scientific communities. Supporters argue that the award recognizes the importance of machine learning and neural networks and encourages further development in these fields. Critics, however, express concerns that it may undermine the authority and traditional value of the Nobel Prize in Physics.Supporters’ Viewpoints(支持者的观点):Machine learning and neural networks are crucial components of modern technology, and their applications have profoundly changed our lives.This decision inspires more researchers to engage in interdisciplinary studies, promoting the comprehensive development of science and technology.Critics’ Viewpoints(反对者的观点):The Nobel Prize in Physics should maintain its tradition and focus on the study of natural phenomena and physical matter.This decision might lead to the neglect of other important physics research findings.ConclusionThe 2024 Nobel Prize in Physics being awarded to researchers in machine learning and neural networks marks a new phase in technological development. This decision not only reflects the significance and impact of these technologies but also points the way forward for future research and development. Whether in support or opposition, this event provides a valuable platform for us to collectively consider how we can better utilize these technologies to bring more benefits to human society.http://www.ppmy.cn/news/1540791.html相关文章智慧交通新征程：亿维锐创与图为科技达成战略合作在人工智能技术备受瞩目的当下&amp;#xff0c;如何更有效地利用AI技术为各行各业激发新活力&amp;#xff0c;成为了众多科技企业探索的重要课题。科技巨擘之间强强联手&amp;#xff0c;通过共享资源、优势互补&amp;#xff0c;成为推动这一进程、引领未来产业变革的有力途径。 
今日&amp;#xff0…阅读更多...openai swarm多智能体框架使用案例；调用第三方deepseek大模型接口服务参考： https://github.com/openai/swarm 
安装： 
pip install git+ssh://git@github.com/openai/swarm.git
pip install python-dotenv 代码：  
.env 
OPENAI_BASE_URL="https://api.deepseek.com/v1"
OPENAI_API_KEY阅读更多...未来智慧城市发展的四大引领方向随着全球城市化进程的加速和科技创新的不断推动&amp;#xff0c;智慧城市作为未来城市发展的重要方向&amp;#xff0c;将在多个领域引领城市实现可持续、智能、高效的发展。以下是智慧城市引领未来城市发展的四个关键方向&amp;#xff1a; 1. 智慧交通&amp;#xff1a; 
智慧交通是智慧城市建设…阅读更多...vmware虚拟机linux系统安装一、下载linux镜像安装包 
步骤1---网址地址下载镜像 
地址&amp;#xff1a;Index of /ubuntu-releases/22.04/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror 
步骤2---下载linux版本号 步骤3---查看下载的linuxiso 
linux镜像操作系统 二、vmware新建安装linux操作系统…阅读更多...2024.10.16 软考学习笔记刷题网站&amp;#xff1a; 
软考中级软件设计师在线试题、软考解析及答案-51CTO题库-软考在线做题备考工具阅读更多...Git下载及安装教程（简单易懂）一、Git的下载 
1.下载方式 
这里提供Git官网和阿里云镜像下载两种方式&amp;#xff0c;这里博主用的是阿里云镜像&amp;#xff0c;速度快。 
Git官网https://git-scm.com/阿里云镜像https://registry.npmmirror.com/binary.html?pathgit-for-windows/ 
二、Git的安装 
1.下载完成后&amp;a…阅读更多...React.memo和useMemoReact.memo和usememo 
React.memo 
React.memo是一个高阶组件&amp;#xff0c;对组件进行性能优化&amp;#xff0c;主要用于优化函数组件的性能&amp;#xff0c;如果一个组件在相同的props下渲染出相同的结果&amp;#xff0c;但是又不需要在组件更新的时候重新渲染&amp;#xff0c;就可以使用react.…阅读更多...【AI大模型】深入Transformer架构：输入和输出部分的实现与解析目录 
&amp;#x1f354; 输入部分介绍 
&amp;#x1f354; 文本嵌入层的作用 
&amp;#x1f354; 位置编码器的作用 
3.1 位置编码器的代码分析 
3.2 绘制词汇向量中特征的分布曲线 
&amp;#x1f354; 输出部分介绍 
&amp;#x1f354; 线性层的作用 
&amp;#x1f354; softmax层的作用 
3.1 线性层和…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:40 +0000</pubDate>
    </item>
    <item>
      <title>智慧交通新征程：亿维锐创与图为科技达成战略合作</title>
      <link>https://www.ppmy.cn/news/1540790.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维智慧交通新征程：亿维锐创与图为科技达成战略合作news/2025/10/31 22:19:38/在人工智能技术备受瞩目的当下，如何更有效地利用AI技术为各行各业激发新活力，成为了众多科技企业探索的重要课题。科技巨擘之间强强联手，通过共享资源、优势互补，成为推动这一进程、引领未来产业变革的有力途径。今日，深圳亿维锐创科技股份有限公司（以下简称“亿维锐创”）与图为信息科技（深圳）有限公司（以下简称“图为科技”）在深圳正式签署战略合作协议，标志着双方在智慧交通与AI边缘计算领域的深度合作正式拉开序幕。亿维锐创，作为智慧交通领域的佼佼者，凭借其在该领域的深厚行业经验和技术积累，已经为众多客户提供了从规划、设计到实施、运维的全生命周期服务。而图为科技在AI边缘计算领域展现出卓越的技术优势和市场影响力，其为全球5000多家客户提供了智能、高效、可靠的解决方案，显著提升了设备的智能化水平和响应速度。本次合作，是亿维锐创与图为科技对未来智慧交通产业发展的共同期待与承诺。双方将围绕技术研发、市场拓展、解决方案定制以及人才培养与交流等多个方面展开深入合作，共同探索智慧交通与AI边缘计算技术的全新结合点，推动技术创新和产业升级。技术研发方面，双方将共同开展智慧交通及相关行业的研发工作，包括智能车载设备、智能交通管理系统等产品的研发和优化，旨在通过技术创新提升产品的竞争力。市场拓展方面，双方将利用各自的市场资源和渠道优势，共同开拓智慧交通领域的新市场，推广双方的合作成果，实现市场份额的快速增长。解决方案定制方面，针对客户的特定需求，双方将共同定制智慧交通领域的行业解决方案，联合提供从咨询、设计到实施、运维的一站式服务，确保客户能够获得最符合其需求的智能化方案。此次战略合作协议的签署，不仅是亿维锐创与图为科技共同发展的重要里程碑，也是智慧交通产业发展的一个重要事件。双方将携手共进，共同推动智慧交通与AI边缘计算技术的融合与创新，为客户提供更加优质、高效的解决方案和服务，共同打造智慧交通产业的新生态！http://www.ppmy.cn/news/1540790.html相关文章openai swarm多智能体框架使用案例；调用第三方deepseek大模型接口服务参考： https://github.com/openai/swarm 
安装： 
pip install git+ssh://git@github.com/openai/swarm.git
pip install python-dotenv 代码：  
.env 
OPENAI_BASE_URL="https://api.deepseek.com/v1"
OPENAI_API_KEY阅读更多...未来智慧城市发展的四大引领方向随着全球城市化进程的加速和科技创新的不断推动&amp;#xff0c;智慧城市作为未来城市发展的重要方向&amp;#xff0c;将在多个领域引领城市实现可持续、智能、高效的发展。以下是智慧城市引领未来城市发展的四个关键方向&amp;#xff1a; 1. 智慧交通&amp;#xff1a; 
智慧交通是智慧城市建设…阅读更多...vmware虚拟机linux系统安装一、下载linux镜像安装包 
步骤1---网址地址下载镜像 
地址&amp;#xff1a;Index of /ubuntu-releases/22.04/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror 
步骤2---下载linux版本号 步骤3---查看下载的linuxiso 
linux镜像操作系统 二、vmware新建安装linux操作系统…阅读更多...2024.10.16 软考学习笔记刷题网站&amp;#xff1a; 
软考中级软件设计师在线试题、软考解析及答案-51CTO题库-软考在线做题备考工具阅读更多...Git下载及安装教程（简单易懂）一、Git的下载 
1.下载方式 
这里提供Git官网和阿里云镜像下载两种方式&amp;#xff0c;这里博主用的是阿里云镜像&amp;#xff0c;速度快。 
Git官网https://git-scm.com/阿里云镜像https://registry.npmmirror.com/binary.html?pathgit-for-windows/ 
二、Git的安装 
1.下载完成后&amp;a…阅读更多...React.memo和useMemoReact.memo和usememo 
React.memo 
React.memo是一个高阶组件&amp;#xff0c;对组件进行性能优化&amp;#xff0c;主要用于优化函数组件的性能&amp;#xff0c;如果一个组件在相同的props下渲染出相同的结果&amp;#xff0c;但是又不需要在组件更新的时候重新渲染&amp;#xff0c;就可以使用react.…阅读更多...【AI大模型】深入Transformer架构：输入和输出部分的实现与解析目录 
&amp;#x1f354; 输入部分介绍 
&amp;#x1f354; 文本嵌入层的作用 
&amp;#x1f354; 位置编码器的作用 
3.1 位置编码器的代码分析 
3.2 绘制词汇向量中特征的分布曲线 
&amp;#x1f354; 输出部分介绍 
&amp;#x1f354; 线性层的作用 
&amp;#x1f354; softmax层的作用 
3.1 线性层和…阅读更多...React中的函数组件与类组件在React中&amp;#xff0c;有两种不同的组件形式&amp;#xff1a;函数组件和类组件。它们的写法并不相同。 
函数组件 
React的函数组件是一个只接受 props 参数并返回元素的 JavaScript 函数&amp;#xff08;该props与Vue中props一样是只读的&amp;#xff0c;且都是父组件传递给子组件的数据&amp;a…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:39 +0000</pubDate>
    </item>
    <item>
      <title>openai swarm多智能体框架使用案例；调用第三方deepseek大模型接口服务</title>
      <link>https://www.ppmy.cn/news/1540789.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维openai swarm多智能体框架使用案例；调用第三方deepseek大模型接口服务news/2025/10/31 22:19:37/参考：https://github.com/openai/swarm安装：pip install git+ssh://git@github.com/openai/swarm.gitpip install python-dotenv代码：.envOPENAI_BASE_URL="https://api.deepseek.com/v1"OPENAI_API_KEYhttp://www.ppmy.cn/news/1540789.html相关文章未来智慧城市发展的四大引领方向随着全球城市化进程的加速和科技创新的不断推动&amp;#xff0c;智慧城市作为未来城市发展的重要方向&amp;#xff0c;将在多个领域引领城市实现可持续、智能、高效的发展。以下是智慧城市引领未来城市发展的四个关键方向&amp;#xff1a; 1. 智慧交通&amp;#xff1a; 
智慧交通是智慧城市建设…阅读更多...vmware虚拟机linux系统安装一、下载linux镜像安装包 
步骤1---网址地址下载镜像 
地址&amp;#xff1a;Index of /ubuntu-releases/22.04/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror 
步骤2---下载linux版本号 步骤3---查看下载的linuxiso 
linux镜像操作系统 二、vmware新建安装linux操作系统…阅读更多...2024.10.16 软考学习笔记刷题网站&amp;#xff1a; 
软考中级软件设计师在线试题、软考解析及答案-51CTO题库-软考在线做题备考工具阅读更多...Git下载及安装教程（简单易懂）一、Git的下载 
1.下载方式 
这里提供Git官网和阿里云镜像下载两种方式&amp;#xff0c;这里博主用的是阿里云镜像&amp;#xff0c;速度快。 
Git官网https://git-scm.com/阿里云镜像https://registry.npmmirror.com/binary.html?pathgit-for-windows/ 
二、Git的安装 
1.下载完成后&amp;a…阅读更多...React.memo和useMemoReact.memo和usememo 
React.memo 
React.memo是一个高阶组件&amp;#xff0c;对组件进行性能优化&amp;#xff0c;主要用于优化函数组件的性能&amp;#xff0c;如果一个组件在相同的props下渲染出相同的结果&amp;#xff0c;但是又不需要在组件更新的时候重新渲染&amp;#xff0c;就可以使用react.…阅读更多...【AI大模型】深入Transformer架构：输入和输出部分的实现与解析目录 
&amp;#x1f354; 输入部分介绍 
&amp;#x1f354; 文本嵌入层的作用 
&amp;#x1f354; 位置编码器的作用 
3.1 位置编码器的代码分析 
3.2 绘制词汇向量中特征的分布曲线 
&amp;#x1f354; 输出部分介绍 
&amp;#x1f354; 线性层的作用 
&amp;#x1f354; softmax层的作用 
3.1 线性层和…阅读更多...React中的函数组件与类组件在React中&amp;#xff0c;有两种不同的组件形式&amp;#xff1a;函数组件和类组件。它们的写法并不相同。 
函数组件 
React的函数组件是一个只接受 props 参数并返回元素的 JavaScript 函数&amp;#xff08;该props与Vue中props一样是只读的&amp;#xff0c;且都是父组件传递给子组件的数据&amp;a…阅读更多...Redis哨兵模式部署（超详细）哨兵模式特点 
主从模式的弊端就是不具备高可用性&amp;#xff0c;当master挂掉以后&amp;#xff0c;Redis将不能再对外提供写入操作&amp;#xff0c;因此sentinel模式应运而生。sentinel中文含义为哨兵&amp;#xff0c;顾名思义&amp;#xff0c;它的作用就是监控redis集群的运行状况&amp;#xff0c;此…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:37 +0000</pubDate>
    </item>
    <item>
      <title>未来智慧城市发展的四大引领方向</title>
      <link>https://www.ppmy.cn/news/1540788.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维未来智慧城市发展的四大引领方向news/2025/10/31 22:19:36/随着全球城市化进程的加速和科技创新的不断推动，智慧城市作为未来城市发展的重要方向，将在多个领域引领城市实现可持续、智能、高效的发展。以下是智慧城市引领未来城市发展的四个关键方向：1. 智慧交通：智慧交通是智慧城市建设的核心领域之一。通过大数据分析、物联网技术和人工智能等技术手段，实现交通流量预测、智能信号控制、智慧公交系统等功能，优化道路资源利用，缓解交通拥堵，提高交通运行效率。未来，智慧交通将实现自动驾驶技术的广泛应用，构建更加智能、安全、环保的出行体系。2. 智慧环境：智慧城市还将注重环境保护和可持续发展。借助传感器网络、空气质量监测设备等技术，实现对城市环境污染、垃圾处理、能源消耗等数据的实时监测和管理。智慧环境系统将帮助城市管理者有效应对环境问题，推动城市向绿色、低碳、宜居的方向发展。3. 智慧治理：智慧城市还将强调智慧治理，通过数字化手段提升城市管理效能和服务水平。包括建设智慧政务、智慧医疗、智慧教育等系统，实现信息共享、跨部门协同，提高城市治理的透明度、效率和便利性。未来，智慧城市将建立多元参与、互动式的城市治理模式，实现全民参与社会治理。4. 智慧生活：智慧城市的最终目标是为居民提供更便捷、高品质的生活体验。智慧城市将推动数字化生活方式的普及，涵盖智慧家居、智慧健康、智慧教育等各个领域。通过智能家居设备、在线医疗服务、远程教育等应用，提升居民的生活品质和幸福感，构建更加智慧、舒适的生活环境。总的来说，智慧城市将引领未来城市发展的四个方向：智慧交通、智慧环境、智慧治理和智慧生活。通过科技创新、数据智能的运用，智慧城市将成为未来城市发展的主流趋势，为城市提供更智能、高效、宜居的未来。http://www.ppmy.cn/news/1540788.html相关文章vmware虚拟机linux系统安装一、下载linux镜像安装包 
步骤1---网址地址下载镜像 
地址&amp;#xff1a;Index of /ubuntu-releases/22.04/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror 
步骤2---下载linux版本号 步骤3---查看下载的linuxiso 
linux镜像操作系统 二、vmware新建安装linux操作系统…阅读更多...2024.10.16 软考学习笔记刷题网站&amp;#xff1a; 
软考中级软件设计师在线试题、软考解析及答案-51CTO题库-软考在线做题备考工具阅读更多...Git下载及安装教程（简单易懂）一、Git的下载 
1.下载方式 
这里提供Git官网和阿里云镜像下载两种方式&amp;#xff0c;这里博主用的是阿里云镜像&amp;#xff0c;速度快。 
Git官网https://git-scm.com/阿里云镜像https://registry.npmmirror.com/binary.html?pathgit-for-windows/ 
二、Git的安装 
1.下载完成后&amp;a…阅读更多...React.memo和useMemoReact.memo和usememo 
React.memo 
React.memo是一个高阶组件&amp;#xff0c;对组件进行性能优化&amp;#xff0c;主要用于优化函数组件的性能&amp;#xff0c;如果一个组件在相同的props下渲染出相同的结果&amp;#xff0c;但是又不需要在组件更新的时候重新渲染&amp;#xff0c;就可以使用react.…阅读更多...【AI大模型】深入Transformer架构：输入和输出部分的实现与解析目录 
&amp;#x1f354; 输入部分介绍 
&amp;#x1f354; 文本嵌入层的作用 
&amp;#x1f354; 位置编码器的作用 
3.1 位置编码器的代码分析 
3.2 绘制词汇向量中特征的分布曲线 
&amp;#x1f354; 输出部分介绍 
&amp;#x1f354; 线性层的作用 
&amp;#x1f354; softmax层的作用 
3.1 线性层和…阅读更多...React中的函数组件与类组件在React中&amp;#xff0c;有两种不同的组件形式&amp;#xff1a;函数组件和类组件。它们的写法并不相同。 
函数组件 
React的函数组件是一个只接受 props 参数并返回元素的 JavaScript 函数&amp;#xff08;该props与Vue中props一样是只读的&amp;#xff0c;且都是父组件传递给子组件的数据&amp;a…阅读更多...Redis哨兵模式部署（超详细）哨兵模式特点 
主从模式的弊端就是不具备高可用性&amp;#xff0c;当master挂掉以后&amp;#xff0c;Redis将不能再对外提供写入操作&amp;#xff0c;因此sentinel模式应运而生。sentinel中文含义为哨兵&amp;#xff0c;顾名思义&amp;#xff0c;它的作用就是监控redis集群的运行状况&amp;#xff0c;此…阅读更多...多模态大语言模型（MLLM）-Blip3/xGen-MM论文链接&amp;#xff1a;https://www.arxiv.org/abs/2408.08872 代码链接&amp;#xff1a;https://github.com/salesforce/LAVIS/tree/xgen-mm 
本次解读xGen-MM (BLIP-3): A Family of Open Large Multimodal Models 可以看作是 [1] Blip: Bootstrapping language-image pre-training…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:36 +0000</pubDate>
    </item>
    <item>
      <title>vmware虚拟机linux系统安装</title>
      <link>https://www.ppmy.cn/news/1540787.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维vmware虚拟机linux系统安装news/2025/10/31 22:19:34/一、下载linux镜像安装包步骤1---网址地址下载镜像地址：Index of /ubuntu-releases/22.04/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror步骤2---下载linux版本号步骤3---查看下载的linuxisolinux镜像操作系统二、vmware新建安装linux操作系统步骤1---选择安装向导步骤2---检查是否安装成功步骤3---配置bios系统操作引导步骤4--配置好环境驱动iso镜像勾上启动时连接三、vmware虚拟机安装linux操作系统步骤1---选择ubunt版本安装步骤2---配置安装环境步骤3--- 没有分区安装不了linux操作系统步骤4---想其他方法，创建的时候选择将虚拟磁盘拆分成多个文件http://www.ppmy.cn/news/1540787.html相关文章2024.10.16 软考学习笔记刷题网站&amp;#xff1a; 
软考中级软件设计师在线试题、软考解析及答案-51CTO题库-软考在线做题备考工具阅读更多...Git下载及安装教程（简单易懂）一、Git的下载 
1.下载方式 
这里提供Git官网和阿里云镜像下载两种方式&amp;#xff0c;这里博主用的是阿里云镜像&amp;#xff0c;速度快。 
Git官网https://git-scm.com/阿里云镜像https://registry.npmmirror.com/binary.html?pathgit-for-windows/ 
二、Git的安装 
1.下载完成后&amp;a…阅读更多...React.memo和useMemoReact.memo和usememo 
React.memo 
React.memo是一个高阶组件&amp;#xff0c;对组件进行性能优化&amp;#xff0c;主要用于优化函数组件的性能&amp;#xff0c;如果一个组件在相同的props下渲染出相同的结果&amp;#xff0c;但是又不需要在组件更新的时候重新渲染&amp;#xff0c;就可以使用react.…阅读更多...【AI大模型】深入Transformer架构：输入和输出部分的实现与解析目录 
&amp;#x1f354; 输入部分介绍 
&amp;#x1f354; 文本嵌入层的作用 
&amp;#x1f354; 位置编码器的作用 
3.1 位置编码器的代码分析 
3.2 绘制词汇向量中特征的分布曲线 
&amp;#x1f354; 输出部分介绍 
&amp;#x1f354; 线性层的作用 
&amp;#x1f354; softmax层的作用 
3.1 线性层和…阅读更多...React中的函数组件与类组件在React中&amp;#xff0c;有两种不同的组件形式&amp;#xff1a;函数组件和类组件。它们的写法并不相同。 
函数组件 
React的函数组件是一个只接受 props 参数并返回元素的 JavaScript 函数&amp;#xff08;该props与Vue中props一样是只读的&amp;#xff0c;且都是父组件传递给子组件的数据&amp;a…阅读更多...Redis哨兵模式部署（超详细）哨兵模式特点 
主从模式的弊端就是不具备高可用性&amp;#xff0c;当master挂掉以后&amp;#xff0c;Redis将不能再对外提供写入操作&amp;#xff0c;因此sentinel模式应运而生。sentinel中文含义为哨兵&amp;#xff0c;顾名思义&amp;#xff0c;它的作用就是监控redis集群的运行状况&amp;#xff0c;此…阅读更多...多模态大语言模型（MLLM）-Blip3/xGen-MM论文链接&amp;#xff1a;https://www.arxiv.org/abs/2408.08872 代码链接&amp;#xff1a;https://github.com/salesforce/LAVIS/tree/xgen-mm 
本次解读xGen-MM (BLIP-3): A Family of Open Large Multimodal Models 可以看作是 [1] Blip: Bootstrapping language-image pre-training…阅读更多...ESP32-C3实现非易失变量（Arduino IDE ）1效果 
网页输入数据&amp;#xff0c;串口打印数据。掉电后数据还在 
2源码 
#include &lt;WiFi.h&gt; // 包含WiFi库&amp;#xff0c;用于处理WiFi连接
#include &lt;WebServer.h&gt; // 包含WebServer库&amp;#xff0c;用于创建Web服务器
#include &lt;Preferences.h&gt; // 包含Prefere…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:35 +0000</pubDate>
    </item>
    <item>
      <title>2024.10.16 软考学习笔记</title>
      <link>https://www.ppmy.cn/news/1540786.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维2024.10.16 软考学习笔记news/2025/10/31 22:19:33/刷题网站：软考中级软件设计师在线试题、软考解析及答案-51CTO题库-软考在线做题备考工具http://www.ppmy.cn/news/1540786.html相关文章Git下载及安装教程（简单易懂）一、Git的下载 
1.下载方式 
这里提供Git官网和阿里云镜像下载两种方式&amp;#xff0c;这里博主用的是阿里云镜像&amp;#xff0c;速度快。 
Git官网https://git-scm.com/阿里云镜像https://registry.npmmirror.com/binary.html?pathgit-for-windows/ 
二、Git的安装 
1.下载完成后&amp;a…阅读更多...React.memo和useMemoReact.memo和usememo 
React.memo 
React.memo是一个高阶组件&amp;#xff0c;对组件进行性能优化&amp;#xff0c;主要用于优化函数组件的性能&amp;#xff0c;如果一个组件在相同的props下渲染出相同的结果&amp;#xff0c;但是又不需要在组件更新的时候重新渲染&amp;#xff0c;就可以使用react.…阅读更多...【AI大模型】深入Transformer架构：输入和输出部分的实现与解析目录 
&amp;#x1f354; 输入部分介绍 
&amp;#x1f354; 文本嵌入层的作用 
&amp;#x1f354; 位置编码器的作用 
3.1 位置编码器的代码分析 
3.2 绘制词汇向量中特征的分布曲线 
&amp;#x1f354; 输出部分介绍 
&amp;#x1f354; 线性层的作用 
&amp;#x1f354; softmax层的作用 
3.1 线性层和…阅读更多...React中的函数组件与类组件在React中&amp;#xff0c;有两种不同的组件形式&amp;#xff1a;函数组件和类组件。它们的写法并不相同。 
函数组件 
React的函数组件是一个只接受 props 参数并返回元素的 JavaScript 函数&amp;#xff08;该props与Vue中props一样是只读的&amp;#xff0c;且都是父组件传递给子组件的数据&amp;a…阅读更多...Redis哨兵模式部署（超详细）哨兵模式特点 
主从模式的弊端就是不具备高可用性&amp;#xff0c;当master挂掉以后&amp;#xff0c;Redis将不能再对外提供写入操作&amp;#xff0c;因此sentinel模式应运而生。sentinel中文含义为哨兵&amp;#xff0c;顾名思义&amp;#xff0c;它的作用就是监控redis集群的运行状况&amp;#xff0c;此…阅读更多...多模态大语言模型（MLLM）-Blip3/xGen-MM论文链接&amp;#xff1a;https://www.arxiv.org/abs/2408.08872 代码链接&amp;#xff1a;https://github.com/salesforce/LAVIS/tree/xgen-mm 
本次解读xGen-MM (BLIP-3): A Family of Open Large Multimodal Models 可以看作是 [1] Blip: Bootstrapping language-image pre-training…阅读更多...ESP32-C3实现非易失变量（Arduino IDE ）1效果 
网页输入数据&amp;#xff0c;串口打印数据。掉电后数据还在 
2源码 
#include &lt;WiFi.h&gt; // 包含WiFi库&amp;#xff0c;用于处理WiFi连接
#include &lt;WebServer.h&gt; // 包含WebServer库&amp;#xff0c;用于创建Web服务器
#include &lt;Preferences.h&gt; // 包含Prefere…阅读更多...【java数据结构】栈【java数据结构】栈 一、栈的概念二、 栈的使用三、 栈的模拟实现(数组)构造方法size()empty()push()pop()peek() 四、 栈的模拟实现(链表)构造方法size()empty()push()pop()peek() 五、 栈的例题 此篇博客希望对你有所帮助&amp;#xff08;帮助你了解栈&amp;#xff09;&amp;#xff0c;不…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:34 +0000</pubDate>
    </item>
    <item>
      <title>Git下载及安装教程（简单易懂）</title>
      <link>https://www.ppmy.cn/news/1540785.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Git下载及安装教程（简单易懂）news/2025/10/31 22:19:32/一、Git的下载1.下载方式这里提供Git官网和阿里云镜像下载两种方式，这里博主用的是阿里云镜像，速度快。Git官网https://git-scm.com/阿里云镜像https://registry.npmmirror.com/binary.html?path=git-for-windows/二、Git的安装1.下载完成后，双击运行下载的安装程序，点击"Next"继续2.自定义文件路径，建议别往C盘装，选其余盘，选好之后next3.这里我选择的默认，如果你有需要桌面快捷方式，就勾选第一项标记，next4.next5.接下来几步也都是默认next，最后出现Install，点击安装6.安装完成7.打开命令提示符（Windows）或终端（Mac、Linux），输入"git --version"，如果显示了Git的版本信息，则说明安装成功。http://www.ppmy.cn/news/1540785.html相关文章React.memo和useMemoReact.memo和usememo 
React.memo 
React.memo是一个高阶组件&amp;#xff0c;对组件进行性能优化&amp;#xff0c;主要用于优化函数组件的性能&amp;#xff0c;如果一个组件在相同的props下渲染出相同的结果&amp;#xff0c;但是又不需要在组件更新的时候重新渲染&amp;#xff0c;就可以使用react.…阅读更多...【AI大模型】深入Transformer架构：输入和输出部分的实现与解析目录 
&amp;#x1f354; 输入部分介绍 
&amp;#x1f354; 文本嵌入层的作用 
&amp;#x1f354; 位置编码器的作用 
3.1 位置编码器的代码分析 
3.2 绘制词汇向量中特征的分布曲线 
&amp;#x1f354; 输出部分介绍 
&amp;#x1f354; 线性层的作用 
&amp;#x1f354; softmax层的作用 
3.1 线性层和…阅读更多...React中的函数组件与类组件在React中&amp;#xff0c;有两种不同的组件形式&amp;#xff1a;函数组件和类组件。它们的写法并不相同。 
函数组件 
React的函数组件是一个只接受 props 参数并返回元素的 JavaScript 函数&amp;#xff08;该props与Vue中props一样是只读的&amp;#xff0c;且都是父组件传递给子组件的数据&amp;a…阅读更多...Redis哨兵模式部署（超详细）哨兵模式特点 
主从模式的弊端就是不具备高可用性&amp;#xff0c;当master挂掉以后&amp;#xff0c;Redis将不能再对外提供写入操作&amp;#xff0c;因此sentinel模式应运而生。sentinel中文含义为哨兵&amp;#xff0c;顾名思义&amp;#xff0c;它的作用就是监控redis集群的运行状况&amp;#xff0c;此…阅读更多...多模态大语言模型（MLLM）-Blip3/xGen-MM论文链接&amp;#xff1a;https://www.arxiv.org/abs/2408.08872 代码链接&amp;#xff1a;https://github.com/salesforce/LAVIS/tree/xgen-mm 
本次解读xGen-MM (BLIP-3): A Family of Open Large Multimodal Models 可以看作是 [1] Blip: Bootstrapping language-image pre-training…阅读更多...ESP32-C3实现非易失变量（Arduino IDE ）1效果 
网页输入数据&amp;#xff0c;串口打印数据。掉电后数据还在 
2源码 
#include &lt;WiFi.h&gt; // 包含WiFi库&amp;#xff0c;用于处理WiFi连接
#include &lt;WebServer.h&gt; // 包含WebServer库&amp;#xff0c;用于创建Web服务器
#include &lt;Preferences.h&gt; // 包含Prefere…阅读更多...【java数据结构】栈【java数据结构】栈 一、栈的概念二、 栈的使用三、 栈的模拟实现(数组)构造方法size()empty()push()pop()peek() 四、 栈的模拟实现(链表)构造方法size()empty()push()pop()peek() 五、 栈的例题 此篇博客希望对你有所帮助&amp;#xff08;帮助你了解栈&amp;#xff09;&amp;#xff0c;不…阅读更多...Python爬虫介绍在互联网上&amp;#xff0c;信息就像散落的珍珠&amp;#xff0c;而Python爬虫就是帮你把它们串起来的线。无论你是想要分析市场趋势、研究社交媒体行为&amp;#xff0c;还是简单地收集数据做报告&amp;#xff0c;Python爬虫都能帮你高效完成任务。 
是一种使用Python编程语言编写的自动化脚本&amp;a…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:32 +0000</pubDate>
    </item>
    <item>
      <title>React.memo和useMemo</title>
      <link>https://www.ppmy.cn/news/1540784.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维React.memo和useMemonews/2025/10/31 22:19:31/React.memo和usememoReact.memoReact.memo是一个高阶组件，对组件进行性能优化，主要用于优化函数组件的性能，如果一个组件在相同的props下渲染出相同的结果，但是又不需要在组件更新的时候重新渲染，就可以使用react.memo来对其进行性能优化React.memo能够记忆组件的渲染，让它在prop没有发生变化的时候重用上一次的结果，从而避免不必要的渲染专门用于函数组件constMyComponent=React.memo(functionMyComponent(props){//}constMyComponent=React.memo(props=&gt;{//})在默认情况下，react.memo只会对props进行浅层比较，如果props的结果比较复杂或者包含了不可变的数据结构，需要传入第二个参数，一个比较函数，来定制更新时机。constMycomponent=React.memo(functionMyComponent(props){//},(prev,next)=&gt;{//})React.memo仅检查props变化，如果函数组件中有使用useState，useReducer或者是useContext这些hook的时候，就算props没有发生变化，组件还是会重新渲染，内部组件状态的变化或者是上下文的变化都会导致组件的更新。只有组件更新比较频繁，而且更新不依赖于内部状态或者上下文的时候，使用React.memo比较合适React.memo可能会增加应用的内存使用量，因为需要记忆组件的渲染结果如果组件经常有新的props传入导致经常重新渲染，使用react.memo会导致性能的负担组件渲染很快，或者是更新不频繁，没有必要使用react.memo最好是在遇到性能瓶颈的时候使用这些优化手段useMemouseMemo接受两个参数，分别是一个函数和一个数组，实际上是以来，函数里return函数，数组内存放依赖interfaceChildProps{name:{name:string;color:string};onClick:Function;}constChild=({name,onClick}:ChildProps):JSX.Element=&gt;{console.log('子组件?')return(&lt;&gt;&lt;div style={{color:name.color}}&gt;我是一个子组件，父级传过来的数据：{name.name}&lt;/div&gt;&lt;button onClick={onClick.bind(null,'新的子组件name')}&gt;改变name&lt;/button&gt;&lt;/&gt;);}constChildMemo=memo(Child);constPage=(props)=&gt;{const[count,setCount]=useState(0);const[name,setName]=useState('Child组件');return(&lt;&gt;&lt;button onClick={(e)=&gt;{setCount(count+1)}}&gt;加1&lt;/button&gt;&lt;p&gt;count:{count}&lt;/p&gt;&lt;ChildMemo//使用useMemo，返回一个和原本一样的对象，第二个参数是依赖性，当name发生改变的时候，才产生一个新的对象name={useMemo(()=&gt;({name,color:name.indexOf('name')!==-1?'red':'green'}),[name])}onClick={useCallback((newName:string)=&gt;setName(newName),[])}{/* useCallback((newName: string) =&gt; setName(newName),[]) */}{/* 这里使用了useCallback优化了传递给子组件的函数，只初始化一次这个函数，下次不产生新的函数/&gt;&lt;/&gt;)
}http://www.ppmy.cn/news/1540784.html相关文章【AI大模型】深入Transformer架构：输入和输出部分的实现与解析目录 
&amp;#x1f354; 输入部分介绍 
&amp;#x1f354; 文本嵌入层的作用 
&amp;#x1f354; 位置编码器的作用 
3.1 位置编码器的代码分析 
3.2 绘制词汇向量中特征的分布曲线 
&amp;#x1f354; 输出部分介绍 
&amp;#x1f354; 线性层的作用 
&amp;#x1f354; softmax层的作用 
3.1 线性层和…阅读更多...React中的函数组件与类组件在React中&amp;#xff0c;有两种不同的组件形式&amp;#xff1a;函数组件和类组件。它们的写法并不相同。 
函数组件 
React的函数组件是一个只接受 props 参数并返回元素的 JavaScript 函数&amp;#xff08;该props与Vue中props一样是只读的&amp;#xff0c;且都是父组件传递给子组件的数据&amp;a…阅读更多...Redis哨兵模式部署（超详细）哨兵模式特点 
主从模式的弊端就是不具备高可用性&amp;#xff0c;当master挂掉以后&amp;#xff0c;Redis将不能再对外提供写入操作&amp;#xff0c;因此sentinel模式应运而生。sentinel中文含义为哨兵&amp;#xff0c;顾名思义&amp;#xff0c;它的作用就是监控redis集群的运行状况&amp;#xff0c;此…阅读更多...多模态大语言模型（MLLM）-Blip3/xGen-MM论文链接&amp;#xff1a;https://www.arxiv.org/abs/2408.08872 代码链接&amp;#xff1a;https://github.com/salesforce/LAVIS/tree/xgen-mm 
本次解读xGen-MM (BLIP-3): A Family of Open Large Multimodal Models 可以看作是 [1] Blip: Bootstrapping language-image pre-training…阅读更多...ESP32-C3实现非易失变量（Arduino IDE ）1效果 
网页输入数据&amp;#xff0c;串口打印数据。掉电后数据还在 
2源码 
#include &lt;WiFi.h&gt; // 包含WiFi库&amp;#xff0c;用于处理WiFi连接
#include &lt;WebServer.h&gt; // 包含WebServer库&amp;#xff0c;用于创建Web服务器
#include &lt;Preferences.h&gt; // 包含Prefere…阅读更多...【java数据结构】栈【java数据结构】栈 一、栈的概念二、 栈的使用三、 栈的模拟实现(数组)构造方法size()empty()push()pop()peek() 四、 栈的模拟实现(链表)构造方法size()empty()push()pop()peek() 五、 栈的例题 此篇博客希望对你有所帮助&amp;#xff08;帮助你了解栈&amp;#xff09;&amp;#xff0c;不…阅读更多...Python爬虫介绍在互联网上&amp;#xff0c;信息就像散落的珍珠&amp;#xff0c;而Python爬虫就是帮你把它们串起来的线。无论你是想要分析市场趋势、研究社交媒体行为&amp;#xff0c;还是简单地收集数据做报告&amp;#xff0c;Python爬虫都能帮你高效完成任务。 
是一种使用Python编程语言编写的自动化脚本&amp;a…阅读更多...MarkDown---标题软件下载网址&amp;#xff1a;Typora 官方中文站 
程序员必备软件MarkDown&amp;#xff0c;这个软件能提升自己的文件整理效率&amp;#xff0c;日常用于对接接口等等操作都离不开MarkDown。 
下载软件后&amp;#xff0c;如果需要激活清查看我这篇文章&amp;#xff1a; 
Typora序列号激活_typora激活…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:31 +0000</pubDate>
    </item>
    <item>
      <title>【AI大模型】深入Transformer架构：输入和输出部分的实现与解析</title>
      <link>https://www.ppmy.cn/news/1540783.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【AI大模型】深入Transformer架构：输入和输出部分的实现与解析news/2025/10/31 22:19:30/目录🍔 输入部分介绍🍔 文本嵌入层的作用🍔 位置编码器的作用3.1 位置编码器的代码分析3.2 绘制词汇向量中特征的分布曲线🍔 输出部分介绍🍔 线性层的作用🍔 softmax层的作用3.1 线性层和softmax层的代码分析🍔 小结学习目标🍀 了解文本嵌入层和位置编码的作用.🍀 掌握文本嵌入层和位置编码的实现过程.🍀 了解线性层和softmax的作用.🍀 掌握线性层和softmax的实现过程.🍔 输入部分介绍输入部分包含:源文本嵌入层及其位置编码器目标文本嵌入层及其位置编码器🍔 文本嵌入层的作用无论是源文本嵌入还是目标文本嵌入，都是为了将文本中词汇的数字表示转变为向量表示, 希望在这样的高维空间捕捉词汇间的关系.文本嵌入层的代码分析:# 导入必备的工具包
import torch# 预定义的网络层torch.nn, 工具开发者已经帮助我们开发好的一些常用层, 
# 比如，卷积层, lstm层, embedding层等, 不需要我们再重新造轮子.
import torch.nn as nn# 数学计算工具包
import math# torch中变量封装函数Variable.
from torch.autograd import Variable# 定义Embeddings类来实现文本嵌入层，这里s说明代表两个一模一样的嵌入层, 他们共享参数.
# 该类继承nn.Module, 这样就有标准层的一些功能, 这里我们也可以理解为一种模式, 我们自己实现的所有层都会这样去写.
class Embeddings(nn.Module):def __init__(self, d_model, vocab):"""类的初始化函数, 有两个参数, d_model: 指词嵌入的维度, vocab: 指词表的大小."""# 接着就是使用super的方式指明继承nn.Module的初始化函数, 我们自己实现的所有层都会这样去写.super(Embeddings, self).__init__()# 之后就是调用nn中的预定义层Embedding, 获得一个词嵌入对象self.lutself.lut = nn.Embedding(vocab, d_model)# 最后就是将d_model传入类中self.d_model = d_modeldef forward(self, x):"""可以将其理解为该层的前向传播逻辑，所有层中都会有此函数当传给该类的实例化对象参数时, 自动调用该类函数参数x: 因为Embedding层是首层, 所以代表输入给模型的文本通过词汇映射后的张量"""# 将x传给self.lut并与根号下self.d_model相乘作为结果返回# 让 embeddings vector 在增加 之后的 postion encoing 之前相对大一些的操作，# 主要是为了让position encoding 相对的小，这样会让原来的 embedding vector 中的信息在和 position encoding 的信息相加时不至于丢失掉# 让 embeddings vector 相对大一些return self.lut(x) * math.sqrt(self.d_model)nn.Embedding演示:&gt;&gt;&gt; embedding = nn.Embedding(10, 3)
&gt;&gt;&gt; input = torch.LongTensor([[1,2,4,5],[4,3,2,9]])
&gt;&gt;&gt; embedding(input)
tensor([[[-0.0251, -1.6902,  0.7172],[-0.6431,  0.0748,  0.6969],[ 1.4970,  1.3448, -0.9685],[-0.3677, -2.7265, -0.1685]],[[ 1.4970,  1.3448, -0.9685],[ 0.4362, -0.4004,  0.9400],[-0.6431,  0.0748,  0.6969],[ 0.9124, -2.3616,  1.1151]]])&gt;&gt;&gt; embedding = nn.Embedding(10, 3, padding_idx=0)
&gt;&gt;&gt; input = torch.LongTensor([[0,2,0,5]])
&gt;&gt;&gt; embedding(input)
tensor([[[ 0.0000,  0.0000,  0.0000],[ 0.1535, -2.0309,  0.9315],[ 0.0000,  0.0000,  0.0000],[-0.1655,  0.9897,  0.0635]]])实例化参数:# 词嵌入维度是512维
d_model = 512# 词表大小是1000
vocab = 1000输入参数:# 输入x是一个使用Variable封装的长整型张量, 形状是2 x 4
x = Variable(torch.LongTensor([[100,2,421,508],[491,998,1,221]]))调用:emb = Embeddings(d_model, vocab)
embr = emb(x)
print("embr:", embr)输出效果:embr: Variable containing:
( 0 ,.,.) = 35.9321   3.2582 -17.7301  ...    3.4109  13.8832  39.02728.5410  -3.5790 -12.0460  ...   40.1880  36.6009  34.7141-17.0650  -1.8705 -20.1807  ...  -12.5556 -34.0739  35.653620.6105   4.4314  14.9912  ...   -0.1342  -9.9270  28.6771( 1 ,.,.) = 27.7016  16.7183  46.6900  ...   17.9840  17.2525  -3.97093.0645  -5.5105  10.8802  ...  -13.0069  30.8834 -38.320933.1378 -32.1435  -3.9369  ...   15.6094 -29.7063  40.1361-31.5056   3.3648   1.4726  ...    2.8047  -9.6514 -23.4909
[torch.FloatTensor of size 2x4x512]🍔 位置编码器的作用因为在Transformer的编码器结构中, 并没有针对词汇位置信息的处理，因此需要在Embedding层后加入位置编码器，将词汇位置不同可能会产生不同语义的信息加入到词嵌入张量中, 以弥补位置信息的缺失.3.1 位置编码器的代码分析# 定义位置编码器类, 我们同样把它看做一个层, 因此会继承nn.Module    
class PositionalEncoding(nn.Module):def __init__(self, d_model, dropout, max_len=5000):"""位置编码器类的初始化函数, 共有三个参数, 分别是d_model: 词嵌入维度, dropout: 置0比率, max_len: 每个句子的最大长度"""super(PositionalEncoding, self).__init__()# 实例化nn中预定义的Dropout层, 并将dropout传入其中, 获得对象self.dropoutself.dropout = nn.Dropout(p=dropout)# 初始化一个位置编码矩阵, 它是一个0阵，矩阵的大小是max_len x d_model.pe = torch.zeros(max_len, d_model)# 初始化一个绝对位置矩阵, 在我们这里，词汇的绝对位置就是用它的索引去表示. # 所以我们首先使用arange方法获得一个连续自然数向量，然后再使用unsqueeze方法拓展向量维度使其成为矩阵， # 又因为参数传的是1，代表矩阵拓展的位置，会使向量变成一个max_len x 1 的矩阵， position = torch.arange(0, max_len).unsqueeze(1)# 绝对位置矩阵初始化之后，接下来就是考虑如何将这些位置信息加入到位置编码矩阵中，# 最简单思路就是先将max_len x 1的绝对位置矩阵， 变换成max_len x d_model形状，然后覆盖原来的初始位置编码矩阵即可， # 要做这种矩阵变换，就需要一个1xd_model形状的变换矩阵div_term，我们对这个变换矩阵的要求除了形状外，# 还希望它能够将自然数的绝对位置编码缩放成足够小的数字，有助于在之后的梯度下降过程中更快的收敛.  这样我们就可以开始初始化这个变换矩阵了.# 首先使用arange获得一个自然数矩阵， 但是细心的同学们会发现， 我们这里并没有按照预计的一样初始化一个1xd_model的矩阵， # 而是有了一个跳跃，只初始化了一半即1xd_model/2 的矩阵。 为什么是一半呢，其实这里并不是真正意义上的初始化了一半的矩阵，# 我们可以把它看作是初始化了两次，而每次初始化的变换矩阵会做不同的处理，第一次初始化的变换矩阵分布在正弦波上， 第二次初始化的变换矩阵分布在余弦波上， # 并把这两个矩阵分别填充在位置编码矩阵的偶数和奇数位置上，组成最终的位置编码矩阵.div_term = torch.exp(torch.arange(0, d_model, 2) *-(math.log(10000.0) / d_model))pe[:, 0::2] = torch.sin(position * div_term)pe[:, 1::2] = torch.cos(position * div_term)# 这样我们就得到了位置编码矩阵pe, pe现在还只是一个二维矩阵，要想和embedding的输出（一个三维张量）相加，# 就必须拓展一个维度，所以这里使用unsqueeze拓展维度.pe = pe.unsqueeze(0)# 最后把pe位置编码矩阵注册成模型的buffer，什么是buffer呢，# 我们把它认为是对模型效果有帮助的，但是却不是模型结构中超参数或者参数，不需要随着优化步骤进行更新的增益对象. # 注册之后我们就可以在模型保存后重加载时和模型结构与参数一同被加载.self.register_buffer('pe', pe)def forward(self, x):"""forward函数的参数是x, 表示文本序列的词嵌入表示"""# 在相加之前我们对pe做一些适配工作， 将这个三维张量的第二维也就是句子最大长度的那一维将切片到与输入的x的第二维相同即x.size(1)，# 因为我们默认max_len为5000一般来讲实在太大了，很难有一条句子包含5000个词汇，所以要进行与输入张量的适配. # 最后使用Variable进行封装，使其与x的样式相同，但是它是不需要进行梯度求解的，因此把requires_grad设置成false.x = x + Variable(self.pe[:, :x.size(1)], requires_grad=False)# 最后使用self.dropout对象进行'丢弃'操作, 并返回结果.return self.dropout(x)nn.Dropout演示:&gt;&gt;&gt; m = nn.Dropout(p=0.2)
&gt;&gt;&gt; input = torch.randn(4, 5)
&gt;&gt;&gt; output = m(input)
&gt;&gt;&gt; output
Variable containing:0.0000 -0.5856 -1.4094  0.0000 -1.02902.0591 -1.3400 -1.7247 -0.9885  0.12860.5099  1.3715  0.0000  2.2079 -0.5497
-0.0000 -0.7839 -1.2434 -0.1222  1.2815
[torch.FloatTensor of size 4x5]torch.unsqueeze演示:&gt;&gt;&gt; x = torch.tensor([1, 2, 3, 4])
&gt;&gt;&gt; torch.unsqueeze(x, 0)
tensor([[ 1,  2,  3,  4]])
&gt;&gt;&gt; torch.unsqueeze(x, 1)
tensor([[ 1],[ 2],[ 3],[ 4]])实例化参数:# 词嵌入维度是512维
d_model = 512# 置0比率为0.1
dropout = 0.1# 句子最大长度
max_len=60输入参数:# 输入x是Embedding层的输出的张量, 形状是2 x 4 x 512
x = embrVariable containing:
( 0 ,.,.) = 35.9321   3.2582 -17.7301  ...    3.4109  13.8832  39.02728.5410  -3.5790 -12.0460  ...   40.1880  36.6009  34.7141-17.0650  -1.8705 -20.1807  ...  -12.5556 -34.0739  35.653620.6105   4.4314  14.9912  ...   -0.1342  -9.9270  28.6771( 1 ,.,.) = 27.7016  16.7183  46.6900  ...   17.9840  17.2525  -3.97093.0645  -5.5105  10.8802  ...  -13.0069  30.8834 -38.320933.1378 -32.1435  -3.9369  ...   15.6094 -29.7063  40.1361-31.5056   3.3648   1.4726  ...    2.8047  -9.6514 -23.4909
[torch.FloatTensor of size 2x4x512]调用:pe = PositionalEncoding(d_model, dropout, max_len)
pe_result = pe(x)
print("pe_result:", pe_result)输出效果:pe_result: Variable containing:
( 0 ,.,.) = -19.7050   0.0000   0.0000  ...  -11.7557  -0.0000  23.4553-1.4668 -62.2510  -2.4012  ...   66.5860 -24.4578 -37.74699.8642 -41.6497 -11.4968  ...  -21.1293 -42.0945  50.79430.0000  34.1785 -33.0712  ...   48.5520   3.2540  54.1348( 1 ,.,.) = 7.7598 -21.0359  15.0595  ...  -35.6061  -0.0000   4.1772-38.7230   8.6578  34.2935  ...  -43.3556  26.6052   4.308424.6962  37.3626 -26.9271  ...   49.8989   0.0000  44.9158-28.8435 -48.5963  -0.9892  ...  -52.5447  -4.1475  -3.0450
[torch.FloatTensor of size 2x4x512]3.2 绘制词汇向量中特征的分布曲线import matplotlib.pyplot as plt
import numpy as np# 创建一张15 x 5大小的画布
plt.figure(figsize=(15, 5))# 实例化PositionalEncoding类得到pe对象, 输入参数是20和0
pe = PositionalEncoding(20, 0)# 然后向pe传入被Variable封装的tensor, 这样pe会直接执行forward函数, 
# 且这个tensor里的数值都是0, 被处理后相当于位置编码张量
y = pe(Variable(torch.zeros(1, 100, 20)))# 然后定义画布的横纵坐标, 横坐标到100的长度, 纵坐标是某一个词汇中的某维特征在不同长度下对应的值
# 因为总共有20维之多, 我们这里只查看4，5，6，7维的值.
plt.plot(np.arange(100), y[0, :, 4:8].data.numpy())# 在画布上填写维度提示信息
plt.legend(["dim %d"%p for p in [4,5,6,7]])输出效果:效果分析:每条颜色的曲线代表某一个词汇中的特征在不同位置的含义.保证同一词汇随着所在位置不同它对应位置嵌入向量会发生变化.正弦波和余弦波的值域范围都是1到-1这又很好的控制了嵌入数值的大小, 有助于梯度的快速计算.🍔 输出部分介绍输出部分包含:线性层softmax层🍔 线性层的作用通过对上一步的线性变化得到指定维度的输出, 也就是转换维度的作用.🍔 softmax层的作用使最后一维的向量中的数字缩放到0-1的概率值域内, 并满足他们的和为1.3.1 线性层和softmax层的代码分析# nn.functional工具包装载了网络层中那些只进行计算, 而没有参数的层
import torch.nn.functional as F# 将线性层和softmax计算层一起实现, 因为二者的共同目标是生成最后的结构
# 因此把类的名字叫做Generator, 生成器类
class Generator(nn.Module):def __init__(self, d_model, vocab_size):"""初始化函数的输入参数有两个, d_model代表词嵌入维度, vocab_size代表词表大小."""super(Generator, self).__init__()# 首先就是使用nn中的预定义线性层进行实例化, 得到一个对象self.project等待使用, # 这个线性层的参数有两个, 就是初始化函数传进来的两个参数: d_model, vocab_sizeself.project = nn.Linear(d_model, vocab_size)def forward(self, x):"""前向逻辑函数中输入是上一层的输出张量x"""# 在函数中, 首先使用上一步得到的self.project对x进行线性变化, # 然后使用F中已经实现的log_softmax进行的softmax处理.# 在这里之所以使用log_softmax是因为和我们这个pytorch版本的损失函数实现有关, 在其他版本中将修复.# log_softmax就是对softmax的结果又取了对数, 因为对数函数是单调递增函数, # 因此对最终我们取最大的概率值没有影响. 最后返回结果即可.return F.log_softmax(self.project(x), dim=-1)nn.Linear演示:&gt;&gt;&gt; m = nn.Linear(20, 30)
&gt;&gt;&gt; input = torch.randn(128, 20)
&gt;&gt;&gt; output = m(input)
&gt;&gt;&gt; print(output.size())
torch.Size([128, 30])实例化参数:# 词嵌入维度是512维
d_model = 512# 词表大小是1000
vocab_size = 1000输入参数:# 输入x是上一层网络的输出, 我们使用来自解码器层的输出
x = de_result调用:gen = Generator(d_model, vocab_size)
gen_result = gen(x)
print(gen_result)
print(gen_result.shape)输出效果:tensor([[[-7.8098, -7.5260, -6.9244,  ..., -7.6340, -6.9026, -7.5232],[-6.9093, -7.3295, -7.2972,  ..., -6.6221, -7.2268, -7.0772],[-7.0263, -7.2229, -7.8533,  ..., -6.7307, -6.9294, -7.3042],[-6.5045, -6.0504, -6.6241,  ..., -5.9063, -6.5361, -7.1484]],[[-7.1651, -6.0224, -7.4931,  ..., -7.9565, -8.0460, -6.6490],[-6.3779, -7.6133, -8.3572,  ..., -6.6565, -7.1867, -6.5112],[-6.4914, -6.9289, -6.2634,  ..., -6.2471, -7.5348, -6.8541],[-6.8651, -7.0460, -7.6239,  ..., -7.1411, -6.5496, -7.3749]]],grad_fn=&lt;LogSoftmaxBackward&gt;)
torch.Size([2, 4, 1000])🍔 小结学习了文本嵌入层的作用:无论是源文本嵌入还是目标文本嵌入，都是为了将文本中词汇的数字表示转变为向量表示, 希望在这样的高维空间捕捉词汇间的关系.学习并实现了文本嵌入层的类: Embeddings初始化函数以d_model, 词嵌入维度, 和vocab, 词汇总数为参数, 内部主要使用了nn中的预定层Embedding进行词嵌入.在forward函数中, 将输入x传入到Embedding的实例化对象中, 然后乘以一个根号下d_model进行缩放, 控制数值大小.它的输出是文本嵌入后的结果.学习了位置编码器的作用:因为在Transformer的编码器结构中, 并没有针对词汇位置信息的处理，因此需要在Embedding层后加入位置编码器，将词汇位置不同可能会产生不同语义的信息加入到词嵌入张量中, 以弥补位置信息的缺失.学习并实现了位置编码器的类: PositionalEncoding初始化函数以d_model, dropout, max_len为参数, 分别代表d_model: 词嵌入维度, dropout: 置0比率, max_len: 每个句子的最大长度.forward函数中的输入参数为x, 是Embedding层的输出.最终输出一个加入了位置编码信息的词嵌入张量.实现了绘制词汇向量中特征的分布曲线:保证同一词汇随着所在位置不同它对应位置嵌入向量会发生变化.正弦波和余弦波的值域范围都是1到-1, 这又很好的控制了嵌入数值的大小, 有助于梯度的快速计算.学习了输出部分包含:线性层softmax层线性层的作用:通过对上一步的线性变化得到指定维度的输出, 也就是转换维度的作用.softmax层的作用:使最后一维的向量中的数字缩放到0-1的概率值域内, 并满足他们的和为1.学习并实现了线性层和softmax层的类: Generator初始化函数的输入参数有两个, d_model代表词嵌入维度, vocab_size代表词表大小.forward函数接受上一层的输出.最终获得经过线性层和softmax层处理的结果.💘若能为您的学习之旅添一丝光亮，不胜荣幸💘🐼期待您的宝贵意见，让我们共同进步共同成长🐼http://www.ppmy.cn/news/1540783.html相关文章React中的函数组件与类组件在React中&amp;#xff0c;有两种不同的组件形式&amp;#xff1a;函数组件和类组件。它们的写法并不相同。 
函数组件 
React的函数组件是一个只接受 props 参数并返回元素的 JavaScript 函数&amp;#xff08;该props与Vue中props一样是只读的&amp;#xff0c;且都是父组件传递给子组件的数据&amp;a…阅读更多...Redis哨兵模式部署（超详细）哨兵模式特点 
主从模式的弊端就是不具备高可用性&amp;#xff0c;当master挂掉以后&amp;#xff0c;Redis将不能再对外提供写入操作&amp;#xff0c;因此sentinel模式应运而生。sentinel中文含义为哨兵&amp;#xff0c;顾名思义&amp;#xff0c;它的作用就是监控redis集群的运行状况&amp;#xff0c;此…阅读更多...多模态大语言模型（MLLM）-Blip3/xGen-MM论文链接&amp;#xff1a;https://www.arxiv.org/abs/2408.08872 代码链接&amp;#xff1a;https://github.com/salesforce/LAVIS/tree/xgen-mm 
本次解读xGen-MM (BLIP-3): A Family of Open Large Multimodal Models 可以看作是 [1] Blip: Bootstrapping language-image pre-training…阅读更多...ESP32-C3实现非易失变量（Arduino IDE ）1效果 
网页输入数据&amp;#xff0c;串口打印数据。掉电后数据还在 
2源码 
#include &lt;WiFi.h&gt; // 包含WiFi库&amp;#xff0c;用于处理WiFi连接
#include &lt;WebServer.h&gt; // 包含WebServer库&amp;#xff0c;用于创建Web服务器
#include &lt;Preferences.h&gt; // 包含Prefere…阅读更多...【java数据结构】栈【java数据结构】栈 一、栈的概念二、 栈的使用三、 栈的模拟实现(数组)构造方法size()empty()push()pop()peek() 四、 栈的模拟实现(链表)构造方法size()empty()push()pop()peek() 五、 栈的例题 此篇博客希望对你有所帮助&amp;#xff08;帮助你了解栈&amp;#xff09;&amp;#xff0c;不…阅读更多...Python爬虫介绍在互联网上&amp;#xff0c;信息就像散落的珍珠&amp;#xff0c;而Python爬虫就是帮你把它们串起来的线。无论你是想要分析市场趋势、研究社交媒体行为&amp;#xff0c;还是简单地收集数据做报告&amp;#xff0c;Python爬虫都能帮你高效完成任务。 
是一种使用Python编程语言编写的自动化脚本&amp;a…阅读更多...MarkDown---标题软件下载网址&amp;#xff1a;Typora 官方中文站 
程序员必备软件MarkDown&amp;#xff0c;这个软件能提升自己的文件整理效率&amp;#xff0c;日常用于对接接口等等操作都离不开MarkDown。 
下载软件后&amp;#xff0c;如果需要激活清查看我这篇文章&amp;#xff1a; 
Typora序列号激活_typora激活…阅读更多...视频转文字工具搜集视频转文字工具是一种能够将视频中的音频内容转化为文字的软件或在线服务。这类工具通常支持多种视频格式和语言&amp;#xff0c;适用于不同的场景和需求。以下是一些推荐的视频转文字工具及其特点&amp;#xff1a; 媒关系&amp;#xff1a;这是一款免费的视频转文字工具&amp;#xff0c;支持多种…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:30 +0000</pubDate>
    </item>
    <item>
      <title>React中的函数组件与类组件</title>
      <link>https://www.ppmy.cn/news/1540782.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维React中的函数组件与类组件news/2025/10/31 22:19:29/在React中，有两种不同的组件形式：函数组件和类组件。它们的写法并不相同。函数组件React的函数组件是一个只接受props参数并返回元素的 JavaScript 函数（该props与Vue中props一样是只读的，且都是父组件传递给子组件的数据）。exportfunctionMyComponent(props){// 不同于Vue中的函数组件（有props和ctx两个参数）return&lt;h1&gt;{props.hobby}&lt;/h1&gt;;}函数式组件自身没有任何状态（state）和生命周期方法，只接受其父组件传递的数据（props）。类组件类组件使用class关键字定义，组件名格式必须是大驼峰，且继承于React.component。classMyComponentextendsReact.Component{constructor(props){super(props);// 也可以接受propsthis.state={}// 组件的状态（响应式状态）// 必须为类组件中的方法显示绑定this（法一），否则在经过babel的转化后（严格模式下）函数方法的this指向undefinedthis.[methodName1]=this.[methodName1].bind(this);}[methodName1](){}// 类组件的方法// 箭头函数没有自己的this，因此会使用上层作用域的this[methodName2]=()=&gt;{}[methodName3](){}// render函数中的this默认指向组件实例render(){// 类组件固定方法，返回要渲染的内容（jsx）return(&lt;&gt;// 等同于&lt;Fragment&gt;&lt;/Fragment&gt;,不过Fragment上可以写key&lt;h1&gt;Hello,{this.props.name}&lt;/h1&gt;&lt;button onClick={this.[methodName1]}&gt;点击按钮&lt;/button&gt;{/* 或者在jsx中为类组件中的方法显示绑定this（法一） */}{/* &lt;button onClick={this.[methodName1].bind(this)}&gt;点击按钮&lt;/button&gt; */}&lt;button onClick={this.[methodName2]}&gt;点击按钮&lt;/button&gt;&lt;button onClick={()=&gt;this.[methodName3]()}&gt;点击按钮&lt;/button&gt;&lt;/&gt;);}}因此，函数组件和类组件的主要区别是：函数组件没有任何状态（state）和生命周期方法（因为生命周期方法来源于React.component），且函数组件中不会使用this。不过，函数组件可以在使用React中的Hooks时使用state。http://www.ppmy.cn/news/1540782.html相关文章Redis哨兵模式部署（超详细）哨兵模式特点 
主从模式的弊端就是不具备高可用性&amp;#xff0c;当master挂掉以后&amp;#xff0c;Redis将不能再对外提供写入操作&amp;#xff0c;因此sentinel模式应运而生。sentinel中文含义为哨兵&amp;#xff0c;顾名思义&amp;#xff0c;它的作用就是监控redis集群的运行状况&amp;#xff0c;此…阅读更多...多模态大语言模型（MLLM）-Blip3/xGen-MM论文链接&amp;#xff1a;https://www.arxiv.org/abs/2408.08872 代码链接&amp;#xff1a;https://github.com/salesforce/LAVIS/tree/xgen-mm 
本次解读xGen-MM (BLIP-3): A Family of Open Large Multimodal Models 可以看作是 [1] Blip: Bootstrapping language-image pre-training…阅读更多...ESP32-C3实现非易失变量（Arduino IDE ）1效果 
网页输入数据&amp;#xff0c;串口打印数据。掉电后数据还在 
2源码 
#include &lt;WiFi.h&gt; // 包含WiFi库&amp;#xff0c;用于处理WiFi连接
#include &lt;WebServer.h&gt; // 包含WebServer库&amp;#xff0c;用于创建Web服务器
#include &lt;Preferences.h&gt; // 包含Prefere…阅读更多...【java数据结构】栈【java数据结构】栈 一、栈的概念二、 栈的使用三、 栈的模拟实现(数组)构造方法size()empty()push()pop()peek() 四、 栈的模拟实现(链表)构造方法size()empty()push()pop()peek() 五、 栈的例题 此篇博客希望对你有所帮助&amp;#xff08;帮助你了解栈&amp;#xff09;&amp;#xff0c;不…阅读更多...Python爬虫介绍在互联网上&amp;#xff0c;信息就像散落的珍珠&amp;#xff0c;而Python爬虫就是帮你把它们串起来的线。无论你是想要分析市场趋势、研究社交媒体行为&amp;#xff0c;还是简单地收集数据做报告&amp;#xff0c;Python爬虫都能帮你高效完成任务。 
是一种使用Python编程语言编写的自动化脚本&amp;a…阅读更多...MarkDown---标题软件下载网址&amp;#xff1a;Typora 官方中文站 
程序员必备软件MarkDown&amp;#xff0c;这个软件能提升自己的文件整理效率&amp;#xff0c;日常用于对接接口等等操作都离不开MarkDown。 
下载软件后&amp;#xff0c;如果需要激活清查看我这篇文章&amp;#xff1a; 
Typora序列号激活_typora激活…阅读更多...视频转文字工具搜集视频转文字工具是一种能够将视频中的音频内容转化为文字的软件或在线服务。这类工具通常支持多种视频格式和语言&amp;#xff0c;适用于不同的场景和需求。以下是一些推荐的视频转文字工具及其特点&amp;#xff1a; 媒关系&amp;#xff1a;这是一款免费的视频转文字工具&amp;#xff0c;支持多种…阅读更多...keepalived(高可用)+nginx（负载均衡）+web环境 注意&amp;#xff1a; 
(1) 做高可用负载均衡至少需要四台服务器&amp;#xff1a;两台独立的高可用负载均衡器&amp;#xff0c;两台web服务器做集群 (2) vip&amp;#xff08;虚拟ip&amp;#xff09;不能和物理ip冲突 (3) vip&amp;#xff08;虚拟ip&amp;#xff09;最好设置成和内网ip同一网段&amp;#xf…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:29 +0000</pubDate>
    </item>
    <item>
      <title>Redis哨兵模式部署（超详细）</title>
      <link>https://www.ppmy.cn/news/1540781.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Redis哨兵模式部署（超详细）news/2025/10/31 22:19:27/哨兵模式特点主从模式的弊端就是不具备高可用性，当master挂掉以后，Redis将不能再对外提供写入操作，因此sentinel模式应运而生。sentinel中文含义为哨兵，顾名思义，它的作用就是监控redis集群的运行状况，此模式具有如下一些特点：sentinel模式是建立在主从模式的基础上，如果只有一个Redis节点，sentinel就没有任何意义；当master挂了以后，sentinel会在slave中选择一个做为master，并修改它们的配置文件，其他slave的配置文件也会被修改，比如slaveof属性会指向新的master；当master重新启动后，它将不再是master，而是做为slave接收新的master的同步数据；sentinel因为也是一个进程，所以有挂掉的可能，所以sentinel也会启动多个形成一个sentinel集群；多sentinel配置的时候，sentinel之间也会自动监控；当主从模式配置密码时，sentinel也会同步将配置信息修改到配置文件中；一个sentinel或sentinel集群可以管理多个主从Redis，多sentinel也可以监控同一个redis；sentinel最好不要和Redis部署在同一台机器，不然Redis的服务器挂了以后，sentinel也可能会挂掉。哨兵工作原理1.哨兵节点通过发送命令来监控Redis服务器的状态。它会定期向主节点和从节点发送PING命令，检查节点是否存活。2.当主节点发生故障或不可用时，哨兵节点会进行故障检测。它会询问其他哨兵节点是否已经发现了主节点的故障，并尝试达成共识。3.如果多数哨兵节点都认为主节点故障，那么它们会选举新的主节点。选举的原则是选择一个具有最高优先级的从节点，如果没有从节点则选择一个具有最高优先级的哨兵节点。4.一旦新的主节点被选出，哨兵节点会更新所有其他从节点的配置信息，使它们成为新主节点的从节点。5.当故障的主节点恢复时，哨兵节点会将其重新加入到主从复制环境中，并将其设置为新主节点的从节点。6.通过哨兵模式，Redis可以实现高可用性和故障恢复。当主节点发生故障时，哨兵节点可以自动切换为新的主节点，使系统可以在故障期间继续提供服务。同时，哨兵节点可以监控并修复其他节点的故障，确保整个Redis集群处于可用状态。服务器准备示例：hostsIP 服务midware-171（主）192.168.3.171 redis、sentinelmidware-172（从）192.168.3.172 redis、sentinelmidware-173（从）192.168.3.173 redis、sentinel关闭所有服务器防火墙:$ systemctl stop firewalld.service修改所有服务器的hosts:$vim/etc/hosts添加以下内容:192.168.3.171 midware-171192.168.3.172 midware-172192.168.3.173 midware-173资源准备:redis 下载地址：http://download.redis.io/releases/部署前须知为了实现高可用的部署，您至少需要三个 Sentinel 实例。这三个 Sentinel 实例应该放置在被认为会独立故障的计算机或虚拟机上。例如，不同的物理服务器或在不同可用区执行的虚拟机。Sentinel + Redis 分布式系统不保证在故障期间保留已确认的写入，因为 Redis 使用异步复制。您的客户端需要支持 Sentinel。流行的客户端库支持 Sentinel，但并非所有库都支持。在搭建生产环境投入生产之前最好测试高可用性是否工作，如果未经测试，您可能有配置错误，上线后为时已晚时（例如凌晨3点主服务器停止工作）才会显现出来。Redis 主从搭建Redis 安装在所有服务器执行注意： 新版本redis自带哨兵，不需要单独安装$cd/usr/local/src
$wgethttp://download.redis.io/releases/redis-6.2.14.tar.gz
$tar-xvf redis-6.2.14.tar.gz
$cdredis-7.2.14/
$make$makePREFIX=/usr/local/redis-6.2.14install修改linux内核参数修改Linux 内存分配的策略:# 临时生效sysctl  -w  vm.overcommit_memory=1# 永久生效echo'vm.overcommit_memory=1'&gt;&gt;/etc/sysctl.conf&amp;&amp;sysctl -p\可选值：0，1，2。\0，：表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。\1：表示内核允许分配所有的物理内存，而不管当前的内存状态如何。\2： 表示内核允许分配超过所有物理内存和交换空间总和的内存。修改Linux内核对于TCP连接队列的长度上限值:echo' net.core.somaxconn =1024'&gt;&gt;/etc/sysctl.conf&amp;&amp;sysctl –pRedis 主配置dir"/usr/local/redis-6.2.14/data"logfile"/usr/local/redis-6.2.14/logs/redis.log"masterauth"123456"requirepass"123456"protected-mode no
port6379tcp-backlog511timeout0maxclients20000tcp-keepalive300daemonizeyesmaxmemory 8gb#推荐设为物理内存一半maxmemory-policy allkeys-lru
pidfile"/var/run/redis_6379.pid"loglevel notice
databases16#save &lt;seconds&gt; &lt;changes&gt;save9001save30010save6010000rdbcompressionyesrdbchecksumyesdbfilename"dump.rdb"replica-read-onlyyesreplica-priority100appendonlyyesappendfilename"appendonly.aof"appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage100auto-aof-rewrite-min-size 64mb
slowlog-log-slower-than10000slowlog-max-len1024Redis 从配置1.masterauth: 以认证的方式连接到master。 如果master中使用了“密码保护”，slave必须交付正确的授权密码，才能连接成功。“requirepass”配置项指定了当前server的密码。此配置项中值需要和master机器的“requirepass”保持一致。2.slaveof : 将当前服务器转变为指定服务器的从属服务器(slave server)。dir"/usr/local/redis-6.2.14/data"logfile"/usr/local/redis-6.2.14/logs/redis.log"masterauth"123456"requirepass"123456"protected-mode no
port6379tcp-backlog511timeout0maxclients10000tcp-keepalive300daemonizeyesmaxmemory 8gb
maxmemory-policy allkeys-lru
pidfile"/var/run/redis_6379.pid"loglevel notice
databases16replicaof192.168.3.1716379#save &lt;seconds&gt; &lt;changes&gt;save9001save30010save6010000rdbcompressionyesrdbchecksumyesdbfilename"dump.rdb"replica-read-onlyyesreplica-priority99appendonlyyesappendfilename"appendonly.aof"appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage100auto-aof-rewrite-min-size 64mb
slowlog-log-slower-than10000slowlog-max-len1024Redis 启动依次启动所有服务器上的redis 服务$ /usr/local/redis-6.2.14/bin/redis-server /usr/local/redis-6.2.14/redis.conf查看主从Redis 状态启动所有服务器后，查看所有redis 节点状态主服务器：从服务：哨兵配置在redis的安装目录下有个文件sentinel.conf，这就是哨兵的配置文件。它和redis.conf文件在同级目录创建sentinel工作目录:mkdir/usr/local/redis-6.2.14/sentinelsentinel.conf配置$vim/usr/local/redis-7.2.14/sentinel.conf
sentinel.conf 信息
protected-mode no
port26379daemonizeyespidfile"/var/run/redis-sentinel.pid"loglevel notice
logfile"/usr/local/redis-6.2.14/logs/sentinel.log"dir"/usr/local/redis-6.2.14/sentinel"sentinel monitor mymaster192.168.3.17163792sentinel auth-pass mymaster123456sentinel failover-timeout mymaster30000sentinel resolve-hostnamesyessentinel announce-hostnamesyes启动哨兵服务/usr/local/redis-6.2.14/bin/redis-sentinel /usr/local/redis-6.2.14/sentinel.conf查看启动状态注： 一主两从三哨兵，证明集群正常主从切换测试在主节点上停止服务，模拟故障，主从发生切换查看sentinel日志如下：tail-f /usr/local/redis-6.2.14/logs/sentinel.log查看主节点 已发生切换恢复原主服务并查看主从状态查看sentinel状态注： 一主两从三哨兵，证明集群正常。并在故障时主从能正常切换http://www.ppmy.cn/news/1540781.html相关文章多模态大语言模型（MLLM）-Blip3/xGen-MM论文链接&amp;#xff1a;https://www.arxiv.org/abs/2408.08872 代码链接&amp;#xff1a;https://github.com/salesforce/LAVIS/tree/xgen-mm 
本次解读xGen-MM (BLIP-3): A Family of Open Large Multimodal Models 可以看作是 [1] Blip: Bootstrapping language-image pre-training…阅读更多...ESP32-C3实现非易失变量（Arduino IDE ）1效果 
网页输入数据&amp;#xff0c;串口打印数据。掉电后数据还在 
2源码 
#include &lt;WiFi.h&gt; // 包含WiFi库&amp;#xff0c;用于处理WiFi连接
#include &lt;WebServer.h&gt; // 包含WebServer库&amp;#xff0c;用于创建Web服务器
#include &lt;Preferences.h&gt; // 包含Prefere…阅读更多...【java数据结构】栈【java数据结构】栈 一、栈的概念二、 栈的使用三、 栈的模拟实现(数组)构造方法size()empty()push()pop()peek() 四、 栈的模拟实现(链表)构造方法size()empty()push()pop()peek() 五、 栈的例题 此篇博客希望对你有所帮助&amp;#xff08;帮助你了解栈&amp;#xff09;&amp;#xff0c;不…阅读更多...Python爬虫介绍在互联网上&amp;#xff0c;信息就像散落的珍珠&amp;#xff0c;而Python爬虫就是帮你把它们串起来的线。无论你是想要分析市场趋势、研究社交媒体行为&amp;#xff0c;还是简单地收集数据做报告&amp;#xff0c;Python爬虫都能帮你高效完成任务。 
是一种使用Python编程语言编写的自动化脚本&amp;a…阅读更多...MarkDown---标题软件下载网址&amp;#xff1a;Typora 官方中文站 
程序员必备软件MarkDown&amp;#xff0c;这个软件能提升自己的文件整理效率&amp;#xff0c;日常用于对接接口等等操作都离不开MarkDown。 
下载软件后&amp;#xff0c;如果需要激活清查看我这篇文章&amp;#xff1a; 
Typora序列号激活_typora激活…阅读更多...视频转文字工具搜集视频转文字工具是一种能够将视频中的音频内容转化为文字的软件或在线服务。这类工具通常支持多种视频格式和语言&amp;#xff0c;适用于不同的场景和需求。以下是一些推荐的视频转文字工具及其特点&amp;#xff1a; 媒关系&amp;#xff1a;这是一款免费的视频转文字工具&amp;#xff0c;支持多种…阅读更多...keepalived(高可用)+nginx（负载均衡）+web环境 注意&amp;#xff1a; 
(1) 做高可用负载均衡至少需要四台服务器&amp;#xff1a;两台独立的高可用负载均衡器&amp;#xff0c;两台web服务器做集群 (2) vip&amp;#xff08;虚拟ip&amp;#xff09;不能和物理ip冲突 (3) vip&amp;#xff08;虚拟ip&amp;#xff09;最好设置成和内网ip同一网段&amp;#xf…阅读更多...在知网上快速引用相关文献1.在百度界面中搜索“知网”&amp;#xff08;或在地址栏中输入知网的链接“https://www.cnki.net/”&amp;#xff09; 2.点开搜索到的知网&amp;#xff0c;点开后出现以下界面。 3.在主题中输入关键字&amp;#xff0c;如“JAVA”&amp;#xff0c;之后点击搜索。出现下述界面 4.在该界面中点击 
这个…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:28 +0000</pubDate>
    </item>
    <item>
      <title>多模态大语言模型（MLLM）-Blip3/xGen-MM</title>
      <link>https://www.ppmy.cn/news/1540780.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维多模态大语言模型（MLLM）-Blip3/xGen-MMnews/2025/10/31 22:19:26/论文链接：https://www.arxiv.org/abs/2408.08872代码链接：https://github.com/salesforce/LAVIS/tree/xgen-mm本次解读xGen-MM (BLIP-3): A Family of Open Large Multimodal Models可以看作是[1] Blip: Bootstrapping language-image pre-training for unified vision-language understanding and generation[2] BLIP-2: Bootstrapping Language-Image Pre-training with Frozen Image Encoders and Large Language Models的后继版本前言没看到Blip和Blip2的一作Junnan Li，不知道为啥不参与Blip3整体pipeline服从工业界的一贯做法，加数据，加显卡，模型、训练方式简单，疯狂scale up创新点开源模型在模型权重、训练数据、训练方法上做的不好Blip2用的数据不够多、质量不够高；Blip2用的Q-Former、训练Loss不方便scale up；Blip2仅支持单图输入，不支持多图输入Blip3收集超大规模数据集，并且用相对简单的训练方式，实现多图、文本的交互。开放两个数据集：BLIP3-OCR-200M（大规模OCR标注数据集）,BLIP3-GROUNDING-50M（大规模visual grounding数据集）具体细节模型结构整体结构非常简单图像经过ViT得到patch embedding，再经过token sampler得到vision token。（先经过Token Sampler，得到视觉embedding，而后经过VL connector，得到vision token）文本通过tokenizer获得text token文本、图像输入均送到LLM中，并且仅对本文加next prediction loss注意：ViT参数冻结，其他参数可训练注意：支持图像和文本交替输入，支持多图，任意分辨率图像ViT：所用模型有DFN、SigLIP，在不同任务上，效果不同，如下：LLM：所用模型为phi3-mini模型结构代码见https://github.com/salesforce/LAVIS/blob/xgen-mm/open_flamingo/src/factory.pytoken Sampler代码见https://github.com/salesforce/LAVIS/blob/xgen-mm/open_flamingo/src/vlm.pyVL connector代码见https://github.com/salesforce/LAVIS/blob/xgen-mm/open_flamingo/src/helpers.pyToken Sampler详见博客https://blog.csdn.net/weixin_40779727/article/details/142019977，就不赘述了VL Connector整体结构如下：class PerceiverAttention(nn.Module):def __init__(self, *, dim, dim_head=64, heads=8):super().__init__()self.scale = dim_head**-0.5self.heads = headsinner_dim = dim_head * headsself.norm_media = nn.LayerNorm(dim)self.norm_latents = nn.LayerNorm(dim)self.to_q = nn.Linear(dim, inner_dim, bias=False)self.to_kv = nn.Linear(dim, inner_dim * 2, bias=False)self.to_out = nn.Linear(inner_dim, dim, bias=False)def forward(self, x, latents, vision_attn_masks=None):"""Args:x (torch.Tensor): image featuresshape (b, T, n1, D)latent (torch.Tensor): latent featuresshape (b, T, n2, D)"""x = self.norm_media(x)latents = self.norm_latents(latents)h = self.headsq = self.to_q(latents)kv_input = torch.cat((x, latents), dim=-2) # TODO: Change the shape of vision attention mask according to this.if vision_attn_masks is not None:vision_attn_masks = torch.cat((vision_attn_masks, torch.ones((latents.shape[0], latents.shape[-2]), dtype=latents.dtype, device=latents.device)),dim=-1)k, v = self.to_kv(kv_input).chunk(2, dim=-1)q, k, v = rearrange_many((q, k, v), "b t n (h d) -&gt; b h t n d", h=h)q = q * self.scale# attentionsim = einsum("... i d, ... j d  -&gt; ... i j", q, k)# Apply vision attention mask here.# Reference: https://pytorch.org/docs/stable/generated/torch.nn.functional.scaled_dot_product_attention.html#torch.nn.functional.scaled_dot_product_attentionif vision_attn_masks is not None:attn_bias = torch.zeros((q.size(0), 1, 1, q.size(-2), k.size(-2)), dtype=q.dtype, device=q.device)vision_attn_masks = repeat(vision_attn_masks, 'b n -&gt; b 1 1 l n', l=q.size(-2))attn_bias.masked_fill_(vision_attn_masks.logical_not(), float("-inf"))sim += attn_biassim = sim - sim.amax(dim=-1, keepdim=True).detach()attn = sim.softmax(dim=-1)out = einsum("... i j, ... j d -&gt; ... i d", attn, v)out = rearrange(out, "b h t n d -&gt; b t n (h d)", h=h)return self.to_out(out)class PerceiverResampler(VisionTokenizer):def __init__(self,*,dim,dim_inner=None,depth=6,dim_head=96,heads=16,num_latents=128,max_num_media=None,max_num_frames=None,ff_mult=4,):"""Perceiver module which takes in image features and outputs image tokens.Args:dim (int): dimension of the incoming image featuresdim_inner (int, optional): final dimension to project the incoming image features to;also the final dimension of the outputted features. If None, no projection is used, and dim_inner = dim.depth (int, optional): number of layers. Defaults to 6.dim_head (int, optional): dimension of each head. Defaults to 64.heads (int, optional): number of heads. Defaults to 8.num_latents (int, optional): number of latent tokens to use in the Perceiver;also corresponds to number of tokens per sequence to output. Defaults to 64.max_num_media (int, optional): maximum number of media per sequence to input into the Perceiverand keep positional embeddings for. If None, no positional embeddings are used.max_num_frames (int, optional): maximum number of frames to input into the Perceiverand keep positional embeddings for. If None, no positional embeddings are used.ff_mult (int, optional): dimension multiplier for the feedforward network. Defaults to 4."""if dim_inner is not None:projection = nn.Linear(dim, dim_inner)else:projection = Nonedim_inner = dimsuper().__init__(dim_media=dim, num_tokens_per_media=num_latents)self.projection = projectionself.latents = nn.Parameter(torch.randn(num_latents, dim))# positional embeddingsself.frame_embs = (nn.Parameter(torch.randn(max_num_frames, dim))if exists(max_num_frames)else None)self.media_time_embs = (nn.Parameter(torch.randn(max_num_media, 1, dim))if exists(max_num_media)else None)self.layers = nn.ModuleList([])for _ in range(depth):self.layers.append(nn.ModuleList([PerceiverAttention(dim=dim, dim_head=dim_head, heads=heads),FeedForward(dim=dim, mult=ff_mult),]))self.norm = nn.LayerNorm(dim)def forward(self, x, vision_attn_masks):"""Args:x (torch.Tensor): image featuresshape (b, T, F, v, D)vision_attn_masks (torch.Tensor): attention masks for padded visiont tokens (i.e., x)shape (b, v)Returns:shape (b, T, n, D) where n is self.num_latents"""b, T, F, v = x.shape[:4]# frame and media time embeddingsif exists(self.frame_embs):frame_embs = repeat(self.frame_embs[:F], "F d -&gt; b T F v d", b=b, T=T, v=v)x = x + frame_embsx = rearrange(x, "b T F v d -&gt; b T (F v) d")  # flatten the frame and spatial dimensionsif exists(self.media_time_embs):x = x + self.media_time_embs[:T]# blockslatents = self.latentslatents = repeat(latents, "n d -&gt; b T n d", b=b, T=T)for attn, ff in self.layers:latents = attn(x, latents, vision_attn_masks) + latentslatents = ff(latents) + latentsif exists(self.projection):return self.projection(self.norm(latents)) else:return self.norm(latents)训练及数据预训练训练数据：用了0.1T token的多模态数据训练，和一些知名的MLLM相比，例如Qwen2VL 0.6T，还是不太够训练方式：针对文本的next token prediction方式训练，图像输入为384x384有监督微调（SFT）训练数据：从不同领域（multi-modal conversation、 image captioning、chart/document understanding、science、math），收集一堆开源数据。从中采样1百万，包括图文指令+文本指令数据。训练1epoch训练方式：针对文本的next token prediction方式训练交互式多图有监督微调（Interleaved Multi-Image Supervised Fine-tuning）训练数据：首先，收集多图指令微调数据（MANTIS和Mmdu）。为避免模型过拟合到多图数据，选择上一阶段的单图指令微调数据子集，与收集的多图指令微调数据合并，构成新的训练集合。训练方式：针对文本的next token prediction方式训练后训练（Post-training）DPO提升Truthfulnesspart1训练数据：利用开源的VLFeedback数据集。VLFeedback数据集构造方式：输入指令，让多个VLM模型做生成，随后GPT4-v从helpfulness, visual faithfulness, ethics三个维度对生成结果打分。分值高的输出作为preferred responses，分值低的输出作为dispreferred responses。BLIP3进一步过滤掉一部分样本，最终得到62.6K数据。训练方式：DPO为训练目标，用LoRA微调LLM 2.5%参数，总共训练1 epochpart2训练数据：根据该工作，生成一组额外responses。该responses能够捕捉LLM的内在幻觉，作为额外dispreferred responses，采用DPO训练。训练方式：同part1，再次训练1 epochSafety微调（Safety Fine-tuning）提升Harmlessness训练数据：用2k的VLGua数据集+随机5K SFT数据集。VLGuard包括两个部分：这段话可以翻译为：(1) 恶心图配上安全指示及安全回应(2) 安全图配上安全回应及不安全回应训练方式：用上述7k数据，训练目标为next token prediction，用LoRA微调LLM 2.5%参数，总共训练1 epoch实验效果预训练对比类似于预训练任务的VQA、Captioning任务，效果在使用小参数量LLM的MLLM里，效果不错。有监督微调（SFT）交互式多图有监督微调（Interleaved Multi-Image Supervised Fine-tuning）后训练（Post-training）消融实验预训练预训练数据量预训练数据配比视觉backbone有监督微调（SFT）视觉Token Sampler对比base resolution：直接把图片resize到目标大小anyres-fixed-sampling (ntok=128)：把所有图像patch的表征concat起来，经过perceiver resampler，得到128个vision tokenanyres-fixed-sampling (ntok=256)：把所有图像patch的表征concat起来，经过perceiver resampler，得到256个vision tokenanyres-patch-sampling：本文采用的方法Instruction-Aware Vision Token Sampling.XGen-MM：输入图像，获取vision tokenXGen-MM（instruction-aware）：同时输入图像+指令，获取vision tokenQuality of the Text-only Instruction Data.仅利用文本指令数据，训练SFT模型，对比效果https://blog.csdn.net/weixin_40779727/article/details/142019977http://www.ppmy.cn/news/1540780.html相关文章ESP32-C3实现非易失变量（Arduino IDE ）1效果 
网页输入数据&amp;#xff0c;串口打印数据。掉电后数据还在 
2源码 
#include &lt;WiFi.h&gt; // 包含WiFi库&amp;#xff0c;用于处理WiFi连接
#include &lt;WebServer.h&gt; // 包含WebServer库&amp;#xff0c;用于创建Web服务器
#include &lt;Preferences.h&gt; // 包含Prefere…阅读更多...【java数据结构】栈【java数据结构】栈 一、栈的概念二、 栈的使用三、 栈的模拟实现(数组)构造方法size()empty()push()pop()peek() 四、 栈的模拟实现(链表)构造方法size()empty()push()pop()peek() 五、 栈的例题 此篇博客希望对你有所帮助&amp;#xff08;帮助你了解栈&amp;#xff09;&amp;#xff0c;不…阅读更多...Python爬虫介绍在互联网上&amp;#xff0c;信息就像散落的珍珠&amp;#xff0c;而Python爬虫就是帮你把它们串起来的线。无论你是想要分析市场趋势、研究社交媒体行为&amp;#xff0c;还是简单地收集数据做报告&amp;#xff0c;Python爬虫都能帮你高效完成任务。 
是一种使用Python编程语言编写的自动化脚本&amp;a…阅读更多...MarkDown---标题软件下载网址&amp;#xff1a;Typora 官方中文站 
程序员必备软件MarkDown&amp;#xff0c;这个软件能提升自己的文件整理效率&amp;#xff0c;日常用于对接接口等等操作都离不开MarkDown。 
下载软件后&amp;#xff0c;如果需要激活清查看我这篇文章&amp;#xff1a; 
Typora序列号激活_typora激活…阅读更多...视频转文字工具搜集视频转文字工具是一种能够将视频中的音频内容转化为文字的软件或在线服务。这类工具通常支持多种视频格式和语言&amp;#xff0c;适用于不同的场景和需求。以下是一些推荐的视频转文字工具及其特点&amp;#xff1a; 媒关系&amp;#xff1a;这是一款免费的视频转文字工具&amp;#xff0c;支持多种…阅读更多...keepalived(高可用)+nginx（负载均衡）+web环境 注意&amp;#xff1a; 
(1) 做高可用负载均衡至少需要四台服务器&amp;#xff1a;两台独立的高可用负载均衡器&amp;#xff0c;两台web服务器做集群 (2) vip&amp;#xff08;虚拟ip&amp;#xff09;不能和物理ip冲突 (3) vip&amp;#xff08;虚拟ip&amp;#xff09;最好设置成和内网ip同一网段&amp;#xf…阅读更多...在知网上快速引用相关文献1.在百度界面中搜索“知网”&amp;#xff08;或在地址栏中输入知网的链接“https://www.cnki.net/”&amp;#xff09; 2.点开搜索到的知网&amp;#xff0c;点开后出现以下界面。 3.在主题中输入关键字&amp;#xff0c;如“JAVA”&amp;#xff0c;之后点击搜索。出现下述界面 4.在该界面中点击 
这个…阅读更多...OPC Router快速打通设备层与influxDB数据通讯随着时代演化&amp;#xff0c;数据量呈几何倍数增加的情况下出现了时序数据库。时序数据库是基于时间进行存储的数据库&amp;#xff0c;每一条数据中都有一个时间戳&amp;#xff0c;这种数据库特别适合存储那些随着时间变化的数据&amp;#xff0c;通过一些工具处理后&amp;#xff0c;能够分析出数据…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:26 +0000</pubDate>
    </item>
    <item>
      <title>ESP32-C3实现非易失变量（Arduino IDE ）</title>
      <link>https://www.ppmy.cn/news/1540779.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维ESP32-C3实现非易失变量（Arduino IDE ）news/2025/10/31 22:19:25/1效果网页输入数据，串口打印数据。掉电后数据还在2源码#include &lt;WiFi.h&gt; // 包含WiFi库，用于处理WiFi连接
#include &lt;WebServer.h&gt; // 包含WebServer库，用于创建Web服务器
#include &lt;Preferences.h&gt; // 包含Preferences库，用于在非易失性存储中保存键值对// 定义接入点名称
const char* ssid = "ESP32C3";
WebServer server(80); // 创建Web服务器实例，监听80端口Preferences preferences; // 创建Preferences实例，用于存储数据// 处理根目录请求的函数
void handleRoot() {String html = "&lt;html&gt;&lt;body&gt;" // 构建HTML响应"&lt;form action=\"/save\" method=\"POST\"&gt;" // 表单提交到/save路由"Enter data: &lt;input type=\"text\" name=\"data\"&gt;" // 输入框，用户可以输入数据"&lt;input type=\"submit\" value=\"Save\"&gt;" // 提交按钮"&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;";server.send(200, "text/html", html); // 发送HTTP响应，状态码200表示成功，内容类型为text/html
}// 处理保存数据的函数
void handleSave() {if (server.hasArg("data")) { // 检查是否有名为"data"的参数String data = server.arg("data"); // 获取名为"data"的参数值// 将数据保存到Preferencespreferences.putString("myDataKey", data); // 使用"myDataKey"作为键保存数据server.send(200, "text/plain", "Data saved!"); // 发送成功保存的响应} else {server.send(400, "text/plain", "Bad Request"); // 如果没有"data"参数，发送400错误响应}
}// 初始化函数
void setup() {Serial.begin(115200); // 初始化串口通信，波特率为115200WiFi.softAP(ssid); // 创建一个名为ssid的接入点server.begin(); // 启动Web服务器// 初始化Preferences，创建或打开名为"storage"的命名空间，不允许在文件系统中创建新文件preferences.begin("storage", false);// 设置Web服务器路由server.on("/", handleRoot); // 当访问根目录时，调用handleRoot函数server.on("/save", HTTP_POST, handleSave); // 当通过POST方法访问/save时，调用handleSave函数
}// 主循环函数
void loop() {server.handleClient(); // 处理客户端请求// 读取Preferences中的数据并通过串口输出String data = preferences.getString("myDataKey", "No data saved"); // 读取键为"myDataKey"的数据，如果不存在则返回"No data saved"Serial.println("Data from Preferences: " + data); // 输出数据到串口delay(1000); // 等待1000毫秒（1秒），每秒输出一次
}3重点解释区3-1&lt;Preferences.h&gt;是 Arduino ESP32 环境中的一个库，用于在 ESP32 的非易失性存储器（NVS）上保存数据。这个库是 Arduino EEPROM 库的替代品，特别适用于存储多个小值，而不是几个大值。如果需要存储大量数据，可以考虑使用文件系统库，如 LitteFS5。基本功能和使用方法数据存储方式：Preferences库在 NVS 中以“命名空间（namespace）”的形式存储数据，每个命名空间包含一系列的“键值对（key-value pairs）”。键名（key）是数据项的名称，值（value）是该项数据的具体值。命名空间和键名都是字符串，且长度不超过15个字符。多个命名空间是允许的，且每个命名空间内的键名必须是唯一的5。支持的数据类型：Preferences直接支持多种数据类型，包括布尔型、字符型、整型、长整型、浮点型、双精度型和字符串等5。基本操作：使用Preferences库的基本步骤包括创建或打开命名空间、存储和检索数据、删除键值对、确定键值对的数据类型等。存储数据时，需要先打开命名空间，然后使用键名存储数据，最后关闭命名空间。检索数据时，同样需要先打开命名空间，然后使用键名获取数据，最后关闭命名空间5。#include &lt;Preferences.h&gt;void setup() {Serial.begin(115200);Serial.println();delay(2000);Preferences prefs; // 声明Preferences对象prefs.begin("mynamespace"); // 打开命名空间mynamespaceuint32_t count = prefs.getUInt("count", 0); // 获取当前命名空间中的键名为"count"的值count++; // 累加计数Serial.printf("这是系统第 %u 次启动\n", count);prefs.putUInt("count", count); // 将数据保存到当前命名空间的"count"键中prefs.end(); // 关闭当前命名空间
}void loop() {// ...
}布尔型（bool）存储布尔值：Preferences prefs;
prefs.begin("mynamespace");
prefs.putBool("myBool", true); // 存储布尔值 true
prefs.end();获取布尔值：Preferences prefs;
prefs.begin("mynamespace");
bool myBool = prefs.getBool("myBool", false); // 获取布尔值，如果不存在则返回默认值 false
prefs.end();字符型（int8_t）存储字符型值：Preferences prefs;
prefs.begin("mynamespace");
prefs.putChar("myChar", 'A'); // 存储字符 'A'
prefs.end();获取字符型值：Preferences prefs;
prefs.begin("mynamespace");
char myChar = prefs.getChar("myChar", 'Z'); // 获取字符，如果不存在则返回默认值 'Z'
prefs.end();整型（int32_t）存储整型值：Preferences prefs;
prefs.begin("mynamespace");
prefs.putInt("myInt", 123); // 存储整型值 123
prefs.end();获取整型值：Preferences prefs;
prefs.begin("mynamespace");
int32_t myInt = prefs.getInt("myInt", -1); // 获取整型值，如果不存在则返回默认值 -1
prefs.end();长整型（int32_t）存储长整型值（在 Preferences 库中，长整型和整型使用相同的数据类型和存储方法）：Preferences prefs;
prefs.begin("mynamespace");
prefs.putLong("myLong", 1234567890); // 存储长整型值 1234567890
prefs.end();获取长整型值：Preferences prefs;
prefs.begin("mynamespace");
int32_t myLong = prefs.getLong("myLong", -1); // 获取长整型值，如果不存在则返回默认值 -1
prefs.end();浮点型（float）存储浮点型值：Preferences prefs;
prefs.begin("mynamespace");
prefs.putFloat("myFloat", 3.14f); // 存储浮点型值 3.14
prefs.end();获取浮点型值：Preferences prefs;
prefs.begin("mynamespace");
float myFloat = prefs.getFloat("myFloat", 0.0f); // 获取浮点型值，如果不存在则返回默认值 0.0
prefs.end();双精度型（double）存储双精度型值：Preferences prefs;
prefs.begin("mynamespace");
prefs.putDouble("myDouble", 3.14159265358979323846); // 存储双精度型值
prefs.end();获取双精度型值：Preferences prefs;
prefs.begin("mynamespace");
double myDouble = prefs.getDouble("myDouble", 0.0); // 获取双精度型值，如果不存在则返回默认值 0.0
prefs.end();字符串（const char*）存储字符串：Preferences prefs;
prefs.begin("mynamespace");
prefs.putString("myString", "Hello World"); // 存储字符串 "Hello World"
prefs.end();获取字符串：Preferences prefs;
prefs.begin("mynamespace");
String myString = prefs.getString("myString", "Default"); // 获取字符串，如果不存在则返回默认值 "Default"
prefs.end();请注意，字符串可以存储为 Arduino String 对象或 C-string（以空字符结尾的字符数组）。在存储和检索字符串时，确保使用正确的方法。如果使用 C-string，请确保字符串长度不超过 NVS 分区允许的最大长度。何时调用prefs.end();(运行后将清理此对象，数据还在就是不可用重新上电后可以看到数据但在运行到它是再次读取数据时读不到)在完成所有数据操作后调用：在完成对 NVS 的所有读取和写入操作后，应该调用prefs.end();。这通常是在一系列put...()（用于写入数据）或get...()（用于读取数据）方法调用之后。在适当的作用域结束处调用：通常在函数或作用域结束前调用prefs.end();，以确保资源得到及时释放。prefs.end();的作用确保数据写入：调用prefs.end();确保所有挂起的写入操作都已完成，并且数据已经安全地存储在 NVS 中。释放资源：这个方法会关闭 Preferences 实例与 NVS 的连接，并释放与之相关的内存和其他资源。防止数据损坏：如果不调用prefs.end();，可能会导致数据未完全写入或损坏，特别是在断电或程序崩溃的情况下。示例Preferences prefs;void setup() {// 开始 Preferences 实例，指定命名空间prefs.begin("mynamespace", false); // false 表示不覆盖现有数据// 存储一些数据prefs.putInt("myInt", 123);prefs.putFloat("myFloat", 456.78);// 结束 Preferences 实例prefs.end();
}void loop() {// 其他代码...
}http://www.ppmy.cn/news/1540779.html相关文章【java数据结构】栈【java数据结构】栈 一、栈的概念二、 栈的使用三、 栈的模拟实现(数组)构造方法size()empty()push()pop()peek() 四、 栈的模拟实现(链表)构造方法size()empty()push()pop()peek() 五、 栈的例题 此篇博客希望对你有所帮助&amp;#xff08;帮助你了解栈&amp;#xff09;&amp;#xff0c;不…阅读更多...Python爬虫介绍在互联网上&amp;#xff0c;信息就像散落的珍珠&amp;#xff0c;而Python爬虫就是帮你把它们串起来的线。无论你是想要分析市场趋势、研究社交媒体行为&amp;#xff0c;还是简单地收集数据做报告&amp;#xff0c;Python爬虫都能帮你高效完成任务。 
是一种使用Python编程语言编写的自动化脚本&amp;a…阅读更多...MarkDown---标题软件下载网址&amp;#xff1a;Typora 官方中文站 
程序员必备软件MarkDown&amp;#xff0c;这个软件能提升自己的文件整理效率&amp;#xff0c;日常用于对接接口等等操作都离不开MarkDown。 
下载软件后&amp;#xff0c;如果需要激活清查看我这篇文章&amp;#xff1a; 
Typora序列号激活_typora激活…阅读更多...视频转文字工具搜集视频转文字工具是一种能够将视频中的音频内容转化为文字的软件或在线服务。这类工具通常支持多种视频格式和语言&amp;#xff0c;适用于不同的场景和需求。以下是一些推荐的视频转文字工具及其特点&amp;#xff1a; 媒关系&amp;#xff1a;这是一款免费的视频转文字工具&amp;#xff0c;支持多种…阅读更多...keepalived(高可用)+nginx（负载均衡）+web环境 注意&amp;#xff1a; 
(1) 做高可用负载均衡至少需要四台服务器&amp;#xff1a;两台独立的高可用负载均衡器&amp;#xff0c;两台web服务器做集群 (2) vip&amp;#xff08;虚拟ip&amp;#xff09;不能和物理ip冲突 (3) vip&amp;#xff08;虚拟ip&amp;#xff09;最好设置成和内网ip同一网段&amp;#xf…阅读更多...在知网上快速引用相关文献1.在百度界面中搜索“知网”&amp;#xff08;或在地址栏中输入知网的链接“https://www.cnki.net/”&amp;#xff09; 2.点开搜索到的知网&amp;#xff0c;点开后出现以下界面。 3.在主题中输入关键字&amp;#xff0c;如“JAVA”&amp;#xff0c;之后点击搜索。出现下述界面 4.在该界面中点击 
这个…阅读更多...OPC Router快速打通设备层与influxDB数据通讯随着时代演化&amp;#xff0c;数据量呈几何倍数增加的情况下出现了时序数据库。时序数据库是基于时间进行存储的数据库&amp;#xff0c;每一条数据中都有一个时间戳&amp;#xff0c;这种数据库特别适合存储那些随着时间变化的数据&amp;#xff0c;通过一些工具处理后&amp;#xff0c;能够分析出数据…阅读更多...【保姆级】Spring Retry 教程什么是“重试”？为什么要进行“重试”呢？ “重试”（Retry）是一种在编程和软件开发中常见的策略，用于处理在执行操作时可能遇到的临时性错误或异常。当一个操作因为某些原因（如网络问题、服务不可用、资源暂时不可用等）失败时，重试机制会尝试再次执行该操作，以期在下一…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:25 +0000</pubDate>
    </item>
    <item>
      <title>【java数据结构】栈</title>
      <link>https://www.ppmy.cn/news/1540778.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【java数据结构】栈news/2025/10/31 22:19:23/【java数据结构】栈一、栈的概念二、 栈的使用三、 栈的模拟实现(数组)构造方法size()empty()push()pop()peek()四、 栈的模拟实现(链表)构造方法size()empty()push()pop()peek()五、 栈的例题此篇博客希望对你有所帮助（帮助你了解栈），不懂的或有错误的也可在评论区留言，错误必改评论必回！！！持续关注，下一篇博客是java数集合框架中的队列！！！整篇博客的代码都在Gitee中（代码链接放下文章结尾）。一、栈的概念栈：是一种特殊的线性表，其只允许固定的一端进行插入和删除元素的操作。进行数据插入和删除操作的一端称为栈顶，另一端称为栈底。栈中的数据元素遵守先进后出的原则。压栈：栈的插入操作叫做进栈\压栈\入栈。入栈数据在栈顶。出栈：栈的删除操作叫做出栈。出栈数据在栈顶。二、 栈的使用从上图可以看到，Stack继承了Vector，Vector和ArrayList类似，都是动态的顺序表。不同的是Vector是线程安全的。三、 栈的模拟实现(数组)栈是一个特殊的顺序表,所以采用链表和数组的方式都可实现,但是,一般采用数组的方式实现.publicMyStack(){}publicintpush(inte){}publicintpop(){}publicintpeek(){}publicintsize(){}publicbooleanempty(){}构造方法publicclassMyStack{int[]array;intsize;publicMyStack(){array=newint[5];//默认栈容量为5}}size()获取栈中元素个数publicintsize(){returnsize;}empty()判断栈中元素个数是否为空publicbooleanempty(){returnsize==0;}push()首先先判断栈是否为满，如果满则进行扩容，返回要入栈的val值publicintpush(intval){if(size==array.length){array=Arrays.copyOf(array,2*array.length);}array[size]=val;size++;returnval;}pop()先判断栈是否为空，为空则抛出异常；不为空，则输出栈顶元素，并且移除栈顶元素（栈顶元素发生变化），size–；自定义为空异常：publicclassEmptyExceptionextendsRuntimeException{publicEmptyException(){}publicEmptyException(Stringmessage){super(message);}}publicintpop(){if(empty()){thrownewEmptyException();}else{intval=array[size-1];size--;returnval;}}peek()peek()方法是输出栈顶元素，但不移除栈顶元素（栈顶元素不发生变化）。publicintpeek(){if(empty()){thrownewEmptyException();}else{returnarray[size-1];}}四、 栈的模拟实现(链表)栈中元素的入栈和出栈的时间复杂度为O(1),因此用链表实现栈就需要考虑插入和输出元素的时间复杂度是否为O(1)。双链表实现栈：不管头插，头输出和尾插，尾输出，都满足栈的要求，因为我们知道头节点和尾节点的位置。单链表实现栈：单链表实现栈，我们只能用头插入和头输出，因为我们不知道尾节点的位置，我们只能通过遍历得到尾节点的位置，那么时间复杂度将不是O(1)而是O(n)。这里我们给大家演示一下用单链表模拟实现栈！publicintpush(inte){}publicintpop(){}publicintpeek(){}publicintsize(){}publicbooleanempty(){}构造方法staticclassListNode{publicintval;publicListNodenext;publicListNode(intval){this.val=val;}}publicListNodehead;size()publicintsize(){ListNodecur=head;intsize=0;while(cur!=null){size++;cur=cur.next;}returnsize;}empty()publicbooleanempty(){returnhead==null;}push()publicintpush(intval){ListNodecur=newListNode(val);if(head==null){head=cur;}else{cur.next=head;head=cur;}returnhead.val;}pop()先判空，pop()方法需要删除栈顶元素(这里相当于是头节点)，所以定义一个节点来标记头节点，然后将头节向后移动。publicintpop(){if(head==null){thrownewEmptyException();}ListNodecur=head;head=head.next;returncur.val;}peek()因为peek()方法不删除栈顶元素(这里相当于是头节点)，所以这里不需要将头节点向后移动。publicintpeek(){if(head==null){thrownewEmptyException();}returnhead.val;}五、 栈的例题有效的括号给定一个只包括 ‘(’，‘)’，‘{’，‘}’，‘[’，‘]’ 的字符串 s ，判断字符串是否有效。有效字符串需满足：1.左括号必须用相同类型的右括号闭合。2.左括号必须以正确的顺序闭合。3.每个右括号都有一个对应的相同类型的左括号。publicbooleanisValid(Stringstr){Stack&lt;Character&gt;stack=newStack&lt;&gt;();for(inti=0;i&lt;str.length();i++){chars=str.charAt(i);if(s=='('||s=='['||s=='{'){stack.push(s);}else{if(stack.isEmpty()){returnfalse;}chars2=stack.peek();if(s==')'&amp;&amp;s2=='('||s=='}'&amp;&amp;s2=='{'||s==']'&amp;&amp;s2=='['){stack.pop();}else{returnfalse;}}}if(!stack.isEmpty()){returnfalse;}returntrue;}逆波兰表达式求值给你一个字符串数组 tokens ，表示一个根据 逆波兰表示法 表示的算术表达式。请你计算该表达式。返回一个表示表达式值的整数。注意：1.有效的算符为 ‘+’、‘-’、‘*’ 和 ‘/’ 。2.每个操作数（运算对象）都可以是一个整数或者另一个表达式。3.两个整数之间的除法总是 向零截断 。4.表达式中不含除零运算。5.输入是一个根据逆波兰表示法表示的算术表达式。6.答案及所有中间计算结果可以用 32 位 整数表示。publicintevalRPN(String[]tokens){Stack&lt;Integer&gt;stack=newStack&lt;&gt;();for(inti=0;i&lt;tokens.length;i++){if(calculation(tokens[i])){intval1=stack.pop();intval2=stack.pop();switch(tokens[i]){case"+":stack.push(val2+val1);break;case"-":stack.push(val2-val1);break;case"*":stack.push(val2*val1);break;case"/":stack.push(val2/val1);break;}}else{stack.push(Integer.valueOf(tokens[i]));}}returnstack.pop();}privatebooleancalculation(Strings){if(s.equals("+")||s.equals("-")||s.equals("*")||s.equals("/")){returntrue;}returnfalse;}栈的压入、弹出序列输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。publicstaticbooleanIsPopOrder(int[]pushV,int[]popV){// write code hereStack&lt;Integer&gt;stack=newStack&lt;&gt;();intj=0;for(inti=0;i&lt;pushV.length;i++){stack.push(pushV[i]);while(j&lt;popV.length&amp;&amp;!stack.isEmpty()&amp;&amp;stack.peek()==popV[j]){stack.pop();j++;}}if(!stack.isEmpty()){returnfalse;}returntrue;}最小栈publicStack&lt;Integer&gt;stack;publicStack&lt;Integer&gt;minStack;publicMinStack(){stack=newStack&lt;&gt;();minStack=newStack&lt;&gt;();}publicvoidpush(intval){stack.push(val);if(minStack.empty()){minStack.push(val);}else{intpeekVal=minStack.peek();if(val&lt;=peekVal){minStack.push(val);}}}publicvoidpop(){if(stack.empty()){return;}intpopVal=stack.pop();if(popVal==minStack.peek()){minStack.pop();}}publicinttop(){if(stack.empty()){return-1;}returnstack.peek();}publicintgetMin(){if(minStack.empty()){return-1;}returnminStack.peek();}此篇博客的全部代码！http://www.ppmy.cn/news/1540778.html相关文章Python爬虫介绍在互联网上&amp;#xff0c;信息就像散落的珍珠&amp;#xff0c;而Python爬虫就是帮你把它们串起来的线。无论你是想要分析市场趋势、研究社交媒体行为&amp;#xff0c;还是简单地收集数据做报告&amp;#xff0c;Python爬虫都能帮你高效完成任务。 
是一种使用Python编程语言编写的自动化脚本&amp;a…阅读更多...MarkDown---标题软件下载网址&amp;#xff1a;Typora 官方中文站 
程序员必备软件MarkDown&amp;#xff0c;这个软件能提升自己的文件整理效率&amp;#xff0c;日常用于对接接口等等操作都离不开MarkDown。 
下载软件后&amp;#xff0c;如果需要激活清查看我这篇文章&amp;#xff1a; 
Typora序列号激活_typora激活…阅读更多...视频转文字工具搜集视频转文字工具是一种能够将视频中的音频内容转化为文字的软件或在线服务。这类工具通常支持多种视频格式和语言&amp;#xff0c;适用于不同的场景和需求。以下是一些推荐的视频转文字工具及其特点&amp;#xff1a; 媒关系&amp;#xff1a;这是一款免费的视频转文字工具&amp;#xff0c;支持多种…阅读更多...keepalived(高可用)+nginx（负载均衡）+web环境 注意&amp;#xff1a; 
(1) 做高可用负载均衡至少需要四台服务器&amp;#xff1a;两台独立的高可用负载均衡器&amp;#xff0c;两台web服务器做集群 (2) vip&amp;#xff08;虚拟ip&amp;#xff09;不能和物理ip冲突 (3) vip&amp;#xff08;虚拟ip&amp;#xff09;最好设置成和内网ip同一网段&amp;#xf…阅读更多...在知网上快速引用相关文献1.在百度界面中搜索“知网”&amp;#xff08;或在地址栏中输入知网的链接“https://www.cnki.net/”&amp;#xff09; 2.点开搜索到的知网&amp;#xff0c;点开后出现以下界面。 3.在主题中输入关键字&amp;#xff0c;如“JAVA”&amp;#xff0c;之后点击搜索。出现下述界面 4.在该界面中点击 
这个…阅读更多...OPC Router快速打通设备层与influxDB数据通讯随着时代演化&amp;#xff0c;数据量呈几何倍数增加的情况下出现了时序数据库。时序数据库是基于时间进行存储的数据库&amp;#xff0c;每一条数据中都有一个时间戳&amp;#xff0c;这种数据库特别适合存储那些随着时间变化的数据&amp;#xff0c;通过一些工具处理后&amp;#xff0c;能够分析出数据…阅读更多...【保姆级】Spring Retry 教程什么是“重试”？为什么要进行“重试”呢？ “重试”（Retry）是一种在编程和软件开发中常见的策略，用于处理在执行操作时可能遇到的临时性错误或异常。当一个操作因为某些原因（如网络问题、服务不可用、资源暂时不可用等）失败时，重试机制会尝试再次执行该操作，以期在下一…阅读更多...MATLAB小波变换图像融合系统二、应用背景及意义 
本课题利用小波变换进行图像的融合&amp;#xff0c;然后对融合的结果进行图像质量的评价。所谓小波变换图像融合就是对多个的信息目标进行一系列的图像提取和合成&amp;#xff0c;进而可以获得对同一个信息目标的更为精确、全面、可靠的高低频图像信息描述。并且也…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:24 +0000</pubDate>
    </item>
    <item>
      <title>Python爬虫介绍</title>
      <link>https://www.ppmy.cn/news/1540777.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Python爬虫介绍news/2025/10/31 22:19:22/在互联网上，信息就像散落的珍珠，而Python爬虫就是帮你把它们串起来的线。无论你是想要分析市场趋势、研究社交媒体行为，还是简单地收集数据做报告，Python爬虫都能帮你高效完成任务。是一种使用Python编程语言编写的自动化脚本，它可以模拟浏览器的行为，访问网站，提取网页上的数据。这些数据可以用于数据分析、机器学习、信息聚合等多种用途。让我们通过一个简单的例子来看看如何使用Python爬虫来收集数据：导入库：首先，你需要导入一些Python库，比如requests来发送网络请求，BeautifulSoup来解析网页。import requests
from bs4 import BeautifulSoup发送请求：使用requests库向目标网站发送一个GET请求。response = requests.get('http://example.com')解析内容：使用BeautifulSoup解析返回的HTML内容。soup = BeautifulSoup(response.text, 'html.parser')提取数据：找到包含所需数据的HTML元素，并提取它们。titles = soup.find_all('h1')  # 假设我们想提取所有的一级标题
for title in titles:print(title.text)存储数据：将提取的数据保存到文件或数据库中。通过使用Python爬虫，你可以快速地从互联网上收集大量数据，这将极大地提高你的工作效率。无论是进行市场分析、学术研究还是个人项目，Python爬虫都能帮助你节省时间，让你专注于数据分析和决策。http://www.ppmy.cn/news/1540777.html相关文章MarkDown---标题软件下载网址&amp;#xff1a;Typora 官方中文站 
程序员必备软件MarkDown&amp;#xff0c;这个软件能提升自己的文件整理效率&amp;#xff0c;日常用于对接接口等等操作都离不开MarkDown。 
下载软件后&amp;#xff0c;如果需要激活清查看我这篇文章&amp;#xff1a; 
Typora序列号激活_typora激活…阅读更多...视频转文字工具搜集视频转文字工具是一种能够将视频中的音频内容转化为文字的软件或在线服务。这类工具通常支持多种视频格式和语言&amp;#xff0c;适用于不同的场景和需求。以下是一些推荐的视频转文字工具及其特点&amp;#xff1a; 媒关系&amp;#xff1a;这是一款免费的视频转文字工具&amp;#xff0c;支持多种…阅读更多...keepalived(高可用)+nginx（负载均衡）+web环境 注意&amp;#xff1a; 
(1) 做高可用负载均衡至少需要四台服务器&amp;#xff1a;两台独立的高可用负载均衡器&amp;#xff0c;两台web服务器做集群 (2) vip&amp;#xff08;虚拟ip&amp;#xff09;不能和物理ip冲突 (3) vip&amp;#xff08;虚拟ip&amp;#xff09;最好设置成和内网ip同一网段&amp;#xf…阅读更多...在知网上快速引用相关文献1.在百度界面中搜索“知网”&amp;#xff08;或在地址栏中输入知网的链接“https://www.cnki.net/”&amp;#xff09; 2.点开搜索到的知网&amp;#xff0c;点开后出现以下界面。 3.在主题中输入关键字&amp;#xff0c;如“JAVA”&amp;#xff0c;之后点击搜索。出现下述界面 4.在该界面中点击 
这个…阅读更多...OPC Router快速打通设备层与influxDB数据通讯随着时代演化&amp;#xff0c;数据量呈几何倍数增加的情况下出现了时序数据库。时序数据库是基于时间进行存储的数据库&amp;#xff0c;每一条数据中都有一个时间戳&amp;#xff0c;这种数据库特别适合存储那些随着时间变化的数据&amp;#xff0c;通过一些工具处理后&amp;#xff0c;能够分析出数据…阅读更多...【保姆级】Spring Retry 教程什么是“重试”？为什么要进行“重试”呢？ “重试”（Retry）是一种在编程和软件开发中常见的策略，用于处理在执行操作时可能遇到的临时性错误或异常。当一个操作因为某些原因（如网络问题、服务不可用、资源暂时不可用等）失败时，重试机制会尝试再次执行该操作，以期在下一…阅读更多...MATLAB小波变换图像融合系统二、应用背景及意义 
本课题利用小波变换进行图像的融合&amp;#xff0c;然后对融合的结果进行图像质量的评价。所谓小波变换图像融合就是对多个的信息目标进行一系列的图像提取和合成&amp;#xff0c;进而可以获得对同一个信息目标的更为精确、全面、可靠的高低频图像信息描述。并且也…阅读更多...深度学习-2：数据向量化向量化 
在逻辑回归中&amp;#xff0c;x,w,b都是列向量&amp;#xff0c;若要计算w.T*xb&amp;#xff0c;不向量化的话就需要for循环计算起来很麻烦 
向量化后&amp;#xff0c;使用numpy.dot(w,x)函数即可快速计算 逻辑回归向量化阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:22 +0000</pubDate>
    </item>
    <item>
      <title>MarkDown---标题</title>
      <link>https://www.ppmy.cn/news/1540776.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维MarkDown---标题news/2025/10/31 22:19:21/软件下载网址：Typora 官方中文站·程序员必备软件MarkDown，这个软件能提升自己的文件整理效率，日常用于对接接口等等操作都离不开MarkDown。·下载软件后，如果需要激活清查看我这篇文章：Typora序列号激活_typora激活序列号-CSDN博客一、标题符号：再下面打了#号后需要空格才能生效，空格后面就可以写上标题啦#一级标题##二级标题###三级标题####四级标题#####五级标题######六级标题效果图：当然也可以用快捷键或者直接点击菜单栏对每行数据做处理，ctrl+1~6对应着每个标题，也是同样效果http://www.ppmy.cn/news/1540776.html相关文章视频转文字工具搜集视频转文字工具是一种能够将视频中的音频内容转化为文字的软件或在线服务。这类工具通常支持多种视频格式和语言&amp;#xff0c;适用于不同的场景和需求。以下是一些推荐的视频转文字工具及其特点&amp;#xff1a; 媒关系&amp;#xff1a;这是一款免费的视频转文字工具&amp;#xff0c;支持多种…阅读更多...keepalived(高可用)+nginx（负载均衡）+web环境 注意&amp;#xff1a; 
(1) 做高可用负载均衡至少需要四台服务器&amp;#xff1a;两台独立的高可用负载均衡器&amp;#xff0c;两台web服务器做集群 (2) vip&amp;#xff08;虚拟ip&amp;#xff09;不能和物理ip冲突 (3) vip&amp;#xff08;虚拟ip&amp;#xff09;最好设置成和内网ip同一网段&amp;#xf…阅读更多...在知网上快速引用相关文献1.在百度界面中搜索“知网”&amp;#xff08;或在地址栏中输入知网的链接“https://www.cnki.net/”&amp;#xff09; 2.点开搜索到的知网&amp;#xff0c;点开后出现以下界面。 3.在主题中输入关键字&amp;#xff0c;如“JAVA”&amp;#xff0c;之后点击搜索。出现下述界面 4.在该界面中点击 
这个…阅读更多...OPC Router快速打通设备层与influxDB数据通讯随着时代演化&amp;#xff0c;数据量呈几何倍数增加的情况下出现了时序数据库。时序数据库是基于时间进行存储的数据库&amp;#xff0c;每一条数据中都有一个时间戳&amp;#xff0c;这种数据库特别适合存储那些随着时间变化的数据&amp;#xff0c;通过一些工具处理后&amp;#xff0c;能够分析出数据…阅读更多...【保姆级】Spring Retry 教程什么是“重试”？为什么要进行“重试”呢？ “重试”（Retry）是一种在编程和软件开发中常见的策略，用于处理在执行操作时可能遇到的临时性错误或异常。当一个操作因为某些原因（如网络问题、服务不可用、资源暂时不可用等）失败时，重试机制会尝试再次执行该操作，以期在下一…阅读更多...MATLAB小波变换图像融合系统二、应用背景及意义 
本课题利用小波变换进行图像的融合&amp;#xff0c;然后对融合的结果进行图像质量的评价。所谓小波变换图像融合就是对多个的信息目标进行一系列的图像提取和合成&amp;#xff0c;进而可以获得对同一个信息目标的更为精确、全面、可靠的高低频图像信息描述。并且也…阅读更多...深度学习-2：数据向量化向量化 
在逻辑回归中&amp;#xff0c;x,w,b都是列向量&amp;#xff0c;若要计算w.T*xb&amp;#xff0c;不向量化的话就需要for循环计算起来很麻烦 
向量化后&amp;#xff0c;使用numpy.dot(w,x)函数即可快速计算 逻辑回归向量化阅读更多...网络编程-UDP以及数据库mysqlUDP通信流程 
服务端客户端有一个邮箱socket()有一个邮箱socket()绑定地址bind()发送数据sendto接收数据recvfrom关闭close()关闭colse() 
//服务端
#include "head.h"
// ./server 10001
int main(int argc,char *argv[])
{// 1、创建socket套接字// 参数1&amp;#xff…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:21 +0000</pubDate>
    </item>
    <item>
      <title>视频转文字工具搜集</title>
      <link>https://www.ppmy.cn/news/1540775.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维视频转文字工具搜集news/2025/10/31 22:19:19/视频转文字工具是一种能够将视频中的音频内容转化为文字的软件或在线服务。这类工具通常支持多种视频格式和语言，适用于不同的场景和需求。以下是一些推荐的视频转文字工具及其特点：媒关系：这是一款免费的视频转文字工具，支持多种语言和文件格式，适用于不同的场景和需求。VideoTranscribe：同样是一款免费工具，可以将视频中的口语内容转录为可编辑文本，并支持多种输出格式。TranscribeMe：利用先进的AI技术和熟练的转录员网络提供顶级的视频转文本服务，确保高准确性和效率。Converter App：提供快速准确的视频转文字功能，支持各种视频格式和语言，用户可以免费下载纯文本文件。在线视频转文字助手：支持OGG、MP4、M4V、WEBM等格式的视频转换，并导出为可编辑的文本，识别准确度高、转换速度快。音脉：一站式媒体转换平台，提供音视频转文字、硬字幕提取等功能，支持多种格式和语言。水印云：支持链接或本地视频等多种视频格式进行转换，精准识别，智能断句，效率高。钉钉的闪记功能：特别适合企业在会议场景中使用，可以将实时直播会议或本地视频文件转换成文字，并支持多种输出格式。Memo AI：AI驱动的All in One工具，可以轻松将YouTube、播客、本地音视频转为文字稿，并支持多语言转录翻译。TurboScribe：提供免费的视频转文字服务，支持MP4、AVI、MOV、MKV、WMV等多种视频格式。这些工具各有特色，用户可以根据自己的需求选择合适的工具来实现视频转文字的功能。http://www.ppmy.cn/news/1540775.html相关文章keepalived(高可用)+nginx（负载均衡）+web环境 注意&amp;#xff1a; 
(1) 做高可用负载均衡至少需要四台服务器&amp;#xff1a;两台独立的高可用负载均衡器&amp;#xff0c;两台web服务器做集群 (2) vip&amp;#xff08;虚拟ip&amp;#xff09;不能和物理ip冲突 (3) vip&amp;#xff08;虚拟ip&amp;#xff09;最好设置成和内网ip同一网段&amp;#xf…阅读更多...在知网上快速引用相关文献1.在百度界面中搜索“知网”&amp;#xff08;或在地址栏中输入知网的链接“https://www.cnki.net/”&amp;#xff09; 2.点开搜索到的知网&amp;#xff0c;点开后出现以下界面。 3.在主题中输入关键字&amp;#xff0c;如“JAVA”&amp;#xff0c;之后点击搜索。出现下述界面 4.在该界面中点击 
这个…阅读更多...OPC Router快速打通设备层与influxDB数据通讯随着时代演化&amp;#xff0c;数据量呈几何倍数增加的情况下出现了时序数据库。时序数据库是基于时间进行存储的数据库&amp;#xff0c;每一条数据中都有一个时间戳&amp;#xff0c;这种数据库特别适合存储那些随着时间变化的数据&amp;#xff0c;通过一些工具处理后&amp;#xff0c;能够分析出数据…阅读更多...【保姆级】Spring Retry 教程什么是“重试”？为什么要进行“重试”呢？ “重试”（Retry）是一种在编程和软件开发中常见的策略，用于处理在执行操作时可能遇到的临时性错误或异常。当一个操作因为某些原因（如网络问题、服务不可用、资源暂时不可用等）失败时，重试机制会尝试再次执行该操作，以期在下一…阅读更多...MATLAB小波变换图像融合系统二、应用背景及意义 
本课题利用小波变换进行图像的融合&amp;#xff0c;然后对融合的结果进行图像质量的评价。所谓小波变换图像融合就是对多个的信息目标进行一系列的图像提取和合成&amp;#xff0c;进而可以获得对同一个信息目标的更为精确、全面、可靠的高低频图像信息描述。并且也…阅读更多...深度学习-2：数据向量化向量化 
在逻辑回归中&amp;#xff0c;x,w,b都是列向量&amp;#xff0c;若要计算w.T*xb&amp;#xff0c;不向量化的话就需要for循环计算起来很麻烦 
向量化后&amp;#xff0c;使用numpy.dot(w,x)函数即可快速计算 逻辑回归向量化阅读更多...网络编程-UDP以及数据库mysqlUDP通信流程 
服务端客户端有一个邮箱socket()有一个邮箱socket()绑定地址bind()发送数据sendto接收数据recvfrom关闭close()关闭colse() 
//服务端
#include "head.h"
// ./server 10001
int main(int argc,char *argv[])
{// 1、创建socket套接字// 参数1&amp;#xff…阅读更多...git push错误failed to push some refs to解决方法主流解决方法网上全是&amp;#xff0c;例如解决目标仓库和本地仓库的版本冲突&amp;#xff1b;关闭”受保护的仓库“权限。 
本文讲述一种   网上几乎没有文章会讲解的一种可能的解决方式&amp;#xff1a; 
问题描述&amp;#xff1a; 解决方式&amp;#xff1a; 
取消勾选即可阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:20 +0000</pubDate>
    </item>
    <item>
      <title>keepalived(高可用)+nginx（负载均衡）+web</title>
      <link>https://www.ppmy.cn/news/1540774.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维keepalived(高可用)+nginx（负载均衡）+webnews/2025/10/31 22:19:18/环境注意：(1) 做高可用+负载均衡至少需要四台服务器：两台独立的高可用+负载均衡器，两台web服务器做集群(2) vip（虚拟ip）不能和物理ip冲突(3) vip（虚拟ip）最好设置成和内网ip同一网段，最后做地址映射到公网ip(4) keeplived（高可用）+nginx（负载均衡） 可以实现多域名对应一个VIP,并且访问不同域名，显示不同主页，可行，已测(5) 负载均衡服务器（keeplived+nginx）最好和后端web服务器在同一局域网内(6) 两台web服务的网站内容必须相同(7) keeplived+nginx 中后端web服务器不需要配置vip，也不用抑制arp广播，因为后端web回包时还会经过前端nginx(8) 心跳线：两台服务器各新增一块网卡然后配上任意网段ip只要能相互ping通就行(不要和局域网通网段)名词解释：VIP：负载均衡服务器的虚拟ip地址LB ：负载均衡服务器sealserver：后端真实服务器描述配置keepalive+nginx+web的过程1、准备好后端web集群并且保证web集群内容一致
2、配置2台nginx的反向代理功能，保证能通过nginx正常访问到后端的web集群
3、在每台nginx上配置keepalive，模式为主备，实现当用户访问主keepalive的时候，vip能够正常把数据包发送给nginx并实现反向代理，后端的web集群回复用户的时候仍然通过vip来发送数据。
注意：如果master上的nginx发生故障keepalive需要手动停止才能把vip漂移到backup上。1、安装keepalived（与nginx[负载均衡服务器] 在一台服务器上）# keepalived使用 VRRP（虚拟路由冗余协议），实现单点故障切换，俗称心跳线监听
[root@oldboy ~]# yum -y install keepalived
[root@oldboy ~]# cd /etc/keepalived/
[root@oldboy keepalived]#  cp keepalived.conf keepalived.conf.ori
[root@oldboy keepalived]# sed  -n '1,31p' keepalived.conf.ori &gt;keepalived.conf2、配置web服务器站点目录（Real-server：后端web服务器）(1) 配置real-server-10.0.0.7（nginx-web）
[root@Oldboy extra]# cat www.conf 
server {listen        80;server_name  www.etiantian.org;location / {root   html/www;index  index.html index.htm;}
}[root@Oldboy extra]# cat bbs.conf 
server {listen        80;server_name  bbs.etiantian.org; location / {root   html/bbs;index  index.php  index.html index.htm;}
}[root@Oldboy extra]# cat blog.conf 
server {listen        80;server_name  blog.etiantian.org;location / {root     html/blog;index    index.html index.php;
}location ~ .*\.(php|php5)?$ {root html/blog;fastcgi_pass  127.0.0.1:9000;fastcgi_index index.php;include fastcgi.conf;}
}(2) 配置real-server-10.0.0.8 (apache-web)
[root@Oldboy extra]# egrep -v "#|^$" httpd-vhosts.conf 
NameVirtualHost *:80
&lt;VirtualHost *:80&gt;ServerAdmin oldboy@oldboyedu.comDocumentRoot "/application/apache2.2.31/htdocs/www"ServerName   www.etiantian.orgServerAlias etiantian.orgErrorLog "/app/logs/www-error_log"CustomLog "/app/logs/www-access_log" common
&lt;/VirtualHost&gt;
&lt;VirtualHost *:80&gt;ServerAdmin oldboy@oldboyedu.comDocumentRoot "/application/apache2.2.31/htdocs/bbs"ServerName   bbs.etiantian.orgErrorLog "/app/logs/bbs-error_log"CustomLog "/app/logs/bbs-access_log" common
&lt;/VirtualHost&gt;
&lt;VirtualHost *:80&gt;ServerAdmin oldboy@oldboyedu.comDocumentRoot "/application/apache2.2.31/htdocs/blog"ServerName   blog.etiantian.orgErrorLog "/app/logs/blog-error_log"CustomLog "/app/logs/blog-access_log" common
&lt;/VirtualHost&gt;3、配置nginx负载均衡服务器 ，配置两台，主备都一样（也叫反向代理）[root@Oldboy keepalived]# vi /application/nginx/conf/nginx.conf
worker_processes  1;
events {worker_connections  1024;
worker_processes  1;
events {worker_connections  1024;
}
http {include       mime.types;default_type  application/octet-stream;sendfile        on;keepalive_timeout  65;upstream www_pool {server 172.16.1.7:80  weight=1;server 172.16.1.8:80  weight=1;
}server {listen       80;server_name  www.etiantian.org bbs.etiantian.org  blog.etiantian.org;   （多个域名用空格隔开）location / {index  index.html index.htm;proxy_pass http://www_pool;proxy_set_header Host  $host;proxy_set_header X-Forwarded-For $remote_addr;}}
}4、配置keepalived（keepalived和负载均衡服务器在一台服务器上）(1) 配置keepalived-MASTER（10.0.0.5）
[root@Oldboy keepalived]# cat keepalived.conf
! Configuration File for keepalivedglobal_defs {router_id LVS_DEVEL_01         \\keepalived服务器标识符，最好和备keepalived不一样
}vrrp_instance VI_1 {                    \\VRRP实例1，多实例不能相同，但是主备必须相同state MASTER                          \\指定keepalived的角色，MASTER为主服务器，BACKUP为备用服务器interface eth0                          \\监听的接口virtual_router_id 51                  \\虚拟路由标识，这个标识是一个数字(1-255)，在一个VRRP实例中主备服务器ID必须一样priority 150                               \\优先级，数字越大优先级越高，在一个实例中主服务器优先级要高于备服务器advert_int 1                                \\设置主备之间同步检查的时间间隔，单位秒 authentication {auth_type PASSauth_pass 1111}virtual_ipaddress {172.16.1.254/24 dev eth0 label eth0:3    \\定义虚拟ip地址，在监听的eth0网卡上增加eth0:3虚拟网卡#172.16.1.245                                           \\直接加ip也可以，用ip add 看}
}
(2) 配置keepalived-BACKUP（10.0.0.6）
[root@Oldboy keepalived]# cat keepalived.conf
! Configuration File for keepalivedglobal_defs {}router_id LVS_DEVEL_02                                                                     \\keepalived服务器标识符，最好和主keepalived不一样
}vrrp_instance VI_1 {                                                                                \\VRRP实例，和主一样state BACKUP                                                                                     \\指定keepalived的角色，这里是备用服务器interface eth0virtual_router_id 51                                                                            priority 100                                                                                          \\优先级低于主服务器，最好相差50advert_int 1authentication {auth_type PASSauth_pass 1111}virtual_ipaddress {172.16.1.254/24 dev eth0 label eth0:3#172.16.1.245                                        \\直接加ip也可以，用ip add 看}
}5、启动keepalived/etc/init.d/keepalived start
chkconfig keepalived on
echo "/application/nginx/sbin/nginx" &gt;&gt; /etc/rc.d/rc.local
查看vip漂移：
[root@Oldboy keepalived]# ifconfig eth0:3
eth0:3    Link encap:Ethernet  HWaddr 00:0C:29:6D:23:83  inet addr:172.16.1.254  Bcast:0.0.0.0  Mask:255.255.255.0UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:16、将vip映射到公网ip（由于我这里没有硬件防火墙，只能使用同一局域网的其它服务器代替，这台服务器需要能联网）(1) 开启路由转发
[root@Oldboy ~]# sed -i 's#net.ipv4.ip_forward = 0#net.ipv4.ip_forward = 1#g' /etc/sysctl.conf
[root@Oldboy ~]# sysctl -p
net.ipv4.ip_forward = 1(2) 配置地址映射(当访问公网ip:10.0.0.51的时候跳转到vip:172.16.1.254)
iptables -F -t nat
iptables -t nat -I PREROUTING -p tcp  -d 10.0.0.51 --dport 80 -j DNAT --to-destination 172.16.1.254:80
iptables -t nat -A POSTROUTING  -j MASQUERADE
/etc/init.d/iptables save
/etc/init.d/iptables restart7、测试并验证keepalived+nginx：多个域名虚拟主机对应一个VIP，并且访问不同域名虚拟主机，显示不同主页，可行，已测，因为nginx支持7层转发客户端绑定hosts: 10.0.0.51  www.etiantian.org  bbs.etiantian.org  blog.etiantian.org   （一个vip对应多个域名）1、keepalived只负责vip漂移，能够让用户顺利将请求通过vip交给负载均衡服务器，当停止主服务器，备用服务器会接管vip以及对应的服务，当启动主服务器，备用服务器会让出接管权，注意这里是停止主服务器，如果只停止nginx服务vip是不会发生漂移的。2、当访问www.etiantian.org  bbs.etiantian.org 或 blog.etiantian.org，则解析到 10.0.0.51（公网ip）并NAT映射到vip:172.16.1.254（vip与负载均衡服务器在一起），负载均衡服务器会带着用户的主机头请求后端的real-server，后端real-server会根据主机头信息，回复负载均衡服务器，然后负载均衡服务器再回复客户端请求。http://www.ppmy.cn/news/1540774.html相关文章在知网上快速引用相关文献1.在百度界面中搜索“知网”&amp;#xff08;或在地址栏中输入知网的链接“https://www.cnki.net/”&amp;#xff09; 2.点开搜索到的知网&amp;#xff0c;点开后出现以下界面。 3.在主题中输入关键字&amp;#xff0c;如“JAVA”&amp;#xff0c;之后点击搜索。出现下述界面 4.在该界面中点击 
这个…阅读更多...OPC Router快速打通设备层与influxDB数据通讯随着时代演化&amp;#xff0c;数据量呈几何倍数增加的情况下出现了时序数据库。时序数据库是基于时间进行存储的数据库&amp;#xff0c;每一条数据中都有一个时间戳&amp;#xff0c;这种数据库特别适合存储那些随着时间变化的数据&amp;#xff0c;通过一些工具处理后&amp;#xff0c;能够分析出数据…阅读更多...【保姆级】Spring Retry 教程什么是“重试”？为什么要进行“重试”呢？ “重试”（Retry）是一种在编程和软件开发中常见的策略，用于处理在执行操作时可能遇到的临时性错误或异常。当一个操作因为某些原因（如网络问题、服务不可用、资源暂时不可用等）失败时，重试机制会尝试再次执行该操作，以期在下一…阅读更多...MATLAB小波变换图像融合系统二、应用背景及意义 
本课题利用小波变换进行图像的融合&amp;#xff0c;然后对融合的结果进行图像质量的评价。所谓小波变换图像融合就是对多个的信息目标进行一系列的图像提取和合成&amp;#xff0c;进而可以获得对同一个信息目标的更为精确、全面、可靠的高低频图像信息描述。并且也…阅读更多...深度学习-2：数据向量化向量化 
在逻辑回归中&amp;#xff0c;x,w,b都是列向量&amp;#xff0c;若要计算w.T*xb&amp;#xff0c;不向量化的话就需要for循环计算起来很麻烦 
向量化后&amp;#xff0c;使用numpy.dot(w,x)函数即可快速计算 逻辑回归向量化阅读更多...网络编程-UDP以及数据库mysqlUDP通信流程 
服务端客户端有一个邮箱socket()有一个邮箱socket()绑定地址bind()发送数据sendto接收数据recvfrom关闭close()关闭colse() 
//服务端
#include "head.h"
// ./server 10001
int main(int argc,char *argv[])
{// 1、创建socket套接字// 参数1&amp;#xff…阅读更多...git push错误failed to push some refs to解决方法主流解决方法网上全是&amp;#xff0c;例如解决目标仓库和本地仓库的版本冲突&amp;#xff1b;关闭”受保护的仓库“权限。 
本文讲述一种   网上几乎没有文章会讲解的一种可能的解决方式&amp;#xff1a; 
问题描述&amp;#xff1a; 解决方式&amp;#xff1a; 
取消勾选即可阅读更多...【前端】Matter：基础概念与入门Matter.js 是一个 2D 物理引擎&amp;#xff0c;允许开发者轻松创建物理模拟环境&amp;#xff0c;提供了基本的物体、力学和碰撞系统。它适用于物理游戏、动画和仿真项目的开发&amp;#xff0c;能够帮助创建逼真的物理交互效果。 
安装与设置 
在开始使用 Matter.js 之前&amp;#xff0c;我们需要…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:18 +0000</pubDate>
    </item>
    <item>
      <title>在知网上快速引用相关文献</title>
      <link>https://www.ppmy.cn/news/1540773.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维在知网上快速引用相关文献news/2025/10/31 22:19:16/1.在百度界面中搜索“知网”（或在地址栏中输入知网的链接“https://www.cnki.net/”）2.点开搜索到的知网，点开后出现以下界面。3.在主题中输入关键字，如“JAVA”，之后点击搜索。出现下述界面4.在该界面中点击这个图标5.弹出下述界面6.复制第一种引用格式（或根据需求用其他格式），并删除DOI号。如：王富广.基于Java学生选课系统的设计与实现[J].安阳师范学院学报,2024,26(05):109-113.http://www.ppmy.cn/news/1540773.html相关文章OPC Router快速打通设备层与influxDB数据通讯随着时代演化&amp;#xff0c;数据量呈几何倍数增加的情况下出现了时序数据库。时序数据库是基于时间进行存储的数据库&amp;#xff0c;每一条数据中都有一个时间戳&amp;#xff0c;这种数据库特别适合存储那些随着时间变化的数据&amp;#xff0c;通过一些工具处理后&amp;#xff0c;能够分析出数据…阅读更多...【保姆级】Spring Retry 教程什么是“重试”？为什么要进行“重试”呢？ “重试”（Retry）是一种在编程和软件开发中常见的策略，用于处理在执行操作时可能遇到的临时性错误或异常。当一个操作因为某些原因（如网络问题、服务不可用、资源暂时不可用等）失败时，重试机制会尝试再次执行该操作，以期在下一…阅读更多...MATLAB小波变换图像融合系统二、应用背景及意义 
本课题利用小波变换进行图像的融合&amp;#xff0c;然后对融合的结果进行图像质量的评价。所谓小波变换图像融合就是对多个的信息目标进行一系列的图像提取和合成&amp;#xff0c;进而可以获得对同一个信息目标的更为精确、全面、可靠的高低频图像信息描述。并且也…阅读更多...深度学习-2：数据向量化向量化 
在逻辑回归中&amp;#xff0c;x,w,b都是列向量&amp;#xff0c;若要计算w.T*xb&amp;#xff0c;不向量化的话就需要for循环计算起来很麻烦 
向量化后&amp;#xff0c;使用numpy.dot(w,x)函数即可快速计算 逻辑回归向量化阅读更多...网络编程-UDP以及数据库mysqlUDP通信流程 
服务端客户端有一个邮箱socket()有一个邮箱socket()绑定地址bind()发送数据sendto接收数据recvfrom关闭close()关闭colse() 
//服务端
#include "head.h"
// ./server 10001
int main(int argc,char *argv[])
{// 1、创建socket套接字// 参数1&amp;#xff…阅读更多...git push错误failed to push some refs to解决方法主流解决方法网上全是&amp;#xff0c;例如解决目标仓库和本地仓库的版本冲突&amp;#xff1b;关闭”受保护的仓库“权限。 
本文讲述一种   网上几乎没有文章会讲解的一种可能的解决方式&amp;#xff1a; 
问题描述&amp;#xff1a; 解决方式&amp;#xff1a; 
取消勾选即可阅读更多...【前端】Matter：基础概念与入门Matter.js 是一个 2D 物理引擎&amp;#xff0c;允许开发者轻松创建物理模拟环境&amp;#xff0c;提供了基本的物体、力学和碰撞系统。它适用于物理游戏、动画和仿真项目的开发&amp;#xff0c;能够帮助创建逼真的物理交互效果。 
安装与设置 
在开始使用 Matter.js 之前&amp;#xff0c;我们需要…阅读更多...2024.10月15日- Vue前置基础一 原型和原型链 
1.1 原型 
1.1.1 原型的概念 
在java 中&amp;#xff0c;我们知道一个类是一种事物的抽象&amp;#xff0c;通过这个类可以生成一个个具体的实例对象。我们可以理解为&amp;#xff0c;类提供着生成对象的“模版”。在 JavaScript 中构造函数&amp;#xff08;constructor&amp;#x…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:17 +0000</pubDate>
    </item>
    <item>
      <title>OPC Router快速打通设备层与influxDB数据通讯</title>
      <link>https://www.ppmy.cn/news/1540772.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维OPC Router快速打通设备层与influxDB数据通讯news/2025/10/31 22:19:15/随着时代演化，数据量呈几何倍数增加的情况下出现了时序数据库。时序数据库是基于时间进行存储的数据库，每一条数据中都有一个时间戳，这种数据库特别适合存储那些随着时间变化的数据，通过一些工具处理后，能够分析出数据随时间变化的趋势。InfluxDB是功能强大的BigData / NoSQL时序数据库，便于存储时间序列数据。由于采用了新的非关系数据库概念，influxDB能够快速，高效地存储大量与时间相关的数据。通过OPC Router的相关插件可以连接到各种工业基础设施系统，使用OPC Router的influxDB插件，通过拖放的图形配置，就可以简单便捷的将这些工业基础设施系统的数据直接传输到 influxDB数据库，并使其可用于大数据和分析应用程序。过程数据值储存到influxDB时序数据库最开始应用的地方是制造业，为了高效存储传感器传来的测量数据。通过标准化的OPC UA/DA协议获得设备层数据，将其传输到influxDB。数据从MQTT到influxDB的转移随着工业物联网广泛推广使用，在物联网项目，大量设备都需要传输数据到数据库中，influxDB得到广泛关注。不断增长的物联网项目中越来越多的数据能够通过MQTT发送，通过OPC Router的MQTT客户端插件，可以从MQTT代理接收消息， 结合使用influxDB插件，可以将数据直接传输到influxDB。通过图形拖放的方式实现与InfluxDB通讯OPC Router通过简单的图形拖拽配置就可以实现设备层数据储存到InfluxDB时序数据库中。以下图片显示了OPC UA数据如何传输到OPC Router，然后将这些数据保存在InfluxDB中，时间触发器每秒自动启动此过程。图片可点击放大查看：通过图形拖放的方式实现设备层与InfluxDB通讯http://www.ppmy.cn/news/1540772.html相关文章【保姆级】Spring Retry 教程什么是“重试”？为什么要进行“重试”呢？ “重试”（Retry）是一种在编程和软件开发中常见的策略，用于处理在执行操作时可能遇到的临时性错误或异常。当一个操作因为某些原因（如网络问题、服务不可用、资源暂时不可用等）失败时，重试机制会尝试再次执行该操作，以期在下一…阅读更多...MATLAB小波变换图像融合系统二、应用背景及意义 
本课题利用小波变换进行图像的融合&amp;#xff0c;然后对融合的结果进行图像质量的评价。所谓小波变换图像融合就是对多个的信息目标进行一系列的图像提取和合成&amp;#xff0c;进而可以获得对同一个信息目标的更为精确、全面、可靠的高低频图像信息描述。并且也…阅读更多...深度学习-2：数据向量化向量化 
在逻辑回归中&amp;#xff0c;x,w,b都是列向量&amp;#xff0c;若要计算w.T*xb&amp;#xff0c;不向量化的话就需要for循环计算起来很麻烦 
向量化后&amp;#xff0c;使用numpy.dot(w,x)函数即可快速计算 逻辑回归向量化阅读更多...网络编程-UDP以及数据库mysqlUDP通信流程 
服务端客户端有一个邮箱socket()有一个邮箱socket()绑定地址bind()发送数据sendto接收数据recvfrom关闭close()关闭colse() 
//服务端
#include "head.h"
// ./server 10001
int main(int argc,char *argv[])
{// 1、创建socket套接字// 参数1&amp;#xff…阅读更多...git push错误failed to push some refs to解决方法主流解决方法网上全是&amp;#xff0c;例如解决目标仓库和本地仓库的版本冲突&amp;#xff1b;关闭”受保护的仓库“权限。 
本文讲述一种   网上几乎没有文章会讲解的一种可能的解决方式&amp;#xff1a; 
问题描述&amp;#xff1a; 解决方式&amp;#xff1a; 
取消勾选即可阅读更多...【前端】Matter：基础概念与入门Matter.js 是一个 2D 物理引擎&amp;#xff0c;允许开发者轻松创建物理模拟环境&amp;#xff0c;提供了基本的物体、力学和碰撞系统。它适用于物理游戏、动画和仿真项目的开发&amp;#xff0c;能够帮助创建逼真的物理交互效果。 
安装与设置 
在开始使用 Matter.js 之前&amp;#xff0c;我们需要…阅读更多...2024.10月15日- Vue前置基础一 原型和原型链 
1.1 原型 
1.1.1 原型的概念 
在java 中&amp;#xff0c;我们知道一个类是一种事物的抽象&amp;#xff0c;通过这个类可以生成一个个具体的实例对象。我们可以理解为&amp;#xff0c;类提供着生成对象的“模版”。在 JavaScript 中构造函数&amp;#xff08;constructor&amp;#x…阅读更多...自动驾驶---基于dds/ros的通信中间件1 背景 DDS&amp;#xff08;数据分发服务&amp;#xff0c;Data Distribution Service&amp;#xff09;和ROS&amp;#xff08;机器人操作系统&amp;#xff0c;Robot Operating System&amp;#xff09;是两种在各自领域内具有重要影响的技术。它们是两种不同的中间件&amp;#xff0c;并且在分布式系统、尤其是…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:15 +0000</pubDate>
    </item>
    <item>
      <title>【保姆级】Spring Retry 教程</title>
      <link>https://www.ppmy.cn/news/1540771.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【保姆级】Spring Retry 教程news/2025/10/31 22:19:14/什么是“重试”？为什么要进行“重试”呢？“重试”（Retry）是一种在编程和软件开发中常见的策略，用于处理在执行操作时可能遇到的临时性错误或异常。当一个操作因为某些原因（如网络问题、服务不可用、资源暂时不可用等）失败时，重试机制会尝试再次执行该操作，以期在下一次尝试时能够成功。我们今天要用Spring Retry就是为了简化“重试”操作的一套框架首先，上Spring Retry的源码地址：https://github.com/spring-projects/spring-retry感兴趣的同学可以去clone下来瞅瞅~我们要用Spring Retry，自然需要知道它是什么以及能做什么哈——Spring Retry 是 Spring 提供的一个用于处理方法重试的库，它允许在遇到特定异常时自动重试方法的执行，这在处理可能由于瞬时故障导致失败的操作时真的非常非常有用（对于代码逻辑错误自然是重试多少次都没啥用哈_），由于Spring Retry 是通过面向切面编程（即 AOP）提供了一种声明式的重试机制，所以并不会侵入到业务逻辑代码中（so~推荐！）http://www.ppmy.cn/news/1540771.html相关文章MATLAB小波变换图像融合系统二、应用背景及意义 
本课题利用小波变换进行图像的融合&amp;#xff0c;然后对融合的结果进行图像质量的评价。所谓小波变换图像融合就是对多个的信息目标进行一系列的图像提取和合成&amp;#xff0c;进而可以获得对同一个信息目标的更为精确、全面、可靠的高低频图像信息描述。并且也…阅读更多...深度学习-2：数据向量化向量化 
在逻辑回归中&amp;#xff0c;x,w,b都是列向量&amp;#xff0c;若要计算w.T*xb&amp;#xff0c;不向量化的话就需要for循环计算起来很麻烦 
向量化后&amp;#xff0c;使用numpy.dot(w,x)函数即可快速计算 逻辑回归向量化阅读更多...网络编程-UDP以及数据库mysqlUDP通信流程 
服务端客户端有一个邮箱socket()有一个邮箱socket()绑定地址bind()发送数据sendto接收数据recvfrom关闭close()关闭colse() 
//服务端
#include "head.h"
// ./server 10001
int main(int argc,char *argv[])
{// 1、创建socket套接字// 参数1&amp;#xff…阅读更多...git push错误failed to push some refs to解决方法主流解决方法网上全是&amp;#xff0c;例如解决目标仓库和本地仓库的版本冲突&amp;#xff1b;关闭”受保护的仓库“权限。 
本文讲述一种   网上几乎没有文章会讲解的一种可能的解决方式&amp;#xff1a; 
问题描述&amp;#xff1a; 解决方式&amp;#xff1a; 
取消勾选即可阅读更多...【前端】Matter：基础概念与入门Matter.js 是一个 2D 物理引擎&amp;#xff0c;允许开发者轻松创建物理模拟环境&amp;#xff0c;提供了基本的物体、力学和碰撞系统。它适用于物理游戏、动画和仿真项目的开发&amp;#xff0c;能够帮助创建逼真的物理交互效果。 
安装与设置 
在开始使用 Matter.js 之前&amp;#xff0c;我们需要…阅读更多...2024.10月15日- Vue前置基础一 原型和原型链 
1.1 原型 
1.1.1 原型的概念 
在java 中&amp;#xff0c;我们知道一个类是一种事物的抽象&amp;#xff0c;通过这个类可以生成一个个具体的实例对象。我们可以理解为&amp;#xff0c;类提供着生成对象的“模版”。在 JavaScript 中构造函数&amp;#xff08;constructor&amp;#x…阅读更多...自动驾驶---基于dds/ros的通信中间件1 背景 DDS&amp;#xff08;数据分发服务&amp;#xff0c;Data Distribution Service&amp;#xff09;和ROS&amp;#xff08;机器人操作系统&amp;#xff0c;Robot Operating System&amp;#xff09;是两种在各自领域内具有重要影响的技术。它们是两种不同的中间件&amp;#xff0c;并且在分布式系统、尤其是…阅读更多...案例实践 | 以长安链为坚实底层，江海链助力南通民政打造慈善应用标杆案例名称-江海链  ■ 实施单位  中国移动通信集团江苏有限公司南通分公司、中国移动通信集团江苏有限公司  ■ 业主单位  江苏省南通市民政局  ■ 上线时间  2023年12月  ■ 用户群体  南通市民政局、南通慈善总会等慈善组织及全市民众  ■ 用户规模  全市近30家慈善组织&amp;#…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:14 +0000</pubDate>
    </item>
    <item>
      <title>MATLAB小波变换图像融合系统</title>
      <link>https://www.ppmy.cn/news/1540770.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维MATLAB小波变换图像融合系统news/2025/10/31 22:19:13/二、应用背景及意义本课题利用小波变换进行图像的融合，然后对融合的结果进行图像质量的评价。所谓小波变换图像融合就是对多个的信息目标进行一系列的图像提取和合成，进而可以获得对同一个信息目标的更为精确、全面、可靠的高低频图像信息描述。并且也可以充分利用不同的信息源，实现图像的冗余性和信息的互补性，有效地改善和提高了图像的信息清晰度和图像的可观察性。本设计研究论文主要是讲解了小波变换的定义，图像融合的基本定义，以及在现阶段所需要研究的一些热点技术领域和问题，接着详细论述了小波变换图像融合的基本规则、方法和具体操作步骤。并在论文中给出了三种基于小波频率变换的高低频融合算法和程序，即基于系数取大，系数重构的高低频图像融合的算法和程序。最后，对于一个融合图像质量和融合效果的系统来说，融合效果和图像质量的判断和评价方法显得特别重要，本文深入地探讨了融合图像处理系统融合质量的判断和评价方法问题，总结了对融合图像效果的系统主、客观评价的基本标准，作为对融合图像效果系统分析的重要判断和评价标准。三、评价参数图像学与信息技术融合的主要客观影响质量价值评价指标系统主要有四个常用的质量指数,分别为信息熵、标准差、均值、平均值和梯度。1 信息熵（IE）源图像在信息融合前后的信息量将发生变化,所以,计算得出信息熵公式可以真实的用来评判图像进行融合的速度和效果好坏。2 标准差（STD）标准差（中文又称标准偏差、均方差，英语：Standard Deviation，缩写SD），数学符号σ（sigma），在统计学概率论和数学统计中最常用来作为统计衡量图像中一组数据的标准离散程度之用。标准差的定义:为方差开算术的平方根,反映标准差在一组数据中各个体间的标准离散概率程度;标准差与图像的期望值分布之比为图像的标准离差率。此时图像的灰度相对于图像平均值的灰度级离散概率情况,标准差越大,则灰度级信息分布越分散,此时一个图像中所有灰度级信息出现的离散概率越趋于与期望值相等,从而图像包含的灰度级信息量越趋于最大。3 均值（AVG）图像中所有一个像素的平均图像灰度为其值的参数算术值为平均值,对于一个人眼视觉图像的整体表现像素灰度为其值为人眼图像的平均像素亮度。四、GUI界面设计目录提纲第一章 绪论1.1 技术背景1.2 发展现状1.2.1 图像分割介绍1.3 研究意义第二章 数字图像融合的技术简介2.1 像素级融合2.2 特征级融合2.3 决策级融合第三章 小波图像融合算法研究与设计3.1 小波变换算法3.1.1 小波变换算法的原理3.1.2 小波变换介绍3.1.3 保存模板数据3.2 系数重构算法3.3 系数取大3.4 高低频融合3.5 图像融合算法评价3.5.1 信息熵（IE）3.5.2 标准差（STD）3.5.3 均值（AVG）第四章 图像融合的实现4.1 系统界面设计4.2 图像融合实验结果及分析4.2.1 系数重构融合结果对比分析4.2.2 高低频融合结果对比分析第五章 总结与展望参考文献致 谢http://www.ppmy.cn/news/1540770.html相关文章深度学习-2：数据向量化向量化 
在逻辑回归中&amp;#xff0c;x,w,b都是列向量&amp;#xff0c;若要计算w.T*xb&amp;#xff0c;不向量化的话就需要for循环计算起来很麻烦 
向量化后&amp;#xff0c;使用numpy.dot(w,x)函数即可快速计算 逻辑回归向量化阅读更多...网络编程-UDP以及数据库mysqlUDP通信流程 
服务端客户端有一个邮箱socket()有一个邮箱socket()绑定地址bind()发送数据sendto接收数据recvfrom关闭close()关闭colse() 
//服务端
#include "head.h"
// ./server 10001
int main(int argc,char *argv[])
{// 1、创建socket套接字// 参数1&amp;#xff…阅读更多...git push错误failed to push some refs to解决方法主流解决方法网上全是&amp;#xff0c;例如解决目标仓库和本地仓库的版本冲突&amp;#xff1b;关闭”受保护的仓库“权限。 
本文讲述一种   网上几乎没有文章会讲解的一种可能的解决方式&amp;#xff1a; 
问题描述&amp;#xff1a; 解决方式&amp;#xff1a; 
取消勾选即可阅读更多...【前端】Matter：基础概念与入门Matter.js 是一个 2D 物理引擎&amp;#xff0c;允许开发者轻松创建物理模拟环境&amp;#xff0c;提供了基本的物体、力学和碰撞系统。它适用于物理游戏、动画和仿真项目的开发&amp;#xff0c;能够帮助创建逼真的物理交互效果。 
安装与设置 
在开始使用 Matter.js 之前&amp;#xff0c;我们需要…阅读更多...2024.10月15日- Vue前置基础一 原型和原型链 
1.1 原型 
1.1.1 原型的概念 
在java 中&amp;#xff0c;我们知道一个类是一种事物的抽象&amp;#xff0c;通过这个类可以生成一个个具体的实例对象。我们可以理解为&amp;#xff0c;类提供着生成对象的“模版”。在 JavaScript 中构造函数&amp;#xff08;constructor&amp;#x…阅读更多...自动驾驶---基于dds/ros的通信中间件1 背景 DDS&amp;#xff08;数据分发服务&amp;#xff0c;Data Distribution Service&amp;#xff09;和ROS&amp;#xff08;机器人操作系统&amp;#xff0c;Robot Operating System&amp;#xff09;是两种在各自领域内具有重要影响的技术。它们是两种不同的中间件&amp;#xff0c;并且在分布式系统、尤其是…阅读更多...案例实践 | 以长安链为坚实底层，江海链助力南通民政打造慈善应用标杆案例名称-江海链  ■ 实施单位  中国移动通信集团江苏有限公司南通分公司、中国移动通信集团江苏有限公司  ■ 业主单位  江苏省南通市民政局  ■ 上线时间  2023年12月  ■ 用户群体  南通市民政局、南通慈善总会等慈善组织及全市民众  ■ 用户规模  全市近30家慈善组织&amp;#…阅读更多...Qt在iOS平台上的编译配置与打包发布，详细流程Qt在iOS平台上的编译配置与打包发布流程 一、前言 
随着移动应用的普及&amp;#xff0c;越来越多的开发者开始关注跨平台应用开发。Qt作为一款强大的跨平台应用开发框架&amp;#xff0c;不仅支持Windows、Linux等传统桌面平台&amp;#xff0c;还支持iOS和Android等移动平台。本文将重点介绍…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:13 +0000</pubDate>
    </item>
    <item>
      <title>深度学习-2：数据向量化</title>
      <link>https://www.ppmy.cn/news/1540769.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维深度学习-2：数据向量化news/2025/10/31 22:19:12/向量化在逻辑回归中，x,w,b都是列向量，若要计算w.T*x+b，不向量化的话就需要for循环计算起来很麻烦向量化后，使用numpy.dot(w,x)函数即可快速计算逻辑回归向量化http://www.ppmy.cn/news/1540769.html相关文章网络编程-UDP以及数据库mysqlUDP通信流程 
服务端客户端有一个邮箱socket()有一个邮箱socket()绑定地址bind()发送数据sendto接收数据recvfrom关闭close()关闭colse() 
//服务端
#include "head.h"
// ./server 10001
int main(int argc,char *argv[])
{// 1、创建socket套接字// 参数1&amp;#xff…阅读更多...git push错误failed to push some refs to解决方法主流解决方法网上全是&amp;#xff0c;例如解决目标仓库和本地仓库的版本冲突&amp;#xff1b;关闭”受保护的仓库“权限。 
本文讲述一种   网上几乎没有文章会讲解的一种可能的解决方式&amp;#xff1a; 
问题描述&amp;#xff1a; 解决方式&amp;#xff1a; 
取消勾选即可阅读更多...【前端】Matter：基础概念与入门Matter.js 是一个 2D 物理引擎&amp;#xff0c;允许开发者轻松创建物理模拟环境&amp;#xff0c;提供了基本的物体、力学和碰撞系统。它适用于物理游戏、动画和仿真项目的开发&amp;#xff0c;能够帮助创建逼真的物理交互效果。 
安装与设置 
在开始使用 Matter.js 之前&amp;#xff0c;我们需要…阅读更多...2024.10月15日- Vue前置基础一 原型和原型链 
1.1 原型 
1.1.1 原型的概念 
在java 中&amp;#xff0c;我们知道一个类是一种事物的抽象&amp;#xff0c;通过这个类可以生成一个个具体的实例对象。我们可以理解为&amp;#xff0c;类提供着生成对象的“模版”。在 JavaScript 中构造函数&amp;#xff08;constructor&amp;#x…阅读更多...自动驾驶---基于dds/ros的通信中间件1 背景 DDS&amp;#xff08;数据分发服务&amp;#xff0c;Data Distribution Service&amp;#xff09;和ROS&amp;#xff08;机器人操作系统&amp;#xff0c;Robot Operating System&amp;#xff09;是两种在各自领域内具有重要影响的技术。它们是两种不同的中间件&amp;#xff0c;并且在分布式系统、尤其是…阅读更多...案例实践 | 以长安链为坚实底层，江海链助力南通民政打造慈善应用标杆案例名称-江海链  ■ 实施单位  中国移动通信集团江苏有限公司南通分公司、中国移动通信集团江苏有限公司  ■ 业主单位  江苏省南通市民政局  ■ 上线时间  2023年12月  ■ 用户群体  南通市民政局、南通慈善总会等慈善组织及全市民众  ■ 用户规模  全市近30家慈善组织&amp;#…阅读更多...Qt在iOS平台上的编译配置与打包发布，详细流程Qt在iOS平台上的编译配置与打包发布流程 一、前言 
随着移动应用的普及&amp;#xff0c;越来越多的开发者开始关注跨平台应用开发。Qt作为一款强大的跨平台应用开发框架&amp;#xff0c;不仅支持Windows、Linux等传统桌面平台&amp;#xff0c;还支持iOS和Android等移动平台。本文将重点介绍…阅读更多...数据结构与算法——Java实现 41.对称二叉树目录 101. 对称二叉树 思路 代码 Java代码及测试用例 莫道浮云终蔽日 总有雾散云开时 昨日之深渊 今日之浅谈 —— 24.10.20 101. 对称二叉树 给你一个二叉树的根节点 root &amp;#xff0c; 检查它是否轴对称。 示例 1&amp;#xff1a; 输入&amp;#xff1a;root  [1,2,2,3,4,4,3]
输出&amp;am…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:12 +0000</pubDate>
    </item>
    <item>
      <title>网络编程-UDP以及数据库mysql</title>
      <link>https://www.ppmy.cn/news/1540768.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维网络编程-UDP以及数据库mysqlnews/2025/10/31 22:19:10/UDP通信流程服务端客户端有一个邮箱socket()有一个邮箱socket()绑定地址bind()发送数据sendto接收数据recvfrom关闭close()关闭colse()//服务端
#include "head.h"
// ./server 10001
int main(int argc,char *argv[])
{// 1、创建socket套接字// 参数1：代表IPV4// 参数2：数据报套接字 -- UDP// 参数3：通常为0int udp_fd = socket(AF_INET, SOCK_DGRAM, 0);if (udp_fd &lt; 0){perror("socket error!\n");return -1;}// 2、给服务端绑定一个IP地址和端口号，方便与客户端进行数据通信。struct sockaddr_in addr;addr.sin_family = AF_INET;     //地址族: IPV4addr.sin_port = atoi(argv[1]); // 端口号//inet_pton(AF_INET, "127.0.0.1", (struct in_addr*)&amp;addr.sin_addr);addr.sin_addr.s_addr = htonl(INADDR_ANY); // 绑定服务端IP地址bind(udp_fd, (struct sockaddr*)&amp;addr, sizeof(addr));// 3、循环接收客户端的数据char buf[100];struct sockaddr_in cli_addr;int len = sizeof(cli_addr);while(1){bzero(buf, sizeof(buf));recvfrom(udp_fd, buf, sizeof(buf), 0, (struct sockaddr*)&amp;cli_addr, &amp;len);if (strcmp(buf, "quit") == 0){break;}printf("from client: %s\n", buf);}// 4、关闭套接字close(udp_fd);printf("finish!\n");return 0;
}//客户端
#include "head.h"
// ./client 10001
int main(int argc,char *argv[])
{// 1、创建socket套接字// 参数1：代表IPV4// 参数2：数据报套接字 -- UDP// 参数3：通常为0int sfd = socket(AF_INET, SOCK_DGRAM, 0);if (sfd &lt; 0){perror("socket error!\n");return -1;}// 2、设置将要与之通信的服务端的IP地址和端口号，struct sockaddr_in addr;addr.sin_family = AF_INET;     //地址族: IPV4addr.sin_port = atoi(argv[1]); // 端口号inet_pton(AF_INET, "127.0.0.1", (struct in_addr*)&amp;addr.sin_addr);// 循环接收客户端的数据char buf[100];while(1){// 手动输入一个数据bzero(buf, sizeof(buf));fgets(buf, sizeof(buf), stdin);if (strcmp(buf, "quit") == 0){break;}// 将输入的数据发送sendto(sfd, buf, sizeof(buf), 0, (struct sockaddr*)&amp;addr, sizeof(addr));}// 3、关闭套接字close(sfd);printf("finish!\n");return 0;
}#### 网络通信IO模式- 阻塞模式- `read\recv\recvfrom`原本默认属性就是阻塞模式- 阻塞模式不是由函数本身导致，而由文件属性决定- 阻塞模式对于CPU资源的消耗小于非阻塞模式- 非阻塞模式- 获取原属性`int status = fcntl(fd, F_GETFL);`- 新增属性`status |= O_NONBLOCK;`- 重新设置属性`fcntl(fd, F_SETFL, status);`- 信号触发- 注册`SIGIO`信号，当产生信号时执行对应的函数`signal(SIGIO,fun);`- 当`SIGIO`信号产生时，当前进程可以捕捉// 设置有`sfd`套接字输入输出状态改变出发的`SIGIO`// 简而言之：就是设置`SIGIO`的来源是套接字，而非其他`IO``fctnl(sfd, F_SETOWN,getpid());`- 设置服务端套接字为异步模式1. 获取原属性`int status = fcntl(fd, F_GETFL);`2. 新增属性`status |= O_NONBLOCK;`3. 重新设置属性`fcntl(fd, F_SETFL, status);`- 多路复用- 解决的问题：（==用于监测多个套接字的`IO`状态==）以非阻塞的方式检查文件描述符上是否进行`IO`操作。同时检查多个文件描述符，看其中的任意一个是否执行`IO`操作。- 目标：同时==监测==多个文件描述符的状态，查看`IO`系统调用是否可以非阻塞的执行- `select`技术是一种非阻塞方式，使用`select`方式工作的进程或线程可以==监视==我们需要监视的文件描述符的变化情况## 数据库#### 数据库概念及作用概念：是一种数据管理软件，形成无冗余数据，同时提供访问接口作用：存储和管理数据#### 数据库核心数据库管理系统（`DBMS`）`DBMS`提供了很多功能，可通过`SQL`来定义和操作数据，维护数据的完整性和安全性，以及各种数据库管理#### `SQL`结构化查询语言`DDL`    数据定义语言    定义和管理数据对象，如数据库、数据表`DML`    数据操作语言    用于操作数据库中包含的数据`DQL`    数据查询语言    用于数据库数据查询`DCL`    数据控制语言    用于管理数据库的语言，包含管理权限及数据更改#### 数据库的管理（分层管理）库：`database`表：`table`字段：一列表示一个字段记录：一行表示一条记录#### 数据库的安装及验证安装	sudo apt-get install mysql-server mysql-client	//数据库的服务端及客户端数据库的开发软件包sudo apt-get install libmysqlclient-dev	//数据库的开发软件包
查看以安装数据库的版本 	mysql --version登录mysql -u root -p   // 登录本机使用当前这条命令即可mysql -u root -p1  // 1代表密码，跟-p之间没有空格；当前方式不会使用登录远程数据库语法：mysql -h 主机名/IP地址 -u 用户名 -p示例1：mysql -h 192.168.14.61 -u root -p1示例2：mysql -h st-virtual-machine -u root -p1示例3：mysql -h localhost -u root -p1示例4：mysql -h 127.0.0.1 -u root -p1退出exitquitMYSQL数据库操作查询已经存在的数据库所有数据库命令要以;或\g结束show databases;show databases\g创建数据库语法：create database [if not exists] 数据库名称create database XA2407命名规则必须合法，不得同名名称可以由任意字母、数字、"_"、"$"组成，可以是上述任意字符开头，但是不能全部为数字删除数据库语法：drop database [if exists] 数据库名称;示例1：drop database XA2407切换数据库语法：use 数据库名称示例：use XA2407表结构1、查询表show tables;2、创建表语法：create table [if not exists] 表名(字段名1 类型 [约束条件], .....);字段数据类型：数值型      (常用：tinyint, int, float)字符串型    (常用：varchar, blob, text)时间日期型   (常用：date, time, datetime)六大约束条件：主键约束(primary key)        用于唯一表示记录唯一约束(unique key)         设置字段的值是唯一的非空约束(not null)           字段值不允许为空自增约束(auto_increment)     在一个值的基础上自增1(只能修饰整型字段)外键约束(foreign key)        设置为其它表的外键默认约束(default)            设置字段的默认值     示例1: create table if not exists person(id int, name varchar(20), age int);示例2: create table person1(id int primary key, name varchar(20), age int);示例3: create table person2(id int primary key, name varchar(20) not null, age int default '18');示例4: create table person3(id int, name varchar(20)) default charset=utf8;3、查看表结构示例1：describe 表名;示例2：desc 表名;示例3：show create table 表名;4、删除表语法：drop table 表名;5、表结构操作修改表名语法：alter table 旧表名 rename [to] 新表名;示例1：alter table person rename AAAA;示例2：alter table AAAA rename to BBBB;添加字段在表的最后一个位置添加字段语法：alter table 表名 add 字段名 字段类型 [约束条件];示例1：alter table BBBB add score float;示例2：alter table BBBB add score1 float not null;在表的第一个位置添加字段语法：alter table 表名 add 字段名 字段类型 [约束条件] first;示例1：alter table BBBB add address varchar(20) first;示例2：alter table BBBB add sex varchar(20) not null first;在表的指定位置添加字段语法：alter table 表名 add 字段名 字段类型 [约束条件] after 字段名;示例1：alter table BBBB add ttt varchar(20) after id;示例2：alter table BBBB add yyy varchar(20) not null after name;修改字段名称和类型语法：alter table 表名 change 旧字段名 新字段名 字段类型;示例1：alter table BBBB change ttt new_feild varchar(20);示例2：alter table BBBB change yyy qqqq float;示例3：alter table BBBB change new_feild new_feild float;备注1: 如果“新字段名”与“旧字段名”相同, 而类型不同，则相当于是修改类型。备注2: 如果“新字段名”与“旧字段名”的类型相同, 而名称不同，则相当于是修改字段名称。修改字段数据类型语法：alter table 表名 modify 字段名 新字段类型;示例1：alter table BBBB modify name blob;修改字段顺序将字段移动到第一行语法：alter table 表名 modify 字段名 新字段类型 first;示例1：alter table BBBB modify qqqq float first;将字段移动到某字段之后语法：alter table 表名 modify 字段名1 字段类型 after 字段名2;示例1：alter table BBBB modify address varchar(20) after socre;示例2：alter table BBBB modify sex tinyint after socre1;//备注：如果字段类型与原字段类型不同，相当于修改字段类型的同时又调整了字段顺序删除字段语法：alter table 表名 drop 字段名;示例1：alter table BBBB drop qqqq;表创建后，设置对字段约束条件的修改/增加增加字段主键/唯一约束(primary key/unique key)语法：alter table 表名 add 约束条件(字段名)示例：alter table BBBB add primary key(age)增加字段非空约束(not null)语法：alter table 表名 modify 字段名 字段类型 约束条件;示例：alter table BBBB modify sex tinyint not null;设置默认约束(default)语法：alter table 表名 alter 字段名 set default '默认值';示例：alter table BBBB alter new_feild set default '1.35';设置外键约束(foreign key)语法：在创建表的时候：外键的创建语法如下：constraint 外键名 foreign key 字段名1[,字段名2...] references 主表名 主键列1[,主键列2...]示例：create table tb_dept (id int PRIMARY KEY,name varchar(10),locate varchar(50));create table tb_emp (id int PRIMARY KEY,name varchar(10),dpt_id int,Salary float, CONSTRAINT fk_dept_id FOREIGN KEY(dpt_id) REFERENCES  tb_dept(id));      语法：在表创建后：外键的创建语法如下：ALTER TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY(字段) REFERENCES 主表名(主键列) [ON DELETE 参数];增加字段并设置为自增约束语法： alter table 表名 add column 新字段 新字段类型 auto_increment primary key;示例： alter table BBBB add column nnnn tinyint auto_increment primary key;表创建后,对于字段约束条件的删除取消主键/外键约束(primary key/foreign key)语法：alter table 表名 drop 约束条件;示例：alter table BBBB drop primary key;取消唯一约束(unique key)语法：alter table 表名 drop index 字段名;示例：alter table BBBB drop index id;取消默认约束(default)语法：alter table 表名 alter 字段名 drop default;示例：alter table BBBB alter new_feild drop default;取消非空/自增约束(not null / auto_increment)语法：alter table 表名 modify 字段名 字段类型;示例1：alter table BBBB modify sex tinyint;修改字符集修改表和所有数字段的字符集语法：alter table 表名 convert to character set utf8;示例：alter table BBBB convert to character set utf8;修改表中指定字段的字符集语法：alter table 表名 change 字段名 字段名 字段类型 character set utf8;语法：alter table BBBB change address address varchar(20) character set utf8;数据操作1、添加数据单条插入(非空字段、主键字段在插入数据时不可被省略)语法：insert into 表名 [(字段1, 字段2, 字段3, …)] values(值1,值2,值3,…);示例1：insert into BBBB (id,name,socre1,sex) values(1,'0101',1.22,15);示例2：insert into BBBB values(1,'0101',1.22,15);示例3：insert into BBBB (id,socre1) values(2,2.22);批量插入语法：insert into 表名 [(字段1,字段2,字段3,…)] values(值11,值21,值31,…), (值12,值22,值32,…),…;示例1：insert into BBBB (id,name,socre1,sex) values(1,'0101',1.22,15),(2,'0202',2.22,25),(3,'0303',3.22,35);示例2：insert into BBBB values(1,'0101',1.22,15),(2,'0202',2.22,25),(3,'0303',3.22,35);示例3：insert into BBBB (id,socre1) values(5,5.22),(6,7.22);2、删除数据删除特定数据语法：delete from 表名 where  条件;示例1：delete from BBBB where name='0101';删除全部数据语法：delete from 表名;示例1：delete from BBBB; 3、更新数据更新字段中所有的数据语法：update 表名 set 字段1=值1, 字段2=值2, 字段3=值3, …;示例：update BBBB set name='1234';更新特定数据语法：update 表名 set 字段1=值1,字段2=值2, 字段3=值3,… where 条件;示例1：update BBBB set id=100 where id=3;示例2：update BBBB set id=100 where socre1&gt;5;示例3：update BBBB set id=123 where sex is null;4、查询数据查询所有数据语法：select * from 表名;示例：select * from BBBB;查询指定字段数据语法：select 字段1,字段2... from 表名;示例：select id,sex from BBBB;  查询数据时去除重复数据语法：select distinct 字段1,字段2... from 表名;示例1：select distinct id from BBBB;示例2：select distinct id,sex from BBBB;   实现数字四则运算数据查询(+ - * / %)语法：select 字段 运算符 运算符操作数... from 表名;示例1：select id+socre1 from BBBB;示例2：select id,socre1, id*socre1 from BBBB;示例3：select id,socre1, id*socre1 as total from BBBB;示例4：select id as a111, socre1 as b222, id*socre1 as total from BBBB;设置显示格式的数据查询 CONCAT()语法：select 字段 as 字符串 from 表名;示例：select id as sss from BBBB;语法：select CONCAT(字段1, 字符串, 字段2) from 表名;示例：select CONCAT(id,"--&gt;",sex) from BBBB;示例：select CONCAT(id,"--&gt;",sex," : ", name) from BBBB;示例：select CONCAT(id,"--&gt;",sex," : ", name) as total from BBBB;限制输出记录的条数语法：select * from 表名 limit 起始索引,总显示条数;示例：select * from BBBB limit 3,2;限制输出记录的条数mysql 支持的比较运算符和逻辑运算符&gt;,&lt;,=,!=,&gt;=,&lt;=,         AND(&amp;&amp;) ,OR(||),XOR(异或),NOT(!)单条件 数据查询语法：select 字段 from 表名 where 条件;示例：select id from BBBB where id=2;示例：select * from BBBB where id=2;多条件 数据查询语法：select 字段 from 表名 where 条件;示例：select * from BBBB where id=2 &amp;&amp; sex=25;示例：select * from BBBB where id=2 AND sex=25;带 between and 关键字的范围查询语法：select 字段 … from 表名 where 字段 between 值1 AND 值2示例：select * from BBBB where socre1 between 2 AND 4;不符合范围的数据查询语法：select 字段 … from 表名 where 字段 not between 值1 AND 值2示例：select * from BBBB where socre1 not between 2 AND 4;带 IS NULL 关键字的空值查询语法：select 字段 … from 表名 where 字段名 is null;示例：select * from BBBB where sex is null;带 IS NOT NULL 关键字的非空值查询语法：select 字段 … from 表名 where 字段名 is not null;示例：select * from BBBB where sex is not null;示例：select * from BBBB where sex is null AND name is not null;带IN关键字的集合查询 语法：select 字段 … from 表名 where 字段名 in (值1,值2, …)示例：select * from BBBB where name in (2, 100);带 NOT IN关键字的非集合查询 语法：select 字段 … from 表名 where 字段名 not in (值1,值2, …)示例：select * from BBBB where name not in (2, 100);带 LIKE 关键字的模式查询LIKE 关键字支持的通配符 “_” : 通配单个字符;“%”:  通配任意字符，可以是0个字符，1个字符，或多个字符。语法：select 字段 … from 表名 where 字段名 like '值1';示例：select * from BBBB where id like '%3';排序查询语法：select 字段 … from 表名 order by 字段名 ASC/DESC;ASC 升序; DESC 降序示例：select * from BBBB order by id asc;示例：select * from BBBB order by id desc;分组查询语法：select 字段 … from 表名 group by 字段名 [having 条件];示例：select id from BBBB group by id;示例：select id, socre1 from BBBB group by id, socre1;示例：select sex from BBBB group by sex having sex is null;示例：select id, count(socre1) from BBBB group by id, socre1;示例：select socre1, count(socre1) from BBBB group by socre1;聚合函数查询：COUNT函数：统计记录行的总数select count(字段名) from 表名;注意：如果字段名为 *,计算表中的总行数,不管某字段是否为NULL如果指定了具体字段名,会忽略空值的行SUM函数：统计某列数据的和select sum(字段名) from 表名;AVG函数：统计某列数据的平均值select sum(字段名) from 表名;MAX函数：统计某列数据的最大值select max(字段名) from 表名;MIN函数：统计某列数据的最小值select min(字段名) from 表名;http://www.ppmy.cn/news/1540768.html相关文章git push错误failed to push some refs to解决方法主流解决方法网上全是&amp;#xff0c;例如解决目标仓库和本地仓库的版本冲突&amp;#xff1b;关闭”受保护的仓库“权限。 
本文讲述一种   网上几乎没有文章会讲解的一种可能的解决方式&amp;#xff1a; 
问题描述&amp;#xff1a; 解决方式&amp;#xff1a; 
取消勾选即可阅读更多...【前端】Matter：基础概念与入门Matter.js 是一个 2D 物理引擎&amp;#xff0c;允许开发者轻松创建物理模拟环境&amp;#xff0c;提供了基本的物体、力学和碰撞系统。它适用于物理游戏、动画和仿真项目的开发&amp;#xff0c;能够帮助创建逼真的物理交互效果。 
安装与设置 
在开始使用 Matter.js 之前&amp;#xff0c;我们需要…阅读更多...2024.10月15日- Vue前置基础一 原型和原型链 
1.1 原型 
1.1.1 原型的概念 
在java 中&amp;#xff0c;我们知道一个类是一种事物的抽象&amp;#xff0c;通过这个类可以生成一个个具体的实例对象。我们可以理解为&amp;#xff0c;类提供着生成对象的“模版”。在 JavaScript 中构造函数&amp;#xff08;constructor&amp;#x…阅读更多...自动驾驶---基于dds/ros的通信中间件1 背景 DDS&amp;#xff08;数据分发服务&amp;#xff0c;Data Distribution Service&amp;#xff09;和ROS&amp;#xff08;机器人操作系统&amp;#xff0c;Robot Operating System&amp;#xff09;是两种在各自领域内具有重要影响的技术。它们是两种不同的中间件&amp;#xff0c;并且在分布式系统、尤其是…阅读更多...案例实践 | 以长安链为坚实底层，江海链助力南通民政打造慈善应用标杆案例名称-江海链  ■ 实施单位  中国移动通信集团江苏有限公司南通分公司、中国移动通信集团江苏有限公司  ■ 业主单位  江苏省南通市民政局  ■ 上线时间  2023年12月  ■ 用户群体  南通市民政局、南通慈善总会等慈善组织及全市民众  ■ 用户规模  全市近30家慈善组织&amp;#…阅读更多...Qt在iOS平台上的编译配置与打包发布，详细流程Qt在iOS平台上的编译配置与打包发布流程 一、前言 
随着移动应用的普及&amp;#xff0c;越来越多的开发者开始关注跨平台应用开发。Qt作为一款强大的跨平台应用开发框架&amp;#xff0c;不仅支持Windows、Linux等传统桌面平台&amp;#xff0c;还支持iOS和Android等移动平台。本文将重点介绍…阅读更多...数据结构与算法——Java实现 41.对称二叉树目录 101. 对称二叉树 思路 代码 Java代码及测试用例 莫道浮云终蔽日 总有雾散云开时 昨日之深渊 今日之浅谈 —— 24.10.20 101. 对称二叉树 给你一个二叉树的根节点 root &amp;#xff0c; 检查它是否轴对称。 示例 1&amp;#xff1a; 输入&amp;#xff1a;root  [1,2,2,3,4,4,3]
输出&amp;am…阅读更多...C++高阶：红黑树实现目录 
一.红黑树的概念 
1.1红黑树的规则 
1.2红黑树的效率 
二.红黑树的实现 
2.1红黑树的结构 2.2红黑树的插入 
2.2.1插入的大致过程 
2.2.2情况一&amp;#xff1a;变色 
​编辑 2.2.3情况二&amp;#xff1a;单旋变色 2.2.4情况三&amp;#xff1a;双旋变色 2.3插入代码实现 
2.4红黑树的…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:11 +0000</pubDate>
    </item>
    <item>
      <title>git push错误failed to push some refs to解决方法</title>
      <link>https://www.ppmy.cn/news/1540767.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维git push错误failed to push some refs to解决方法news/2025/10/31 22:19:09/主流解决方法网上全是，例如解决目标仓库和本地仓库的版本冲突；关闭”受保护的仓库“权限。本文讲述一种   网上几乎没有文章会讲解的一种可能的解决方式：问题描述：解决方式：取消勾选即可http://www.ppmy.cn/news/1540767.html相关文章【前端】Matter：基础概念与入门Matter.js 是一个 2D 物理引擎&amp;#xff0c;允许开发者轻松创建物理模拟环境&amp;#xff0c;提供了基本的物体、力学和碰撞系统。它适用于物理游戏、动画和仿真项目的开发&amp;#xff0c;能够帮助创建逼真的物理交互效果。 
安装与设置 
在开始使用 Matter.js 之前&amp;#xff0c;我们需要…阅读更多...2024.10月15日- Vue前置基础一 原型和原型链 
1.1 原型 
1.1.1 原型的概念 
在java 中&amp;#xff0c;我们知道一个类是一种事物的抽象&amp;#xff0c;通过这个类可以生成一个个具体的实例对象。我们可以理解为&amp;#xff0c;类提供着生成对象的“模版”。在 JavaScript 中构造函数&amp;#xff08;constructor&amp;#x…阅读更多...自动驾驶---基于dds/ros的通信中间件1 背景 DDS&amp;#xff08;数据分发服务&amp;#xff0c;Data Distribution Service&amp;#xff09;和ROS&amp;#xff08;机器人操作系统&amp;#xff0c;Robot Operating System&amp;#xff09;是两种在各自领域内具有重要影响的技术。它们是两种不同的中间件&amp;#xff0c;并且在分布式系统、尤其是…阅读更多...案例实践 | 以长安链为坚实底层，江海链助力南通民政打造慈善应用标杆案例名称-江海链  ■ 实施单位  中国移动通信集团江苏有限公司南通分公司、中国移动通信集团江苏有限公司  ■ 业主单位  江苏省南通市民政局  ■ 上线时间  2023年12月  ■ 用户群体  南通市民政局、南通慈善总会等慈善组织及全市民众  ■ 用户规模  全市近30家慈善组织&amp;#…阅读更多...Qt在iOS平台上的编译配置与打包发布，详细流程Qt在iOS平台上的编译配置与打包发布流程 一、前言 
随着移动应用的普及&amp;#xff0c;越来越多的开发者开始关注跨平台应用开发。Qt作为一款强大的跨平台应用开发框架&amp;#xff0c;不仅支持Windows、Linux等传统桌面平台&amp;#xff0c;还支持iOS和Android等移动平台。本文将重点介绍…阅读更多...数据结构与算法——Java实现 41.对称二叉树目录 101. 对称二叉树 思路 代码 Java代码及测试用例 莫道浮云终蔽日 总有雾散云开时 昨日之深渊 今日之浅谈 —— 24.10.20 101. 对称二叉树 给你一个二叉树的根节点 root &amp;#xff0c; 检查它是否轴对称。 示例 1&amp;#xff1a; 输入&amp;#xff1a;root  [1,2,2,3,4,4,3]
输出&amp;am…阅读更多...C++高阶：红黑树实现目录 
一.红黑树的概念 
1.1红黑树的规则 
1.2红黑树的效率 
二.红黑树的实现 
2.1红黑树的结构 2.2红黑树的插入 
2.2.1插入的大致过程 
2.2.2情况一&amp;#xff1a;变色 
​编辑 2.2.3情况二&amp;#xff1a;单旋变色 2.2.4情况三&amp;#xff1a;双旋变色 2.3插入代码实现 
2.4红黑树的…阅读更多...阿里云验证码短信发送服务搭建（flask)参考&amp;#xff1a;https://next.api.aliyun.com/api-tools/sdk/Dysmsapi?version2017-05-25&amp;languagejava-async-tea&amp;tabprimer-doc 
我们需要思考验证服务一些要求&amp;#xff1a; 
1.验证码只能被验证一次&amp;#xff0c;所以需要状态字段 2.验证码有失效时间&amp;#xff0c;超…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:09 +0000</pubDate>
    </item>
    <item>
      <title>【前端】Matter：基础概念与入门</title>
      <link>https://www.ppmy.cn/news/1540766.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【前端】Matter：基础概念与入门news/2025/10/31 22:19:08/Matter.js 是一个 2D 物理引擎，允许开发者轻松创建物理模拟环境，提供了基本的物体、力学和碰撞系统。它适用于物理游戏、动画和仿真项目的开发，能够帮助创建逼真的物理交互效果。安装与设置在开始使用 Matter.js 之前，我们需要将它集成到项目中。可以通过以下几种方式引入 Matter.js：使用 CDN 引入最简单的方式是通过 CDN 引入：&lt;scriptsrc="https://cdn.jsdelivr.net/npm/matter-js@0.19.0/build/matter.min.js"&gt;&lt;/script&gt;使用 npm 安装如果使用 npm 或 Node.js 环境进行开发，可以使用以下命令安装 Matter.js：npminstallmatter-js安装完成后，可以在代码中导入它：constMatter=require('matter-js');创建基本环境在项目中创建一个基本的物理环境是学习 Matter.js 的第一步。以下是一个简单的示例，展示了如何创建一个物理世界和一个物体。创建 HTML 页面首先，在 HTML 文件中设置一个&lt;canvas&gt;标签，用于显示物理场景：&lt;!DOCTYPEhtml&gt;&lt;htmllang="en"&gt;&lt;head&gt;&lt;metacharset="UTF-8"&gt;&lt;metaname="viewport"content="width=device-width, initial-scale=1.0"&gt;&lt;title&gt;Matter.js Example&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;canvasid="world"&gt;&lt;/canvas&gt;&lt;scriptsrc="https://cdn.jsdelivr.net/npm/matter-js@0.19.0/build/matter.min.js"&gt;&lt;/script&gt;&lt;scriptsrc="app.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;创建物理世界在app.js文件中，我们将定义物理世界，并添加一些物体。// 引入Matter.js模块const{Engine,Render,Runner,World,Bodies}=Matter;// 创建物理引擎constengine=Engine.create();// 创建渲染器constrender=Render.create({element:document.body,// 将渲染结果附加到页面engine:engine,// 绑定引擎canvas:document.getElementById('world'),// 选择显示的canvasoptions:{width:800,// 画布宽度height:600,// 画布高度wireframes:false// 禁用线框模式，使用实体渲染}});// 创建一个矩形地板constground=Bodies.rectangle(400,580,810,60,{isStatic:true});// 创建一个圆形物体constball=Bodies.circle(400,200,40,{restitution:0.7});// 将物体添加到世界中World.add(engine.world,[ground,ball]);// 启动引擎Engine.run(engine);// 启动渲染器Render.run(render);在这个示例中，我们创建了一个物理引擎、一个渲染器，并在 800x600 的画布中创建了两个物体：一个地板和一个圆形物体。Engine.create()：创建一个新的物理引擎。Render.create()：创建渲染器，将物理世界绘制到 HTML 页面上的&lt;canvas&gt;中。Bodies.rectangle()和Bodies.circle()：用于创建矩形和圆形的刚体。World.add()：将物体添加到物理世界中。运行物理引擎我们使用Engine.run()启动物理引擎，使用Render.run()启动渲染器。这样，物理模拟就会自动运行，物体会按照物理规则进行交互。基本物理引擎原理在 Matter.js 中，物理世界的核心组件包括引擎 (Engine)、世界 (World)、刚体 (Body)和渲染器 (Render)。以下是这些核心概念的简要介绍：引擎 (Engine)引擎是 Matter.js 的核心组件，负责管理物理模拟。它会更新物体的状态（如位置、速度），并处理碰撞等事件。引擎通过Engine.create()方法创建。世界 (World)世界是一个容器，用于存放所有的物体。你可以使用World.add()方法将刚体添加到世界中。世界中包含了所有的物理实体及其交互规则。刚体 (Body)刚体是 Matter.js 中的基本物理单位，代表世界中的一个物体。Matter.js 提供了各种方法创建不同形状的刚体，例如矩形、圆形和多边形。常用的刚体类型：Bodies.rectangle(x, y, width, height, options)：创建矩形。Bodies.circle(x, y, radius, options)：创建圆形。选项options中可以配置刚体的物理属性，如摩擦力、弹性等。渲染器 (Render)渲染器负责将物理世界渲染到页面上。默认渲染器会以简单的形状显示物体，但我们也可以定制渲染效果。创建简单物体在 Matter.js 中，我们可以创建各种形状和大小的刚体，并设置它们的物理属性。以下是一些常见物体的创建方法：创建矩形constbox=Bodies.rectangle(400,200,80,80);World.add(engine.world,box);创建圆形constcircle=Bodies.circle(300,100,50);World.add(engine.world,circle);设置物体的属性刚体的属性可以通过options参数设置，例如密度、摩擦力、弹性等：constcustomCircle=Bodies.circle(300,100,50,{density:0.04,friction:0.01,restitution:0.8});World.add(engine.world,customCircle);属性说明：density：密度，影响物体的质量。friction：摩擦力，控制物体间的摩擦效果。restitution：弹性，控制物体的反弹能力（0 表示不反弹，1 表示完全反弹）。小结在本教程中，我们介绍了 Matter.js 的基本概念，并通过代码展示了如何设置一个简单的物理场景。你学会了如何创建引擎、世界和物体，并了解了刚体的基本属性。接下来，你可以尝试为物体添加更多的物理属性，或创建复杂的物体组合，进一步深入学习 Matter.js 的物理引擎原理和更多高级功能。继续探索 Matter.js 的功能吧！http://www.ppmy.cn/news/1540766.html相关文章2024.10月15日- Vue前置基础一 原型和原型链 
1.1 原型 
1.1.1 原型的概念 
在java 中&amp;#xff0c;我们知道一个类是一种事物的抽象&amp;#xff0c;通过这个类可以生成一个个具体的实例对象。我们可以理解为&amp;#xff0c;类提供着生成对象的“模版”。在 JavaScript 中构造函数&amp;#xff08;constructor&amp;#x…阅读更多...自动驾驶---基于dds/ros的通信中间件1 背景 DDS&amp;#xff08;数据分发服务&amp;#xff0c;Data Distribution Service&amp;#xff09;和ROS&amp;#xff08;机器人操作系统&amp;#xff0c;Robot Operating System&amp;#xff09;是两种在各自领域内具有重要影响的技术。它们是两种不同的中间件&amp;#xff0c;并且在分布式系统、尤其是…阅读更多...案例实践 | 以长安链为坚实底层，江海链助力南通民政打造慈善应用标杆案例名称-江海链  ■ 实施单位  中国移动通信集团江苏有限公司南通分公司、中国移动通信集团江苏有限公司  ■ 业主单位  江苏省南通市民政局  ■ 上线时间  2023年12月  ■ 用户群体  南通市民政局、南通慈善总会等慈善组织及全市民众  ■ 用户规模  全市近30家慈善组织&amp;#…阅读更多...Qt在iOS平台上的编译配置与打包发布，详细流程Qt在iOS平台上的编译配置与打包发布流程 一、前言 
随着移动应用的普及&amp;#xff0c;越来越多的开发者开始关注跨平台应用开发。Qt作为一款强大的跨平台应用开发框架&amp;#xff0c;不仅支持Windows、Linux等传统桌面平台&amp;#xff0c;还支持iOS和Android等移动平台。本文将重点介绍…阅读更多...数据结构与算法——Java实现 41.对称二叉树目录 101. 对称二叉树 思路 代码 Java代码及测试用例 莫道浮云终蔽日 总有雾散云开时 昨日之深渊 今日之浅谈 —— 24.10.20 101. 对称二叉树 给你一个二叉树的根节点 root &amp;#xff0c; 检查它是否轴对称。 示例 1&amp;#xff1a; 输入&amp;#xff1a;root  [1,2,2,3,4,4,3]
输出&amp;am…阅读更多...C++高阶：红黑树实现目录 
一.红黑树的概念 
1.1红黑树的规则 
1.2红黑树的效率 
二.红黑树的实现 
2.1红黑树的结构 2.2红黑树的插入 
2.2.1插入的大致过程 
2.2.2情况一&amp;#xff1a;变色 
​编辑 2.2.3情况二&amp;#xff1a;单旋变色 2.2.4情况三&amp;#xff1a;双旋变色 2.3插入代码实现 
2.4红黑树的…阅读更多...阿里云验证码短信发送服务搭建（flask)参考&amp;#xff1a;https://next.api.aliyun.com/api-tools/sdk/Dysmsapi?version2017-05-25&amp;languagejava-async-tea&amp;tabprimer-doc 
我们需要思考验证服务一些要求&amp;#xff1a; 
1.验证码只能被验证一次&amp;#xff0c;所以需要状态字段 2.验证码有失效时间&amp;#xff0c;超…阅读更多...智能听诊器：宠物健康数据的守护者智能听诊器的出现&amp;#xff0c;为宠物健康数据的管理提供了新的解决方案。它能够收集宠物的生理数据&amp;#xff0c;并将其安全地存储在云端&amp;#xff0c;这样即使宠物主人更换设备或遗失数据&amp;#xff0c;也能轻松恢复宠物的健康记录。这种数据的长期保存和备份&amp;#xff0c;对于宠物…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:08 +0000</pubDate>
    </item>
    <item>
      <title>2024.10月15日- Vue前置基础</title>
      <link>https://www.ppmy.cn/news/1540765.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维2024.10月15日- Vue前置基础news/2025/10/31 22:19:07/一 原型和原型链1.1 原型1.1.1 原型的概念在java 中，我们知道一个类是一种事物的抽象，通过这个类可以生成一个个具体的实例对象。我们可以理解为，类提供着生成对象的“模版”。在 JavaScript 中构造函数（constructor）就起着“模板”的作用。 注意：构造函数的首字母大写，这是约定。//...构造函数
function Person(name, age) {this.name = name;this.age = age;
}通过构造函数，我们可以生成实例化的对象。let p1 = new Person("张三", 21)
let p2 = new Person("李四", 18)
...在js中，我们也知道，函数也是一个对象，那么函数这个对象的模版是谁呢，其实就是我们要讲的原型这个东西。1.1.2 怎么获取原型1）使用构造函数的属性prototyoefunction Person(name, age) {this.name = name;this.age = age;
}
console.dir(Person);打印构造函数时，我们可以看到里面有好几个属性，其中一个prototype，这个属性指向的就是构造函数的原型。该属性的访问，使用构造函数名.属性的方式来访问，比如该案例中的构造函数Person的访问格式：Person.prototype。 或者按照下图方式也可以看到。这个属性，我们也称之为显式原型其他属性如下：arguments: 就是用来存储调用函数时的形参的，是一个伪数组对象caller: 指向的是本函数的调用者，也就是谁调用本函数，就指向的谁length: 该函数的参数个数name: 该函数的名字2）使用实例的隐藏属性__proto__使用构造函数创建的每一个对象里，都隐藏着一个属性__proto__，该属性指向的也是构造函数的原型，我们也称之为隐式原型==但是这种获取方式，在生产环境中慎用，因为并不是所有的浏览器都支持这个属性，这里我们只是学习和了解。==function Person(name, age) {this.name = name;this.age = age;
}
console.log(Person.prototype);
​
let p1 = new Person('张三', 21);
console.log(p1.__proto__);
console.log(p1.__proto__ === Person.prototype); //true3）使用Object.getPrototypeOf()方法这个是最直接的方法，它返回指定对象的原型，即[[Prototype]]。function Person(name, age) {this.name = name;this.age = age;
}
console.log(Person.prototype);
​
let p1 = new Person('张三', 21);
let pro = Object.getPrototypeOf(p1);
console.log(pro === Person.prototype); //true1.1.3 构造函数、实例、原型的关系1.1.4 原型的作用每一个实例对象都有自己的属性和方法，由于无法做到数据共享，导致资源的浪费。因此原型被设计出来的作用，就是为了实现属性和方法的共享。在原型上定义的属性和方法可以被由该构造函数创建出来的所有对象实例共享。这样可以节省内存空间，不需要为每个对象都单独的设计相同的属性或者方法了。function Person(name, age) {this.name = name;this.age = age;
}
​
let p1 = new Person("张三", 21)
let p2 = new Person("李四", 20)
// 在原型上绑定一个gender属性， 那么所有的实例对象，也都可以`继承`这个属性
Person.prototype.gender = '女'
// 在实例对象上找该属性，如果找到了就直接使用，如果没有找到，就向上找，去实例原型上找。
console.log(p1.gender, p2.gender); // 女 女
​
// 在原型上绑定方法sayHi。所有的实例对象上，也都继承了这个方法
Person.prototype.sayHi = function () {console.log("你好！我是中国人");// console.log(this);  //  函数里的this, 谁调用该函数，this就指向谁
}
p1.sayHi()
p2.sayHi()
​
// 通过实例修改继承原型上的属性值， 实际上是实例对象新添加了一个与原型属性同名的属性而已。实例对象并不会覆盖原型上的属性值
p1.gender = '男'
console.log(p2.gender);
​
​
​
​
// 当然，实例自己独有的属性，方法，原型上是不可能有的,也不会和其他实例共享的
p1.hello = function () {console.log("我是实例p1的方法");
}
p1.hello()
// p2.hello()  //报错  Uncaught TypeError: p2.hello is not a function==注意：==原型决定的是实例的初始属性和方法1.2 原型链1.2.1 原型链简介当访问一个对象的属性或方法时，首先JavaScript引擎会从对象自身上去找，如果找不到，就会往原型中去找，即__proto__，也就是它构造函数的prototype中。如果原型中找不到呢？因为构造函数也是对象，实例原型也是对象，他们也都有__proto__，就会往原型上去找，这样就形成了链式的结构，称为原型链原型链的作用JavaScript中没有传统的类继承概念，而是通过原型链实现继承。一个对象可以通过原型链继承另一个对象的属性和方法。1.2.2 原型链图解二 模块化编程2.1简介2.1.1 没有模块化编程时的影响1）引入方式都是通过&lt;script src=""&gt;标签来引入到同一个html文件中。&lt;script src="lib.js"&gt;&lt;/script&gt; &lt;!-- 第三方库 --&gt;   
&lt;script src="utils.js"&gt;&lt;/script&gt;                 
&lt;script src="app.js"&gt;&lt;/script&gt;2）命名空间的问题当我们引入多个js文件，不同的js文件可能会有相同的变量名字，那么后引入的就会覆盖先引入的。即所有的js文件都是再全局空间进行定义的，每个js文件没有自己私有的命名空间。3）依赖关系假如app.js文件中使用了lib.js文件中的函数，那么在html中，必须先引入lib.js，再引入app.js，保证引入顺序的正确性，才不会报错。如果文件之间的依赖关系很复杂，这样的引入顺序就非常难以维护。2.1.2 模块化编程模块化编程，是指将复杂的代码拆分为多个独立的模块，每个模块负责完成特定的功能。某一个模块，可以通过使用export关键字将代码导出成为模块；一个模块也可以通过使用import关键字导入其他模块到该模块。模块化编程有以下优点：防止命名冲突，每个模块都有自己的命名空间代码复用，每个模块可以被其他多个模块引用高维护性，修改一个模块其他引用该模块的地方都改变确保引入顺序的正确性，使用模块化之后一般都是在自己的中引入所依赖的模块，所以避免了依赖顺序的引入问题2.1.3 常用的模块化范式CommonJS： 主要用在Node.js环境下AMD:是一种用于浏览器环境的异步模块加载规范，主要用于解决浏览器中多个脚本文件的依赖问题。ESM（ECMAScript Modules）: 是 JavaScript 的内置模块系统，它已经成为 Web 和 Node.js 的标准。TypeScript：TypeScript 是 JavaScript 的超集，它提供了静态类型检查和其他高级特性，非常适合模块化开发。2.2 ESM范式的语法模块功能主要由两个命令构成:export和 importexport命令：导出(暴露)模块，可以让其他模块来发现和引入该模块。 有三种暴露方式1. 分别暴露
2. 统一暴露
3. 默认暴露import命令：导入(引入)其他模块的功能到该模块(文件)中2.2.1 export暴露模块1）分别暴露：就是在准备暴露的数据前面，添加export关键字a.js//分别暴露
export let name = '李白'
export const job = '诗人'
export const person = { name: '张飞', job: '辅助', sayHi: function () { console.log(this.name, this.job); } }
​
export function isPrime(num) {let f = true;for (let i = 2; i &lt; num - 1; i++) {if (num % i == 0) {f = false;}}if (f) {console.log(num, "是素数");} else {console.log(num, "不是素数");}
}2）统一暴漏：export {变量名1,变量名2，……}b.jsconst isMarry = true;
const student = { name: "小明", age: 21, gender: '男' }
function factorial(num) {if (num == 1) {return num;}return num *= factorial(num - 1)
}
​
export { isMarry, student, factorial }3）默认暴露只能暴露一个对象(只能写一次)c.js//第二种写法，直接在对象前面书写
//const obj = {
export default {name: "牛魔",age: 21,hobbies: ['sport', 'book'],fs: { f1() { console.log("我是第一个函数"); }, f2() { console.log("我是第二个函数"); } }
}
// 第一种写法：
//export default obj;2.2.2 import引入模块1）通用导入方式格式：import * as 别名 from "js文件地址"该方式可以应对所有暴露方式index.html&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;&lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!--   别忘记加type='module',  否则浏览器不认为是模块导入，不识别import语法 --&gt;&lt;script type="module"&gt;// 第一种方式，通用导入方式，起别名import * as m1 from './a.js'import * as m2 from './b.js'import * as m3 from './c.js'console.log(m1.name);console.log(m1.person.name);m1.isPrime(5)console.log(m2.student);let result = m2.factorial(4)console.log('4的阶乘：', result);//访问默认导出的东西，需要添加.default关键字console.log(m3.default.hobbies[1]);m3.default.fs.f1();&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;2）解构赋值方式适用于分别暴露、统一暴露的语法import {变量名1,变量名2,......} from "js文件地址"
​
注意：变量名必须和js文件中的变量名一致。可以使用别名import {变量名1 as 别名1,变量名2 as 别名2,......} from "js文件地址"默认暴露语法import {default as 别名} from "js文件地址"&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
​
&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;&lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
​
&lt;body&gt;&lt;!--   别忘记加type='module',  否则浏览器不认为是模块导入，不识别import语法 --&gt;&lt;script type="module"&gt;import { name, job, person, isPrime } from './a.js'import { factorial, student } from './b.js'import { default as m3 } from './c.js'
​console.log(name);console.log(person.name);isPrime(5)
​console.log(student);let result = factorial(4)console.log('4的阶乘：', result);
​//访问默认导出的东西，需要添加.default关键字console.log(m3.hobbies[1]);m3.fs.f1();&lt;/script&gt;
&lt;/body&gt;
​
&lt;/html&gt;3）简单形式只针对默认暴露有效import 变量名 from "js文件地址"&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
​
&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;&lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
​
&lt;body&gt;&lt;!--   别忘记加type='module',  否则浏览器不认为是模块导入，不识别import语法 --&gt;&lt;script type="module"&gt;import m3 from './c.js'
​console.log(m3.hobbies[1]);
​m3.fs.f1();&lt;/script&gt;
&lt;/body&gt;
​
&lt;/html&gt;2.2.3 入口文件之前我们模块的引入都是在script中写的。现在我们习惯把所有的模块引入放到一个JS文件（比如main.js）中，叫做入口文件，然后html里再引入入口文件，别忘记type='module'注意： 入口文件的用途，是在HTML中引用，让HTML可以识别到所有的js模块。 并不是让我们在html里的script中书写模块里的函数，或者变量等main.jsimport { name, job, person, isPrime } from './a.js'
import { factorial, student } from './b.js'
import m3 from './c.js'html中&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
​
&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;&lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
​
&lt;body&gt;&lt;!--   别忘记加type='module',  否则浏览器不认为是模块导入，不识别import语法 --&gt;&lt;script type="module" src='main.js'&gt;// 不要写js代码&lt;/script&gt;
&lt;/body&gt;
​
&lt;/html&gt;三 代理模式3.1 数据代理简介所谓数据代理（也叫数据劫持），指的是在访问或者修改对象的某个属性时，通过一段代码拦截这个行为，进行额外的操作或者修改返回结果。比较典型的是Object.defineProperty()和 ES2015 中新增的Proxy对象。另外还有已经被废弃的Object.observe()，废弃的原因正是Proxy的出现，因此这里我们就不继续讨论这个已经被浏览器删除的方法了。数据劫持最著名的应用当属双向绑定(面试必考题)。Vue 2.x 使用的是Object.defineProperty()Vue3.x 版本之后改用Proxy进行实现3.2 Object.defineProperty()3.1.1 简介现在我们来学习一个功能更加强大的方式，那就是使用Object.defineProperty()，该方法可以在对象上新添加属性，或者修改已经存在的属性。它也是vue2的响应式原理。默认情况下，使用 Object.defineProperty() 添加的属性是不可写、不可枚举(遍历)和不可配置(删除或修改)的。但是我们可以通过参数来改变这些。语法：Object.defineProperty(obj, prop, desc)参数：obj：  要操作的对象
prop： 将要新添加或者修改的属性名 「String、Symbol类型」
desc： 属性描述符，通过它来限制属性的读写行为属性描述符value：设置属性的值writable：值是否可以重写，默认值为falseset：目标属性设置值的方法get：目标属性获取值的方法enumerable：目标属性是否可以被枚举（是否可以遍历），默认值为falseconfigurable：目标属性是否可以被删除或是否可以再次通过属性描述符的方式修改，默认值为false属性描述符分为两种：「数据描述符」和「存取描述符」。
​
其中value、writable为数据描述符，get、set为存取描述符，configurable 和 enumerable不受限制。3.1.2 案例演示：添加对象属性以前，我们在js中给对象添加属性、方法时，我们通常都是这样做的// 定义对象时，添加属性和属性值
let person = { name: 'zhangsan', age: 21 };
​
// 定义对象后，添加新属性和属性值
person.gender = '男';
​
// 定义对象后，添加新方法
person.sayHi = function () {console.log(`你好，我是${this.name}`);
}
​
​
console.log(person.name, person.age, person.gender);
person.sayHi()
console.log(person);测试：value,writable,enumerable,configurable四个属性let human = { name: '张三' }
Object.defineProperty(human, 'age', {value: 21,  //使用value进行赋值writable: true,  // 注释和不注释，查看效果enumerable: true,configurable: true
})
console.log(human);  //查看对象
human.name = "张大三"
​
// -----测试1：修改属性的值
human.age = 22;   //修改age的值
console.log(human);  //再次查看对象
​
// -----测试2：枚举对象的属性
console.log(Object.keys(human));
for (key in human) {console.log(key);
}
​
// -----测试3.1 删除属性
delete human.name;
console.log(human);
delete human.age
console.log(human);
​
// -----测试3.2 修改属性
Object.defineProperty(human, 'age', {value: 30
})
console.log(human);3.1.3 响应式页面设计1）什么是响应式在前端开发中，响应式原理是一个非常重要的概念。它允许我们的应用程序在用户与界面交互时，动态地更新视图。这种交互性使得我们的应用程序能够实时地响应用户的操作。响应式原理的核心思想是：当数据发生变化时，能够自动地更新视图。为了实现这一目标，我们需要对数据的变化进行监听，并在数据发生变化时触发视图的更新。2）案例演示let person = { name: 'zhangsan', age: 21 }
let nameDom = document.getElementById("span1")
nameDom.innerText = person.name
let ageDom = document.getElementById("span2")
ageDom.innerText = person.age;
//更新对象的属性，比如name,age等
person.name = "李四"
person.age = 30;
//更新完属性的值，页面并没有跟着改变，这就不是响应式。 我们需要手动修改才行
nameDom.innerText = person.name
ageDom.innerText = person.age;
​
​
// 现在想要完成响应式效果，我们需要借用Object.defineProperty.....和一个变量。
​
let number = 0
​
Object.defineProperty(person, 'age', {get: function () {console.log("-----age被访问了-----");return number;},set: function (value) {console.log("-----age被修改了" + value);// 修改时,页面就直接修改了ageDom.innerText = value;number = value},
})
​
let str = '赵老六'
​
Object.defineProperty(person, 'name', {get: function () {console.log("-----name被访问了-----");return str;},set: function (value) {console.log("-----name被修改了" + value);// 修改时,页面就直接修改了nameDom.innerText = value;str = value},
})
console.log(person);3.1.4 数据代理（双向绑定）class ProxyObject {constructor(obj) {this._data = obj;// 遍历对象的所有属性for (let key in obj) {// 判断key是不是自身的属性，而不是从原型链上继承过来的属性if (obj.hasOwnProperty(key)) {// 数据劫持，数据代理Object.defineProperty(this, key, {get: function () {// 有人访问obj的属性，我们就返回代理对象ProxyObject的属性值return this._data[key];},set: function (newValue) {// 有人修改了obj的属性,我们也修改代理对象属性的值this._data[key] = newValue;}});}}}
}
​
// 使用示例
let data = { name: 'tom', age: 30 };
let proxy = new ProxyObject(data);
​
console.log(proxy.name); // 输出：tom
proxy.name = 'michael'; // 修改代理对象的属性，实际上修改的是原始数据对象
console.log(data.name); // 输出：michael
data.name = "lucy"
console.log(proxy.name);3.1.5 做数据代理的缺点不能监听数组的变化，数组的以下几个方法不会触发 set：push    pop shift   unshift splice  sort    reverse必须遍历对象的每个属性必须深层遍历嵌套的对象3.3 Proxy3.3.1 简介Proxy是ES6引入的一个新对象，用于创建一个对象的代理，可以拦截并重定义基本的操作。在数据劫持这个问题上，Proxy可以被认为是Object.defineProperty()的升级版。外界对某个对象的访问，都必须经过这层拦截。因此它是针对整个对象，而不是对象的某个属性，所以也就不需要对keys进行遍历。语法：const p = new Proxy(target, handler)target ：目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。handler ：以函数作为属性的对象，实现拦截和自定义操作。handler对象是一个容纳一批特定属性的占位符对象，它包含有Proxy的各个捕获器trap。所有的捕捉器是可选的，如果没有定义某个捕捉器，那么就会保留源对象的默认行为
​
handler.getPrototypeOf(): Object.getPrototypeOf方法的捕捉器。
handler.setPrototypeOf(): Object.setPrototypeOf方法的捕捉器。
handler.isExtensible(): Object.isExtensible方法的捕捉器。
handler.preventExtensions(): Object.preventExtensions方法的捕捉器。
handler.getOwnPropertyDescriptor(): Object.getOwnPropertyDescriptor方法的捕捉器。
handler.defineProperty(): Object.defineProperty方法的捕捉器。
handler.has(): in操作符的捕捉器。
handler.get(): 属性读取操作的捕捉器。
handler.set(): 属性设置操作的捕捉器。
handler.deleteProperty(): delete操作符的捕捉器。
handler.ownKeys(): Reflect.ownKeys、Object.getOwnPropertyNames、Object.keys、Object.getOwnPropertySymbols方法的捕捉器。
handler.apply(): 函数调用操作的捕捉器。
handler.construct(): new操作符的捕捉器。3.3.2 数据代理//定义一个学生对象let student = { name: '王二狗', age: 18 }//给学生对象定义一个代理对象let p1 = new Proxy(student, {get(target, property) {return target[property]},set(target, property, value) {target[property] = valuereturn true;}})//改变代理对象的属性，实际上就是改变原对象的属性p1.name = "张狗蛋"p1.age = 21;console.log(student);部分方法的测试：//定义一个学生对象let student = { name: '王二狗', age: 18 }//给学生对象定义一个代理对象let p1 = new Proxy(student, {get(target, property) {return target[property]},set(target, property, value) {target[property] = value},has(target, property) {console.log("---has方法触发了---传过来的属性名:" + property);return property in target},deleteProperty(target, property) {console.log("---deleteProperty方法触发了---传过来的属性名:" + property);delete target[property]return true;},defineProperty(target, property) {console.log("---defineProperty方法触发了---传过来的属性名:" + property);return Object.defineProperty(target, property, {})}})console.log("a" in p1);delete p1.nameconsole.log(student);Object.defineProperty(p1, 'name', {})3.3.3 响应式页面&lt;div id="containner"&gt;
​
&lt;/div&gt;let person = { name: "michael" }
let div = document.getElementById("containner");
div.innerText = person.name;
person.name = "tom"
​
let p1 = new Proxy(person, {get(target, property) {return target[property]},set(target, property, value) {//数据劫持，修改页面上的内容div.innerText = valuetarget[property] = value}
})
​
p1.name = "tom"
p1.name = "lucy"http://www.ppmy.cn/news/1540765.html相关文章自动驾驶---基于dds/ros的通信中间件1 背景 DDS&amp;#xff08;数据分发服务&amp;#xff0c;Data Distribution Service&amp;#xff09;和ROS&amp;#xff08;机器人操作系统&amp;#xff0c;Robot Operating System&amp;#xff09;是两种在各自领域内具有重要影响的技术。它们是两种不同的中间件&amp;#xff0c;并且在分布式系统、尤其是…阅读更多...案例实践 | 以长安链为坚实底层，江海链助力南通民政打造慈善应用标杆案例名称-江海链  ■ 实施单位  中国移动通信集团江苏有限公司南通分公司、中国移动通信集团江苏有限公司  ■ 业主单位  江苏省南通市民政局  ■ 上线时间  2023年12月  ■ 用户群体  南通市民政局、南通慈善总会等慈善组织及全市民众  ■ 用户规模  全市近30家慈善组织&amp;#…阅读更多...Qt在iOS平台上的编译配置与打包发布，详细流程Qt在iOS平台上的编译配置与打包发布流程 一、前言 
随着移动应用的普及&amp;#xff0c;越来越多的开发者开始关注跨平台应用开发。Qt作为一款强大的跨平台应用开发框架&amp;#xff0c;不仅支持Windows、Linux等传统桌面平台&amp;#xff0c;还支持iOS和Android等移动平台。本文将重点介绍…阅读更多...数据结构与算法——Java实现 41.对称二叉树目录 101. 对称二叉树 思路 代码 Java代码及测试用例 莫道浮云终蔽日 总有雾散云开时 昨日之深渊 今日之浅谈 —— 24.10.20 101. 对称二叉树 给你一个二叉树的根节点 root &amp;#xff0c; 检查它是否轴对称。 示例 1&amp;#xff1a; 输入&amp;#xff1a;root  [1,2,2,3,4,4,3]
输出&amp;am…阅读更多...C++高阶：红黑树实现目录 
一.红黑树的概念 
1.1红黑树的规则 
1.2红黑树的效率 
二.红黑树的实现 
2.1红黑树的结构 2.2红黑树的插入 
2.2.1插入的大致过程 
2.2.2情况一&amp;#xff1a;变色 
​编辑 2.2.3情况二&amp;#xff1a;单旋变色 2.2.4情况三&amp;#xff1a;双旋变色 2.3插入代码实现 
2.4红黑树的…阅读更多...阿里云验证码短信发送服务搭建（flask)参考&amp;#xff1a;https://next.api.aliyun.com/api-tools/sdk/Dysmsapi?version2017-05-25&amp;languagejava-async-tea&amp;tabprimer-doc 
我们需要思考验证服务一些要求&amp;#xff1a; 
1.验证码只能被验证一次&amp;#xff0c;所以需要状态字段 2.验证码有失效时间&amp;#xff0c;超…阅读更多...智能听诊器：宠物健康数据的守护者智能听诊器的出现&amp;#xff0c;为宠物健康数据的管理提供了新的解决方案。它能够收集宠物的生理数据&amp;#xff0c;并将其安全地存储在云端&amp;#xff0c;这样即使宠物主人更换设备或遗失数据&amp;#xff0c;也能轻松恢复宠物的健康记录。这种数据的长期保存和备份&amp;#xff0c;对于宠物…阅读更多...【从零开始的LeetCode-算法】908. 最小差值 I给你一个整数数组 nums&amp;#xff0c;和一个整数 k 。 
在一个操作中&amp;#xff0c;您可以选择 0 &lt; i &lt; nums.length 的任何索引 i 。将 nums[i] 改为 nums[i]  x &amp;#xff0c;其中 x 是一个范围为 [-k, k] 的任意整数。对于每个索引 i &amp;#xff0c;最多 只能 应用 一次 此操…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:07 +0000</pubDate>
    </item>
    <item>
      <title>自动驾驶---基于dds/ros的通信中间件</title>
      <link>https://www.ppmy.cn/news/1540764.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维自动驾驶---基于dds/ros的通信中间件news/2025/10/31 22:19:05/1 背景DDS（数据分发服务，Data Distribution Service）和ROS（机器人操作系统，Robot Operating System）是两种在各自领域内具有重要影响的技术。它们是两种不同的中间件，并且在分布式系统、尤其是机器人和自动驾驶车辆的系统中发挥着关键作用。2 DDS（数据分发服务）（1）概述DDS是一种用于分布式系统高效、可靠、实时数据通信的协议。它采用发布/订阅模式，支持多种数据类型，广泛应用于工业自动化、航空航天、智能交通、医疗和国防等领域。DDS通过分布式发现机制和服务质量（QoS）策略，确保数据传输的实时性和可靠性，并具有广泛的适用性和可扩展性。（2）核心概念和架构核心概念Domain：全局数据空间，代表一个通信平面，由Domain ID唯一标识。Domain Participant：代表域内通信的应用程序的本地成员身份。Topic：数据的抽象概念，由TopicName标识，关联相应数据的数据类型。DataWriter：数据写入者，将需要发布的主题数据从应用层写入到DataWriter中。DataReader：数据读取者，从订阅者得到主题数据，随之传给应用层。Publisher：发布者，发布主题数据。Subscriber：订阅者，订阅主题数据。架构应用层：使用DDS API在分布式系统中实现通信的用户应用程序。DDS层：DDS通信中间件的稳健实现，允许部署一个或多个DDS域。RTPS层：实施Real-Time Publish-Subscribe protocol（实时发布-订阅协议），以实现与DDS应用程序的互操作性。传输层：DDS可用于各种传输协议，如UDP、TCP、SHM。（3）通信流程基于DDS的分布式系统中，节点发布自己想要发布的（或想要订阅的）Topic和QoS。DDS网络上已存在的节点收听到这个请求后，与自己的发布订阅情况及QoS标准进行对照。如果新加入节点的Topic信息与自己相关且QoS标准符合要求，则主动与新加入的节点进行通信，将自己的Topic信息发送给新加入节点，并将新加入节点的相应信息注册到本节点上，以便有通信需求时建立点到点连接。（4）特点DDS是一种标准的中间件，用于实时数据通信，特别是在分布式系统中。它由Object Management Group (OMG) 维护，是一种发布-订阅（pub-sub）消息传递模型的实现。DDS的主要特点包括：实时性：DDS设计用于满足严格的实时性要求，确保数据传输的及时性和可靠性。可扩展性：DDS能够处理从小型到大型的分布式系统，支持数千个节点的数据分发。DDS允许系统组件（如传感器、控制器等）发布数据而无需知道哪些组件会订阅这些数据，同样，组件可以订阅它们需要的数据而无需知道哪些组件会发布这些数据。这种解耦合的通信模型减少了系统组件之间的依赖性，提高了通信的灵活性和可扩展性。容错性：DDS提供了数据的持久性和可靠性，即使在网络分区或节点故障的情况下也能保持数据的完整性。质量服务（QoS）：DDS允许开发者为不同类型的数据流指定不同的服务质量参数，如可靠性、传输速率和数据新鲜度。例如，可以设置数据传输的可靠性级别，确保关键数据在网络条件不佳时也能被可靠传输。数据模型：DDS支持复杂的数据模型，可以定义丰富的数据类型和结构。安全性：DDS提供了安全特性，包括数据加密和访问控制，以保护数据传输的安全。分布式架构：DDS支持分布式部署，可以在车辆的不同ECU（电子控制单元）之间实现高效的数据分发，支持大规模分布式系统。互操作性：DDS标准定义了一套互操作性协议（如RTPS），确保不同厂商的DDS实现能够无缝通信。在自动驾驶的实际应用中，DDS可以用于整合来自各种传感器（如雷达、摄像头、激光雷达）的数据，实现环境感知、决策规划以及车辆控制等功能。通过DDS服务，自动驾驶系统能够快速响应环境变化，提供安全、高效的驾驶体验。（5）应用DDS在工业自动化、航空航天、智能交通、医疗和国防等领域有广泛应用。例如，在工业自动化领域，DDS被用于工厂自动化和过程控制系统中，确保传感器数据、控制指令等数据的快速、准确传输；在航空航天领域，DDS对于飞行控制系统和导航系统的实时数据通信至关重要。DDS是一种以数据为中心的通信模型，它在实时系统中的数据分发和可靠通信方面发挥着重要作用。DDS在汽车领域的应用逐渐增多，特别是在自动驾驶技术的发展中。例如，DDS被用于车载软件的通信中间件开发中，它能够实现低延迟、高可靠、高实时性的数据融合服务，有助于降低软件的耦合性、复杂性，提高软件的模块化特性。DDS在车辆上的部署可以采用不同的形式，包括直接部署在操作系统上，或者集成在AUTOSAR AP平台上，以及面向资源受限设备的轻量化版本部署。例如，DDS在奥迪、大众等多家OEM厂商的智能驾驶、泊车充电、仿真测试平台等场景中得到应用，国内的造车新势力如小鹏汽车也已经将DDS技术应用到量产车型上 。#include &lt;string&gt;  struct MyData {  int id;  std::string message;  
};  // 注意：在真实DDS应用中，你需要使用DDS工具从IDL生成类型。// 伪代码，具体API取决于DDS实现  
void initializeDDS() {  // 创建域参与者  DDS::DomainParticipantFactory_var dpf = DDS::TheDomainParticipantFactoryWithArgs(0);  DDS::DomainParticipant_var participant = dpf-&gt;create_participant(DDS::DOMAIN_ID_DEFAULT,  DDS::PARTICIPANT_QOS_DEFAULT, NULL, DDS::STATUS_MASK_NONE);  // 其余初始化代码（如创建发布者/订阅者、话题等）  
}void publisherFunction() {  // 假设初始化DDS的代码已经执行  // 创建发布者  DDS::Publisher_var publisher = participant-&gt;create_publisher(DDS::PUBLISHER_QOS_DEFAULT, NULL, DDS::STATUS_MASK_NONE);  // 省略：定义话题、数据写入器等  // 发送数据  while (true) {  MyData data = {1, "Hello DDS!"};  // 写入数据到DDS（此处省略具体实现，需要类型支持等）  }  
}void subscriberFunction() {  // 假设初始化DDS的代码已经执行  // 创建订阅者  DDS::Subscriber_var subscriber = participant-&gt;create_subscriber(DDS::SUBSCRIBER_QOS_DEFAULT, NULL, DDS::STATUS_MASK_NONE);  // 定义话题、数据类型、数据读取器等  // 读取数据  while (true) {  // 等待并读取数据（此处省略具体实现）  // 处理接收到的MyData数据  }  
}int main() {  initializeDDS();  // 启动发布者和订阅者（通常在多线程环境中）  std::thread publisherThread(publisherFunction);  std::thread subscriberThread(subscriberFunction);  // 等待线程结束（或运行直到被外部信号中断）  publisherThread.join();  subscriberThread.join();  // 清理DDS资源  // 注意：清理代码取决于DDS实现的具体API  return 0;  
}3 ROS（机器人操作系统）（1）概述ROS是一个专为机器人软件开发所设计的开源元级操作系统（后操作系统），提供类似于操作系统的服务，包括硬件抽象描述、底层驱动程序管理、共用功能的执行、程序间消息传递、程序发行包管理等。ROS的运行架构是一种使用ROS通信模块实现模块间P2P的松耦合网络连接的处理架构。（2）核心概念和架构核心概念节点（Nodes）：ROS中的基本运行单元，每个节点负责执行一个特定的任务。主题（Topics）：节点之间进行异步通信的机制，节点可以发布数据到主题，其他节点可以订阅该主题以获取数据。服务（Services）：提供同步通信机制，节点可以提供某个特定的服务，其他节点可以请求该服务。参数服务器（Parameter Server）：用于存储系统中的参数和配置信息，节点可以从参数服务器获取参数或写入参数。架构roscore：ROS系统的核心组件，提供ROS Master及其他关键服务。节点通信：通过ROS Master进行协调，节点启动时向ROS Master注册，报告自己能够发布和订阅的主题以及提供的服务。（3）通信机制ROS支持多种通信机制，包括基于服务的同步RPC（远程过程调用）通信、基于Topic的异步数据流通信以及参数服务器上的数据存储。这些机制共同构成了ROS的分布式处理框架。（4）主要特性开源性：ROS的源代码、文档和相关资源都可以在互联网上免费获取。模块化设计：通过将机器人软件系统划分为独立的、可重用的组件，提高了系统的可维护性和可扩展性。实时通信：ROS使用基于话题（topics）的发布-订阅模型进行节点之间的通信，类似于DDS。工具和算法：ROS提供了一套丰富的工具和算法库，用于机器人感知、导航、操作和交互。硬件抽象：ROS提供了硬件抽象层，使得开发者可以专注于算法开发，而不必关心底层硬件细节。模拟和可视化：ROS集成了多种模拟器和可视化工具，方便开发者测试和调试机器人程序。多语言支持：ROS支持多种编程语言，如C++、Python等，使得开发者可以根据自己的偏好和项目需求选择最合适的语言。大型社区：ROS拥有一个庞大且活跃的开发者社区，为新手提供了学习资源，为专业开发者提供了交流和合作的平台。（6）应用ROS在机器人领域有广泛应用，包括工业机器人、移动机器人、无人机等。制造商和研究机构利用ROS构建自动化系统，提高了生产线的灵活性和生产效率。同时，ROS还提供了丰富的导航、避障和路径规划工具，使得开发者能够轻松构建具有自主导航能力的机器人系统。ROS是一个开源的机器人软件平台，它提供了一套完整的工具集合，使得机器人开发者可以更加便捷地进行机器人软件开发。ROS的应用案例非常广泛，包括但不限于以下几个领域：工业自动化：ROS可以应用于工业自动化领域，如机器人装配、物流搬运等。农业领域：ROS在农业机器人、智能农业等方面有所应用。医疗领域：ROS被用于开发机器人手术、康复机器人等医疗设备。家庭服务机器人：ROS在智能家居、智能家电等服务机器人领域有所应用。娱乐领域：ROS也被应用于娱乐领域，如机器人足球、机器人游戏等。ROS的模块化设计、多语言支持、大量的工具和库以及社区支持，使其成为机器人开发的重要工具。例如，美国NASA基于ROS开发的Robonaut 2已经在国际空间站里工作，百度Apollo无人车的底层也是基于ROS开发的 。4 总结DDS和ROS都是分布式系统中的关键技术，但它们服务于不同的目的。DDS更侧重于数据分发和实时通信，而ROS提供了一个完整的机器人软件开发框架。在实际应用中，可以根据系统的需求和特性选择合适的技术。例如，DDS可能更适合于需要严格实时性和可靠性的自动驾驶车辆，而ROS可能更适合于需要灵活性和模块化的机器人研究项目。http://www.ppmy.cn/news/1540764.html相关文章案例实践 | 以长安链为坚实底层，江海链助力南通民政打造慈善应用标杆案例名称-江海链  ■ 实施单位  中国移动通信集团江苏有限公司南通分公司、中国移动通信集团江苏有限公司  ■ 业主单位  江苏省南通市民政局  ■ 上线时间  2023年12月  ■ 用户群体  南通市民政局、南通慈善总会等慈善组织及全市民众  ■ 用户规模  全市近30家慈善组织&amp;#…阅读更多...Qt在iOS平台上的编译配置与打包发布，详细流程Qt在iOS平台上的编译配置与打包发布流程 一、前言 
随着移动应用的普及&amp;#xff0c;越来越多的开发者开始关注跨平台应用开发。Qt作为一款强大的跨平台应用开发框架&amp;#xff0c;不仅支持Windows、Linux等传统桌面平台&amp;#xff0c;还支持iOS和Android等移动平台。本文将重点介绍…阅读更多...数据结构与算法——Java实现 41.对称二叉树目录 101. 对称二叉树 思路 代码 Java代码及测试用例 莫道浮云终蔽日 总有雾散云开时 昨日之深渊 今日之浅谈 —— 24.10.20 101. 对称二叉树 给你一个二叉树的根节点 root &amp;#xff0c; 检查它是否轴对称。 示例 1&amp;#xff1a; 输入&amp;#xff1a;root  [1,2,2,3,4,4,3]
输出&amp;am…阅读更多...C++高阶：红黑树实现目录 
一.红黑树的概念 
1.1红黑树的规则 
1.2红黑树的效率 
二.红黑树的实现 
2.1红黑树的结构 2.2红黑树的插入 
2.2.1插入的大致过程 
2.2.2情况一&amp;#xff1a;变色 
​编辑 2.2.3情况二&amp;#xff1a;单旋变色 2.2.4情况三&amp;#xff1a;双旋变色 2.3插入代码实现 
2.4红黑树的…阅读更多...阿里云验证码短信发送服务搭建（flask)参考&amp;#xff1a;https://next.api.aliyun.com/api-tools/sdk/Dysmsapi?version2017-05-25&amp;languagejava-async-tea&amp;tabprimer-doc 
我们需要思考验证服务一些要求&amp;#xff1a; 
1.验证码只能被验证一次&amp;#xff0c;所以需要状态字段 2.验证码有失效时间&amp;#xff0c;超…阅读更多...智能听诊器：宠物健康数据的守护者智能听诊器的出现&amp;#xff0c;为宠物健康数据的管理提供了新的解决方案。它能够收集宠物的生理数据&amp;#xff0c;并将其安全地存储在云端&amp;#xff0c;这样即使宠物主人更换设备或遗失数据&amp;#xff0c;也能轻松恢复宠物的健康记录。这种数据的长期保存和备份&amp;#xff0c;对于宠物…阅读更多...【从零开始的LeetCode-算法】908. 最小差值 I给你一个整数数组 nums&amp;#xff0c;和一个整数 k 。 
在一个操作中&amp;#xff0c;您可以选择 0 &lt; i &lt; nums.length 的任何索引 i 。将 nums[i] 改为 nums[i]  x &amp;#xff0c;其中 x 是一个范围为 [-k, k] 的任意整数。对于每个索引 i &amp;#xff0c;最多 只能 应用 一次 此操…阅读更多...金融衍生品中的风险对冲策略分析金融衍生品是现代金融市场中不可或缺的一部分&amp;#xff0c;它们通过标的资产的价格波动为投资者提供了多样的风险管理工具。随着市场的不确定性和复杂性增加&amp;#xff0c;风险对冲成为企业和个人投资者的首要任务。本文将深入探讨金融衍生品中的常见风险对冲策略&amp;#xff0c;分析…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:06 +0000</pubDate>
    </item>
    <item>
      <title>案例实践 | 以长安链为坚实底层，江海链助力南通民政打造慈善应用标杆</title>
      <link>https://www.ppmy.cn/news/1540763.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维案例实践 | 以长安链为坚实底层，江海链助力南通民政打造慈善应用标杆news/2025/10/31 22:19:04/案例名称-江海链■ 实施单位中国移动通信集团江苏有限公司南通分公司、中国移动通信集团江苏有限公司■ 业主单位江苏省南通市民政局■ 上线时间2023年12月■ 用户群体南通市民政局、南通慈善总会等慈善组织及全市民众■ 用户规模全市近30家慈善组织，700多万社会公众，救助人口超200万人案例背景与解决痛点民政部《“十四五”民政信息化发展规划》中，明确提出开发建设民政统一的区块链支撑服务平台。江苏省委省政府高度重视数字经济应用发展，出台《关于全面提升江苏数字经济发展水平的指导意见》，明确要求民政部门大力推动服务业数字化发展。《南通市“十四五”数字经济发展规划》将“区块链”作为信息数字产业攀升工程之一，要求以民生等领域为突破口，打造区块链典型应用场景。江苏省南通市常驻人口775万，注册志愿者人数高达 256万。党的十九大以来，江苏南通社会捐赠总量超20亿元，救助困难群众200余万人次。目前，江苏省南通市民政业务面广量大，服务对象特殊复杂，慈善事业发展中存在慈善组织运营效率不高、公众参与不足、善款使用去向不明、受助人身份难以验证、政府监管乏力等问题；除此之外，民政数据存在独立分散、缺少统一整合管理、数据质量和安全性较低、协同共享流程复杂和低效的问题。本项目将基于南通市政务云平台建设，按照“区块链技术+民政大数据+业务应用场景”的模式，基于共识协议、智能合约、网络交互、数据存储、安全技术等区块链关键核心技术，建设基于长安链的民政数据中心以及南通市民政区块链平台，积极探索区块链技术在民政领域的应用，促进数据共享、业务流程优化、运营成本降低、效率协同提升、可信体系建设，提升南通民政各类业务精细化、精准化、智能化的管理和服务水平，有力支撑民政数字化转型工作。同时实现善款资金来源去向可溯源，提升慈善业务的公信力与透明度。江苏省移动南通分公司助力南通市民政局，基于长安链打造了全市唯一的江海链慈善应用平台，推动南通市慈善事业迈入蓬勃发展新阶段。通过本项目的建设，将有效整合南通市民政数据资源，创新建设南通市民政业务应用场景，可以推动南通市公共慈善事业快速发展，提升民众慈善项目的参与度以及信任度。同时，通过构建标准规范和打造行业标杆，可以推广区块链技术在慈善领域，并向其他民政领域拓展，不断完善产业生态，带来巨大的社会效益。案例方案与创新点江苏省南通市“区块链+民政”国家创新应用试点项目基于区块链技术构建“区块链+民政”信息基础设施, 打造多利益相关方、多运营维度的公益慈善平台，在接口层提供SDK和安全网关的接入方式为应用服务提供数据准入服务，除满足民政业务外，也可供其他部委办局使用。图1：整体技术方案通过区块链技术的分布式记账、去中心化、非对称加密等特点，以技术方式重构信任机制，实现全角色参与，全环节上链，全流程监管的目标，从而改善公益慈善运作机制，构建信任慈善体系，有力提升慈善业务精细化、精准化、智能化管理和服务水平，有力支撑民政数字化转型工作。1）区块链平台：以国家发改委、科技部、工信部等多部门联合指导的国产开源区块链平台——长安链技术为基础，搭建了南通市唯一的国密联盟链——江海链，并由南通市民政局、南通市慈善总会等9个组织共建共管，对慈善机构的慈善项目报备、捐赠、资金物资去向提供系统化的业务监管流程。2）慈善南通服务平台：建设全市公益慈善统一服务平台，面向不同服务对象分别建设公众端、慈善组织端、民政端三个服务入口。重点建设3个场景，包括慈善业务数据上链共享、慈善捐赠资金收支数据上链共享、慈善捐赠公众服务及验真溯源，实现全流程数据上链监管。3）慈善小程序：为公众提供了解慈善信息、参与慈善活动和善款溯源的开放、便捷渠道。图2：“区块链+民政”业务流程图其中慈善应用业务整体流程如下。1）链上项目管理：统一门户审计监管已发布项目信息，慈善项目信息同步上链。2）帮扶对象管理：帮扶对象信息录入、更新、删除等操作均同步上链。3）捐赠收入上链：个人与企事业单位捐赠善款入资金池，捐物信息上链，相关明细上链可监管。慈善组织将捐赠明细记录上链，开户银行将捐赠资金收入明细凭证进行上链，两者关联对应。4）善款使用：慈善组织通过在系统中登记资金支出记录，将支出记录上链，开户银行将支出记录凭证进行上链，两者关联对应。5）善款溯源：形成慈善组织与银行之间资金收支的全流程可溯源证据链。所有上链的信息，如组织年报信息、审计报告信息、专项公示信息、善款使用明细等链上数据均支持一键核验。6）捐赠监管：民政部门通过平台进行捐赠监管，查询捐赠款物信息和收支明细。通过项目建设，南通市民政局、南通市慈善总会等9个组织实现慈善业务去中心化共建共管，通过投票多签进行链上数据治理。项目实现链上链下数字身份锚定，一键溯源及核验善款全生命周期信息，让善款来源可查、去向可追。本平台创新性的将区块链技术应用在民政慈善业务并部署在国产信创环境中，主要创新点为：1.平台部署在南通信创云环境下，从CPU架构到操作系统、从数据库到中间件均使用了信创名录的国产化软硬件；2.提出了建设 “1+1+1+N” 的区块链民政一体化模型，即 1 套区块链管理服务平台、1 套民政数据中心、1 套慈善业务平台，有序推进数字民政建设，积极适配国产化；3.平台提出了一种基于区块链技术的链上多签机制，它允许多个慈善组织参与方在进行交易或执行智能合约时共同参与决策和签名，相较于传统的单一签名机制，链上多签机制提供了更高的安全性和可信度；4.平台提出了一种基于区块链技术的民政资金监管模式，区块链技术可实现筹款过程中的信息上链加密存储，杜绝信息被私自修改和数据造假的行为，保证筹款过程的资金账目明细可追溯，信息公开及时，为南通市民政局提供有效的监管数据，为社会公众提供可监督的信息门户。向公众开放善款使用核验通道，进一步提升慈善业务的透明度，推动民众参与慈善业务意愿。案例价值与应用成效江苏省南通市“区块链+民政”国家创新应用试点项目在政策落地、数字化转型、信用体系建设、创新发展及人才建设等方面产生了较为显著的社会效益。主要体现在以下三个方面：可信监管：自系统上线以来，20余家慈善组织数据上链，近30个慈善项目数据上链，建成了涵盖6万多个帮扶对象信息的专题库，实现对月均千万元增量善款的可信监管。安全协同：通过SDK和标准化安全网关接口，实现各类主题库、专题库、应用系统等相关数据资源的对外共享，各业务系统可快速接入“民政数据中心”，实现数据汇聚、安全存储和加密共享。加快民政数字化转型：通过系统化建设，加速推进数字民政向跨业务、跨部门的纵深发展，进一步优化和完善南通民政数字化公共服务体系。http://www.ppmy.cn/news/1540763.html相关文章Qt在iOS平台上的编译配置与打包发布，详细流程Qt在iOS平台上的编译配置与打包发布流程 一、前言 
随着移动应用的普及&amp;#xff0c;越来越多的开发者开始关注跨平台应用开发。Qt作为一款强大的跨平台应用开发框架&amp;#xff0c;不仅支持Windows、Linux等传统桌面平台&amp;#xff0c;还支持iOS和Android等移动平台。本文将重点介绍…阅读更多...数据结构与算法——Java实现 41.对称二叉树目录 101. 对称二叉树 思路 代码 Java代码及测试用例 莫道浮云终蔽日 总有雾散云开时 昨日之深渊 今日之浅谈 —— 24.10.20 101. 对称二叉树 给你一个二叉树的根节点 root &amp;#xff0c; 检查它是否轴对称。 示例 1&amp;#xff1a; 输入&amp;#xff1a;root  [1,2,2,3,4,4,3]
输出&amp;am…阅读更多...C++高阶：红黑树实现目录 
一.红黑树的概念 
1.1红黑树的规则 
1.2红黑树的效率 
二.红黑树的实现 
2.1红黑树的结构 2.2红黑树的插入 
2.2.1插入的大致过程 
2.2.2情况一&amp;#xff1a;变色 
​编辑 2.2.3情况二&amp;#xff1a;单旋变色 2.2.4情况三&amp;#xff1a;双旋变色 2.3插入代码实现 
2.4红黑树的…阅读更多...阿里云验证码短信发送服务搭建（flask)参考&amp;#xff1a;https://next.api.aliyun.com/api-tools/sdk/Dysmsapi?version2017-05-25&amp;languagejava-async-tea&amp;tabprimer-doc 
我们需要思考验证服务一些要求&amp;#xff1a; 
1.验证码只能被验证一次&amp;#xff0c;所以需要状态字段 2.验证码有失效时间&amp;#xff0c;超…阅读更多...智能听诊器：宠物健康数据的守护者智能听诊器的出现&amp;#xff0c;为宠物健康数据的管理提供了新的解决方案。它能够收集宠物的生理数据&amp;#xff0c;并将其安全地存储在云端&amp;#xff0c;这样即使宠物主人更换设备或遗失数据&amp;#xff0c;也能轻松恢复宠物的健康记录。这种数据的长期保存和备份&amp;#xff0c;对于宠物…阅读更多...【从零开始的LeetCode-算法】908. 最小差值 I给你一个整数数组 nums&amp;#xff0c;和一个整数 k 。 
在一个操作中&amp;#xff0c;您可以选择 0 &lt; i &lt; nums.length 的任何索引 i 。将 nums[i] 改为 nums[i]  x &amp;#xff0c;其中 x 是一个范围为 [-k, k] 的任意整数。对于每个索引 i &amp;#xff0c;最多 只能 应用 一次 此操…阅读更多...金融衍生品中的风险对冲策略分析金融衍生品是现代金融市场中不可或缺的一部分&amp;#xff0c;它们通过标的资产的价格波动为投资者提供了多样的风险管理工具。随着市场的不确定性和复杂性增加&amp;#xff0c;风险对冲成为企业和个人投资者的首要任务。本文将深入探讨金融衍生品中的常见风险对冲策略&amp;#xff0c;分析…阅读更多...git分支操作简记一、分支名规则 
1、默认分支 
版本库中的默认分支命名为master 
2、/ 
可以使用斜杠&amp;#xff08;/&amp;#xff09; 创建一个分层的命名方案。 但是&amp;#xff0c; 该分支名不能以斜线结尾。 
3、- 分支名不能以减号&amp;#xff08;-&amp;#xff09; 开头。 
4. 以斜杠分割的组件不能以点&amp;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:04 +0000</pubDate>
    </item>
    <item>
      <title>Qt在iOS平台上的编译配置与打包发布，详细流程</title>
      <link>https://www.ppmy.cn/news/1540762.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Qt在iOS平台上的编译配置与打包发布，详细流程news/2025/10/31 22:19:03/Qt在iOS平台上的编译配置与打包发布流程一、前言随着移动应用的普及，越来越多的开发者开始关注跨平台应用开发。Qt作为一款强大的跨平台应用开发框架，不仅支持Windows、Linux等传统桌面平台，还支持iOS和Android等移动平台。本文将重点介绍如何在iOS平台上配置Qt环境，编译Qt应用程序，并打包发布到App Store。二、环境准备在开始之前，您需要准备以下环境：Mac电脑：由于iOS平台只能在Mac电脑上进行开发，因此您需要一台运行macOS的Mac电脑。Xcode：Xcode是苹果提供的官方开发工具，用于开发macOS和iOS应用。您可以从App Store免费下载Xcode。Qt for iOS：Qt for iOS是Qt公司为iOS平台提供的开发环境。您可以从Qt官网下载并安装Qt for iOS。三、配置Qt环境安装Qt for iOS：下载Qt for iOS安装包，并按照提示进行安装。安装完成后，您可以在Qt Creator中看到iOS平台选项。配置Xcode路径：在Qt Creator中，打开“Preferences” -&gt; “Devices” -&gt; “iOS”，配置Xcode的路径。确保Qt Creator能够正确识别Xcode。创建iOS项目：在Qt Creator中创建一个新的Qt Widgets应用程序项目，并选择iOS平台。四、编译Qt应用程序配置项目：在项目设置中，根据您的需求配置项目属性，如项目名称、版本号、标识符等。编写代码：使用Qt的API编写您的应用程序代码。Qt提供了丰富的UI控件和功能，使您能够轻松构建功能强大的移动应用。编译应用：点击Qt Creator中的“Build”按钮，编译您的应用。如果编译成功，您将在项目目录下看到生成的.app文件。五、打包发布到App Store创建App ID和证书：在苹果开发者网站上创建一个App ID，并为其生成一个证书。您需要将这个证书导入到您的Mac电脑上。配置Xcode项目：打开Xcode，导入生成的.app文件。在Xcode中配置您的应用信息，如应用名称、图标、版本号等。打包应用：在Xcode中点击“Product” -&gt; “Archive”，将应用打包成.ipa文件。上传到App Store：使用Xcode的“Organizer”功能，将.ipa文件上传到App Store Connect。在上传之前，您需要确保已经完成了所有的应用审核和配置工作。六、总结通过本文的介绍，您应该已经掌握了在iOS平台上配置Qt环境、编译Qt应用程序以及打包发布到App Store的方法。Qt作为一款强大的跨平台应用开发框架，为开发者提供了便捷的开发体验。希望本文能够帮助到您，祝您在iOS平台上开发出优秀的应用！http://www.ppmy.cn/news/1540762.html相关文章数据结构与算法——Java实现 41.对称二叉树目录 101. 对称二叉树 思路 代码 Java代码及测试用例 莫道浮云终蔽日 总有雾散云开时 昨日之深渊 今日之浅谈 —— 24.10.20 101. 对称二叉树 给你一个二叉树的根节点 root &amp;#xff0c; 检查它是否轴对称。 示例 1&amp;#xff1a; 输入&amp;#xff1a;root  [1,2,2,3,4,4,3]
输出&amp;am…阅读更多...C++高阶：红黑树实现目录 
一.红黑树的概念 
1.1红黑树的规则 
1.2红黑树的效率 
二.红黑树的实现 
2.1红黑树的结构 2.2红黑树的插入 
2.2.1插入的大致过程 
2.2.2情况一&amp;#xff1a;变色 
​编辑 2.2.3情况二&amp;#xff1a;单旋变色 2.2.4情况三&amp;#xff1a;双旋变色 2.3插入代码实现 
2.4红黑树的…阅读更多...阿里云验证码短信发送服务搭建（flask)参考&amp;#xff1a;https://next.api.aliyun.com/api-tools/sdk/Dysmsapi?version2017-05-25&amp;languagejava-async-tea&amp;tabprimer-doc 
我们需要思考验证服务一些要求&amp;#xff1a; 
1.验证码只能被验证一次&amp;#xff0c;所以需要状态字段 2.验证码有失效时间&amp;#xff0c;超…阅读更多...智能听诊器：宠物健康数据的守护者智能听诊器的出现&amp;#xff0c;为宠物健康数据的管理提供了新的解决方案。它能够收集宠物的生理数据&amp;#xff0c;并将其安全地存储在云端&amp;#xff0c;这样即使宠物主人更换设备或遗失数据&amp;#xff0c;也能轻松恢复宠物的健康记录。这种数据的长期保存和备份&amp;#xff0c;对于宠物…阅读更多...【从零开始的LeetCode-算法】908. 最小差值 I给你一个整数数组 nums&amp;#xff0c;和一个整数 k 。 
在一个操作中&amp;#xff0c;您可以选择 0 &lt; i &lt; nums.length 的任何索引 i 。将 nums[i] 改为 nums[i]  x &amp;#xff0c;其中 x 是一个范围为 [-k, k] 的任意整数。对于每个索引 i &amp;#xff0c;最多 只能 应用 一次 此操…阅读更多...金融衍生品中的风险对冲策略分析金融衍生品是现代金融市场中不可或缺的一部分&amp;#xff0c;它们通过标的资产的价格波动为投资者提供了多样的风险管理工具。随着市场的不确定性和复杂性增加&amp;#xff0c;风险对冲成为企业和个人投资者的首要任务。本文将深入探讨金融衍生品中的常见风险对冲策略&amp;#xff0c;分析…阅读更多...git分支操作简记一、分支名规则 
1、默认分支 
版本库中的默认分支命名为master 
2、/ 
可以使用斜杠&amp;#xff08;/&amp;#xff09; 创建一个分层的命名方案。 但是&amp;#xff0c; 该分支名不能以斜线结尾。 
3、- 分支名不能以减号&amp;#xff08;-&amp;#xff09; 开头。 
4. 以斜杠分割的组件不能以点&amp;…阅读更多...【配色网站分享】个人比较喜欢收藏一些好看的插画、UI设计图和配色&amp;#xff0c;于是有了此篇&amp;#xff0c;推荐一些配色网站&amp;#xff0c;希望能对自己和大家有些帮助。 
1.uiGradients 
一个主打渐变风网站&amp;#xff0c;还可以直接复制颜色。 左上角的“show all gradients”可以查看一些预设的渐…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:03 +0000</pubDate>
    </item>
    <item>
      <title>数据结构与算法——Java实现 41.对称二叉树</title>
      <link>https://www.ppmy.cn/news/1540761.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维数据结构与算法——Java实现 41.对称二叉树news/2025/10/31 22:19:02/目录101. 对称二叉树思路代码Java代码及测试用例莫道浮云终蔽日总有雾散云开时昨日之深渊今日之浅谈—— 24.10.20101. 对称二叉树给你一个二叉树的根节点root， 检查它是否轴对称。示例 1：输入：root = [1,2,2,3,4,4,3]输出：true示例 2：输入：root = [1,2,2,null,3,null,3]输出：false思路若要判断一个二叉树是否对称，只需要判断从根节点的下一层开始是否轴对称，判断轴对称只需要判断左孩子的左孩子节点是否与右孩子的右孩子节点相等，遍历到叶子节点，逐层进行判断，是否从根节点开始左孩子的左孩子…的左孩子与右孩子的右孩子……的右孩子节点完全相等代码/*** Definition for a binary tree node.* public class TreeNode {*     int val;*     TreeNode left;*     TreeNode right;*     TreeNode() {}*     TreeNode(int val) { this.val = val; }*     TreeNode(int val, TreeNode left, TreeNode right) {*         this.val = val;*         this.left = left;*         this.right = right;*     }* }*/
class Solution {public boolean isSymmetric(TreeNode root) {return check(root.left,root.right);}private boolean check(TreeNode left,TreeNode right){if(left == null &amp;&amp; right == null){return true;}if(left == null || right == null){return false;}if (left.val != right.val){return false;}return check(left.left,right.right) &amp;&amp; check(left.right,right.left);}
}Java代码及测试用例public class LeetCode101SymmetryBinaryTree {public boolean isSymmetric(TreeNode root) {return check(root.left,root.right);}private boolean check(TreeNode left,TreeNode right){if(left == null &amp;&amp; right == null){return true;}if(left == null || right == null){return false;}if (left.value != right.value){return false;}return check(left.left,right.right) &amp;&amp; check(left.right,right.left);}public static void main(String[] args) {TreeNode root = new TreeNode(1,new TreeNode(2,new TreeNode(3),new TreeNode(4)),new TreeNode(2,new TreeNode(4),new TreeNode(3)));LeetCode101SymmetryBinaryTree res =  new LeetCode101SymmetryBinaryTree();System.out.println(res.isSymmetric(root));TreeNode root1 = new TreeNode(11,new TreeNode(7,new TreeNode(5,new TreeNode(3),new TreeNode(6)),new TreeNode(9,new TreeNode(2),new TreeNode(8))),new TreeNode(11,new TreeNode(4,new TreeNode(9),new TreeNode(28)),new TreeNode(5)));System.out.println(res.isSymmetric(root1));}
}http://www.ppmy.cn/news/1540761.html相关文章C++高阶：红黑树实现目录 
一.红黑树的概念 
1.1红黑树的规则 
1.2红黑树的效率 
二.红黑树的实现 
2.1红黑树的结构 2.2红黑树的插入 
2.2.1插入的大致过程 
2.2.2情况一&amp;#xff1a;变色 
​编辑 2.2.3情况二&amp;#xff1a;单旋变色 2.2.4情况三&amp;#xff1a;双旋变色 2.3插入代码实现 
2.4红黑树的…阅读更多...阿里云验证码短信发送服务搭建（flask)参考&amp;#xff1a;https://next.api.aliyun.com/api-tools/sdk/Dysmsapi?version2017-05-25&amp;languagejava-async-tea&amp;tabprimer-doc 
我们需要思考验证服务一些要求&amp;#xff1a; 
1.验证码只能被验证一次&amp;#xff0c;所以需要状态字段 2.验证码有失效时间&amp;#xff0c;超…阅读更多...智能听诊器：宠物健康数据的守护者智能听诊器的出现&amp;#xff0c;为宠物健康数据的管理提供了新的解决方案。它能够收集宠物的生理数据&amp;#xff0c;并将其安全地存储在云端&amp;#xff0c;这样即使宠物主人更换设备或遗失数据&amp;#xff0c;也能轻松恢复宠物的健康记录。这种数据的长期保存和备份&amp;#xff0c;对于宠物…阅读更多...【从零开始的LeetCode-算法】908. 最小差值 I给你一个整数数组 nums&amp;#xff0c;和一个整数 k 。 
在一个操作中&amp;#xff0c;您可以选择 0 &lt; i &lt; nums.length 的任何索引 i 。将 nums[i] 改为 nums[i]  x &amp;#xff0c;其中 x 是一个范围为 [-k, k] 的任意整数。对于每个索引 i &amp;#xff0c;最多 只能 应用 一次 此操…阅读更多...金融衍生品中的风险对冲策略分析金融衍生品是现代金融市场中不可或缺的一部分&amp;#xff0c;它们通过标的资产的价格波动为投资者提供了多样的风险管理工具。随着市场的不确定性和复杂性增加&amp;#xff0c;风险对冲成为企业和个人投资者的首要任务。本文将深入探讨金融衍生品中的常见风险对冲策略&amp;#xff0c;分析…阅读更多...git分支操作简记一、分支名规则 
1、默认分支 
版本库中的默认分支命名为master 
2、/ 
可以使用斜杠&amp;#xff08;/&amp;#xff09; 创建一个分层的命名方案。 但是&amp;#xff0c; 该分支名不能以斜线结尾。 
3、- 分支名不能以减号&amp;#xff08;-&amp;#xff09; 开头。 
4. 以斜杠分割的组件不能以点&amp;…阅读更多...【配色网站分享】个人比较喜欢收藏一些好看的插画、UI设计图和配色&amp;#xff0c;于是有了此篇&amp;#xff0c;推荐一些配色网站&amp;#xff0c;希望能对自己和大家有些帮助。 
1.uiGradients 
一个主打渐变风网站&amp;#xff0c;还可以直接复制颜色。 左上角的“show all gradients”可以查看一些预设的渐…阅读更多...find_library、pkg_check_modules、pkg_search_module的区别在CMake中&amp;#xff0c;find_library、pkg_check_modules和pkg_search_module是用于查找和使用库的三种不同命令。以下是具体介绍&amp;#xff1a; find_library 功能&amp;#xff1a;find_library用于查找指定的库文件&amp;#xff08;动态库或静态库&amp;#xff09;&amp;#xff0c;不依赖于库提供…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:02 +0000</pubDate>
    </item>
    <item>
      <title>C++高阶：红黑树实现</title>
      <link>https://www.ppmy.cn/news/1540760.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维C++高阶：红黑树实现news/2025/10/31 22:19:01/目录一.红黑树的概念1.1红黑树的规则1.2红黑树的效率二.红黑树的实现2.1红黑树的结构2.2红黑树的插入2.2.1插入的大致过程2.2.2情况一：变色​编辑 2.2.3情况二：单旋+变色2.2.4情况三：双旋+变色2.3插入代码实现2.4红黑树的查找2.5红黑树的验证一.红黑树的概念红黑树是一棵二叉搜索树，他的每个结点增加一个存储位来表示结点的颜色，可以是红色或者黑色。通过对任何一条从根到叶子的路径上各个结点的颜色进行约束，红黑树确保没有一条路径会比其他路径长出2倍，因而是接近平衡的。1.1红黑树的规则1. 每个结点不是红色就是黑色2. 根结点是黑色的3. 如果一个结点是红色的，则它的两个孩子结点必须是黑色的，也就是说任意一条路径不会有连续的红色结点。4. 对于任意一个结点，从该结点到其所有NULL结点的简单路径上，均包含相同数量的黑色结点就像是这样：• 由规则4可知，从根到NULL结点的每条路径都有相同数量的黑色结点，所以极端场景下，最短路径就就是全是黑色结点的路径，假设最短路径长度为bh(black  height)。• 由规则2和规则3可知，任意一条路径不会有连续的红色结点，所以极端场景下，最长的路径就是一黑一红间隔组成，那么最长路径的长度为2*bh。• 综合红黑树的4点规则而言，理论上的全黑最短路径和一黑⼀红的最长路径并不是在每棵红黑树都存在的。假设任意一条从根到NULL结点路径的长度为x，那么bh&lt;=h&lt;=2*bh。1.2红黑树的效率假设N是红黑树树中结点数量，h最短路径的长度，那么2^h − 1 &lt;= N &lt; 2^2∗h − 1 ,由此推出h ≈ logN 2 ∗ logN。 也就是意味着红黑树增删查改最坏也就是走最长路径 ，那么时间复杂度还是 O(logN) 。红黑树的表达相对AVL树要抽象⼀些，AVL树通过高度差直观的控制了平衡。红黑树通过4条规则的颜色约束，间接的实现了近似平衡，他们效率都是同一档次，但是相对而言，插入相同数量的结点，红黑树的旋转次数是更少的，因为他对平衡的控制没那么严格。二.红黑树的实现2.1红黑树的结构这里用枚举表示颜色。enum Colour
{RED,BLACK
};
template&lt;class K,class V&gt;
struct RBTreeNode
{pair&lt;K, V&gt; _kv;RBTreeNode&lt;K, V&gt;* _left;RBTreeNode&lt;K, V&gt;* _right;RBTreeNode&lt;K, V&gt;* _parent;Colour _col;RETreeNode(const pair&lt;K, V&gt;&amp; kv):_kv(kv), _left(nullptr), _right(nullptr),_parent(nullptr){}
};
template&lt;class K,class V&gt;
class BRTree
{typedef RBTreeNode&lt;K, V&gt; Node
private:Node* _root = nullptr;
};2.2红黑树的插入2.2.1插入的大致过程1. 插入一个值按二叉搜索树规则进行插入，插入后我们只需要观察是否符合红黑树的4条规则。2. 如果是空树插入，新增结点是黑色结点。如果是非空树插入，新增结点必须红色结点，因为非空树插入，新增黑色结点就破坏了规则4，规则4是很难维护的。3. 非空树插入后，新增结点必须红色结点，如果父亲结点是黑色的，则没有违反任何规则，插入结束4. 非空树插入后，新增结点必须红色结点，如果父亲结点是红色的，则违反规则3。进一步分析，c是红色，p为红，g必为黑，这三个颜色都固定了，关键的变化看u的情况，需要根据u分为以下几种情况分别处理。说明：下图中假设我们把新增结点标识为c(cur)，c的父亲标识为p(parent)，p的父亲标识为 g(grandfather)，p的兄弟标识为u（uncle）。2.2.2情况一：变色c为红，p为红，g为黑，u存在且为红，则将p和u变黑，g变红。在把g当做新的c，继续往上更新。 分析：因为p和u都是红色，g是黑色，把p和u变黑，左边子树路径各增加⼀个黑色结点，g再变红，相 当于保持g所在子树的黑色结点的数量不变，同时解决了c和p连续红色结点的问题，需要继续往上更新是因为，g是红色，如果g的父亲还是红色，那么就还需要继续处理；如果g的父亲是黑色，则处理结束 了；如果g就是整棵树的根，再把g变回黑色。 情况1只变色，不旋转。所以无论c是p的左还是右，p是g的左还是右，都是上面的变色处理方式。图1将以上类似的处理进行了抽象表达，d/e/f代表每条路径拥有hb个黑色结点的子树，a/b代表每 条路径拥有hb-1个黑色结点的根为红的子树，hb&gt;=0。图2/图3/图4，分别展示了hb==0 / hb == 1 / hb == 2的具体情况组合分析，当hb等于2时，这里组合情况上百亿种，这些样例是帮助我们理解，不论情况多少种，多么复杂，处理方式⼀样的，变色再继续往上处理即可，所以我们只需要看抽象图即可。图一：图二：图三：图四：2.2.3情况二：单旋+变色c为红，p为红，g为黑，u不存在或者u存在且为黑。u不存在，则c一定是新增结点，u存在且为黑，则c一定不是新增，c之前是黑色的，是在c的子树中插入，符合情况1，变色将c从黑色变成红色，更新上来的。分析：p必须变黑，才能解决，连续红色结点的问题，u不存在或者是黑色的，这里单纯的变色无法解决问题，需要旋转+变色。如果p是g的左，c是p的左，那么以g为旋转点进行右单旋，再把p变黑，g变红即可。p变成课这颗树新的根，这样子树黑色结点的数量不变，没有连续的红色结点了，且不需要往上更新，因为p的父亲是黑色还是红色或者空都不违反规则。如果p是g的右，c是p的右，那么以g为旋转点进行左单旋，再把p变黑，g变红即可。p变成课这颗树新的根，这样子树黑色结点的数量不变，没有连续的红色结点了，且不需要往上更新，因为p的父亲是黑色还是红色或者空都不违反规则。2.2.4情况三：双旋+变色注意为什么说u存在且为黑c一定不是新增节点，因为如果是新增节点，c就是红色，那么当前路径下的黑色节点数量一定会比其他路径小于12.3插入代码实现bool Insert(const pair&lt;K, V&gt;&amp; kv){//空树直接插入if (_root == nullptr){_root = new Node(kv);_root-&gt;_col = BLACK;return true;}//找到需要插入的地方Node* cur = _root;Node* parent = cur-&gt;_parent;while (cur){if (cur-&gt;_kv.first &lt; kv.first){parent = cur;cur = cur-&gt;_right;}else if (cur-&gt;_kv.first &gt; kv.first){parent = cur;cur = cur-&gt;_left;}else{return false;}}//到这里找到了cur = new Node(kv);// 新增结点。颜色为红 cur-&gt;_col = RED;if (parent-&gt;_kv.first &lt; kv.first){parent-&gt;_right = cur;}else{parent-&gt;_left = cur;}cur-&gt;_parent = parent;while (parent &amp;&amp; parent-&gt;_col == RED){Node* grandfather = parent-&gt;_parent;if (parent == grandfather-&gt;_left){Node* uncle = grandfather-&gt;_right;//对应情况一，直接变色if (uncle &amp;&amp; uncle-&gt;_col == RED){//		 g//	 p	     u//c// 变色parent-&gt;_col = uncle-&gt;_col = BLACK;grandfather-&gt;_col = RED;// 继续往上处理cur = grandfather;parent = cur-&gt;_parent;}//uncle为nullptr 或者 uncle不为nullptr但为黑色else{if (cur == parent-&gt;_left)//对应情况二，单旋+变色{//     g//   p    u// cRotateR(grandfather);parent-&gt;_col = BLACK;grandfather-&gt;_col = RED;}else//对应情况三，双旋+变色{//      g//   p    u//     cRotateL(parent);RotateR(grandfather);cur-&gt;_col = BLACK;grandfather-&gt;_col = RED;}break;}}else{//对应情况一//   g// u   pNode* uncle = grandfather-&gt;_left;// 叔叔存在且为红，-&gt;变色即可if (uncle &amp;&amp; uncle-&gt;_col == RED)//对应情况一,直接变色{parent-&gt;_col = uncle-&gt;_col = BLACK;grandfather-&gt;_col = RED;// 继续往上处理cur = grandfather;parent = cur-&gt;_parent;}//uncle为nullptr 或者 uncle不为nullptr但为黑色else{if (cur == parent-&gt;_right)//对应情况二，单旋+变色{// 旋转+变色//   g// u   p//       cRotateL(grandfather);parent-&gt;_col = BLACK;grandfather-&gt;_col = RED;}else//对应情况三，双旋+变色{//   g// u   p//    cRotateR(parent);RotateL(grandfather);cur-&gt;_col = BLACK;grandfather-&gt;_col = RED;}break;}}}_root-&gt;_col = BLACK;return true;}2.4红黑树的查找还是二叉搜索树的逻辑Node* Find(const K&amp; key){Node* cur = _root;while (cur){if (cur-&gt;_kv.first &lt; key){cur = cur-&gt;_right;}else if (cur-&gt;_kv.first &gt; key){cur = cur-&gt;_left;}else{return cur;}}return nullptr;}2.5红黑树的验证1. 枚举颜色类型，天然实现保证了颜色不是黑色就是红色。2. 直接检查根即可。3. 前序遍历检查，遇到红色结点查孩子不太方便，因为孩子有两个，且不一定存在，反过来检查⽗亲的颜色就方便多了。4. 前序遍历，遍历过程中用形参记录跟到当前结点的blackNum(黑色结点数量)，前序遍历遇到黑色结点就++blackNum，走到空就计算出了一条路径的黑色结点数量。再任意一条路径黑色结点数量作为参考值，依次比较即可。bool Check(Node* root, int blackNum, const int refNum){if (root == nullptr){// 前序遍历走到空时，意味着⼀条路径走完了 //cout &lt;&lt; blackNum &lt;&lt; endl;if (refNum != blackNum){cout &lt;&lt; "存在黑色结点的数量不相等的路径" &lt;&lt; endl;return false;}return true;}// 检查孩子不太方便，因为孩子有两个，且不一定存在，反过来检查父亲就方便多了 if (root-&gt;_col == RED &amp;&amp; root-&gt;_parent-&gt;_col == RED){cout &lt;&lt; root-&gt;_kv.first &lt;&lt; "存在连续的红色结点" &lt;&lt; endl;return false;}if (root-&gt;_col == BLACK){blackNum++;}return Check(root-&gt;_left, blackNum, refNum)&amp;&amp; Check(root-&gt;_right, blackNum, refNum);}bool IsBalance(){if (_root == nullptr)return true;if (_root-&gt;_col == RED)return false;// 参考值 int refNum = 0;Node* cur = _root;while (cur){if (cur-&gt;_col == BLACK){++refNum;}cur = cur-&gt;_left;}return Check(_root, 0, refNum);}http://www.ppmy.cn/news/1540760.html相关文章阿里云验证码短信发送服务搭建（flask)参考&amp;#xff1a;https://next.api.aliyun.com/api-tools/sdk/Dysmsapi?version2017-05-25&amp;languagejava-async-tea&amp;tabprimer-doc 
我们需要思考验证服务一些要求&amp;#xff1a; 
1.验证码只能被验证一次&amp;#xff0c;所以需要状态字段 2.验证码有失效时间&amp;#xff0c;超…阅读更多...智能听诊器：宠物健康数据的守护者智能听诊器的出现&amp;#xff0c;为宠物健康数据的管理提供了新的解决方案。它能够收集宠物的生理数据&amp;#xff0c;并将其安全地存储在云端&amp;#xff0c;这样即使宠物主人更换设备或遗失数据&amp;#xff0c;也能轻松恢复宠物的健康记录。这种数据的长期保存和备份&amp;#xff0c;对于宠物…阅读更多...【从零开始的LeetCode-算法】908. 最小差值 I给你一个整数数组 nums&amp;#xff0c;和一个整数 k 。 
在一个操作中&amp;#xff0c;您可以选择 0 &lt; i &lt; nums.length 的任何索引 i 。将 nums[i] 改为 nums[i]  x &amp;#xff0c;其中 x 是一个范围为 [-k, k] 的任意整数。对于每个索引 i &amp;#xff0c;最多 只能 应用 一次 此操…阅读更多...金融衍生品中的风险对冲策略分析金融衍生品是现代金融市场中不可或缺的一部分&amp;#xff0c;它们通过标的资产的价格波动为投资者提供了多样的风险管理工具。随着市场的不确定性和复杂性增加&amp;#xff0c;风险对冲成为企业和个人投资者的首要任务。本文将深入探讨金融衍生品中的常见风险对冲策略&amp;#xff0c;分析…阅读更多...git分支操作简记一、分支名规则 
1、默认分支 
版本库中的默认分支命名为master 
2、/ 
可以使用斜杠&amp;#xff08;/&amp;#xff09; 创建一个分层的命名方案。 但是&amp;#xff0c; 该分支名不能以斜线结尾。 
3、- 分支名不能以减号&amp;#xff08;-&amp;#xff09; 开头。 
4. 以斜杠分割的组件不能以点&amp;…阅读更多...【配色网站分享】个人比较喜欢收藏一些好看的插画、UI设计图和配色&amp;#xff0c;于是有了此篇&amp;#xff0c;推荐一些配色网站&amp;#xff0c;希望能对自己和大家有些帮助。 
1.uiGradients 
一个主打渐变风网站&amp;#xff0c;还可以直接复制颜色。 左上角的“show all gradients”可以查看一些预设的渐…阅读更多...find_library、pkg_check_modules、pkg_search_module的区别在CMake中&amp;#xff0c;find_library、pkg_check_modules和pkg_search_module是用于查找和使用库的三种不同命令。以下是具体介绍&amp;#xff1a; find_library 功能&amp;#xff1a;find_library用于查找指定的库文件&amp;#xff08;动态库或静态库&amp;#xff09;&amp;#xff0c;不依赖于库提供…阅读更多...完美解决 PyCharm 2024.2.2 等新版本无法使用经典布局-旧布局的问题原始老版本可以的操作 
【pycharm】将pycharm新界面切换为旧界面_pycharm使用旧版ui-CSDN博客 
新版本解决方案 
对于 PyCharm 2024.2.2 及更高版本&amp;#xff0c;如果通过上述方法找不到修改经典布局选项&amp;#xff0c;可以按照官方文档的步骤进行操作&amp;#xff1a; 
新 UI |PyChar…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:19:01 +0000</pubDate>
    </item>
    <item>
      <title>阿里云验证码短信发送服务搭建（flask)</title>
      <link>https://www.ppmy.cn/news/1540758.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维阿里云验证码短信发送服务搭建（flask)news/2025/10/31 22:18:58/参考：https://next.api.aliyun.com/api-tools/sdk/Dysmsapi?version=2017-05-25&amp;language=java-async-tea&amp;tab=primer-doc我们需要思考验证服务一些要求：1.验证码只能被验证一次，所以需要状态字段2.验证码有失效时间，超出时间后则失效3.验证码有限制次数，比如1min只能发送一次，1h只能发送xx次，一天只能发送xx次4.验证码由random包生成四位随机数字因此，我们创建数据表CREATETABLE`verification_code`(`id`intNOTNULLAUTO_INCREMENT,`phone`varchar(11)CHARACTERSETutf8mb4COLLATEutf8mb4_0900_ai_ciDEFAULT''COMMENT'手机号码',`code`varchar(6)DEFAULT''COMMENT'验证码',`channel`varchar(255)CHARACTERSETutf8mb4COLLATEutf8mb4_0900_ai_ciDEFAULT''COMMENT'渠道名称',`template_code`varchar(255)CHARACTERSETutf8mb4COLLATEutf8mb4_0900_ai_ciDEFAULT''COMMENT'模板代码',`status`tinyintDEFAULT'10'COMMENT'状态',`create_time`datetimeDEFAULTCURRENT_TIMESTAMP,`update_time`datetimeDEFAULTCURRENT_TIMESTAMPONUPDATECURRENT_TIMESTAMP,`type`tinyintDEFAULT'1'COMMENT'类型 1:验证码短信 2:通知短信',PRIMARYKEY(`id`))ENGINE=InnoDBAUTO_INCREMENT=9DEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_0900_ai_ci;项目结构如下：web.py是我们的主文件注意作者此处使用了数据库操作方法更改状态，读者可以使用redis等数据库操作fromdatetimeimportdatetime,timedeltafromflaskimportrequest,jsonifyimportrandomfromutilsimportSamplefrommy_app.crud.crud_SMSimportCRUDSMSapp=Flask(__name__)# 统一响应数据格式defresponse(code=200,message="请求成功！",data=None):res={'code':code,'message':message,'data':dataifdataisnotNoneelse{}}returnjsonify(res)# 定义一个错误处理器，捕获所有的异常@app.errorhandler(Exception)defhandle_error(e):returnresponse(400,str(e))@app.route('/sms_message/verify_code',methods=['POST'])defverify():data=request.get_json()phone=data.get('phone')code=data.get('code')channel=data.get('channel')result=CRUDSMS.get(phone,channel)current_time=datetime.now()# 判断 验证码是否有效ifresult:ifcurrent_time-result['create_time']&gt;timedelta(minutes=5):returnresponse(401,message="验证码已过期")# 验证码是否正确ifcode==result['code']:ifresult['status']==99:returnresponse(401,message="验证码已被验证过了，请勿重复使用")else:CRUDSMS.update(result["id"],{"status":99})#过期失效returnresponse(200,message="验证成功")else:returnresponse(405,message="验证码错误")else:returnresponse(406,message="该手机未发送过验证码")@app.route('/sms_message/getVerificationCode',methods=['POST'])defgetVerificationCode():data=request.get_json()channel=data.get('channel')phone=data.get('phone')# 随机生成四位数字random_number_str=''.join([str(random.randint(0,9))for_inrange(4)])template_code="xxx"result=CRUDSMS.get(phone,channel)current_time=datetime.now()# 判断 验证码是在1min之内发送过ifresultandcurrent_time-result['create_time']&lt;timedelta(minutes=1):returnresponse(401,message="短信1分钟之内已经发送过，请稍后再试")# 判断用户最近一小时发过几次短信# 计算过去 1 小时的时间点one_hour_ago=current_time-timedelta(hours=1)one_day_ago=current_time-timedelta(days=1)past_hour_message_num=CRUDSMS.count(phone,channel,one_hour_ago)past_day_message_num=CRUDSMS.count(phone,channel,one_day_ago)ifpast_hour_message_num&gt;5:returnresponse(402,message="短信1小时之内已经发送过5条，超出上限，请稍后再试")ifpast_day_message_num&gt;10:returnresponse(403,message="短信1天之内已经发送过10条，超出上限，请稍后再试")result=Sample.getVerificationCode(template_code,phone,random_number_str)ifresult:CRUDSMS.create({"type":1,"channel":channel,"phone":phone,"code":random_number_str,"template_code":template_code,"create_time":datetime.now().strftime('%Y-%m-%d %H:%M:%S')})returnresponse(200,data=random_number_str)returnresponse(400,message="短信发送失败")@app.route('/sms_message/sendNotice',methods=['POST'])defsendNotice():# 从请求中获取union_iddata=request.get_json()template_code=data.get('template_code')channel=data.get('channel')template_param=data.get('template_param','')phone=data.get('phone')result=Sample.sendNotice(template_code,phone,template_param)ifresult:# 存入数据库CRUDSMS.create({"type":2,"channel":channel,"phone":phone,"code":"","template_code":template_code,"create_time":datetime.now().strftime('%Y-%m-%d %H:%M:%S')})returnresponse(200)returnresponse(400,message="短信发送失败")if__name__=='__main__':app.run(debug=True,host="0.0.0.0",port=5000)utils.py文件是操作阿里云接口的方法:填写sign_name、 ALIBABA_CLOUD_ACCESS_KEY_ID、ALIBABA_CLOUD_ACCESS_KEY_SECRET# -*- coding: utf-8 -*-# This file is auto-generated, don't edit it. Thanks.importosimportsysfromtypingimportListfromalibabacloud_dysmsapi20170525.clientimportClientasDysmsapi20170525Clientfromalibabacloud_tea_openapiimportmodelsasopen_api_modelsfromalibabacloud_dysmsapi20170525importmodelsasdysmsapi_20170525_modelsfromalibabacloud_tea_utilimportmodelsasutil_modelsfromalibabacloud_tea_util.clientimportClientasUtilClientfromloggerimportnormal_log,error_log
ALIBABA_CLOUD_ACCESS_KEY_ID=""ALIBABA_CLOUD_ACCESS_KEY_SECRET=""classSample:def__init__(self):pass@staticmethoddefcreate_client()-&gt;Dysmsapi20170525Client:"""使用AK&amp;SK初始化账号Client@return: Client@throws Exception"""# 工程代码泄露可能会导致 AccessKey 泄露，并威胁账号下所有资源的安全性。以下代码示例仅供参考。# 建议使用更安全的 STS 方式，更多鉴权访问方式请参见：https://help.aliyun.com/document_detail/378659.html。config=open_api_models.Config(# 必填，请确保代码运行环境设置了环境变量 ALIBABA_CLOUD_ACCESS_KEY_ID。,access_key_id=ALIBABA_CLOUD_ACCESS_KEY_ID,# 必填，请确保代码运行环境设置了环境变量 ALIBABA_CLOUD_ACCESS_KEY_SECRET。,access_key_secret=ALIBABA_CLOUD_ACCESS_KEY_SECRET)# Endpoint 请参考 https://api.aliyun.com/product/Dysmsapiconfig.endpoint=f'dysmsapi.aliyuncs.com'returnDysmsapi20170525Client(config)@staticmethoddefgetVerificationCode(template_code,phone_numbers,code):client=Sample.create_client()send_sms_request=dysmsapi_20170525_models.SendSmsRequest(phone_numbers=phone_numbers,sign_name='xxx',template_code=template_code,template_param='{"code":"%s"}'%code,)try:# 复制代码运行请自行打印 API 的返回值client.send_sms_with_options(send_sms_request,util_models.RuntimeOptions())normal_log.logger.info("{} 发送验证码成功".format(phone_numbers))returnTrueexceptExceptionaserror:# 此处仅做打印展示，请谨慎对待异常处理，在工程项目中切勿直接忽略异常。# 错误 messageprint("{} 发送验证码失败{}".format(phone_numbers,str(error)))returnFalse@staticmethoddefsendNotice(template_code,phone_numbers,template_param):client=Sample.create_client()send_sms_request=dysmsapi_20170525_models.SendSmsRequest(phone_numbers=phone_numbers,sign_name='',template_code=template_code,template_param=template_param)try:# 复制代码运行请自行打印 API 的返回值client.send_sms_with_options(send_sms_request,util_models.RuntimeOptions())returnTrueexceptExceptionaserror:...http://www.ppmy.cn/news/1540758.html相关文章智能听诊器：宠物健康数据的守护者智能听诊器的出现&amp;#xff0c;为宠物健康数据的管理提供了新的解决方案。它能够收集宠物的生理数据&amp;#xff0c;并将其安全地存储在云端&amp;#xff0c;这样即使宠物主人更换设备或遗失数据&amp;#xff0c;也能轻松恢复宠物的健康记录。这种数据的长期保存和备份&amp;#xff0c;对于宠物…阅读更多...【从零开始的LeetCode-算法】908. 最小差值 I给你一个整数数组 nums&amp;#xff0c;和一个整数 k 。 
在一个操作中&amp;#xff0c;您可以选择 0 &lt; i &lt; nums.length 的任何索引 i 。将 nums[i] 改为 nums[i]  x &amp;#xff0c;其中 x 是一个范围为 [-k, k] 的任意整数。对于每个索引 i &amp;#xff0c;最多 只能 应用 一次 此操…阅读更多...金融衍生品中的风险对冲策略分析金融衍生品是现代金融市场中不可或缺的一部分&amp;#xff0c;它们通过标的资产的价格波动为投资者提供了多样的风险管理工具。随着市场的不确定性和复杂性增加&amp;#xff0c;风险对冲成为企业和个人投资者的首要任务。本文将深入探讨金融衍生品中的常见风险对冲策略&amp;#xff0c;分析…阅读更多...git分支操作简记一、分支名规则 
1、默认分支 
版本库中的默认分支命名为master 
2、/ 
可以使用斜杠&amp;#xff08;/&amp;#xff09; 创建一个分层的命名方案。 但是&amp;#xff0c; 该分支名不能以斜线结尾。 
3、- 分支名不能以减号&amp;#xff08;-&amp;#xff09; 开头。 
4. 以斜杠分割的组件不能以点&amp;…阅读更多...【配色网站分享】个人比较喜欢收藏一些好看的插画、UI设计图和配色&amp;#xff0c;于是有了此篇&amp;#xff0c;推荐一些配色网站&amp;#xff0c;希望能对自己和大家有些帮助。 
1.uiGradients 
一个主打渐变风网站&amp;#xff0c;还可以直接复制颜色。 左上角的“show all gradients”可以查看一些预设的渐…阅读更多...find_library、pkg_check_modules、pkg_search_module的区别在CMake中&amp;#xff0c;find_library、pkg_check_modules和pkg_search_module是用于查找和使用库的三种不同命令。以下是具体介绍&amp;#xff1a; find_library 功能&amp;#xff1a;find_library用于查找指定的库文件&amp;#xff08;动态库或静态库&amp;#xff09;&amp;#xff0c;不依赖于库提供…阅读更多...完美解决 PyCharm 2024.2.2 等新版本无法使用经典布局-旧布局的问题原始老版本可以的操作 
【pycharm】将pycharm新界面切换为旧界面_pycharm使用旧版ui-CSDN博客 
新版本解决方案 
对于 PyCharm 2024.2.2 及更高版本&amp;#xff0c;如果通过上述方法找不到修改经典布局选项&amp;#xff0c;可以按照官方文档的步骤进行操作&amp;#xff1a; 
新 UI |PyChar…阅读更多...【C++贪心 数学归纳法】1054. 距离相等的条形码|1701本文涉及知识点 
C贪心 数学归纳法 
LeetCode1054. 距离相等的条形码 
在一个仓库里&amp;#xff0c;有一排条形码&amp;#xff0c;其中第 i 个条形码为 barcodes[i]。 请你重新排列这些条形码&amp;#xff0c;使其中任意两个相邻的条形码不能相等。 你可以返回任何满足该要求的答案&amp;#x…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:58 +0000</pubDate>
    </item>
    <item>
      <title>智能听诊器：宠物健康数据的守护者</title>
      <link>https://www.ppmy.cn/news/1540757.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维智能听诊器：宠物健康数据的守护者news/2025/10/31 22:18:57/智能听诊器的出现，为宠物健康数据的管理提供了新的解决方案。它能够收集宠物的生理数据，并将其安全地存储在云端，这样即使宠物主人更换设备或遗失数据，也能轻松恢复宠物的健康记录。这种数据的长期保存和备份，对于宠物的健康管理至关重要。智能听诊器通过持续监测宠物的生理指标，为宠物主人提供了一个全面的宠物健康数据库。这些数据不仅可以用于日常的健康监测，还可以在宠物生病时提供重要的诊断信息。此外，智能听诊器的云端存储功能，也使得宠物主人能够随时随地访问宠物的健康数据，无论是在家中还是在旅行中。智能听诊器的数据分析能力，使得宠物主人和医生能够更早地发现宠物的健康状况变化，从而采取预防措施。这种趋势分析功能，为宠物主人提供了宝贵的预防信息。总之，智能听诊器是宠物健康数据的守护者。它通过高精度的监测和云端存储功能，为宠物主人提供了一种新的宠物健康管理方式。随着技术的不断进步，智能听诊器将为宠物的健康带来更多的保障。http://www.ppmy.cn/news/1540757.html相关文章【从零开始的LeetCode-算法】908. 最小差值 I给你一个整数数组 nums&amp;#xff0c;和一个整数 k 。 
在一个操作中&amp;#xff0c;您可以选择 0 &lt; i &lt; nums.length 的任何索引 i 。将 nums[i] 改为 nums[i]  x &amp;#xff0c;其中 x 是一个范围为 [-k, k] 的任意整数。对于每个索引 i &amp;#xff0c;最多 只能 应用 一次 此操…阅读更多...金融衍生品中的风险对冲策略分析金融衍生品是现代金融市场中不可或缺的一部分&amp;#xff0c;它们通过标的资产的价格波动为投资者提供了多样的风险管理工具。随着市场的不确定性和复杂性增加&amp;#xff0c;风险对冲成为企业和个人投资者的首要任务。本文将深入探讨金融衍生品中的常见风险对冲策略&amp;#xff0c;分析…阅读更多...git分支操作简记一、分支名规则 
1、默认分支 
版本库中的默认分支命名为master 
2、/ 
可以使用斜杠&amp;#xff08;/&amp;#xff09; 创建一个分层的命名方案。 但是&amp;#xff0c; 该分支名不能以斜线结尾。 
3、- 分支名不能以减号&amp;#xff08;-&amp;#xff09; 开头。 
4. 以斜杠分割的组件不能以点&amp;…阅读更多...【配色网站分享】个人比较喜欢收藏一些好看的插画、UI设计图和配色&amp;#xff0c;于是有了此篇&amp;#xff0c;推荐一些配色网站&amp;#xff0c;希望能对自己和大家有些帮助。 
1.uiGradients 
一个主打渐变风网站&amp;#xff0c;还可以直接复制颜色。 左上角的“show all gradients”可以查看一些预设的渐…阅读更多...find_library、pkg_check_modules、pkg_search_module的区别在CMake中&amp;#xff0c;find_library、pkg_check_modules和pkg_search_module是用于查找和使用库的三种不同命令。以下是具体介绍&amp;#xff1a; find_library 功能&amp;#xff1a;find_library用于查找指定的库文件&amp;#xff08;动态库或静态库&amp;#xff09;&amp;#xff0c;不依赖于库提供…阅读更多...完美解决 PyCharm 2024.2.2 等新版本无法使用经典布局-旧布局的问题原始老版本可以的操作 
【pycharm】将pycharm新界面切换为旧界面_pycharm使用旧版ui-CSDN博客 
新版本解决方案 
对于 PyCharm 2024.2.2 及更高版本&amp;#xff0c;如果通过上述方法找不到修改经典布局选项&amp;#xff0c;可以按照官方文档的步骤进行操作&amp;#xff1a; 
新 UI |PyChar…阅读更多...【C++贪心 数学归纳法】1054. 距离相等的条形码|1701本文涉及知识点 
C贪心 数学归纳法 
LeetCode1054. 距离相等的条形码 
在一个仓库里&amp;#xff0c;有一排条形码&amp;#xff0c;其中第 i 个条形码为 barcodes[i]。 请你重新排列这些条形码&amp;#xff0c;使其中任意两个相邻的条形码不能相等。 你可以返回任何满足该要求的答案&amp;#x…阅读更多...Kafka-设计思想-1一、说明 
不得不说&amp;#xff0c;官网和源码确实是我们学习技术最直接的地方&amp;#xff0c;下面我们就来根据官网学习下Kafka的设计思想&amp;#xff0c;官网地址&amp;#xff1a;https://kafka.apache.org/documentation/#design 
二、Kafka需要具备哪些功能 
1、需要作为统一平台处理一个…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:57 +0000</pubDate>
    </item>
    <item>
      <title>【从零开始的LeetCode-算法】908. 最小差值 I</title>
      <link>https://www.ppmy.cn/news/1540756.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【从零开始的LeetCode-算法】908. 最小差值 Inews/2025/10/31 22:18:55/给你一个整数数组nums，和一个整数k。在一个操作中，您可以选择0 &lt;= i &lt; nums.length的任何索引i。将nums[i]改为nums[i] + x，其中x是一个范围为[-k, k]的任意整数。对于每个索引i，最多只能应用一次此操作。nums的分数是nums中最大和最小元素的差值。在对nums中的每个索引最多应用一次上述操作后，返回nums的最低分数。示例 1：输入：nums = [1], k = 0输出：0解释：分数是 max(nums) - min(nums) = 1 - 1 = 0。示例 2：输入：nums = [0,10], k = 2输出：6解释：将 nums 改为 [2,8]。分数是 max(nums) - min(nums) = 8 - 2 = 6。示例 3：输入：nums = [1,3,6], k = 3输出：0解释：将 nums 改为 [4,4,4]。分数是 max(nums) - min(nums) = 4 - 4 = 0。提示：1 &lt;= nums.length &lt;= 10^40 &lt;= nums[i] &lt;= 10^40 &lt;= k &lt;= 10^4class Solution {public int smallestRangeI(int[] nums, int k) {if(nums.length == 1) return 0;Arrays.sort(nums);return Math.max(0,nums[nums.length - 1] - nums[0]  - 2 * k);}
}http://www.ppmy.cn/news/1540756.html相关文章金融衍生品中的风险对冲策略分析金融衍生品是现代金融市场中不可或缺的一部分&amp;#xff0c;它们通过标的资产的价格波动为投资者提供了多样的风险管理工具。随着市场的不确定性和复杂性增加&amp;#xff0c;风险对冲成为企业和个人投资者的首要任务。本文将深入探讨金融衍生品中的常见风险对冲策略&amp;#xff0c;分析…阅读更多...git分支操作简记一、分支名规则 
1、默认分支 
版本库中的默认分支命名为master 
2、/ 
可以使用斜杠&amp;#xff08;/&amp;#xff09; 创建一个分层的命名方案。 但是&amp;#xff0c; 该分支名不能以斜线结尾。 
3、- 分支名不能以减号&amp;#xff08;-&amp;#xff09; 开头。 
4. 以斜杠分割的组件不能以点&amp;…阅读更多...【配色网站分享】个人比较喜欢收藏一些好看的插画、UI设计图和配色&amp;#xff0c;于是有了此篇&amp;#xff0c;推荐一些配色网站&amp;#xff0c;希望能对自己和大家有些帮助。 
1.uiGradients 
一个主打渐变风网站&amp;#xff0c;还可以直接复制颜色。 左上角的“show all gradients”可以查看一些预设的渐…阅读更多...find_library、pkg_check_modules、pkg_search_module的区别在CMake中&amp;#xff0c;find_library、pkg_check_modules和pkg_search_module是用于查找和使用库的三种不同命令。以下是具体介绍&amp;#xff1a; find_library 功能&amp;#xff1a;find_library用于查找指定的库文件&amp;#xff08;动态库或静态库&amp;#xff09;&amp;#xff0c;不依赖于库提供…阅读更多...完美解决 PyCharm 2024.2.2 等新版本无法使用经典布局-旧布局的问题原始老版本可以的操作 
【pycharm】将pycharm新界面切换为旧界面_pycharm使用旧版ui-CSDN博客 
新版本解决方案 
对于 PyCharm 2024.2.2 及更高版本&amp;#xff0c;如果通过上述方法找不到修改经典布局选项&amp;#xff0c;可以按照官方文档的步骤进行操作&amp;#xff1a; 
新 UI |PyChar…阅读更多...【C++贪心 数学归纳法】1054. 距离相等的条形码|1701本文涉及知识点 
C贪心 数学归纳法 
LeetCode1054. 距离相等的条形码 
在一个仓库里&amp;#xff0c;有一排条形码&amp;#xff0c;其中第 i 个条形码为 barcodes[i]。 请你重新排列这些条形码&amp;#xff0c;使其中任意两个相邻的条形码不能相等。 你可以返回任何满足该要求的答案&amp;#x…阅读更多...Kafka-设计思想-1一、说明 
不得不说&amp;#xff0c;官网和源码确实是我们学习技术最直接的地方&amp;#xff0c;下面我们就来根据官网学习下Kafka的设计思想&amp;#xff0c;官网地址&amp;#xff1a;https://kafka.apache.org/documentation/#design 
二、Kafka需要具备哪些功能 
1、需要作为统一平台处理一个…阅读更多...基于STM32的电流监测系统设计思路一、项目概述 
电流监测系统在现代电力管理和自动化控制中扮演着至关重要的角色。本文介绍了一个基于STM32微控制器的电流监测系统&amp;#xff0c;旨在通过霍尔传感器或电流分流器实时测量电流&amp;#xff0c;并利用LCD或OLED显示模块展示当前电流值。同时&amp;#xff0c;系统还支持通过…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:55 +0000</pubDate>
    </item>
    <item>
      <title>金融衍生品中的风险对冲策略分析</title>
      <link>https://www.ppmy.cn/news/1540755.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维金融衍生品中的风险对冲策略分析news/2025/10/31 22:18:54/金融衍生品是现代金融市场中不可或缺的一部分，它们通过标的资产的价格波动为投资者提供了多样的风险管理工具。随着市场的不确定性和复杂性增加，风险对冲成为企业和个人投资者的首要任务。本文将深入探讨金融衍生品中的常见风险对冲策略，分析其在不同行业中的实际应用，以及如何通过技术手段优化对冲效果。#### 一、金融衍生品概述金融衍生品是指其价值取决于某种基础资产或指数的金融工具。常见的衍生品包括期权、期货、互换、远期合约等。由于金融衍生品价格与标的资产价格密切相关，投资者可以利用这些工具在不直接持有标的资产的情况下进行交易。衍生品最显著的功能之一就是风险管理，即通过对冲策略减少资产组合中的系统性和非系统性风险。无论是商品价格波动、外汇波动，还是股市波动，金融衍生品都提供了灵活的解决方案。#### 二、常见的风险对冲策略在金融市场中，风险对冲策略广泛应用于不同资产类别和投资组合。以下是几种常见的对冲策略：1.期货对冲期货合约是最常见的对冲工具之一，投资者可以通过在期货市场买入或卖出与现货市场相对应的合约，锁定未来的价格波动。例如，企业可以通过在期货市场卖出与其持有商品相同的期货合约，来对冲现货市场中的价格波动。2.期权对冲期权是一种赋予持有者在未来某一特定时间以特定价格买入或卖出资产的权利。通过购买看涨期权或看跌期权，投资者可以锁定未来的价格，并在价格不利时获得补偿。例如，某个投资者担心其股票的价格下跌，可以购买看跌期权以对冲下跌风险。3.跨货币对冲跨国公司和投资者经常面临外汇风险，因此通过货币互换或远期合约进行跨货币对冲是常见的做法。货币互换允许双方在未来交换不同货币的现金流，以锁定汇率波动带来的风险。跨货币对冲帮助企业降低外汇市场的波动性风险。4.互换对冲互换合约是一种金融衍生工具，允许两方在未来交换不同的现金流。例如，利率互换允许双方交换固定利率和浮动利率的现金流，从而对冲利率波动带来的风险。通过这种方式，企业可以将其贷款成本固定下来，以应对利率上涨带来的负面影响。5.动态对冲策略动态对冲策略是一种基于市场变化动态调整头寸的对冲策略。与传统的静态对冲不同，动态对冲允许投资者根据市场波动灵活调整对冲规模，从而提高对冲效果。常见的动态对冲策略包括期权的Delta对冲，即通过调整股票头寸来维持期权的中性头寸。#### 三、风险对冲策略的实际应用金融衍生品中的风险对冲策略广泛应用于多个行业，不同市场的投资者和企业都通过使用这些工具来规避风险。以下是几个典型的应用案例：1.大宗商品行业的期货对冲在石油、天然气、农产品等大宗商品市场，企业通过使用期货合约来锁定未来的采购或销售价格。例如，航空公司可能会使用石油期货来对冲油价波动带来的风险，确保其运营成本的可控性。2.外汇市场中的跨货币对冲在外汇市场，跨国公司使用远期外汇合约来对冲汇率波动。例如，一家欧洲企业计划未来进口美国的设备，担心欧元相对美元贬值，企业可以签订远期外汇合约，以目前的汇率锁定未来的支付金额，从而避免汇率波动带来的财务风险。3.股票市场中的期权对冲股票投资者通过使用看涨或看跌期权来对冲市场风险。例如，一位持有大量股票的投资者担心未来市场下跌，可以通过购买看跌期权来对冲潜在的损失。如果股票价格下跌，看跌期权的盈利将弥补股票价格下跌造成的损失。4.利率市场中的互换对冲企业和金融机构使用利率互换来对冲利率波动的风险。例如，一家企业在浮动利率环境下贷款，但担心利率上升带来成本增加，因此可以通过利率互换将浮动利率转换为固定利率，从而减少利率波动的影响。#### 四、对冲策略的挑战与风险尽管金融衍生品提供了强大的风险对冲工具，但它们也伴随着一定的挑战和风险。如果对冲策略使用不当，可能会导致意外损失。1.模型风险金融衍生品的定价和风险管理通常依赖于复杂的数学模型。如果模型假设不符合实际市场状况或数据输入不准确，可能导致错误的风险估计和对冲决策。2.流动性风险在极端市场条件下，某些衍生品市场的流动性可能不足，导致对冲策略难以执行或执行成本过高。例如，在金融危机期间，某些期货和期权市场的流动性大幅下降，使得投资者难以通过对冲操作来规避风险。3.对手方风险使用金融衍生品进行对冲通常涉及多个交易对手方，如果对手方信用风险增加，可能导致合约无法履行，进而增加交易风险。为应对这一风险，投资者通常会选择信誉良好的交易平台或使用保证金制度来减少违约风险。4.过度对冲风险过度对冲可能导致不必要的成本和操作复杂性。例如，动态对冲策略虽然可以灵活应对市场变化，但频繁调整头寸可能增加交易成本，并对整体收益造成负面影响。#### 五、技术手段对对冲策略的优化随着技术的发展，投资者和企业可以通过数据分析、自动化交易和算法优化来提升对冲策略的效果。以下是几种技术手段：1.数据分析与大数据利用大数据技术，投资者可以更精准地预测市场波动并制定对冲策略。通过分析历史价格数据、经济指标和市场情绪数据，投资者能够建立更具前瞻性的风险管理模型。2.自动化交易系统自动化交易系统可以根据预设的算法实时调整对冲头寸，提高对冲的执行效率。投资者可以使用自动化交易平台，通过API接口执行复杂的对冲策略，减少人工操作中的延迟和错误。3.算法优化通过优化对冲算法，投资者可以在不同市场条件下找到最优的对冲比例。例如，在期权对冲中，投资者可以通过优化Delta、Gamma等参数来减少市场波动对投资组合的影响，达到更高效的风险管理效果。4.人工智能与机器学习人工智能和机器学习技术正逐渐被应用于对冲策略中，通过机器学习模型，投资者可以分析市场中的潜在风险并自动优化对冲策略。深度学习算法能够识别市场中的非线性关系，提供更加智能化的对冲解决方案。#### 六、结论金融衍生品为市场中的投资者和企业提供了多种风险对冲工具，从期货和期权到互换和远期合约，投资者可以根据具体需求灵活运用这些工具。然而，在执行对冲策略时，必须充分考虑模型风险、流动性风险和对手方风险等潜在挑战。通过技术手段的优化和自动化，投资者可以提高对冲效率，降低风险，确保在动荡的市场中保持稳健的表现。---### Python代码示例：简单的期权Delta对冲策略以下是一个使用Python编写的简单期权Delta对冲策略代码示例。```pythonimport numpy as npimport matplotlib.pyplot as plt# 假设股票价格和波动率S0 = 100  # 初始股票价格sigma = 0.2  # 波动率r = 0.01  # 无风险利率T = 1  # 期权到期时间K = 100  # 行权价steps = 252  # 每年的时间步数# Blackhttp://www.ppmy.cn/news/1540755.html相关文章git分支操作简记一、分支名规则 
1、默认分支 
版本库中的默认分支命名为master 
2、/ 
可以使用斜杠&amp;#xff08;/&amp;#xff09; 创建一个分层的命名方案。 但是&amp;#xff0c; 该分支名不能以斜线结尾。 
3、- 分支名不能以减号&amp;#xff08;-&amp;#xff09; 开头。 
4. 以斜杠分割的组件不能以点&amp;…阅读更多...【配色网站分享】个人比较喜欢收藏一些好看的插画、UI设计图和配色&amp;#xff0c;于是有了此篇&amp;#xff0c;推荐一些配色网站&amp;#xff0c;希望能对自己和大家有些帮助。 
1.uiGradients 
一个主打渐变风网站&amp;#xff0c;还可以直接复制颜色。 左上角的“show all gradients”可以查看一些预设的渐…阅读更多...find_library、pkg_check_modules、pkg_search_module的区别在CMake中&amp;#xff0c;find_library、pkg_check_modules和pkg_search_module是用于查找和使用库的三种不同命令。以下是具体介绍&amp;#xff1a; find_library 功能&amp;#xff1a;find_library用于查找指定的库文件&amp;#xff08;动态库或静态库&amp;#xff09;&amp;#xff0c;不依赖于库提供…阅读更多...完美解决 PyCharm 2024.2.2 等新版本无法使用经典布局-旧布局的问题原始老版本可以的操作 
【pycharm】将pycharm新界面切换为旧界面_pycharm使用旧版ui-CSDN博客 
新版本解决方案 
对于 PyCharm 2024.2.2 及更高版本&amp;#xff0c;如果通过上述方法找不到修改经典布局选项&amp;#xff0c;可以按照官方文档的步骤进行操作&amp;#xff1a; 
新 UI |PyChar…阅读更多...【C++贪心 数学归纳法】1054. 距离相等的条形码|1701本文涉及知识点 
C贪心 数学归纳法 
LeetCode1054. 距离相等的条形码 
在一个仓库里&amp;#xff0c;有一排条形码&amp;#xff0c;其中第 i 个条形码为 barcodes[i]。 请你重新排列这些条形码&amp;#xff0c;使其中任意两个相邻的条形码不能相等。 你可以返回任何满足该要求的答案&amp;#x…阅读更多...Kafka-设计思想-1一、说明 
不得不说&amp;#xff0c;官网和源码确实是我们学习技术最直接的地方&amp;#xff0c;下面我们就来根据官网学习下Kafka的设计思想&amp;#xff0c;官网地址&amp;#xff1a;https://kafka.apache.org/documentation/#design 
二、Kafka需要具备哪些功能 
1、需要作为统一平台处理一个…阅读更多...基于STM32的电流监测系统设计思路一、项目概述 
电流监测系统在现代电力管理和自动化控制中扮演着至关重要的角色。本文介绍了一个基于STM32微控制器的电流监测系统&amp;#xff0c;旨在通过霍尔传感器或电流分流器实时测量电流&amp;#xff0c;并利用LCD或OLED显示模块展示当前电流值。同时&amp;#xff0c;系统还支持通过…阅读更多...自动驾驶系列—图像数据在自动驾驶中的关键角色及其实际应用场景探讨&amp;#x1f31f;&amp;#x1f31f; 欢迎来到我的技术小筑&amp;#xff0c;一个专为技术探索者打造的交流空间。在这里&amp;#xff0c;我们不仅分享代码的智慧&amp;#xff0c;还探讨技术的深度与广度。无论您是资深开发者还是技术新手&amp;#xff0c;这里都有一片属于您的天空。让我们在知识的海洋中…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:54 +0000</pubDate>
    </item>
    <item>
      <title>git分支操作简记</title>
      <link>https://www.ppmy.cn/news/1540754.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维git分支操作简记news/2025/10/31 22:18:52/一、分支名规则1、默认分支版本库中的默认分支命名为master2、/可以使用斜杠（/） 创建一个分层的命名方案。 但是， 该分支名不能以斜线结尾。3、-分支名不能以减号（-） 开头。4.以斜杠分割的组件不能以点（.） 开头。 如feature/.new这样的分支名是无效的。5、..分支名的任何地方都不能包含两个连续的点（..） 。6、其他禁用字符：任何空格或其他空白字符在Git中具有特殊含义的字符， 包括波浪线（～） 、 插入符（^） 、 冒号（： ） 、 问号（？ ） 、 星号（*） 、 左方括号（ [） 。ASCII码控制字符， 即值小于八进制\040的字符， 或DEL字符（ 八进制\177） 。二、分支操作1、创建分支git branch + 分支名 +初始提交（可省略）2、列出分支名git branch3、查看分支git show-branch （更详细）4、检出分支git checkout + 分支名5、合并变更到不同分支git checkout -m + 分支名6、创建并检出分支git checkout -b +分支名7、删除分支git branch -d + 分支名使用-D可覆盖git安全检查8、查看分支操作记录（包括被删除的）git reflog可以配合git branch恢复被删除的分支http://www.ppmy.cn/news/1540754.html相关文章【配色网站分享】个人比较喜欢收藏一些好看的插画、UI设计图和配色&amp;#xff0c;于是有了此篇&amp;#xff0c;推荐一些配色网站&amp;#xff0c;希望能对自己和大家有些帮助。 
1.uiGradients 
一个主打渐变风网站&amp;#xff0c;还可以直接复制颜色。 左上角的“show all gradients”可以查看一些预设的渐…阅读更多...find_library、pkg_check_modules、pkg_search_module的区别在CMake中&amp;#xff0c;find_library、pkg_check_modules和pkg_search_module是用于查找和使用库的三种不同命令。以下是具体介绍&amp;#xff1a; find_library 功能&amp;#xff1a;find_library用于查找指定的库文件&amp;#xff08;动态库或静态库&amp;#xff09;&amp;#xff0c;不依赖于库提供…阅读更多...完美解决 PyCharm 2024.2.2 等新版本无法使用经典布局-旧布局的问题原始老版本可以的操作 
【pycharm】将pycharm新界面切换为旧界面_pycharm使用旧版ui-CSDN博客 
新版本解决方案 
对于 PyCharm 2024.2.2 及更高版本&amp;#xff0c;如果通过上述方法找不到修改经典布局选项&amp;#xff0c;可以按照官方文档的步骤进行操作&amp;#xff1a; 
新 UI |PyChar…阅读更多...【C++贪心 数学归纳法】1054. 距离相等的条形码|1701本文涉及知识点 
C贪心 数学归纳法 
LeetCode1054. 距离相等的条形码 
在一个仓库里&amp;#xff0c;有一排条形码&amp;#xff0c;其中第 i 个条形码为 barcodes[i]。 请你重新排列这些条形码&amp;#xff0c;使其中任意两个相邻的条形码不能相等。 你可以返回任何满足该要求的答案&amp;#x…阅读更多...Kafka-设计思想-1一、说明 
不得不说&amp;#xff0c;官网和源码确实是我们学习技术最直接的地方&amp;#xff0c;下面我们就来根据官网学习下Kafka的设计思想&amp;#xff0c;官网地址&amp;#xff1a;https://kafka.apache.org/documentation/#design 
二、Kafka需要具备哪些功能 
1、需要作为统一平台处理一个…阅读更多...基于STM32的电流监测系统设计思路一、项目概述 
电流监测系统在现代电力管理和自动化控制中扮演着至关重要的角色。本文介绍了一个基于STM32微控制器的电流监测系统&amp;#xff0c;旨在通过霍尔传感器或电流分流器实时测量电流&amp;#xff0c;并利用LCD或OLED显示模块展示当前电流值。同时&amp;#xff0c;系统还支持通过…阅读更多...自动驾驶系列—图像数据在自动驾驶中的关键角色及其实际应用场景探讨&amp;#x1f31f;&amp;#x1f31f; 欢迎来到我的技术小筑&amp;#xff0c;一个专为技术探索者打造的交流空间。在这里&amp;#xff0c;我们不仅分享代码的智慧&amp;#xff0c;还探讨技术的深度与广度。无论您是资深开发者还是技术新手&amp;#xff0c;这里都有一片属于您的天空。让我们在知识的海洋中…阅读更多...Zookeeper 快速入门到实战这几天利用好好工作摸鱼的时间梳理了一遍 Zookeeper 相关的内容。今天就给大家分享一下我这几天摸鱼的成果&amp;#xff0c;本文主要内容包括 Zookeeper的配置安装、基本命令和ava API 的使用以及Zookeeper内部数据的存储方式以及Znode的特点、Watch 机制的详细介绍&amp;#xff0c;最后…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:53 +0000</pubDate>
    </item>
    <item>
      <title>【配色网站分享】</title>
      <link>https://www.ppmy.cn/news/1540753.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【配色网站分享】news/2025/10/31 22:18:51/个人比较喜欢收藏一些好看的插画、UI设计图和配色，于是有了此篇，推荐一些配色网站，希望能对自己和大家有些帮助。1.uiGradients一个主打渐变风网站，还可以直接复制颜色。左上角的“show all gradients”可以查看一些预设的渐变配色方案，点击后可查看详细效果。网址：https://uigradients.com2.Adobe ColorAdobe官方出品的配色工具，有多种配色模式可以选择，它可以通过不同色彩规则来提供配色参考。网址：https://color.adobe.com/zh/3.Colrd自己创建配色方案，也可以上传自己的图片，将生成的配色方案保存下来。网址：http://colrd.com/4.webgradients同样是主打渐变风网站，也可以直接复制颜色，整体风格比较小清新。网址：https://webgradients.com/5.color explorer一个上传图片后自动检测图片配色的网站，跟Colrd有点类似。网址：https://colorexplorer.com/6.color hunt实时更新不同的配色方案，并按照受欢迎程度对配色方案进行排列。网址：https://colorhunt.co/记忆中，是一个比较好用的颜色网站，可是我这打开看不到效果了，呜呜~7.Nippon colors一个日本传统用色的色谱网站，收录了250种最能代表日本的传统颜色网址：https://nipponcolors.com/8.中国传统色网站设计者借鉴Nippon colors的想法，网站界面标明了CMYK和RGB，当把鼠标移动到RGB位置时，HEX网页色码值就会显示出来。网址：https://www.zhongguose.com/9.Picular一个“颜色搜索引擎”，提取关键字搜索结果中图片的颜色网址：https://picular.co/10.colorleap一个复古配色网站。搜罗了公元2000年到上世纪60年代间一些有名的艺术品、名画、海报等，从中采集配色。网址：https://colorleap.app/home11.Reeoo通过颜色搜索，为用户提供APP，网页设计，平面设计，书籍设计，ICON等精彩案例。网址：https://reeoo.com/12.colordrop一个纯色配色方案的网站，简单纯粹网址：https://colordrop.io/http://www.ppmy.cn/news/1540753.html相关文章find_library、pkg_check_modules、pkg_search_module的区别在CMake中&amp;#xff0c;find_library、pkg_check_modules和pkg_search_module是用于查找和使用库的三种不同命令。以下是具体介绍&amp;#xff1a; find_library 功能&amp;#xff1a;find_library用于查找指定的库文件&amp;#xff08;动态库或静态库&amp;#xff09;&amp;#xff0c;不依赖于库提供…阅读更多...完美解决 PyCharm 2024.2.2 等新版本无法使用经典布局-旧布局的问题原始老版本可以的操作 
【pycharm】将pycharm新界面切换为旧界面_pycharm使用旧版ui-CSDN博客 
新版本解决方案 
对于 PyCharm 2024.2.2 及更高版本&amp;#xff0c;如果通过上述方法找不到修改经典布局选项&amp;#xff0c;可以按照官方文档的步骤进行操作&amp;#xff1a; 
新 UI |PyChar…阅读更多...【C++贪心 数学归纳法】1054. 距离相等的条形码|1701本文涉及知识点 
C贪心 数学归纳法 
LeetCode1054. 距离相等的条形码 
在一个仓库里&amp;#xff0c;有一排条形码&amp;#xff0c;其中第 i 个条形码为 barcodes[i]。 请你重新排列这些条形码&amp;#xff0c;使其中任意两个相邻的条形码不能相等。 你可以返回任何满足该要求的答案&amp;#x…阅读更多...Kafka-设计思想-1一、说明 
不得不说&amp;#xff0c;官网和源码确实是我们学习技术最直接的地方&amp;#xff0c;下面我们就来根据官网学习下Kafka的设计思想&amp;#xff0c;官网地址&amp;#xff1a;https://kafka.apache.org/documentation/#design 
二、Kafka需要具备哪些功能 
1、需要作为统一平台处理一个…阅读更多...基于STM32的电流监测系统设计思路一、项目概述 
电流监测系统在现代电力管理和自动化控制中扮演着至关重要的角色。本文介绍了一个基于STM32微控制器的电流监测系统&amp;#xff0c;旨在通过霍尔传感器或电流分流器实时测量电流&amp;#xff0c;并利用LCD或OLED显示模块展示当前电流值。同时&amp;#xff0c;系统还支持通过…阅读更多...自动驾驶系列—图像数据在自动驾驶中的关键角色及其实际应用场景探讨&amp;#x1f31f;&amp;#x1f31f; 欢迎来到我的技术小筑&amp;#xff0c;一个专为技术探索者打造的交流空间。在这里&amp;#xff0c;我们不仅分享代码的智慧&amp;#xff0c;还探讨技术的深度与广度。无论您是资深开发者还是技术新手&amp;#xff0c;这里都有一片属于您的天空。让我们在知识的海洋中…阅读更多...Zookeeper 快速入门到实战这几天利用好好工作摸鱼的时间梳理了一遍 Zookeeper 相关的内容。今天就给大家分享一下我这几天摸鱼的成果&amp;#xff0c;本文主要内容包括 Zookeeper的配置安装、基本命令和ava API 的使用以及Zookeeper内部数据的存储方式以及Znode的特点、Watch 机制的详细介绍&amp;#xff0c;最后…阅读更多...Flink状态一致性保证前言 
一个Flink作业由一系列算子构成&amp;#xff0c;每个算子可以有多个并行实例&amp;#xff0c;这些实例被称为 subTask&amp;#xff0c;每个subTask运行在不同的进程或物理机上&amp;#xff0c;以实现作业的并行处理。在这个复杂的分布式场景中&amp;#xff0c;任何一个节点故障都有可能导致 F…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:51 +0000</pubDate>
    </item>
    <item>
      <title>find_library、pkg_check_modules、pkg_search_module的区别</title>
      <link>https://www.ppmy.cn/news/1540752.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维find_library、pkg_check_modules、pkg_search_module的区别news/2025/10/31 22:18:50/在CMake中，find_library、pkg_check_modules和pkg_search_module是用于查找和使用库的三种不同命令。以下是具体介绍：find_library功能：find_library用于查找指定的库文件（动态库或静态库），不依赖于库提供的CMake配置文件[1]。使用场景：当需要查找较小的或者没有提供CMake配置文件的库时，可以使用find_library。这通常涉及到手动指定库文件的路径和头文件位置。优点：直接查找库文件，简单灵活，适用于各种平台和编译器。缺点：需要手动管理库文件路径和头文件，可能增加维护成本。pkg_check_modules功能：pkg_check_modules是CMake对pkg-config的封装，用于简化查找过程[2][3]。它通过检查系统中的.pc文件来获取库的编译和链接参数。使用场景：当库提供了pkg-config文件，并且你希望利用这些信息来配置项目时，可以使用pkg_check_modules。优点：自动处理库的头文件和链接库的查找，简化了配置过程。缺点：依赖于pkg-config工具和.pc文件，可能存在可移植性问题。pkg_search_module功能：pkg_search_module类似于pkg_check_modules，但主要用于查找pkg-config格式的库信息[4]。它通过调用pkg-config来确定库的位置。使用场景：当需要在已经使用pkg-config的系统上查找库时，可以使用pkg_search_module。优点：利用现有的pkg-config信息，减少了重复配置。缺点：同样存在可移植性问题，因为它依赖于pkg-config的正确安装和配置。总的来说，find_library、pkg_check_modules和pkg_search_module都是CMake中用于查找和使用库的命令，但它们各自有不同的特点和适用场景。在选择使用哪个命令时，需要根据项目的具体需求和环境来决定。http://www.ppmy.cn/news/1540752.html相关文章完美解决 PyCharm 2024.2.2 等新版本无法使用经典布局-旧布局的问题原始老版本可以的操作 
【pycharm】将pycharm新界面切换为旧界面_pycharm使用旧版ui-CSDN博客 
新版本解决方案 
对于 PyCharm 2024.2.2 及更高版本&amp;#xff0c;如果通过上述方法找不到修改经典布局选项&amp;#xff0c;可以按照官方文档的步骤进行操作&amp;#xff1a; 
新 UI |PyChar…阅读更多...【C++贪心 数学归纳法】1054. 距离相等的条形码|1701本文涉及知识点 
C贪心 数学归纳法 
LeetCode1054. 距离相等的条形码 
在一个仓库里&amp;#xff0c;有一排条形码&amp;#xff0c;其中第 i 个条形码为 barcodes[i]。 请你重新排列这些条形码&amp;#xff0c;使其中任意两个相邻的条形码不能相等。 你可以返回任何满足该要求的答案&amp;#x…阅读更多...Kafka-设计思想-1一、说明 
不得不说&amp;#xff0c;官网和源码确实是我们学习技术最直接的地方&amp;#xff0c;下面我们就来根据官网学习下Kafka的设计思想&amp;#xff0c;官网地址&amp;#xff1a;https://kafka.apache.org/documentation/#design 
二、Kafka需要具备哪些功能 
1、需要作为统一平台处理一个…阅读更多...基于STM32的电流监测系统设计思路一、项目概述 
电流监测系统在现代电力管理和自动化控制中扮演着至关重要的角色。本文介绍了一个基于STM32微控制器的电流监测系统&amp;#xff0c;旨在通过霍尔传感器或电流分流器实时测量电流&amp;#xff0c;并利用LCD或OLED显示模块展示当前电流值。同时&amp;#xff0c;系统还支持通过…阅读更多...自动驾驶系列—图像数据在自动驾驶中的关键角色及其实际应用场景探讨&amp;#x1f31f;&amp;#x1f31f; 欢迎来到我的技术小筑&amp;#xff0c;一个专为技术探索者打造的交流空间。在这里&amp;#xff0c;我们不仅分享代码的智慧&amp;#xff0c;还探讨技术的深度与广度。无论您是资深开发者还是技术新手&amp;#xff0c;这里都有一片属于您的天空。让我们在知识的海洋中…阅读更多...Zookeeper 快速入门到实战这几天利用好好工作摸鱼的时间梳理了一遍 Zookeeper 相关的内容。今天就给大家分享一下我这几天摸鱼的成果&amp;#xff0c;本文主要内容包括 Zookeeper的配置安装、基本命令和ava API 的使用以及Zookeeper内部数据的存储方式以及Znode的特点、Watch 机制的详细介绍&amp;#xff0c;最后…阅读更多...Flink状态一致性保证前言 
一个Flink作业由一系列算子构成&amp;#xff0c;每个算子可以有多个并行实例&amp;#xff0c;这些实例被称为 subTask&amp;#xff0c;每个subTask运行在不同的进程或物理机上&amp;#xff0c;以实现作业的并行处理。在这个复杂的分布式场景中&amp;#xff0c;任何一个节点故障都有可能导致 F…阅读更多...基于神经网络的农业病虫害损失预测【摘 要】鉴于农业病虫害经济损失的预测具有较强的复杂性和非线性特性&amp;#xff0c;设计了一种新型的GRNN预测模型&amp;#xff0c;对农业病虫害经济损失进行预测。该模型基于人工神经网络捕捉非线性变化独特的优越性&amp;#xff0c;在神经网络技术和江苏省气象局提供的数据的基础上&amp;am…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:50 +0000</pubDate>
    </item>
    <item>
      <title>完美解决 PyCharm 2024.2.2 等新版本无法使用经典布局-旧布局的问题</title>
      <link>https://www.ppmy.cn/news/1540751.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维完美解决 PyCharm 2024.2.2 等新版本无法使用经典布局-旧布局的问题news/2025/10/31 22:18:48/原始老版本可以的操作【pycharm】将pycharm新界面切换为旧界面_pycharm使用旧版ui-CSDN博客新版本解决方案对于 PyCharm 2024.2.2 及更高版本，如果通过上述方法找不到修改经典布局选项，可以按照官方文档的步骤进行操作：新 UI |PyCharm 文档 (jetbrains.com.cn)在新版 UI 中，经典布局功能已经被移到插件市场。可以通过在插件市场中搜索 “Classic UI” 安装，并重启来恢复经典布局。如下图所示http://www.ppmy.cn/news/1540751.html相关文章【C++贪心 数学归纳法】1054. 距离相等的条形码|1701本文涉及知识点 
C贪心 数学归纳法 
LeetCode1054. 距离相等的条形码 
在一个仓库里&amp;#xff0c;有一排条形码&amp;#xff0c;其中第 i 个条形码为 barcodes[i]。 请你重新排列这些条形码&amp;#xff0c;使其中任意两个相邻的条形码不能相等。 你可以返回任何满足该要求的答案&amp;#x…阅读更多...Kafka-设计思想-1一、说明 
不得不说&amp;#xff0c;官网和源码确实是我们学习技术最直接的地方&amp;#xff0c;下面我们就来根据官网学习下Kafka的设计思想&amp;#xff0c;官网地址&amp;#xff1a;https://kafka.apache.org/documentation/#design 
二、Kafka需要具备哪些功能 
1、需要作为统一平台处理一个…阅读更多...基于STM32的电流监测系统设计思路一、项目概述 
电流监测系统在现代电力管理和自动化控制中扮演着至关重要的角色。本文介绍了一个基于STM32微控制器的电流监测系统&amp;#xff0c;旨在通过霍尔传感器或电流分流器实时测量电流&amp;#xff0c;并利用LCD或OLED显示模块展示当前电流值。同时&amp;#xff0c;系统还支持通过…阅读更多...自动驾驶系列—图像数据在自动驾驶中的关键角色及其实际应用场景探讨&amp;#x1f31f;&amp;#x1f31f; 欢迎来到我的技术小筑&amp;#xff0c;一个专为技术探索者打造的交流空间。在这里&amp;#xff0c;我们不仅分享代码的智慧&amp;#xff0c;还探讨技术的深度与广度。无论您是资深开发者还是技术新手&amp;#xff0c;这里都有一片属于您的天空。让我们在知识的海洋中…阅读更多...Zookeeper 快速入门到实战这几天利用好好工作摸鱼的时间梳理了一遍 Zookeeper 相关的内容。今天就给大家分享一下我这几天摸鱼的成果&amp;#xff0c;本文主要内容包括 Zookeeper的配置安装、基本命令和ava API 的使用以及Zookeeper内部数据的存储方式以及Znode的特点、Watch 机制的详细介绍&amp;#xff0c;最后…阅读更多...Flink状态一致性保证前言 
一个Flink作业由一系列算子构成&amp;#xff0c;每个算子可以有多个并行实例&amp;#xff0c;这些实例被称为 subTask&amp;#xff0c;每个subTask运行在不同的进程或物理机上&amp;#xff0c;以实现作业的并行处理。在这个复杂的分布式场景中&amp;#xff0c;任何一个节点故障都有可能导致 F…阅读更多...基于神经网络的农业病虫害损失预测【摘 要】鉴于农业病虫害经济损失的预测具有较强的复杂性和非线性特性&amp;#xff0c;设计了一种新型的GRNN预测模型&amp;#xff0c;对农业病虫害经济损失进行预测。该模型基于人工神经网络捕捉非线性变化独特的优越性&amp;#xff0c;在神经网络技术和江苏省气象局提供的数据的基础上&amp;am…阅读更多...Java Exercise807. 保持城市天际线 
class Solution {public int maxIncreaseKeepingSkyline(int[][] grid) {int n  grid.length;int[] rowMax  new int[n];int[] colMax  new int[n];for (int i  0; i &lt; n; i) {for (int j  0; j &lt; n; j) {rowMax[i]  Math.max(rowMax[i], grid[i][j…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:48 +0000</pubDate>
    </item>
    <item>
      <title>【C++贪心 数学归纳法】1054. 距离相等的条形码|1701</title>
      <link>https://www.ppmy.cn/news/1540750.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【C++贪心 数学归纳法】1054. 距离相等的条形码|1701news/2025/10/31 22:18:47/本文涉及知识点C++贪心 数学归纳法LeetCode1054. 距离相等的条形码在一个仓库里，有一排条形码，其中第 i 个条形码为 barcodes[i]。请你重新排列这些条形码，使其中任意两个相邻的条形码不能相等。 你可以返回任何满足该要求的答案，此题保证存在答案。示例 1：输入：barcodes = [1,1,1,2,2,2]输出：[2,1,2,1,2,1]示例 2：输入：barcodes = [1,1,1,1,2,2,3,3]输出：[1,3,1,3,2,1,2,1]提示：1 &lt;= barcodes.length &lt;= 100001 &lt;= barcodes[i] &lt;= 10000贪心性质一：一排条型码长度n，出现次数最多的条形码出现次数&lt;= n/2。则限制队首不为指定字符也可以让相邻不相等。性质二：一排条型码长度n，n位奇数。出现最多的条形码出现n/2+1次。如果队首可以为此条形码，则可以让相邻不相等。下面用数学归纳法来证明。n为1成立：{a}n为2成立：{a,b},{b,a}n为3成立：{a,b,a} {a,b,c}{a,c,b}从小到大证明n = 4 To∞ \infty∞n为偶数：如果存在两个众数为n/2，将任意众数放到队首，余下的符合性质二。否则，将任意众数放到队首，余下的符合性质一。n为奇数：如果众数为n/2+1，则只有一个众数。否则两个众数的数量为n+1，与n个数矛盾。将众数放到队首，余下的符合性质一。从上面的证明过程得知：如果有解，则将众数放到最前面，一定存在解。pre记录上次操作的条形码，避免相邻相同。代码核心代码classSolution{public:vector&lt;int&gt;rearrangeBarcodes(vector&lt;int&gt;&amp;barcodes){constintiMax=*max_element(barcodes.begin(),barcodes.end());vector&lt;int&gt;cnt(iMax+1);for(constauto&amp;n:barcodes){cnt[n]++;}priority_queue&lt;pair&lt;int,int&gt;&gt;heap;for(inti=0;i&lt;=iMax;i++){heap.emplace(cnt[i],i);}vector&lt;int&gt;ans;pair&lt;int,int&gt;pre={-1,-1};while(heap.top().first&gt;0){autocur=heap.top();cur.first--;ans.emplace_back(heap.top().second);heap.pop();heap.emplace(pre);pre=cur;}returnans;}};单元测试voidCheck(constvector&lt;int&gt;&amp;res){for(inti=1;i&lt;res.size();i++){Assert::IsTrue(res[i-1]!=res[i]);}}vector&lt;int&gt;barcodes;TEST_METHOD(TestMethod11){barcodes={1,1,1,2,2,2};autores=Solution().rearrangeBarcodes(barcodes);Check(res);AssertSort(res,barcodes);}TEST_METHOD(TestMethod12){barcodes={1,1,1,1,2,2,3,3};autores=Solution().rearrangeBarcodes(barcodes);Check(res);AssertSort(res,barcodes);}扩展阅读我想对大家说的话工作中遇到的问题，可以按类别查阅鄙人的算法文章，请点击《算法与数据汇总》。学习算法：按章节学习《喜缺全书算法册》，大量的题目和测试用例，打包下载。重视操作有效学习：明确的目标 及时的反馈 拉伸区（难度合适） 专注闻缺陷则喜(喜缺)是一个美好的愿望，早发现问题，早修改问题，给老板节约钱。子墨子言之：事无终始，无务多业。也就是我们常说的专业的人做专业的事。如果程序是一条龙，那算法就是他的是睛失败+反思=成功 成功+反思=成功视频课程先学简单的课程，请移步CSDN学院，听白银讲师（也就是鄙人）的讲解。https://edu.csdn.net/course/detail/38771如何你想快速形成战斗了，为老板分忧，请学习C#入职培训、C++入职培训等课程https://edu.csdn.net/lecturer/6176测试环境操作系统：win7 开发环境： VS2019C++17或者 操作系统：win10 开发环境： VS2022C++17如无特殊说明，本算法用**C++**实现。http://www.ppmy.cn/news/1540750.html相关文章Kafka-设计思想-1一、说明 
不得不说&amp;#xff0c;官网和源码确实是我们学习技术最直接的地方&amp;#xff0c;下面我们就来根据官网学习下Kafka的设计思想&amp;#xff0c;官网地址&amp;#xff1a;https://kafka.apache.org/documentation/#design 
二、Kafka需要具备哪些功能 
1、需要作为统一平台处理一个…阅读更多...基于STM32的电流监测系统设计思路一、项目概述 
电流监测系统在现代电力管理和自动化控制中扮演着至关重要的角色。本文介绍了一个基于STM32微控制器的电流监测系统&amp;#xff0c;旨在通过霍尔传感器或电流分流器实时测量电流&amp;#xff0c;并利用LCD或OLED显示模块展示当前电流值。同时&amp;#xff0c;系统还支持通过…阅读更多...自动驾驶系列—图像数据在自动驾驶中的关键角色及其实际应用场景探讨&amp;#x1f31f;&amp;#x1f31f; 欢迎来到我的技术小筑&amp;#xff0c;一个专为技术探索者打造的交流空间。在这里&amp;#xff0c;我们不仅分享代码的智慧&amp;#xff0c;还探讨技术的深度与广度。无论您是资深开发者还是技术新手&amp;#xff0c;这里都有一片属于您的天空。让我们在知识的海洋中…阅读更多...Zookeeper 快速入门到实战这几天利用好好工作摸鱼的时间梳理了一遍 Zookeeper 相关的内容。今天就给大家分享一下我这几天摸鱼的成果&amp;#xff0c;本文主要内容包括 Zookeeper的配置安装、基本命令和ava API 的使用以及Zookeeper内部数据的存储方式以及Znode的特点、Watch 机制的详细介绍&amp;#xff0c;最后…阅读更多...Flink状态一致性保证前言 
一个Flink作业由一系列算子构成&amp;#xff0c;每个算子可以有多个并行实例&amp;#xff0c;这些实例被称为 subTask&amp;#xff0c;每个subTask运行在不同的进程或物理机上&amp;#xff0c;以实现作业的并行处理。在这个复杂的分布式场景中&amp;#xff0c;任何一个节点故障都有可能导致 F…阅读更多...基于神经网络的农业病虫害损失预测【摘 要】鉴于农业病虫害经济损失的预测具有较强的复杂性和非线性特性&amp;#xff0c;设计了一种新型的GRNN预测模型&amp;#xff0c;对农业病虫害经济损失进行预测。该模型基于人工神经网络捕捉非线性变化独特的优越性&amp;#xff0c;在神经网络技术和江苏省气象局提供的数据的基础上&amp;am…阅读更多...Java Exercise807. 保持城市天际线 
class Solution {public int maxIncreaseKeepingSkyline(int[][] grid) {int n  grid.length;int[] rowMax  new int[n];int[] colMax  new int[n];for (int i  0; i &lt; n; i) {for (int j  0; j &lt; n; j) {rowMax[i]  Math.max(rowMax[i], grid[i][j…阅读更多...C++笔记-UTF8和UTF8-dom的区别在文件格式上&amp;#xff0c;UTF-8 和 UTF-8-BOM 是两种不同的编码方式&amp;#xff0c;其中 UTF-8-BOM 包含字节顺序标记&amp;#xff08;BOM&amp;#xff09;&amp;#xff0c;而 UTF-8 则不包含。 
UTF-8&amp;#xff1a; 
UTF-8 是一种以字节为单位的可变长度字符编码&amp;#xff0c;常用于以字节为单位…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:47 +0000</pubDate>
    </item>
    <item>
      <title>Kafka-设计思想-1</title>
      <link>https://www.ppmy.cn/news/1540749.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Kafka-设计思想-1news/2025/10/31 22:18:45/一、说明不得不说，官网和源码确实是我们学习技术最直接的地方，下面我们就来根据官网学习下Kafka的设计思想，官网地址：https://kafka.apache.org/documentation/#design二、Kafka需要具备哪些功能1、需要作为统一平台处理一个公司所有的实时数据2、需要具有高吞吐量来支持大量的流事件，例如：实时日志聚合3、需要优雅的处理大量数据积压，以便能够支持来自离线系统的定期数据加载，这也意味着系统必须处理低延迟交付以处理更传统的消息传递用例4、需要支持分区、分布式5、必须能够在机器故障的情况下保证容错根据以上的功能要求，Kafka具有许多独特的设计，更类似于数据库日志而不是传统的消息传递系统。下面让我们来逐个看下这些独特的设计。三、持久化1、pagecache文件通常会放在磁盘中，而cpu的速度和磁盘的访问速度相差很大，因此操作系统需要先将数据加载到内存中，才能被cpu访问。这部分内存就被称为：pagecache它是操作系统内核的一部分内存，并将最近读取或写入的文件数据缓存在内存中，以提高文件访问的性能。当用户访问磁盘时，会先看pagecache中是否存在，如果存在直接返回，否则再从磁盘加载数据到pagecache，然后返回给用户。相应的，当用户写入磁盘时，也是先写入pagecache（当然如果是直接IO会绕过pagecache直接写入磁盘），并由操作系统定期刷新到磁盘。它只是一种缓存机制，并不能保证数据的持久性和一致性，数据最终还是会写到磁盘上。pagecache中的数据可以认为是磁盘中部分数据在内存中的副本。2、不要害怕文件系统Kafka在很大程度上依赖于文件系统来存储和缓存消息。人们普遍认为“磁盘很慢”，也让人们怀疑持久化结构能否提供有竞争力的性能。事实上，磁盘比人们预期的要慢得多，也比人们预期的要快得多，这取决于它们的使用方式；设计得当的磁盘结构通常可以和网络一样快。关于磁盘性能的关键事实是：在过去的十年里，硬盘驱动器的吞吐量一直与磁盘查找的延迟不同。因此，JBOD上线性写入的性能：配置六个7200rpm SATA RAID-5阵列约为600MB/秒，但随机写入的性能仅约为100k/秒，相差超过6000倍。因为线性读写由操作系统进行了大量优化。现代操作系统提供预读和后写技术，以大块倍数预取数据将较小的逻辑写入分组为较大的物理写入。在某些情况下，顺序磁盘访问可以比随机内存访问更快！可参考：The Pathologies of Big Data - ACM Queue现代操作系统越来越积极地使用主内存进行磁盘缓存。当内存被回收时，现代操作系统会很乐意将所有空闲内存转移到磁盘缓存，而性能损失很小。所有磁盘读取和写入都将通过这个统一的缓存。如果不使用直接I/O，就不能轻易关闭此功能，因此即使进程维护数据的进程内缓存，这些数据也可能会在操作系统pagecache中复制，有效地将所有内容存储两次。此外，我们是在JVM之上构建的，使用Java内存的人都知道两个常识：1、对象的内存开销非常高，通常会使存储的数据大小翻倍（或更糟）2、随着堆内数据的增加，Java垃圾回收机制变得越来越繁琐和缓慢由于这些因素，使用文件系统并依赖pagecache比维护内存缓存或其他结构要好——通过自动访问所有空闲内存，我们至少可以将可用缓存增加一倍，并且通过存储紧凑的字节结构而不是单个对象，可能会再次增加一倍。这样做将导致32GB机器上的缓存高达28-30GB，而不会受到GC惩罚。此外，即使重新启动服务，该缓存也会保持可用，而进程内缓存需要在内存中重建（对于10GB缓存可能需要10分钟），否则它将需要从完全冷的缓存开始（这可能意味着糟糕的初始性能）。这也大大简化了代码，因为维护缓存和文件系统之间一致性的所有逻辑现在都在操作系统中，这往往比一次性进程内尝试更有效、更正确。如果您的磁盘使用倾向于线性读取，那么预读有效地在每次磁盘读取时用有用的数据预先填充此缓存。这是一种以pagecache为中心的设计风格：当空间用完时，我们不会在内存中尽可能多地维护并将其全部刷新到文件系统中，而是将其颠倒过来。所有数据都立即写入文件系统上的持久日志，而不必刷新到磁盘。实际上，这只是意味着它被转移到内核的pagecache中。3、恒定时间消息传递系统中使用的持久数据结构通常是每个消费者的队列，带有关联的BTree或其他通用随机访问数据结构，以维护有关消息的元信息。BTrees是可用的最通用的数据结构，可以支持消息传递系统中各种各样的事务性和非事务性语义。不过，它们确实有相当高的成本：Btree操作是O（log N）。通常O（log N）被认为基本上等同于常数时间，但磁盘操作并非如此。磁盘寻道以10 ms的速度出现，每个磁盘一次只能进行一次寻道，因此并行性是有限的。因此，即使是少量的磁盘寻道也会导致非常高的开销。由于存储系统将非常快的缓存操作与非常慢的物理磁盘操作混合在一起，因此当数据随着固定缓存的增加而增加，观察到的树结构性能通常是超线性的——也就是说，当数据加倍会让事情变得更糟，而不是慢两倍。直观地说，持久队列可以建立在简单的读取和附加到文件上，这是日志记录解决方案的常见情况。这种结构的优点是所有操作都是O（1），读取不会屏蔽写入或相互屏蔽。这具有明显的性能优势，因为性能与数据大小完全分离——一台服务器现在可以充分利用许多廉价、低转速的1+TB SATA驱动器。尽管它们的寻道性能很差，但这些驱动器对于大型读取和写入具有可接受的性能，价格为1/3，容量为3倍。能够访问几乎无限的磁盘空间而不受任何性能损失意味着我们可以提供一些通常在消息传递系统中找不到的功能。例如，在Kafka中，我们可以将消息保留相对较长的时间（例如一周），而不是试图在消息被消耗后立即删除它们。正如我们将描述的那样，这为消费者带来了很大的灵活性。四、效率1、IO优化Kafka主要用在处理大量的网络活动数据，每个页面浏览总次数可能会产生数十次写入。此外，我们假设发布的每条消息至少被一个消费者（通常是许多消费者）阅读，因此需要努力降低消费成本第三章已经阐述了解决磁盘低性能的方法。那么造成效率低下的就剩下两个原因了：1、太多的小输入/输出操作2、过多的字节复制小输入/输出问题发生在客户端和服务器之间以及服务器自己的持久操作中。因此Kafka的协议是围绕一个“消息集”抽象构建的，即：1、网络请求将消息分组在一起，并分摊网络往返的开销，而不是一次发送一个消息2、服务器反过来一次性将消息块附加到其日志中3、消费者一次获取一个大的线性块这种简单的最优化产生数量级的加速。批处理导致更大的网络数据包、更大的顺序磁盘操作、连续的记忆块等等，所有这些都允许Kafka将随机消息写入的突发流转化为流向消费者的线性写入。另一个低效率是字节复制。由于数据在生产者、broker、消费者之间只传输无需修改。因此可以通过Linux中的sendfile系统调用完成解决。我们先看看数据从文件到Socket的传统操作是怎么样的：1、操作系统从磁盘读取数据到内核空间的pagecache2、应用程序将数据从内核空间读入用户空间缓冲区3、应用程序将数据写回内核空间到Spcket缓冲区4、操作系统将数据从Spcket缓冲区复制到网卡/网络适配器缓冲区，然后通过网络发送这显然是低效的，有四个副本和两个系统调用。使用sendfile，通过允许操作系统将数据从页面缓存直接发送到网络来避免这种重新复制。所以在这个优化的路径中，只需要将最终副本复制到网卡/网络适配器缓冲区。Kafka中常见的使用是一个topic有多个消费者消费，因此，我们希望在零拷贝的基础上，将数据复制到pagecache中一次，并在每次消费时重复使用，而不是存储在内存中，每次读取再复制到用户空间。这允许消息以接近网络连接限制的速率被消费。pagecache和sendfile的这种组合意味着在消费者只需要关注Kafka即可，它将看不到磁盘上的任何读取活动，因为它们将完全从缓存中提供数据。注意：Kafka目前不支持内核SSL_sendfile。因此，当启用SSL时不使用sendfile2、带宽在某些情况下，瓶颈实际上不是CPU或磁盘，而是网络带宽。对于需要通过网络在数据中心之间发送消息的数据管道来说尤其如此。这时候就需要对数据进行压缩。a、一条消息压缩一次b、同一类型消息统一压缩一次对比看来，肯定b效率更高，因为大部分冗余是由于同一类型消息之间的重复造成的（例如JSON中的字段名或web日志中的用户代理或常见字符串值）Kafka以高效的批处理格式支持b。一批消息可以组合在一起，压缩，并以这种形式发送到服务器。broker解压批处理以验证它。例如，它验证批处理中的记录数与批处理头状态相同。然后，这批消息以压缩形式写入磁盘。批处理将在日志中保持压缩，也将以压缩形式传输给消费者。消费者解压缩它接收到的任何压缩数据。Kafka支持GZIP、Snappy、LZ4和ZStandard压缩协议五、生产者生产者将数据直接发送到作为分区leader的broker，而无需任何中间路由层。生产者默认随机向各个分区打消息来实现负载平衡，也可以通过一些语义分区函数来完成。比如用户指定key，并使用hash来分配打到哪个分区，或者也可以自定义分区器。批处理是效率的主要驱动因素之一，为了启用批处理，Kafka生产者将尝试在内存中积累数据，并在单个请求中发送更大的批处理。批处理可以配置为积累不超过固定数量的消息，并且等待时间不超过一些固定的延迟限制（例如64k或10毫秒）。这允许积累更多的消息来发送，并且在服务器上几乎没有更大的I/O操作。这种缓冲是可配置的，并提供了一种机制来权衡少量额外的延迟以获得更好的吞吐量。六、消费者消费者通过向引导其想要消费的分区的brokers发出“fetch”请求来工作。消费者在每次请求时在日志中指定其偏移量（offset），并从该位置接收回一块日志。因此，消费者对这个位置有很大的控制权，如果需要，可以对历史数据进行重新消费。1、push vs pull我们首先考虑的一个问题是，消费者应该从brokers提取数据，还是brokers应该将数据推送给消费者。在这方面，Kafka遵循了一种更传统的设计，大多数消息传递系统都采用这种设计，数据从生产者推送到brokers，由消费者从brokers中提取。一些以日志记录为中心的系统，如Scribe和Apache Flume，遵循一种非常不同的基于推送的路径，将数据推送到下游。这两种方法都有利弊。然而，基于推送的系统难以处理不同的消费者，因为brokers控制着数据传输的速率。目标通常是让消费者能够以最大可能的速度消费；不幸的是，在推送系统中，这意味着当消费者的消费率低于生产率时，消费者往往会不知所措（本质上是拒绝服务攻击）。基于拉动的系统具有更好的特性，即消费者只是落后，并在可能的时候赶上。这可以通过某种退避协议来缓解，消费者可以通过该协议表示自己不堪重负，但让传输速率充分利用（但永远不要过度利用）消费者比看起来要棘手。以前以这种方式构建系统的尝试使我们采用了更传统的拉取模型。基于拉取的系统的另一个优点是，它适合对发送给消费者的数据进行积极的批处理。基于推送的系统必须选择立即发送请求或积累更多数据，然后在不知道下游消费者是否能够立即处理的情况下稍后发送。如果调整为低延迟，这将导致一次发送一条消息，但传输最终仍会被缓冲，这是浪费。基于拉取的设计解决了这个问题，因为消费者总是在日志中的当前位置之后（或达到某个可配置的最大大小）拉取所有可用消息。因此，在不引入不必要的延迟的情况下，可以获得最佳的批处理。基于拉取的系统的缺陷是，如果brokers没有数据，消费者可能最终会在一个紧密的循环中轮询，实际上是忙于等待数据到达。为了避免这种情况，我们在拉取请求中设置了参数，允许消费者请求在“长轮询”中阻塞，等待数据到达（并且可以选择等待，直到给定数量的字节可用以确保大传输大小）。2、消费者定位令人惊讶的是，跟踪已消费的内容是消息传递系统的关键性能点之一。Kafka是这样做的：消费者从broker拉取数据后，broker将其标记为已发送，而不是已消费，broker需要等待消费者的特定确认来将消息标记为已消费。这种策略解决了丢失消息的问题，但也产生了新的问题。1、消费者处理完消息，马上就要向broker发送确认消息时，失败了，会导致重复消费2、消费者还没处理完消息，就向broker发送了确认消息，结果消息处理失败了，导致数据丢失这就需要消费者将处理消息的最后逻辑和向borker发送确认消息这两件事放在同一个事务中来解决维护offset还有一个好处：如果消费者代码有一个bug，并且在一些消息被消费后被发现，一旦bug被修复，消费者就可以重新消费这些消息3、离线数据加载Kafka还允许消费者定期消费，将数据定期批量加载到Hadoop或离线数仓中。每个节点/主题/分区组合对应一个映射任务，从而在加载过程中实现完全并行。Hadoop提供了任务管理，失败的任务可以重新启动，而不会有重复数据的危险4、静态成员静态成员资格旨在提高基于组再平衡协议构建的流应用程序、消费者组和其他应用程序的可用性。再平衡协议依赖于组协调器将实体ID分配给组成员。这些生成的ID是短暂的，当成员重新启动并重新加入时会发生变化。对于基于消费者的应用程序，这种“动态成员身份”可能会导致在代码部署、配置更新和定期重启等管理操作期间将大量任务重新分配给不同的实例。对于大型状态应用程序，混洗任务在处理之前需要很长时间来恢复其本地状态，并导致应用程序部分或完全不可用。基于这一观察，Kafka的组管理协议允许组成员提供持久的实体ID。基于这些ID，组成员身份保持不变，因此不会触发重新平衡。如果你想使用这个特性，需要以下操作：1、将broker集群和客户端应用程序升级到2.3或更高版本，并确保升级后的代理使用2、为一个组下的每个消费者实例设置配置ConsumerConfig#GROUP_INSTANCE_ID_CONFIG为唯一值3、对于Kafka Streams应用程序，为每个KafkaStreams实例设置一个唯一的ConsumerConfig#GROUP_INSTANCE_ID_CONFIG就足够了，独立于实例使用的线程数七、总结结合以上设计理念我们可以得出以下视图：(下载后就会变清晰哟)http://www.ppmy.cn/news/1540749.html相关文章基于STM32的电流监测系统设计思路一、项目概述 
电流监测系统在现代电力管理和自动化控制中扮演着至关重要的角色。本文介绍了一个基于STM32微控制器的电流监测系统&amp;#xff0c;旨在通过霍尔传感器或电流分流器实时测量电流&amp;#xff0c;并利用LCD或OLED显示模块展示当前电流值。同时&amp;#xff0c;系统还支持通过…阅读更多...自动驾驶系列—图像数据在自动驾驶中的关键角色及其实际应用场景探讨&amp;#x1f31f;&amp;#x1f31f; 欢迎来到我的技术小筑&amp;#xff0c;一个专为技术探索者打造的交流空间。在这里&amp;#xff0c;我们不仅分享代码的智慧&amp;#xff0c;还探讨技术的深度与广度。无论您是资深开发者还是技术新手&amp;#xff0c;这里都有一片属于您的天空。让我们在知识的海洋中…阅读更多...Zookeeper 快速入门到实战这几天利用好好工作摸鱼的时间梳理了一遍 Zookeeper 相关的内容。今天就给大家分享一下我这几天摸鱼的成果&amp;#xff0c;本文主要内容包括 Zookeeper的配置安装、基本命令和ava API 的使用以及Zookeeper内部数据的存储方式以及Znode的特点、Watch 机制的详细介绍&amp;#xff0c;最后…阅读更多...Flink状态一致性保证前言 
一个Flink作业由一系列算子构成&amp;#xff0c;每个算子可以有多个并行实例&amp;#xff0c;这些实例被称为 subTask&amp;#xff0c;每个subTask运行在不同的进程或物理机上&amp;#xff0c;以实现作业的并行处理。在这个复杂的分布式场景中&amp;#xff0c;任何一个节点故障都有可能导致 F…阅读更多...基于神经网络的农业病虫害损失预测【摘 要】鉴于农业病虫害经济损失的预测具有较强的复杂性和非线性特性&amp;#xff0c;设计了一种新型的GRNN预测模型&amp;#xff0c;对农业病虫害经济损失进行预测。该模型基于人工神经网络捕捉非线性变化独特的优越性&amp;#xff0c;在神经网络技术和江苏省气象局提供的数据的基础上&amp;am…阅读更多...Java Exercise807. 保持城市天际线 
class Solution {public int maxIncreaseKeepingSkyline(int[][] grid) {int n  grid.length;int[] rowMax  new int[n];int[] colMax  new int[n];for (int i  0; i &lt; n; i) {for (int j  0; j &lt; n; j) {rowMax[i]  Math.max(rowMax[i], grid[i][j…阅读更多...C++笔记-UTF8和UTF8-dom的区别在文件格式上&amp;#xff0c;UTF-8 和 UTF-8-BOM 是两种不同的编码方式&amp;#xff0c;其中 UTF-8-BOM 包含字节顺序标记&amp;#xff08;BOM&amp;#xff09;&amp;#xff0c;而 UTF-8 则不包含。 
UTF-8&amp;#xff1a; 
UTF-8 是一种以字节为单位的可变长度字符编码&amp;#xff0c;常用于以字节为单位…阅读更多...爬虫学习——25.JS逆向（1）1 、什么是JS、JS反爬是什么？JS逆向是什么? 
JS: JS全称JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。JavaScript 是一种轻量级的编程语言。JavaScript 是可插入 HTML 页面的编程代码…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:45 +0000</pubDate>
    </item>
    <item>
      <title>基于STM32的电流监测系统设计思路</title>
      <link>https://www.ppmy.cn/news/1540748.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维基于STM32的电流监测系统设计思路news/2025/10/31 22:18:44/一、项目概述电流监测系统在现代电力管理和自动化控制中扮演着至关重要的角色。本文介绍了一个基于STM32微控制器的电流监测系统，旨在通过霍尔传感器或电流分流器实时测量电流，并利用LCD或OLED显示模块展示当前电流值。同时，系统还支持通过蓝牙或Wi-Fi将数据传输至手机或云端，并具备电流超限报警功能，以提升电流监测的智能化和可靠性。技术栈关键词单片机：STM32系列（如STM32F103、STM32F407）电流传感器：霍尔效应传感器（如ACS712）、电流分流器显示模块：LCD（如1602、2004）或OLED（如SSD1306）无线通信：Bluetooth（如HC-05/HC-06）或Wi-Fi模块（如ESP8266）开发环境：STM32CubeIDE、Keil uVision编程语言：C/C++二、系统架构系统架构设计是电流监测系统的核心，确保各个模块之间有效地协同工作。以下是系统的主要组件及其功能：STM32微控制器：作为系统的控制核心，负责数据采集、处理和控制各个模块。电流传感器：用于实时测量电流，通过模拟信号输出电流值。显示模块：LCD或OLED用于实时显示电流值、报警信息等。无线通信模块：Bluetooth或Wi-Fi模块实现数据的远程传输。报警模块：设置电流阈值并在超限时发出声光报警。系统架构图控制控制显示通信报警测量值测量值实时数据STM32微控制器霍尔传感器电流分流器LCD/OLED蓝牙/Wi-Fi模块报警模块三、环境搭建和注意事项环境搭建开发工具安装：下载并安装STM32CubeIDE或Keil uVision，配置相关的开发环境。安装STM32标准外设库或HAL库，以便简化外设的操作。硬件准备：STM32开发板（如STM32F4Discovery）霍尔传感器（如ACS712）或电流分流器LCD显示模块（如1602）或OLED显示模块（如SSD1306）Bluetooth模块（如HC-05）或Wi-Fi模块（如ESP8266）蜂鸣器或其他报警设备注意事项电流传感器选择：根据需要监测的电流范围选择合适的传感器，确保其额定电流值高于预期的工作电流。电源管理：确保系统的电源供电稳定，避免因电源波动导致系统异常。信号处理：在读取传感器数据时，必要时进行滤波处理，以抑制噪声对测量结果的影响。四、代码实现过程1. 系统初始化系统初始化过程包括对各个模块的初始化设置。下面是系统初始化的完整代码示例：#include"stm32f4xx_hal.h"#include"lcd.h"// LCD显示库#include"sensor.h"// 传感器库#include"bluetooth.h"// 蓝牙通信库// 系统初始化函数voidSystem_Init(){HAL_Init();// 初始化HAL库LCD_Init();// 初始化LCD显示模块Sensor_Init();// 初始化电流传感器Bluetooth_Init();// 初始化蓝牙模块}代码说明HAL_Init(): 初始化STM32的硬件抽象层，以便使用HAL库提供的功能。LCD_Init(): 初始化LCD显示模块，设置显示模式和参数。Sensor_Init(): 初始化电流传感器，配置其工作模式。2. 实时电流测量模块实时电流测量模块的设计是系统的核心功能之一。通过电流传感器获取电流信号，并将其转换为数字信号供STM32处理。以下是电流测量模块的详细实现，包括模拟信号读取、数据转换和单位转换。代码实现#include"sensor.h"// 模拟信号读取的ADC配置ADC_HandleTypeDef hadc1;// 电流传感器的读取函数floatMeasure_Current(){uint32_tadcValue=0;floatcurrent=0.0;// 启动ADC转换HAL_ADC_Start(&amp;hadc1);// 等待转换完成HAL_ADC_PollForConversion(&amp;hadc1,HAL_MAX_DELAY);// 读取ADC值adcValue=HAL_ADC_GetValue(&amp;hadc1);// 将ADC值转换为电流值（假设使用ACS712传感器，灵敏度为185 mV/A）// 计算公式：Current(A) = (ADC_Value * Vref / 4096 - 2.5) / Sensitivity// 这里Vref假设为3.3V，Sensitivity为0.185V/Acurrent=(adcValue*3.3/4096-2.5)/0.185;returncurrent;// 返回实时电流值}代码说明ADC配置：使用ADC模块读取模拟信号。在这里，我们假设ADC分辨率为12位，参考电压为3.3V。HAL_ADC_Start()：启动ADC转换。HAL_ADC_PollForConversion()：等待ADC转换完成，确保数据有效。HAL_ADC_GetValue()：读取ADC转换结果。电流计算公式：根据传感器的特性，将ADC值转换为实际电流值。3. 显示模块显示模块负责将实时电流值和报警信息显示在LCD或OLED屏幕上。以下是显示模块的实现示例。代码实现#include"lcd.h"// 实时更新LCD显示内容voidUpdate_Display(floatcurrent){chardisplayBuffer[16];// 清空LCD屏幕LCD_Clear();// 格式化当前电流值snprintf(displayBuffer,sizeof(displayBuffer),"Current: %.2f A",current);// 在LCD上显示电流值LCD_Print(displayBuffer);}代码说明LCD_Clear()：清空LCD显示，准备显示新内容。snprintf()：格式化电流值，以字符串形式准备显示。LCD_Print()：将字符串内容打印到LCD屏幕上。4. 超限报警模块超限报警模块通过设定电流阈值，当测量到的电流超过该阈值时，触发报警。代码实现#include"alarm.h"// 设置电流阈值#defineCURRENT_THRESHOLD10.0// 电流阈值，单位：A// 检查电流是否超限voidCheck_Overlimit(floatcurrent){if(current&gt;CURRENT_THRESHOLD){Alarm_On();// 触发报警}else{Alarm_Off();// 关闭报警}}代码说明CURRENT_THRESHOLD：定义电流阈值，单位为安培（A）。Alarm_On()：触发报警，可能是点亮LED或声音报警。Alarm_Off()：关闭报警，恢复正常状态。5. 无线通信模块无线通信模块实现数据的远程传输，可以选择蓝牙或Wi-Fi模块。以下是使用蓝牙模块的示例代码。代码实现#include"bluetooth.h"// 发送电流数据至蓝牙模块voidSend_Data(floatcurrent){chardataBuffer[32];snprintf(dataBuffer,sizeof(dataBuffer),"Current: %.2f A\n",current);// 发送数据Bluetooth_Send(dataBuffer);}代码说明snprintf()：格式化电流值为字符串，以便发送。Bluetooth_Send()：通过蓝牙模块发送数据。6. 主循环在主循环中，依次调用电流测量、显示更新、超限检查和数据发送的函数。以下是主循环的实现示例。代码实现intmain(void){System_Init();// 系统初始化// 主循环while(1){floatcurrent=Measure_Current();// 测量电流Update_Display(current);// 更新显示模块Check_Overlimit(current);// 检查超限报警Send_Data(current);// 通过蓝牙发送数据HAL_Delay(1000);// 延时1秒，避免过于频繁的测量}}代码说明System_Init()：初始化系统中的所有模块，确保它们能够正常工作。Measure_Current()：调用电流测量函数，获取当前电流值。Update_Display(current)：将测量到的电流值更新在显示屏上。Check_Overlimit(current)：检查当前电流是否超过设定的阈值，如果超限则触发报警。Send_Data(current)：将当前电流值通过蓝牙模块发送出去。HAL_Delay(1000)：延时1秒，避免过于频繁的测量和显示更新，减轻微控制器的负担。主循环电流传感器显示模块报警模块蓝牙模块Measure_Current()返回电流值Update_Display(current)更新完成Check_Overlimit(current)检查结果Send_Data(current)数据发送完成HAL_Delay(1000)主循环电流传感器显示模块报警模块蓝牙模块时序图说明主循环（Main）调用电流传感器（Sensor）的Measure_Current()方法，获取当前电流值。电流传感器返回测得的电流值给主循环。主循环调用显示模块（Display）的Update_Display(current)方法，将当前电流值更新到显示屏上。显示模块确认更新完成后返回主循环。主循环调用报警模块（Alarm）的Check_Overlimit(current)方法，检查当前电流是否超过设定阈值。报警模块返回检查结果给主循环。主循环调用蓝牙模块（Bluetooth）的Send_Data(current)方法，将当前电流值通过蓝牙发送出去。蓝牙模块确认数据发送完成后返回主循环。主循环执行HAL_Delay(1000)，延迟1秒后再次进行循环。五、项目总结本文详细介绍了基于STM32的电流监测系统的设计与实现过程。系统主要功能包括：实时电流测量：通过霍尔传感器或电流分流器实时测量电流，确保数据的准确性和可靠性。数据展示：使用LCD或OLED显示模块实时显示电流值，便于用户查看。超限报警：设定电流阈值，当电流超限时触发报警，保障设备安全。数据通信：通过蓝牙或Wi-Fi模块将实时数据发送至手机或云端，便于远程监控。未来工作在后续的工作中，可以对该系统进行进一步的优化和扩展：数据记录功能：将测量到的电流值存储到SD卡或云端，以便后续的数据分析。云平台集成：将系统与云平台集成，实现数据的可视化和分析。移动应用开发：开发移动端应用，使用户能够实时查看数据并设置阈值。更强的用户界面：改善用户界面，使其更加友好和易于操作。通过这些改进，电流监测系统将更加智能化和实用，为用户提供更好的使用体验。六、参考文献STMicroelectronics. (n.d.). STM32F4 Reference Manual. Retrieved from STMicroelectronicsACS712 Hall Effect Current Sensor. (n.d.). Datasheet. Retrieved from Allegro MicroSystemsLCD and OLED Display Libraries. (n.d.). Various libraries available on GitHub. Retrieved from GitHub以上是基于STM32的电流监测系统的完整介绍，包括项目的设计思路、系统架构、代码实现以及总结与展望。希望能为您在开发类似项目时提供参考和帮助。http://www.ppmy.cn/news/1540748.html相关文章自动驾驶系列—图像数据在自动驾驶中的关键角色及其实际应用场景探讨&amp;#x1f31f;&amp;#x1f31f; 欢迎来到我的技术小筑&amp;#xff0c;一个专为技术探索者打造的交流空间。在这里&amp;#xff0c;我们不仅分享代码的智慧&amp;#xff0c;还探讨技术的深度与广度。无论您是资深开发者还是技术新手&amp;#xff0c;这里都有一片属于您的天空。让我们在知识的海洋中…阅读更多...Zookeeper 快速入门到实战这几天利用好好工作摸鱼的时间梳理了一遍 Zookeeper 相关的内容。今天就给大家分享一下我这几天摸鱼的成果&amp;#xff0c;本文主要内容包括 Zookeeper的配置安装、基本命令和ava API 的使用以及Zookeeper内部数据的存储方式以及Znode的特点、Watch 机制的详细介绍&amp;#xff0c;最后…阅读更多...Flink状态一致性保证前言 
一个Flink作业由一系列算子构成&amp;#xff0c;每个算子可以有多个并行实例&amp;#xff0c;这些实例被称为 subTask&amp;#xff0c;每个subTask运行在不同的进程或物理机上&amp;#xff0c;以实现作业的并行处理。在这个复杂的分布式场景中&amp;#xff0c;任何一个节点故障都有可能导致 F…阅读更多...基于神经网络的农业病虫害损失预测【摘 要】鉴于农业病虫害经济损失的预测具有较强的复杂性和非线性特性&amp;#xff0c;设计了一种新型的GRNN预测模型&amp;#xff0c;对农业病虫害经济损失进行预测。该模型基于人工神经网络捕捉非线性变化独特的优越性&amp;#xff0c;在神经网络技术和江苏省气象局提供的数据的基础上&amp;am…阅读更多...Java Exercise807. 保持城市天际线 
class Solution {public int maxIncreaseKeepingSkyline(int[][] grid) {int n  grid.length;int[] rowMax  new int[n];int[] colMax  new int[n];for (int i  0; i &lt; n; i) {for (int j  0; j &lt; n; j) {rowMax[i]  Math.max(rowMax[i], grid[i][j…阅读更多...C++笔记-UTF8和UTF8-dom的区别在文件格式上&amp;#xff0c;UTF-8 和 UTF-8-BOM 是两种不同的编码方式&amp;#xff0c;其中 UTF-8-BOM 包含字节顺序标记&amp;#xff08;BOM&amp;#xff09;&amp;#xff0c;而 UTF-8 则不包含。 
UTF-8&amp;#xff1a; 
UTF-8 是一种以字节为单位的可变长度字符编码&amp;#xff0c;常用于以字节为单位…阅读更多...爬虫学习——25.JS逆向（1）1 、什么是JS、JS反爬是什么？JS逆向是什么? 
JS: JS全称JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。JavaScript 是一种轻量级的编程语言。JavaScript 是可插入 HTML 页面的编程代码…阅读更多...Leetcode 单词拆分以下是LeetCode问题139“单词拆分”&amp;#xff08;Word Break&amp;#xff09;的Java解法&amp;#xff0c;使用了动态规划&amp;#xff08;Dynamic Programming, DP&amp;#xff09;来解决这个问题&amp;#xff1a; 
import java.util.List;
import java.util.Set;
import java.util.HashSet;public c…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:44 +0000</pubDate>
    </item>
    <item>
      <title>自动驾驶系列—图像数据在自动驾驶中的关键角色及其实际应用场景探讨</title>
      <link>https://www.ppmy.cn/news/1540747.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维自动驾驶系列—图像数据在自动驾驶中的关键角色及其实际应用场景探讨news/2025/10/31 22:18:42/🌟🌟 欢迎来到我的技术小筑，一个专为技术探索者打造的交流空间。在这里，我们不仅分享代码的智慧，还探讨技术的深度与广度。无论您是资深开发者还是技术新手，这里都有一片属于您的天空。让我们在知识的海洋中一起航行，共同成长，探索技术的无限可能。🚀 探索专栏：学步_技术的首页 —— 持续学习，不断进步，让学习成为我们共同的习惯，让总结成为我们前进的动力。🔍 技术导航：人工智能：深入探讨人工智能领域核心技术。自动驾驶：分享自动驾驶领域核心技术和实战经验。环境配置：分享Linux环境下相关技术领域环境配置所遇到的问题解决经验。图像生成：分享图像生成领域核心技术和实战经验。虚拟现实技术：分享虚拟现实技术领域核心技术和实战经验。🌈 非常期待在这个数字世界里与您相遇，一起学习、探讨、成长。不要忘了订阅本专栏，让我们的技术之旅不再孤单！💖💖💖 ✨✨ 欢迎关注和订阅，一起开启技术探索之旅！ ✨✨文章目录1. 背景介绍2. 图像数据格式和预处理2.1 图像数据格式2.2 图像预处理3. 图像质量评估4. 图像算法应用5. 应用场景6. 感知代码实现7. 总结与讨论1. 背景介绍随着自动驾驶技术的飞速发展，视觉传感器，尤其是摄像头，成为了自动驾驶系统感知环境的核心组成部分。通过摄像头，自动驾驶车辆能够实时捕捉道路上的图像数据，并结合其他传感器信息（如激光雷达、毫米波雷达等）进行环境感知、路径规划和决策执行。图像数据为自动驾驶车辆提供了丰富的视觉信息，帮助系统识别车道线、交通标志、行人、车辆等目标物体。然而，自动驾驶场景下的图像数据处理存在一定的技术挑战，例如图像数据量大、实时性要求高、环境复杂多变等问题。因此，对图像数据的格式、预处理、质量评估和算法应用进行深入探讨，是确保自动驾驶系统高效、安全运行的关键。2. 图像数据格式和预处理2.1 图像数据格式自动驾驶车辆的摄像头通常生成多种格式的图像数据，常见的格式包括：RGB图像：三通道彩色图像，每个像素点由红、绿、蓝三个颜色通道的强度值构成。这是最常见的图像格式之一，广泛应用于物体识别、场景理解等任务中。灰度图像：将彩色图像转化为单通道的灰度图，灰度图保留了图像的亮度信息，适合用于边缘检测和特征提取等任务。深度图像：通过立体相机或其他传感器获取的图像，记录场景中每个像素到摄像头的距离。深度图像能够提供空间信息，有助于精确识别障碍物距离。红外图像：用于夜间或光线不好的条件下采集，帮助车辆在低能见度的情况下感知环境。2.2 图像预处理在应用图像数据进行自动驾驶感知和决策前，需要对数据进行预处理，以提升算法性能和运行效率。常见的预处理操作包括：图像去噪：通过滤波算法去除图像中的噪点，减少传感器或环境因素带来的噪声。图像裁剪与缩放：将图像按照固定比例进行裁剪或缩放，确保数据输入与模型要求的尺寸匹配。亮度与对比度调整：在不同光照条件下，摄像头获取的图像亮度和对比度差异较大，需进行调整以提升图像的可用性。图像增强：包括边缘检测、直方图均衡化等方法，用于突出图像中的关键信息，如车道线或物体轮廓。3. 图像质量评估高质量的图像数据是自动驾驶感知系统做出准确判断的前提。因此，在处理图像数据时，进行图像质量评估尤为重要。评估维度通常包括以下几方面：分辨率：图像的分辨率越高，细节越丰富，能更精确地捕捉环境中的目标物体。但同时，分辨率越高，计算资源消耗也越大。因此，在实际应用中，通常需要在分辨率和计算资源之间进行平衡。清晰度：图像的清晰度会影响到边缘检测和目标识别的准确性。图像模糊通常由车辆运动、传感器抖动或焦距问题引起，模糊图像需要通过特定的算法进行校正。对比度：高对比度的图像更容易区分不同的物体和背景。对比度低的图像可能会导致系统无法正确识别前方障碍物，尤其是在光线较暗的场景中。光照条件：自动驾驶系统需要应对各种光照条件，如白天、夜晚、阴天或逆光等情况。因此，评估图像在不同光照下的表现非常关键，需确保在极端光照条件下，系统依然能够正常识别环境信息。4. 图像算法应用在自动驾驶中，图像数据通常会被应用于多种算法中，帮助系统做出智能决策。以下是几种常见的图像算法应用：目标检测与识别目标检测算法能够识别图像中的行人、车辆、交通标志等物体。常用的检测算法包括YOLO（You Only Look Once）、Faster R-CNN、SSD（Single Shot MultiBox Detector）等。这些算法通过深度学习模型，在大量标注数据上进行训练，以实现准确的物体识别。语义分割语义分割任务旨在为图像中的每个像素分配一个类别标签，如“道路”、“建筑物”、“行人”等。这种像素级别的分类对于自动驾驶车辆的路径规划、避障等操作至关重要。常用的语义分割网络包括FCN（Fully Convolutional Networks）、DeepLab等。车道线检测车道线检测是自动驾驶系统中的核心任务之一。通过边缘检测、霍夫变换或深度学习等方法，车辆能够准确识别道路上的车道线，并根据车道线信息规划行驶路径。障碍物检测与距离估计图像配合深度信息或立体视觉技术，能够帮助自动驾驶车辆检测前方的障碍物，并估算它们的距离，从而调整车辆行驶速度或采取避障措施。5. 应用场景城市道路自动驾驶在城市道路场景中，自动驾驶车辆需要应对复杂多变的环境，包括行人、车辆、交通标志、红绿灯等。通过图像数据，车辆可以实时识别这些目标物体，并做出相应的反应，如停车、避让或通过。高速公路自动驾驶高速公路上的自动驾驶更注重车道线检测、车辆跟踪和高速避障。图像数据帮助系统识别车道线并跟踪前车，确保车辆在高速行驶时能够保持车道居中，并安全避让其他车辆。自动泊车自动泊车场景下，图像数据能够帮助车辆识别停车位、障碍物和车道边界，确保车辆能够自动泊入指定车位。结合超声波传感器和摄像头，系统可以在狭小空间内精确操作，避免碰撞。6. 感知代码实现import cv2
import numpy as np# 加载 YOLO 模型
net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
layer_names = net.getLayerNames()
output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]# 加载类别名称
with open("coco.names", "r") as f:classes = [line.strip() for line in f.readlines()]# 加载图像
image = cv2.imread("test_image.jpg")
height, width, channels = image.shape# 准备输入图像
blob = cv2.dnn.blobFromImage(image, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
net.setInput(blob)# 前向传播，获取检测结果
outs = net.forward(output_layers)# 存储检测到的物体的信息
class_ids = []
confidences = []
boxes = []# 处理每个输出
for out in outs:for detection in out:scores = detection[5:]class_id = np.argmax(scores)confidence = scores[class_id]# 只考虑置信度高于0.5的物体if confidence &gt; 0.5:# 获取边界框坐标center_x = int(detection[0] * width)center_y = int(detection[1] * height)w = int(detection[2] * width)h = int(detection[3] * height)# 计算边界框的左上角坐标x = int(center_x - w / 2)y = int(center_y - h / 2)boxes.append([x, y, w, h])confidences.append(float(confidence))class_ids.append(class_id)# 使用非极大值抑制来消除冗余的边界框
indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)# 为每个检测到的物体绘制边界框和标签
for i in range(len(boxes)):if i in indexes:x, y, w, h = boxes[i]label = str(classes[class_ids[i]])confidence = confidences[i]color = (0, 255, 0)  # 绿色边界框cv2.rectangle(image, (x, y), (x + w, y + h), color, 2)cv2.putText(image, f"{label} {confidence:.2f}", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)# 显示图像
cv2.imshow("Detected Objects", image)
cv2.waitKey(0)
cv2.destroyAllWindows()7. 总结与讨论图像数据在自动驾驶车辆中的应用极大地提高了环境感知能力，通过多种算法实现物体检测、车道线识别、障碍物检测等关键任务。然而，自动驾驶场景下的图像处理面临数据量大、实时性要求高、环境复杂等挑战。因此，对图像数据的质量控制和算法优化尤为重要。随着技术的不断进步，未来的自动驾驶系统将更加依赖于图像数据的高效处理与分析，从而实现更安全、更智能的自动驾驶体验。🌟 在这篇博文的旅程中，感谢您的陪伴与阅读。如果内容对您有所启发或帮助，请不要吝啬您的点赞 👍🏻，这是对我最大的鼓励和支持。📚 本人虽致力于提供准确且深入的技术分享，但学识有限，难免会有疏漏之处。如有不足或错误，恳请各位业界同仁在评论区留下宝贵意见，您的批评指正是我不断进步的动力！😄😄😄💖💖💖 如果您发现这篇博文对您的研究或工作有所裨益，请不吝点赞、收藏，或分享给更多需要的朋友，让知识的力量传播得更远。🔥🔥🔥 “Stay Hungry, Stay Foolish” —— 求知的道路永无止境，让我们保持渴望与初心，面对挑战，勇往直前。无论前路多么漫长，只要我们坚持不懈，终将抵达目的地。🌙🌙🌙👋🏻 在此，我也邀请您加入我的技术交流社区，共同探讨、学习和成长。让我们携手并进，共创辉煌！http://www.ppmy.cn/news/1540747.html相关文章Zookeeper 快速入门到实战这几天利用好好工作摸鱼的时间梳理了一遍 Zookeeper 相关的内容。今天就给大家分享一下我这几天摸鱼的成果&amp;#xff0c;本文主要内容包括 Zookeeper的配置安装、基本命令和ava API 的使用以及Zookeeper内部数据的存储方式以及Znode的特点、Watch 机制的详细介绍&amp;#xff0c;最后…阅读更多...Flink状态一致性保证前言 
一个Flink作业由一系列算子构成&amp;#xff0c;每个算子可以有多个并行实例&amp;#xff0c;这些实例被称为 subTask&amp;#xff0c;每个subTask运行在不同的进程或物理机上&amp;#xff0c;以实现作业的并行处理。在这个复杂的分布式场景中&amp;#xff0c;任何一个节点故障都有可能导致 F…阅读更多...基于神经网络的农业病虫害损失预测【摘 要】鉴于农业病虫害经济损失的预测具有较强的复杂性和非线性特性&amp;#xff0c;设计了一种新型的GRNN预测模型&amp;#xff0c;对农业病虫害经济损失进行预测。该模型基于人工神经网络捕捉非线性变化独特的优越性&amp;#xff0c;在神经网络技术和江苏省气象局提供的数据的基础上&amp;am…阅读更多...Java Exercise807. 保持城市天际线 
class Solution {public int maxIncreaseKeepingSkyline(int[][] grid) {int n  grid.length;int[] rowMax  new int[n];int[] colMax  new int[n];for (int i  0; i &lt; n; i) {for (int j  0; j &lt; n; j) {rowMax[i]  Math.max(rowMax[i], grid[i][j…阅读更多...C++笔记-UTF8和UTF8-dom的区别在文件格式上&amp;#xff0c;UTF-8 和 UTF-8-BOM 是两种不同的编码方式&amp;#xff0c;其中 UTF-8-BOM 包含字节顺序标记&amp;#xff08;BOM&amp;#xff09;&amp;#xff0c;而 UTF-8 则不包含。 
UTF-8&amp;#xff1a; 
UTF-8 是一种以字节为单位的可变长度字符编码&amp;#xff0c;常用于以字节为单位…阅读更多...爬虫学习——25.JS逆向（1）1 、什么是JS、JS反爬是什么？JS逆向是什么? 
JS: JS全称JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。JavaScript 是一种轻量级的编程语言。JavaScript 是可插入 HTML 页面的编程代码…阅读更多...Leetcode 单词拆分以下是LeetCode问题139“单词拆分”&amp;#xff08;Word Break&amp;#xff09;的Java解法&amp;#xff0c;使用了动态规划&amp;#xff08;Dynamic Programming, DP&amp;#xff09;来解决这个问题&amp;#xff1a; 
import java.util.List;
import java.util.Set;
import java.util.HashSet;public c…阅读更多...Python爱心射线（完整代码）目录 
系列目录 
写在前面​ 
完整代码 
下载代码 
代码分析 
写在后面  系列目录 序号直达链接表白系列1Python制作一个无法拒绝的表白界面2Python满屏飘字表白代码3阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:42 +0000</pubDate>
    </item>
    <item>
      <title>Zookeeper 快速入门到实战</title>
      <link>https://www.ppmy.cn/news/1540746.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Zookeeper 快速入门到实战news/2025/10/31 22:18:41/这几天利用好好工作摸鱼的时间梳理了一遍 Zookeeper 相关的内容。今天就给大家分享一下我这几天摸鱼的成果，本文主要内容包括 Zookeeper的配置安装、基本命令和ava API 的使用以及Zookeeper内部数据的存储方式以及Znode的特点、Watch 机制的详细介绍，最后聊了一下Zookeeper的应用场景，通篇文章都是理论+图解+代码实操，坚持看完相信你肯定会有所收获。1、安装和配置1.1、首先下载安装包#下载安装包
wget https://dlcdn.apache.org/zookeeper/zookeeper-3.9.2/apache-zookeeper-3.9.2-bin.tar.gz   ## 解压软件包
tar zxvf apache-zookeeper-3.9.2-bin.tar.gz ## 重命名后放到指定目录下
mv apache-zookeeper-3.9.2-bin zookeeper-3.9.2
mv zookeeper-3.9.2 /usr/local/这里按照习惯我放到了/usr/local 目录下了。1.2、修改配置官方文档连接： ZooKeeper: Because Coordinating Distributed Systems is a Zoo这里我们参照官方文档上的说明 新建一个数据目录，然后修改zoo.cfg配置文件这里解释一下几个参数:tickTime: ZooKeeper使用的基本时间单位（毫秒）。它用于执行心跳，最小会话超时将是tickTime的两倍。dataDir: 存储内存中数据快照的路径clientPort: 监听客户端连接的端口 这里我是将原来的 文件复制了一份然后在原来的基础上修改，内容如下[root@VM-4-9-centos zookeeper-3.9.2]# cat conf/zoo.cfg 
# The number of milliseconds of each tick
tickTime=2000
# The number of ticks that the initial 
# synchronization phase can take
initLimit=10
# The number of ticks that can pass between 
# sending a request and getting an acknowledgement
syncLimit=5
# the directory where the snapshot is stored.
# do not use /tmp for storage, /tmp here is just 
# example sakes.
dataDir=/opt/zookeeper/data
# the port at which the clients will connect
clientPort=9009
# the maximum number of client connections.
# increase this if you need to handle more clients
#maxClientCnxns=60
#
# Be sure to read the maintenance section of the 
# administrator guide before turning on autopurge.
#
# https://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance
#
# The number of snapshots to retain in dataDir
#autopurge.snapRetainCount=3
# Purge task interval in hours
# Set to "0" to disable auto purge feature
#autopurge.purgeInterval=1## Metrics Providers
#
# https://prometheus.io Metrics Exporter
#metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider
#metricsProvider.httpHost=0.0.0.0
#metricsProvider.httpPort=7000
#metricsProvider.exportJvmInfo=truekeeper.jute.maxbuffer=104857600
[root@VM-4-9-centos zookeeper-3.9.2]#需要注意的是 这里我将自己的端口改成了9009  大家可以自己设置1.3、启动服务启动服务和查看服务状态的命令主要有以下几个# 启动 ZooKeeper 服务
./zkServer.sh start
# 查看 ZooKeeper 服务状态
./zkServer.sh status
# 停止 ZooKeeper 服务
./zkServer.sh stop 
# 重启 ZooKeeper 服务
./zkServer.sh restart命令实操：[root@localhost zookeeper-3.9.2]# ./bin/zkServer.sh start
ZooKeeper JMX enabled by default
Using config: /usr/local/zookeeper-3.9.2/bin/../conf/zoo.cfg
Starting zookeeper ... STARTED
[root@localhost zookeeper-3.9.2]# ./bin/zkServer.sh status
ZooKeeper JMX enabled by default
Using config: /usr/local/zookeeper-3.9.2/bin/../conf/zoo.cfg
Client port found: 2181. Client address: localhost. Client SSL: false.
Mode: standalone
[root@localhost zookeeper-3.9.2]#2、客户端主要命令2.1、连接客户端# 格式  -server ip:port
/zkCli.sh -server 127.0.0.1:2181# 断开连接
quit连接成功的效果如下2.2、CRUD命令对于Zookeeper常用的命令 我梳理成了下面的一张表格，主要就以下几个命令释义create /node_path node_value创建节点  并在设置节点上的数值set /node_path node_value给/node_path 节点设置 值get /node_path node_value获取/node_path 节点的数值delete /node_path删除节点(单个节点) 节点下不能 有子节点deleteall /node_path删除节点（包括该节点下的子节点）create -e /node_path创建临时节点 该节点只在当前会话中生效create -s /node_path创建顺序节点我们登录到控制台，实操一下上面的命令WatchedEvent state:SyncConnected type:None path:null zxid: -1
[zk: localhost:2181(CONNECTED) 0] ls /
[zookeeper]
[zk: localhost:2181(CONNECTED) 1] create /demo 
Created /demo
[zk: localhost:2181(CONNECTED) 2] ls /
[demo, zookeeper]
[zk: localhost:2181(CONNECTED) 3] set /demo value 
[zk: localhost:2181(CONNECTED) 4] get /demo 
value
[zk: localhost:2181(CONNECTED) 5] delete /demo 
[zk: localhost:2181(CONNECTED) 6] ls /
[zookeeper]
[zk: localhost:2181(CONNECTED) 7] create /tom 
Created /tom
[zk: localhost:2181(CONNECTED) 8] create /tom/jerry
Created /tom/jerry
[zk: localhost:2181(CONNECTED) 9] ls /
[tom, zookeeper]
[zk: localhost:2181(CONNECTED) 10] 
[zk: localhost:2181(CONNECTED) 10] ls /tom 
[jerry]
[zk: localhost:2181(CONNECTED) 11] delete /tom 
Node not empty: /tom
[zk: localhost:2181(CONNECTED) 12] deleteall /tom 
[zk: localhost:2181(CONNECTED) 13] ls /
[zookeeper]
[zk: localhost:2181(CONNECTED) 14]完整的命令大家可以参照官方文档：ZooKeeper: Because Coordinating Distributed Systems is a Zoo3、Zookeeper数据模型到这里大家可能并不太理解 Zookeeper 到底是怎么组织数据的，这里我们可以查看文档的数据模型章节上面大概的意思就是ZooKeeper 的命名空间是有一个层次结构的，类似分布式文件系统。唯一的区别是名称空间中的每个节点都可以有与其关联的数据以及子节点。这就类似在文件系统，它既是一个文件也是一个目录。到节点的路径总是斜杠分隔的路径。支持所有的unicode字符，但是有几个比较特殊1、空字符 (\u0000) 不能使用2、\u0001 - \u001F and \u007F \u009F 、\ud800 - uF8FF, \uFFF0 - uFFFF这几个字符也不能使用3、最后 zookeeper 作为保留令牌 也不能使用。到这里我们就可以把 zookeeper中的数据模型理解成下图所示的样子需要注意的是 每个节点上可以存放数据，但是数据大小不能超过1M。4、Java API前面我们知道了 Zookeeper 的数据组织形式 也知道了 基本的CRUD命令了，下面我们就来学习一个操作Zookeeper的Java API 首先 引入依赖&lt;dependency&gt;&lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;&lt;artifactId&gt;zookeeper&lt;/artifactId&gt;&lt;version&gt;3.9.2&lt;/version&gt;
&lt;/dependency&gt;然后我们新建一个工程，测试代码如下public class ZooKeeperPractice {  private static final int SESSION_TIMEOUT = 3000;  
private static ZooKeeper zooKeeper;  public static void main(String[] args) {  try {  // 创建 ZooKeeper 实例  zooKeeper = new ZooKeeper("ip:port", SESSION_TIMEOUT, new Watcher() {  @Override  public void process(WatchedEvent event) {  System.out.println("Watch event: " + event);  }  });  String path = "/myZnode"; // 节点路径  // String data = "Hello ZooKeeper"; // 节点数据  // 创建节点  // createNode(path, data);  // 获取节点数据  getNodeData(path);  // 删除节点  // deleteNode(path);  } catch (IOException | KeeperException | InterruptedException e) {  e.printStackTrace();  } finally {  try {  if (zooKeeper != null) {  zooKeeper.close();  }  } catch (InterruptedException e) {  e.printStackTrace();  }  }  
}  private static void createNode(String path, String data) throws KeeperException, InterruptedException {  // 创建持久节点  String createdPath = zooKeeper.create(path, data.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);  System.err.println("Node created: " + createdPath);  }  private static void getNodeData(String path) throws KeeperException, InterruptedException {  byte[] data = zooKeeper.getData(path, false, null);  System.err.println("Node data: " + new String(data));  }  private static void deleteNode(String path) throws KeeperException, InterruptedException {  zooKeeper.delete(path, -1); // -1 表示删除最新版本的节点  System.err.println("Node deleted: " + path);  }  
}先将创建节点的代码注释放开，运行上述代码 我们即可查看zookeeper里面创建的节点和节点存储的数值了，接着getNodeData 方法可以获取该节点的数值。5、Zookeeper的Watch机制5.1、Watch机制概述Zookeeper 的 Watch 机制主要是用于监控节点状态变化的机制。简而言之就是它允许客户端在zookeeper上注册某个节点的事件监听器，当该节点发生了变更的时候Zookeeper会通知到该客户端。 这个功能就很厉害了，我们先来做一个小案例，体会下这个过程，之后那你就能很快的理解这个机制的工作原理了5.2、Watch机制原理直接上代码。 首先我们编写一个类，这个类的功能是创建一个临时节点，并且隔段时间修改一次这个节点上存放的数值，最后等待一段时间后结束整个会话。相关代码如下public class EventRegister {  private ZooKeeper zooKeeper;  private String eventNodePath;  public EventRegister(String zkAddr, String eventNodePath) throws IOException {  this.zooKeeper = new ZooKeeper(zkAddr, 3000, null);  this.eventNodePath = eventNodePath;  }  // 注册事件  public void registerEvent(String eventData) {  try {  String createdPath = zooKeeper.create(eventNodePath, eventData.getBytes(),  ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);  System.out.println("Event registered at path: " + createdPath);  } catch (Exception e) {  e.printStackTrace();  }  }  // 修改节点的值  public void updateServiceData(String newServiceData) {  try {  zooKeeper.setData(eventNodePath, newServiceData.getBytes(), -1);  System.out.println("Service data updated to: " + newServiceData);  } catch (KeeperException | InterruptedException e) {  e.printStackTrace();  }  }  // 关闭 ZooKeeper 连接  public void close() {  try {  zooKeeper.close();  } catch (InterruptedException e) {  e.printStackTrace();  }  }  public static void main(String[] args) {  String zkAddr = "ip:port";  //修改成自己的ip和端口String eventNodePath = "/test_node";  // 事件数据  try {  // 创建注册器并注册事件  EventRegister eventRegister = new EventRegister(zkAddr, eventNodePath);  eventRegister.registerEvent("hi i'm tom" );  System.out.println("Event registration completed.");  //模拟10s后修改节点数据  Thread.sleep(10000);  eventRegister.updateServiceData("fuck i'm jerry");  //模拟2后修改节点数据  Thread.sleep(4000);  eventRegister.updateServiceData("你们见鬼去吧 ");  //30后下线  Thread.sleep(30000);  // 关闭连接  eventRegister.close();  } catch (Exception e) {  e.printStackTrace();  }  }  
}接着我们还需要一个Watcher监听类，这个类需要实现的功能是监听上面创建的临时节点，每当节点的值发生了变更后zookeeper就会下发通知，接着就重新获取该节点的值，相关代码如下public class EventListener implements Watcher {  private ZooKeeper zooKeeper;  private String eventNodePath;  public EventListener(String zkAddr, String eventNodePath) throws IOException {  this.zooKeeper = new ZooKeeper(zkAddr, 3000, this);  this.eventNodePath = eventNodePath;  // 初始时设置 watcher  watchEventNode();  }  // 处理事件  @Override  public void process(WatchedEvent event) {  if (event.getType() == Event.EventType.NodeDeleted) {  System.out.println("服务下线了: " + eventNodePath);  } else if (event.getType() == Event.EventType.NodeDataChanged) {  System.out.println("服务变更了: " + eventNodePath);  }  // 重新设置 watcher  watchEventNode();  }  // 监视事件节点  private void watchEventNode() {  try {  byte[] data = zooKeeper.getData(eventNodePath, this, null);  System.out.println("节点中最新版本的数据内容: " + new String(data));  } catch (KeeperException e) {  e.printStackTrace();  } catch (InterruptedException e) {  e.printStackTrace();  }  }  // 关闭 ZooKeeper 连接  public void close() {  try {  zooKeeper.close();  } catch (InterruptedException e) {  e.printStackTrace();  }  }  public static void main(String[] args) {  String zkAddr = "ip:port";  //修改成自己的ip和端口String eventNodePath = "/test_node"; // 事件节点路径  // 创建并启动监听器  try {  EventListener eventListener = new EventListener(zkAddr, eventNodePath);  // 模拟事件监听一段时间  Thread.sleep(10000000);  // 关闭连接  eventListener.close();  } catch (Exception e) {  e.printStackTrace();  }  }  
}完成上述代码后，我们先启动 EventRegister，等待 2s 后再启动 EventListener 然后观察他们的控制台的输出。我们查看上述控制台的信息，发现每一次test_node上的数据的变更zookeeper都会通知EventListener，并且EventListener也能获取到最新的值，EventRegister会话结束后临时节点被删除也能感知到。到这里相信你已经理解了这种机制了。Zookeeper 之所以被广泛的应用就是因为他的这个特有的机制。相信大家很容易就理解了上面的这个小案例的代码，不过这里我还是推荐大家去看看官方文档上给出的案例，相信你肯定会有更深刻的理解 地址： zookeeper.apache.org/doc/current…6、Zookeeper 的应用场景从上面的案例中我们可以知道 Zookeeper 的监听机制大致的工作流程，这里给大家梳理成2张图上面两张图就是Zookeeper的Watch机制的流程了。那么基于这种机制我们就可以好好聊聊 zookeeper的应用场景了6.1 分布式配置中心假设我们有一个应用，服务端是由3个服务节点组成的集群，某一天我们需要修改服务端的某项配置的时候，我们需要 分别在3个节点上修改，假如后期应用体量变大了 服务端需要扩容，增加到了100个节点，那我们想修改某个配置的时候 就需要去修改100个节点，想想就头皮发麻。这个时候我们就可以使用 Zookeeper 来管理这些配置了6.2、统一集群管理在一个服务端集群的环境中 我们需要实时的掌握每个服务的状态，当某个节点发生了变更或者故障的时候我们要能及时的发现并作出对应的措施，这个时候我们同样的也可以使用Zookeeper来实现。实现步骤也很简单，如下图所示每个服务启动的时候向zookeeper注册一个临时节点，监控服务分别监听所有服务的节点，当某个节点发生了故障断开会话，这个时候它所对应的临时节点就不存在了。这个时候Zookeeper就会通知监控中心，我们就能捕获到异常的服务了。6.3、服务注册中心这个相信大家对注册中心都不陌生，早些年 Zookeeper 配合 Dubbo 构建分布式系统有很多成功的案例， 同样的Zookeeper作为服务注册中心的原理也是类似的，服务提供者将自己的服务地址、方法签名存到Zookeeper上指定的节点，服务消费者从这个节点上拉取服务提供者的元信息，进行远程调用。当某个服务挂掉了，Zookeeper就会通知监控中心。6.4、分布式锁在分布式环境中如果多个服务实例需要访问 某个共享资源，这个时候我们就需要引入分布式锁了，同样的Zookeeper也是一个不错的选择。实现原理是临时顺序节点+watch机制。还记得主要命令的那个章节里介绍的 临时节点和顺序节点吗，同样的其实还有一个临时顺序节点，他就是分布式锁的最佳实践。 直接上代码吧public class DistributedLock implements Watcher {  private static final String LOCK_NODE = "/lock"; // 锁节点  private final ZooKeeper zooKeeper;  private String lockId; // 当前实例的锁节点 ID  public DistributedLock(String zkHost) throws IOException {  this.zooKeeper = new ZooKeeper(zkHost, 3000, this);  }  @Override  public void process(WatchedEvent event) {  // 处理事件（可根据需要实现）  }  public boolean lock() throws KeeperException, InterruptedException {  // 创建临时顺序节点  lockId = zooKeeper.create(LOCK_NODE + "/lock-", new byte[0],  ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);  // 检查是否为最小节点  return tryLock();  }  // 尝试获取锁  private boolean tryLock() throws KeeperException, InterruptedException {  // 获取当前锁节点的所有子节点  List&lt;String&gt; children = zooKeeper.getChildren(LOCK_NODE, false);  if (children.isEmpty()) {  return true; // 成功获取锁  }  // 检查自己是否为最小节点  String minNode = getMinNode(children);  return minNode != null &amp;&amp; lockId.equals(LOCK_NODE + "/" + minNode);  }  // 获取最小的节点名称  private String getMinNode(List&lt;String&gt; children) {  return children.stream()  .sorted() // 按节点名称排序  .findFirst()  .orElse(null);  }  // 释放锁  public void unlock() throws KeeperException, InterruptedException {  if (lockId != null) {  zooKeeper.delete(lockId, -1);  lockId = null; // 清空锁 ID  }  }  public void close() throws InterruptedException {  zooKeeper.close();  }  
}相比长篇大论的文字，相信大家肯定觉得还是代码好理解，上面的代码就是 在Zookeeper的/lock 节点下创建一个临时的顺序节点，当有一次请求过来的时候就会新创建一个节点，然后判断自己的节点是不是顺序值最小的。如果是就算是获取到了锁，处理完后业务逻辑后，就将该节点删掉也就是释放了锁。后面的请求进来了也是同样的判断。 下面再来写一段测试一下这个过程@RestController  
public class UserInfoController {  private final DistributedLock distributedLock;  public UserInfoController(DistributedLock distributedLock) {  this.distributedLock = distributedLock;  }  @RequestMapping("/getUserInfo")  public Map getUserInfo() throws InterruptedException, KeeperException {  Map jerry = new HashMap&lt;String, Object&gt;();  String msg = "";  if (distributedLock.lock()) {  msg = "当前线程： " + Thread.currentThread().getId() + " 获取到锁";  try {  jerry.put("name", Thread.currentThread().getName());  jerry.put("age", 18);  jerry.put("sex", "男");  jerry.put("address", "深圳");  } finally {  distributedLock.unlock();  }  } else  msg = "当前线程： " + Thread.currentThread().getName() + " 没有获取到锁";  jerry.put("msg", msg);  return jerry;  }  
}@SpringBootApplication  
public class JerryStoreApplication {  public static void main(String[] args) {  SpringApplication.run(JerryStoreApplication.class, args);  System.out.println("jerry-store started");  }  @Bean  public DistributedLock distributedLock() throws IOException {  return new DistributedLock("ip:port");  }  }然后我们可以利用jemter工具 进行测试 就能看到明显的过程了。7、总结本文从Zookeeper安装开始，由基础命令、JavaAPI的使用逐步过渡到Zookeeper的监听机制的特性，然后又通过多个代码示例讲解了 Zookeeper怎么实现分布式配置中心、统一集群管理和服务注册中心的，最后又通过临时顺序节点和Watch机制实现了一个简单的分布式锁。到这里你肯定已经对Zookeeper 有了一定的认知了，假设面试官问你 有没有用过Zookeeper 之类的问题 相信你肯定知道怎么去回答了。甚至可以按照本文的脉络去回答 它是什么，怎么用、能做什么，具体怎么去落地的大致流程了。http://www.ppmy.cn/news/1540746.html相关文章Flink状态一致性保证前言 
一个Flink作业由一系列算子构成&amp;#xff0c;每个算子可以有多个并行实例&amp;#xff0c;这些实例被称为 subTask&amp;#xff0c;每个subTask运行在不同的进程或物理机上&amp;#xff0c;以实现作业的并行处理。在这个复杂的分布式场景中&amp;#xff0c;任何一个节点故障都有可能导致 F…阅读更多...基于神经网络的农业病虫害损失预测【摘 要】鉴于农业病虫害经济损失的预测具有较强的复杂性和非线性特性&amp;#xff0c;设计了一种新型的GRNN预测模型&amp;#xff0c;对农业病虫害经济损失进行预测。该模型基于人工神经网络捕捉非线性变化独特的优越性&amp;#xff0c;在神经网络技术和江苏省气象局提供的数据的基础上&amp;am…阅读更多...Java Exercise807. 保持城市天际线 
class Solution {public int maxIncreaseKeepingSkyline(int[][] grid) {int n  grid.length;int[] rowMax  new int[n];int[] colMax  new int[n];for (int i  0; i &lt; n; i) {for (int j  0; j &lt; n; j) {rowMax[i]  Math.max(rowMax[i], grid[i][j…阅读更多...C++笔记-UTF8和UTF8-dom的区别在文件格式上&amp;#xff0c;UTF-8 和 UTF-8-BOM 是两种不同的编码方式&amp;#xff0c;其中 UTF-8-BOM 包含字节顺序标记&amp;#xff08;BOM&amp;#xff09;&amp;#xff0c;而 UTF-8 则不包含。 
UTF-8&amp;#xff1a; 
UTF-8 是一种以字节为单位的可变长度字符编码&amp;#xff0c;常用于以字节为单位…阅读更多...爬虫学习——25.JS逆向（1）1 、什么是JS、JS反爬是什么？JS逆向是什么? 
JS: JS全称JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。JavaScript 是一种轻量级的编程语言。JavaScript 是可插入 HTML 页面的编程代码…阅读更多...Leetcode 单词拆分以下是LeetCode问题139“单词拆分”&amp;#xff08;Word Break&amp;#xff09;的Java解法&amp;#xff0c;使用了动态规划&amp;#xff08;Dynamic Programming, DP&amp;#xff09;来解决这个问题&amp;#xff1a; 
import java.util.List;
import java.util.Set;
import java.util.HashSet;public c…阅读更多...Python爱心射线（完整代码）目录 
系列目录 
写在前面​ 
完整代码 
下载代码 
代码分析 
写在后面  系列目录 序号直达链接表白系列1Python制作一个无法拒绝的表白界面2Python满屏飘字表白代码3阅读更多...IntelliJ IDEA中配置scala1.IDEA中 配置 maven 左上角 file -&gt; Setting 选择(或直接搜maven) Build, Execution,Deployment -&gt; Build Toos -&gt; Maven 
Maven home path 选择 maven 安装目录&amp;#xff08;bin的上层目录&amp;#xff09; 示例&amp;#xff1a; D:\maven\apache-maven-3.8.6 
User settings…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:41 +0000</pubDate>
    </item>
    <item>
      <title>Flink状态一致性保证</title>
      <link>https://www.ppmy.cn/news/1540745.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Flink状态一致性保证news/2025/10/31 22:18:39/前言一个Flink作业由一系列算子构成，每个算子可以有多个并行实例，这些实例被称为 subTask，每个subTask运行在不同的进程或物理机上，以实现作业的并行处理。在这个复杂的分布式场景中，任何一个节点故障都有可能导致 Flink 作业宕机，Flink 状态本地化虽然可以实现极致的访问速度，但是节点故障后的状态恢复问题也是Flink必须要解决的。状态持久化恢复状态最简单粗暴的方式，就是回溯全量数据，重新计算一遍。不过缺点也很明显，首先，有的数据源压根就不支持保存全量数据，例如Kafka可能就只保存近几天甚至几小时的数据；其次，回溯全量数据必然会消耗大量时间，导致作业产出结果出现较大延时，这本身就和Flink高吞吐低延时的目标相悖。于是，Flink 推出了状态持久化方案，Flink 作业运行时会自动、定时地将状态数据持久化到远程分布式文件系统中，一旦 Flink 作业异常重启，就会从远程分布式文件系统中读取最新的快照恢复状态，避免了状态数据丢失的问题。如下示例，数据源会不断产生一些数字，Flink 作业会对这些数字求和，并输出到目标数据库。第一步，数字1输入，subTask更新本地状态sum=1，然后将其持久化到远程文件系统，此时作业异常宕机，本地状态丢失；第二步，Flink 作业重启，从远程文件系统恢复状态sum=1；第三步，subTask继续处理数据，整个过程就像没发生故障一样。状态一致性状态持久化只实现了基本的异常容错，用户往往还有“状态一致性”的诉求。发生故障时，Flink不仅要能从远程文件系统中恢复状态数据，还要能协调所有subTask节点在故障恢复后实现数据的精准一次处理，也就是数据即不会多算，也不会少算，以保证作业的计算结果如同没有发生过故障一样。流计算的状态一致性有三个等级：at-most-once 最多计算一次，允许数据丢失，最弱的一致性保证at-least-once 至少计算一次，允许数据重复计算，对于自身具备幂等性写入的业务指标可以保证一致性exactly-once 精准计算一次，最强的一致性保证，数据不会多算也不会少算仅仅通过状态持久化，只能保证 at-most-once 一致性，本地状态更新后还没来得及保存到远程文件系统时发生故障，数据就会丢失，导致漏算。如下图所示，数据2处理完，本地状态更新sum=3，状态还没来得及持久化就发生故障，重启后恢复状态sum=1，数据2的计算丢失了，数据漏算。要想避免数据漏算，可以通过故障恢复时向前回溯一部分数据来解决，例如回溯前一小时的数据甚至全部数据，这样可以保证数据至少被计算一次，也就是满足 at-least-once 一致性，但是会有数据被重复计算，对于本身具备幂等性的业务指标这没什么问题，非幂等性的业务指标计算结果仍不准确。最理想的一致性场景就是 exactly-once，数据精准计算一次，既不多算也不少算。在咱们这个例子中，要想实现 exactly-once 一致性，除了同步sum状态，还要同步作业处理数据的偏移量offset，故障恢复时，根据恢复的offset从指定的位置重新读取数据进行处理。如图所示，第一步处理数字1求和，更新本地状态sum=1、offset=1并持久化到远程文件系统；第二步处理数字2求和，更新本地状态sum=3、offset=2，状态还没持久化时发生故障，本地状态丢失；第三步从远程文件系统恢复状态；第四步从offset=1处开始继续处理数据2，更新本地状态并输出结果，整个流程就像没发生过故障一样。由此可见，要满足 exactly-once 一致性，有以下几个条件：数据源支持根据偏移量回溯subTask持久化状态的同时，也要持久化偏移量offsetsubTask持久化状态和处理数据要互斥，不能持久化状态的同时还处理数据一个完整的Flink作业由若干个subTask构成，运行在一个复杂的分布式环境中，Flink作业状态一致性的前提是每个subTask先保证自身状态一致性。对于Source算子subTask来说，如果数据源支持根据offset回溯数据，那么执行上述流程不会有问题。但是对于下游非Source算子subTask来说，情况会显得更加复杂。Source算子subTask读取到数据后，是通过Socket传输给下游subTask的，Socket通道的数据首先不支持回溯，其次数据压根就没有offset，这就意味着下游subTask可能会漏算数据，又回到 at-most-once 一致性了。丢失的这些数据不能让上游subTask重发，因为上游subTask根本就不知道下游subTask的处理结果是成功还是失败，如果再额外引入一套ACK机制，增加复杂度不说，额外的性能消耗也是Flink无法承受的。既然上游不支持重发，就只能下游subTask自己解决了。下游subTask在收到上游传过来的数据时，除了计算并更新本地状态外，还要将收到的这部分数据也写进状态里面，打快照时和状态一同持久化。故障恢复时，除了恢复状态外，再把这部分数据拿出来重新计算一下，最终的状态结果就是准确的了。下游subTask也无需保存接收到的所有数据，只要数据被计算过且打过快照，这部分数据就没用了，所以下游subTask要保存的数据，只有上游subTask开始执行快照到下游subTask开始执行快照时的这部分数据，怎么让下游subTask知道上游subTask在执行快照呢？很简单，上游subTask执行快照时给下游subTask广播一条特殊的消息即可，这个消息被称为“barrier”（屏障）。再次总结一下，要满足 exactly-once 一致性，满足以下条件：数据源支持根据offset回溯Source算子持久化offset，并向下游算子广播barriersubTask持久化状态和处理数据要互斥，不能持久化状态的同时还处理数据非Source算子subTask要持久化两部分数据：本地状态数据、上游subTask执行快照到自己执行快照这段时间接收到的数据所有subTask快照执行成功，才算一次完整的快照故障恢复时，Source算子从远程文件系统恢复offset，根据offset回溯数据源，并发送给下游subTask；下游subTask先从远程文件系统恢复状态，再读取之前上游发送给自己的数据，重新计算一遍这部分数据恢复自身状态，再继续处理上游发给自己的数据。Checkpoint机制有了上述理论，再看Flink Checkpoint机制就很容易理解了。Flink 以 Chandy-Lamport 算法理论为基础，实现了一套分布式轻量级异步快照算法，即 Flink Checkpoint。每个需要Checkpoint的Flink应用启动时，JobManager都会为其创建一个CheckpointCoordinator（检查点协调器）的组件，由它来负责生成全局快照，流程如下：CheckpointCoordinator周期性的向所有Source算子的subTask发送barrier，开始执行快照Source算子收到barrier，暂停处理数据，将本地状态持久化到远程文件系统，并向CheckpointCoordinator报告自己的快照结果，同时向下游subTask广播barrier下游subTask收到barrier，同样暂停数据处理。对于有多个输入的subTask来说，需要收到所有上游发来的subTask才会开始执行快照，这里就存在barrier对齐的问题。subTask同样地将本地状态持久化到远程文件系统，并向CheckpointCoordinator报告自己的快照结果，同时将barrier转发给下游subTask，直到Sink算子当CheckpointCoordinator收到所有算子的快照成功报告之后，认为该周期的快照制作成功。如果没有在指定时间内收到所有算子的报告，则认定为快照制作失败。Checkpoint 优化了subTask执行快照的时机，避免了整个快照期间，所有subTask都要暂停处理数据的问题。CheckpointCoordinator负责通知Source算子执行快照，而下游算子执行快照的时机，依赖于上游算子发送过来的barrier，这套机制执行快照无需暂停整个作业的数据处理，有效降低了流处理作业的延时问题。http://www.ppmy.cn/news/1540745.html相关文章基于神经网络的农业病虫害损失预测【摘 要】鉴于农业病虫害经济损失的预测具有较强的复杂性和非线性特性&amp;#xff0c;设计了一种新型的GRNN预测模型&amp;#xff0c;对农业病虫害经济损失进行预测。该模型基于人工神经网络捕捉非线性变化独特的优越性&amp;#xff0c;在神经网络技术和江苏省气象局提供的数据的基础上&amp;am…阅读更多...Java Exercise807. 保持城市天际线 
class Solution {public int maxIncreaseKeepingSkyline(int[][] grid) {int n  grid.length;int[] rowMax  new int[n];int[] colMax  new int[n];for (int i  0; i &lt; n; i) {for (int j  0; j &lt; n; j) {rowMax[i]  Math.max(rowMax[i], grid[i][j…阅读更多...C++笔记-UTF8和UTF8-dom的区别在文件格式上&amp;#xff0c;UTF-8 和 UTF-8-BOM 是两种不同的编码方式&amp;#xff0c;其中 UTF-8-BOM 包含字节顺序标记&amp;#xff08;BOM&amp;#xff09;&amp;#xff0c;而 UTF-8 则不包含。 
UTF-8&amp;#xff1a; 
UTF-8 是一种以字节为单位的可变长度字符编码&amp;#xff0c;常用于以字节为单位…阅读更多...爬虫学习——25.JS逆向（1）1 、什么是JS、JS反爬是什么？JS逆向是什么? 
JS: JS全称JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。JavaScript 是一种轻量级的编程语言。JavaScript 是可插入 HTML 页面的编程代码…阅读更多...Leetcode 单词拆分以下是LeetCode问题139“单词拆分”&amp;#xff08;Word Break&amp;#xff09;的Java解法&amp;#xff0c;使用了动态规划&amp;#xff08;Dynamic Programming, DP&amp;#xff09;来解决这个问题&amp;#xff1a; 
import java.util.List;
import java.util.Set;
import java.util.HashSet;public c…阅读更多...Python爱心射线（完整代码）目录 
系列目录 
写在前面​ 
完整代码 
下载代码 
代码分析 
写在后面  系列目录 序号直达链接表白系列1Python制作一个无法拒绝的表白界面2Python满屏飘字表白代码3阅读更多...IntelliJ IDEA中配置scala1.IDEA中 配置 maven 左上角 file -&gt; Setting 选择(或直接搜maven) Build, Execution,Deployment -&gt; Build Toos -&gt; Maven 
Maven home path 选择 maven 安装目录&amp;#xff08;bin的上层目录&amp;#xff09; 示例&amp;#xff1a; D:\maven\apache-maven-3.8.6 
User settings…阅读更多...MySQL【知识改变命运】10联合查询 0.前言1.联合查询在MySQL里面的原理2.练习一个完整的联合查询2.1.构造练习案例数据2.2 案例&amp;#xff1a;⼀个完整的联合查询的过程2.2.1. 确定参与查询的表&amp;#xff0c;学⽣表和班级表2.2.2. 确定连接条件&amp;#xff0c;student表中的class_id与class表中id列的值相等2.…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:40 +0000</pubDate>
    </item>
    <item>
      <title>基于神经网络的农业病虫害损失预测</title>
      <link>https://www.ppmy.cn/news/1540744.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维基于神经网络的农业病虫害损失预测news/2025/10/31 22:18:38/【摘 要】鉴于农业病虫害经济损失的预测具有较强的复杂性和非线性特性，设计了一种新型的GRNN预测模型，对农业病虫害经济损失进行预测。该模型基于人工神经网络捕捉非线性变化独特的优越性，在神经网络技术和江苏省气象局提供的数据的基础上，利用MATLAB人工神经网络工具箱及GRNN广义回归神经网络建立预测模型，来提高农业病虫害经济损失预测的精度。预测结果表明，该方法建立的模型可以实现对病虫害经济损失的预测，且其预测精度较高。引言病虫害经济损失评估系统作为社会经济系统的一个子系统，在受外界因素影响和作用的同时，对外部经济系统也具有一定的反作用，使其受到来自系统内外两方面因素的影响。同时，作为气象基础设施建设投资决策的基础，病虫害造成的损失不仅涉及农林牧降低产量的问题，而且与整个国民经济密切相关，因此它在国家和区域经济发展规划中具有十分重要的地位[1]。病虫害农业损失预测成为经济发展研究中的一个重要问题，对其进行研究和分析具有较强的实际意义。http://www.ppmy.cn/news/1540744.html相关文章Java Exercise807. 保持城市天际线 
class Solution {public int maxIncreaseKeepingSkyline(int[][] grid) {int n  grid.length;int[] rowMax  new int[n];int[] colMax  new int[n];for (int i  0; i &lt; n; i) {for (int j  0; j &lt; n; j) {rowMax[i]  Math.max(rowMax[i], grid[i][j…阅读更多...C++笔记-UTF8和UTF8-dom的区别在文件格式上&amp;#xff0c;UTF-8 和 UTF-8-BOM 是两种不同的编码方式&amp;#xff0c;其中 UTF-8-BOM 包含字节顺序标记&amp;#xff08;BOM&amp;#xff09;&amp;#xff0c;而 UTF-8 则不包含。 
UTF-8&amp;#xff1a; 
UTF-8 是一种以字节为单位的可变长度字符编码&amp;#xff0c;常用于以字节为单位…阅读更多...爬虫学习——25.JS逆向（1）1 、什么是JS、JS反爬是什么？JS逆向是什么? 
JS: JS全称JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。JavaScript 是一种轻量级的编程语言。JavaScript 是可插入 HTML 页面的编程代码…阅读更多...Leetcode 单词拆分以下是LeetCode问题139“单词拆分”&amp;#xff08;Word Break&amp;#xff09;的Java解法&amp;#xff0c;使用了动态规划&amp;#xff08;Dynamic Programming, DP&amp;#xff09;来解决这个问题&amp;#xff1a; 
import java.util.List;
import java.util.Set;
import java.util.HashSet;public c…阅读更多...Python爱心射线（完整代码）目录 
系列目录 
写在前面​ 
完整代码 
下载代码 
代码分析 
写在后面  系列目录 序号直达链接表白系列1Python制作一个无法拒绝的表白界面2Python满屏飘字表白代码3阅读更多...IntelliJ IDEA中配置scala1.IDEA中 配置 maven 左上角 file -&gt; Setting 选择(或直接搜maven) Build, Execution,Deployment -&gt; Build Toos -&gt; Maven 
Maven home path 选择 maven 安装目录&amp;#xff08;bin的上层目录&amp;#xff09; 示例&amp;#xff1a; D:\maven\apache-maven-3.8.6 
User settings…阅读更多...MySQL【知识改变命运】10联合查询 0.前言1.联合查询在MySQL里面的原理2.练习一个完整的联合查询2.1.构造练习案例数据2.2 案例&amp;#xff1a;⼀个完整的联合查询的过程2.2.1. 确定参与查询的表&amp;#xff0c;学⽣表和班级表2.2.2. 确定连接条件&amp;#xff0c;student表中的class_id与class表中id列的值相等2.…阅读更多...Redis学习笔记（三）--Redis客户端文章目录 一、命令行客户端二、图形界面客户端1、Redis Desktop Manager2、RedisPlus 三、java代码客户端 本文参考&amp;#xff1a; Redis学习汇总&amp;#xff08;已完结&amp;#xff09; Redis超详细入门教程&amp;#xff08;基础篇&amp;#xff09; Redis视频从入门到高级&amp;#xff0c;redis视频…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:38 +0000</pubDate>
    </item>
    <item>
      <title>Java Exercise</title>
      <link>https://www.ppmy.cn/news/1540743.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Java Exercisenews/2025/10/31 22:18:36/807. 保持城市天际线class Solution {public int maxIncreaseKeepingSkyline(int[][] grid) {int n = grid.length;int[] rowMax = new int[n];int[] colMax = new int[n];for (int i = 0; i &lt; n; i++) {for (int j = 0; j &lt; n; j++) {rowMax[i] = Math.max(rowMax[i], grid[i][j]);colMax[j] = Math.max(colMax[j], grid[i][j]);}}int ans = 0;for (int i = 0; i &lt; n; i++) {for (int j = 0; j &lt; n; j++) {ans += Math.min(rowMax[i], colMax[j]) - grid[i][j];}}return ans;}http://www.ppmy.cn/news/1540743.html相关文章C++笔记-UTF8和UTF8-dom的区别在文件格式上&amp;#xff0c;UTF-8 和 UTF-8-BOM 是两种不同的编码方式&amp;#xff0c;其中 UTF-8-BOM 包含字节顺序标记&amp;#xff08;BOM&amp;#xff09;&amp;#xff0c;而 UTF-8 则不包含。 
UTF-8&amp;#xff1a; 
UTF-8 是一种以字节为单位的可变长度字符编码&amp;#xff0c;常用于以字节为单位…阅读更多...爬虫学习——25.JS逆向（1）1 、什么是JS、JS反爬是什么？JS逆向是什么? 
JS: JS全称JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。JavaScript 是一种轻量级的编程语言。JavaScript 是可插入 HTML 页面的编程代码…阅读更多...Leetcode 单词拆分以下是LeetCode问题139“单词拆分”&amp;#xff08;Word Break&amp;#xff09;的Java解法&amp;#xff0c;使用了动态规划&amp;#xff08;Dynamic Programming, DP&amp;#xff09;来解决这个问题&amp;#xff1a; 
import java.util.List;
import java.util.Set;
import java.util.HashSet;public c…阅读更多...Python爱心射线（完整代码）目录 
系列目录 
写在前面​ 
完整代码 
下载代码 
代码分析 
写在后面  系列目录 序号直达链接表白系列1Python制作一个无法拒绝的表白界面2Python满屏飘字表白代码3阅读更多...IntelliJ IDEA中配置scala1.IDEA中 配置 maven 左上角 file -&gt; Setting 选择(或直接搜maven) Build, Execution,Deployment -&gt; Build Toos -&gt; Maven 
Maven home path 选择 maven 安装目录&amp;#xff08;bin的上层目录&amp;#xff09; 示例&amp;#xff1a; D:\maven\apache-maven-3.8.6 
User settings…阅读更多...MySQL【知识改变命运】10联合查询 0.前言1.联合查询在MySQL里面的原理2.练习一个完整的联合查询2.1.构造练习案例数据2.2 案例&amp;#xff1a;⼀个完整的联合查询的过程2.2.1. 确定参与查询的表&amp;#xff0c;学⽣表和班级表2.2.2. 确定连接条件&amp;#xff0c;student表中的class_id与class表中id列的值相等2.…阅读更多...Redis学习笔记（三）--Redis客户端文章目录 一、命令行客户端二、图形界面客户端1、Redis Desktop Manager2、RedisPlus 三、java代码客户端 本文参考&amp;#xff1a; Redis学习汇总&amp;#xff08;已完结&amp;#xff09; Redis超详细入门教程&amp;#xff08;基础篇&amp;#xff09; Redis视频从入门到高级&amp;#xff0c;redis视频…阅读更多...python实战（一）——iris鸢尾花数据集分类一、任务背景 本文是python实战系列专栏的第一篇文章&amp;#xff0c;我们将从分类开始由浅入深逐步学习如何使用python完成常规的机器学习/深度学习任务。iris数据集是经典的机器学习入门数据集&amp;#xff0c;许多分类任务教程都会以这个数据集作为示例&amp;#xff0c;它的数据量是150条…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:37 +0000</pubDate>
    </item>
    <item>
      <title>C++笔记-UTF8和UTF8-dom的区别</title>
      <link>https://www.ppmy.cn/news/1540742.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维C++笔记-UTF8和UTF8-dom的区别news/2025/10/31 22:18:35/在文件格式上，UTF-8 和 UTF-8-BOM 是两种不同的编码方式，其中 UTF-8-BOM 包含字节顺序标记（BOM），而 UTF-8 则不包含。UTF-8：UTF-8 是一种以字节为单位的可变长度字符编码，常用于以字节为单位存储 Unicode 字符。UTF-8 文件在没有 BOM 的情况下，直接以文本内容开始，没有额外的字节序标记。2. UTF-8-BOM：UTF-8-BOM 也是 UTF-8 编码的一种形式，但含有字节顺序标记（BOM）。BOM 是一个特殊的字符，用于标识文本的字节顺序和编码类型。在 UTF-8-BOM 中，BOM 的字节序列是 EF BB BF。BOM 在文件开头起到标识作用，告诉文本编辑器或程序这是一个以 UTF-8 编码存储的文件。总的来说，UTF-8-BOM 与 UTF-8 在文件格式上的区别主要是在编码的开头是否包含 BOM。UTF-8-BOM 包含 BOM，而 UTF-8 不包含。今天遇到的就是这个问题，我用notepad将ascii转utf8后，发现以前的c++解析程序core dumped了，定位到了读首行时，cout输出正常，但string[0]，这种首行下标访问就不正常了，转ascii为&lt;0的值。最后发现notepad转的utf8编码有时会转换成uft-8-dom，所以大家转的时候，还是用notepad++把，方便一些。可以指定是utf8。http://www.ppmy.cn/news/1540742.html相关文章爬虫学习——25.JS逆向（1）1 、什么是JS、JS反爬是什么？JS逆向是什么? 
JS: JS全称JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。JavaScript 是一种轻量级的编程语言。JavaScript 是可插入 HTML 页面的编程代码…阅读更多...Leetcode 单词拆分以下是LeetCode问题139“单词拆分”&amp;#xff08;Word Break&amp;#xff09;的Java解法&amp;#xff0c;使用了动态规划&amp;#xff08;Dynamic Programming, DP&amp;#xff09;来解决这个问题&amp;#xff1a; 
import java.util.List;
import java.util.Set;
import java.util.HashSet;public c…阅读更多...Python爱心射线（完整代码）目录 
系列目录 
写在前面​ 
完整代码 
下载代码 
代码分析 
写在后面  系列目录 序号直达链接表白系列1Python制作一个无法拒绝的表白界面2Python满屏飘字表白代码3阅读更多...IntelliJ IDEA中配置scala1.IDEA中 配置 maven 左上角 file -&gt; Setting 选择(或直接搜maven) Build, Execution,Deployment -&gt; Build Toos -&gt; Maven 
Maven home path 选择 maven 安装目录&amp;#xff08;bin的上层目录&amp;#xff09; 示例&amp;#xff1a; D:\maven\apache-maven-3.8.6 
User settings…阅读更多...MySQL【知识改变命运】10联合查询 0.前言1.联合查询在MySQL里面的原理2.练习一个完整的联合查询2.1.构造练习案例数据2.2 案例&amp;#xff1a;⼀个完整的联合查询的过程2.2.1. 确定参与查询的表&amp;#xff0c;学⽣表和班级表2.2.2. 确定连接条件&amp;#xff0c;student表中的class_id与class表中id列的值相等2.…阅读更多...Redis学习笔记（三）--Redis客户端文章目录 一、命令行客户端二、图形界面客户端1、Redis Desktop Manager2、RedisPlus 三、java代码客户端 本文参考&amp;#xff1a; Redis学习汇总&amp;#xff08;已完结&amp;#xff09; Redis超详细入门教程&amp;#xff08;基础篇&amp;#xff09; Redis视频从入门到高级&amp;#xff0c;redis视频…阅读更多...python实战（一）——iris鸢尾花数据集分类一、任务背景 本文是python实战系列专栏的第一篇文章&amp;#xff0c;我们将从分类开始由浅入深逐步学习如何使用python完成常规的机器学习/深度学习任务。iris数据集是经典的机器学习入门数据集&amp;#xff0c;许多分类任务教程都会以这个数据集作为示例&amp;#xff0c;它的数据量是150条…阅读更多...Java最全面试题-＞Java基础面试题-＞JavaWeb面试题-＞Maven面试题Maven 
下边是我自己整理的面试题&amp;#xff0c;基本已经很全面了&amp;#xff0c;想要的可以私信我&amp;#xff0c;我会不定期去更新思维导图 哪里不会点哪里  
什么是maven&amp;#xff1f; 
Maven是基于POM&amp;#xff08;工程对象模型&amp;#xff09;&amp;#xff0c;通过一小段描述来对项目的代码…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:35 +0000</pubDate>
    </item>
    <item>
      <title>爬虫学习——25.JS逆向（1）</title>
      <link>https://www.ppmy.cn/news/1540741.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维爬虫学习——25.JS逆向（1）news/2025/10/31 22:18:33/1 、什么是JS、JS反爬是什么？JS逆向是什么?JS:JS全称JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。JavaScript 是一种轻量级的编程语言。JavaScript 是可插入 HTML 页面的编程代码。JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。JS反爬:JS反爬是指爬虫在获取网页数据时，遇到了通过JavaScript代码实现的反爬措施。JS反爬技术的实现方式包括动态渲染、异步加载、验证码、IP限制等多种方式。这些技术可以有效地防止爬虫的抓取，保护网站的数据安全。JS逆向:JS逆向是指通过分析和破解JavaScript代码，获取反爬措施的规则和实现方式，从而绕过反爬措施，实现爬虫的抓取。JS逆向需要具备一定的JavaScript编程能力和代码分析能力，对于爬虫开发者来说是一项高级的技能。 需要注意的是，进行JS逆向可能会涉及到法律风险和道德问题，因此在进行爬虫开发时，应该遵守相关法规和道德规范，避免侵犯他人的合法权益。2、JS逆向的大致流程分析目标网站的反爬措施：使用浏览器开发者工具或网络抓包工具分析目标网站的JavaScript代码和网络请求数据，了解反爬措施的实现方式和规则。常见的反爬措施包括动态渲染、异步加载http://www.ppmy.cn/news/1540741.html相关文章Leetcode 单词拆分以下是LeetCode问题139“单词拆分”&amp;#xff08;Word Break&amp;#xff09;的Java解法&amp;#xff0c;使用了动态规划&amp;#xff08;Dynamic Programming, DP&amp;#xff09;来解决这个问题&amp;#xff1a; 
import java.util.List;
import java.util.Set;
import java.util.HashSet;public c…阅读更多...Python爱心射线（完整代码）目录 
系列目录 
写在前面​ 
完整代码 
下载代码 
代码分析 
写在后面  系列目录 序号直达链接表白系列1Python制作一个无法拒绝的表白界面2Python满屏飘字表白代码3阅读更多...IntelliJ IDEA中配置scala1.IDEA中 配置 maven 左上角 file -&gt; Setting 选择(或直接搜maven) Build, Execution,Deployment -&gt; Build Toos -&gt; Maven 
Maven home path 选择 maven 安装目录&amp;#xff08;bin的上层目录&amp;#xff09; 示例&amp;#xff1a; D:\maven\apache-maven-3.8.6 
User settings…阅读更多...MySQL【知识改变命运】10联合查询 0.前言1.联合查询在MySQL里面的原理2.练习一个完整的联合查询2.1.构造练习案例数据2.2 案例&amp;#xff1a;⼀个完整的联合查询的过程2.2.1. 确定参与查询的表&amp;#xff0c;学⽣表和班级表2.2.2. 确定连接条件&amp;#xff0c;student表中的class_id与class表中id列的值相等2.…阅读更多...Redis学习笔记（三）--Redis客户端文章目录 一、命令行客户端二、图形界面客户端1、Redis Desktop Manager2、RedisPlus 三、java代码客户端 本文参考&amp;#xff1a; Redis学习汇总&amp;#xff08;已完结&amp;#xff09; Redis超详细入门教程&amp;#xff08;基础篇&amp;#xff09; Redis视频从入门到高级&amp;#xff0c;redis视频…阅读更多...python实战（一）——iris鸢尾花数据集分类一、任务背景 本文是python实战系列专栏的第一篇文章&amp;#xff0c;我们将从分类开始由浅入深逐步学习如何使用python完成常规的机器学习/深度学习任务。iris数据集是经典的机器学习入门数据集&amp;#xff0c;许多分类任务教程都会以这个数据集作为示例&amp;#xff0c;它的数据量是150条…阅读更多...Java最全面试题-＞Java基础面试题-＞JavaWeb面试题-＞Maven面试题Maven 
下边是我自己整理的面试题&amp;#xff0c;基本已经很全面了&amp;#xff0c;想要的可以私信我&amp;#xff0c;我会不定期去更新思维导图 哪里不会点哪里  
什么是maven&amp;#xff1f; 
Maven是基于POM&amp;#xff08;工程对象模型&amp;#xff09;&amp;#xff0c;通过一小段描述来对项目的代码…阅读更多...Python基础09目录 1.封装(Enclosure) 
2.多态(Polymorphic) 
3.魔术方法(Magic Methods) 
4.重写 
4.1函数重写 
4.2运算符重载 
5.super()函数 
6.迭代器 
7.生成器 
8.处理异常 
9.函数式编程 
9.1函数作为参数 
9.1.1lambda表达式 
9.1.2内置高阶函数 
9.2函数作为返回值 
9.2.1闭包 
9.…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:34 +0000</pubDate>
    </item>
    <item>
      <title>Leetcode 单词拆分</title>
      <link>https://www.ppmy.cn/news/1540740.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Leetcode 单词拆分news/2025/10/31 22:18:32/以下是LeetCode问题139“单词拆分”（Word Break）的Java解法，使用了动态规划（Dynamic Programming, DP）来解决这个问题：importjava.util.List;importjava.util.Set;importjava.util.HashSet;publicclassSolution{publicbooleanwordBreak(Strings,List&lt;String&gt;wordDict){// 将wordDict转化为一个Set，以加快查找速度Set&lt;String&gt;wordSet=newHashSet&lt;&gt;(wordDict);// 创建一个DP数组，dp[i]表示字符串s的前i个字符是否可以由字典中的单词拼接而成boolean[]dp=newboolean[s.length()+1];// 空字符串可以被认为是可拼接的dp[0]=true;// 动态规划填充dp数组for(inti=1;i&lt;=s.length();i++){for(intj=0;j&lt;i;j++){// 如果s的前j个字符可拼接，且[j, i)这部分字符在字典中if(dp[j]&amp;&amp;wordSet.contains(s.substring(j,i))){dp[i]=true;break;// 找到一个可拼接方案后就可以跳出当前循环}}}// dp[s.length()]就是答案，表示整个字符串s是否可拼接returndp[s.length()];}}解决思路：使用动态规划：定义一个布尔数组dp[]，其中dp[i]表示从字符串的开头到索引i-1的子字符串是否可以用字典中的单词拆分出来。dp[0]表示空字符串，因此我们初始化dp[0] = true。递推关系：对于每个i，我们检查j从0到i的所有位置，如果dp[j]为true并且s[j:i]存在于wordDict中，那么我们设置dp[i] = true，并跳出内部循环。时间复杂度：由于每个子串的生成和查找都可能花费 O(n) 的时间，总体时间复杂度为 O(n^2)，其中 n 是字符串s的长度。java solutionclassSolution{publicbooleanwordBreak(Strings,List&lt;String&gt;wordDict){//将List&lt;String&gt; wordDict转化为HashSet, wordDict中的string作为hashset中的keySet&lt;String&gt;wordSet=newHashSet&lt;&gt;(wordDict);//dp[i] 表示s的前i个字符(下标0~i-1)构成的子串是否可以成功拆分//这里之所以需要创建s.length() + 1个数组单元是因为s.length() + 1个数组单元的下标范围是[0,s.length()]boolean[]dp=newboolean[s.length()+1];dp[0]=true;//将子串(0,i)拆分为2部分,(0,j)和(j,i), 下标都是左闭右开。// 如果(0,j)这一部分可以成功拆分并且另一部分(j,i)在字典中，说明子串(0,i)是可以成功被拆分的for(inti=0;i&lt;=s.length();++i){for(intj=0;j&lt;i;++j){if(dp[j]==true&amp;&amp;wordSet.contains(s.substring(j,i))){dp[i]=true;break;// break 只能跳出当前的 内部 for 循环}}}returndp[s.length()];}}http://www.ppmy.cn/news/1540740.html相关文章Python爱心射线（完整代码）目录 
系列目录 
写在前面​ 
完整代码 
下载代码 
代码分析 
写在后面  系列目录 序号直达链接表白系列1Python制作一个无法拒绝的表白界面2Python满屏飘字表白代码3阅读更多...IntelliJ IDEA中配置scala1.IDEA中 配置 maven 左上角 file -&gt; Setting 选择(或直接搜maven) Build, Execution,Deployment -&gt; Build Toos -&gt; Maven 
Maven home path 选择 maven 安装目录&amp;#xff08;bin的上层目录&amp;#xff09; 示例&amp;#xff1a; D:\maven\apache-maven-3.8.6 
User settings…阅读更多...MySQL【知识改变命运】10联合查询 0.前言1.联合查询在MySQL里面的原理2.练习一个完整的联合查询2.1.构造练习案例数据2.2 案例&amp;#xff1a;⼀个完整的联合查询的过程2.2.1. 确定参与查询的表&amp;#xff0c;学⽣表和班级表2.2.2. 确定连接条件&amp;#xff0c;student表中的class_id与class表中id列的值相等2.…阅读更多...Redis学习笔记（三）--Redis客户端文章目录 一、命令行客户端二、图形界面客户端1、Redis Desktop Manager2、RedisPlus 三、java代码客户端 本文参考&amp;#xff1a; Redis学习汇总&amp;#xff08;已完结&amp;#xff09; Redis超详细入门教程&amp;#xff08;基础篇&amp;#xff09; Redis视频从入门到高级&amp;#xff0c;redis视频…阅读更多...python实战（一）——iris鸢尾花数据集分类一、任务背景 本文是python实战系列专栏的第一篇文章&amp;#xff0c;我们将从分类开始由浅入深逐步学习如何使用python完成常规的机器学习/深度学习任务。iris数据集是经典的机器学习入门数据集&amp;#xff0c;许多分类任务教程都会以这个数据集作为示例&amp;#xff0c;它的数据量是150条…阅读更多...Java最全面试题-＞Java基础面试题-＞JavaWeb面试题-＞Maven面试题Maven 
下边是我自己整理的面试题&amp;#xff0c;基本已经很全面了&amp;#xff0c;想要的可以私信我&amp;#xff0c;我会不定期去更新思维导图 哪里不会点哪里  
什么是maven&amp;#xff1f; 
Maven是基于POM&amp;#xff08;工程对象模型&amp;#xff09;&amp;#xff0c;通过一小段描述来对项目的代码…阅读更多...Python基础09目录 1.封装(Enclosure) 
2.多态(Polymorphic) 
3.魔术方法(Magic Methods) 
4.重写 
4.1函数重写 
4.2运算符重载 
5.super()函数 
6.迭代器 
7.生成器 
8.处理异常 
9.函数式编程 
9.1函数作为参数 
9.1.1lambda表达式 
9.1.2内置高阶函数 
9.2函数作为返回值 
9.2.1闭包 
9.…阅读更多...【C语言】数据输出格式控制数据的输出格式修饰 常用两种&amp;#xff1a; 
整型中&amp;#xff0c;输出数据左对齐、右对齐、占m位、不足m位前补0。浮点型中&amp;#xff0c;默认通过四舍五入保留小数点后6位&amp;#xff0c;通过参数设置保留小数点后n位。 
#include &lt;stdio.h&gt;
#define PI 3.14159
/*	功能&amp;#x…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:32 +0000</pubDate>
    </item>
    <item>
      <title>Python爱心射线（完整代码）</title>
      <link>https://www.ppmy.cn/news/1540739.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Python爱心射线（完整代码）news/2025/10/31 22:18:31/目录系列目录写在前面​完整代码下载代码代码分析写在后面系列目录序号直达链接表白系列1Python制作一个无法拒绝的表白界面2Python满屏飘字表白代码3http://www.ppmy.cn/news/1540739.html相关文章IntelliJ IDEA中配置scala1.IDEA中 配置 maven 左上角 file -&gt; Setting 选择(或直接搜maven) Build, Execution,Deployment -&gt; Build Toos -&gt; Maven 
Maven home path 选择 maven 安装目录&amp;#xff08;bin的上层目录&amp;#xff09; 示例&amp;#xff1a; D:\maven\apache-maven-3.8.6 
User settings…阅读更多...MySQL【知识改变命运】10联合查询 0.前言1.联合查询在MySQL里面的原理2.练习一个完整的联合查询2.1.构造练习案例数据2.2 案例&amp;#xff1a;⼀个完整的联合查询的过程2.2.1. 确定参与查询的表&amp;#xff0c;学⽣表和班级表2.2.2. 确定连接条件&amp;#xff0c;student表中的class_id与class表中id列的值相等2.…阅读更多...Redis学习笔记（三）--Redis客户端文章目录 一、命令行客户端二、图形界面客户端1、Redis Desktop Manager2、RedisPlus 三、java代码客户端 本文参考&amp;#xff1a; Redis学习汇总&amp;#xff08;已完结&amp;#xff09; Redis超详细入门教程&amp;#xff08;基础篇&amp;#xff09; Redis视频从入门到高级&amp;#xff0c;redis视频…阅读更多...python实战（一）——iris鸢尾花数据集分类一、任务背景 本文是python实战系列专栏的第一篇文章&amp;#xff0c;我们将从分类开始由浅入深逐步学习如何使用python完成常规的机器学习/深度学习任务。iris数据集是经典的机器学习入门数据集&amp;#xff0c;许多分类任务教程都会以这个数据集作为示例&amp;#xff0c;它的数据量是150条…阅读更多...Java最全面试题-＞Java基础面试题-＞JavaWeb面试题-＞Maven面试题Maven 
下边是我自己整理的面试题&amp;#xff0c;基本已经很全面了&amp;#xff0c;想要的可以私信我&amp;#xff0c;我会不定期去更新思维导图 哪里不会点哪里  
什么是maven&amp;#xff1f; 
Maven是基于POM&amp;#xff08;工程对象模型&amp;#xff09;&amp;#xff0c;通过一小段描述来对项目的代码…阅读更多...Python基础09目录 1.封装(Enclosure) 
2.多态(Polymorphic) 
3.魔术方法(Magic Methods) 
4.重写 
4.1函数重写 
4.2运算符重载 
5.super()函数 
6.迭代器 
7.生成器 
8.处理异常 
9.函数式编程 
9.1函数作为参数 
9.1.1lambda表达式 
9.1.2内置高阶函数 
9.2函数作为返回值 
9.2.1闭包 
9.…阅读更多...【C语言】数据输出格式控制数据的输出格式修饰 常用两种&amp;#xff1a; 
整型中&amp;#xff0c;输出数据左对齐、右对齐、占m位、不足m位前补0。浮点型中&amp;#xff0c;默认通过四舍五入保留小数点后6位&amp;#xff0c;通过参数设置保留小数点后n位。 
#include &lt;stdio.h&gt;
#define PI 3.14159
/*	功能&amp;#x…阅读更多...前端项目中遇到的技术问题1.性能问题 
页面加载过长、图像加载慢。解决方案&amp;#xff1a;代码分割&amp;#xff0c;按照需求加载模块&amp;#xff0c;减少初始的加载量或者使用懒加载、资源压缩、cdn加速 
2.响应式设计&amp;#xff08;移动设备适配&amp;#xff09; 
不同的屏幕尺寸&amp;#xff0c;布局和样式不统一。解决方…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:31 +0000</pubDate>
    </item>
    <item>
      <title>IntelliJ IDEA中配置scala</title>
      <link>https://www.ppmy.cn/news/1540738.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维IntelliJ IDEA中配置scalanews/2025/10/31 22:18:29/1.IDEA中 配置 maven左上角 file -&gt; Setting选择(或直接搜maven) Build, Execution,Deployment -&gt; Build Toos -&gt; MavenMaven home path 选择 maven 安装目录（bin的上层目录）示例： D:\maven\apache-maven-3.8.6User settings file 选择 maven 配置文件（可以配置依赖包的下载源）示例：D:\maven\apache-maven-3.8.6\conf\settings.xmlLocal repository 选择 依赖包所在目录 （默认：C:\Users\username.m2\repository）示例： D:\maven.m2\repositoryIDEA中 安装 scala 插件项目添加scalaProject Structure -&gt; Global Libraries后面按需选择即可。http://www.ppmy.cn/news/1540738.html相关文章MySQL【知识改变命运】10联合查询 0.前言1.联合查询在MySQL里面的原理2.练习一个完整的联合查询2.1.构造练习案例数据2.2 案例&amp;#xff1a;⼀个完整的联合查询的过程2.2.1. 确定参与查询的表&amp;#xff0c;学⽣表和班级表2.2.2. 确定连接条件&amp;#xff0c;student表中的class_id与class表中id列的值相等2.…阅读更多...Redis学习笔记（三）--Redis客户端文章目录 一、命令行客户端二、图形界面客户端1、Redis Desktop Manager2、RedisPlus 三、java代码客户端 本文参考&amp;#xff1a; Redis学习汇总&amp;#xff08;已完结&amp;#xff09; Redis超详细入门教程&amp;#xff08;基础篇&amp;#xff09; Redis视频从入门到高级&amp;#xff0c;redis视频…阅读更多...python实战（一）——iris鸢尾花数据集分类一、任务背景 本文是python实战系列专栏的第一篇文章&amp;#xff0c;我们将从分类开始由浅入深逐步学习如何使用python完成常规的机器学习/深度学习任务。iris数据集是经典的机器学习入门数据集&amp;#xff0c;许多分类任务教程都会以这个数据集作为示例&amp;#xff0c;它的数据量是150条…阅读更多...Java最全面试题-＞Java基础面试题-＞JavaWeb面试题-＞Maven面试题Maven 
下边是我自己整理的面试题&amp;#xff0c;基本已经很全面了&amp;#xff0c;想要的可以私信我&amp;#xff0c;我会不定期去更新思维导图 哪里不会点哪里  
什么是maven&amp;#xff1f; 
Maven是基于POM&amp;#xff08;工程对象模型&amp;#xff09;&amp;#xff0c;通过一小段描述来对项目的代码…阅读更多...Python基础09目录 1.封装(Enclosure) 
2.多态(Polymorphic) 
3.魔术方法(Magic Methods) 
4.重写 
4.1函数重写 
4.2运算符重载 
5.super()函数 
6.迭代器 
7.生成器 
8.处理异常 
9.函数式编程 
9.1函数作为参数 
9.1.1lambda表达式 
9.1.2内置高阶函数 
9.2函数作为返回值 
9.2.1闭包 
9.…阅读更多...【C语言】数据输出格式控制数据的输出格式修饰 常用两种&amp;#xff1a; 
整型中&amp;#xff0c;输出数据左对齐、右对齐、占m位、不足m位前补0。浮点型中&amp;#xff0c;默认通过四舍五入保留小数点后6位&amp;#xff0c;通过参数设置保留小数点后n位。 
#include &lt;stdio.h&gt;
#define PI 3.14159
/*	功能&amp;#x…阅读更多...前端项目中遇到的技术问题1.性能问题 
页面加载过长、图像加载慢。解决方案&amp;#xff1a;代码分割&amp;#xff0c;按照需求加载模块&amp;#xff0c;减少初始的加载量或者使用懒加载、资源压缩、cdn加速 
2.响应式设计&amp;#xff08;移动设备适配&amp;#xff09; 
不同的屏幕尺寸&amp;#xff0c;布局和样式不统一。解决方…阅读更多...依赖标签分类任务Smin值计算（蛋白质功能预测，GO标签）前言 
Smin是在蛋白质功能预测中比较流行的一个指标&amp;#xff0c;具体由来我也不甚清楚&amp;#xff0c;只是在最近复现的几篇论文中反复出现了&amp;#xff0c;所以记录一下。 
计算方法 
&amp;#xff08;图来自于PSPGO论文&amp;#xff09; 其中&amp;#x1d70f;表示阈值&amp;#xff0c;t表示GO标签…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:30 +0000</pubDate>
    </item>
    <item>
      <title>MySQL【知识改变命运】10</title>
      <link>https://www.ppmy.cn/news/1540737.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维MySQL【知识改变命运】10news/2025/10/31 22:18:28/联合查询0.前言1.联合查询在MySQL里面的原理2.练习一个完整的联合查询2.1.构造练习案例数据2.2 案例：⼀个完整的联合查询的过程2.2.1. 确定参与查询的表，学⽣表和班级表2.2.2. 确定连接条件，student表中的class_id与class表中id列的值相等2.2.3. 加⼊查询条件2.2.4. 精减查询结果字段2.2.5. 可以为表名指定别名2.3联合查询总结：3.内连接3.1 语法3.2 示例3.2.1. 查询"唐三藏"同学的成绩3.2.2.查询所有同学的总成绩，及同学的个⼈信息3.2.3.查询所有同学的总成绩，及同学的个⼈信息4. 外连接4.1.语法4.2.查询没有参加考试的同学信息4.3.查询没有学⽣的班级5. ⾃连接5.1.应⽤场景5.2.显⽰所有"MySQL"成绩⽐"JAVA"成绩⾼的成绩信息5.3 表连接练习5.3.1.显⽰所有"MySQL"成绩⽐"JAVA"成绩⾼的学⽣信息和班级以及成绩信息0.前言前言：为什么要联合查询？什么是联合查询呢?1：在学过范式之后，我们会对一张表的数据，按照范式的标准拆分为多张表，这样便于降低数据的冗杂，但是我们如果查询表的数据，我们又如何一次性查询所有的数据呢？这时候就用到了联合查询2：联合查询就是多个表的组合查询，一次查询涉及两张或则两张以上的表，成为联合查询1.联合查询在MySQL里面的原理参与查询的所有表笛卡尔积，结果集在临时表中实例:创建两张表，一张student 表，一张class表插入数据表如下：参与查询的所有表取笛卡尔积，结果集在临时表中：• 观察哪些记录是有效数据，根据两个表的关联关系过滤掉⽆效数据如果联合查询表的个数越多，表中的数据量越⼤，临时表就会越⼤，所以根据实际情况确定联合查询表的个数2.练习一个完整的联合查询2.1.构造练习案例数据# 课程表insertintocourse(name)values('Java'),('C++'),('MySQL'),('操作系统'),('计
算机⽹络'),('数据结构');# 班级表insertintoclass(name)values('Java001班'),('C++001班'),('前端001班');# 学⽣表insertintostudent(name,sno,age,gender,enroll_date,class_id)values('唐三藏','100001',18,1,'1986-09-01',1),('孙悟空','100002',18,1,'1986-09-01',1),('猪悟能','100003',18,1,'1986-09-01',1),('沙悟净','100004',18,1,'1986-09-01',1),('宋江','200001',18,1,'2000-09-01',2),('武松','200002',18,1,'2000-09-01',2),('李逹','200003',18,1,'2000-09-01',2),('不想毕业','200004',18,1,'2000-09-01',2);# 成绩表insertintoscore(score,student_id,course_id)values(70.5,1,1),(98.5,1,3),(33,1,5),(98,1,6),(60,2,1),(59.5,2,5),(33,3,1),(68,3,3),(99,3,5),(67,4,1),(23,4,3),(56,4,5),(72,4,6),(81,5,1),(37,5,5),(56,6,2),(43,6,4),(79,6,6),(80,7,2),(92,7,6);2.2 案例：⼀个完整的联合查询的过程• 查询学⽣姓名为宋江的详细信息，包括学⽣个⼈信息和班级信息2.2.1. 确定参与查询的表，学⽣表和班级表# 在from后同时写所有参与查询的表，并⽤逗号隔开(取笛卡尔积)select*fromstudent,class;通过观察两张表联合后的结果集中，有些是无效的数据，如何过滤这些无用的数据呢？2.2.2. 确定连接条件，student表中的class_id与class表中id列的值相等连接条件，student表中的class_id与class表中id列的值相等# 在where⼦句中加⼊连接条件mysql&gt;select*fromstudent,classwherestudent.class_id=class.id;这里有个新的知识点，class_id在student表，但是两张表都有id列，不指定表名时MySQL无法分清要使用那张表的id列。这时候用表名.列名就可以区分。2.2.3. 加⼊查询条件上面查询产生了一个错误，因为我们无法知道这个name是指代的是那张表的name。正确的写法如下：2.2.4. 精减查询结果字段selectstudent.id,student.name,student.sno,student.age,student.gender,student.enroll_date,class.namefromstudent,classwherestudent.class_id=class.idandstudent.name='宋江';2.2.5. 可以为表名指定别名2.3联合查询总结：确定几张表参与查询根据表与表之间的关系，确定过滤条件通过WHERE条件对整个结果集进行过滤精减字段，得到想要的结果通过为表起列名，精减SQL语句3.内连接3.1 语法1select字段from表1别名1,表2别名2where连接条件and其他条件;（简写）2select字段from表1别名1[inner]join表2别名2on连接条件where其他条件;（规范写法）3.2 示例3.2.1. 查询"唐三藏"同学的成绩确定几张表：两张学生表和成绩表（取两张表的笛卡尔积）select*fromstudent,score;根据表与表之间的关系，确定过滤条件select*fromstudent,scorewherestudent.id=score.student_id;添加where条件精减查询字段selectstudent.name,score.scorefromstudent,scorewherestudent.id=score.student_idandstudent.name='唐三藏';通过起别名，精减整个sql语句selects.name,sc.scorefromstudent s,score scwheres.id=sc.student_idands.name='唐三藏';用规范的写法写：selects.name,sc.scorefromstudent sjoinscore sconsc.student_id=s.idwheres.name='唐三藏';总结一下：3.2.2.查询所有同学的总成绩，及同学的个⼈信息selects.name,sum(sc.score)fromstudent sjoinscore scons.id=sc.student_idgroupbys.id;这里注意一下这个分组分组之后，列的值在组内是相同的，即使该列不是分组列（没有在group by指定），依然可以写在查询列表中。3.2.3.查询所有同学的总成绩，及同学的个⼈信息1.select*fromstudent sjoinscore scons.id=sc.student_idjoincourse conc.id=sc.course_id;2.select*fromstudent s,score sc,course cwherec.id=sc.course_idands.id=sc.student_id;切记关联查询表不要超过三张，在以后真正工作的时候不要做大表的表关联查询。4. 外连接• 外连接分为左外连接、右外连接和全外连接三种类型，MySQL不⽀持全外连接。• 左外连接：返回左表的所有记录和右表中匹配的记录。如果右表中没有匹配的记录，则结果集中对应字段会显⽰为NULL。• 右外连接：与左外连接相反，返回右表的所有记录和左表中匹配的记录。如果左表中没有匹配的记录，则结果集中对应字段会显⽰为NULL。• 全外连接：结合了左外连接和右外连接的特点，返回左右表中的所有记录。如果某⼀边表中没有匹配的记录，则结果集中对应字段会显⽰为NULL。4.1.语法-- 左外连接，表1完全显⽰select字段名from表名1leftjoin表名2on连接条件;-- 右外连接，表2完全显⽰select字段from表名1rightjoin表名2on连接条件;4.2.查询没有参加考试的同学信息# 左连接以JOIN左边的表为基准，左表显⽰全部记录，右表中没有匹配的记录⽤NULL填充select*fromstudent sleftjoinscore scons.id=sc.student_id;左表中显示所有记录，右边中没有与左表匹配的记录用NULL填充。添加where 条件4.3.查询没有学⽣的班级# 右连接以JOIN右边的表为基准，右表显⽰全部记录，左表中没有匹配的记录⽤NULL填充select*fromstudent srightjoinclass conc.id=s.class_id;添加where条件过滤5. ⾃连接5.1.应⽤场景⾃连接是⾃⼰与⾃⼰取笛卡尔积，可以把⾏转化成列，在查询的时候可以使⽤where条件对结果进⾏过滤，或者说实现⾏与⾏之间的⽐较。在做表连接时为表起不同的别名。# 不为表指定别名mysql&gt;select*fromscore,score;ERROR1066(42000):Notuniquetable/alias:'score'# 指定别名mysql&gt;select*fromscore s1,score s2;5.2.显⽰所有"MySQL"成绩⽐"JAVA"成绩⾼的成绩信息首先分为两步进行，先要找到课程的id，java是1，MySQL是3确定连接条件两个表中的student_id 必须相等确定符合题目的要求要么sc1表中的course_id =1 且 sc2表中的course_id = 3要么sc1表中的course_id =3 且 sc2表中的course_id = 1select*fromscore sc1,score sc2wheresc1.student_id=sc2.student_idandsc1.course_id=1andsc2.course_id=3;加入结果集的过滤条件，分数比较select*fromscore sc1,score sc2wheresc1.student_id=sc2.student_idandsc1.course_id=1andsc2.course_id=3andsc1.score&lt;sc2.score;精减查询结果，用别名表示表头5.3 表连接练习5.3.1.显⽰所有"MySQL"成绩⽐"JAVA"成绩⾼的学⽣信息和班级以及成绩信息http://www.ppmy.cn/news/1540737.html相关文章Redis学习笔记（三）--Redis客户端文章目录 一、命令行客户端二、图形界面客户端1、Redis Desktop Manager2、RedisPlus 三、java代码客户端 本文参考&amp;#xff1a; Redis学习汇总&amp;#xff08;已完结&amp;#xff09; Redis超详细入门教程&amp;#xff08;基础篇&amp;#xff09; Redis视频从入门到高级&amp;#xff0c;redis视频…阅读更多...python实战（一）——iris鸢尾花数据集分类一、任务背景 本文是python实战系列专栏的第一篇文章&amp;#xff0c;我们将从分类开始由浅入深逐步学习如何使用python完成常规的机器学习/深度学习任务。iris数据集是经典的机器学习入门数据集&amp;#xff0c;许多分类任务教程都会以这个数据集作为示例&amp;#xff0c;它的数据量是150条…阅读更多...Java最全面试题-＞Java基础面试题-＞JavaWeb面试题-＞Maven面试题Maven 
下边是我自己整理的面试题&amp;#xff0c;基本已经很全面了&amp;#xff0c;想要的可以私信我&amp;#xff0c;我会不定期去更新思维导图 哪里不会点哪里  
什么是maven&amp;#xff1f; 
Maven是基于POM&amp;#xff08;工程对象模型&amp;#xff09;&amp;#xff0c;通过一小段描述来对项目的代码…阅读更多...Python基础09目录 1.封装(Enclosure) 
2.多态(Polymorphic) 
3.魔术方法(Magic Methods) 
4.重写 
4.1函数重写 
4.2运算符重载 
5.super()函数 
6.迭代器 
7.生成器 
8.处理异常 
9.函数式编程 
9.1函数作为参数 
9.1.1lambda表达式 
9.1.2内置高阶函数 
9.2函数作为返回值 
9.2.1闭包 
9.…阅读更多...【C语言】数据输出格式控制数据的输出格式修饰 常用两种&amp;#xff1a; 
整型中&amp;#xff0c;输出数据左对齐、右对齐、占m位、不足m位前补0。浮点型中&amp;#xff0c;默认通过四舍五入保留小数点后6位&amp;#xff0c;通过参数设置保留小数点后n位。 
#include &lt;stdio.h&gt;
#define PI 3.14159
/*	功能&amp;#x…阅读更多...前端项目中遇到的技术问题1.性能问题 
页面加载过长、图像加载慢。解决方案&amp;#xff1a;代码分割&amp;#xff0c;按照需求加载模块&amp;#xff0c;减少初始的加载量或者使用懒加载、资源压缩、cdn加速 
2.响应式设计&amp;#xff08;移动设备适配&amp;#xff09; 
不同的屏幕尺寸&amp;#xff0c;布局和样式不统一。解决方…阅读更多...依赖标签分类任务Smin值计算（蛋白质功能预测，GO标签）前言 
Smin是在蛋白质功能预测中比较流行的一个指标&amp;#xff0c;具体由来我也不甚清楚&amp;#xff0c;只是在最近复现的几篇论文中反复出现了&amp;#xff0c;所以记录一下。 
计算方法 
&amp;#xff08;图来自于PSPGO论文&amp;#xff09; 其中&amp;#x1d70f;表示阈值&amp;#xff0c;t表示GO标签…阅读更多...【动态规划】【路径问题】下降路经最小和、最小路径和、地下城游戏4. 下降路径最小和 931. 下降路径最小和  算法原理 确定状态表示 dp[i][j] 表示&amp;#xff1a;到达 [i, j] 位置&amp;#xff0c;最小的下降路径  状态转移方程  dp[i][j] 从 [i-1, j-1] 到达 [i, j] &gt; dp[i-1][j-1]  m[i][j]从 [i-1, j] 到达 [i, j] &gt; dp[i-1][j]  m[i][j]从 …阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:28 +0000</pubDate>
    </item>
    <item>
      <title>Redis学习笔记（三）--Redis客户端</title>
      <link>https://www.ppmy.cn/news/1540736.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Redis学习笔记（三）--Redis客户端news/2025/10/31 22:18:26/文章目录一、命令行客户端二、图形界面客户端1、Redis Desktop Manager2、RedisPlus三、java代码客户端本文参考：Redis学习汇总（已完结）Redis超详细入门教程（基础篇）Redis视频从入门到高级，redis视频教程详解，Redis一课在手，别无所求黑马程序员Redis入门到实战教程，深度透析redis底层原理Redis 客户端也像 MySQL 客户端一样有多种类型：命令行客户端、图形界面客户端、Java代码客户端。一、命令行客户端Redis 提供了基本的命令行客户端。打开命令行客户端的命令为 redis-cli。● -h：指定要连接的 Redis 服务器的 IP。● -p：指定要连接的 Redis 的端口号。若连接的是本机Redis，且端口号没有改变，保持默认的 6379，则-h 与-p 选项可以省略不写。二、图形界面客户端1、Redis Desktop ManagerRedis 的图形界面客户端很多，其中较出名的是 Redis Desktop Manager 的客户端。不过，该软件原来是免费软件，从 0.8.8 版本后变为了商业化收费软件。官网为：https://resp.app/（原来是 http://redisdesktop.com）。2、RedisPlusRedisPlus 是为Redis 可视化管理开发的一款开源免费的桌面客户端软件，支持 Windows 、 Linux、Mac 三大系统平台，RedisPlus 提供更加高效、方便、快捷的使用体验，有着更加现 代化的用户界面风格。RedisPlus 的官网地址为 https://gitee.com/MaxBill/RedisPlus。三、java代码客户端所谓 Java 代码客户端就是一套操作 Redis 的 API，其作用就像 JDBC 一样，所以 Java 代码客户端其实就是一个或多个 Jar 包，提供了对Redis 的操作接口。对 Redis 操作的 API 很多，例如 jdbc-redis、jredis 等，但最常用也是最有名的是 Jedis。http://www.ppmy.cn/news/1540736.html相关文章python实战（一）——iris鸢尾花数据集分类一、任务背景 本文是python实战系列专栏的第一篇文章&amp;#xff0c;我们将从分类开始由浅入深逐步学习如何使用python完成常规的机器学习/深度学习任务。iris数据集是经典的机器学习入门数据集&amp;#xff0c;许多分类任务教程都会以这个数据集作为示例&amp;#xff0c;它的数据量是150条…阅读更多...Java最全面试题-＞Java基础面试题-＞JavaWeb面试题-＞Maven面试题Maven 
下边是我自己整理的面试题&amp;#xff0c;基本已经很全面了&amp;#xff0c;想要的可以私信我&amp;#xff0c;我会不定期去更新思维导图 哪里不会点哪里  
什么是maven&amp;#xff1f; 
Maven是基于POM&amp;#xff08;工程对象模型&amp;#xff09;&amp;#xff0c;通过一小段描述来对项目的代码…阅读更多...Python基础09目录 1.封装(Enclosure) 
2.多态(Polymorphic) 
3.魔术方法(Magic Methods) 
4.重写 
4.1函数重写 
4.2运算符重载 
5.super()函数 
6.迭代器 
7.生成器 
8.处理异常 
9.函数式编程 
9.1函数作为参数 
9.1.1lambda表达式 
9.1.2内置高阶函数 
9.2函数作为返回值 
9.2.1闭包 
9.…阅读更多...【C语言】数据输出格式控制数据的输出格式修饰 常用两种&amp;#xff1a; 
整型中&amp;#xff0c;输出数据左对齐、右对齐、占m位、不足m位前补0。浮点型中&amp;#xff0c;默认通过四舍五入保留小数点后6位&amp;#xff0c;通过参数设置保留小数点后n位。 
#include &lt;stdio.h&gt;
#define PI 3.14159
/*	功能&amp;#x…阅读更多...前端项目中遇到的技术问题1.性能问题 
页面加载过长、图像加载慢。解决方案&amp;#xff1a;代码分割&amp;#xff0c;按照需求加载模块&amp;#xff0c;减少初始的加载量或者使用懒加载、资源压缩、cdn加速 
2.响应式设计&amp;#xff08;移动设备适配&amp;#xff09; 
不同的屏幕尺寸&amp;#xff0c;布局和样式不统一。解决方…阅读更多...依赖标签分类任务Smin值计算（蛋白质功能预测，GO标签）前言 
Smin是在蛋白质功能预测中比较流行的一个指标&amp;#xff0c;具体由来我也不甚清楚&amp;#xff0c;只是在最近复现的几篇论文中反复出现了&amp;#xff0c;所以记录一下。 
计算方法 
&amp;#xff08;图来自于PSPGO论文&amp;#xff09; 其中&amp;#x1d70f;表示阈值&amp;#xff0c;t表示GO标签…阅读更多...【动态规划】【路径问题】下降路经最小和、最小路径和、地下城游戏4. 下降路径最小和 931. 下降路径最小和  算法原理 确定状态表示 dp[i][j] 表示&amp;#xff1a;到达 [i, j] 位置&amp;#xff0c;最小的下降路径  状态转移方程  dp[i][j] 从 [i-1, j-1] 到达 [i, j] &gt; dp[i-1][j-1]  m[i][j]从 [i-1, j] 到达 [i, j] &gt; dp[i-1][j]  m[i][j]从 …阅读更多...RabbitMQ service is already present - only updating service parametersWindows下卸载RabbitMQ之后，然后重新注册RabbitMQ服务的时候，报错以下信息： D:\software\rabbitmq-server-4.0.2\rabbitmq_server-4.0.2\sbin&gt;D:\software\rabbitmq-server-4.0.2\rabbitmq_server-4.0.2\sbin\rabbitmq-service.bat install RabbitMQ service is already …阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:27 +0000</pubDate>
    </item>
    <item>
      <title>python实战（一）——iris鸢尾花数据集分类</title>
      <link>https://www.ppmy.cn/news/1540735.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维python实战（一）——iris鸢尾花数据集分类news/2025/10/31 22:18:24/一、任务背景本文是python实战系列专栏的第一篇文章，我们将从分类开始由浅入深逐步学习如何使用python完成常规的机器学习/深度学习任务。iris数据集是经典的机器学习入门数据集，许多分类任务教程都会以这个数据集作为示例，它的数据量是150条，由三种不同品种的鸢尾花数据构成，每种鸢尾花各50条数据。显然，这是一个多分类（三分类）任务，我们将从头开始进行探索性数据分析及机器学习建模。二、机器学习建模流程1、探索性数据分析探索性数据分析是建模的第一步，尤其是机器学习任务。尽管这是一个很标准、很干净的数据集，我们还是按照惯例对它进行基础的分析（特征列、空值、各列取值范围等），以对该数据集有个初步的了解和认知。（1）数据集读取由于iris数据集实在太经典，所以很多python库都内置了该数据集的调用代码，例如在scikit-learn中可以这样调用：from sklearn import datasets# 加载iris数据集
iris = datasets.load_iris()
# 获取特征数据
iris_X = iris.data
# 获取目标（类别）数据
iris_y = iris.target但是实际应用中，我们更多的是读取本地文件，所以这里笔者从Kaggle下载了iris数据文件并本地读取：# 读取csv文件数据
path = './data/iris.csv'
df = pd.read_csv(path)
print('数据量：', len(df))
print(df.head())结果如下，可见该数据集总共有150行，6列，其中一列是Id，在我们这次任务中作用不大，后面会去掉：根据官方的介绍，各列的含义如下：SepalLengthCm：花萼长度，即花萼的最长部分，单位是厘米。SepalWidthCm：花萼宽度，即花萼的最宽部分，单位是厘米。PetalLengthCm：花瓣长度，即花瓣的最长部分，单位是厘米。PetalWidth Cm：花瓣宽度，即花瓣的最宽部分，单位是厘米。而标签列Species中的类别有：Iris setosa：山鸢尾Iris virginica：变色鸢尾Iris versicolor：维吉尼亚鸢尾（2）查看各列中是否有空值去空值是数据处理阶段的重要步骤，存在空值的数据会导致后面的特征工程或者建模报错。下面的代码逐列统计是否有空值：print('空值数量统计：')
print(df.isnull().sum())结果如下，每一列都很干净：（3）简要统计各列的数据数值分布统计各列的数据分布主要目的是看看每一列各自以及相互之间的数据差异。如果某一列的数据取值之间非常接近（例如一个极端情况是整一列的取值都是1），那么可能这一列对于建模来说是没有意义的，可以去掉。同时，分位数也能帮我们判断当前列数据中是否存在离群点，可以考虑去掉离群点。此外，如果列和列之间取值范围差得较大（比如一列的取值范围是0-1，另一列是100-200）就需要进行归一化/标准化操作，量纲差异太大会导致模型学习过程中对特征重要性的判别出现误差。这里我们选择不对原始数据进行归一化或者标准化，一是各列之间的量纲接近，二是我们后面用的是决策树模型建模，决策树不需要归一化/标准化操作。print(df.describe())（4）检查标签列是否符合建模要求从上面的图中我们可以看到，标签列是文本类型，无法进行建模。因此需要将标签转换成模型可理解的数值类型（转为数值类型才可以计算损失）。# 定义各类别对应的索引号
label_index = {'Iris-setosa':0, 'Iris-versicolor':1, 'Iris-virginica':2}
# apply方法应用到标签列中的每一个标签
df['Species'] = df['Species'].apply(lambda x: label_index[x])2、数据可视化我们可以使用sklearn提供的PCA降维方法将原始数据降维成2维（也可以进行3维可视化），并且可视化出来。# 分出特征列和标签列
X = df[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']].values.tolist()
y = df['Species'].tolist()
# 降维
pca = PCA(n_components=2)
pca_data = pca.fit_transform(X)
# 可视化
plt.scatter(pca_data[:, 0], pca_data[:, 1], c=y)
plt.show()可视化结果如下图，虽然可视化的过程没有标出来哪个颜色对应哪一类的鸢尾花，但我们可以看到某一类鸢尾花很轻易就可以与另外两类区分开来，而距离较近的两类似乎数据也是线性可分的，那么我们可以考虑用一个简单的模型完成这个任务。3、数据划分了解了数据分布之后，我们可以开始进行数据的划分了，即划分训练集和测试集。其中，训练集用于训练模型，测试集用于测试模型的效果（测试集数据应当是在模型的训练阶段是未出现过的，否则就存在模型作弊的问题了）。X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, stratify=y, random_state=2024)
print('训练集数据量：', len(X_train))
print('测试集数据量：', len(X_test))这里讲一下几个比较重要的参数：stratify：控制训练集和测试集的标签类别比例，默认是无，但是我们一般会根据y进行划分。假如我们有100个数据，70个属于A类，30个属于B类，如果不指定该参数且test_size恰好是0.3，那么就有可能出现我们训练集中的70个都是A类数据，这样子模型只学了A的数据规律，使用测试集的30个数据进行测试的时候效果就很糟糕了。而如果指定了该参数，那么算法会确保训练集中各类别的比例和测试集中的各类别比例一致（如果算出来的数量不是整数会自动取整），假设这个例子我们指定的stratify是y，那么训练集中A和B类别的比例和测试集一致，都是7：3，则训练集中A类有49个，B类有21个，测试集中A类有21个，B类有9个，保持了数据集划分的公平性。test_size：指定训练集和测试集划分过程中的比例，用0-1开区间之间的小数就可以了。random_state：指定随机数，以保证模型结果可复现。打印数据划分结果如下：4、模型训练这里我们使用一个决策树分类器作为模型，使用训练数据迭代训练决策树模型并输出模型的各项性能指标。dt = DecisionTreeClassifier(criterion='gini', splitter='best', max_depth=5, class_weight='balanced', random_state=2024)
dt.fit(X_train, y_train)
y_pred = dt.predict(X_test)
# 多分类问题需要指定average，其中：
# micro计算全局精确度：通过将所有类别的真正例和假正例汇总，然后计算整体的精确度。
# macro计算未加权平均精确度：简单地计算每个类别的精确度，然后求平均值，不考虑每个类别的样本数量。
# weighted计算加权平均精确度：计算每个类别的精确度，然后根据每个类别的样本数量进行加权平均。
print('Precision:', precision_score(y_test, y_pred, average='macro'))
print('Recall:', recall_score(y_test, y_pred, average='macro'))
print('F1:', f1_score(y_test, y_pred, average='macro'))这里有几个模型参数需要注意：criterion：可选的有“gini”、“entropy”、“log_loss”，用于指定构建树时用于分裂节点的准则，默认是”gini”，即基尼不纯度。当使用gini作为参数的值时，决策树在每个节点的分裂都旨在最小化基尼不纯度；而使用entropy时，决策树在每个节点的分裂都旨在最大化信息增益，这意味着最小化熵。splitter：可选的有“best”、“random”，用于指定如何选择分裂节点的方法，默认是”best”。当设置为best时，决策树会考虑所有可能的特征和所有可能的分割点，并选择能够最好地减少criterion取值的最佳分裂点。max_depth：指定树的深度，默认是不限制，也就是树可以无限生长直到满足损失要求，但是对于一些模型规模有限制的场景建议限制树的深度在一定范围，否则模型可能非常大。class_weight：默认为无，可以输入字典（键为类别，值为当前类别的样本数）也可以直接写“balanced”。建议直接指定“balanced”，这样模型会自动为不同类别的样本赋予权重。这个参数在样本类别不平衡的时候非常重要，假设一个二分类任务中样本A有98个，B有2个，不设置权重模型可能只学A的特征，从而忽略B类（因为即便B类预测错误，总体数据上仍然能够有一个很好的指标结果），但设置class_weight后，模型会认为A和B同样重要，从而避免样本类别不平衡造成的模型问题。random_state：指定随机数以便复现模型结果。以下是训练后的模型在测试集上的表现，由于数据集较为简单，模型的指标效果不错。当然，如果进行更细致的参数调优，模型可以取得更好的效果，这里就不演示了。三、完整代码import pandas as pd
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import precision_score, recall_score, f1_scorepath = './data/iris.csv'
df = pd.read_csv(path)
print('数据量：', len(df))
print(df.head())
print('空值数量统计：')
print(df.isnull().sum())
print(df.describe())
df.drop(['Id'], axis=1)
label_index = {'Iris-setosa':0, 'Iris-versicolor':1, 'Iris-virginica':2}
df['Species'] = df['Species'].apply(lambda x: label_index[x])X = df[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']].values.tolist()
y = df['Species'].tolist()
pca = PCA(n_components=2)
pca_data = pca.fit_transform(X)
plt.scatter(pca_data[:, 0], pca_data[:, 1], c=y)
plt.show()X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, stratify=y, random_state=2024)
print('训练集数据量：', len(X_train))
print('测试集数据量：', len(X_test))
dt = DecisionTreeClassifier(criterion='gini', splitter='best', max_depth=5, class_weight='balanced', random_state=2024)
dt.fit(X_train, y_train)
y_pred = dt.predict(X_test)
print('Precision:', precision_score(y_test, y_pred, average='macro'))
print('Recall:', recall_score(y_test, y_pred, average='macro'))
print('F1:', f1_score(y_test, y_pred, average='macro'))四、总结本文使用决策树模型对iris鸢尾花数据集进行了分类建模，由于数据量小、数据集简单且各特征含义明确，本文直接使用所有特征进行建模。实际的建模任务中，特征选择也是重要的一步，我们需要选择对建模真正有用的特征（特征选择），而不是所有特征都用于建模（比如一份数据可能有100多个特征列，但实际对建模有用的可能只有5、6个特征）。后面的博文将会陆续介绍这些技巧，并展示如何在更复杂的生产数据中使用这些技巧进行建模。http://www.ppmy.cn/news/1540735.html相关文章Java最全面试题-＞Java基础面试题-＞JavaWeb面试题-＞Maven面试题Maven 
下边是我自己整理的面试题&amp;#xff0c;基本已经很全面了&amp;#xff0c;想要的可以私信我&amp;#xff0c;我会不定期去更新思维导图 哪里不会点哪里  
什么是maven&amp;#xff1f; 
Maven是基于POM&amp;#xff08;工程对象模型&amp;#xff09;&amp;#xff0c;通过一小段描述来对项目的代码…阅读更多...Python基础09目录 1.封装(Enclosure) 
2.多态(Polymorphic) 
3.魔术方法(Magic Methods) 
4.重写 
4.1函数重写 
4.2运算符重载 
5.super()函数 
6.迭代器 
7.生成器 
8.处理异常 
9.函数式编程 
9.1函数作为参数 
9.1.1lambda表达式 
9.1.2内置高阶函数 
9.2函数作为返回值 
9.2.1闭包 
9.…阅读更多...【C语言】数据输出格式控制数据的输出格式修饰 常用两种&amp;#xff1a; 
整型中&amp;#xff0c;输出数据左对齐、右对齐、占m位、不足m位前补0。浮点型中&amp;#xff0c;默认通过四舍五入保留小数点后6位&amp;#xff0c;通过参数设置保留小数点后n位。 
#include &lt;stdio.h&gt;
#define PI 3.14159
/*	功能&amp;#x…阅读更多...前端项目中遇到的技术问题1.性能问题 
页面加载过长、图像加载慢。解决方案&amp;#xff1a;代码分割&amp;#xff0c;按照需求加载模块&amp;#xff0c;减少初始的加载量或者使用懒加载、资源压缩、cdn加速 
2.响应式设计&amp;#xff08;移动设备适配&amp;#xff09; 
不同的屏幕尺寸&amp;#xff0c;布局和样式不统一。解决方…阅读更多...依赖标签分类任务Smin值计算（蛋白质功能预测，GO标签）前言 
Smin是在蛋白质功能预测中比较流行的一个指标&amp;#xff0c;具体由来我也不甚清楚&amp;#xff0c;只是在最近复现的几篇论文中反复出现了&amp;#xff0c;所以记录一下。 
计算方法 
&amp;#xff08;图来自于PSPGO论文&amp;#xff09; 其中&amp;#x1d70f;表示阈值&amp;#xff0c;t表示GO标签…阅读更多...【动态规划】【路径问题】下降路经最小和、最小路径和、地下城游戏4. 下降路径最小和 931. 下降路径最小和  算法原理 确定状态表示 dp[i][j] 表示&amp;#xff1a;到达 [i, j] 位置&amp;#xff0c;最小的下降路径  状态转移方程  dp[i][j] 从 [i-1, j-1] 到达 [i, j] &gt; dp[i-1][j-1]  m[i][j]从 [i-1, j] 到达 [i, j] &gt; dp[i-1][j]  m[i][j]从 …阅读更多...RabbitMQ service is already present - only updating service parametersWindows下卸载RabbitMQ之后，然后重新注册RabbitMQ服务的时候，报错以下信息： D:\software\rabbitmq-server-4.0.2\rabbitmq_server-4.0.2\sbin&gt;D:\software\rabbitmq-server-4.0.2\rabbitmq_server-4.0.2\sbin\rabbitmq-service.bat install RabbitMQ service is already …阅读更多...csp普及组算法集训--DfsDFS是一种经典的搜索算法&amp;#xff0c;也是检测有没有编程天赋的试金石。 
DFS&amp;#xff1a;搜索与回溯 
题1&amp;#xff1a;自然数的拆分 
//自然数的拆分 
#include&lt;bits/stdc.h&gt;
using namespace std;
int n,ans[101];
void dfs(int sum,int dp){if(sum&gt;n){return;//不可…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:24 +0000</pubDate>
    </item>
    <item>
      <title>Java最全面试题-＞Java基础面试题-＞JavaWeb面试题-＞Maven面试题</title>
      <link>https://www.ppmy.cn/news/1540734.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Java最全面试题-＞Java基础面试题-＞JavaWeb面试题-＞Maven面试题news/2025/10/31 22:18:23/Maven下边是我自己整理的面试题，基本已经很全面了，想要的可以私信我，我会不定期去更新思维导图哪里不会点哪里什么是maven？Maven是基于POM（工程对象模型），通过一小段描述来对项目的代码、报告、文件进管理的工具。Maven是一个跨平台的项目管理工具，它是使用java开发的，它要依赖于jdk1.6及以上Maven主要有两大功能：管理依赖、项目构建。（依赖指的是jar包）maven优缺点？优点：简化了项目构建，依赖管理：易于上手便于与持续集成工具（Jenkins）整合便于项目升级，无论是项目本身升级还是项目使用的依赖升级。有助于多模块项目的开发，一个模块开发好后，发布到仓库，依赖该模块时可以直接从仓库更新，而不用自己去编译。maven有很多插件，便于功能扩展，比如生产站点，自动发布版本等缺点：maven是一个庞大的构建系统，学习难度大。maven采用约定优于配置的策略（convention over configuration），虽然上手容易，但是一旦出了问题，难于调试。中国的网络环境差，很多repository无法访问，比如google code， jboss 仓库无法访问等。maven常见的依赖范围有哪些?compile：编译依赖，默认的依赖方式，在编译（编译项目和编译测试用例），运行测试用例，运行（项目实际运行）三个阶段都有效，典型地有spring-core等jar。test：测试依赖，只在编译测试用例和运行测试用例有效，典型地有JUnit。provided：对于编译和测试有效，不会打包进发布包中，典型的例子为servlet-api,一般的web工程运行时都使用容器的servlet-api。runtime：只在运行测试用例和实际运行时有效，典型地是jdbc驱动jar包。system：不从maven仓库获取该jar,而是通过systemPath指定该jar的路径。import：用于一个dependencyManagement对另一个dependencyManagement的继承。maven 坐标的含义?groupId ：定义当前 Maven 项目隶属的实际项目。artifactId ：该元素定义当前实际项目中的一个 Maven 项目(模块)。推荐的做法是使用实际项目名称作为 artifactId 的前缀。比如上例中的 junit ，junit 就是实际的项目名称，方便而且直观。在默认情况下，Maven 生成的构件，会以 artifactId 作为文件头。例如 junit-3.8.1.jar ，使用实际项目名称作为前缀，就能方便的从本地仓库找到某个项目的构件。version ：该元素定义了使用构件的版本。packaging ：定义 Maven 项目打包的方式，使用构件的什么包。打包方式通常与所生成构件的文件扩展名对应。classifier ：该元素用来帮助定义构建输出的一些附件。附属构件与主构件对应。maven 常用命令?mvn archetype：create ：创建 Maven 项目。mvn compile ：编译源代码。mvn deploy ：发布项目。mvn test-compile ：编译测试源代码。mvn test ：运行应用程序中的单元测试。mvn site ：生成项目相关信息的网站。mvn clean ：清除项目目录中的生成结果。mvn package ：根据项目生成的 jar/war 等。mvn install ：在本地 Repository 中安装 jar 。mvn clean package -Dmaven.test.skip=true ：清除以前的包后重新打包，跳过测试类。maven构建的过程？清理 -&gt;编译 -&gt;测试 -&gt;报告 -&gt;打包 -&gt;部署maven的生命周期？Maven有三套相互独立的生命周期，分别是 Clean、Default 和 Site。每个生命周期包含一些阶段，阶段是有顺序的，后面的阶段依赖于前面的阶段。Clean 生命周期：清理项目：pre-clean：执行清理前需要完成的工作。clean：清理上一次构建生成的文件。post-clean：执行清理后需要完成的工作Default 生命周期：构建项目：validate：验证工程是否正确，所有需要的资源是否可用。compile：编译项目的源代码。test：使用合适的单元测试框架来测试已编译的源代码。这些测试不需要已打包和布署。package：把已编译的代码打包成可发布的格式，比如 jar、war 等。integration-test：如有需要，将包处理和发布到一个能够进行集成测试的环境。verify：运行所有检查，验证包是否有效且达到质量标准。install：把包安装到maven本地仓库，可以被其他工程作为依赖来使用。deploy：在集成或者发布环境下执行，将最终版本的包拷贝到远程的repository，使得其他的开发者或者工程可以共享。Site 生命周期：建立和发布项目站点：pre-site：生成项目站点之前需要完成的工作site：生成项目站点文档post-site：生成项目站点之后需要完成的工作site-deploy：将项目站点发布到服务器各个生命周期相互独立，一个生命周期的阶段前后依赖。mvn clean ：调用 Clean 生命周期的 clean 阶段，实际执行 pre-clean 和 clean 阶段mvn test ：调用 Default 生命周期的 test 阶段，实际执行 test 以及之前所有阶段mvn clean install ：调用 Clean 生命周期的 clean 阶段和 Default 生命周期 的 install 阶段，实际执行 pre-clean 和 clean ，install 以及之前所有阶段。使用“mvn clean package”命令进行项目打包，该命令具体做了什么？使用清理插件：maven-clean-plugin执行清理删除已有target目录；使用资源插件：maven-resources-plugin执行资源文件的处理；使用编译插件：maven-compiler-plugin编译所有源文件生成class文件至target\classes目录下；使用资源插件：maven-resources-plugin执行测试资源文件的处理；使用编译插件：maven-compiler-plugin编译测试目录下的所有源代码；使用插件：maven-surefire-plugin运行测试用例；如何解决冲突？第一步，要找到 Maven 加载的到时是什么版本的 jar 包，通过mvn dependency:tree 查看依赖树，或者使用 IDEA Maven Helper 插件。第二步，通过 Maven 的依赖原则来调整坐标在 pom 文件的申明顺序是最好的办法，或者使用将冲突中不想要的 jar 引入的 jar删掉。maven依赖原则？依赖路径最短优先原则项目依赖了两个jar包，其中A-B-C-D ， A-D。由于第二条路径最短，所以项目使用的是第二个D。pom文件中申明顺序优先项目依赖了两个jar包，A-B-D ，A-C-D。maven会根据加载顺序。如果先申明了B，在申明了C，那么最后依赖就用A-C-D。覆写优先子pom内声明的优先于父pom中的依赖。说一下maven仓库？Maven仓库有2种本地仓库远程仓库Maven 会先搜索本地仓库（repository），发现本地没有然后从远程仓库（中央仓库）获取。私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，私服代理广域网上的远程仓库，供局域网内的 Maven 用户使用。当 Maven 需要下载构件的时候，它从私服请求，如果私服上不存在该构件，则从外部的远程仓库下载，缓存在私服上之后，再为 Maven 的下载请求提供服务。我们还可以把一些无法从外部仓库下载到的构件上传到私服上。http://www.ppmy.cn/news/1540734.html相关文章Python基础09目录 1.封装(Enclosure) 
2.多态(Polymorphic) 
3.魔术方法(Magic Methods) 
4.重写 
4.1函数重写 
4.2运算符重载 
5.super()函数 
6.迭代器 
7.生成器 
8.处理异常 
9.函数式编程 
9.1函数作为参数 
9.1.1lambda表达式 
9.1.2内置高阶函数 
9.2函数作为返回值 
9.2.1闭包 
9.…阅读更多...【C语言】数据输出格式控制数据的输出格式修饰 常用两种&amp;#xff1a; 
整型中&amp;#xff0c;输出数据左对齐、右对齐、占m位、不足m位前补0。浮点型中&amp;#xff0c;默认通过四舍五入保留小数点后6位&amp;#xff0c;通过参数设置保留小数点后n位。 
#include &lt;stdio.h&gt;
#define PI 3.14159
/*	功能&amp;#x…阅读更多...前端项目中遇到的技术问题1.性能问题 
页面加载过长、图像加载慢。解决方案&amp;#xff1a;代码分割&amp;#xff0c;按照需求加载模块&amp;#xff0c;减少初始的加载量或者使用懒加载、资源压缩、cdn加速 
2.响应式设计&amp;#xff08;移动设备适配&amp;#xff09; 
不同的屏幕尺寸&amp;#xff0c;布局和样式不统一。解决方…阅读更多...依赖标签分类任务Smin值计算（蛋白质功能预测，GO标签）前言 
Smin是在蛋白质功能预测中比较流行的一个指标&amp;#xff0c;具体由来我也不甚清楚&amp;#xff0c;只是在最近复现的几篇论文中反复出现了&amp;#xff0c;所以记录一下。 
计算方法 
&amp;#xff08;图来自于PSPGO论文&amp;#xff09; 其中&amp;#x1d70f;表示阈值&amp;#xff0c;t表示GO标签…阅读更多...【动态规划】【路径问题】下降路经最小和、最小路径和、地下城游戏4. 下降路径最小和 931. 下降路径最小和  算法原理 确定状态表示 dp[i][j] 表示&amp;#xff1a;到达 [i, j] 位置&amp;#xff0c;最小的下降路径  状态转移方程  dp[i][j] 从 [i-1, j-1] 到达 [i, j] &gt; dp[i-1][j-1]  m[i][j]从 [i-1, j] 到达 [i, j] &gt; dp[i-1][j]  m[i][j]从 …阅读更多...RabbitMQ service is already present - only updating service parametersWindows下卸载RabbitMQ之后，然后重新注册RabbitMQ服务的时候，报错以下信息： D:\software\rabbitmq-server-4.0.2\rabbitmq_server-4.0.2\sbin&gt;D:\software\rabbitmq-server-4.0.2\rabbitmq_server-4.0.2\sbin\rabbitmq-service.bat install RabbitMQ service is already …阅读更多...csp普及组算法集训--DfsDFS是一种经典的搜索算法&amp;#xff0c;也是检测有没有编程天赋的试金石。 
DFS&amp;#xff1a;搜索与回溯 
题1&amp;#xff1a;自然数的拆分 
//自然数的拆分 
#include&lt;bits/stdc.h&gt;
using namespace std;
int n,ans[101];
void dfs(int sum,int dp){if(sum&gt;n){return;//不可…阅读更多...初识git · 远程操作目录 
前言&amp;#xff1a; 
理解分布式版本控制系统 
远程仓库 
仓库操作 
克隆仓库 
推送和抓取 
特殊文件 
取别名 
标签管理 前言&amp;#xff1a; 
在基本操作&amp;#xff0c;分支管理这几个部分&amp;#xff0c;我们都会在本地仓库操作了&amp;#xff0c;但是目前还没有办法将自己的代码远程…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:23 +0000</pubDate>
    </item>
    <item>
      <title>Python基础09</title>
      <link>https://www.ppmy.cn/news/1540733.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Python基础09news/2025/10/31 22:18:21/目录1.封装(Enclosure)2.多态(Polymorphic)3.魔术方法(Magic Methods)4.重写4.1函数重写4.2运算符重载5.super()函数6.迭代器7.生成器8.处理异常9.函数式编程9.1函数作为参数9.1.1lambda表达式9.1.2内置高阶函数9.2函数作为返回值9.2.1闭包9.2.2装饰器1.封装(Enclosure)在class外部不能访问，也不能在子类中访问作用：(1)指隐藏类的实现细节(2)一定程度上，保证class内部数据安全私有属性：__变量名私有方法：__方法名()运行结果：class Girl():def __init__(self, name, gender, age):self.name = nameself.gender = genderself.__age = agedef __privateFun(self):print("私有方法")girl1 = Girl("柳如烟", "女", 18)
print(girl1.name)# girl1.privateFun()#不可访问
# print(girl1.age)#不可访问class Child(Girl):def __init__(self, name, gender, age):Girl.__init__(self, name, gender, age)child1 = Child("小绿","女",12)
# print(child1.age)#不可访问
# child1.privateFun()#不可访问2.多态(Polymorphic)在有继承/派生关系的类中，调用基类对象的方法,实际能调用子类的覆盖方法的现象叫多态。class Animal():def __init__(self, name):self.name = name@classmethoddef action(cls):print("吃")class Dog(Animal):def __init__(self, name):Animal.__init__(self, name)@classmethoddef action(cls):print("跑")class Bird(Animal):def __init__(self, name):Animal.__init__(self, name)@classmethoddef action(cls):print("吃")dog1=Dog("狗")
dog1.action()
bird1=Bird("鸟")
bird1.action()3.魔术方法(Magic Methods)在class内部，以双下划线开头和结尾的方法允许自定义类的行为，以便与内置Python功能交互。__init__(self, ...)初始化对象，通常用于设置对象的属性。__str__(self)定义对象的字符串表示形式，可通过str(object)或print(object)调用。例如，您可以返回一个字符串，描述对象的属性。__repr__(self)定义对象的“官方”字符串表示形式，通常用于调试。可通过repr(object)调用。__len__(self)定义对象的长度，可通过len(object)调用。通常在自定义容器类中使用。__getitem__(self, key):定义对象的索引操作，使对象可被像列表或字典一样索引。例如，object[key]。__setitem__(self, key, value):定义对象的赋值操作，使对象可像列表或字典一样赋值。例如，object[key] = value。__delitem__(self, key):定义对象的删除操作，使对象可像列表或字典一样删除元素。例如，del object[key]。__iter__(self):定义迭代器，使对象可迭代，可用于for循环。__next__(self)定义迭代器的下一个元素，通常与__iter__一起使用。__add__(self, other)定义对象相加的行为，使对象可以使用+运算符相加。例如，object1 + object2。__sub__(self, other)定义对象相减的行为，使对象可以使用-运算符相减。__eq__(self, other):定义对象相等性的行为，使对象可以使用==运算符比较。__lt__(self, other):定义对象小于其他对象的行为，使对象可以使用&lt;运算符比较。__gt__(self, other):定义对象大于其他对象的行为，使对象可以使用&gt;运算符比较。__call__(self, other)是一个特殊的方法（也称为“魔法方法”），它允许一个对象像函数一样被调用。4.重写可以在子类重写父类的方法以满足使用者需求4.1函数重写让自定义类创建的实例像内建对象一样进行内建函数操作def __str__(self):return "x = %d , y = %d" % (self.x, self.y)4.2运算符重载让自定义的类生成的对象(实例)能够使用运算符进行操作对自定义对象将运算符赋予新的运算规则def __add__(self, another):return self.x + another.x, self.y + another.y方法名运算符和表达式说明__add__(self, rhs)self + rhs加法__sub__(self, rhs)self - rhs减法__mul__(self, rhs)self * rhs乘法__truediv__(self, rhs)self / rhs除法__floordiv__(self, rhs)self // rhs地板除__mod__(self, rhs)self % rhs取模(求余)__pow__(self, rhs)self ** rhs幂5.super()函数用于调用父类(超类)的一个方法。super()函数解决多继承问题，不用指定父类（在有多个父类的情况下，较简便）直接用类名调用父类方法在使用单继承的时候没问题，但是如果使用多继承，会涉及到查找顺序（MRO）、重复调用（钻石继承）等种种问题。super().调用父类中已被覆盖的方法super(Child, obj).用子类对象调用父类已被覆盖的方法class A():def process(self):print("A process")class B(A):def process(self):print("B process")super().process()class C(A):def process(self):print("C process")super().process()class D(B, C):def process(self):print("D process")super().process()d1=D()
d1.process()6.迭代器用于访问可迭代对象的工具iter(iterable)iterable必须是能提供迭代器的对象lt = [1, 2, 3]
iter1 = iter(lt)while True:try:print(iter1)except:print("迭代结束")breaknext()获取迭代对象的下一元素7.生成器生成器是在程序运行时生成数据，与容器不同，它通常不会在内存中保留大量的数据，而是生成一个用一个。以关键字：yield修饰的变量特性： 与return相似之处：获取一个元素作为返回值传给函数 与return相异之处：将返回值传给函数后不会终止函数运行而是暂停，继续获取下一个元素，直到不能获取元素。def myRange(stop):i = 0while i &lt; stop:yield ii += 1for x in myRange(10):print(x)8.处理异常尝试捕获异常，得到异常通知，将程序由异常状态变为正常状态try：语句except Except as e：语句.....except：语句else：语句finally：语句except 子句可以有 1个或多个except: 不给错误类型，可以匹配全部的错误类型else 子句里的语句会在 没有错误发生时执行，当处于异常时不执行finally 子句里的语句，无论何时都执行9.函数式编程函数可以赋值给，变量存储的是函数的地址函数可作为参数传入函数9.1函数作为参数9.1.1lambda表达式一种匿名函数，参数传递时语法简洁lambda [变量列表]：表达式element=max(Beauties2.beauty_list,key=lambda x:x.age)
print(element.name,element.charm,element.age)9.1.2内置高阶函数map(函数，可迭代对象)对可迭代对象的每个元素执行函数，filter(函数，可迭代对象)根据函数筛选可迭代元素，返回新的迭代对象sorted(可迭代对象，key=函数，reverse=True)返回排序后的后果，reverse默认值是：Falsemax(可迭代对象，key=函数)返回不可迭代的元素，根据函数获取可迭代对象的最大值。min(可迭代对象，key=函数)返回不可迭代的元素，根据函数获取可迭代对象的最小值。9.2函数作为返回值9.2.1闭包闭包：调用外部函数的变量的内嵌函数闭包的应用逻辑连续装饰器打基础特点：外部函数执行过后，栈帧不释放，等待内部函数的使用# 闭包
def earn_monry(money):print("赚到：", money)def pay(action, price):nonlocal moneymoney -= priceprint(f"{action}花费：", price)print("剩余：", money)return paywork=earn_monry(100)
work("吃饭",15)
work("买饮料",4)闭包的三个条件：①必有内嵌函数②内嵌函数必引用外部函数的变量③内嵌函数必作为外部函数的返回值9.2.2装饰器装饰器：包装另一个函数的函数或类作用：在不修改被装饰函数的代码，不改变被装饰函数的调用方式的情况下，改变其功能。def 装饰器函数名(fun):语句(包含新的函数定义)return 新的函数对象@装饰器函数名def 被装饰器函数名(参数列表)：语句基本装饰器"""
装饰器：打印执行时间
被装饰器函数：统计值
"""
import timedef Decorator(func):def wrapper():start_time = time.time()result = func()end_time = time.time()print("执行时间：", end_time - start_time)return resultreturn wrapper@Decorator
def Decoratored():sum_value = 0for i in range(100000000):sum_value += 1print(sum_value)return sum_valueDecoratored()带参数的装饰器def repeat(num):def decorator(func):def wrapper(*args, **kwargs):for _ in range(num):func(*args, **kwargs)return wrapperreturn decorator@repeat(3)  # 应用装饰器，重复执行下面的函数3次
def greet(name):print(f"Hello, {name}!")greet("Alice")  # 调用被装饰的函数装饰器链def uppercase(func):def wrapper(*args, **kwargs):result = func(*args, **kwargs)return result.upper()return wrapperdef exclamation(func):def wrapper(*args, **kwargs):result = func(*args, **kwargs)return result + "!"return wrapper@exclamation
@uppercase
def say_hello(name):return f"Hello, {name}"greeting = say_hello("Bob")
print(greeting)  # 输出 "HELLO, BOB!"注意： 当多个装饰器装饰一个函数时，离被装饰的函数越近者越先执行。类装饰器class MyDecorator:def __init__(self, func):self.func = funcdef __call__(self, *args, **kwargs):print("Something is happening before the function is called.")result = self.func(*args, **kwargs)print("Something is happening after the function is called.")return result@MyDecorator  # 应用类装饰器
def say_hello(name):print(f"Hello, {name}!")say_hello("Charlie")  # 调用被装饰的函数http://www.ppmy.cn/news/1540733.html相关文章【C语言】数据输出格式控制数据的输出格式修饰 常用两种&amp;#xff1a; 
整型中&amp;#xff0c;输出数据左对齐、右对齐、占m位、不足m位前补0。浮点型中&amp;#xff0c;默认通过四舍五入保留小数点后6位&amp;#xff0c;通过参数设置保留小数点后n位。 
#include &lt;stdio.h&gt;
#define PI 3.14159
/*	功能&amp;#x…阅读更多...前端项目中遇到的技术问题1.性能问题 
页面加载过长、图像加载慢。解决方案&amp;#xff1a;代码分割&amp;#xff0c;按照需求加载模块&amp;#xff0c;减少初始的加载量或者使用懒加载、资源压缩、cdn加速 
2.响应式设计&amp;#xff08;移动设备适配&amp;#xff09; 
不同的屏幕尺寸&amp;#xff0c;布局和样式不统一。解决方…阅读更多...依赖标签分类任务Smin值计算（蛋白质功能预测，GO标签）前言 
Smin是在蛋白质功能预测中比较流行的一个指标&amp;#xff0c;具体由来我也不甚清楚&amp;#xff0c;只是在最近复现的几篇论文中反复出现了&amp;#xff0c;所以记录一下。 
计算方法 
&amp;#xff08;图来自于PSPGO论文&amp;#xff09; 其中&amp;#x1d70f;表示阈值&amp;#xff0c;t表示GO标签…阅读更多...【动态规划】【路径问题】下降路经最小和、最小路径和、地下城游戏4. 下降路径最小和 931. 下降路径最小和  算法原理 确定状态表示 dp[i][j] 表示&amp;#xff1a;到达 [i, j] 位置&amp;#xff0c;最小的下降路径  状态转移方程  dp[i][j] 从 [i-1, j-1] 到达 [i, j] &gt; dp[i-1][j-1]  m[i][j]从 [i-1, j] 到达 [i, j] &gt; dp[i-1][j]  m[i][j]从 …阅读更多...RabbitMQ service is already present - only updating service parametersWindows下卸载RabbitMQ之后，然后重新注册RabbitMQ服务的时候，报错以下信息： D:\software\rabbitmq-server-4.0.2\rabbitmq_server-4.0.2\sbin&gt;D:\software\rabbitmq-server-4.0.2\rabbitmq_server-4.0.2\sbin\rabbitmq-service.bat install RabbitMQ service is already …阅读更多...csp普及组算法集训--DfsDFS是一种经典的搜索算法&amp;#xff0c;也是检测有没有编程天赋的试金石。 
DFS&amp;#xff1a;搜索与回溯 
题1&amp;#xff1a;自然数的拆分 
//自然数的拆分 
#include&lt;bits/stdc.h&gt;
using namespace std;
int n,ans[101];
void dfs(int sum,int dp){if(sum&gt;n){return;//不可…阅读更多...初识git · 远程操作目录 
前言&amp;#xff1a; 
理解分布式版本控制系统 
远程仓库 
仓库操作 
克隆仓库 
推送和抓取 
特殊文件 
取别名 
标签管理 前言&amp;#xff1a; 
在基本操作&amp;#xff0c;分支管理这几个部分&amp;#xff0c;我们都会在本地仓库操作了&amp;#xff0c;但是目前还没有办法将自己的代码远程…阅读更多...深入了解Spring重试组件spring-retry在我们的项目中&amp;#xff0c;为了提高程序的健壮性&amp;#xff0c;很多时候都需要有重试机制进行兜底&amp;#xff0c;最多就场景就比如调用远程的服务&amp;#xff0c;调用中间件服务等&amp;#xff0c;因为网络是不稳定的&amp;#xff0c;所以在进行远程调用的时候偶尔会产生超时的异常&amp;#xff0…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径整理数学数据结构viewerjs+vue3 using typescript题解：B4207 [常州市赛 2021] 战士最小二乘问题详解7：正则化最小二乘什么是重组蛋白？Day9文字颜色Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 14:18:21 +0000</pubDate>
    </item>
  </channel>
</rss>
