<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>PPMY RSS</title>
    <link>https://www.ppmy.cn/news</link>
    <description>PPMY 网站文章 RSS</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 31 Oct 2025 17:17:23 +0000</lastBuildDate>
    <item>
      <title>关于鸿蒙学习之遇到的问题——ERROR: Invalid dependency entry</title>
      <link>https://www.ppmy.cn/news/1541132.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维关于鸿蒙学习之遇到的问题——ERROR: Invalid dependency entrynews/2025/11/1 1:19:10/前几天刚更新最新的ide 900，然后我就重新构建项目遇到的问题。直接抛出报错““F:\HarmonyOS\HarmonyOSIDE\DevEco Studio\tools\ohpm\bin\ohpm.bat”” install --all --registry https://repo.harmonyos.com/ohpm/ --strict_ssl trueohpm ERROR: Invalid dependency entry@F:\My_Test\entry -&gt; entry@1.0.0ohpm ERROR: Found exception: Error: Invalid dependency, reached retry limit or non retryable error encountered.ohpm ERROR: ERUNNING execute tasks failed, Error: Invalid dependencyohpm ERROR: Install failed, detail: Error: Invalid dependency说是我的依赖有问题，，但是正常在模拟器上跑测试，和清理项目都没问题，就点重新构建会出这个问题，英文水平有限只能百度翻译一下，说是依赖，我就打开oh-package.json5文件查看，说这个有问题，因为我导入了一个静态har包{“name”: “entry”,“version”: “1.0.0”,“description”: “Please describe the basic information.”,“main”: “”,“author”: “”,“license”: “”,“dependencies”: {‘@my/basic’: ‘file:…/common/basic’}}解决办法：我新建了一个项目，重新创建个har包然后发现一下两个不同 har包的oh-package.json5新建如下：{“name”: “basic”,“version”: “1.0.0”,“description”: “Please describe the basic information.”,“main”: “Index.ets”,“author”: “”,“license”: “Apache-2.0”,“dependencies”: {}之前的har包的oh-package.json5{“name”: “basic”,“version”: “1.0.0”,“description”: “Please describe the basic information.”,“main”: “Index.ets”,“author”: “”,“license”: “Apache-2.0”,“dependencies”: {“entry”: “file:…/…/entry”}我就试着把 “entry”: "file:…/…/entry"一行删掉了，然后可以了在重新构建的时候就不会报红错误有意思的是新建工程的har包在entry中的oh-package.json5中不能这么写 ‘@my/basic’: ‘file:…/common/basic’写完报红，说名字不行，非要让我改成 “basic”: ‘file:…/common/basic’无非就是在使用har包的时候 导入变的不一样比如：import { token_key, UserSettingClass } from ‘@my/basic’变成 import { token_key, UserSettingClass } from 'basic’才能使用，还真是有点奇怪的问题http://www.ppmy.cn/news/1541132.html相关文章RootNeighboursDataset（helpers.dataset_classes文件中的root_neighbours_dataset.py）任务类型：回归 用途：在 `RootNeighboursDataset` 中，任务是给定一棵根树，预测根节点度数为6的邻居的特征平均值。因此，模型需要基于根节点的结构，找到度为6的邻居，并计算其特征的平均值。这属于回归问题，因为目标是预测连续值（特征的平均值）。 from helpers.dataset_…阅读更多...【人工智能】Transformers之Pipeline（二十）：令牌分类（token-classification）目录 
一、引言  
二、令牌分类&amp;#xff08;token-classification&amp;#xff09; 
2.1 概述 
2.2 Facebook AI/XLM-RoBERTa 
2.3 pipeline参数 
2.3.1 pipeline对象实例化参数 
2.3.2 pipeline对象使用参数  
2.3.3 pipeline返回参数 ​​​​​​​​​​​​​​ 
2.4 pipeline…阅读更多...第7章 网络请求和状态管理一、Axios 
1 Axios概述 Axios是一个基于Promise的HTTP库&amp;#xff0c;可以发送get、post等请求&amp;#xff0c;它作用于浏览器和Node.js中。当运行在浏览器时&amp;#xff0c;使用XMLHttpRequest接口发送请求&amp;#xff1b;当运行在Node.js时&amp;#xff0c;使用HTTP对象发送请求。 
Axios的…阅读更多...使用HIP和OpenMP卸载的Jacobi求解器Jacobi Solver with HIP and OpenMP offloading — ROCm Blogs (amd.com) 作者&amp;#xff1a;Asitav Mishra, Rajat Arora, Justin Chang 发布日期&amp;#xff1a;2023年9月15日 Jacobi方法作为求解偏微分方程&amp;#xff08;PDE&amp;#xff09;的基本迭代线性求解器在高性能计算&amp;#xff…阅读更多...每日一练 —— set习题1. 两个数组的交集 题目链接&amp;#xff1a;349. 两个数组的交集 - 力扣&amp;#xff08;LeetCode&amp;#xff09;https://leetcode.cn/problems/intersection-of-two-arrays/description/ 这题使用set&amp;#xff0c;因为set具有排序和去重的特性 思路&amp;#xff1a; 1.两个值相等就是交集 2.…阅读更多...【前端】如何制作一个自己的网页（14）当我们还需要对网页中的内容进行局部样式的修改。这时候&amp;#xff0c;就需要用到HTML中的重要元素&amp;#xff1a;span。 span是一个行内元素&amp;#xff0c;可以对HTML文档中的内容进行局部布局。  如图&amp;#xff0c;我们给标题和段落元素的部分内容设置了各种样式。 接下来&amp;#xff0…阅读更多...【第一章·为什么要学习编程】目录 
1.1 学习编程的热潮 
1.1.1 席卷全球的“编程一小时” 
1.1.2 资本汹涌的少儿编程 
1.1.3 “再不学编程就晚了” 
1.2 为什么要学编程 
1.3 什么是“编程” 
1.4 怎么学编程 
1.4.1 一切都是计算 
1.4.2 学编程不是学语法 
1.4.3 动手&amp;#xff0c;动手&amp;#xff0c;再动手…阅读更多...1282：最大子矩阵题目&amp;#xff1a; 
已知矩阵的大小定义为矩阵中所有元素的和。给定一个矩阵&amp;#xff0c;你的任务是找到最大的非空(大小至少是1  1)子矩阵。 
比如&amp;#xff0c;如下4  4的矩阵 
0 -2 -7 0 9 2 -6 2 -4 1 -4 1 -1 8 0 -2 的最大子矩阵是 
9 2 -4 1 -1 8 这个子矩阵的大小是15。 …阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:19:10 +0000</pubDate>
    </item>
    <item>
      <title>RootNeighboursDataset（helpers.dataset_classes文件中的root_neighbours_dataset.py）</title>
      <link>https://www.ppmy.cn/news/1541131.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维RootNeighboursDataset（helpers.dataset_classes文件中的root_neighbours_dataset.py）news/2025/11/1 1:19:09/任务类型：回归用途：在 `RootNeighboursDataset` 中，任务是给定一棵根树，预测根节点度数为6的邻居的特征平均值。因此，模型需要基于根节点的结构，找到度为6的邻居，并计算其特征的平均值。这属于回归问题，因为目标是预测连续值（特征的平均值）。from helpers.dataset_classes.root_neighbours_dataset import RootNeighboursDatasetimport torch
from torch_geometric.data import Data, Batch
from typing import Dict, Tuple, List
from torch import Tensorclass RootNeighboursDataset(object):def __init__(self, seed: int, print_flag: bool = False):super().__init__()self.seed = seedself.plot_flag = print_flagself.generator = torch.Generator().manual_seed(seed)self.constants_dict = self.initialize_constants()self._data = self.create_data()def get(self) -&gt; Data:return self._datadef create_data(self) -&gt; Data:# train, val, testdata_list = []for num in range(self.constants_dict['NUM_COMPONENTS']):data_list.append(self.generate_component())return Batch.from_data_list(data_list)def mask_task(self, num_nodes_per_fold: List[int]) -&gt; Tuple[Tensor, Tensor, Tensor]:num_nodes = sum(num_nodes_per_fold)train_mask = torch.zeros(size=(num_nodes,), dtype=torch.bool)val_mask = torch.zeros(size=(num_nodes,), dtype=torch.bool)test_mask = torch.zeros(size=(num_nodes,), dtype=torch.bool)train_mask[0] = Trueval_mask[num_nodes_per_fold[0]] = Truetest_mask[num_nodes_per_fold[0] + num_nodes_per_fold[1]] = Truereturn train_mask, val_mask, test_maskdef generate_component(self) -&gt; Data:data_per_fold, num_nodes_per_fold = [], []for fold_idx in range(3):data = self.generate_fold(eval=(fold_idx != 0))num_nodes_per_fold.append(data.x.shape[0])data_per_fold.append(data)train_mask, val_mask, test_mask = self.mask_task(num_nodes_per_fold=num_nodes_per_fold)batch = Batch.from_data_list(data_per_fold)return Data(x=batch.x, edge_index=batch.edge_index, y=batch.y, train_mask=train_mask, val_mask=val_mask,test_mask=test_mask)def initialize_constants(self) -&gt; Dict[str, int]:return {'NUM_COMPONENTS': 1000, 'MAX_HUBS': 3, 'MAX_1HOP_NEIGHBORS': 10, 'ADD_HUBS': 2, 'HUB_NEIGHBORS': 5,'MAX_2HOP_NEIGHBORS': 3, 'NUM_FEATURES': 5}def generate_fold(self, eval: bool) -&gt; Data:constant_dict = self.initialize_constants()MAX_HUBS, MAX_1HOP_NEIGHBORS, ADD_HUBS, HUB_NEIGHBORS, MAX_2HOP_NEIGHBORS, NUM_FEATURES =\[constant_dict[key] for key in ['MAX_HUBS', 'MAX_1HOP_NEIGHBORS', 'ADD_HUBS', 'HUB_NEIGHBORS','MAX_2HOP_NEIGHBORS', 'NUM_FEATURES']]assert MAX_HUBS + ADD_HUBS &lt;= MAX_1HOP_NEIGHBORSadd_hubs = ADD_HUBS if eval else 0num_hubs = torch.randint(1, MAX_HUBS + 1, size=(1,), generator=self.generator).item() + add_hubsnum_1hop_neighbors = torch.randint(MAX_HUBS + add_hubs, MAX_1HOP_NEIGHBORS + 1, size=(1,),generator=self.generator).item()assert num_hubs &lt;= num_1hop_neighborslist_num_2hop_neighbors = torch.randint(1, MAX_2HOP_NEIGHBORS, size=(num_1hop_neighbors - num_hubs,),generator=self.generator).tolist()list_num_2hop_neighbors = [HUB_NEIGHBORS] * num_hubs + list_num_2hop_neighbors# 2 hop edge indexnum_nodes = 1  # root node is 0idx_1hop_neighbors = []list_edge_index = []for num_2hop_neighbors in list_num_2hop_neighbors:idx_1hop_neighbors.append(num_nodes)if num_2hop_neighbors &gt; 0:clique_edge_index = torch.tensor([[0] * num_2hop_neighbors, list(range(1, num_2hop_neighbors + 1))])# clique_edge_index = torch.combinations(torch.arange(num_2hop_neighbors), r=2).Tlist_edge_index.append(clique_edge_index + num_nodes)num_nodes += num_2hop_neighbors + 1# 1 hop edge indexidx_0hop = torch.tensor([0] * num_1hop_neighbors)idx_1hop_neighbors = torch.tensor(idx_1hop_neighbors)hubs = idx_1hop_neighbors[:num_hubs]list_edge_index.append(torch.stack((idx_0hop, idx_1hop_neighbors), dim=0))edge_index = torch.cat(list_edge_index, dim=1)# undirectedge_index_other_direction = torch.stack((edge_index[1], edge_index[0]), dim=0)edge_index = torch.cat((edge_index_other_direction, edge_index), dim=1)# featuresx = 4 * torch.rand(size=(num_nodes, NUM_FEATURES), generator=self.generator) - 2# labelsy = torch.zeros_like(x)y[0] = torch.mean(x[hubs], dim=0)return Data(x=x, edge_index=edge_index, y=y)if __name__ == '__main__':data = RootNeighboursDataset(seed=0, print_flag=True)这个RootNeighboursDataset类通过随机生成的树状图数据来模拟一种节点关系，并基于图结构生成特征和标签。代码使用了PyTorch和PyTorch Geometric的功能来处理图数据。下面逐块详细解释该代码实现：1.RootNeighboursDataset类构造器import torch
from torch_geometric.data import Data, Batch
from typing import Dict, Tuple, List
from torch import Tensorclass RootNeighboursDataset(object):def __init__(self, seed: int, print_flag: bool = False):super().__init__()self.seed &amp;#http://www.ppmy.cn/news/1541131.html相关文章【人工智能】Transformers之Pipeline（二十）：令牌分类（token-classification）目录 
一、引言  
二、令牌分类&amp;#xff08;token-classification&amp;#xff09; 
2.1 概述 
2.2 Facebook AI/XLM-RoBERTa 
2.3 pipeline参数 
2.3.1 pipeline对象实例化参数 
2.3.2 pipeline对象使用参数  
2.3.3 pipeline返回参数 ​​​​​​​​​​​​​​ 
2.4 pipeline…阅读更多...第7章 网络请求和状态管理一、Axios 
1 Axios概述 Axios是一个基于Promise的HTTP库&amp;#xff0c;可以发送get、post等请求&amp;#xff0c;它作用于浏览器和Node.js中。当运行在浏览器时&amp;#xff0c;使用XMLHttpRequest接口发送请求&amp;#xff1b;当运行在Node.js时&amp;#xff0c;使用HTTP对象发送请求。 
Axios的…阅读更多...使用HIP和OpenMP卸载的Jacobi求解器Jacobi Solver with HIP and OpenMP offloading — ROCm Blogs (amd.com) 作者&amp;#xff1a;Asitav Mishra, Rajat Arora, Justin Chang 发布日期&amp;#xff1a;2023年9月15日 Jacobi方法作为求解偏微分方程&amp;#xff08;PDE&amp;#xff09;的基本迭代线性求解器在高性能计算&amp;#xff…阅读更多...每日一练 —— set习题1. 两个数组的交集 题目链接&amp;#xff1a;349. 两个数组的交集 - 力扣&amp;#xff08;LeetCode&amp;#xff09;https://leetcode.cn/problems/intersection-of-two-arrays/description/ 这题使用set&amp;#xff0c;因为set具有排序和去重的特性 思路&amp;#xff1a; 1.两个值相等就是交集 2.…阅读更多...【前端】如何制作一个自己的网页（14）当我们还需要对网页中的内容进行局部样式的修改。这时候&amp;#xff0c;就需要用到HTML中的重要元素&amp;#xff1a;span。 span是一个行内元素&amp;#xff0c;可以对HTML文档中的内容进行局部布局。  如图&amp;#xff0c;我们给标题和段落元素的部分内容设置了各种样式。 接下来&amp;#xff0…阅读更多...【第一章·为什么要学习编程】目录 
1.1 学习编程的热潮 
1.1.1 席卷全球的“编程一小时” 
1.1.2 资本汹涌的少儿编程 
1.1.3 “再不学编程就晚了” 
1.2 为什么要学编程 
1.3 什么是“编程” 
1.4 怎么学编程 
1.4.1 一切都是计算 
1.4.2 学编程不是学语法 
1.4.3 动手&amp;#xff0c;动手&amp;#xff0c;再动手…阅读更多...1282：最大子矩阵题目&amp;#xff1a; 
已知矩阵的大小定义为矩阵中所有元素的和。给定一个矩阵&amp;#xff0c;你的任务是找到最大的非空(大小至少是1  1)子矩阵。 
比如&amp;#xff0c;如下4  4的矩阵 
0 -2 -7 0 9 2 -6 2 -4 1 -4 1 -1 8 0 -2 的最大子矩阵是 
9 2 -4 1 -1 8 这个子矩阵的大小是15。 …阅读更多...代码随想录算法训练营Day08 | 344.反转字符串、541. 反转字符串II、卡码网：54.替换数字文章目录 344.反转字符串思路与重点 541. 反转字符串II思路与重点 卡码网&amp;#xff1a;54.替换数字思路与重点 344.反转字符串 
题目链接&amp;#xff1a;344. 反转字符串 - 力扣&amp;#xff08;LeetCode&amp;#xff09;讲解链接&amp;#xff1a;代码随想录 (programmercarl.com)状态&amp;#xff…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:19:09 +0000</pubDate>
    </item>
    <item>
      <title>【人工智能】Transformers之Pipeline（二十）：令牌分类（token-classification）</title>
      <link>https://www.ppmy.cn/news/1541130.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【人工智能】Transformers之Pipeline（二十）：令牌分类（token-classification）news/2025/11/1 1:19:08/目录一、引言二、令牌分类（token-classification）2.1 概述2.2 Facebook AI/XLM-RoBERTa2.3 pipeline参数2.3.1 pipeline对象实例化参数2.3.2 pipeline对象使用参数2.3.3 pipeline返回参数 ​​​​​​​​​​​​​​2.4 pipeline实战2.5 模型排名三、总结一、引言pipeline（管道）是huggingface transformers库中一种极简方式使用大模型推理的抽象，将所有大模型分为音频（Audio）、计算机视觉（Computer vision）、自然语言处理（NLP）、多模态（Multimodal）等4大类，28小类任务（tasks）。共计覆盖32万个模型今天介绍NLP自然语言处理的第八篇：令牌分类（token-classification），在huggingface库内有2万个文本生成（text-generation）模型。二、令牌分类（token-classification）2.1 概述标记分类是一种自然语言理解任务，其中为文本中的某些标记分配标签。一些流行的标记分类子任务是命名实体识别 (NER) 和词性 (PoS) 标记。可以训练 NER 模型来识别文本中的特定实体，例如日期、个人和地点；而 PoS 标记可以识别文本中的哪些词是动词、名词和标点符号。2.2 Facebook AI/XLM-RoBERTaXLM-RoBERTa 是 RoBERTa 的多语言版本。它已在包含 100 种语言的 2.5TB 经过筛选的 CommonCrawl 数据上进行了预训练。RoBERTa 是一个以自监督方式在大型语料库上进行预训练的 transformers 模型。这意味着它只在原始文本上进行预训练，没有任何人工标记（这就是它可以使用大量公开数据的原因），并有一个自动流程从这些文本中生成输入和标签。更准确地说，它是使用掩码语言建模 (MLM) 目标进行预训练的。以一个句子为例，该模型随机屏蔽输入中的 15% 的单词，然后通过模型运行整个被屏蔽的句子，并必须预测被屏蔽的单词。这与通常一个接一个地看到单词的传统循环神经网络 (RNN) 或内部屏蔽未来标记的 GPT 等自回归模型不同。它允许模型学习句子的双向表示。通过这种方式，模型可以学习 100 种语言的内部表征，然后可以使用这些表征提取对下游任务有用的特征：例如，如果您有一个带标签的句子数据集，则可以使用 XLM-RoBERTa 模型生成的特征作为输入来训练标准分类器。2.3 pipeline参数2.3.1 pipeline对象实例化参数model（PreTrainedModel或TFPreTrainedModel）— 管道将使用其进行预测的模型。 对于 PyTorch，这需要从PreTrainedModel继承；对于 TensorFlow，这需要从TFPreTrainedModel继承。tokenizer( PreTrainedTokenizer ) — 管道将使用其对模型的数据进行编码的 tokenizer。此对象继承自 PreTrainedTokenizer。modelcard（str或ModelCard，可选） — 属于此管道模型的模型卡。framework（str，可选）— 要使用的框架，"pt"适用于 PyTorch 或"tf"TensorFlow。必须安装指定的框架。如果未指定框架，则默认为当前安装的框架。如果未指定框架且安装了两个框架，则默认为 的框架model，如果未提供模型，则默认为 PyTorch。task（str，默认为""）— 管道的任务标识符。num_workers（int，可选，默认为 8）— 当管道将使用DataLoader（传递数据集时，在 Pytorch 模型的 GPU 上）时，要使用的工作者数量。batch_size（int，可选，默认为 1）— 当管道将使用DataLoader（传递数据集时，在 Pytorch 模型的 GPU 上）时，要使用的批次的大小，对于推理来说，这并不总是有益的，请阅读使用管道进行批处理。args_parser（ArgumentHandler，可选） - 引用负责解析提供的管道参数的对象。device（int，可选，默认为 -1）— CPU/GPU 支持的设备序号。将其设置为 -1 将利用 CPU，设置为正数将在关联的 CUDA 设备 ID 上运行模型。您可以传递本机torch.device或str太torch_dtype（str或torch.dtype，可选） - 直接发送model_kwargs（只是一种更简单的快捷方式）以使用此模型的可用精度（torch.float16，，torch.bfloat16...或"auto"）binary_output（bool，可选，默认为False）——标志指示管道的输出是否应以序列化格式（即 pickle）或原始输出数据（例如文本）进行。ignore_labels（List[str]，默认为["O"]）— 要忽略的标签列表。grouped_entities(bool，可选，默认为False) — 已弃用，请使用aggregation_strategy。是否在预测中将与同一实体相对应的标记分组在一起。stride（int，可选）— 如果提供了 stride，则管道将应用于所有文本。文本被拆分为大小为 model_max_length 的块。仅适用于快速标记器，与aggregation_strategy不同NONE。此参数的值定义块之间重叠标记的数量。换句话说，模型将tokenizer.model_max_length - stride每一步向前移动标记。aggregation_strategy（str，可选，默认为"none"）—根据模型预测融合（或不融合）标记的策略。“none” ：不会进行任何聚合，仅返回模型的原始结果“simple” ：将尝试按照默认模式对实体进行分组。 (A, B-TAG), (B, I​​-TAG), (C, I-TAG), (D, B-TAG2) (E, B-TAG2) 最终将变为 [{“word”: ABC, “entity”: “TAG”}, {“word”: “D”, “entity”: “TAG2”}, {“word”: “E”, “entity”: “TAG2”}] 请注意，两个连续的 B 标签最终将成为不同的实体。 在基于单词的语言中，我们可能会不合需要地拆分单词：想象一下 Microsoft 被标记为 [{“word”: “Micro”, “entity”: “ENTERPRISE”}, {“word”: “soft”, “entity”: “NAME”}]。 寻找 FIRST、MAX、AVERAGE 来缓解这种情况并消除单词歧义（在支持该含义的语言上，基本上是用空格分隔的标记）。这些缓解措施只对真实的词语起作用，“纽约”可能仍然被标记为两个不同的实体。“first” ：（仅适用于基于单词的模型）将使用SIMPLE除了单词之外的策略，不能以不同的标签结尾。当存在歧义时，单词将简单地使用单词的第一个标记的标签。“average” ：（仅适用于基于单词的模型）将使用SIMPLE除单词之外的策略，不能以不同的标签结束。分数将首先在标记之间取平均值，然后应用最大标签。“max” ：（仅适用于基于单词的模型）将使用SIMPLE除单词之外的策略，不能以不同的标签结尾。单词实体将只是具有最高分数的标记。2.3.2 pipeline对象使用参数text_inputs（str，List[str]，List[Dict[str, str]]，或List[List[Dict[str, str]]]）— 需要完成的一个或多个提示（或一个提示列表）。如果传递了字符串或字符串列表，则此管道将继续每个提示。或者，可以传递“聊天”（以带有“role”和“content”键的字典列表的形式），或传递此类聊天的列表。传递聊天时，将使用模型的聊天模板对其进行格式化，然后再将其传递给模型。return_tensors(bool，可选，默认为False) — 是否在输出中返回预测的张量（作为标记索引）。如果设置为True，则不返回解码后的文本。return_text（bool，可选，默认为True）— 是否在输出中返回解码后的文本。return_full_text（bool，可选，默认为True）— 如果设置为，False则仅返回添加的文本，否则返回全文。仅当return_text设置为 True 时才有意义。clean_up_tokenization_spaces（bool，可选，默认为True）—是否清理文本输出中可能出现的额外空格。prefix（str，可选）— 添加到提示的前缀。handle_long_generation（str，可选）— 默认情况下，此管道不处理长生成（以某种形式超出模型最大长度的生成）。generate_kwargs（dict，可选）——传递给模型的生成方法的附加关键字参数（请参阅此处与您的框架相对应的生成方法）。2.3.3 pipeline返回参数 ​​​​​​​​​​​​​​word(str) — 分类的标记/单词。这是通过解码选定的标记获得的。如果您想要获得原始句子中的精确字符串，请使用start和end。score（float）—— 的对应概率entity。entity(str) — 为该标记/单词预测的实体（当aggregation_strategy不是时，它被命名为entity_group）。"none"index（int，仅当存在时aggregation_strategy="none"）——句子中对应标记的索引。start（int，可选）— 句子中相应实体的起始索引。仅当标记器中的偏移量可用时才存在end（int，可选）— 句子中相应实体的结尾索引。仅当标记器中的偏移量可用时才存在2.4 pipeline实战基于pipeline的token-classification任务，使用FacebookAI/xlm-roberta模型：import os
os.environ["HF_ENDPOINT"] = "https://hf-mirror.com"
os.environ["CUDA_VISIBLE_DEVICES"] = "2"from transformers import pipeline
classifier = pipeline("ner", model= "xlm-roberta-large-finetuned-conll03-english" )
output=classifier("Alya told Jasmine that Andrew could pay with cash..")
print(output)执行后，自动下载模型文件并进行识别：​2.5 模型排名在huggingface上，我们将令牌分类（token-classification）模型按下载量从高到低排序，总计2万个模型，文中FacebookAI的xlm-roberta排名第一。​三、总结本文对transformers之pipeline的令牌分类（token-classification）从概述、技术原理、pipeline参数、pipeline实战、模型排名等方面进行介绍，读者可以基于pipeline使用文中的2行代码极简的使用NLP中的令牌分类（token-classification）模型。期待您的3连+关注，如何还有时间，欢迎阅读我的其他文章：《Transformers-Pipeline概述》【人工智能】Transformers之Pipeline（概述）：30w+大模型极简应用《Transformers-Pipeline 第一章：音频（Audio）篇》【人工智能】Transformers之Pipeline（一）：音频分类（audio-classification）【人工智能】Transformers之Pipeline（二）：自动语音识别（automatic-speech-recognition）【人工智能】Transformers之Pipeline（三）：文本转音频（text-to-audio/text-to-speech）【人工智能】Transformers之Pipeline（四）：零样本音频分类（zero-shot-audio-classification）《Transformers-Pipeline 第二章：计算机视觉（CV）篇》【人工智能】Transformers之Pipeline（五）：深度估计（depth-estimation）【人工智能】Transformers之Pipeline（六）：图像分类（image-classification）【人工智能】Transformers之Pipeline（七）：图像分割（image-segmentation）【人工智能】Transformers之Pipeline（八）：图生图（image-to-image）【人工智能】Transformers之Pipeline（九）：物体检测（object-detection）【人工智能】Transformers之Pipeline（十）：视频分类（video-classification）【人工智能】Transformers之Pipeline（十一）：零样本图片分类（zero-shot-image-classification）【人工智能】Transformers之Pipeline（十二）：零样本物体检测（zero-shot-object-detection）​​​​​​​《Transformers-Pipeline 第三章：自然语言处理（NLP）篇》【人工智能】Transformers之Pipeline（十三）：填充蒙版（fill-mask）​​​​​​​【人工智能】Transformers之Pipeline（十四）：问答（question-answering）【人工智能】Transformers之Pipeline（十五）：总结（summarization）【人工智能】Transformers之Pipeline（十六）：表格问答（table-question-answering）【人工智能】Transformers之Pipeline（十七）：文本分类（text-classification）【人工智能】Transformers之Pipeline（十八）：文本生成（text-generation）​​​​​​​【人工智能】Transformers之Pipeline（十九）：文生文（text2text-generation）【人工智能】Transformers之Pipeline（二十）：令牌分类（token-classification）【人工智能】Transformers之Pipeline（二十一）：翻译（translation）【人工智能】Transformers之Pipeline（二十二）：零样本文本分类（zero-shot-classification）《Transformers-Pipeline 第四章：多模态（Multimodal）篇》【人工智能】Transformers之Pipeline（二十三）：文档问答（document-question-answering）【人工智能】Transformers之Pipeline（二十四）：特征抽取（feature-extraction）【人工智能】Transformers之Pipeline（二十五）：图片特征抽取（image-feature-extraction）【人工智能】Transformers之Pipeline（二十六）：图片转文本（image-to-text）【人工智能】Transformers之Pipeline（二十七）：掩码生成（mask-generation）【人工智能】Transformers之Pipeline（二十八）：视觉问答（visual-question-answering）http://www.ppmy.cn/news/1541130.html相关文章第7章 网络请求和状态管理一、Axios 
1 Axios概述 Axios是一个基于Promise的HTTP库&amp;#xff0c;可以发送get、post等请求&amp;#xff0c;它作用于浏览器和Node.js中。当运行在浏览器时&amp;#xff0c;使用XMLHttpRequest接口发送请求&amp;#xff1b;当运行在Node.js时&amp;#xff0c;使用HTTP对象发送请求。 
Axios的…阅读更多...使用HIP和OpenMP卸载的Jacobi求解器Jacobi Solver with HIP and OpenMP offloading — ROCm Blogs (amd.com) 作者&amp;#xff1a;Asitav Mishra, Rajat Arora, Justin Chang 发布日期&amp;#xff1a;2023年9月15日 Jacobi方法作为求解偏微分方程&amp;#xff08;PDE&amp;#xff09;的基本迭代线性求解器在高性能计算&amp;#xff…阅读更多...每日一练 —— set习题1. 两个数组的交集 题目链接&amp;#xff1a;349. 两个数组的交集 - 力扣&amp;#xff08;LeetCode&amp;#xff09;https://leetcode.cn/problems/intersection-of-two-arrays/description/ 这题使用set&amp;#xff0c;因为set具有排序和去重的特性 思路&amp;#xff1a; 1.两个值相等就是交集 2.…阅读更多...【前端】如何制作一个自己的网页（14）当我们还需要对网页中的内容进行局部样式的修改。这时候&amp;#xff0c;就需要用到HTML中的重要元素&amp;#xff1a;span。 span是一个行内元素&amp;#xff0c;可以对HTML文档中的内容进行局部布局。  如图&amp;#xff0c;我们给标题和段落元素的部分内容设置了各种样式。 接下来&amp;#xff0…阅读更多...【第一章·为什么要学习编程】目录 
1.1 学习编程的热潮 
1.1.1 席卷全球的“编程一小时” 
1.1.2 资本汹涌的少儿编程 
1.1.3 “再不学编程就晚了” 
1.2 为什么要学编程 
1.3 什么是“编程” 
1.4 怎么学编程 
1.4.1 一切都是计算 
1.4.2 学编程不是学语法 
1.4.3 动手&amp;#xff0c;动手&amp;#xff0c;再动手…阅读更多...1282：最大子矩阵题目&amp;#xff1a; 
已知矩阵的大小定义为矩阵中所有元素的和。给定一个矩阵&amp;#xff0c;你的任务是找到最大的非空(大小至少是1  1)子矩阵。 
比如&amp;#xff0c;如下4  4的矩阵 
0 -2 -7 0 9 2 -6 2 -4 1 -4 1 -1 8 0 -2 的最大子矩阵是 
9 2 -4 1 -1 8 这个子矩阵的大小是15。 …阅读更多...代码随想录算法训练营Day08 | 344.反转字符串、541. 反转字符串II、卡码网：54.替换数字文章目录 344.反转字符串思路与重点 541. 反转字符串II思路与重点 卡码网&amp;#xff1a;54.替换数字思路与重点 344.反转字符串 
题目链接&amp;#xff1a;344. 反转字符串 - 力扣&amp;#xff08;LeetCode&amp;#xff09;讲解链接&amp;#xff1a;代码随想录 (programmercarl.com)状态&amp;#xff…阅读更多...Ubuntu：用户不在sudoers文件中1、问题 
执行sudo xxx命令时&amp;#xff0c;显示&amp;#xff1a; 
user 不在sudoers文件中 
需要查看系统版本进入恢复模式修复。 
2、重启进入恢复模式 
查看系统命令&amp;#xff1a;uname -r 可能显示为&amp;#xff1a;6.8.0-45-generic 
重启Ubuntu系统&amp;#xff0c;在开机时按ESC进入模…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:19:08 +0000</pubDate>
    </item>
    <item>
      <title>第7章 网络请求和状态管理</title>
      <link>https://www.ppmy.cn/news/1541129.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维第7章 网络请求和状态管理news/2025/11/1 1:19:07/一、Axios1 Axios概述Axios是一个基于Promise的HTTP库，可以发送get、post等请求，它作用于浏览器和Node.js中。当运行在浏览器时，使用XMLHttpRequest接口发送请求；当运行在Node.js时，使用HTTP对象发送请求。Axios的主要特性如下：支持所有的API。支持拦截请求和响应。可以转换请求数据和响应数据，并可以将响应的内容自动转换为JSON类型的数据。安全性高，客户端支持防御跨站请求伪造（Cross-Site Request Forgery，CSRF）。2 安装AxiosAxios的安装方式主要有两种，一种是通过标签引入，另一种是使用包管理工具安装。通过标签引入使用Unpkg或jsDelivr的内容分发网络服务提供的Axios文件，也可以将Axios文件下载至本地再引入。使用包管理工具安装使用npm或yarn包管理工具安装Axios。1. 通过标签引入① 使用Unpkg的CDN服务引入Axios。&lt;script src="https://unpkg.com/axios/dist/axios.min.js"&gt;&lt;/script&gt;② 使用jsDelivr的CDN服务引入Axios。&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;2. 使用包管理工具安装使用npm或yarn包管理工具安装Axios。# 使用npm包管理工具安装
npm install axios --save
# 使用yarn包管理工具安装
yarn add axios --save在Vue 3项目中使用yarn安装Axios步骤一：打开命令提示符，切换到D:\vue\chapter07目录，使用yarn创建一个名称为my-axios的项目。在命令提示符中，切换到my-axios目录，为项目安装所有依赖。cd my-axios
yarn步骤二：在my-axios目录下使用yarn安装Axios。步骤三：使用VS Code编辑器打开my-axios目录，执行命令启动服务。yarn dev项目启动后，会默认开启一个本地服务，地址为http://127.0.0.1:5173/。3 使用Axios在项目中使用Axios时，通常的做法是先将Axios封装成一个模块，然后在组件中导入模块。①将Axios封装成模块，创建src\axios\request.js文件。import axios from 'axios'
const request = axios.create({timeout: 2000
})
export default request②在组件中导入模块，在src\App.vue文件中导入模块。import request from './axios/request.js'Axios常用的请求方式：get请求和post请求。① 使用Axios发送get请求的基本语法格式。request({url: '请求路径',method: 'get',params: { 参数 }
}).then(res =&gt; {console.log(res)
}).catch(error =&gt; {console.log(error)
})② 使用Axios发送post请求的基本语法格式。request({url: '请求路径',method: 'post',data: { 参数 }
}).then(res =&gt; {console.log(res)
}).catch(error =&gt; {console.log(error)
})4 Axios图书列表案例使用Axios实现图书列表案例，图书列表页面初始效果如下图所示。单击上图中“请求数据”按钮，数据请求成功页面效果如下图所示。图书列表案例的实现分为以下2步。使用mockjs模拟后端接口步骤一：在my-axios目录下，使用yarn安装mockjs。yarn add mockjs@1.1.0 --save步骤二：创建src\mock\books.json文件，该文件用于存放模拟的数据。{"id": 1,"name": "西游记","author": "吴承恩"},{"id": 2,"name": "红楼梦","author": "曹雪芹"},{"id": 3,"name": "三国演义","author": "罗贯中"},{"id": 4,"name": "水浒传","author": "施耐庵"}
]步骤三：创建src\mock\mockServer.js文件，该文件用于配置模拟数据的相关信息。import Mock from 'mockjs'
import books from './books.json'
Mock.mock('/mock/getBooks', 'get', {code: 200,	// 请求成功的状态码data: books	// 模拟的请求数据
})步骤三：修改src\main.js文件，在创建Vue应用实例前导入mockServer.js文件。import './mock/mockServer.js'在页面中请求接口并获取数据步骤一：清空src\App.vue文件中的内容。&lt;template&gt;&lt;div class="box"&gt;&lt;button&gt;请求数据&lt;/button&gt;&lt;table width="90%" class="table"&gt;&lt;caption&gt;&lt;h2&gt;图书列表&lt;/h2&gt;&lt;/caption&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;&lt;th&gt;书名&lt;/th&gt;&lt;th&gt;作者&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;!-- 主体内容 --&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/template&gt;步骤二：在src\App.vue文件中编写样式代码。&lt;style&gt;
body, html {width: 100%;height: 100%;
}
#app {width: 100% !important;
}
table {border-collapse: collapse;margin: 0 auto;text-align: center;}
table td, table th {border: 1px solid #cad9ea;color: #666;height: 30px;
}
table thead th {background-color: #CCE8EB;width: 100px;
}
table tr:nth-child(odd) {background: #fff;
}
table tr:nth-child(even) {background: #F5FAFA;
}
&lt;/style&gt;步骤三：为“请求数据”按钮绑定单击事件处理方法。&lt;button @click="getData"&gt;请求数据&lt;/button&gt;步骤四：在src\App.vue文件中请求接口数据。&lt;script setup&gt;
import { reactive } from 'vue'
import request from './axios/request.js'
const bookData = reactive({list: []
})
// 测试请求方法
const getData = function() {request({url: '/mock/getBooks',method: 'get'}).then(res =&gt; {bookData.list = res.data.dataconsole.log(res.data.data)}).catch(error =&gt; {console.log(error)})
}
&lt;/script&gt;步骤五：在src\App.vue文件中编写主体内容。&lt;tbody v-for="item in bookData.list" :key="item.id"&gt;&lt;!-- 主体内容 --&gt;&lt;tr&gt;&lt;td&gt;{{ item.id }}&lt;/td&gt;&lt;td&gt;{{ item.name }}&lt;/td&gt;&lt;td&gt;{{ item.author }}&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;二、Vuex1 Vuex概述Vuex是一个专为Vue开发的状态管理库，它采用集中式存储的方式管理应用的所有组件的状态，解决了多组件数据通信的问题，使数据操作更加简洁。2 安装VuexVuex的安装方式主要有两种，一种是通过标签引入，另一种是使用包管理工具安装。通过标签引入：使用Unpkg的CDN服务提供的Vuex文件，也可以将Vuex文件下载至本地再引入。使用包管理工具安装：使用npm或yarn包管理工具安装Vuex。1. 通过标签引入使用Unpkg的CDN服务引入Vuex。&lt;script src="https://unpkg.com/vuex@next"&gt;&lt;/script&gt;2. 使用包管理工具安装使用npm或yarn包管理工具安装Vuex。# 使用npm包管理工具安装
npm install vuex --save
# 使用yarn包管理工具安装
yarn add vuex --save在Vue 3项目中使用yarn安装Vuex步骤一：打开命令提示符，切换到D:\vue\chapter07目录，使用yarn创建一个名称为my-vuex的项目。在命令提示符中，切换到my-vuex目录，为项目安装所有依赖。cd my-vuex
yarn步骤二：在my-vuex目录下使用yarn安装Vuex。步骤三：使用VS Code编辑器打开my-vuex目录，执行命令启动服务。yarn dev项目启动后，会默认开启一个本地服务，地址为http://127.0.0.1:5173/。3 使用Vuex在项目中使用Vuex时，通常的做法是先在项目中创建一个store模块，然后导入并挂载store模块。store模块是用于管理状态数据的仓库。② 在src\main.js文件中导入并挂载store模块。import { createApp } from 'vue'
import './style.css'
import store from './store'	// 导入store模块
import App from './App.vue'
const app = createApp(App)
app.use(store) 			// 挂载store模块
app.mount('#app')4 Vuex计数器案例讲解计数器案例的实现步骤一：清空src\App.vue文件中的内容，重新编写如下代码。&lt;template&gt;&lt;p&gt;每次增加1：&lt;button @click="increment"&gt;+&lt;/button&gt;数字：0&lt;/p&gt;&lt;p&gt;每次减少1：&lt;button @click="reduction"&gt;-&lt;/button&gt;数字：100&lt;/p&gt;
&lt;/template&gt;
&lt;script setup&gt;
const increment = () =&gt; { }
const reduction = () =&gt; { }
&lt;/script&gt;
&lt;style&gt;
button {background-color: aquamarine;
}
&lt;/style&gt;步骤二：创建src\store\index.js文件。import { createStore } from 'vuex'
const store = createStore({state: {add: 0,reduce: 100},mutations: {increase(state) {state.add++},
decrease(state) {state.reduce--}},actions: {},modules: {} 
})
export default store步骤三：修改src\App.vue文件，提交increase()方法和decrease()方法。&lt;script setup&gt;
import { useStore } from 'vuex'
const store = useStore()
const increment = () =&gt; {store.commit('increase')
}
const reduction = () =&gt; {store.commit('decrease')
}
&lt;/script&gt;步骤四：在&lt;template&gt;模板中获取state中的数据并显示在页面中。&lt;p&gt;每次增加1：&lt;button @click="increment"&gt;+&lt;/button&gt;数字：{{ this.$store.state.add }}
&lt;/p&gt;
&lt;p&gt;每次减少1：&lt;button @click="decrement"&gt;-&lt;/button&gt;数字：{{ this.$store.state.reduce }}
&lt;/p&gt;三、Pinia1 Pinia概述Pinia是新一代的轻量级状态管理库，它允许跨组件或页面共享状态，解决了多组件间的数据通信，使数据操作更加简洁。2 安装Pinia使用npm或yarn包管理工具安装Pinia。# 使用yarn包管理器安装
yarn add pinia --save
# 使用npm包管理器安装
npm install pinia --save在Vue 3项目中使用yarn安装Pinia步骤一：打开命令提示符，切换到D:\vue\chapter07目录，使用yarn创建一个名称为my-pinia的项目。在命令提示符中，切换到my-pinia目录，为项目安装所有依赖。cd my-pinia
yarn步骤二：在my-pinia目录下使用yarn安装Pinia。步骤三：使用VS Code编辑器打开my-pinia目录，执行命令启动服务。yarn dev项目启动后，会默认开启一个本地服务，地址为http://127.0.0.1:5173/。3 使用Pinia在项目中使用Pinia时，通常先在项目中创建一个store模块，然后创建并挂载Pinia实例。其中，store模块是用于管理状态数据的仓库。① 编写store模块，创建src\store\index.js文件。② 在src\main.js文件中创建并挂载Pinia实例。import { createApp } from 'vue'
import './style.css'
import { createPinia } from 'pinia'
import App from './App.vue'
const app = createApp(App)
const pinia = createPinia()		// 创建Pinia实例
app.use(pinia)				// 导入Pinia实例
app.mount('#app')4 Pinia计数器案例讲解计数器案例的实现步骤一：清空src\App.vue文件中的内容，重新编写如下代码。&lt;template&gt;&lt;p&gt;每次增加1：&lt;button @click="increment"&gt;+&lt;/button&gt;数字：0&lt;/p&gt;&lt;p&gt;每次减少1：&lt;button @click="reduction"&gt;-&lt;/button&gt;数字：100&lt;/p&gt;
&lt;/template&gt;
&lt;script setup&gt;
const increment = () =&gt; { }
const reduction = () =&gt; { }
&lt;/script&gt;
&lt;style&gt;
button {background-color: aquamarine;
}
&lt;/style&gt;步骤二：创建src\store\index.js文件。import { defineStore } from 'pinia'
export const useStore = defineStore('storeId', {state: () =&gt; {return {add: 0,reduce: 100}},
getters: {},actions: {increase() {this.add++},decrease() {this.reduce--}}
})步骤三：修改src\App.vue文件，调用actions中定义的increase()方法和decrease()方法。&lt;script setup&gt;
import { useStore } from './store'
import { storeToRefs } from 'pinia'
const store = useStore()
const { add, reduce } = storeToRefs(store)
const increment = () =&gt; {store.increase()
}
const reduction = () =&gt; {store.decrease()
}
&lt;/script&gt;步骤四：&lt;p&gt;每次增加1：&lt;button @click="increment"&gt;+&lt;/button&gt;数字：{{ add }}
&lt;/p&gt;
&lt;p&gt;每次减少1：&lt;button @click="reduction"&gt;-&lt;/button&gt;数字：{{ reduce }}
&lt;/p&gt;5 Pinia模块化Pinia模块化应用场景？讲解user.js和shop.js模块的创建步骤一：创建src\store\user.js文件，编写用户信息数据。import { defineStore } from 'pinia'
export const useUserStore = defineStore('user', {state: () =&gt; {return {name: '小明',sex: '男',age: 18}},getters: {},actions: {}
})步骤二：创建src\store\shop.js文件，编写商品信息数据。import { defineStore } from 'pinia'
export const useShopStore = defineStore('shop', {state: () =&gt; {return {list: [{id: '01',name: '手机',price: 2000},{id: '02',name: '音响',price: 5000}]}},getters: {},actions: {}
})
getters: {},actions: {increase() {this.add++},decrease() {this.reduce--}}
})步骤三：创建src\components\User.vue文件，在页面中显示用户信息数据。&lt;template&gt;&lt;div&gt;user模块：&lt;p&gt;姓名：{{ name }}&lt;/p&gt;&lt;p&gt;性别：{{ sex }}&lt;/p&gt;&lt;p&gt;年龄：{{ age }}&lt;/p&gt;&lt;/div&gt;
&lt;/template&gt;
&lt;script setup&gt;
import { useUserStore } from '../store/user.js'
import { storeToRefs } from 'pinia'
const user = useUserStore()
const { name, sex, age } = storeToRefs(user)
&lt;/script&gt;步骤四：修改src\main.js文件，切换页面中显示的组件。import App from './components/User.vue'保存上述代码，在浏览器中访问http://127.0.0.1:5173/，user模块的页面效果如下图所示。步骤五：创建src\components\Shop.vue文件，在页面中显示商品信息数据。&lt;template&gt;shop模块：&lt;div v-for="item in list"&gt;&lt;p&gt;商品id：{{ item.id }}&lt;/p&gt;&lt;p&gt;商品名称：{{ item.name }}&lt;/p&gt;&lt;p&gt;商品价格：{{ item.price }}元&lt;/p&gt;&lt;/div&gt;
&lt;/template&gt;
&lt;script setup&gt;
import { useShopStore } from '../store/shop.js'
import { storeToRefs } from 'pinia'
const shop = useShopStore()
const { list } = storeToRefs(shop)
&lt;/script&gt;步骤六：修改src\main.js文件，切换页面中显示的组件。import App from './components/Shop.vue'保存上述代码，在浏览器中访问http://127.0.0.1:5173/，shop模块的页面效果如下图所示。6 Pinia持久化存储在项目开发中，使用Pinia进行状态管理时，若想要刷新浏览器后，仍保留之前的操作状态，可以通过Pinia的持久化插件pinia-plugin-persist实现。使用npm或yarn包管理工具安装pinia-plugin-persist。# 使用npm包管理工具安装
npm install pinia-plugin-persist --save
# 使用yarn包管理工具安装
yarn add pinia-plugin-persist --save在my-pinia项目中安装pinia-plugin-persist步骤一：在my-pinia目录下使用yarn安装pinia-plugin-persist插件。步骤二：使用VS Code编辑器打开my-pinia目录，执行命令启动服务。yarn dev在src\main.js文件中导入并挂载pinia-plugin-persist插件。import { createApp } from 'vue'
import './style.css'
import { createPinia } from 'pinia'
import piniaPluginPersist from 'pinia-plugin-persist'
import App from './components/Shop.vue'
const pinia = createPinia()
pinia.use(piniaPluginPersist)
const app = createApp(App)
app.use(pinia)
app.mount('#app')挂载pinia-plugin-persist插件后，在模块中实现持久化存储的示例代码如下。persist: {enabled: true,		// 开启数据缓存strategies: [{key: 'StoreId1',		// 当前store的idstorage: localStorage, 	// 存储方式paths: ['字段']		// 指定要持久化的字段}
]
}{key: 'user',storage: localStorage}]
}1. 全部数据持久化存储使用Pinia实现全部数据持久化存储步骤一：在src\components\User.vue文件中定义“增加年龄”按钮。&lt;template&gt;&lt;div&gt;user模块：&lt;p&gt;姓名：{{ name }}&lt;/p&gt;&lt;p&gt;性别：{{ sex }}&lt;/p&gt;&lt;p&gt;年龄：{{ age }}&lt;/p&gt;&lt;button @click="changeAge"&gt;增加年龄&lt;/button&gt;&lt;/div&gt;
&lt;/template&gt;步骤二：修改src\store\user.js文件，在actions中定义一个改变年龄的方法，并实现持久化存储。actions: {changeAge() {this.age++},
},
persist: {enabled: true,strategies: [{key: 'user',storage: localStorage}]
}步骤三：在src\components\User.vue文件中定义changeAge()方法，在该方法中调用actions中定义的changeAge()方法。const changeAge = () =&gt; {user.changeAge()
}步骤四：修改src\main.js文件，切换页面中显示的组件。import App from './components/User.vue'2. 部分数据持久化存储使用Pinia实现部分数据持久化存储步骤一：修改src\store\user.js文件，在actions中定义一个改变姓名的方法。changeName() {this.name = '小亮'
}步骤二：修改src\store\user.js文件中持久化存储的代码，通过paths指定要持久化存储的字段。persist: {enabled: true,strategies: [{key: 'user',storage: localStorage,paths: ['age']}],
}步骤三：在src\components\User.vue文件中找到“增加年龄”按钮，在该按钮下方增加一个“改变姓名”按钮。&lt;button @click="changeName"&gt;改变姓名&lt;/button&gt;步骤四：修改src\components\User.vue文件，定义changeName()方法，在该方法中调用actions中定义的changeName()方法。const changeName = () =&gt; {user.changeName()
}http://www.ppmy.cn/news/1541129.html相关文章使用HIP和OpenMP卸载的Jacobi求解器Jacobi Solver with HIP and OpenMP offloading — ROCm Blogs (amd.com) 作者&amp;#xff1a;Asitav Mishra, Rajat Arora, Justin Chang 发布日期&amp;#xff1a;2023年9月15日 Jacobi方法作为求解偏微分方程&amp;#xff08;PDE&amp;#xff09;的基本迭代线性求解器在高性能计算&amp;#xff…阅读更多...每日一练 —— set习题1. 两个数组的交集 题目链接&amp;#xff1a;349. 两个数组的交集 - 力扣&amp;#xff08;LeetCode&amp;#xff09;https://leetcode.cn/problems/intersection-of-two-arrays/description/ 这题使用set&amp;#xff0c;因为set具有排序和去重的特性 思路&amp;#xff1a; 1.两个值相等就是交集 2.…阅读更多...【前端】如何制作一个自己的网页（14）当我们还需要对网页中的内容进行局部样式的修改。这时候&amp;#xff0c;就需要用到HTML中的重要元素&amp;#xff1a;span。 span是一个行内元素&amp;#xff0c;可以对HTML文档中的内容进行局部布局。  如图&amp;#xff0c;我们给标题和段落元素的部分内容设置了各种样式。 接下来&amp;#xff0…阅读更多...【第一章·为什么要学习编程】目录 
1.1 学习编程的热潮 
1.1.1 席卷全球的“编程一小时” 
1.1.2 资本汹涌的少儿编程 
1.1.3 “再不学编程就晚了” 
1.2 为什么要学编程 
1.3 什么是“编程” 
1.4 怎么学编程 
1.4.1 一切都是计算 
1.4.2 学编程不是学语法 
1.4.3 动手&amp;#xff0c;动手&amp;#xff0c;再动手…阅读更多...1282：最大子矩阵题目&amp;#xff1a; 
已知矩阵的大小定义为矩阵中所有元素的和。给定一个矩阵&amp;#xff0c;你的任务是找到最大的非空(大小至少是1  1)子矩阵。 
比如&amp;#xff0c;如下4  4的矩阵 
0 -2 -7 0 9 2 -6 2 -4 1 -4 1 -1 8 0 -2 的最大子矩阵是 
9 2 -4 1 -1 8 这个子矩阵的大小是15。 …阅读更多...代码随想录算法训练营Day08 | 344.反转字符串、541. 反转字符串II、卡码网：54.替换数字文章目录 344.反转字符串思路与重点 541. 反转字符串II思路与重点 卡码网&amp;#xff1a;54.替换数字思路与重点 344.反转字符串 
题目链接&amp;#xff1a;344. 反转字符串 - 力扣&amp;#xff08;LeetCode&amp;#xff09;讲解链接&amp;#xff1a;代码随想录 (programmercarl.com)状态&amp;#xff…阅读更多...Ubuntu：用户不在sudoers文件中1、问题 
执行sudo xxx命令时&amp;#xff0c;显示&amp;#xff1a; 
user 不在sudoers文件中 
需要查看系统版本进入恢复模式修复。 
2、重启进入恢复模式 
查看系统命令&amp;#xff1a;uname -r 可能显示为&amp;#xff1a;6.8.0-45-generic 
重启Ubuntu系统&amp;#xff0c;在开机时按ESC进入模…阅读更多...SpringBoot框架的车辆管理自动化解决方案2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:19:07 +0000</pubDate>
    </item>
    <item>
      <title>使用HIP和OpenMP卸载的Jacobi求解器</title>
      <link>https://www.ppmy.cn/news/1541128.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维使用HIP和OpenMP卸载的Jacobi求解器news/2025/11/1 1:19:06/Jacobi Solver with HIP and OpenMP offloading — ROCm Blogs (amd.com)作者：Asitav Mishra, Rajat Arora, Justin Chang发布日期：2023年9月15日Jacobi方法作为求解偏微分方程（PDE）的基本迭代线性求解器在高性能计算（HPC）应用中具有广泛的应用。通过数值方法（如有限差分法、有限体积法、有限元法或其他方法）对PDE进行离散化，会产生大型稀疏方程组。像Jacobi这样的静止迭代法可以利用现代异构分层系统（包括CPU和GPU）的优势，因为它更适合并行化并且相比传统的直接方法需要更少的内存。Jacobi迭代涉及大量重复的矩阵-向量乘积操作，在很大程度上限制了每次迭代中所有组件之间的通信。这使得Jacobi方法在GPU卸载方面更具优势。在这篇博客中，我们探索了使用HIP和OpenMP目标指令进行GPU卸载的方法，并讨论了它们在实现成本和性能方面的相对优劣。注意：尽管大多数HPC应用今天都使用消息传递接口（MPI）进行分布式内存并行化，但在这篇博客中，我们仅考虑Jacobi方法的单进程实现以进行演示。Jacobi 迭代方法为了讨论 Jacobi 迭代方法，我们考虑一个具有 Dirichlet 边界条件的二维领域上的偏微分方程（Partial Differential Equation, PDE），以求解泊松方程：−∇²u(x,y) = f，这是一个广义拉普拉斯方程。在这里，u(x,y) 是域内的光滑函数。方程使用有限差分法 [1] 在笛卡尔坐标系下进行离散，采用 5 点模板：上述有限差分拉普拉斯算子导致了矢量未知数 u 上的稀疏矩阵算子 A：Au = f。这里：如果矩阵分解为对角线部分（D）、下三角部分（L）和上三角部分（U）（A = D + L + U），则 Jacobi 迭代方法可以表示为：这里，k 指的是迭代次数。的值是初始条件。Jacobi代码结构串行（CPU）Jacobi求解器的主要组件包括：设置Jacobi对象CreateMesh()InitializeData()执行Jacobi方法Laplacian()BoundaryConditions()Update()Norm()以下代码显示了Jacobi求解器程序。在代码中，Jacobi_t Jacobi(mesh);完成了Jacobi对象的设置，而Jacobi.Run() 执行了Jacobi求解器。int main(int argc, char ** argv)
{mesh_t mesh;//  从命令行参数中提取拓扑结构和域维度ParseCommandLineArguments(argc, argv, mesh);Jacobi_t Jacobi(mesh);Jacobi.Run();return STATUS_OK;
}设置Jacobi对象Jacobi对象由两个主要部分组成：设置Jacobi对象CreateMesh()InitializeData()例程CreateMesh()创建一个具有均匀网格间距的二维笛卡尔网格——参见图1。例程InitializeData()初始化主机变量u（代码中的h_U），矩阵-向量乘积Au（h_AU），右侧向量f（h_RHS），以及残差向量f−Au（h_RES）。它还为这些变量应用边界条件。图1：用于离散化计算域的均匀矩形网格执行雅可比方法雅可比求解器的主要执行包括以下函数：运行雅可比方法Laplacian()BoundaryConditions()Update()Norm()下面的代码展示了每个雅可比迭代中函数调用的顺序：// 在雅可比方法中使用的标量因子const dfloat factor = 1/(2.0/(mesh.dx*mesh.dx) + 2.0/(mesh.dy*mesh.dy));const dfloat _1bydx2 = 1.0/(mesh.dx*mesh.dx);const dfloat _1bydy2 = 1.0/(mesh.dy*mesh.dy);while ((iterations &lt; JACOBI_MAX_LOOPS) &amp;&amp; (residual &gt; JACOBI_TOLERANCE)){// 计算拉普拉斯算子Laplacian(mesh, _1bydx2, _1bydy2, h_U, h_AU);// 应用边界条件BoundaryConditions(mesh, _1bydx2, _1bydy2, h_U, h_AU);// 更新解Update(mesh, factor, h_RHS, h_AU, h_RES, h_U);// 计算残差 = ||U||residual = Norm(mesh, h_RES);++iterations;}Laplacian()函数执行如前所述的主要拉普拉斯算子运算，代码如下：// AU_i,j = (-U_i+1,j + 2U_i,j - U_i-1,j)/dx^2 +
//          (-U_i,j+1 + 2U_i,j - U_i,j-1)/dy^2
void Laplacian(mesh_t&amp; mesh,const dfloat _1bydx2,const dfloat _1bydx2,const dfloat * U,dfloat * AU) {int stride = mesh.Nx;int localNx = mesh.Nx - 2;int localNy = mesh.Ny - 2;for (int j=0;j&lt;localNy;j++) {for (int i=0;i&lt;localNx;i++) {const int id = (i+1) + (j+1)*stride;const int id_l = id - 1;const int id_r = id + 1;const int id_d = id - stride;const int id_u = id + stride;AU[id] = (-U[id_l] + 2*U[id] - U[id_r])/(dx*dx) +(-U[id_d] + 2*U[id] - U[id_u])/(dy*dy);}}
}BoundaryConditions()函数用于将边界条件应用于Au项，代码如下：void BoundaryConditions(mesh_t&amp; mesh,const dfloat _1bydx2,const dfloat _1bydy2,dfloat* U,dfloat* AU) {const int Nx = mesh.Nx;const int Ny = mesh.Ny;for (int id=0;id&lt;2*Nx+2*Ny-2;id++) {//根据id的大小获取节点的(i,j)坐标int i, j;if (id &lt; Nx) { //底部i = id;j = 0;} else if (id&lt;2*Nx) { //顶部i = id - Nx;j = Ny-1;} else if (id &lt; 2*Nx + Ny-1) { //左侧i = 0;j = id - 2*Nx + 1;} else { //右侧i = Nx-1;j = id - 2*Nx - Ny + 2;}const int iid = i+j*Nx;const dfloat U_d = (j==0)    ?  0.0 : U[iid - Nx];const dfloat U_u = (j==Ny-1) ?  0.0 : U[iid + Nx];const dfloat U_l = (i==0)    ?  0.0 : U[iid - 1];const dfloat U_r = (i==Nx-1) ?  0.0 : U[iid + 1];AU[iid] = (-U_l + 2*U[iid] - U_r)*_1bydx2 +(-U_d + 2*U[iid] - U_u)*_1bydy2;}
}雅可比求解器的核心在于`Update()`函数，该函数执行雅可比迭代：// U = U + D^{-1}*(RHS - AU)void Update(mesh_t&amp; mesh,const dfloat factor,dfloat* RHS,dfloat* AU,dfloat* RES,dfloat* U)
{const int N = mesh.N;for (int id=0;id&lt;N;id++){const dfloat r_res = RHS[id] - AU[id];RES[id] = r_res;U[id] += r_res*factor;}
}Norm()函数是执行归约运算并返回用于检查求解器收敛性的标量残差的主函数：dfloat Norm(mesh_t&amp; mesh, dfloat *U) {dfloat norm = 0;const int N = mesh.N;const dfloat dx = mesh.dx;const dfloat dy = mesh.dy;for (int id=0; id &lt; N; id++) {*norm2 += U[id] * U[id] * dx * dy;}return sqrt(norm)/N;
}接下来的两个部分将描述将此求解器移植到GPU上的两种可能方法。使用 HIP 的 GPU 卸载首先，我们考虑使用 HIP 进行端口移植，将 Jacobi 求解器卸载到 GPU 上。我们编写了 HIP 内核来移植上述四个主要代码区域。请注意，为了获得最优化的性能，我们为所有内核使用了 256 (BLOCK_SIZE) 的启动边界。以下代码片段显示了每次 Jacobi 迭代中的函数调用，其顺序与串行代码相同：// Jacobi 方法中使用的标量因子const dfloat factor = 1/(2.0/(mesh.dx*mesh.dx) + 2.0/(mesh.dy*mesh.dy));const dfloat _1bydx2 = 1.0/(mesh.dx*mesh.dx);const dfloat _1bydy2 = 1.0/(mesh.dy*mesh.dy);auto timerStart = std::chrono::high_resolution_clock::now();while ((iterations &lt; JACOBI_MAX_LOOPS) &amp;&amp; (residual &gt; JACOBI_TOLERANCE)){// 计算拉普拉斯算子Laplacian(mesh, _1bydx2, _1bydy2, HD_U, HD_AU);// 应用边界条件BoundaryConditions(mesh, _1bydx2, _1bydy2, HD_U, HD_AU);//更新解Update(mesh, factor, HD_RHS, HD_AU, HD_RES, HD_U);// 计算残差 = ||U||residual = Norm(mesh, HD_RES);++iterations;}一些内核启动配置在InitializeData()中设置，如以下代码片段所示：// ...// 内核启动配置mesh.block.x = BLOCK_SIZE;mesh.grid.x = std::ceil(static_cast&lt;double&gt;(mesh.Nx * mesh.Ny) / mesh.block.x);mesh.grid2.x = std::ceil((2.0*mesh.Nx+2.0*mesh.Ny-2.0)/mesh.block.x);// ...LaplacianKernel()和启动该内核的Laplacian()例程的代码如下：__global__
__launch_bounds__(BLOCK_SIZE)
void LaplacianKernel(const int localNx,const int localNy,const int stride,const dfloat fac_dx2,const dfloat fac_dy2,const dfloat * U,dfloat * AU) 
{int tid = GET_GLOBAL_ID_0;if (tid &gt; localNx + localNy * stride || tid &lt; stride + 1)return;const int tid_l = tid - 1;const int tid_r = tid + 1;const int tid_d = tid - stride;const int tid_u = tid + stride;__builtin_nontemporal_store((-U[tid_l] + 2*U[tid] - U[tid_r])*fac_dx2 +(-U[tid_d] + 2*U[tid] - U[tid_u])*fac_dy2, &amp;(AU[tid]));
}void Laplacian(mesh_t&amp; mesh,const dfloat _1bydx2,const dfloat _1bydy2,dfloat* U,dfloat* AU)
{int stride = mesh.Nx;int localNx = mesh.Nx-2;int localNy = mesh.Ny-2;LaplacianKernel&lt;&lt;&lt;mesh.grid,mesh.block&gt;&gt;&gt;(localNx, localNy, stride, _1bydx2, _1bydy2, U, AU);
}内核BoundaryConditionsKernel()和其启动函数如下所示：__global__
__launch_bounds__(BLOCK_SIZE)
void BoundaryConditionsKernel(const int Nx,const int Ny,const int stride,const dfloat fac_dx2,const dfloat fac_dy2,const dfloat * U,dfloat * AU)
{const int id = GET_GLOBAL_ID_0;if (id &lt; 2*Nx+2*Ny-2){//根据 id 的大小获取节点的 (i,j) 坐标int i = Nx-1;int j = id - 2*Nx - Ny + 2;if (id &lt; Nx){ //底部i = id; j = 0;}else if (id&lt;2*Nx){ //顶部i = id - Nx; j = Ny-1;}else if (id &lt; 2*Nx + Ny-1){ //左侧i = 0; j = id - 2*Nx + 1;}const int iid = i+j*stride;const dfloat U_d = (j==0)    ?  0.0 : U[iid - stride];const dfloat U_u = (j==Ny-1) ?  0.0 : U[iid + stride];const dfloat U_l = (i==0)    ?  0.0 : U[iid - 1];const dfloat U_r = (i==Nx-1) ?  0.0 : U[iid + 1];__builtin_nontemporal_store((-U_l + 2*U[iid] - U_r)*fac_dx2 +(-U_d + 2*U[iid] - U_u)*fac_dy2, &amp;(AU[iid]));}
}void BoundaryConditions(mesh_t&amp; mesh,const dfloat _1bydx2,const dfloat _1bydy2,dfloat* U,dfloat* AU) {const int Nx = mesh.Nx;const int Ny = mesh.Ny;BoundaryConditionsKernel&lt;&lt;&lt;mesh.grid2,mesh.block&gt;&gt;&gt;(Nx, Ny, Nx, _1bydx2, _1bydy2, U, AU);
}以下代码展示了UpdateKernel()的 HIP 实现：__global__
__launch_bounds__(BLOCK_SIZE)
void UpdateKernel(const int N,const dfloat factor,const dfloat *__restrict__ RHS,const dfloat *__restrict__ AU,dfloat *__restrict__ RES,dfloat *__restrict__ U)
{int tid = GET_GLOBAL_ID_0;dfloat r_res;for (int i = tid; i &lt; N; i += gridDim.x * blockDim.x){r_res = RHS[i] - AU[i];RES[i] = r_res;U[i] += r_res*factor;}
}void Update(mesh_t&amp; mesh,const dfloat factor,dfloat* RHS,dfloat* AU,dfloat* RES,dfloat* U)
{UpdateKernel&lt;&lt;&lt;mesh.grid,mesh.block&gt;&gt;&gt;(mesh.N, factor, RHS, AU, RES, U);
}以下代码展示了NormKernel()的 HIP 实现，该实现基于 BabelStream 中的 HIP dot 实现：#define NORM_BLOCK_SIZE 512
#define NORM_NUM_BLOCKS 256
__global__
__launch_bounds__(NORM_BLOCK_SIZE)
void NormKernel(const dfloat * a, dfloat * sum, int N)
{__shared__ dfloat smem[NORM_BLOCK_SIZE];int i = GET_GLOBAL_ID_0;const size_t si = GET_LOCAL_ID_0;smem[si] = 0.0;for (; i &lt; N; i += NORM_BLOCK_SIZE * NORM_NUM_BLOCKS)smem[si] += a[i] * a[i];for (int offset = NORM_BLOCK_SIZE &gt;&gt; 1; offset &gt; 0; offset &gt;&gt;= 1){__syncthreads();if (si &lt; offset) smem[si] += smem[si+offset];}if (si == 0)sum[GET_BLOCK_ID_0] = smem[si];
}void NormSumMalloc(mesh_t &amp;mesh)
{hipHostMalloc(&amp;mesh.norm_sum, NORM_NUM_BLOCKS*sizeof(dfloat), hipHostMallocNonCoherent);
}dfloat Norm(mesh_t&amp; mesh, dfloat *U)
{dfloat norm = 0.0;const int N = mesh.N;const dfloat dx = mesh.dx;const dfloat dy = mesh.dy;NormKernel&lt;&lt;&lt;NORM_NUM_BLOCKS,NORM_BLOCK_SIZE&gt;&gt;&gt;(U, mesh.norm_sum, N);hipDeviceSynchronize();for (int id=0; id &lt; NORM_NUM_BLOCKS; id++)norm += mesh.norm_sum[id];return sqrt(norm*dx*dy)*mesh.invNtotal;
}请注意，缓冲区mesh.norm_sum是非一致性的固定内存，这意味着它被映射到 GPU 的地址空间中。有关这种内存的更详细讨论，请参阅这篇文章。参数NORM_BLOCK_SIZE和NORM_NUM_BLOCKS可以且应该根据您的硬件进行优化。下表总结了 Jacobi 求解器中的主要内核在 HIP 端口化后的每次迭代耗时。网格大小为 4096×4096。在 1000 次迭代中，整个过程的总壁钟时间为 858 毫秒，单个 MI250 GPU 核心上实现了 332 GFLOP/s 的计算性能。最耗时的代码区域是 Jacobi 的Update()例程。内核平均时间 (ms)百分比Update0.5160.9Laplacian0.2225.7Norm0.1012.3BoundaryConditions0.010.9使用OpenMP进行GPU卸载在本节中，我们探讨了OpenMP卸载。我们考虑了结构化和非结构化的目标数据映射方法。使用    -fopenmp标志的clang++编译器用于构建openmp目标卸载区域。更多详情可以在codes/Makefile中找到。例如，以下命令显示了如何编译Jacobi.cpp文件：/opt/rocm/llvm/bin/clang++ -Ofast -g -fopenmp --offload-arch=gfx90a -c Jacobi.cpp -o Jacobi.o结构化目标数据映射让我们考虑在HIP移植的Jacobi求解器中观察到的最昂贵的代码区域，Update()。一种简单的OpenMP目标卸载方法如下：void Update(mesh_t&amp; mesh,const dfloat factor,dfloat* RHS,dfloat* AU,dfloat* RES,dfloat* U)
{const int N = mesh.N;#pragma omp target data map(to:RHS[0:N],AU[0:N]) map(from:RES[0:N]) map(tofrom:U[0:N])#pragma omp target teams distribute parallel forfor (int id=0;id&lt;N;id++){const dfloat r_res = RHS[id] - AU[id];RES[id] = r_res;U[id] += r_res*factor;}
}状态变量被映射到设备区域，并在目标区域中调用Jacobi更新函数。这是一个结构化目标映射构造的示例。对于Laplacian和Norm函数，也进行了类似的结构化目标映射。void Laplacian(mesh_t&amp; mesh,const dfloat _1bydx2,const dfloat _1bydy2,dfloat* U,dfloat* AU)
{int stride = mesh.Nx;int localNx = mesh.Nx-2;int localNy = mesh.Ny-2;#pragma omp target data map(to:U[0:mesh.N]) map(tofrom:AU[0:mesh.N])#pragma omp target teams distribute parallel for collapse(2)for (int j=0;j&lt;localNy;j++) {for (int i=0;i&lt;localNx;i++) {const int id = (i+1) + (j+1)*stride;const int id_l = id - 1;const int id_r = id + 1;const int id_d = id - stride;const int id_u = id + stride;AU[id] = (-U[id_l] + 2*U[id] - U[id_r])*_1bydx2 +(-U[id_d] + 2*U[id] - U[id_u])*_1bydy2;}}
}
dfloat Norm(mesh_t&amp; mesh, dfloat *U)
{dfloat norm = 0.0;const int N = mesh.N;const dfloat dx = mesh.dx;const dfloat dy = mesh.dy;#pragma omp target data map(to: U[0:mesh.N])#pragma omp target teams distribute parallel for reduction(+:norm)for (int id=0; id &lt; N; id++) {norm += U[id] * U[id] * dx * dy;}return sqrt(norm)/N;
}然而，这种实现导致求解器的性能非常差，每次主循环迭代需要51.4毫秒，而使用HIP则只需要1.1毫秒。这大约慢了超过46倍。查看图2，我们发现大量时间花费在`hsa_signal_wait_scacquire`和特别是`async-copy`内核中，这是由于每次迭代所需的映射。图 2：使用结构化目标数据映射的Jacobi卸载内核的时间轴非结构化 target 数据映射我们注意到，Jacobi 求解器所需的大多数状态变量可以驻留在设备上。仅在输出最终的残差和需要状态解的数据时，才需要将数据映射到主机（CPU）。因此，我们可以切换到_非结构化_目标数据映射构造，它确保数据在target enter data和target exit data映射构造之间驻留在设备上。在 Jacobi 迭代之前执行主机到设备的拷贝，并在循环结束之后释放设备数据，如下所示：void Jacobi_t::Run()
{const int N = mesh.N;#pragma omp target enter data map(to: mesh,h_U[0:N],h_AU[0:N],h_RES[0:N],h_RHS[0:N])...while ((iterations &lt; JACOBI_MAX_LOOPS) &amp;&amp; (residual &gt; JACOBI_TOLERANCE)) {Laplacian(mesh, _1bydx2, _1bydy2, HD_U, HD_AU);BoundaryConditions(mesh, _1bydx2, _1bydy2, HD_U, HD_AU);Update(mesh, factor, HD_RHS, HD_AU, HD_RES, HD_U);residual = Norm(mesh, HD_RES);++iterations;}...#pragma omp target exit data map(release: h_U[0:N],h_AU[0:N],h_RES[0:N],h_RHS[0:N])
}这避免了在每次迭代中需要对主机到设备和设备到主机的数据进行重复映射，这些在_结构化_target数据映射构造在所有例程中都需要：Laplacian、BoundaryConditions、Update 和 Norm。这意味着在这些例程中移除了#pragma omp target data map()构造。下面代码示例了现在更新的 Norm 函数在目标区域不再有结构化映射构造。这里，状态向量 U 在 Jacobi 求解器开始时已经使用非结构化数据映射构造映射到设备。dfloat Norm(mesh_t&amp; mesh, dfloat *U)
{dfloat norm = 0.0;const int N = mesh.N;const dfloat dx = mesh.dx;const dfloat dy = mesh.dy;#pragma omp target teams distribute parallel for reduction(+:norm)for (int id=0; id &lt; N; id++) {norm += U[id] * U[id] * dx * dy;}return sqrt(norm)/N;
}下图3展示了主要的 Jacobi 求解器内核的时间轴。图中清楚地显示，与图 2 中的第一次简单卸载实现相比，总的hsa_signal_wait_scacquire内核调用次数显著减少。图 3：使用非结构化映射优化 Jacobi 卸载内核的时间轴下表总结了使用 Clang 编译器进行 OpenMP 卸载实现的 Jacobi 求解器主要内核的时间。网格尺寸为4096×4096，与 HIP 版本一致。在一千次迭代中的总墙时钟时间为999毫秒，与早期在 MI250 GPU 上观察到的 HIP 实现值非常接近。285 GFLOPs 的计算性能与 HIP 实现中观察到的值相当。总体而言，使用 OpenMP 卸载的主要代码区域计算时间与 HIP 端口化所得的数值非常相近。内核平均时间 (ms)百分比Update0.5157.9Laplacian0.2527.6Norm0.1112.2BoundaryConditions0.022.2HIP 与 OpenMP Offload由于稀疏矩阵操作的雅可比求解器（其算术强度 AI = FLOPs/带宽约为 0.17）处于内存受限状态，因此我们对比了 HIP 和 OpenMP offload 实现中内核实现的内存带宽（BW）。下表对比了 HIP 和 OpenMP offload 实现的 HBM 带宽（GB/s）值。内核HIP HBM  带宽(GB/s)OpenMP Offload HBM 带宽 (GB/s)更新Update13061297拉普拉斯Laplacian12401091范数Norm13251239边界条件BoundaryConditions15150大多数内核的带宽值非常接近 MI250 的可实现峰值带宽（约 1300-1400 GB/s）。边界条件的工作量太小，无法使 GPU 饱和，因此值较小。下图（图4）展示了使用 HIP 和 OpenMP offload 实现的更新内核的屋顶线（Roofline [3] ）。从屋顶线图中可以看出，更新内核在两种实现中都非常接近内存受限状态下的屋顶线。这与上表中的 HBM 数据一致。图4: 使用 HIP（左）和 OpenMP offload（右）的更新内核屋顶线类似的观察结果也适用于拉普拉斯内核中，从下图（图5）展示的两种 GPU offload 实现的屋顶线可以看出。图5: 使用 HIP（左）和 OpenMP offload（右）的拉普拉斯内核屋顶线结论在这篇博客文章中，我们展示了使用 HIP 和 OpenMP 目标卸载进行有限差分 Jacobi 求解器的 GPU 卸载。HIP 实现需要将主机代码替换为新的 HIP 内核，并优化内核启动参数，包括线程块和网格大小以及启动界限。而 OpenMP 卸载实现则是基于指令，仅需对现有主机代码库进行较少的修改。对于所考虑的问题规模，OpenMP 卸载可以实现与 HIP GPU 移植相媲美甚至有时更好的计算性能和带宽指标，而编码工作量则大大减少。这说明了像 OpenMP 卸载这样的指令集 GPU 移植相较于需要重写代码的 HIP 移植方法所能提供的优势。值得一提的是，对于更复杂的应用程序，OpenMP 可能在优化目标卸载结构和参数方面提供的选择有限，从而限制了额外的性能提升。未来，我们将跟进这篇博客文章，发布 Jacobi 求解器的 Fortran OpenMP 卸载版本。作者要感谢 Brian Cornille 和 Mahdieh Ghazimirsaeed 对文稿的有益评论和反馈。附带代码示例如果您有任何问题或评论，请在 GitHub 讨论区 与我们联系。[1]请参见 有限差分 博客文章。[2]结果是通过 ROCM v.5.6.0-67 获得的。这些数据并非经过验证的性能数据，仅用于展示代码修改带来的相对性能提升。实际性能结果将依赖于多个因素，包括系统配置和环境设置。[3]这些屋顶线图是使用 AMD 的 Omniperf 工具获取的。http://www.ppmy.cn/news/1541128.html相关文章每日一练 —— set习题1. 两个数组的交集 题目链接&amp;#xff1a;349. 两个数组的交集 - 力扣&amp;#xff08;LeetCode&amp;#xff09;https://leetcode.cn/problems/intersection-of-two-arrays/description/ 这题使用set&amp;#xff0c;因为set具有排序和去重的特性 思路&amp;#xff1a; 1.两个值相等就是交集 2.…阅读更多...【前端】如何制作一个自己的网页（14）当我们还需要对网页中的内容进行局部样式的修改。这时候&amp;#xff0c;就需要用到HTML中的重要元素&amp;#xff1a;span。 span是一个行内元素&amp;#xff0c;可以对HTML文档中的内容进行局部布局。  如图&amp;#xff0c;我们给标题和段落元素的部分内容设置了各种样式。 接下来&amp;#xff0…阅读更多...【第一章·为什么要学习编程】目录 
1.1 学习编程的热潮 
1.1.1 席卷全球的“编程一小时” 
1.1.2 资本汹涌的少儿编程 
1.1.3 “再不学编程就晚了” 
1.2 为什么要学编程 
1.3 什么是“编程” 
1.4 怎么学编程 
1.4.1 一切都是计算 
1.4.2 学编程不是学语法 
1.4.3 动手&amp;#xff0c;动手&amp;#xff0c;再动手…阅读更多...1282：最大子矩阵题目&amp;#xff1a; 
已知矩阵的大小定义为矩阵中所有元素的和。给定一个矩阵&amp;#xff0c;你的任务是找到最大的非空(大小至少是1  1)子矩阵。 
比如&amp;#xff0c;如下4  4的矩阵 
0 -2 -7 0 9 2 -6 2 -4 1 -4 1 -1 8 0 -2 的最大子矩阵是 
9 2 -4 1 -1 8 这个子矩阵的大小是15。 …阅读更多...代码随想录算法训练营Day08 | 344.反转字符串、541. 反转字符串II、卡码网：54.替换数字文章目录 344.反转字符串思路与重点 541. 反转字符串II思路与重点 卡码网&amp;#xff1a;54.替换数字思路与重点 344.反转字符串 
题目链接&amp;#xff1a;344. 反转字符串 - 力扣&amp;#xff08;LeetCode&amp;#xff09;讲解链接&amp;#xff1a;代码随想录 (programmercarl.com)状态&amp;#xff…阅读更多...Ubuntu：用户不在sudoers文件中1、问题 
执行sudo xxx命令时&amp;#xff0c;显示&amp;#xff1a; 
user 不在sudoers文件中 
需要查看系统版本进入恢复模式修复。 
2、重启进入恢复模式 
查看系统命令&amp;#xff1a;uname -r 可能显示为&amp;#xff1a;6.8.0-45-generic 
重启Ubuntu系统&amp;#xff0c;在开机时按ESC进入模…阅读更多...SpringBoot框架的车辆管理自动化解决方案2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...Linux 系统上生成大文件的多种方法在 Linux 系统上生成大文件有多种方法&amp;#xff0c;具体取决于你的需求&amp;#xff08;例如&amp;#xff0c;文件内容、生成速度等&amp;#xff09;。以下是一些常见的方法&amp;#xff1a; 
1. 使用 dd 命令 
dd 是一个强大的命令行工具&amp;#xff0c;用于转换和复制文件。你可以使用它来创建一个…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:19:06 +0000</pubDate>
    </item>
    <item>
      <title>每日一练 —— set习题</title>
      <link>https://www.ppmy.cn/news/1541127.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维每日一练 —— set习题news/2025/11/1 1:19:05/1.两个数组的交集题目链接：349. 两个数组的交集 - 力扣（LeetCode）https://leetcode.cn/problems/intersection-of-two-arrays/description/这题使用set，因为set具有排序和去重的特性思路：1.两个值相等就是交集2.小的那个值++，因为是小的那个值，那么后面就一定不会有这个值，那么小的一定不是交集class Solution {
public:vector&lt;int&gt; intersection(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {vector&lt;int&gt; v;set&lt;int&gt; s1;set&lt;int&gt; s2;s1.insert(nums1.begin(),nums1.end());s2.insert(nums2.begin(),nums2.end());auto it1 = s1.begin();auto it2 = s2.begin();while(it1 != s1.end() &amp;&amp; it2 != s2.end()){if(*it1 &lt; *it2){it1++;}else if(*it1 &gt; *it2){it2++;}else{v.push_back(*it1);it1++;it2++;}}return v;}
};在这里提一下如果是找差集的话2.环形链表II题目链接：142. 环形链表 II - 力扣（LeetCode）https://leetcode.cn/problems/linked-list-cycle-ii/description/这题使用set存储的是链表每个节点，当插入到重复的节点时，该节点就是入环的第一个节点，然后直接返回就行思路：先定义一个set，set里面存储一个节点的指针，用一个指针把链表给遍历一遍，比如说先遍历一个3，用3查找一下在不在set里面，不在的话就把3这个节点的指针的地址放进set里面，然后继续遍历，当再次遍历到2这个节点时，发现set里面有2这个节点的地址，那么就说明这个链表是环形链表，并且2是这个环形链表的入口点class Solution {
public:ListNode *detectCycle(ListNode *head){set&lt;ListNode*&gt; L;ListNode* cur = head;while(cur){if(L.count(cur)){return cur;}else{L.insert(cur);}cur = cur-&gt;next;}return nullptr;}
};完结撒花~http://www.ppmy.cn/news/1541127.html相关文章【前端】如何制作一个自己的网页（14）当我们还需要对网页中的内容进行局部样式的修改。这时候&amp;#xff0c;就需要用到HTML中的重要元素&amp;#xff1a;span。 span是一个行内元素&amp;#xff0c;可以对HTML文档中的内容进行局部布局。  如图&amp;#xff0c;我们给标题和段落元素的部分内容设置了各种样式。 接下来&amp;#xff0…阅读更多...【第一章·为什么要学习编程】目录 
1.1 学习编程的热潮 
1.1.1 席卷全球的“编程一小时” 
1.1.2 资本汹涌的少儿编程 
1.1.3 “再不学编程就晚了” 
1.2 为什么要学编程 
1.3 什么是“编程” 
1.4 怎么学编程 
1.4.1 一切都是计算 
1.4.2 学编程不是学语法 
1.4.3 动手&amp;#xff0c;动手&amp;#xff0c;再动手…阅读更多...1282：最大子矩阵题目&amp;#xff1a; 
已知矩阵的大小定义为矩阵中所有元素的和。给定一个矩阵&amp;#xff0c;你的任务是找到最大的非空(大小至少是1  1)子矩阵。 
比如&amp;#xff0c;如下4  4的矩阵 
0 -2 -7 0 9 2 -6 2 -4 1 -4 1 -1 8 0 -2 的最大子矩阵是 
9 2 -4 1 -1 8 这个子矩阵的大小是15。 …阅读更多...代码随想录算法训练营Day08 | 344.反转字符串、541. 反转字符串II、卡码网：54.替换数字文章目录 344.反转字符串思路与重点 541. 反转字符串II思路与重点 卡码网&amp;#xff1a;54.替换数字思路与重点 344.反转字符串 
题目链接&amp;#xff1a;344. 反转字符串 - 力扣&amp;#xff08;LeetCode&amp;#xff09;讲解链接&amp;#xff1a;代码随想录 (programmercarl.com)状态&amp;#xff…阅读更多...Ubuntu：用户不在sudoers文件中1、问题 
执行sudo xxx命令时&amp;#xff0c;显示&amp;#xff1a; 
user 不在sudoers文件中 
需要查看系统版本进入恢复模式修复。 
2、重启进入恢复模式 
查看系统命令&amp;#xff1a;uname -r 可能显示为&amp;#xff1a;6.8.0-45-generic 
重启Ubuntu系统&amp;#xff0c;在开机时按ESC进入模…阅读更多...SpringBoot框架的车辆管理自动化解决方案2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...Linux 系统上生成大文件的多种方法在 Linux 系统上生成大文件有多种方法&amp;#xff0c;具体取决于你的需求&amp;#xff08;例如&amp;#xff0c;文件内容、生成速度等&amp;#xff09;。以下是一些常见的方法&amp;#xff1a; 
1. 使用 dd 命令 
dd 是一个强大的命令行工具&amp;#xff0c;用于转换和复制文件。你可以使用它来创建一个…阅读更多...Maven骨灰级教程：从小白到高手的终极指南（一）目录 
1. Maven的概念 
1.1 什么是Maven 
1.2 什么是依赖管理 
1.3 什么是项目构建 
1.4 Maven的应用场景 
1.5 为什么使用Maven 
1.6 Maven模型 
2.初识Maven 
2.1 Maven安装 
2.1.1 安装准备 
2.1.2 Maven安装目录分析 
2.1.3 Maven的环境变量 
2.2 Maven的第一个项目 
2.2.1…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:19:05 +0000</pubDate>
    </item>
    <item>
      <title>【前端】如何制作一个自己的网页（14）</title>
      <link>https://www.ppmy.cn/news/1541126.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【前端】如何制作一个自己的网页（14）news/2025/11/1 1:19:04/当我们还需要对网页中的内容进行局部样式的修改。这时候，就需要用到HTML中的重要元素：span。span是一个行内元素，可以对HTML文档中的内容进行局部布局。如图，我们给标题和段落元素的部分内容设置了各种样式。接下来，我们一起学习span元素的用法。span元素第8行，在&lt;p&gt;标签内定义了4个span元素。第2-5行，使用标签选择器，设置span元素的背景颜色为#5E80F4，字体颜色为#FFFFFF。&lt;style&gt;span {color: #FFFFFF;background-color: #5E80F4;}&lt;/style&gt;&lt;p&gt;夜曲编程是一个在线学习编程的网站，发布了&lt;span&gt;数据分析基础&lt;/span&gt;、&lt;span&gt;数据分析进阶&lt;/span&gt;、&lt;span&gt;网络爬虫&lt;/span&gt;、&lt;span&gt;网页开发基础&lt;/span&gt;等课程。&lt;/p&gt;&lt;span&gt;标签&lt;span&gt;标签也没有什么特殊的显示效果。简单来说，&lt;span&gt;标签中的内容会被标记，当它结合CSS设置样式时，其中的内容才会有视觉上的变化。span是一个行内元素，可以直接在段落元素p的内部对一些内容进行标记。&lt;style&gt;span {color: #FFFFFF;background-color: #5E80F4;}&lt;/style&gt;&lt;p&gt;夜曲编程是一个在线学习编程的网站，发布了&lt;span&gt;数据分析基础&lt;/span&gt;、&lt;span&gt;数据分析进阶&lt;/span&gt;、&lt;span&gt;网络爬虫&lt;/span&gt;、&lt;span&gt;网页开发基础&lt;/span&gt;等课程。&lt;/p&gt;在网页中，如果span元素出现很多，那么使用span标签选择器会改变所有span元素的样式。比如，使用span选择器就会同时设置h3和p内部的span元素样式。但是有时候，我们只需要设置特定元素中的span元素样式，那么该怎么办呢？因为span元素一般都是放在块级元素内。所以，我们要设置指定元素内的span元素样式，就需要用到后代选择器。后代选择器第3-6行，定义一个后代选择器。&lt;style&gt;/* 使用后代选择器设置样式 */p span {color: #FFFFFF;background-color: #5E80F4;}&lt;/style&gt;&lt;h3&gt;&lt;span&gt;夜曲编程&lt;/span&gt;&lt;span&gt;简介&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;夜曲编程有&lt;span&gt;数据分析&lt;/span&gt;、&lt;span&gt;网页开发基础&lt;/span&gt;等课程。&lt;/p&gt;明天，再写，具体再分析span。http://www.ppmy.cn/news/1541126.html相关文章【第一章·为什么要学习编程】目录 
1.1 学习编程的热潮 
1.1.1 席卷全球的“编程一小时” 
1.1.2 资本汹涌的少儿编程 
1.1.3 “再不学编程就晚了” 
1.2 为什么要学编程 
1.3 什么是“编程” 
1.4 怎么学编程 
1.4.1 一切都是计算 
1.4.2 学编程不是学语法 
1.4.3 动手&amp;#xff0c;动手&amp;#xff0c;再动手…阅读更多...1282：最大子矩阵题目&amp;#xff1a; 
已知矩阵的大小定义为矩阵中所有元素的和。给定一个矩阵&amp;#xff0c;你的任务是找到最大的非空(大小至少是1  1)子矩阵。 
比如&amp;#xff0c;如下4  4的矩阵 
0 -2 -7 0 9 2 -6 2 -4 1 -4 1 -1 8 0 -2 的最大子矩阵是 
9 2 -4 1 -1 8 这个子矩阵的大小是15。 …阅读更多...代码随想录算法训练营Day08 | 344.反转字符串、541. 反转字符串II、卡码网：54.替换数字文章目录 344.反转字符串思路与重点 541. 反转字符串II思路与重点 卡码网&amp;#xff1a;54.替换数字思路与重点 344.反转字符串 
题目链接&amp;#xff1a;344. 反转字符串 - 力扣&amp;#xff08;LeetCode&amp;#xff09;讲解链接&amp;#xff1a;代码随想录 (programmercarl.com)状态&amp;#xff…阅读更多...Ubuntu：用户不在sudoers文件中1、问题 
执行sudo xxx命令时&amp;#xff0c;显示&amp;#xff1a; 
user 不在sudoers文件中 
需要查看系统版本进入恢复模式修复。 
2、重启进入恢复模式 
查看系统命令&amp;#xff1a;uname -r 可能显示为&amp;#xff1a;6.8.0-45-generic 
重启Ubuntu系统&amp;#xff0c;在开机时按ESC进入模…阅读更多...SpringBoot框架的车辆管理自动化解决方案2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...Linux 系统上生成大文件的多种方法在 Linux 系统上生成大文件有多种方法&amp;#xff0c;具体取决于你的需求&amp;#xff08;例如&amp;#xff0c;文件内容、生成速度等&amp;#xff09;。以下是一些常见的方法&amp;#xff1a; 
1. 使用 dd 命令 
dd 是一个强大的命令行工具&amp;#xff0c;用于转换和复制文件。你可以使用它来创建一个…阅读更多...Maven骨灰级教程：从小白到高手的终极指南（一）目录 
1. Maven的概念 
1.1 什么是Maven 
1.2 什么是依赖管理 
1.3 什么是项目构建 
1.4 Maven的应用场景 
1.5 为什么使用Maven 
1.6 Maven模型 
2.初识Maven 
2.1 Maven安装 
2.1.1 安装准备 
2.1.2 Maven安装目录分析 
2.1.3 Maven的环境变量 
2.2 Maven的第一个项目 
2.2.1…阅读更多...防火墙和堡垒机有什么区别？防火墙和堡垒机在网络安全领域都扮演着至关重要的角色，但它们在功能、部署位置、作用范围等方面存在显著差异。 
一、功能定位 
防火墙：防火墙是一种网络安全系统，主要作用是在私有网络与公网之间建立一道安全屏障，监控和控制网络流量。它通过预定义的安全规则，决定哪些数…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:19:04 +0000</pubDate>
    </item>
    <item>
      <title>【第一章·为什么要学习编程】</title>
      <link>https://www.ppmy.cn/news/1541125.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【第一章·为什么要学习编程】news/2025/11/1 1:19:02/目录1.1 学习编程的热潮1.1.1 席卷全球的“编程一小时”1.1.2 资本汹涌的少儿编程1.1.3 “再不学编程就晚了”1.2 为什么要学编程1.3 什么是“编程”1.4 怎么学编程1.4.1 一切都是计算1.4.2 学编程不是学语法1.4.3 动手，动手，再动手1.5 本章小结1.6 习题📚 欢迎来到 C 语言学习之旅！大家好！我是 Thanks_ks，一个热爱编程的技术博主。鉴于很多同学在大学阶段使用《C 语言程序设计（第 4 版）苏小红等编著》这本书，以及很多考研的同学指定参考书籍也是这本书，我决定开设这个专栏，专门用来讲解这本书的知识点，帮助大家更好地应对应试考试。如果你希望在技术上获得更大的提升，我强烈推荐你阅读我的另一个专栏：C 语言从入门到“终于走出来了”，点击此专栏名可跳转至专栏的详情页面。这个专栏不仅涵盖了 C 语言几乎全部的知识点，还详细介绍了开发工具（如 VS Code、CLion）的调试使用，并配有丰富的实战项目，能够让你更好地掌握 C 语言技能。🎯 为什么选择这个专栏？全面覆盖：本专栏将严格按照《C 语言程序设计（第 4 版）苏小红等编著》一书的章节顺序，深入浅出地解析每一个知识点，确保大家能够牢固掌握基础，为后续的进阶学习打下坚实的基础。实战演练：理论与实践相结合是学习编程的最佳途径。因此，在每个知识点的讲解之后，我都会附上精心挑选的练习题和实战项目，帮助大家在实际操作中加深理解。工具精通：推荐使用Visual Studio Code (VS Code)作为开发环境，搭配MinGW工具链，在Windows 64 位操作系统上搭建高效的学习平台。关于开发工具的详细使用方法，已经在我的另一个专栏C 语言从入门到“终于走出来了”中进行了详细介绍，建议大家前往该专栏自行查阅。🌱 我们的目标通过本专栏的学习，我希望每一位参与者都能够达到以下目标：扎实基础：掌握 C 语言的核心概念和技术，能够在各种场景下灵活运用。独立思考：培养解决问题的能力，面对编程挑战时能够独立思考并找到解决方案。持续成长：建立良好的学习习惯，不断探索新技术，成为 C 语言领域的高手。🔧 如何开始？如果你已经准备好了，就让我们一起踏上这段激动人心的旅程吧！请确保你的电脑上已经安装了VS Code和MinGW，然后打开你的编辑器，准备好迎接新的挑战。如果你在安装过程中遇到任何问题，别担心，我的另一个专栏C 语言从入门到“终于走出来了”提供了详细的安装指南和使用技巧，随时欢迎你前往查阅。现在，让我们从第一章开始，一起探索 C 语言的奥秘。无论你是编程新手，还是希望巩固基础的老手，这里都将是你成长的起点。让我们携手前进，共同开启 C 语言学习的新篇章！章节内容导读：本章力图从一个客观的角度讲述学习编程的意义。编程已不只是一项专业技能，而是与信息世界对话的工具。身处信息世界的人都应该掌握这个工具。放心，它并没有传说中的那么难。1.1 学习编程的热潮每个时代都有代表性的酷炫技能。比如原始社会是打猎，战争年代是武术，贫乏年代是烧得一手好菜。现在是信息时代、互联网时代，最酷炫的技能是什么呢？PS？做 UP 主？游戏高手？抖音红人？这些看上去是很酷，也够炫，但其实都是使用别人制作的 App 或网站，在别人设定的规则中放飞自我。真正酷炫的，是制定这些让人痴迷、甚至疯狂的规则的人。其背后的核心技能就是编程。编程是信息时代的魔法，不会编程的人，只能是 “麻瓜”。《哈利·波特》的世界里，绝大多数麻瓜都不知道魔法的存在，这是幸福的。但我们，都知道编程技术的存在，知道那些能神乎其神施展魔法的人，这让我们怎能安心做个麻瓜呢？更何况，学习编程的旋风已经刮起来了。1.1.1 席卷全球的“编程一小时”2013 年，公益网站 code.org 发起了一个在每年 12 月持续一周的活动，名为 “Hour of Code”，中文译为 “编程一小时”。官方是这样介绍的：“编程一小时是一个介绍计算机科学一小时的活动，旨在揭秘编程并说明它是任何人都可以学习的基础知识。”这个活动得到了时任美国总统巴拉克·奥巴马，以及科技巨头马克·扎克伯格（Facebook 创始人、CEO）、比尔·盖茨（Microsoft 创始人、董事长）等人的支持。他们特意拍摄视频号召人们参加这个活动。奥巴马说：“不要只是玩手机，为它编程吧！……无论你是男生还是女生，无论住在城市还是乡村，都要去试试。”比尔·盖茨甚至还亲自出镜为初学者制作了教学视频，并勉励大家说：“在今天，编程已经容易了太多。”2014 年，活动继续，奥巴马不只继续拍摄视频号召美国人民参加，而且还亲身参与了在白宫举办的一场活动。美国的热潮迅速影响全球。时至今日，据 code.org 官网统计，已经有 140 多个国家，超过千万人参加了编程一小时。参加者中年龄最小的只有 4 岁，最大的达到 104  岁。截至 2017 年年底，在中国，该活动已举办了 161 场。与美国的 47826 场相比，这个数字实在是小得可怜。但没有人怀疑，中国人也都需要学习编程这一命题。至少风险投资的人们在用真金白银表明态度。1.1.2 资本汹涌的少儿编程读者可能对资本运作并不了解，所以这里先简单科普下。风险投资之所以叫 “风险”，是因为他们的投资，有获得几十、上百甚至上千倍回报的可能；同时，血本无归的可能性也很大。高风险和高回报并存，因为他们投资的主要是初创型公司。初创型公司一般都没有盈利，甚至连获取收入的模式都没有，只有一个美好的愿景，俗称 “烧钱”。被烧掉的钱就来自风险投资。如果烧成功了，公司做大了，上市了，那风险投资的回报会非常可观。比如，1999 年，日本软银的孙正义给阿里巴巴投资了 2000 万美元，占了一定的股份。2014 年阿里巴巴在美国上市时，孙正义所持股份价值 580 亿美元，14 年时间翻了接近 3000 倍。2018 年中，阿里巴巴股价比上市时又翻了一番，所以孙正义的股份已价值千亿美元，成为了日本首富。但成功的公司其实是罕有的，创业成功率小于 1%，只不过我们看到的，只有成功者而已。所以更多情况下，投资人的钱是被烧得连灰都不剩的。投资人为什么要冒这么大的风险？因为只要投中一个阿里巴巴，回报就远超对几百个不成功公司的投资啊。所以投资的基本逻辑就是找 “风口”，在有更好未来的领域投更有可能成功的公司。风口总是在变，比如我们都感受过的移动互联网、打车、外卖、共享单车等。那汹涌的补贴、红包，都是投资人为了市场份额而洒下的真钱啊。到了 2017 — 2018 年，风口吹向了 “少儿编程”。顾名思义，少儿编程的意思就是教少年儿童编程。在其爆发的 2017 年，共有 19 笔总值超 2 亿人民币的融资。但这只是开始。2018 年仅上半年，就有共 18 笔总值近 10 亿人民币的融资。资本汹涌而来，不为别的，就是因为他们相信，会有越来越多的小学生、中学生要接受编程教育，这里有无限商机。尤其浙江省率先全国将信息技术纳入了高考的选考科目范围，更让从业者信心大增。那为什么中小学生都要学习编程呢？可能是因为孩子家长在为自己不懂编程而恐慌吧。1.1.3 “再不学编程就晚了”在 2016年 之前，网上各大在线教育机构提供的各类编程基础课程，学习者是以在校大学生为主，尤其是即将找工作的大三、大四学生。这很好理解，IT 行业薪资高、发展空间大，非计算机专业的希望能转行，计算机专业的希望能更有竞争力，所以会选择在网上学更接近实战的课程。但 2016 年之后，成年人比例就开始逐渐上升，其中不乏已有稳定工作甚至功成名就的人士。他们为什么要学编程呢？有一位学员说了这样一句话：“再不学编程就晚了！”为什么“再不学编程就晚了”？他恐慌的是什么呢？1.2 为什么要学编程人人学编程 ≠ 人人都是程序员。很多人误解 “人人学编程”，以为其目的是补充程序员的人力空缺，其实不是。程序员不是人人都想当的，更不是人人都能做的。那为什么要人人学编程？为什么 2016 年突然很多成年人开始学编程，随后少儿编程市场就火爆了？那一年发生了什么？2016 年 3 月，Google 开发的人工智能围棋软件（AlphaGo）挑战世界冠军、韩国著名围棋棋手李世石，最终以 4:1 获胜。其后的所有人机博弈中，包括 2017 年对弈排名第一的人类棋手柯洁，AlphaGo 都再未败过一局，独孤求败般地退役了。围棋，是人类顶级的脑力竞赛，却被人工智能打败了……人工智能会统治世界吗？人类将何去何从？此时，我们最能直接想到的答案是：人工智能是用程序写出来的，只有掌握了编程能力，才能凌驾于人工智能之上。基于此，很多人产生了自己或让孩子学编程的念头。听起来好像很有逻辑，但其实，这个论断并不正确。人工智能也可以写代码，这可怎么办呀？在当下，恐慌于人工智能，是大可不必的。但当下可以看到的是，软件已经改变了世界，改变了我们做事的方式，而人工智能可以加剧改变。如果我们能主导、参与，适应这些变化，那么就能更好地利用这些变化。在这个过程中，需要具备一种思维能力，这种能力叫 “计算思维”。编程是学习这种能力的最佳途径。美国卡内基·梅隆大学计算机科学系前系主任周以真教授在 2006 年发表了一篇著名的文章——《计算思维（Computational Thinking）》。文中谈到 “计算机科学的教授应当为大学新生开一门称为 ‘怎么像计算机科学家一样思维’ 的课，面向非专业的，而不仅仅是计算机科学专业的学生”，这是因为 “机器学习已经改变了统计学。……计算生物学正在改变着生物学家的思考方式。类似地，计算博弈理论正改变着经济学家的思考方式，纳米计算改变着化学家的思考方式，量子计算改变着物理学家的思考方式”，所以 “计算思维代表着一种普遍的认识和一类普适的技能，每一个人，不仅仅是计算机科学家，都应热心于它的学习和运用”。我很赞同她的观点，并尝试用更通俗的语言来解释为什么人人都应该掌握计算思维。我们所处的时代被称作 “信息时代”，计算机是信息处理的核心。商业、农业、工业、教育等都被计算机技术推动着进步。如果能知道计算机是怎么做到这一切的，也就是知道这里蕴含的计算思维是什么，那么可能给个人所在行业的发展带来帮助。否则，就只能浮于表面地应用现成软件而已。比方说，人类一直在用推理来解决很多需要思考的问题，如下棋。所以看到会下棋的程序，很多人都认为这是计算机在思考，很神奇。实际上，计算机从来都不会思考。1997 年打败国际象棋冠军卡斯帕罗夫的 IBM 深蓝电脑，使用的核心方法叫做 “搜索”，就是尽可能地穷举所有棋步的可能，从中搜索对自己最有利的那一步落子。干的是体力活，一点儿都不智能。2011 年，在一档经典的智力答题节目中，IBM 的 Watson 系统战胜了两位人类冠军。是这个程序的智力超群吗？也不是。Watson 的核心方法还是 “搜索”，搜索的是一块存满了资料，4 TB 大小的硬盘。前面提到的 AlphaGo 横扫人类棋手，使用的核心算法叫 “蒙特卡洛树搜索”。所以你看，计算机在智能方面战胜人类，依靠的是其不知疲倦的高速搜索能力和海量的数据存储能力。其实想想看，我们自己所谓的智能，是不是很多时候也就是对自己脑中的记忆进行搜索呢？也许有一天大脑的秘密被完全解开，会发现它的工作原理和计算机是类同的。不管怎样，知道了高速海量搜索这个 “计算思维”，就可以将其应用在自己遇到的难题上，用计算机找到答案。即便在日常生活中，知晓 “计算思维” 也是大有好处的。比如说 iftt.com 这个网站，提供了非常便利的界面，让用户可以利用计算思维中的 “条件分支” 概念过自动化生活。我就在 iftt.com 上设置了当我走路步数达标，就自动发微博求点赞，而不达标时，则求被嘲笑。因为怕被嘲笑，我自从设了这个自动判定，就再也没有一次不达标。iftt 已经将很多网站、App、智能设备和手机相连接，有很多有趣的玩法。比如一离开工作地点，就给家人发条短信；天气预报明天下雨，就提醒家人带伞；快到家了，自动打开空调；到电影院，手机自动静音。周以真教授举例计算思维的作用，还只局限在学术界。在工业界有不少行业，已经被计算思维改变，甚至统治。比如说金融行业的股票、期货买卖，以前是靠交易员、基金经理的经验，但现在，大量的是计算机专业的人在操盘，而他们很少自己动手交易，多数情况都是他们编写的量化交易软件在自动运作，比人为判断对市场变化的响应更快、收益更高。再比如广告行业，以前是所有人都只能看到同样的广告，现在在搜索引擎或朋友圈中，每个人看到的都不一样，是根据个体兴趣而选择性推送的，这就提升了广告效率，也节约了用户时间。不过遗憾的是，现在还很少有学校开设 “计算思维” 课程。所以程序设计课在某种程度上肩负了传播计算思维的责任。这也是对于未来不需要靠编程谋生的学生而言，最大意义之所在。通过学习编程，了解什么是抽象、递归、复用、折中等计算思维，能帮助你在各行各业中更有效地利用计算机工具解决复杂问题。有的时候，我会有一种貌似很科幻的想法：如果有一种神秘的力量在控制我们所处的世界，那么这个力量的源泉应该是一台强大的计算机（对，和电影《黑客帝国》里的设定类似）。这是科幻吗？真不能说是。在斯蒂芬·沃尔夫勒姆的一篇专访《宇宙的本质是计算》中，这位传奇科学家说：“我们的世界就是计算，就是一套简单的规则生成的复杂现象……很多时候人们说的 ‘随机性’……只是证明你还没为这个系统建立完整的模型而已。”这段话可以这么理解：物理定律是恒定的，是宇宙运转的原理；数学是物理的基础，所有物理定律都能用数学来表达；数学是复杂的，但无论多复杂的数学公式，都是从最简单的数学公式推导出来的。所以，从最基础的数学出发，就可以描述整个宇宙的运转。描述的过程就是建立数学模型的过程。现在我们描述不了，只不过因为还没有完全建立所有模型。假如模型都有了，那么就可以在计算机中模拟宇宙的一切。如果计算机的速度足够快，快得超过宇宙的运算速度，那么甚至能计算出未来会发生什么，也就是能预测未来。如果上述理论正确，那么真的就一切都是计算，一切都可以用计算机来处理，学编程就是了解、控制这一切的最便捷途径。这套理论还只是猜想，但你不觉得，掌握计算思维并通过它来了解、探究和控制这个世界，是很有意思的事情吗？这就是为什么人人都要学编程。1.3 什么是“编程”现在开始正式进入程序的世界，先了解一下什么是编程。“编程” 是 “编写程序” 的简称，术语称为 “程序设计”。程序是计算机的主宰，控制着计算机该去做什么事。所有托付给计算机去做的事情都要被编写为程序。假如没有程序，那么计算机什么事情都干不了。例如，没有安装 QQ 的计算机就不能上 QQ。如果程序是 “好” 程序，那么计算机在它的指挥下可以又快又好地完成工作；如果程序有错误，那么计算机也会严格按照错误的指令去工作，能造成什么后果，就要看错到什么程度了。所以编程这件工作非常重要。如果我们想让计算机做一件事情，但是没有现成的程序可用，就需要编程。编程的第一步是 “需求分析”，就是要弄清楚我们到底要计算机做什么。这个过程貌似无甚复杂，也确实不少人对它不屑一顾。但忽视它的结果就像考试时审题审得不对，后面的解题再漂亮，也拿不到分数，必须从头返工。所以有经验的程序员都会对需求分析相当谨慎。需求分析中最难的事情是开发者和用户之间的交流。用户不懂开发，开发者不懂用户的专业和业务，使双方都会有对牛弹琴的感觉，导致需求分析的过程要持续好几个月，甚至数年。如果开发者之前对专业就有所了解，或者用户懂一点点开发，这件事就好办得多了。这也是非计算机专业学生学习程序设计的一点儿好处。编程的第二步是 “设计”，就是搞明白计算机该怎么做这件事。设计的内容主要包括两方面，一方面是设计程序的代码结构，使程序更易于修正、扩充、维护等；另一方面是设计算法、数学建模，用数学对问题进行求解，并用程序实现求解过程。数学部分往往属于非计算机专业范畴，程序设计部分则属于计算机专业范畴。两者的配合非常重要。并不是所有的数学模型都能用程序高效地实现，而有些数学中难以处理的问题，却可以利用计算机的特点巧妙解决。计算思维就体现在这里。编程的第三步才是真正编写程序，即把设计的结果变成一行行的代码，输入到程序编辑器中。虽然 Windows 内置的记事本也可用来编写程序，但一个顺手的编辑器可让编码的过程充满惬意。骨灰级的黑客喜欢使用 VIM 或 Emacs，如果有钻研精神，可以试试。新手一般会选择更容易入门的集成开发环境（IDE，Integrated Development Environment），如 Code::Blocks、Microsoft Visual Studio、Sublime Text、ATOM 等。提示：本专栏使用Visual Studio Code (VS Code)作为开发环境，结合MinGW工具链，在Windows 64 位操作系统上搭建高效的学习平台。关于开发工具的详细使用方法，已在我的另一个专栏C 语言从入门到“终于走出来了”中进行了详细介绍，建议大家前往该专栏查阅。编程的第四步是调试程序，就是将源代码编译，变成可执行的程序，然后运行，看看是否能满足第一步的要求。如果不满足，就要查找问题，修改代码，再重新编译、运行，直到满意为止。用到的主要工具是编译器和调试器，它们一般都已经内置在 IDE 中。如果不使用 IDE，只使用编辑器，则需要单独安装，推荐使用 gcc 编译器和 gdb 调试器。两者是 Unix/Linux、macOS 平台上的主流，在 Windows 平台上亦可使用。这个过程说起来没多少，但每一个环节都有很多学问在里面。本书主要讲述的是第三和第四步。前两步虽然也有涉及，但因为程序的规模很小，所以体现得并不多。但读者必须知道，待将来编写大规模的程序时，前两步的重要性是超过后两步的。1.4 怎么学编程1.4.1 一切都是计算前面 1.2 节提出了 “一切都是计算” 这个观点。不管你是否认同现实世界中一切都是计算，在 “计算” 机里，确实一切都是计算。这是学编程最先要建立的认知。无论要用计算机处理什么，都需要将其变成数字；无论要用计算机解决什么问题，都需要将其转化成计算问题。然后，利用计算机强大的计算能力、存储能力、网络能力，做到人工无法达到的效果。比如微信的视频通话，是摄像头按固定的像素数采集你的图像，对每个像素按 0~65535 编码，不同数字代表不同颜色，然后再将每个像素的位置和颜色编码通过网络发送到对方的手机，对方手机将这些信息还原显示到屏幕上。中间过程里还有复杂的数字压缩算法、网络传输算法等参与运作，都是计算。通话时的美颜功能，也是计算，简单说就是改变皮肤所对应像素的颜色值，使其看上去更白，以及在大片皮肤色区域把混在其中的非肤色也变成肤色，就达到了去皱纹、去黑点的效果。游戏也无处不是计算。比如吃鸡游戏中，血量、子弹量都是数字，被不同子弹击中不同部位减多少血量，也都是数字。中枪的判断也是数字加计算。你的枪口的指向，敌人身体各个部位的位置，都在一个三维坐标系中数字化了。开枪瞬间，如果敌人的某个部位，正好是枪口指向在坐标系中的直线上的某一点，那么就击中了！敌人减掉相应血量后，如果剩余血量的值小于等于 0，就死亡。当然，实际处理方式有各种优化，各种复杂条件的判断，但核心总归还是数字的计算。所以，学编程先要从直观思维转变成数字思维。用数字看待一切，用计算处理一切。比如后面会学到 abcd、ABCD、0123、!@#$ 等字符在计算机中的处理，它们本质上都被编码成了一个数字。像 1，就被编码成 49（这句话很奇葩，但理解了，也就懂了数值编码）。1.4.2 学编程不是学语法编程语言也叫语言，所以很多人在学编程时用学英语的套路，去背单词、记语法。这就南辕北辙了。其实学编程更像学射击。枪有很多很多种，手枪、步枪、冲锋枪、狙击枪、机关枪、气枪、猎枪。从任何一种枪上手，都可以学射击，但过程中除了学习这种枪械的特点、功能，比如后坐力大不大、能否连发外，更重要的是学会射击的基本功，比如控制呼吸、了解心跳，什么是三点一线，风向、风速、湿度对弹道的影响，如何控制后坐力提升连发精度，等等。掌握了这些基本功，换一种枪，很快就能上手。计算思维，就是编程的基本功。如果走专业路线，那么除计算思维之外，操作系统、分布式、数据结构和算法、网络原理等也都是基本功。不走专业路线，到计算思维为止就够了。所以，学编程不要只关注语法，而是领会语法背后的编程思想，进而是计算思维。这样无论从什么语言学起，将来都能快速上手另一种新语言。1.4.3 动手，动手，再动手学编程必须动手。想学好必须多动手。想学透必须多动手做真实的软件。很多计算机专业的学生到毕业时仍不会编程，就是因为动手太少，满脑子只有理论。企业是不只认理论的，你必须能把理论动手实现出来，才愿意录用你。如果你的学校为你创造了很多动手编程的机会，那是很幸运的。别偷懒，好好做。如果你的学校没为你创造足够的动手编程机会，那也好，自己创造。这本书有很多的实验作业，把它们都做了，甚至用不同的方法多做几次。ACM 网站上有很多编程题，上去把它们一个个地切掉。比如 acm.hit.edu.cn（注意：原文中的链接可能有误或已过期，这里仅作为示例保留）。扩展：在此，博主为大家推荐几个专为编程练习和解题设计的优秀平台，比如牛客网（https://www.nowcoder.com/）和力扣（https://leetcode.cn/）等。这些网站不仅汇聚了大量的编程题目，还为学习者提供了一个实践所学知识、提升编程技能的宝贵平台。无论是初学者还是经验丰富的开发者，都能在这些平台上找到适合自己的挑战，从而不断进步。自己给自己找事做，比如写个小游戏，做个丑陋的 app。别求这东西有用、酷炫，就是让自己有程序可编。当然，作品有用酷炫就更好了。参加各种编程比赛、创新比赛，别为了拿奖，就为了让自己能动手。读开源软件的代码，为它们贡献代码，哪怕只是贡献中文翻译。如果本科阶段写过一万行代码，那么任何公司都会郑重考虑你的。如果写过 3 万行，那你就是风毛麟角的选手了。1.5 本章小结无论未来在哪个行业，是否从事计算机相关的技术工作，掌握计算思维都是大有裨益，甚至是必须的。学习编程是了解和践行计算思维的最佳途径。而学编程的最佳途径是，不断编程。1.6 习题问：查找资料，总结目前排名前 10 的编程语言各自的特点和主要应用领域。答：编程语言排名网站（TIOBE）：https://www.tiobe.com/tiobe-index/以下是目前排名前 10 的编程语言各自的特点和主要应用领域的表格总结：编程语言特点主要应用领域Python简洁高效、易学、可移植性强、丰富的标准库Web 开发、数据分析、人工智能、科学计算、游戏开发等C++面向对象、高效、跨平台、可扩展、低级控制操作系统、数据库管理系统、游戏引擎、网络应用程序、大型企业软件等Java面向对象、可移植性、高效性、安全性跨平台应用、互联网开发、游戏开发、金融领域、大数据处理等C简洁高效、灵活、跨平台性强、支持系统级编程系统软件开发、应用软件开发、嵌入式软件开发、游戏开发等C#面向对象、简单易学、安全性、高性能、可移植性桌面应用程序、Web 应用程序、移动应用程序、游戏开发、大数据处理等JavaScript解释型脚本语言、面向对象、函数式编程、事件驱动编程Web 前端开发、Web 后端开发（如 Node.js）、移动应用程序开发、游戏开发等Visual Basic面向对象和可视化的程序设计、事件驱动的运行机制、结构化的程序设计语言程序设计语言和软件开发工具Go高效、并发、简洁、支持轻量级线程和通道网络编程、高并发服务器、云计算、区块链、人工智能等Fortran适用于数值计算、科学计算和工程计算科学计算、数值分析、工程计算、气象预测等Delphi/ObjecraS（Object Pascal的扩展）面向对象、可视化开发环境、事件驱动编程Windows 桌面应用程序开发、数据库应用程序开发、企业级应用开发等问：你所在专业最常用的支持二次开发的软件是什么？二次开发的意思是可以为该软件编写插件程序，扩充其功能。它的开发接口都支持什么编程语言？请通过网络等媒体查找答案。答：在计算机科学与技术专业中，Visual Studio Code (VS Code) 是一个非常常用且支持二次开发的软件。VS Code 通过插件系统允许用户扩展其功能，常见的开发语言包括 TypeScript 和 JavaScript。开发者可以利用这些语言编写插件，增加如语法高亮、代码片段、调试支持等功能，使编辑器更加个性化和高效。问：查找资料，解释什么是图灵测试。答：图灵测试是由英国数学家和计算机科学家阿兰·图灵提出的一种测试机器是否具有人类智能的方法。在这个测试中，如果一台机器能够在与人类的文本对话中让多数评委无法区分其与真实人类的区别，那么这台机器就被认为通过了图灵测试，表明它具有一定的智能水平。简而言之，图灵测试是用来评估机器能否表现出与人类似的智能行为的标准。问：程序和软件有何不同？答：程序是指一组指令，用于告诉计算机执行特定任务。而软件则是指计算机系统中的程序及其相关数据和文档的总称。简而言之，程序是软件的一部分，软件除了包含程序外，还包括使程序能够正常运行所需的各种资源。问：人与计算机之间用什么语言交流？如何实现更有效的人机交流？答：人与计算机之间的交流主要通过编程语言和图形用户界面（GUI）来实现。编程语言如 Python、Java 等允许用户编写指令控制计算机，而 GUI 则提供了一种直观的操作方式，让用户可以通过点击、拖拽等动作与计算机互动。为了实现更有效的人机交流，可以采用自然语言处理技术，使计算机更好地理解人类语言；同时，优化用户界面设计，使之更加符合人的操作习惯，也能显著提高交流效率。问：程序开发的基本步骤是什么？答：程序开发的基本步骤通常包括以下几个阶段：需求分析：确定项目的目标和需求，明确用户需要解决的问题。设计：根据需求设计软件架构和详细逻辑，规划程序的结构和功能。编写程序：按照设计文档编写代码，实现软件的功能。调试程序：测试程序，发现并修复错误，确保软件按预期工作。问：程序在计算机内部是如何运行的？答：程序在计算机内部的运行过程大致如下：加载：程序首先被加载到计算机的内存中。编译或解释：如果是编译型语言，程序会被编译成机器码；如果是解释型语言，则会在运行时逐行解释执行。执行：计算机的 CPU 读取内存中的指令并逐条执行，完成程序指定的任务。输出：执行结果通过屏幕、文件或其他方式输出给用户。整个过程中，操作系统负责管理程序的运行，分配必要的资源如内存和 CPU 时间。http://www.ppmy.cn/news/1541125.html相关文章1282：最大子矩阵题目&amp;#xff1a; 
已知矩阵的大小定义为矩阵中所有元素的和。给定一个矩阵&amp;#xff0c;你的任务是找到最大的非空(大小至少是1  1)子矩阵。 
比如&amp;#xff0c;如下4  4的矩阵 
0 -2 -7 0 9 2 -6 2 -4 1 -4 1 -1 8 0 -2 的最大子矩阵是 
9 2 -4 1 -1 8 这个子矩阵的大小是15。 …阅读更多...代码随想录算法训练营Day08 | 344.反转字符串、541. 反转字符串II、卡码网：54.替换数字文章目录 344.反转字符串思路与重点 541. 反转字符串II思路与重点 卡码网&amp;#xff1a;54.替换数字思路与重点 344.反转字符串 
题目链接&amp;#xff1a;344. 反转字符串 - 力扣&amp;#xff08;LeetCode&amp;#xff09;讲解链接&amp;#xff1a;代码随想录 (programmercarl.com)状态&amp;#xff…阅读更多...Ubuntu：用户不在sudoers文件中1、问题 
执行sudo xxx命令时&amp;#xff0c;显示&amp;#xff1a; 
user 不在sudoers文件中 
需要查看系统版本进入恢复模式修复。 
2、重启进入恢复模式 
查看系统命令&amp;#xff1a;uname -r 可能显示为&amp;#xff1a;6.8.0-45-generic 
重启Ubuntu系统&amp;#xff0c;在开机时按ESC进入模…阅读更多...SpringBoot框架的车辆管理自动化解决方案2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...Linux 系统上生成大文件的多种方法在 Linux 系统上生成大文件有多种方法&amp;#xff0c;具体取决于你的需求&amp;#xff08;例如&amp;#xff0c;文件内容、生成速度等&amp;#xff09;。以下是一些常见的方法&amp;#xff1a; 
1. 使用 dd 命令 
dd 是一个强大的命令行工具&amp;#xff0c;用于转换和复制文件。你可以使用它来创建一个…阅读更多...Maven骨灰级教程：从小白到高手的终极指南（一）目录 
1. Maven的概念 
1.1 什么是Maven 
1.2 什么是依赖管理 
1.3 什么是项目构建 
1.4 Maven的应用场景 
1.5 为什么使用Maven 
1.6 Maven模型 
2.初识Maven 
2.1 Maven安装 
2.1.1 安装准备 
2.1.2 Maven安装目录分析 
2.1.3 Maven的环境变量 
2.2 Maven的第一个项目 
2.2.1…阅读更多...防火墙和堡垒机有什么区别？防火墙和堡垒机在网络安全领域都扮演着至关重要的角色，但它们在功能、部署位置、作用范围等方面存在显著差异。 
一、功能定位 
防火墙：防火墙是一种网络安全系统，主要作用是在私有网络与公网之间建立一道安全屏障，监控和控制网络流量。它通过预定义的安全规则，决定哪些数…阅读更多...代理 IP：促进在线教育资源普及与公平的新助力现如今&amp;#xff0c;在线教育正以前所未有的速度发展&amp;#xff0c;为人们提供了便捷、高效的学习途径。然而&amp;#xff0c;在线教育资源的普及与公平性仍面临着一些挑战&amp;#xff0c;而代理 IP 在这方面可以发挥重要作用。 一、在线教育资源普及与公平面临的挑战 1. 地域限制 不同地…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:19:03 +0000</pubDate>
    </item>
    <item>
      <title>1282：最大子矩阵</title>
      <link>https://www.ppmy.cn/news/1541124.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维1282：最大子矩阵news/2025/11/1 1:19:01/题目：已知矩阵的大小定义为矩阵中所有元素的和。给定一个矩阵，你的任务是找到最大的非空(大小至少是1 × 1)子矩阵。比如，如下4 × 4的矩阵0 -2 -7 09 2 -6 2-4 1 -4 1-1 8 0 -2的最大子矩阵是9 2-4 1-1 8这个子矩阵的大小是15。【输入】输入是一个N×N的矩阵。输入的第一行给出N(0&lt;N≤100)。再后面的若干行中，依次(首先从左到右给出第一行的N个整数，再从左到右给出第二行的N个整数……)给出矩阵中的N2个整数，整数之间由空白字符分隔(空格或者空行)。已知矩阵中整数的范围都在[−127,127]。【输出】输出最大子矩阵的大小。【输入样例】40 -2 -7 09 2 -6 2-4 1 -4 1-1 8 0 -2【输出样例】15题意：找出梓矩阵最大和思路：暴力模拟就是就是遍历求x1-x2行最值，再遍历y1-y2列的最值， 四层循环容易超时-只看一行求最值就是最大连续子序列，但是有很多行，现在求未知连续的k行的矩阵，所以就需要遍历1-2,1-3,1-4,2-3,2-4行，，，，求矩阵和，所以利用前缀和的知识，可以累加前一行的数据直到最后一行，要求区间K行的子矩阵遍历即可-即要求k行直接压缩成一维数组，变成了一个一维数组的最长子序列问题确定状态/选择：累加行/列以后直接利用最大字段和的做法 dp[i] = max(dp[i-1]+k,dp[i])确定状态转移方程边界条件：-①dp都初始化为0，每次遍历完两行，求出矩阵和，计算了dp数组后求出当前的最值，dp初始化一下。②存储最值的变量应该初始化：&lt;-128因为数据范围在【-127，127】。③遍历时，后一行减去前一行，所以i 为【1，n】,j为【1，n】,j不能是【i+1，n】,因为有可能矩阵第一行就是有最值！数据约束：无注意：①：数组边界/遍历范围要注意！！②：数据初始化要注意数据边界参考代码一#include&lt;bits/stdc++.h&gt;#defineN105usingnamespacestd;inta[N][N],dp[N],ans=-128;//初始化＃。。。。。。。。。。！intmain(){intn;cin&gt;&gt;n;for(inti=1;i&lt;=n;i++){for(intj=1;j&lt;=n;j++){cin&gt;&gt;a[i][j];a[i][j]+=a[i-1][j];//各行的值累加}}for(inti=1;i&lt;=n;i++){//开始行for(intj=i;j&lt;=n;j++){//结束行for(intk=1;k&lt;=n;k++){//处理两行之前列的数据-做最大连续子序列dp[k]=a[j][k]-a[i-1][k];dp[k]=max(dp[k],dp[k-1]+a[j][k]-a[i-1][k]);//选择两行 并处理dp数组ans=max(ans,dp[k]);}memset(dp,0,sizeof(dp));}}cout&lt;&lt;ans;return0;}参考代码二#include&lt;bits/stdc++.h&gt;#defineN105usingnamespacestd;N],dp[N],ans=-128;//初始化＃。。。。。。。。。。！intmain(){intn;cin&gt;&gt;n;for(inti=1;i&lt;=n;i++){for(intj=1;j&lt;=n;j++){cin&gt;&gt;a[i][j];a[i][j]+=a[i][j-1];//各列的值累加}}for(inti=1;i&lt;=n;i++){//开始列for(intj=i;j&lt;=n;j++){//结束列  不能从第二行开始，不然第一行怎么办！！memset(dp,0,sizeof(dp));for(intk=1;k&lt;=n;k++){//处理两列之前列的数据-做最大连续子序列dp[k]=a[k][j]-a[k][i-1];dp[k]=max(dp[k],dp[k-1]+a[k][j]-a[k][i-1]);//选择两行 并处理dp数组ans=max(ans,dp[k]);}}}cout&lt;&lt;ans;return0;}http://www.ppmy.cn/news/1541124.html相关文章代码随想录算法训练营Day08 | 344.反转字符串、541. 反转字符串II、卡码网：54.替换数字文章目录 344.反转字符串思路与重点 541. 反转字符串II思路与重点 卡码网&amp;#xff1a;54.替换数字思路与重点 344.反转字符串 
题目链接&amp;#xff1a;344. 反转字符串 - 力扣&amp;#xff08;LeetCode&amp;#xff09;讲解链接&amp;#xff1a;代码随想录 (programmercarl.com)状态&amp;#xff…阅读更多...Ubuntu：用户不在sudoers文件中1、问题 
执行sudo xxx命令时&amp;#xff0c;显示&amp;#xff1a; 
user 不在sudoers文件中 
需要查看系统版本进入恢复模式修复。 
2、重启进入恢复模式 
查看系统命令&amp;#xff1a;uname -r 可能显示为&amp;#xff1a;6.8.0-45-generic 
重启Ubuntu系统&amp;#xff0c;在开机时按ESC进入模…阅读更多...SpringBoot框架的车辆管理自动化解决方案2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...Linux 系统上生成大文件的多种方法在 Linux 系统上生成大文件有多种方法&amp;#xff0c;具体取决于你的需求&amp;#xff08;例如&amp;#xff0c;文件内容、生成速度等&amp;#xff09;。以下是一些常见的方法&amp;#xff1a; 
1. 使用 dd 命令 
dd 是一个强大的命令行工具&amp;#xff0c;用于转换和复制文件。你可以使用它来创建一个…阅读更多...Maven骨灰级教程：从小白到高手的终极指南（一）目录 
1. Maven的概念 
1.1 什么是Maven 
1.2 什么是依赖管理 
1.3 什么是项目构建 
1.4 Maven的应用场景 
1.5 为什么使用Maven 
1.6 Maven模型 
2.初识Maven 
2.1 Maven安装 
2.1.1 安装准备 
2.1.2 Maven安装目录分析 
2.1.3 Maven的环境变量 
2.2 Maven的第一个项目 
2.2.1…阅读更多...防火墙和堡垒机有什么区别？防火墙和堡垒机在网络安全领域都扮演着至关重要的角色，但它们在功能、部署位置、作用范围等方面存在显著差异。 
一、功能定位 
防火墙：防火墙是一种网络安全系统，主要作用是在私有网络与公网之间建立一道安全屏障，监控和控制网络流量。它通过预定义的安全规则，决定哪些数…阅读更多...代理 IP：促进在线教育资源普及与公平的新助力现如今&amp;#xff0c;在线教育正以前所未有的速度发展&amp;#xff0c;为人们提供了便捷、高效的学习途径。然而&amp;#xff0c;在线教育资源的普及与公平性仍面临着一些挑战&amp;#xff0c;而代理 IP 在这方面可以发挥重要作用。 一、在线教育资源普及与公平面临的挑战 1. 地域限制 不同地…阅读更多...如何将 Docker 镜像的 tar 文件迁移到另一台服务器并运行容器实验室项目共建人&amp;#xff1a;周凌飞、武正乔、杨霄汉 
本博客部分内容由kimi生成&amp;#xff0c;鸣谢&amp;#xff1a;吴润生 迭代生成式AI提示词思考模型 
在 Docker 容器化的世界里&amp;#xff0c;我们经常需要将容器从一个环境迁移到另一个环境。这可能是因为开发、测试或生产环境的需…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:19:02 +0000</pubDate>
    </item>
    <item>
      <title>代码随想录算法训练营Day08 | 344.反转字符串、541. 反转字符串II、卡码网：54.替换数字</title>
      <link>https://www.ppmy.cn/news/1541123.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维代码随想录算法训练营Day08 | 344.反转字符串、541. 反转字符串II、卡码网：54.替换数字news/2025/11/1 1:19:00/文章目录344.反转字符串思路与重点541. 反转字符串II思路与重点卡码网：54.替换数字思路与重点344.反转字符串题目链接：344. 反转字符串 - 力扣（LeetCode）讲解链接：代码随想录 (programmercarl.com)状态：一遍AC。思路与重点如果题目关键的部分直接用库函数就可以解决，建议不要使用库函数。如果库函数仅仅是解题过程中的一小部分，并且你已经很清楚这个库函数的内部实现原理的话，可以考虑使用库函数。swap可以通过位运算实现。s[i]^=s[j];s[j]^=s[i];s[i]^=s[j];//原理如下：a=(a^b);b=(a^b)^b=a^(b^b)=a^0=a;a=(a^b)^a=(a^a)^b=0^b=b;classSolution{public:voidreverseString(vector&lt;char&gt;&amp;s){for(inti=0,j=s.size()-1;i&lt;s.size()/2;i++,j--){swap(s[i],s[j]);}}};541. 反转字符串II题目链接：541. 反转字符串 II - 力扣（LeetCode）讲解链接：代码随想录 (programmercarl.com)状态：两次AC。思路与重点其实在遍历字符串的过程中，只要让** i += (2 * k)**，i 每次移动 2 * k 就可以了，然后判断是否需要有反转的区间。因为要找的也就是每2 * k 区间的起点，这样写，程序会高效很多。所以当需要固定规律一段一段去处理字符串的时候，要想想在在for循环的表达式上做做文章。classSolution{public:stringreverseStr(string s,intk){for(inti=0;i&lt;s.size();i+=(2*k)){// 1. 每隔 2k 个字符的前 k 个字符进行反转// 2. 剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符if(i+k&lt;=s.size()){reverse(s.begin()+i,s.begin()+i+k);}else{// 3. 剩余字符少于 k 个，则将剩余字符全部反转。reverse(s.begin()+i,s.end());}}returns;}};卡码网：54.替换数字题目链接：54. 替换数字（第八期模拟笔试） (kamacoder.com)讲解链接：代码随想录 (programmercarl.com)状态：一遍AC。思路与重点其实很多数组填充类的问题，其做法都是先预先给数组扩容带填充后的大小，然后在从后向前进行操作。这么做有两个好处：1.不用申请新数组。2. 从后向前填充元素，避免了从前向后填充元素时，每次添加元素都要将添加元素之后的所有元素向后移动的问题。#include&lt;iostream&gt;usingnamespacestd;intmain(){string s;while(cin&gt;&gt;s){intsOldIndex=s.size()-1;intcount=0;// 统计数字的个数for(inti=0;i&lt;s.size();i++){if(s[i]&gt;='0'&amp;&amp;s[i]&lt;='9'){count++;}}// 扩充字符串s的大小，也就是将每个数字替换成"number"之后的大小s.resize(s.size()+count*5);intsNewIndex=s.size()-1;// 从后往前将数字替换为"number"while(sOldIndex&gt;=0){if(s[sOldIndex]&gt;='0'&amp;&amp;s[sOldIndex]&lt;='9'){s[sNewIndex--]='r';s[sNewIndex--]='e';s[sNewIndex--]='b';s[sNewIndex--]='m';s[sNewIndex--]='u';s[sNewIndex--]='n';}else{s[sNewIndex--]=s[sOldIndex];}sOldIndex--;}cout&lt;&lt;s&lt;&lt;endl;}}http://www.ppmy.cn/news/1541123.html相关文章Ubuntu：用户不在sudoers文件中1、问题 
执行sudo xxx命令时&amp;#xff0c;显示&amp;#xff1a; 
user 不在sudoers文件中 
需要查看系统版本进入恢复模式修复。 
2、重启进入恢复模式 
查看系统命令&amp;#xff1a;uname -r 可能显示为&amp;#xff1a;6.8.0-45-generic 
重启Ubuntu系统&amp;#xff0c;在开机时按ESC进入模…阅读更多...SpringBoot框架的车辆管理自动化解决方案2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...Linux 系统上生成大文件的多种方法在 Linux 系统上生成大文件有多种方法&amp;#xff0c;具体取决于你的需求&amp;#xff08;例如&amp;#xff0c;文件内容、生成速度等&amp;#xff09;。以下是一些常见的方法&amp;#xff1a; 
1. 使用 dd 命令 
dd 是一个强大的命令行工具&amp;#xff0c;用于转换和复制文件。你可以使用它来创建一个…阅读更多...Maven骨灰级教程：从小白到高手的终极指南（一）目录 
1. Maven的概念 
1.1 什么是Maven 
1.2 什么是依赖管理 
1.3 什么是项目构建 
1.4 Maven的应用场景 
1.5 为什么使用Maven 
1.6 Maven模型 
2.初识Maven 
2.1 Maven安装 
2.1.1 安装准备 
2.1.2 Maven安装目录分析 
2.1.3 Maven的环境变量 
2.2 Maven的第一个项目 
2.2.1…阅读更多...防火墙和堡垒机有什么区别？防火墙和堡垒机在网络安全领域都扮演着至关重要的角色，但它们在功能、部署位置、作用范围等方面存在显著差异。 
一、功能定位 
防火墙：防火墙是一种网络安全系统，主要作用是在私有网络与公网之间建立一道安全屏障，监控和控制网络流量。它通过预定义的安全规则，决定哪些数…阅读更多...代理 IP：促进在线教育资源普及与公平的新助力现如今&amp;#xff0c;在线教育正以前所未有的速度发展&amp;#xff0c;为人们提供了便捷、高效的学习途径。然而&amp;#xff0c;在线教育资源的普及与公平性仍面临着一些挑战&amp;#xff0c;而代理 IP 在这方面可以发挥重要作用。 一、在线教育资源普及与公平面临的挑战 1. 地域限制 不同地…阅读更多...如何将 Docker 镜像的 tar 文件迁移到另一台服务器并运行容器实验室项目共建人&amp;#xff1a;周凌飞、武正乔、杨霄汉 
本博客部分内容由kimi生成&amp;#xff0c;鸣谢&amp;#xff1a;吴润生 迭代生成式AI提示词思考模型 
在 Docker 容器化的世界里&amp;#xff0c;我们经常需要将容器从一个环境迁移到另一个环境。这可能是因为开发、测试或生产环境的需…阅读更多...算法——python实现归并排序文章目录 归并排序NB三人组总结 归并排序 """
归并排序
""""""
时间复杂度 &amp;#xff1a;               O(N*logN)
空间复杂度 &amp;#xff1a;               O(N)    需要额外生成一个临时变量&amp;#xff0c;最大是N长
思路&amp;#xf…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:19:01 +0000</pubDate>
    </item>
    <item>
      <title>Ubuntu：用户不在sudoers文件中</title>
      <link>https://www.ppmy.cn/news/1541122.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Ubuntu：用户不在sudoers文件中news/2025/11/1 1:19:00/1、问题执行sudo xxx命令时，显示：user 不在sudoers文件中需要查看系统版本进入恢复模式修复。2、重启进入恢复模式查看系统命令：uname -r可能显示为：6.8.0-45-generic重启Ubuntu系统，在开机时按ESC进入模式选择，选择：再选择系统版本对应的（recovery mode）。进入到图形界面时，显示为“read-only”模式。选择fsck，一直确定，直到再进入界面时显示“read/write”模式。3、修改sudoers文件在界面中选择“root”菜单，可以修改root密码，但用这个密码登录或验证root是没有用的。以root用户登录进去，输入命令：vi  /etc/sudoers增加用户权限并保存（:wq）。操作完成后，sudo即可正常使用了。http://www.ppmy.cn/news/1541122.html相关文章SpringBoot框架的车辆管理自动化解决方案2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...Linux 系统上生成大文件的多种方法在 Linux 系统上生成大文件有多种方法&amp;#xff0c;具体取决于你的需求&amp;#xff08;例如&amp;#xff0c;文件内容、生成速度等&amp;#xff09;。以下是一些常见的方法&amp;#xff1a; 
1. 使用 dd 命令 
dd 是一个强大的命令行工具&amp;#xff0c;用于转换和复制文件。你可以使用它来创建一个…阅读更多...Maven骨灰级教程：从小白到高手的终极指南（一）目录 
1. Maven的概念 
1.1 什么是Maven 
1.2 什么是依赖管理 
1.3 什么是项目构建 
1.4 Maven的应用场景 
1.5 为什么使用Maven 
1.6 Maven模型 
2.初识Maven 
2.1 Maven安装 
2.1.1 安装准备 
2.1.2 Maven安装目录分析 
2.1.3 Maven的环境变量 
2.2 Maven的第一个项目 
2.2.1…阅读更多...防火墙和堡垒机有什么区别？防火墙和堡垒机在网络安全领域都扮演着至关重要的角色，但它们在功能、部署位置、作用范围等方面存在显著差异。 
一、功能定位 
防火墙：防火墙是一种网络安全系统，主要作用是在私有网络与公网之间建立一道安全屏障，监控和控制网络流量。它通过预定义的安全规则，决定哪些数…阅读更多...代理 IP：促进在线教育资源普及与公平的新助力现如今&amp;#xff0c;在线教育正以前所未有的速度发展&amp;#xff0c;为人们提供了便捷、高效的学习途径。然而&amp;#xff0c;在线教育资源的普及与公平性仍面临着一些挑战&amp;#xff0c;而代理 IP 在这方面可以发挥重要作用。 一、在线教育资源普及与公平面临的挑战 1. 地域限制 不同地…阅读更多...如何将 Docker 镜像的 tar 文件迁移到另一台服务器并运行容器实验室项目共建人&amp;#xff1a;周凌飞、武正乔、杨霄汉 
本博客部分内容由kimi生成&amp;#xff0c;鸣谢&amp;#xff1a;吴润生 迭代生成式AI提示词思考模型 
在 Docker 容器化的世界里&amp;#xff0c;我们经常需要将容器从一个环境迁移到另一个环境。这可能是因为开发、测试或生产环境的需…阅读更多...算法——python实现归并排序文章目录 归并排序NB三人组总结 归并排序 """
归并排序
""""""
时间复杂度 &amp;#xff1a;               O(N*logN)
空间复杂度 &amp;#xff1a;               O(N)    需要额外生成一个临时变量&amp;#xff0c;最大是N长
思路&amp;#xf…阅读更多...Dataset(helpers文件中dataset_classes文件的datasets.py)该代码定义了一个用于管理和加载不同图数据集的框架。其核心是通过枚举类 DataSet 和 DataSetFamily 来组织数据集，提供了加载数据集、选择数据划分、设置编码器、选择优化器等功能。这些功能允许用户灵活地加载、预处理不同类型的图数据，并在指定的配置下进行训练和评估。 
…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:19:00 +0000</pubDate>
    </item>
    <item>
      <title>SpringBoot框架的车辆管理自动化解决方案</title>
      <link>https://www.ppmy.cn/news/1541121.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维SpringBoot框架的车辆管理自动化解决方案news/2025/11/1 1:18:59/2相关技术2.1 MYSQL数据库MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统，它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等，非常适用于Web站点或者其他应用软件的数据库后端的开发工作。此外，用户可利用许多语言编写访问MySQL数据库的程序。作为开放源代码运动的产物之一，MySQL关系数据库管理系统越来越受到人们的青睐，应用范围也越来越广。速度和易用性使MySQL特别适用于Web站点或应用软件的数据库后端的开发工作。MYSQL数据库具有以下特点：1、C和C ++中使用和测试，以确保源代码的编译器的便携性和灵活性。2、支持多种操作系统AIX的，FreeBSD下，HP-UX，Linux和Mac OS中，Novell公司的Netware，OpenBSD系统，OS/2裹时，Solaris，Windows等。3、提供了用于不同的编程语言的API。编程语言，如C, C ++，Python和Java的，的Perl，PHP，埃菲尔铁塔，Ruby和Tcl的。4、以及使用的CPU资源来支持多线程。5、算法优化查询SQL，切实提高搜索速度。6、网络上的客户端和服务器可以用来编程任何独立的编程环境，也有中国，GB2312，BIG5，日文写作，一般基金，用于支持多国语言，并且可以嵌入在数据表和其他软件shift_jis访问柱可以用作的名称。7、TCP / IP，ODBC和JDBC数据库，并提供连接到其他。8、管理工具的管理，控制和优化数据库的操作。9、可以数以千万计的记录在一个大的数据库。2.2 B/S结构B/S架构是一种基于互联网系统的软件系统开发架构，是现如今在软件系统开发中采用非常大量的一种软件系统结构。现如今B/S架构已经被大量使用，打破了C/S结构的结构，给基于网络结构的软件系统提供了良好的支持。B/S架构伴随着计算机网络技术发展而逐步的发展和更新。伴随着互联网的进一步发展，就要求大多数的管理系统要求不仅仅可以在一台电脑上使用，同时可以在接入互联网的其他电脑也可以使用对系统进行操作和使用。在这样的背景下基于B/S架构的软件系统设计方法得到了越来越大量的使用，基础部分也在不断的更新。B/S架构是利用操作系统中的浏览器来进行使用的，不是一种窗体软件系统，不需要在使用系统的电脑上进行安装。B/S架构的运行方式是在远程的服务器上把开发的软件系统部署在远程的服务器上，在部署好软件系统之后就可以实现在任何接入互联网的电脑上访问部署好的软件系统。B/S架构给使用管理系统的用户带来极大的便利。在三层体系结构的B/S（Browser/Server，浏览器/服务器结构）系统中，用户可以通过浏览器向分布在网络上的众多服务器发出请求。B/S系统极大地简化了客户机的工作量，客户机上只需要安装、配置少量的客户端运行软件即可，服务器将担负大量的工作，对数据库的访问以及应用程序的执行都将由服务器来完成。B/S架构的不断成熟，主要使用WWW浏览器技术，结合多种浏览器脚本语言，用通用浏览器需要实现原本复杂的专有软件来实现的强大功能，并节约了开发成本，是一种新的软件架构。B/S系统包括：表示逻辑层，控制逻辑层，数据展现层，三层是相对独立又相互关联。2.3 Spring Boot框架简介Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。SpringBoot可以与经典的Java开发工具一起使用或者作为命令行工具安装。无论如何，需要JavaSDK1.6或者更高版本，本项目用到的是JDK1.8版本。结论在这次毕业设计中遇到的最困难的方面就是在数据库方面的知识，在刚开始进行毕业设计的时候感觉十分困难，根本不知道该从何处下手，但不断的坚持，设计最终被完成。无论多么的困难，只要能够坚持下来，善于去找到好的材料来研究，在研究中充分利用资源，没有困难是不会被成功解决的。在开发系统的过程中，本人运用到了JSP技术和平时学习中所了解的一些技术，通过实现这些技术，大大提高了整个系统的性能。在论文中这些技术都做了比较详细的介绍。本系统还存在很多缺点和不完善的地方，例如有些细节上做的还不够完善，有些功能模块还需要加强。在今后的日子里，能够对这些不足进行改善。通过这次最终的毕业设计，平时所学到的知识不仅融合了，而且获得了许多计算机知识。在整个设计过程中明白了许多东西，也培养独立工作能力，树立信心，对自己能力的工作能力，我相信以后会学习和工作生活中有至关重要的作用。同时也大大提高了手的能力，使其难以充分体会探索的乐趣和成功的创作过程，设计过程中汲取的东西，是一笔宝贵的财富。回顾过去做毕业设计的整个过程，充满了付出和收获，但是当你看到成果的时候的感觉，是一种难以用言语表达的喜悦之感这些在毕业设计过程中学习到的东西将会使我终身受益！最后，感谢指导老师的关心和指导，在我毕业设计的整个过程中，他给与了我很多的帮助和讲解，在导师的帮助下我的毕业设计才能如此顺利的完成。致谢语经过几个多月的不断学习，我的毕业设计终于如期完成。此次毕业设计是对我们日常所学计算机理论知识的一次综合性评测，也是将理论应用到实践的一项考察。首先我要感谢此次指导我的老师，是他的及时纠正我在设计当中出现的问题，使得我的设计高质量完成。指导老师在我本次车辆管理系统的开发过程中，为程序、框架的设计、代码等方面以及论文设计提供了很多宝贵的意见，并且为我推荐了许多相关的资料，他的指导和建议使我受益匪浅，通过老师的耐心辅导和指点，我的论文顺利完成，在此，我表示深刻的感谢。我也要感谢帮助过我的同学们，和我一起探讨论文的不足，给我的设计提出宝贵的建议，在这次设计中他们的帮助使得我的设计更加完善更加具体。最后，我也要感谢学校为我们提供了一个良好的学校环境。祝愿学校的领导教师以及和我一起奋斗的同学们工作顺利，事业有成，也要祝愿学校的前景更加辉煌。参考文献[1]付昕. 基于B/S模式仓库管理系统的实现[J].山东省农业管理干部学院学报, 2010, 27(4):166-168[2] 雷文华, 薛小文. MATLAB和Servlet在网络数据处理中的应用[J]. 电子测试, 2010, (11):81-86.[3] 黄艳峰. 在Java语言中实施“案例教学”的研究与探索[J]. 电脑知识与技术, 2010, 6(5):1148-1149[4] 王玉英. 基于JSP的MySQL数据库访问技术[J]. 现代计算机：专业版, 2010, 19(14):63-66[5] 赵钢. JSP Servlet+EJB的Web模式应用研究[J]. 电子设计工程, 2013, 21(13):47-49[6] David L.Anderson.Managing Information Systems.清华大学出版社，2002：16[7] 王家华．软件工程[M]，沈阳：东北大学出版社，2011：46[8] 张孝祥,徐明华.软件开发课堂.清华大学出版社，2009：55[9] 崔洋.MySQL数据库应用从入门到精通.中国铁道出版社，2013：27[10] 王珊,萨师煊.数据库系统概论.高等教育出版社, 2006：16[11] 崔洋.MySQL数据库应用从入门到精通.中国铁道出版社，2013：27[12] 王珊,萨师煊.数据库系统概论.高等教育出版社, 2006：16[13] 张海潘.软件工程导论.清华大学出版社，2008：86[14] 黄艳峰. 在Java语言中实施“案例教学”的研究与探索[J]. 电脑知识与技术, 2010, 6(5):1148-1149[15] 王玉英. 基于JSP的MySQL数据库访问技术[J]. 现代计算机：专业版, 2010, 19(14):63-66http://www.ppmy.cn/news/1541121.html相关文章Linux 系统上生成大文件的多种方法在 Linux 系统上生成大文件有多种方法&amp;#xff0c;具体取决于你的需求&amp;#xff08;例如&amp;#xff0c;文件内容、生成速度等&amp;#xff09;。以下是一些常见的方法&amp;#xff1a; 
1. 使用 dd 命令 
dd 是一个强大的命令行工具&amp;#xff0c;用于转换和复制文件。你可以使用它来创建一个…阅读更多...Maven骨灰级教程：从小白到高手的终极指南（一）目录 
1. Maven的概念 
1.1 什么是Maven 
1.2 什么是依赖管理 
1.3 什么是项目构建 
1.4 Maven的应用场景 
1.5 为什么使用Maven 
1.6 Maven模型 
2.初识Maven 
2.1 Maven安装 
2.1.1 安装准备 
2.1.2 Maven安装目录分析 
2.1.3 Maven的环境变量 
2.2 Maven的第一个项目 
2.2.1…阅读更多...防火墙和堡垒机有什么区别？防火墙和堡垒机在网络安全领域都扮演着至关重要的角色，但它们在功能、部署位置、作用范围等方面存在显著差异。 
一、功能定位 
防火墙：防火墙是一种网络安全系统，主要作用是在私有网络与公网之间建立一道安全屏障，监控和控制网络流量。它通过预定义的安全规则，决定哪些数…阅读更多...代理 IP：促进在线教育资源普及与公平的新助力现如今&amp;#xff0c;在线教育正以前所未有的速度发展&amp;#xff0c;为人们提供了便捷、高效的学习途径。然而&amp;#xff0c;在线教育资源的普及与公平性仍面临着一些挑战&amp;#xff0c;而代理 IP 在这方面可以发挥重要作用。 一、在线教育资源普及与公平面临的挑战 1. 地域限制 不同地…阅读更多...如何将 Docker 镜像的 tar 文件迁移到另一台服务器并运行容器实验室项目共建人&amp;#xff1a;周凌飞、武正乔、杨霄汉 
本博客部分内容由kimi生成&amp;#xff0c;鸣谢&amp;#xff1a;吴润生 迭代生成式AI提示词思考模型 
在 Docker 容器化的世界里&amp;#xff0c;我们经常需要将容器从一个环境迁移到另一个环境。这可能是因为开发、测试或生产环境的需…阅读更多...算法——python实现归并排序文章目录 归并排序NB三人组总结 归并排序 """
归并排序
""""""
时间复杂度 &amp;#xff1a;               O(N*logN)
空间复杂度 &amp;#xff1a;               O(N)    需要额外生成一个临时变量&amp;#xff0c;最大是N长
思路&amp;#xf…阅读更多...Dataset(helpers文件中dataset_classes文件的datasets.py)该代码定义了一个用于管理和加载不同图数据集的框架。其核心是通过枚举类 DataSet 和 DataSetFamily 来组织数据集，提供了加载数据集、选择数据划分、设置编码器、选择优化器等功能。这些功能允许用户灵活地加载、预处理不同类型的图数据，并在指定的配置下进行训练和评估。 
…阅读更多...spring揭秘31-spring任务调度01-spring集成Quartz及JDKTimer定时器文章目录 【README】【1】Quartz任务调度框架【1.1】Job调度任务【1.2】任务调度触发器Trigger【1.3】\*Quartz框架执行调度任务代码实践【1.3.1】硬编码执行Quartz调度任务【1.3.2】基于生产者模式执行quartz调度任务&amp;#xff08;推荐&amp;#xff09; 【2】spring集成Quartz【2.1…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:59 +0000</pubDate>
    </item>
    <item>
      <title>Linux 系统上生成大文件的多种方法</title>
      <link>https://www.ppmy.cn/news/1541120.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Linux 系统上生成大文件的多种方法news/2025/11/1 1:18:58/在 Linux 系统上生成大文件有多种方法，具体取决于你的需求（例如，文件内容、生成速度等）。以下是一些常见的方法：1. 使用dd命令dd是一个强大的命令行工具，用于转换和复制文件。你可以使用它来创建一个指定大小的文件。dd if=/dev/zero of=largefile bs=1M count=1024上述命令会生成一个大小为 1GB 的文件largefile，其中文件内容全为0。if=/dev/zero：输入文件为/dev/zero，表示生成全为0的数据。of=largefile：输出文件名为largefile。bs=1M：块大小为 1MB。count=1024：块数量为 1024，因此总大小为 1GB。你也可以使用/dev/urandom生成随机数据，但速度会慢一些：dd if=/dev/urandom of=randomfile bs=1M count=10242. 使用fallocate命令fallocate命令用于预先分配文件的空间，而不实际写入数据。这对于测试磁盘性能很有用。fallocate -l 1G largefile上述命令会生成一个大小为 1GB 的文件largefile，但文件内容未初始化。3. 使用truncate命令truncate命令也可以用于调整文件大小，但它同样不会实际写入数据。truncate -s 1G largefile上述命令会将largefile文件的大小调整为 1GB，文件内容会被设置为未定义（类似于fallocate）。4. 使用head和/dev/zero或/dev/urandom你可以结合head和/dev/zero或/dev/urandom来生成一个指定大小的文件，但这种方法通常用于生成较小的文件，因为速度较慢。head -c 1G &lt;/dev/zero &gt;largefile或者生成随机数据：head -c 1G &lt;/dev/urandom &gt;randomfile5. 使用yes命令和headyes命令会不断输出某个字符串（默认是y），你可以结合head来生成一个指定大小的文件。yes | head -c 1G &gt;largefile这种方法生成的文件内容为连续的y字符。6. 使用 Python 脚本如果你需要生成特定内容的文件，可以使用 Python 脚本。# create_large_file.pywithopen('largefile','wb')asf:f.write(b'A'*1024*1024*1024)# 1GB of 'A' characters运行脚本：python3 create_large_file.py注意事项生成大文件时，请确保磁盘空间足够。使用/dev/urandom生成随机数据可能较慢，适合生成较小的文件或用于加密测试。fallocate和truncate生成的文件内容未初始化，适合磁盘性能测试。选择适合你需求的方法生成大文件。http://www.ppmy.cn/news/1541120.html相关文章Maven骨灰级教程：从小白到高手的终极指南（一）目录 
1. Maven的概念 
1.1 什么是Maven 
1.2 什么是依赖管理 
1.3 什么是项目构建 
1.4 Maven的应用场景 
1.5 为什么使用Maven 
1.6 Maven模型 
2.初识Maven 
2.1 Maven安装 
2.1.1 安装准备 
2.1.2 Maven安装目录分析 
2.1.3 Maven的环境变量 
2.2 Maven的第一个项目 
2.2.1…阅读更多...防火墙和堡垒机有什么区别？防火墙和堡垒机在网络安全领域都扮演着至关重要的角色，但它们在功能、部署位置、作用范围等方面存在显著差异。 
一、功能定位 
防火墙：防火墙是一种网络安全系统，主要作用是在私有网络与公网之间建立一道安全屏障，监控和控制网络流量。它通过预定义的安全规则，决定哪些数…阅读更多...代理 IP：促进在线教育资源普及与公平的新助力现如今&amp;#xff0c;在线教育正以前所未有的速度发展&amp;#xff0c;为人们提供了便捷、高效的学习途径。然而&amp;#xff0c;在线教育资源的普及与公平性仍面临着一些挑战&amp;#xff0c;而代理 IP 在这方面可以发挥重要作用。 一、在线教育资源普及与公平面临的挑战 1. 地域限制 不同地…阅读更多...如何将 Docker 镜像的 tar 文件迁移到另一台服务器并运行容器实验室项目共建人&amp;#xff1a;周凌飞、武正乔、杨霄汉 
本博客部分内容由kimi生成&amp;#xff0c;鸣谢&amp;#xff1a;吴润生 迭代生成式AI提示词思考模型 
在 Docker 容器化的世界里&amp;#xff0c;我们经常需要将容器从一个环境迁移到另一个环境。这可能是因为开发、测试或生产环境的需…阅读更多...算法——python实现归并排序文章目录 归并排序NB三人组总结 归并排序 """
归并排序
""""""
时间复杂度 &amp;#xff1a;               O(N*logN)
空间复杂度 &amp;#xff1a;               O(N)    需要额外生成一个临时变量&amp;#xff0c;最大是N长
思路&amp;#xf…阅读更多...Dataset(helpers文件中dataset_classes文件的datasets.py)该代码定义了一个用于管理和加载不同图数据集的框架。其核心是通过枚举类 DataSet 和 DataSetFamily 来组织数据集，提供了加载数据集、选择数据划分、设置编码器、选择优化器等功能。这些功能允许用户灵活地加载、预处理不同类型的图数据，并在指定的配置下进行训练和评估。 
…阅读更多...spring揭秘31-spring任务调度01-spring集成Quartz及JDKTimer定时器文章目录 【README】【1】Quartz任务调度框架【1.1】Job调度任务【1.2】任务调度触发器Trigger【1.3】\*Quartz框架执行调度任务代码实践【1.3.1】硬编码执行Quartz调度任务【1.3.2】基于生产者模式执行quartz调度任务&amp;#xff08;推荐&amp;#xff09; 【2】spring集成Quartz【2.1…阅读更多...苍穹外卖学习笔记(三十一)文章目录 工作台今日数据接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 订单管理接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 菜品总览接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 套餐总览接口WorkSpaceControllerWorksp…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:58 +0000</pubDate>
    </item>
    <item>
      <title>Maven骨灰级教程：从小白到高手的终极指南（一）</title>
      <link>https://www.ppmy.cn/news/1541119.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Maven骨灰级教程：从小白到高手的终极指南（一）news/2025/11/1 1:18:57/目录1. Maven的概念1.1 什么是Maven1.2 什么是依赖管理1.3 什么是项目构建1.4 Maven的应用场景1.5 为什么使用Maven1.6 Maven模型2.初识Maven2.1 Maven安装2.1.1 安装准备2.1.2 Maven安装目录分析2.1.3 Maven的环境变量2.2 Maven的第一个项目2.2.1 按照约定创建Maven项目目录2.2.2 在项目Hello根目录建立pom.xml2.2.3 创建Hello.java文件2.2.4 创建HelloTest.java文件2.2.5 进行maven的项目操作2.3 Maven的第二个项目2.3.1 按照约定创建Maven项目目录2.3.2 在项目HelloFriend根目录建立pom.xml2.3.3 创建HelloFriend.java文件2.3.4 创建HelloFriendTest.java文件2.3.5 测试打包HelloFriend项目2.4 Maven仓库配置2.4.1 Maven仓库概念2.4.2  Maven本地仓库配置2.5 IDEA整合Maven项目2.5.1  IDEA的Maven全局配置2.5.2  IDEA创建Maven的Java项目2.5.3 IDEA创建Maven的Java web项目2.6 Maven项目视图1. Maven的概念1.1 什么是MavenMaven是跨平台的项目管理工具。主要服务于基于Java平台的项目构建，依赖管理和项目信息管理。什么是理想的项目构建？高度自动化，跨平台，可重用的组件，标准化的流程什么是依赖？为什么要进行依赖管理？自动下载，统一依赖管理A1.0   依托于  B2.0  依托于    C3.0有哪些项目信息？项目名称描述等，开发人员信息，开发者信息等1.2 什么是依赖管理对第三方依赖包的管理，可以连接互联网下载项目所需第三方jar包。对自己开发的模块的管理，可以像引用第三方依赖包一样引用自己项目的依赖包。1.3 什么是项目构建项目构建：是一个从编写源代码到编译、测试、运行、打包、部署的过程。传统项目和maven项目构建的两种方式：传统项目：打开Idea编写源代码和配置文件，对源代码进行编译，可以使用Junit进行单元测试，把项目打成war包，部署到Tomcat服务器中运行。maven项目：maven将项目构建过程进行标准化，每个阶段都可以使用一个命令来完成。清理 --&gt; 编译 --&gt; 测试 --&gt; 报告 --&gt; 打包 --&gt; 部署好处：可以通过命令完成项目构建。（测试：使用mvn tomcat:run的命令来发布运行项目）maven对每个构建阶段进行规范，有利于大型团队协作开发。1.4 Maven的应用场景maven的应用场景，开发人员只要按着maven标准的目录结构进行开发即可，然后提交代码。在测试服务器上拉取Java源码，然后可以使用maven的自动化项目构建完成项目的清理、编译、测试、打包和安装部署等。1.5 为什么使用MavenIDE？Eclipse？IDEA？手工操作较多，编译、测试、部署等工作都是独立的，很难一步完成每个人的IDE配置都不同，很容易就出错出现本地代码换个地方编译Ant？没有一个约定的目录结构必须明确让ant做什么，什么时候做，然后编译，打包没有生命周期，必须定义目标及其实现的任务序列没有集成依赖管理Maven？拥有约定，知道你的代码在哪里，放到哪里去拥有一个生命周期，例如执行 mvn install 就可以自动执行编译，测试，打包等构建过程只需要定义一个pom.xml,然后把源码放到默认的目录，Maven帮你处理其他事情拥有依赖管理，仓库管理1.6 Maven模型Maven模型主要由三部分组成：构建生命周期、POM、dependence。构建生命周期：就是用来完成标准化构建流程 。当我们需要编译，Maven提供了一个编译插件供我们使用；当我们需要打包，Maven就提供了一个打包插件供我们使用等。在执行这些构建操作的时候，不同的阶段又会有不同的文件产生，比如编译之后就会有编译之后的字节码文件产生，打包之后，就会有打包之后的jar文件产生。POM：将我们自己的项目抽象成一个对象模型，有自己专属的坐标，如下图所示是一个Maven项目：dependence：使用坐标来描述当前项目依赖哪些第三方jar包2.初识Maven2.1 Maven安装2.1.1 安装准备① 安装jdk1.8或以上版本② 下载Maven下载地址：https://archive.apache.org/dist/maven/maven-3/3.6.0/binaries/版本：Maven3.6③ 安装Maven解压到相应目录即可(无中文路径)2.1.2 Maven安装目录分析bin：含有mvn运行的脚本boot：含有plexus-classworlds类加载器框架conf：含有settings.xml配置文件lib：含有Maven运行时所需要的java类库LICENSE.txt, NOTICE.txt, README.txt针对Maven版本，第三方软件等简要介绍2.1.3 Maven的环境变量① 设置MAVEN_HOME环境变量升级时只需要下载最新版本，解压缩重新设置MAVEN_HOME环境变量即可② 配置用户范围的settings.xml%MAVEN_HOME%/conf/settings.xml 全局的~/.m2/settings.xml 单个用户的设置MAVEN_HOME环境变量,把maven的解压后的路径添加为变量值设置Path环境变量,把 %MAVEN_HOME%\bin 添加到Path的变量值末尾。验证配置是否完成2.2 Maven的第一个项目2.2.1 按照约定创建Maven项目目录src/main/java —— 存放项目的.java文件src/main/resources —— 存放项目资源文件，如spring, mybatis配置文件src/test/java —— 存放所有测试.java文件，如JUnit测试类src/test/resources —— 测试资源文件target —— 项目输出位置 （自动生成）pom.xml以上文件夹都是我们手动创建的，目的是为了更好地了解java Maven项目的目录结构。但是为了更加直观的看到其目录，我们使用idea打开该项目。2.2.2 在项目Hello根目录建立pom.xml&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 " &gt;http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;      xml约束&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;groupId&gt;cn.tx.maven&lt;/groupId&gt;&lt;artifactId&gt;Hello&lt;/artifactId&gt;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;name&gt;Hello&lt;/name&gt;&lt;dependencies&gt;&lt;dependency&gt;&lt;groupId&gt;junit&lt;/groupId&gt;&lt;artifactId&gt;junit&lt;/artifactId&gt;&lt;version&gt;4.9&lt;/version&gt;&lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;		&lt;/dependencies&gt;
&lt;/project&gt;2.2.3 创建Hello.java文件在src/main/java/cn/tx/maven目录下新建文件Hello.javapackage cn.tx.maven;
public class Hello {public String sayHello(String name){return "Hello "+name+"!";}
}2.2.4 创建HelloTest.java文件在/src/test/java/cn/tx/maven目录下新建测试文件HelloTest.javapackage cn.tx.maven;
import org.junit.Test;
import static junit.framework.Assert.*;
public class HelloTest {@Testpublic void testHello(){Hello hello = new Hello();String results = hello.sayHello("maven");assertEquals("Hello maven!",results);		}
}2.2.5 进行maven的项目操作打开cmd命令行，进入Hello项目根目录执行 mvn compile命令，查看根目录变化mvn compile命令用于将项目的源代码编译成字节码（.class 文件），并将其放置到 target/classes 目录中。2. cmd 中继续录入mvn clean命令，然后再次查看根目录变化。mvn clean命令用于清理项目的 target 目录，即删除之前构建时生成的所有文件。3. cmd 中录入 mvn clean compile命令, 查看根目录变化4. cmd 中录入 mvn clean test命令，查看根目录变化此命令首先清理项目（删除 target 目录），然后运行项目中的单元测试。5. cmd 中录入 mvn clean package命令,查看根目录变化该命令在执行时会先清空 target 目录，然后编译项目，并将编译好的代码打包成可发布的格式（通常是 .jar 或 .war 文件），放在 target 目录下。6. cmd 中录入 mvn clean install 查看仓库会把项目安装到仓库里此命令首先执行 clean，然后执行 package，最后将生成的包安装到本地 Maven 仓库，以供其他项目使用。2.3 Maven的第二个项目2.3.1 按照约定创建Maven项目目录HelloFriend--src-----main----------java----------resources-----test---------java---------resources--pom.xml2.3.2 在项目HelloFriend根目录建立pom.xml在项目HelloFriend根目录建立pom.xml&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;groupId&gt;cn.tx.maven&lt;/groupId&gt;&lt;artifactId&gt;HelloFriend&lt;/artifactId&gt;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;name&gt;HelloFriend&lt;/name&gt;&lt;dependencies&gt;&lt;dependency&gt;&lt;groupId&gt;junit&lt;/groupId&gt;&lt;artifactId&gt;junit&lt;/artifactId&gt;&lt;version&gt;4.9&lt;/version&gt;&lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;		&lt;dependency&gt;&lt;groupId&gt;cn.tx.maven&lt;/groupId&gt;        //第一个项目的包名&lt;artifactId&gt;Hello&lt;/artifactId&gt;        //第一个项目的文件名&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt;		&lt;/dependencies&gt;
&lt;/project&gt;2.3.3 创建HelloFriend.java文件在src/main/java/cn/tx/maven目录下新建文件HelloFriend.javapackage cn.tx.maven;
import cn.tx.maven.Hello;
public class HelloFriend {public String sayHelloToFriend(String name){Hello hello = new Hello();String str = hello.sayHello(name)+" I am "+this.getMyName();System.out.println(str);return str;}public String getMyName(){return "John";}
}2.3.4 创建HelloFriendTest.java文件在/src/test/java/cn/tx/maven目录下新建测试文件HelloFriendTest.javapackage cn.tx.maven;
import static junit.framework.Assert.assertEquals;
import org.junit.Test;
import cn.tx.maven.Hello;public class HelloFriendTest {@Testpublic void tesHelloFriend(){HelloFriend helloFriend = new HelloFriend();String results = helloFriend.sayHelloToFriend("zhangsan");assertEquals("Hello zhangsan! I am John",results);		}
}2.3.5 测试打包HelloFriend项目在HelloFriend目录下执行命令mvn package系统报错提示:Could not find artifact cn.tx.maven:Hello:jar:0.0.1-SNAPSHOT,表示无法找到HelloFriend所依赖的Hello 0.0.1-SNAPSHOT.jar故此我们需要重新构建第一个项目Hello并安装到数据仓库，在命令行Hello根目录下执行mvn clean install对Hello项目进行清理并安装后,对HelloFriend项目再次进行打包可以看到本次打包成功,说明HelloFriend项目已经可以加载Hello项目所打包的jar包。2.4 Maven仓库配置2.4.1 Maven仓库概念何为Maven仓库？用来统一存储所有Maven共享构建（jar包）的位置就是仓库Maven仓库布局根据Maven坐标定义每个构建在仓库中唯一存储路径groupId/artifactId/version/artifactId-version.packaging仓库的分类①本地仓库每个用户只有一个本地仓库，自己配置默认的：~/.m2/repository/ 可修改②远程仓库（五个）中央仓库：Maven默认的远程仓库   http://repo1.maven.org/maven2私服：是一种特殊的远程仓库，它是架设在局域网内的仓库阿里、腾讯、华为等2.4.2  Maven本地仓库配置全局本地仓库(所有操作系统用户均影响)%MAVEN_HOME%\conf\settings.xml文件，修改该文件会影响所有使用该Maven的用户的本地仓库,例如:2. 用户本地仓库(仅影响使用该配置文件的用户或程序)该文件可以在任意目录,例如:3. 修改配置文件设置Maven本地仓库(以全局设置为例)编辑D:\TOOLS\maven\apache-maven-3.5.4\conf\settings.xml文件，找到如下位置:修改为:保存退出即可以上配置表示所有使用该Maven的程序或用户,如未单独配置,则默认加载以上目录的本地库文件;2.5 IDEA整合Maven项目2.5.1  IDEA的Maven全局配置启动IDEA后找到Settings以上设置完成表示在本idea上,所有项目如未对Maven的配置进行单独配置,则默认均使用该Maven版本和本地库设置;2.5.2  IDEA创建Maven的Java项目2.5.3 IDEA创建Maven的Java web项目见 idea项目搭建的四种方式： 一（以idea2017为例）-CSDN博客2.6 Maven项目视图Maven项目视图主要用于查看该maven项目的各项属性,同时也可以进行一些常见的maven的操作,比如打包,清理,测试等等;http://www.ppmy.cn/news/1541119.html相关文章防火墙和堡垒机有什么区别？防火墙和堡垒机在网络安全领域都扮演着至关重要的角色，但它们在功能、部署位置、作用范围等方面存在显著差异。 
一、功能定位 
防火墙：防火墙是一种网络安全系统，主要作用是在私有网络与公网之间建立一道安全屏障，监控和控制网络流量。它通过预定义的安全规则，决定哪些数…阅读更多...代理 IP：促进在线教育资源普及与公平的新助力现如今&amp;#xff0c;在线教育正以前所未有的速度发展&amp;#xff0c;为人们提供了便捷、高效的学习途径。然而&amp;#xff0c;在线教育资源的普及与公平性仍面临着一些挑战&amp;#xff0c;而代理 IP 在这方面可以发挥重要作用。 一、在线教育资源普及与公平面临的挑战 1. 地域限制 不同地…阅读更多...如何将 Docker 镜像的 tar 文件迁移到另一台服务器并运行容器实验室项目共建人&amp;#xff1a;周凌飞、武正乔、杨霄汉 
本博客部分内容由kimi生成&amp;#xff0c;鸣谢&amp;#xff1a;吴润生 迭代生成式AI提示词思考模型 
在 Docker 容器化的世界里&amp;#xff0c;我们经常需要将容器从一个环境迁移到另一个环境。这可能是因为开发、测试或生产环境的需…阅读更多...算法——python实现归并排序文章目录 归并排序NB三人组总结 归并排序 """
归并排序
""""""
时间复杂度 &amp;#xff1a;               O(N*logN)
空间复杂度 &amp;#xff1a;               O(N)    需要额外生成一个临时变量&amp;#xff0c;最大是N长
思路&amp;#xf…阅读更多...Dataset(helpers文件中dataset_classes文件的datasets.py)该代码定义了一个用于管理和加载不同图数据集的框架。其核心是通过枚举类 DataSet 和 DataSetFamily 来组织数据集，提供了加载数据集、选择数据划分、设置编码器、选择优化器等功能。这些功能允许用户灵活地加载、预处理不同类型的图数据，并在指定的配置下进行训练和评估。 
…阅读更多...spring揭秘31-spring任务调度01-spring集成Quartz及JDKTimer定时器文章目录 【README】【1】Quartz任务调度框架【1.1】Job调度任务【1.2】任务调度触发器Trigger【1.3】\*Quartz框架执行调度任务代码实践【1.3.1】硬编码执行Quartz调度任务【1.3.2】基于生产者模式执行quartz调度任务&amp;#xff08;推荐&amp;#xff09; 【2】spring集成Quartz【2.1…阅读更多...苍穹外卖学习笔记(三十一)文章目录 工作台今日数据接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 订单管理接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 菜品总览接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 套餐总览接口WorkSpaceControllerWorksp…阅读更多...一文了解本地 OSS 可视化工具&amp;#x1f349; CSDN 叶庭云&amp;#xff1a;https://yetingyun.blog.csdn.net/ “丰富的本地 OSS 可视化工具” 通常指的是功能强大且用户友好的图形界面软件&amp;#xff0c;它们在本地计算机上运行&amp;#xff0c;旨在可视化和管理对象存储服务&amp;#xff08;简称 OSS&amp;#xff09;。这些工…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:57 +0000</pubDate>
    </item>
    <item>
      <title>防火墙和堡垒机有什么区别？</title>
      <link>https://www.ppmy.cn/news/1541118.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维防火墙和堡垒机有什么区别？news/2025/11/1 1:18:56/防火墙和堡垒机在网络安全领域都扮演着至关重要的角色，但它们在功能、部署位置、作用范围等方面存在显著差异。一、功能定位防火墙：防火墙是一种网络安全系统，主要作用是在私有网络与公网之间建立一道安全屏障，监控和控制网络流量。它通过预定义的安全规则，决定哪些数据包可以通过，哪些应该被阻止，从而保护内部网络免受外部威胁和未经授权的访问。防火墙的主要功能是保护服务、控制系统访问、增强保密性，并作为策略执行的核心工具。它有效地提升了网络的安全性和稳定性，是企业网络的第一道防线。堡垒机：堡垒机，也被称为跳板机或审计系统，是一种针对内部运维人员的运维安全审计系统。它主要用于管理和控制服务器访问权限，提供安全的登录通道和权限控制。堡垒机通过记录所有用户的访问行为，实现运维过程的审计跟踪，确保运维操作的合规性和可追溯性。同时，堡垒机还具备账号管理功能，能够集中管理运维人员的账号和密码，提高账号安全性。二、部署位置与作用范围防火墙：防火墙通常部署在网络边界，即私有网络与公网之间。它的作用范围是整个网络，通过监控和控制进出网络的数据流，防止外部攻击者入侵内部网络，保护整个网络的安全。防火墙是保护企业网络免受外部威胁的关键设备。堡垒机：堡垒机则通常部署在内网中，作为运维人员访问内部服务器的跳板。它的作用范围主要集中在内部网络，特别是服务器等关键资源的管理和访问控制上。堡垒机通过严格的访问控制和审计策略，防止未经授权的运维操作对内部网络造成损害。三、特点与优势防火墙：http://www.ppmy.cn/news/1541118.html相关文章代理 IP：促进在线教育资源普及与公平的新助力现如今&amp;#xff0c;在线教育正以前所未有的速度发展&amp;#xff0c;为人们提供了便捷、高效的学习途径。然而&amp;#xff0c;在线教育资源的普及与公平性仍面临着一些挑战&amp;#xff0c;而代理 IP 在这方面可以发挥重要作用。 一、在线教育资源普及与公平面临的挑战 1. 地域限制 不同地…阅读更多...如何将 Docker 镜像的 tar 文件迁移到另一台服务器并运行容器实验室项目共建人&amp;#xff1a;周凌飞、武正乔、杨霄汉 
本博客部分内容由kimi生成&amp;#xff0c;鸣谢&amp;#xff1a;吴润生 迭代生成式AI提示词思考模型 
在 Docker 容器化的世界里&amp;#xff0c;我们经常需要将容器从一个环境迁移到另一个环境。这可能是因为开发、测试或生产环境的需…阅读更多...算法——python实现归并排序文章目录 归并排序NB三人组总结 归并排序 """
归并排序
""""""
时间复杂度 &amp;#xff1a;               O(N*logN)
空间复杂度 &amp;#xff1a;               O(N)    需要额外生成一个临时变量&amp;#xff0c;最大是N长
思路&amp;#xf…阅读更多...Dataset(helpers文件中dataset_classes文件的datasets.py)该代码定义了一个用于管理和加载不同图数据集的框架。其核心是通过枚举类 DataSet 和 DataSetFamily 来组织数据集，提供了加载数据集、选择数据划分、设置编码器、选择优化器等功能。这些功能允许用户灵活地加载、预处理不同类型的图数据，并在指定的配置下进行训练和评估。 
…阅读更多...spring揭秘31-spring任务调度01-spring集成Quartz及JDKTimer定时器文章目录 【README】【1】Quartz任务调度框架【1.1】Job调度任务【1.2】任务调度触发器Trigger【1.3】\*Quartz框架执行调度任务代码实践【1.3.1】硬编码执行Quartz调度任务【1.3.2】基于生产者模式执行quartz调度任务&amp;#xff08;推荐&amp;#xff09; 【2】spring集成Quartz【2.1…阅读更多...苍穹外卖学习笔记(三十一)文章目录 工作台今日数据接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 订单管理接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 菜品总览接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 套餐总览接口WorkSpaceControllerWorksp…阅读更多...一文了解本地 OSS 可视化工具&amp;#x1f349; CSDN 叶庭云&amp;#xff1a;https://yetingyun.blog.csdn.net/ “丰富的本地 OSS 可视化工具” 通常指的是功能强大且用户友好的图形界面软件&amp;#xff0c;它们在本地计算机上运行&amp;#xff0c;旨在可视化和管理对象存储服务&amp;#xff08;简称 OSS&amp;#xff09;。这些工…阅读更多...Flink窗口分配器WindowAssigner前言 
Flink 数据流经过 keyBy 分组后&amp;#xff0c;下一步就是 WindowAssigner。 
WindowAssigner 定义了 stream 中的元素如何被分发到各个窗口&amp;#xff0c;元素可以被分发到一个或多个窗口中&amp;#xff0c;Flink 内置了常用的窗口分配器&amp;#xff0c;包括&amp;#xff1a;tumbling wi…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:56 +0000</pubDate>
    </item>
    <item>
      <title>代理 IP：促进在线教育资源普及与公平的新助力</title>
      <link>https://www.ppmy.cn/news/1541117.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维代理 IP：促进在线教育资源普及与公平的新助力news/2025/11/1 1:18:55/现如今，在线教育正以前所未有的速度发展，为人们提供了便捷、高效的学习途径。然而，在线教育资源的普及与公平性仍面临着一些挑战，而代理 IP 在这方面可以发挥重要作用。一、在线教育资源普及与公平面临的挑战1. 地域限制不同地区的网络基础设施和教育资源分布存在差异。一些偏远地区可能由于网络条件不佳，难以顺畅地访问优质的在线教育平台和资源。同时，某些在线教育资源可能会根据地域进行限制，导致部分地区的学生无法获取。2. 网络拥堵在高峰时段，大量用户同时访问在线教育平台，可能会导致网络拥堵，影响学习体验。尤其是对于一些热门课程或重要考试辅导资源，网络拥堵可能会使学生无法及时获取所需内容。3. 访问限制与封禁部分在线教育平台可能会对频繁访问或异常访问行为进行限制或封禁 IP。例如，一些学生为了获取更多学习资源可能会进行多次尝试访问，却可能因此被误判为恶意行为而被封禁 IP，影响正常学习。二、代理 IP 的工作原理及优势代理 IP 作为一种网络技术，通过在用户与目标服务器之间建立中间连接，使用户的请求通过代理服务器转发到目标服务器。这样，目标服务器看到的是代理 IP 的地址，而不是用户的真实 IP 地址。代理 IP 在在线教育中的优势主要有以下几点：1. 突破地域限制通过选择不同地区的代理 IP，学生可以绕过地域限制，访问原本无法获取的在线教育资源。例如，偏远地区的学生可以利用代理 IP 访问发达地区的优质教育平台，实现教育资源的共享。2. 缓解网络拥堵代理 IP 可以分散网络流量，减轻单一 IP 地址对在线教育平台的压力。当某个地区的网络拥堵时，学生可以通过代理 IP 选择其他网络较为畅通的线路，确保学习的顺畅进行。3. 避免 IP 封禁如果学生的 IP 地址被误判为异常访问而被封禁，代理 IP 可以提供一个新的 IP 地址，让学生能够继续访问在线教育资源，不影响学习进度。三、代理 IP 在保证在线教育资源普及与公平中的具体应用1. 促进教育资源共享对于一些教育资源匮乏的地区，代理 IP 可以帮助学生访问其他地区的在线教育平台，获取更多的学习资料、课程视频等。这样可以缩小地区之间的教育差距，促进教育资源的普及。2. 保障特殊情况下的学习在一些突发情况下，如自然灾害、疫情等，学生可能无法正常使用本地网络进行学习。代理 IP 可以为学生提供备用的网络访问途径，确保他们能够继续接受在线教育，保障学习的连续性。3. 公平竞争的环境在在线考试或竞赛中，代理 IP 可以确保每个学生都有平等的机会访问考试平台和资源，避免因网络问题或 IP 限制而影响成绩的公平性。四、正确使用代理 IP 的注意事项虽然代理 IP 在促进在线教育资源普及与公平方面有很大的潜力，但也需要正确使用。首先，要选择合法、可靠的代理 IP 服务提供商，确保网络安全和稳定性。其次，学生在使用代理 IP 时应遵守法律法规和在线教育平台的使用规则，不得进行非法或不当的行为。总的来说，代理 IP 作为一种有效的网络技术手段，可以在一定程度上解决在线教育资源普及与公平面临的问题。通过突破地域限制、缓解网络拥堵和避免 IP 封禁等方式，代理 IP 为学生提供了更加公平、便捷的在线教育环境，有助于推动教育的均衡发展。http://www.ppmy.cn/news/1541117.html相关文章如何将 Docker 镜像的 tar 文件迁移到另一台服务器并运行容器实验室项目共建人&amp;#xff1a;周凌飞、武正乔、杨霄汉 
本博客部分内容由kimi生成&amp;#xff0c;鸣谢&amp;#xff1a;吴润生 迭代生成式AI提示词思考模型 
在 Docker 容器化的世界里&amp;#xff0c;我们经常需要将容器从一个环境迁移到另一个环境。这可能是因为开发、测试或生产环境的需…阅读更多...算法——python实现归并排序文章目录 归并排序NB三人组总结 归并排序 """
归并排序
""""""
时间复杂度 &amp;#xff1a;               O(N*logN)
空间复杂度 &amp;#xff1a;               O(N)    需要额外生成一个临时变量&amp;#xff0c;最大是N长
思路&amp;#xf…阅读更多...Dataset(helpers文件中dataset_classes文件的datasets.py)该代码定义了一个用于管理和加载不同图数据集的框架。其核心是通过枚举类 DataSet 和 DataSetFamily 来组织数据集，提供了加载数据集、选择数据划分、设置编码器、选择优化器等功能。这些功能允许用户灵活地加载、预处理不同类型的图数据，并在指定的配置下进行训练和评估。 
…阅读更多...spring揭秘31-spring任务调度01-spring集成Quartz及JDKTimer定时器文章目录 【README】【1】Quartz任务调度框架【1.1】Job调度任务【1.2】任务调度触发器Trigger【1.3】\*Quartz框架执行调度任务代码实践【1.3.1】硬编码执行Quartz调度任务【1.3.2】基于生产者模式执行quartz调度任务&amp;#xff08;推荐&amp;#xff09; 【2】spring集成Quartz【2.1…阅读更多...苍穹外卖学习笔记(三十一)文章目录 工作台今日数据接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 订单管理接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 菜品总览接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 套餐总览接口WorkSpaceControllerWorksp…阅读更多...一文了解本地 OSS 可视化工具&amp;#x1f349; CSDN 叶庭云&amp;#xff1a;https://yetingyun.blog.csdn.net/ “丰富的本地 OSS 可视化工具” 通常指的是功能强大且用户友好的图形界面软件&amp;#xff0c;它们在本地计算机上运行&amp;#xff0c;旨在可视化和管理对象存储服务&amp;#xff08;简称 OSS&amp;#xff09;。这些工…阅读更多...Flink窗口分配器WindowAssigner前言 
Flink 数据流经过 keyBy 分组后&amp;#xff0c;下一步就是 WindowAssigner。 
WindowAssigner 定义了 stream 中的元素如何被分发到各个窗口&amp;#xff0c;元素可以被分发到一个或多个窗口中&amp;#xff0c;Flink 内置了常用的窗口分配器&amp;#xff0c;包括&amp;#xff1a;tumbling wi…阅读更多...点菜问题(北京大学考研机试题01背包)北大网络实验室经常有活动需要叫外卖&amp;#xff0c;但是每次叫外卖的报销经费的总额最大为 CC 元&amp;#xff0c;有 NN 种菜可以点&amp;#xff0c;经过长时间的点菜&amp;#xff0c;网络实验室对于每种菜 ii 都有一个量化的评价分数&amp;#xff08;表示这个菜可口程度&amp;#xff09;&amp;#xff0c;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:55 +0000</pubDate>
    </item>
    <item>
      <title>如何将 Docker 镜像的 tar 文件迁移到另一台服务器并运行容器</title>
      <link>https://www.ppmy.cn/news/1541116.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维如何将 Docker 镜像的 tar 文件迁移到另一台服务器并运行容器news/2025/11/1 1:18:54/实验室项目共建人：周凌飞、武正乔、杨霄汉本博客部分内容由kimi生成，鸣谢：吴润生 迭代生成式AI提示词思考模型在 Docker 容器化的世界里，我们经常需要将容器从一个环境迁移到另一个环境。这可能是因为开发、测试或生产环境的需求。本文将详细介绍如何将 Docker 镜像的 tar 文件从一台服务器迁移到另一台服务器（IP 地址为192.168.100.10），并在目标服务器的/data/目录下加载镜像及运行容器。步骤 1: 保存容器为镜像首先，我们需要将正在运行的容器保存为一个新的 Docker 镜像。这可以通过docker commit命令完成：docker commit 87935e5efea3 mylinuxcommand:latest这里87935e5efea3是容器的 ID，mylinuxcommand:latest是新镜像的名称和标签。步骤 2: 将镜像保存为 tar 文件接下来，我们使用docker save命令将新创建的镜像保存为 tar 文件：docker save -o mylinuxcommand.tar mylinuxcommand:latest这会创建一个名为mylinuxcommand.tar的文件，包含了mylinuxcommand:latest镜像的所有数据。步骤 3: 将 tar 文件传输到目标服务器现在，我们需要将这个 tar 文件传输到目标服务器192.168.100.10的/data/目录。我们可以使用scp命令来实现：scp mylinuxcommand.tar root@192.168.100.10:/data/请确保目标服务器的/data/目录存在，并且root用户有权限写入该目录。步骤 4: 在目标服务器上加载镜像并运行容器传输完成后，我们需要在目标服务器上登录，并加载这个 tar 文件为 Docker 镜像：ssh root@192.168.100.10
docker load -i /data/mylinuxcommand.tar加载完成后，我们可以使用docker run命令来启动新的容器：docker run -d -p 9700:3000 --name new-linux-command mylinuxcommand:latest这将在目标服务器上启动一个新的容器，将容器的 3000 端口映射到宿主机的 9700 端口。注意事项确保目标服务器192.168.100.10上已安装 Docker，并且 Docker 服务正在运行。确保您有足够的权限在目标服务器上执行 Docker 命令。确保/data/目录在目标服务器上存在，并且root用户有权限写入该目录。如果目标服务器上的 Docker 版本与源服务器不同，可能会影响容器的兼容性。在生产环境中，建议使用 Dockerfile 来构建镜像，以确保构建过程的可重复性和可维护性。通过以上步骤，您可以轻松地将 Docker 镜像从一个服务器迁移到另一个服务器，并在新的环境中运行您的容器。这为容器化应用的部署和管理提供了极大的灵活性和便利。http://www.ppmy.cn/news/1541116.html相关文章算法——python实现归并排序文章目录 归并排序NB三人组总结 归并排序 """
归并排序
""""""
时间复杂度 &amp;#xff1a;               O(N*logN)
空间复杂度 &amp;#xff1a;               O(N)    需要额外生成一个临时变量&amp;#xff0c;最大是N长
思路&amp;#xf…阅读更多...Dataset(helpers文件中dataset_classes文件的datasets.py)该代码定义了一个用于管理和加载不同图数据集的框架。其核心是通过枚举类 DataSet 和 DataSetFamily 来组织数据集，提供了加载数据集、选择数据划分、设置编码器、选择优化器等功能。这些功能允许用户灵活地加载、预处理不同类型的图数据，并在指定的配置下进行训练和评估。 
…阅读更多...spring揭秘31-spring任务调度01-spring集成Quartz及JDKTimer定时器文章目录 【README】【1】Quartz任务调度框架【1.1】Job调度任务【1.2】任务调度触发器Trigger【1.3】\*Quartz框架执行调度任务代码实践【1.3.1】硬编码执行Quartz调度任务【1.3.2】基于生产者模式执行quartz调度任务&amp;#xff08;推荐&amp;#xff09; 【2】spring集成Quartz【2.1…阅读更多...苍穹外卖学习笔记(三十一)文章目录 工作台今日数据接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 订单管理接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 菜品总览接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 套餐总览接口WorkSpaceControllerWorksp…阅读更多...一文了解本地 OSS 可视化工具&amp;#x1f349; CSDN 叶庭云&amp;#xff1a;https://yetingyun.blog.csdn.net/ “丰富的本地 OSS 可视化工具” 通常指的是功能强大且用户友好的图形界面软件&amp;#xff0c;它们在本地计算机上运行&amp;#xff0c;旨在可视化和管理对象存储服务&amp;#xff08;简称 OSS&amp;#xff09;。这些工…阅读更多...Flink窗口分配器WindowAssigner前言 
Flink 数据流经过 keyBy 分组后&amp;#xff0c;下一步就是 WindowAssigner。 
WindowAssigner 定义了 stream 中的元素如何被分发到各个窗口&amp;#xff0c;元素可以被分发到一个或多个窗口中&amp;#xff0c;Flink 内置了常用的窗口分配器&amp;#xff0c;包括&amp;#xff1a;tumbling wi…阅读更多...点菜问题(北京大学考研机试题01背包)北大网络实验室经常有活动需要叫外卖&amp;#xff0c;但是每次叫外卖的报销经费的总额最大为 CC 元&amp;#xff0c;有 NN 种菜可以点&amp;#xff0c;经过长时间的点菜&amp;#xff0c;网络实验室对于每种菜 ii 都有一个量化的评价分数&amp;#xff08;表示这个菜可口程度&amp;#xff09;&amp;#xff0c;…阅读更多...基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell 所需依赖Word水印Pdf水印——&amp;#xff08; 注意 pdf 存在找不到字体的问题&amp;#xff09;Excel水印 所需依赖 &lt;dependency&gt;&lt;groupId&gt;com.aspose&lt;/groupId&gt;&lt;artifactId&gt;aspose-pdf&lt;/artifactId&amp;g…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:54 +0000</pubDate>
    </item>
    <item>
      <title>算法——python实现归并排序</title>
      <link>https://www.ppmy.cn/news/1541115.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维算法——python实现归并排序news/2025/11/1 1:18:53/文章目录归并排序NB三人组总结归并排序"""
归并排序
""""""
时间复杂度 ：               O(N*logN)
空间复杂度 ：               O(N)    需要额外生成一个临时变量，最大是N长
思路：假设有列表被分成两段，这两个段都是以同样的方式排好序的，那么只需要将这两段进行归并排序一次，列表就被排好序了。
由此思想，逐层递归。
"""defmerge(li,low,mid,high):i=lowj=mid+1ltmp=[]whilei&lt;=midandj&lt;=high:# 只要左右两边都有数ifli[i]&lt;li[j]:ltmp.append(li[i])i+=1else:ltmp.append(li[j])j+=1# while执行完，肯定有一部分没数了whilei&lt;=mid:ltmp.append(li[i])i+=1whilej&lt;=high:ltmp.append(li[j])j+=1li[low:high+1]=ltmp# li = [2,4,5,7,1,3,6,8]# merge(li, 0, 3, 7)# print(li)defmerge_sort(li,low,high):iflow&lt;high:# 至少有两个元素，递归mid=(low+high)//2merge_sort(li,low,mid)merge_sort(li,mid+1,high)merge(li,low,mid,high)li=list(range(1000))importrandomrandom.shuffle(li)print(li)merge_sort(li,0,len(li)-1)print(li)NB三人组总结​ &gt; 若有错误与不足请指出，关注DPT一起进步吧！！！http://www.ppmy.cn/news/1541115.html相关文章Dataset(helpers文件中dataset_classes文件的datasets.py)该代码定义了一个用于管理和加载不同图数据集的框架。其核心是通过枚举类 DataSet 和 DataSetFamily 来组织数据集，提供了加载数据集、选择数据划分、设置编码器、选择优化器等功能。这些功能允许用户灵活地加载、预处理不同类型的图数据，并在指定的配置下进行训练和评估。 
…阅读更多...spring揭秘31-spring任务调度01-spring集成Quartz及JDKTimer定时器文章目录 【README】【1】Quartz任务调度框架【1.1】Job调度任务【1.2】任务调度触发器Trigger【1.3】\*Quartz框架执行调度任务代码实践【1.3.1】硬编码执行Quartz调度任务【1.3.2】基于生产者模式执行quartz调度任务&amp;#xff08;推荐&amp;#xff09; 【2】spring集成Quartz【2.1…阅读更多...苍穹外卖学习笔记(三十一)文章目录 工作台今日数据接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 订单管理接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 菜品总览接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 套餐总览接口WorkSpaceControllerWorksp…阅读更多...一文了解本地 OSS 可视化工具&amp;#x1f349; CSDN 叶庭云&amp;#xff1a;https://yetingyun.blog.csdn.net/ “丰富的本地 OSS 可视化工具” 通常指的是功能强大且用户友好的图形界面软件&amp;#xff0c;它们在本地计算机上运行&amp;#xff0c;旨在可视化和管理对象存储服务&amp;#xff08;简称 OSS&amp;#xff09;。这些工…阅读更多...Flink窗口分配器WindowAssigner前言 
Flink 数据流经过 keyBy 分组后&amp;#xff0c;下一步就是 WindowAssigner。 
WindowAssigner 定义了 stream 中的元素如何被分发到各个窗口&amp;#xff0c;元素可以被分发到一个或多个窗口中&amp;#xff0c;Flink 内置了常用的窗口分配器&amp;#xff0c;包括&amp;#xff1a;tumbling wi…阅读更多...点菜问题(北京大学考研机试题01背包)北大网络实验室经常有活动需要叫外卖&amp;#xff0c;但是每次叫外卖的报销经费的总额最大为 CC 元&amp;#xff0c;有 NN 种菜可以点&amp;#xff0c;经过长时间的点菜&amp;#xff0c;网络实验室对于每种菜 ii 都有一个量化的评价分数&amp;#xff08;表示这个菜可口程度&amp;#xff09;&amp;#xff0c;…阅读更多...基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell 所需依赖Word水印Pdf水印——&amp;#xff08; 注意 pdf 存在找不到字体的问题&amp;#xff09;Excel水印 所需依赖 &lt;dependency&gt;&lt;groupId&gt;com.aspose&lt;/groupId&gt;&lt;artifactId&gt;aspose-pdf&lt;/artifactId&amp;g…阅读更多...vue3学习记录-transitionvue3学习记录-transition 1.基础用法2.自定义css名2.1用法2.2 和 Animate.css一起使用 3. transition的生命周期钩子4.appear属性5.使用 Key Attribute 过渡 1.基础用法 是一个内置组件&amp;#xff0c;这意味着它在任意别的组件中都可以被使用&amp;#xff0c;无需注册。它可以将进入和…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:53 +0000</pubDate>
    </item>
    <item>
      <title>Dataset(helpers文件中dataset_classes文件的datasets.py)</title>
      <link>https://www.ppmy.cn/news/1541114.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Dataset(helpers文件中dataset_classes文件的datasets.py)news/2025/11/1 1:18:52/该代码定义了一个用于管理和加载不同图数据集的框架。其核心是通过枚举类DataSet和DataSetFamily来组织数据集，提供了加载数据集、选择数据划分、设置编码器、选择优化器等功能。这些功能允许用户灵活地加载、预处理不同类型的图数据，并在指定的配置下进行训练和评估。import copy
import os.path as osp
from enum import Enum, auto
import torch
from torch import Tensor
from typing import NamedTuple, Optional, List, Union, Callable
from torch_geometric.data import Data
import torch_geometric.transforms as T
from torch_geometric.datasets import HeterophilousGraphDataset
import json
import numpy as npfrom helpers.dataset_classes.root_neighbours_dataset import RootNeighboursDataset
from helpers.dataset_classes.cycles_dataset import CyclesDataset
from helpers.dataset_classes.lrgb import PeptidesFunctionalDataset
from helpers.dataset_classes.classic_datasets import Planetoid
from helpers.constants import ROOT_DIR
from helpers.metrics import MetricType
from helpers.classes import ActivationType, Pool, ModelType
from helpers.encoders import DataSetEncoders, PosEncoder
from lrgb.cosine_scheduler import cosine_with_warmup_scheduler
from lrgb.transforms import apply_transformclass DatasetBySplit(NamedTuple):train: Union[Data, List[Data]]val: Union[Data, List[Data]]test: Union[Data, List[Data]]class DataSetFamily(Enum):heterophilic = auto()synthetic = auto()social_networks = auto()proteins = auto()lrgb = auto()homophilic = auto()@staticmethoddef from_string(s: str):try:return DataSetFamily[s]except KeyError:raise ValueError()class DataSet(Enum):"""an object for the different datasets"""# heterophilicroman_empire = auto()amazon_ratings = auto()minesweeper = auto()tolokers = auto()questions = auto()# syntheticroot_neighbours = auto()cycles = auto()# social networksimdb_binary = auto()imdb_multi = auto()reddit_binary = auto()reddit_multi = auto()# proteinsenzymes = auto()proteins = auto()nci1 = auto()# lrgbfunc = auto()# homophiliccora = auto()pubmed = auto()@staticmethoddef from_string(s: str):try:return DataSet[s]except KeyError:raise ValueError()def get_family(self) -&gt; DataSetFamily:if self in [DataSet.roman_empire, DataSet.amazon_ratings, DataSet.minesweeper,DataSet.tolokers, DataSet.questions]:return DataSetFamily.heterophilicelif self in [DataSet.root_neighbours, DataSet.cycles]:return DataSetFamily.syntheticelif self in [DataSet.imdb_binary, DataSet.imdb_multi, DataSet.reddit_binary, DataSet.reddit_multi]:return DataSetFamily.social_networkselif self in [DataSet.enzymes, DataSet.proteins, DataSet.nci1]:return DataSetFamily.proteinselif self is DataSet.func:return DataSetFamily.lrgbelif self in [DataSet.cora, DataSet.pubmed]:return DataSetFamily.homophilicelse:raise ValueError(f'DataSet {self.name} not supported in dataloader')def is_node_based(self) -&gt; bool:return self.get_family() in [DataSetFamily.heterophilic, DataSetFamily.homophilic]\or self is DataSet.root_neighboursdef not_synthetic(self) -&gt; bool:return self.get_family() is not DataSetFamily.syntheticdef is_expressivity(self) -&gt; bool:return self is DataSet.cyclesdef clip_grad(self) -&gt; bool:return self.get_family() is DataSetFamily.lrgbdef get_dataset_encoders(self):if self.get_family() in [DataSetFamily.heterophilic, DataSetFamily.synthetic, DataSetFamily.social_networks,DataSetFamily.proteins, DataSetFamily.homophilic]:return DataSetEncoders.NONEelif self is DataSet.func:return DataSetEncoders.MOLelse:raise ValueError(f'DataSet {self.name} not supported in get_dataset_encoders')def get_folds(self, fold: int) -&gt; List[int]:if self.get_family() in [DataSetFamily.synthetic, DataSetFamily.lrgb]:return list(range(1))elif self.get_family() in [DataSetFamily.heterophilic, DataSetFamily.homophilic]:return list(range(10))elif self.get_family() in [DataSetFamily.social_networks, DataSetFamily.proteins]:return [fold]else:raise ValueError(f'DataSet {self.name} not supported in dataloader')def load(self, seed: int, pos_enc: PosEncoder) -&gt; List[Data]:root = osp.join(ROOT_DIR, 'datasets')if self.get_family() is DataSetFamily.heterophilic:name = self.name.replace('_', '-').capitalize()dataset = [HeterophilousGraphDataset(root=root, name=name, transform=T.ToUndirected())[0]]elif self.get_family() in [DataSetFamily.social_networks, DataSetFamily.proteins]:tu_dataset_name = self.name.upper().replace('_', '-')root = osp.join(ROOT_DIR, 'datasets', tu_dataset_name)dataset = torch.load(root + '.pt')elif self is DataSet.root_neighbours:dataset = [RootNeighboursDataset(seed=seed).get()]elif self is DataSet.cycles:dataset = CyclesDataset().dataelif self is DataSet.func:dataset = PeptidesFunctionalDataset(root=root)dataset = apply_transform(dataset=dataset, pos_encoder=pos_enc)elif self.get_family() is DataSetFamily.homophilic:dataset = [Planetoid(root=root, name=self.name, transform=T.NormalizeFeatures())[0]]else:raise ValueError(f'DataSet {self.name} not supported in dataloader')return datasetdef select_fold_and_split(self, dataset: List[Data], num_fold: int) -&gt; DatasetBySplit:if self.get_family() is DataSetFamily.heterophilic:dataset_copy = copy.deepcopy(dataset)dataset_copy[0].train_mask = dataset_copy[0].train_mask[:, num_fold]dataset_copy[0].val_mask = dataset_copy[0].val_mask[:, num_fold]dataset_copy[0].test_mask = dataset_copy[0].test_mask[:, num_fold]return DatasetBySplit(train=dataset_copy, val=dataset_copy, test=dataset_copy)elif self.get_family() is DataSetFamily.synthetic:return DatasetBySplit(train=dataset, val=dataset, test=dataset)elif self.get_family() in [DataSetFamily.social_networks, DataSetFamily.proteins]:tu_dataset_name = self.name.upper().replace('_', '-')original_fold_dict = json.load(open(f'folds/{tu_dataset_name}_splits.json', "r"))[num_fold]model_selection_dict = original_fold_dict['model_selection'][0]split_dict = {'train': model_selection_dict['train'], 'val': model_selection_dict['validation'],'test': original_fold_dict['test']}dataset_by_splits = [[dataset[idx] for idx in split_dict[split]] for split in DatasetBySplit._fields]return DatasetBySplit(*dataset_by_splits)elif self is DataSet.func:split_idx = dataset.get_idx_split()dataset_by_splits = [[dataset[idx] for idx in split_idx[split]] for split in DatasetBySplit._fields]return DatasetBySplit(*dataset_by_splits)elif self.get_family() is DataSetFamily.homophilic:device = dataset[0].x.devicewith np.load(f'folds/{self.name}_split_0.6_0.2_{num_fold}.npz') as folds_file:train_mask = torch.tensor(folds_file['train_mask'], dtype=torch.bool, device=device)val_mask = torch.tensor(folds_file['val_mask'], dtype=torch.bool, device=device)test_mask = torch.tensor(folds_file['test_mask'], dtype=torch.bool, device=device)setattr(dataset[0], 'train_mask', train_mask)setattr(dataset[0], 'val_mask', val_mask)setattr(dataset[0], 'test_mask', test_mask)dataset[0].train_mask[dataset[0].non_valid_samples] = Falsedataset[0].test_mask[dataset[0].non_valid_samples] = Falsedataset[0].val_mask[dataset[0].non_valid_samples] = Falsereturn DatasetBySplit(train=dataset, val=dataset, test=dataset)else:raise ValueError(f'NotImplemented')def get_metric_type(self) -&gt; MetricType:if self.get_family() in [DataSetFamily.social_networks, DataSetFamily.proteins, DataSetFamily.homophilic]\or self in [DataSet.roman_empire, DataSet.amazon_ratings, DataSet.cycles]:return MetricType.ACCURACYelif self in [DataSet.minesweeper, DataSet.tolokers, DataSet.questions]:return MetricType.AUC_ROCelif self is DataSet.root_neighbours:return MetricType.MSE_MAEelif self is DataSet.func:return MetricType.MULTI_LABEL_APelse:raise ValueError(f'DataSet {self.name} not supported in dataloader')def num_after_decimal(self) -&gt; int:return 4 if self.get_family() is DataSetFamily.lrgb else 2def env_activation_type(self) -&gt; ActivationType:if self.get_family() in [DataSetFamily.heterophilic, DataSetFamily.lrgb]:return ActivationType.GELUelse:return ActivationType.RELUdef gin_mlp_func(self) -&gt; Callable:if self is DataSet.func:def mlp_func(in_channels: int, out_channels: int, bias: bool):return torch.nn.Sequential(torch.nn.Linear(in_channels, out_channels, bias=bias),torch.nn.ReLU(), torch.nn.Linear(out_channels, out_channels, bias=bias))elif self.get_family() in [DataSetFamily.social_networks, DataSetFamily.proteins]:def mlp_func(in_channels: int, out_channels: int, bias: bool):return torch.nn.Sequential(torch.nn.Linear(in_channels, 2 * in_channels, bias=bias),torch.nn.ReLU(), torch.nn.Linear(2 * in_channels, out_channels, bias=bias))else:def mlp_func(in_channels: int, out_channels: int, bias: bool):return torch.nn.Sequential(torch.nn.Linear(in_channels, 2 * in_channels, bias=bias),torch.nn.BatchNorm1d(2 * in_channels),torch.nn.ReLU(), torch.nn.Linear(2 * in_channels, out_channels, bias=bias))return mlp_funcdef optimizer(self, model, lr: float, weight_decay: float):if self.get_family() in [DataSetFamily.heterophilic, DataSetFamily.synthetic, DataSetFamily.social_networks,DataSetFamily.proteins, DataSetFamily.homophilic]:return torch.optim.Adam(model.parameters(), lr=lr, weight_decay=weight_decay)elif self.get_family() is DataSetFamily.lrgb:return torch.optim.AdamW(model.parameters(), lr=lr, weight_decay=weight_decay)else:raise ValueError(f'DataSet {self.name} not supported in dataloader')def schttp://www.ppmy.cn/news/1541114.html相关文章spring揭秘31-spring任务调度01-spring集成Quartz及JDKTimer定时器文章目录 【README】【1】Quartz任务调度框架【1.1】Job调度任务【1.2】任务调度触发器Trigger【1.3】\*Quartz框架执行调度任务代码实践【1.3.1】硬编码执行Quartz调度任务【1.3.2】基于生产者模式执行quartz调度任务&amp;#xff08;推荐&amp;#xff09; 【2】spring集成Quartz【2.1…阅读更多...苍穹外卖学习笔记(三十一)文章目录 工作台今日数据接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 订单管理接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 菜品总览接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 套餐总览接口WorkSpaceControllerWorksp…阅读更多...一文了解本地 OSS 可视化工具&amp;#x1f349; CSDN 叶庭云&amp;#xff1a;https://yetingyun.blog.csdn.net/ “丰富的本地 OSS 可视化工具” 通常指的是功能强大且用户友好的图形界面软件&amp;#xff0c;它们在本地计算机上运行&amp;#xff0c;旨在可视化和管理对象存储服务&amp;#xff08;简称 OSS&amp;#xff09;。这些工…阅读更多...Flink窗口分配器WindowAssigner前言 
Flink 数据流经过 keyBy 分组后&amp;#xff0c;下一步就是 WindowAssigner。 
WindowAssigner 定义了 stream 中的元素如何被分发到各个窗口&amp;#xff0c;元素可以被分发到一个或多个窗口中&amp;#xff0c;Flink 内置了常用的窗口分配器&amp;#xff0c;包括&amp;#xff1a;tumbling wi…阅读更多...点菜问题(北京大学考研机试题01背包)北大网络实验室经常有活动需要叫外卖&amp;#xff0c;但是每次叫外卖的报销经费的总额最大为 CC 元&amp;#xff0c;有 NN 种菜可以点&amp;#xff0c;经过长时间的点菜&amp;#xff0c;网络实验室对于每种菜 ii 都有一个量化的评价分数&amp;#xff08;表示这个菜可口程度&amp;#xff09;&amp;#xff0c;…阅读更多...基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell 所需依赖Word水印Pdf水印——&amp;#xff08; 注意 pdf 存在找不到字体的问题&amp;#xff09;Excel水印 所需依赖 &lt;dependency&gt;&lt;groupId&gt;com.aspose&lt;/groupId&gt;&lt;artifactId&gt;aspose-pdf&lt;/artifactId&amp;g…阅读更多...vue3学习记录-transitionvue3学习记录-transition 1.基础用法2.自定义css名2.1用法2.2 和 Animate.css一起使用 3. transition的生命周期钩子4.appear属性5.使用 Key Attribute 过渡 1.基础用法 是一个内置组件&amp;#xff0c;这意味着它在任意别的组件中都可以被使用&amp;#xff0c;无需注册。它可以将进入和…阅读更多...KUKA机器人选定程序时提示“选择非法”的处理方法KUKA机器人选定程序时提示“选择非法”的处理方法 如下图所示，选中某个程序，点击选定时， 系统提示：选择非法， 具体处理方法可参考以下内容： 选中该程序后，在右下角打开【编辑】菜单键，再选择【属性】，打开后可以看到程序的一般说明、信息模块和参数等信息，如下图所示…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:52 +0000</pubDate>
    </item>
    <item>
      <title>spring揭秘31-spring任务调度01-spring集成Quartz及JDKTimer定时器</title>
      <link>https://www.ppmy.cn/news/1541113.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维spring揭秘31-spring任务调度01-spring集成Quartz及JDKTimer定时器news/2025/11/1 1:18:50/文章目录【README】【1】Quartz任务调度框架【1.1】Job调度任务【1.2】任务调度触发器Trigger【1.3】\*Quartz框架执行调度任务代码实践【1.3.1】硬编码执行Quartz调度任务【1.3.2】基于生产者模式执行quartz调度任务（推荐）【2】spring集成Quartz【2.1】spring管理quartz组件对象【2.1.1】spring管理quartz的Job【2.1.2】spring管理quartz的JobDetail【2.1.3】spring管理quartz的Trigger【2.1.4】spirng管理quartz的Scheduler【2.2】spring启动quartz调度器执行调度任务【3】JDK Timer定时器【3.1】JDK Timer基础知识回顾【3.2】定时器任务单次执行【3.2.1】给定延迟时间之后执行单次任务【3.2.2】在给定时间点执行单次任务【3.3】 定时器任务重复执行【3.3.1】在给定延迟时间后重复执行【3.2.2】在给定时间点重复执行【3.3.3】定时器任务重复执行注意点【3.4】取消调度器与调度任务【3.4.1】 在run方法里取消调度任务【3.5】定时器Timer与调度线程池对比【3.5.1】调度线程池执行调度任务回顾【3.5.2】定时器与调度线程池ScheduledExecutorService对比【README】本文部分内容总结自《spring揭秘》，作者王福强，非常棒的一本书，墙裂推荐；本文部分内容总结自： https://juejin.cn/post/7158071449314394119本文代码参见： github-springDiscover-chapter31【1】Quartz任务调度框架1）Quartz：是一款开源的任务调度框架； 官网介绍参见： quartz-scheduler官网介绍总结（翻译）：quartz是一款功能丰富的开源作业调度库，可以集成几乎任何java应用，从最小的单体应用到最大的电子商务系统。quartz能够用于创建简单或复杂的调度以执行数十，数百，数万个作业；这些作业的任务可以被定义为标准的java组件，可以执行你编程让它们做的任何操作。quartz调度器包含许多企业级功能，如支持JTA事务与集群。应用场景： 定时执行业务逻辑（如数据同步，发送短信），每隔一段时间执行业务逻辑（如每隔5秒发送1次心跳）；2）相对于JDK的Timer之类的简单任务调度程序来说，Quartz拥有丰富的功能，如下：允许批处理任务状态的持久化；批处理任务的远程调度；基于web的监控接口；集群支持； （同一时刻只有一个任务执行；当一个任务宕机之后，其它服务会接管这个任务）插件式的可扩展性；3）Quartz组件清单；Job： 抽象调度任务（作业）；JobDetail：封装job的详细信息，如job名称，组名称，job的class，JobDataMap等；Trigger：触发器，抽象job触发规则（如执行开始时间，结束时间，执行频率）；Scheduler：调度器； 使用Trigger定义的规则执行job；JobBuilder：Job生成器；用于创建Job实例；TriggerBuilder：Trigger生成器；用于创建Trigger实例；JobExecutionContext：Job运行时上下文；JobDataMap： 封装参数键值对，用于Job与JobDetail的数据交互；4）Quartz基本组件关系如下：5）使用 quartz任务调度框架，需要引入对应maven依赖，如下：&lt;dependency&gt;&lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;&lt;artifactId&gt;quartz&lt;/artifactId&gt;&lt;version&gt;2.3.2&lt;/version&gt;&lt;/dependency&gt;【1.1】Job调度任务1）quartz中调度任务job定义publicinterfaceJob{voidexecute(JobExecutionContextvar1)throwsJobExecutionException;}2）调度任务实现job接口；publicclassTomScheduleJobimplementsJob{@Overridepublicvoidexecute(JobExecutionContextjobExecutionContext)throwsJobExecutionException{// do sth.System.out.println("MyScheduleJob#当前时间="+BusiDatetimeUtils.getNowText());}}【1.2】任务调度触发器Trigger1）触发器：定义job触发规则；如每隔10分钟执行1次，每天早上7点，9点准时执行1次；2）触发器Trigger定义如下：publicinterfaceTriggerextendsSerializable,Cloneable,Comparable&lt;Trigger&gt;{longserialVersionUID=-3904243490805975570L;intMISFIRE_INSTRUCTION_SMART_POLICY=0;intMISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY=-1;intDEFAULT_PRIORITY=5;TriggerKeygetKey();JobKeygetJobKey();StringgetDescription();StringgetCalendarName();JobDataMapgetJobDataMap();intgetPriority();booleanmayFireAgain();DategetStartTime();DategetEndTime();DategetNextFireTime();DategetPreviousFireTime();DategetFireTimeAfter(Datevar1);DategetFinalFireTime();intgetMisfireInstruction();TriggerBuilder&lt;?extendsTrigger&gt;getTriggerBuilder();ScheduleBuilder&lt;?extendsTrigger&gt;getScheduleBuilder();booleanequals(Objectvar1);intcompareTo(Triggervar1);// ...}2）触发器的两种主要实现：SimpleTrigger：指定基于时间间隔的调度规则（触发规则）；CronTrigger：指定基于cron表达式的调度规则；（包括但不限于时间间隔，还可以指定具体时间执行，触发规则更加灵活）【1.3】*Quartz框架执行调度任务代码实践【1.3.1】硬编码执行Quartz调度任务【TomQuartzJob】publicclassTomQuartzJobimplementsJob{@Overridepublicvoidexecute(JobExecutionContextjobExecutionContext)throwsJobExecutionException{// do sth.System.out.println("TomQuartzJob#当前时间="+BusiDatetimeUtils.getNowText());}}【TomQuartzJobMain】publicclassTomQuartzJobMain{publicstaticvoidmain(String[]args)throwsException{executeScheduleJob();}privatestaticvoidexecuteScheduleJob()throwsParseException,SchedulerException{// 新建触发器SimpleTriggerImplsimpleTrigger=newSimpleTriggerImpl("tomSimpleTrigger","tomSimpleTriggerGroup",newDate(),null,SimpleTriggerImpl.REPEAT_INDEFINITELY,5000);// 每隔5秒执行1次CronTriggerImplcronTrigger=newCronTriggerImpl("tomSimpleTrigger","tomSimpleTriggerGroup","*/5 * * * * ?");// 新建调度器Schedulerscheduler=newStdSchedulerFactory().getScheduler();scheduler.start();// 新建调度任务详情JobDetailImpltomJobDetail=newJobDetailImpl("tomJobDetail",TomQuartzJob.class);// 新增调度任务（这里是新增，并没有执行，执行由触发器来负责）//        scheduler.scheduleJob(tomJobDetail, simpleTrigger);scheduler.scheduleJob(tomJobDetail,cronTrigger);}}【1.3.2】基于生产者模式执行quartz调度任务（推荐）1）基于生成器模式执行调度任务： 参考 quick-start【TomTimeRemindJob】publicclassTomTimeRemindJobimplementsJob{@Overridepublicvoidexecute(JobExecutionContextcontext)throwsJobExecutionException{System.out.println("=========================================");context.getMergedJobDataMap().forEach((k,v)-&gt;System.out.println(k+"="+v));context.getJobDetail().getJobDataMap().forEach((k,v)-&gt;System.out.println(k+"="+v));System.out.println("TomTimeRemindJob now="+BusiDatetimeUtils.getNowText());}}【TomTimeRemindJobMain】publicclassTomTimeRemindJobMain{publicstaticvoidmain(String[]args)throwsSchedulerException{// 创建调度器实例Schedulerscheduler=StdSchedulerFactory.getDefaultScheduler();// 开启调度器scheduler.start();// 执行调度作业executeScheduleJob(scheduler);// 关闭调度器//        scheduler.shutdown();}privatestaticvoidexecuteScheduleJob(Schedulerscheduler)throwsSchedulerException{// 创建JobDetail，并与TomTimeRemindJob 绑定JobDetailjobDetail=JobBuilder.newJob(TomTimeRemindJob.class).withIdentity("tomJob01","tomJob01Group").build();// 立即触发作业执行，每5秒重复一次TriggersimpleTrigger=TriggerBuilder.newTrigger().withIdentity("tomTrigger01","tomTrigger01Group").startNow().withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(5).repeatForever()).build();// 告诉quartz使用我们的触发器调度作业scheduler.scheduleJob(jobDetail,simpleTrigger);}}【2】spring集成Quartz1）通过上述代码【TomTimeRemindJobMain】，本文发现使用Quartz框架执行调度任务需要依赖以下4个组件（Job， JobDetail， Trigger， Scheduler）：Job：调度任务；JobDetail： 用于封装job详细信息；Trigger：触发器，定义触发规则；Scheduler：调度器，根据触发器的规则执行调度任务（作业）；2）可以想到，spring集成Quartz的底层原理：把Job，JobDetail， SimpleTrigger， Scheduler对象创建与依赖关系装配由spring来完成，无需客户端实现； spring采用工厂方法FactoryBean来管理quartz调度任务所需组件；3）spring集成Quartz需要新增maven依赖，如下：&lt;dependency&gt;&lt;groupId&gt;org.springframework&lt;/groupId&gt;&lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;&lt;version&gt;6.1.10&lt;/version&gt;&lt;/dependency&gt;【2.1】spring管理quartz组件对象1）本章节部分内容总结自： spring-quartz-schedule【2.1.1】spring管理quartz的Job1）spring提供了QuartzJobBean用于抽象调度任务，自定义调度任务需要继承QuartzJobBean并重写executeInternal()方法；2）QuartzJobBean定义：（注意：quartz的JobDetail封装了Job的class对象，由JobDetail实例化job；所以spring无需注册job）publicabstractclassQuartzJobBeanimplementsJob{publicQuartzJobBean(){}publicfinalvoidexecute(JobExecutionContextcontext)throwsJobExecutionException{try{BeanWrapperbw=PropertyAccessorFactory.forBeanPropertyAccess(this);MutablePropertyValuespvs=newMutablePropertyValues();pvs.addPropertyValues(context.getScheduler().getContext());pvs.addPropertyValues(context.getMergedJobDataMap());bw.setPropertyValues(pvs,true);}catch(SchedulerExceptionvar4){thrownewJobExecutionException(var4);}this.executeInternal(context);}protectedabstractvoidexecuteInternal(JobExecutionContextcontext)throwsJobExecutionException;}【自定义job，继承QuartzJobBean】TomSpringQuartzJobBeanpublicclassTomSpringQuartzJobBeanextendsQuartzJobBean{@OverrideprotectedvoidexecuteInternal(JobExecutionContextcontext)throwsJobExecutionException{System.out.println("TomSpringQuartzJobBean #当前时间="+BusiDatetimeUtils.getNowText());}}【2.1.2】spring管理quartz的JobDetail1）在quartz中， job抽象了调度任务，而job的上下文信息由JobDetail封装，Job与JobDetail的数据交互通过JobDataMap实现；2）spring注册JobDetail有两种方式：方式1： JobDetailFactoryBean 注册JobDetail； （推荐）；方式2： 通过 MethodInvokingJobDetailFactoryBean 注册JobDetail ； （本文不介绍）【springquartz.xml】 JobDetailFactoryBean 注册JobDetail&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beansxmlns="http://www.springframework.org/schema/beans"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;&lt;!-- 通过 JobDetailFactoryBean 注册JobDetail --&gt;&lt;beanclass="org.springframework.scheduling.quartz.JobDetailFactoryBean"&gt;&lt;propertyname="name"value="tomJob"/&gt;&lt;propertyname="group"value="tomJobGroup"/&gt;&lt;propertyname="jobClass"value="com.tom.springnote.chapter31schedule.springquartz.SpringScheduleJob"/&gt;&lt;propertyname="durability"value="true"/&gt;&lt;propertyname="description"value="tomJobDetail"/&gt;&lt;propertyname="jobDataMap"&gt;&lt;map&gt;&lt;entrykey="message"value="hello world"/&gt;&lt;entrykey="city"value="chengdu"/&gt;&lt;/map&gt;&lt;/property&gt;&lt;/bean&gt;&lt;/beans&gt;【2.1.3】spring管理quartz的Trigger1）trigger触发器：定义了执行调度任务的规则， 如每5秒执行1次；2）spring也是通过FactoryBean注册Trigger；SimpleTriggerFactoryBean （简单触发器）CronTriggerFactoryBean； （带有cron表达式的触发器）【springquartz.xml】 SimpleTriggerFactoryBean 注册Trigger&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beansxmlns="http://www.springframework.org/schema/beans"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;&lt;!-- 通过 JobDetailFactoryBean 注册JobDetail --&gt;&lt;beanid="tomJobDetail"class="org.springframework.scheduling.quartz.JobDetailFactoryBean"&gt;&lt;propertyname="name"value="tomJob"/&gt;&lt;propertyname="group"value="tomJobGroup"/&gt;&lt;propertyname="jobClass"value="com.tom.springnote.chapter31schedule.springquartz.SpringScheduleJob"/&gt;&lt;propertyname="durability"value="true"/&gt;&lt;propertyname="description"value="tomJobDetail"/&gt;&lt;propertyname="jobDataMap"&gt;&lt;map&gt;&lt;entrykey="message"value="hello world"/&gt;&lt;entrykey="city"value="chengdu"/&gt;&lt;/map&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 通过 SimpleTriggerFactoryBean 注册触发器 --&gt;&lt;beanclass="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"&gt;&lt;propertyname="name"value="tomTrigger"/&gt;&lt;propertyname="group"value="tomTriggerGroup"/&gt;&lt;propertyname="jobDetail"ref="tomJobDetail"/&gt;&lt;propertyname="repeatInterval"value="5000"/&gt;&lt;!-- 单位毫秒，每5秒执行1次--&gt;&lt;propertyname="repeatCount"value="-1"/&gt;&lt;!-- -1表示永远重复 --&gt;&lt;/bean&gt;&lt;!-- 通过 CronTriggerFactoryBean 注册触发器 --&gt;&lt;beanclass="org.springframework.scheduling.quartz.CronTriggerFactoryBean"&gt;&lt;propertyname="name"value="tomCronTrigger"/&gt;&lt;propertyname="group"value="tomCronTriggerGroup"/&gt;&lt;propertyname="jobDetail"ref="tomJobDetail"/&gt;&lt;propertyname="cronExpression"ref="*/3 * * * * ?"/&gt;&lt;!-- 每3秒执行1次--&gt;&lt;/bean&gt;&lt;/beans&gt;3）补充： 多个trigger定义的规则可以同时作用于同一个JobDetail （或Job）； 本文认为多个Trigger规则的组合太过复杂（1个trigger对应1个Job足够满足日常业务需求），本文不再深入研究多个trigger组合的情况；有兴趣的同学自行研究；【2.1.4】spirng管理quartz的Scheduler1）scheduler调度器：使用触发器Trigger定义的规则执行调度任务（job）；2）spring通过SchedulerFactoryBean注册scheduler；【springquartz.xml】 SchedulerFactoryBean注册scheduler&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beansxmlns="http://www.springframework.org/schema/beans"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;&lt;!-- 通过 JobDetailFactoryBean 注册JobDetail --&gt;&lt;beanid="tomJobDetail"class="org.springframework.scheduling.quartz.JobDetailFactoryBean"&gt;&lt;propertyname="name"value="tomJob"/&gt;&lt;propertyname="group"value="tomJobGroup"/&gt;&lt;propertyname="jobClass"value="com.tom.springnote.chapter31schedule.springquartz.TomSpringQuartzJobBean"/&gt;&lt;propertyname="durability"value="true"/&gt;&lt;propertyname="description"value="tomJobDetail"/&gt;&lt;propertyname="jobDataMap"&gt;&lt;map&gt;&lt;entrykey="message"value="hello world"/&gt;&lt;entrykey="city"value="chengdu"/&gt;&lt;/map&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 通过 SimpleTriggerFactoryBean 注册触发器 --&gt;&lt;beanid="tomSimpleTrigger"class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"&gt;&lt;propertyname="name"value="tomTrigger"/&gt;&lt;propertyname="group"value="tomTriggerGroup"/&gt;&lt;propertyname="jobDetail"ref="tomJobDetail"/&gt;&lt;propertyname="repeatInterval"value="5000"/&gt;&lt;!-- 单位毫秒，每5秒执行1次--&gt;&lt;propertyname="repeatCount"value="-1"/&gt;&lt;!-- -1表示永远重复 --&gt;&lt;/bean&gt;&lt;!-- 通过 CronTriggerFactoryBean 注册触发器 --&gt;&lt;beanid="tomCronTrigger"class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"&gt;&lt;propertyname="name"value="tomCronTrigger"/&gt;&lt;propertyname="group"value="tomCronTriggerGroup"/&gt;&lt;propertyname="jobDetail"ref="tomJobDetail"/&gt;&lt;propertyname="cronExpression"ref="*/3 * * * * ?"/&gt;&lt;!-- 每3秒执行1次--&gt;&lt;/bean&gt;&lt;!-- 通过SchedulerFactoryBean注册scheduler --&gt;&lt;beanclass="org.springframework.scheduling.quartz.SchedulerFactoryBean"&gt;&lt;propertyname="triggers"&gt;&lt;!-- 可以装配多个触发器，当然，日常开发1个足够 --&gt;&lt;list&gt;&lt;refbean="tomSimpleTrigger"/&gt;&lt;refbean="tomCronTrigger"/&gt;&lt;/list&gt;&lt;/property&gt;&lt;/bean&gt;&lt;/beans&gt;【2.2】spring启动quartz调度器执行调度任务1）spring容器ApplicationContext启动时，SchedulerFactoryBean所管理的调度器Scheduler跟着自动启动，且Scheduler随着ApplicationContext的关闭而自动关闭；当调度任务的所有对象实例注册到ioc容器后，ApplicationContext启动时，Scheduler也启动，Scheduler立即开始执行调度任务；【TomSpringQuartzJobBeanMain】publicclassTomSpringQuartzJobBeanMain{publicstaticvoidmain(String[]args){ClassPathXmlApplicationContextspringContext=newClassPathXmlApplicationContext("chapter31schedule/springquartz.xml");((AbstractApplicationContext)springContext).registerShutdownHook();}}【执行效果】 2个调度任务在执行（因为有2个触发器，tomSimpleTrigger-每5秒执行1次；tomCronTrigger-每3秒执行1次 ）；TomSpringQuartzJobBean #当前时间=2024-10-13 21:42:23.623
TomSpringQuartzJobBean #当前时间=2024-10-13 21:42:24.002
TomSpringQuartzJobBean #当前时间=2024-10-13 21:42:27.000
TomSpringQuartzJobBean #当前时间=2024-10-13 21:42:28.505
TomSpringQuartzJobBean #当前时间=2024-10-13 21:42:30.000
TomSpringQuartzJobBean #当前时间=2024-10-13 21:42:33.010
TomSpringQuartzJobBean #当前时间=2024-10-13 21:42:33.501
TomSpringQuartzJobBean #当前时间=2024-10-13 21:42:36.003【3】JDK Timer定时器【3.1】JDK Timer基础知识回顾1）Timer定时器组件：TimerTask：抽象调度任务；Timer：抽象调度器；用于定义任务触发规则并执行调度任务； 类似于肩负了quartz的Scheduler与Trigger职责；只能配置简单规则，不能配置cron表达式；2）Timer使用TimerTask抽象调度任务；自定义调度任务需要继承TimerTask；由代码可知： TimerTask本质上是Runnable，即可以提交给线程的任务；publicabstractclassTimerTaskimplementsRunnable{// ...}3）部分代码总结自： java-timer-and-timertask【3.2】定时器任务单次执行【3.2.1】给定延迟时间之后执行单次任务1）在当前时间等待给定延迟时间之后，执行调度任务；【OnceTimerTaskExecuteAfterDelayMain】给定延迟时间之后仅执行1次调度任务publicclassOnceTimerTaskExecuteAfterDelayMain{publicstaticvoidmain(String[]args){TimerTasktimerTask=newTimerTask(){@Overridepublicvoidrun(){System.out.printf("线程id=%s 当前时间=%s \n",Thread.currentThread().getId(),BusiDatetimeUtils.getNowText());}};// 通过jdk 定时器执行调度任务Timertimer=newTimer();System.out.println("当前时间="+BusiDatetimeUtils.getNowText());// 在给定延迟时间(5s)之后执行调度任务，仅执行1次timer.schedule(timerTask,5000);System.out.println("after timer.schedule()新增调度任务之后");try{TimeUnit.SECONDS.sleep(5);}catch(InterruptedExceptione){thrownewRuntimeException(e);}// 取消调度器执行(主线程结束)timer.cancel();System.out.println("主线程结束， 当前时间="+BusiDatetimeUtils.getNowText());}}publicvoidschedule(TimerTasktask,longdelay){if(delay&lt;0)thrownewIllegalArgumentException("Negative delay.");sched(task,System.currentTimeMillis()+delay,0);// period=0 表示当前任务仅执行1次}privatevoidsched(TimerTasktask,longtime,longperiod){// ...}【解说】period参数：表示2个相邻任务执行的时间间隔（单位毫秒）；若为0，表示仅执行1次；若为整数，表示时间间隔；【执行效果】当前时间=2024-10-16 20:51:52.281
after timer.schedule()新增调度任务之后
线程id=15 当前时间=2024-10-16 20:51:57.298 
主线程结束， 当前时间=2024-10-16 20:51:57.298【3.2.2】在给定时间点执行单次任务1）在给定时间点执行调度任务；【OnceTimerTaskExecuteAtGivenTime】 在给定时间点执行调度任务，仅执行1次publicclassOnceTimerTaskExecuteAtGivenTime{publicstaticvoidmain(String[]args){TimerTasktimerTask=newTimerTask(){@Overridepublicvoidrun(){System.out.printf("线程id=%s 当前时间=%s \n",Thread.currentThread().getId(),BusiDatetimeUtils.getNowText());}};// 通过jdk 定时器执行调度任务Timertimer=newTimer();System.out.println("当前时间="+BusiDatetimeUtils.getNowText());// 在给定时间点（当前时间加5秒的时间）执行调度任务，仅执行1次timer.schedule(timerTask,BusiDatetimeUtils.timeAfterSecond(5));System.out.println("after timer.schedule()新增调度任务之后");try{TimeUnit.SECONDS.sleep(5);}catch(InterruptedExceptione){thrownewRuntimeException(e);}// 取消调度器执行(主线程结束)timer.cancel();System.out.println("主线程结束， 当前时间="+BusiDatetimeUtils.getNowText());}}publicvoidschedule(TimerTasktask,Datetime){sched(task,time.getTime(),0);// period=0 表示仅执行1次}【执行效果】当前时间=2024-10-16 20:55:09.981
after timer.schedule()新增调度任务之后
线程id=15 当前时间=2024-10-16 20:55:14.984 
主线程结束， 当前时间=2024-10-16 20:55:14.986【3.3】 定时器任务重复执行【3.3.1】在给定延迟时间后重复执行1）使用Timer定时器在给定延迟时间后重复执行调度任务【RepeatableTimerTaskExecuteAfterDelayMain】publicclassRepeatableTimerTaskExecuteAfterDelayMain{publicstaticvoidmain(String[]args){TimerTasktimerTask=newTimerTask(){@Overridepublicvoidrun(){System.out.printf("线程id=%s 当前时间=%s \n",Thread.currentThread().getId(),BusiDatetimeUtils.getNowText());}};// 通过jdk 定时器执行调度任务Timertimer=newTimer();System.out.println("当前时间="+BusiDatetimeUtils.getNowText());// 在给定延迟时间(5s)之后执行调度任务，间隔2秒重复执行timer.schedule(timerTask,5000,2000);System.out.println("after timer.schedule()新增调度任务之后");try{TimeUnit.SECONDS.sleep(10);// 睡眠10s后关闭定时器，以便调度任务可以重复执行}catch(InterruptedExceptione){thrownewRuntimeException(e);}// 取消调度器执行(主线程结束)timer.cancel();System.out.println("主线程结束， 当前时间="+BusiDatetimeUtils.getNowText());}}【执行效果】当前时间=2024-10-16 21:01:49.933
after timer.schedule()新增调度任务之后
线程id=15 当前时间=2024-10-16 21:01:54.950 
线程id=15 当前时间=2024-10-16 21:01:56.951 
线程id=15 当前时间=2024-10-16 21:01:58.957 
主线程结束， 当前时间=2024-10-16 21:01:59.946【3.2.2】在给定时间点重复执行【RepeatableTimerTaskExecuteAtGivenTime】publicclassRepeatableTimerTaskExecuteAtGivenTime{publicstaticvoidmain(String[]args){TimerTasktimerTask=newTimerTask(){@Overridepublicvoidrun(){System.out.printf("线程id=%s 当前时间=%s \n",Thread.currentThread().getId(),BusiDatetimeUtils.getNowText());}};// 通过jdk 定时器执行调度任务Timertimer=newTimer();System.out.println("当前时间="+BusiDatetimeUtils.getNowText());// 在给定时间点（当前时间加5秒的时间）执行调度任务，间隔2s重复执行timer.schedule(timerTask,BusiDatetimeUtils.timeAfterSecond(5),2000);System.out.println("after timer.schedule()新增调度任务之后");try{TimeUnit.SECONDS.sleep(10);}catch(InterruptedExceptione){thrownewRuntimeException(e);}// 取消调度器执行(主线程结束)timer.cancel();System.out.println("主线程结束， 当前时间="+BusiDatetimeUtils.getNowText());}}【执行效果】当前时间=2024-10-16 21:07:12.258
after timer.schedule()新增调度任务之后
线程id=15 当前时间=2024-10-16 21:07:17.260 
线程id=15 当前时间=2024-10-16 21:07:19.261 
线程id=15 当前时间=2024-10-16 21:07:21.275 
主线程结束， 当前时间=2024-10-16 21:07:22.261【3.3.3】定时器任务重复执行注意点1）若一个任务执行耗时大于调度间隔或周期period，则会延迟整个执行链；无论是在延迟时间后还是给定时间点执行；【RepeatableTimerTaskDelayWholeChainAtGivenTime】publicclassRepeatableTimerTaskDelayWholeChainAtGivenTime{publicstaticvoidmain(String[]args){TimerTasktimerTask=newTimerTask(){@Overridepublicvoidrun(){System.out.printf("线程id=%s 当前时间=%s \n",Thread.currentThread().getId(),BusiDatetimeUtils.getNowText());try{TimeUnit.SECONDS.sleep(5);// 模拟单个任务执行耗时5秒}catch(InterruptedExceptione){thrownewRuntimeException(e);}}};// 通过jdk 定时器执行调度任务Timertimer=newTimer();System.out.println("当前时间="+BusiDatetimeUtils.getNowText());// 在给定时间点（当前时间加5秒的时间）执行调度任务，间隔2s重复执行timer.schedule(timerTask,BusiDatetimeUtils.timeAfterSecond(1),2000);System.out.println("after timer.schedule()新增调度任务之后");try{TimeUnit.SECONDS.sleep(30);// 延迟30秒，等待执行重复调度任务}catch(InterruptedExceptione){thrownewRuntimeException(e);}// 取消调度器执行(主线程结束)timer.cancel();System.out.println("主线程结束， 当前时间="+BusiDatetimeUtils.getNowText());}}【执行效果】 程序中设置定时器每隔2s执行调度任务，而运行效果是每隔5s执行调度任务； 原因是任务执行睡眠5s模拟了业务逻辑耗时；当上一个任务执行完成后，下一个任务才会执行（即单个任务执行耗时过长会延迟整体任务调度）；当前时间=2024-10-16 21:36:40.218
after timer.schedule()新增调度任务之后
线程id=15 当前时间=2024-10-16 21:36:41.222 
线程id=15 当前时间=2024-10-16 21:36:46.236 
线程id=15 当前时间=2024-10-16 21:36:51.247 
线程id=15 当前时间=2024-10-16 21:36:56.258 
线程id=15 当前时间=2024-10-16 21:37:01.272 
线程id=15 当前时间=2024-10-16 21:37:06.285 
主线程结束， 当前时间=2024-10-16 21:37:10.224【3.4】取消调度器与调度任务1）取消调度器执行的方法：调用 Timer.cancel()方法取消调度器； 若调度器有任务运行，则不结束； 若调度器没有任务运行，则可以结束；2）取消调度任务的方法：方法1： 在TimerTask内部run方法执行cancel()方法，取消当前调度任务执行；方法2： 在TimerTask内部run()方法中强行终止当前线程执行；【3.4.1】 在run方法里取消调度任务【CancelRepeatableTimerTaskInsideRun】publicclassCancelRepeatableTimerTaskInsideRun{publicstaticvoidmain(String[]args){TimerTasktimerTask=newTimerTask(){@Overridepublicvoidrun(){System.out.printf("线程id=%s 当前时间=%s \n",Thread.currentThread().getId(),BusiDatetimeUtils.getNowText());cancel();// 取消当前调度任务 （本来是重复调度，结果仅执行1次）}};// 通过jdk 定时器执行调度任务Timertimer=newTimer();System.out.println("当前时间="+BusiDatetimeUtils.getNowText());// 在给定时间点（当前时间加5秒的时间）执行调度任务，间隔2s重复执行timer.schedule(timerTask,BusiDatetimeUtils.timeAfterSecond(5),2000);System.out.println("after timer.schedule()新增调度任务之后");try{TimeUnit.SECONDS.sleep(10);}catch(InterruptedExceptione){thrownewRuntimeException(e);}// 取消调度器执行(主线程结束)timer.cancel();System.out.println("主线程结束， 当前时间="+BusiDatetimeUtils.getNowText());}}【执行效果】当前时间=2024-10-16 21:48:59.496
after timer.schedule()新增调度任务之后
线程id=15 当前时间=2024-10-16 21:49:04.501 
主线程结束， 当前时间=2024-10-16 21:49:09.510【3.5】定时器Timer与调度线程池对比【3.5.1】调度线程池执行调度任务回顾【RepeatableTaskExecuteBySchedulerThreadPoolMain】使用调度线程池执行重复任务publicclassRepeatableTaskExecuteBySchedulerThreadPoolMain{publicstaticvoidmain(String[]args){ScheduledExecutorServicescheduledExecutorService=Executors.newScheduledThreadPool(1);// 不要这样用，本文仅演示Runnabletask=newRunnable(){@Overridepublicvoidrun(){System.out.printf("线程id=%s 当前时间=%s \n",Thread.currentThread().getId(),BusiDatetimeUtils.getNowText());}};// 重复任务，间隔2s执行1次scheduledExecutorService.scheduleAtFixedRate(task,0,2000,TimeUnit.MILLISECONDS);}}【执行效果】线程id=15 当前时间=2024-10-16 22:03:46.625 
线程id=15 当前时间=2024-10-16 22:03:48.580 
线程id=15 当前时间=2024-10-16 22:03:50.579 
线程id=15 当前时间=2024-10-16 22:03:52.578【注意】实际开发过程中，不要使用Executors.newScheduledThreadPool(1)； 如下面代码所示，该方法初始化的最大线程个数无限大，这是有问题的； 线程个数无限大，会导致cpu时间片被耗尽，切换不到（或无法及时切换到）正常业务逻辑的线程上，导致系统假死；publicScheduledThreadPoolExecutor(intcorePoolSize){super(corePoolSize,Integer.MAX_VALUE,DEFAULT_KEEPALIVE_MILLIS,MILLISECONDS,newDelayedWorkQueue());}【3.5.2】定时器与调度线程池ScheduledExecutorService对比1）定时器Timer与调度线程池ScheduledExecutorService对比：定时器Timer对系统时钟变化非常敏感；而调度线程池不会；定时器Timer只有1个执行线程； 而调度线程池可以配置多个；TimerTask内部run方法执行抛出运行时异常，则当前线程被杀死，导致后续任务不执行；而调度线程池中的线程抛出异常，仅运行中的任务被取消，但线程还存在，即其他任务还是可以被执行；2）模拟TimerTask的run方法内部抛出异常publicclassRepeatableTimerTaskExecuteThrowException{publicstaticvoidmain(String[]args){TimerTasktimerTask=newTimerTask(){@Overridepublicvoidrun(){System.out.printf("线程id=%s 当前时间=%s \n",Thread.currentThread().getId(),BusiDatetimeUtils.getNowText());thrownewRuntimeException("mock runtime exception");}};// 通过jdk 定时器执行调度任务Timertimer=newTimer();System.out.println("当前时间="+BusiDatetimeUtils.getNowText());// 在给定时间点（当前时间加5秒的时间）执行调度任务，间隔2s重复执行timer.schedule(timerTask,BusiDatetimeUtils.timeAfterSecond(5),2000);System.out.println("after timer.schedule()新增调度任务之后");try{TimeUnit.SECONDS.sleep(10);}catch(InterruptedExceptione){thrownewRuntimeException(e);}// 取消调度器执行(主线程结束)timer.cancel();System.out.println("主线程结束， 当前时间="+BusiDatetimeUtils.getNowText());}}【执行效果】 显然，若TimerTask内部run方法抛出运行时异常，则整个定时器执行完成（定时器线程被杀死）当前时间=2024-10-16 22:12:37.801
after timer.schedule()新增调度任务之后
线程id=15 当前时间=2024-10-16 22:12:42.803 
Exception in thread "Timer-0" java.lang.RuntimeException: mock runtime exceptionat com.tom.springnote.chapter31schedule.origintimer.RepeatableTimerTaskExecuteThrowException$1.run(RepeatableTimerTaskExecuteThrowException.java:22)at java.base/java.util.TimerThread.mainLoop(Timer.java:566)at java.base/java.util.TimerThread.run(Timer.java:516)
主线程结束， 当前时间=2024-10-16 22:12:47.8063）模拟调度线程池ScheduledExecutorService的run方法内部抛出异常【RepeatableTaskExecuteBySchedulerThreadPoolThrowExceptionMain】publicclassRepeatableTaskExecuteBySchedulerThreadPoolThrowExceptionMain{staticclassBusiTaskimplementsRunnable{privateStringflag;publicBusiTask(Stringflag){this.flag=flag;}@Overridepublicvoidrun(){System.out.printf("flag=%s, 线程id=%s 当前时间=%s \n",flag,Thread.currentThread().getId(),BusiDatetimeUtils.getNowText());if(Objects.equals("exception",flag)){thrownewRuntimeException("mock runtime exception");}}}publicstaticvoidmain(String[]args){ScheduledExecutorServicescheduledExecutorService=Executors.newScheduledThreadPool(2);// 重复任务，间隔2s执行1次scheduledExecutorService.scheduleAtFixedRate(newBusiTask("exception"),0,2000,TimeUnit.MILLISECONDS);try{TimeUnit.SECONDS.sleep(2);}catch(InterruptedExceptione){thrownewRuntimeException(e);}// 第2次添加任务scheduledExecutorService.scheduleAtFixedRate(newBusiTask("zhangsan"),0,2000,TimeUnit.MILLISECONDS);}}【执行效果】 显然，即便抛出异常， 我们还是可以向调度线程池添加调度任务；flag=exception, 线程id=15 当前时间=2024-10-16 22:25:34.802 
flag=zhangsan, 线程id=15 当前时间=2024-10-16 22:25:36.750 
flag=zhangsan, 线程id=15 当前时间=2024-10-16 22:25:38.756 
flag=zhangsan, 线程id=15 当前时间=2024-10-16 22:25:40.764http://www.ppmy.cn/news/1541113.html相关文章苍穹外卖学习笔记(三十一)文章目录 工作台今日数据接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 订单管理接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 菜品总览接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl 套餐总览接口WorkSpaceControllerWorksp…阅读更多...一文了解本地 OSS 可视化工具&amp;#x1f349; CSDN 叶庭云&amp;#xff1a;https://yetingyun.blog.csdn.net/ “丰富的本地 OSS 可视化工具” 通常指的是功能强大且用户友好的图形界面软件&amp;#xff0c;它们在本地计算机上运行&amp;#xff0c;旨在可视化和管理对象存储服务&amp;#xff08;简称 OSS&amp;#xff09;。这些工…阅读更多...Flink窗口分配器WindowAssigner前言 
Flink 数据流经过 keyBy 分组后&amp;#xff0c;下一步就是 WindowAssigner。 
WindowAssigner 定义了 stream 中的元素如何被分发到各个窗口&amp;#xff0c;元素可以被分发到一个或多个窗口中&amp;#xff0c;Flink 内置了常用的窗口分配器&amp;#xff0c;包括&amp;#xff1a;tumbling wi…阅读更多...点菜问题(北京大学考研机试题01背包)北大网络实验室经常有活动需要叫外卖&amp;#xff0c;但是每次叫外卖的报销经费的总额最大为 CC 元&amp;#xff0c;有 NN 种菜可以点&amp;#xff0c;经过长时间的点菜&amp;#xff0c;网络实验室对于每种菜 ii 都有一个量化的评价分数&amp;#xff08;表示这个菜可口程度&amp;#xff09;&amp;#xff0c;…阅读更多...基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell 所需依赖Word水印Pdf水印——&amp;#xff08; 注意 pdf 存在找不到字体的问题&amp;#xff09;Excel水印 所需依赖 &lt;dependency&gt;&lt;groupId&gt;com.aspose&lt;/groupId&gt;&lt;artifactId&gt;aspose-pdf&lt;/artifactId&amp;g…阅读更多...vue3学习记录-transitionvue3学习记录-transition 1.基础用法2.自定义css名2.1用法2.2 和 Animate.css一起使用 3. transition的生命周期钩子4.appear属性5.使用 Key Attribute 过渡 1.基础用法 是一个内置组件&amp;#xff0c;这意味着它在任意别的组件中都可以被使用&amp;#xff0c;无需注册。它可以将进入和…阅读更多...KUKA机器人选定程序时提示“选择非法”的处理方法KUKA机器人选定程序时提示“选择非法”的处理方法 如下图所示，选中某个程序，点击选定时， 系统提示：选择非法， 具体处理方法可参考以下内容： 选中该程序后，在右下角打开【编辑】菜单键，再选择【属性】，打开后可以看到程序的一般说明、信息模块和参数等信息，如下图所示…阅读更多...SpringBoot智能物流管理系统开发指南2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:51 +0000</pubDate>
    </item>
    <item>
      <title>苍穹外卖学习笔记(三十一)</title>
      <link>https://www.ppmy.cn/news/1541112.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维苍穹外卖学习笔记(三十一)news/2025/11/1 1:18:49/文章目录工作台今日数据接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl订单管理接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl菜品总览接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl套餐总览接口WorkSpaceControllerWorkspaceServiceWorkspaceServiceImpl数据统计-Excel报表工作台今日数据接口WorkSpaceController@RestController@RequestMapping("/admin/workspace")@Slf4j@Api(tags="工作台")publicclassWorkSpaceController{@AutowiredprivateWorkspaceServiceworkspaceService;/*** 查询今日运营数据*/@GetMapping("/businessData")@ApiOperation(value="查询今日运营数据")publicResult&lt;BusinessDataVO&gt;businessData(){log.info("查询今日运营数据");//获得当天的开始时间LocalDateTimebegin=LocalDateTime.now().with(LocalTime.MIN);//获得当天的结束时间LocalDateTimeend=LocalDateTime.now().with(LocalTime.MAX);BusinessDataVObusinessDataVO=workspaceService.getBusinessData(begin,end);returnResult.success(businessDataVO);}}WorkspaceServicepublicinterfaceWorkspaceService{/*** 查询今日运营数据*/BusinessDataVOgetBusinessData(LocalDateTimebegin,LocalDateTimeend);}WorkspaceServiceImpl@Service@Slf4jpublicclassWorkspaceServiceImplimplementsWorkspaceService{@AutowiredprivateOrderMapperorderMapper;@AutowiredprivateUserMapperuserMapper;@AutowiredprivateDishMapperdishMapper;@AutowiredprivateSetmealMappersetmealMapper;/*** 查询今日运营数据*/@OverridepublicBusinessDataVOgetBusinessData(LocalDateTimebegin,LocalDateTimeend){/*** 营业额：当日已完成订单的总金额* 有效订单：当日已完成订单的数量* 订单完成率：有效订单数 / 总订单数* 平均客单价：营业额 / 有效订单数* 新增用户：当日新增用户的数量*/Mapmap=newHashMap();map.put("begin",begin);map.put("end",end);//查询总订单数IntegertotalOrderCount=orderMapper.countByMap(map);map.put("status",Orders.COMPLETED);//营业额Doubleturnover=orderMapper.sumByMap(map);turnover=turnover==null?0.0:turnover;//有效订单数IntegervalidOrderCount=orderMapper.countByMap(map);DoubleunitPrice=0.0;DoubleorderCompletionRate=0.0;if(totalOrderCount!=0&amp;&amp;validOrderCount!=0){//订单完成率orderCompletionRate=validOrderCount.doubleValue()/totalOrderCount;//平均客单价unitPrice=turnover/validOrderCount;}//新增用户数IntegernewUsers=userMapper.countByMap(map);returnBusinessDataVO.builder().turnover(turnover).validOrderCount(validOrderCount).orderCompletionRate(orderCompletionRate).unitPrice(unitPrice).newUsers(newUsers).build();}}订单管理接口WorkSpaceController/*** 查询订单管理数据*/@GetMapping("/overviewOrders")@ApiOperation(value="查询订单管理数据")publicResult&lt;OrderOverViewVO&gt;orderOverView(){log.info("查询订单概况");OrderOverViewVOorderOverViewVO=workspaceService.getOrderOverView();returnResult.success(orderOverViewVO);}WorkspaceService/*** 查询订单管理数据*/OrderOverViewVOgetOrderOverView();WorkspaceServiceImpl/*** 查询订单管理数据*/@OverridepublicOrderOverViewVOgetOrderOverView(){Mapmap=newHashMap();map.put("begin",LocalDateTime.now().with(LocalTime.MIN));map.put("status",Orders.TO_BE_CONFIRMED);//待接单IntegerwaitingOrders=orderMapper.countByMap(map);//待派送map.put("status",Orders.CONFIRMED);IntegerdeliveredOrders=orderMapper.countByMap(map);//已完成map.put("status",Orders.COMPLETED);IntegercompletedOrders=orderMapper.countByMap(map);//已取消map.put("status",Orders.CANCELLED);IntegercancelledOrders=orderMapper.countByMap(map);//全部订单map.put("status",null);IntegerallOrders=orderMapper.countByMap(map);returnOrderOverViewVO.builder().waitingOrders(waitingOrders).deliveredOrders(deliveredOrders).completedOrders(completedOrders).cancelledOrders(cancelledOrders).allOrders(allOrders).build();}菜品总览接口WorkSpaceController/*** 查询菜品总览*/@GetMapping("/overviewDishes")@ApiOperation("查询菜品总览")publicResult&lt;DishOverViewVO&gt;dishOverView(){returnResult.success(workspaceService.getDishOverView());}WorkspaceService/*** 查询菜品管理数据*/DishOverViewVOgetDishOverView();WorkspaceServiceImpl/*** 查询菜品总览*/@OverridepublicDishOverViewVOgetDishOverView(){LambdaQueryWrapper&lt;Dish&gt;wrapper=newLambdaQueryWrapper&lt;Dish&gt;().eq(Dish::getStatus,StatusConstant.ENABLE);Longsold=dishMapper.selectCount(wrapper);Wrapper&lt;Dish&gt;wrapper1=newLambdaQueryWrapper&lt;Dish&gt;().eq(Dish::getStatus,StatusConstant.DISABLE);Longdiscontinued=dishMapper.selectCount(wrapper1);returnDishOverViewVO.builder().sold(sold.intValue()).discontinued(discontinued.intValue()).build();}套餐总览接口WorkSpaceController/*** 查询套餐总览*/@GetMapping("/overviewSetmeals")@ApiOperation("查询套餐总览")publicResult&lt;SetmealOverViewVO&gt;setmealOverView(){returnResult.success(workspaceService.getSetmealOverView());}WorkspaceService/*** 查询套餐管理数据*/SetmealOverViewVOgetSetmealOverView();WorkspaceServiceImpl/*** 查询套餐总览*/@OverridepublicSetmealOverViewVOgetSetmealOverView(){LambdaQueryWrapper&lt;Setmeal&gt;wrapper=newLambdaQueryWrapper&lt;Setmeal&gt;().eq(Setmeal::getStatus,StatusConstant.ENABLE);Longsold=setmealMapper.selectCount(wrapper);Wrapper&lt;Setmeal&gt;wrapper1=newLambdaQueryWrapper&lt;Setmeal&gt;().eq(Setmeal::getStatus,StatusConstant.DISABLE);Longdiscontinued=setmealMapper.selectCount(wrapper1);returnSetmealOverViewVO.builder().sold(sold.intValue()).discontinued(discontinued.intValue()).build();}http://www.ppmy.cn/news/1541112.html相关文章一文了解本地 OSS 可视化工具&amp;#x1f349; CSDN 叶庭云&amp;#xff1a;https://yetingyun.blog.csdn.net/ “丰富的本地 OSS 可视化工具” 通常指的是功能强大且用户友好的图形界面软件&amp;#xff0c;它们在本地计算机上运行&amp;#xff0c;旨在可视化和管理对象存储服务&amp;#xff08;简称 OSS&amp;#xff09;。这些工…阅读更多...Flink窗口分配器WindowAssigner前言 
Flink 数据流经过 keyBy 分组后&amp;#xff0c;下一步就是 WindowAssigner。 
WindowAssigner 定义了 stream 中的元素如何被分发到各个窗口&amp;#xff0c;元素可以被分发到一个或多个窗口中&amp;#xff0c;Flink 内置了常用的窗口分配器&amp;#xff0c;包括&amp;#xff1a;tumbling wi…阅读更多...点菜问题(北京大学考研机试题01背包)北大网络实验室经常有活动需要叫外卖&amp;#xff0c;但是每次叫外卖的报销经费的总额最大为 CC 元&amp;#xff0c;有 NN 种菜可以点&amp;#xff0c;经过长时间的点菜&amp;#xff0c;网络实验室对于每种菜 ii 都有一个量化的评价分数&amp;#xff08;表示这个菜可口程度&amp;#xff09;&amp;#xff0c;…阅读更多...基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell 所需依赖Word水印Pdf水印——&amp;#xff08; 注意 pdf 存在找不到字体的问题&amp;#xff09;Excel水印 所需依赖 &lt;dependency&gt;&lt;groupId&gt;com.aspose&lt;/groupId&gt;&lt;artifactId&gt;aspose-pdf&lt;/artifactId&amp;g…阅读更多...vue3学习记录-transitionvue3学习记录-transition 1.基础用法2.自定义css名2.1用法2.2 和 Animate.css一起使用 3. transition的生命周期钩子4.appear属性5.使用 Key Attribute 过渡 1.基础用法 是一个内置组件&amp;#xff0c;这意味着它在任意别的组件中都可以被使用&amp;#xff0c;无需注册。它可以将进入和…阅读更多...KUKA机器人选定程序时提示“选择非法”的处理方法KUKA机器人选定程序时提示“选择非法”的处理方法 如下图所示，选中某个程序，点击选定时， 系统提示：选择非法， 具体处理方法可参考以下内容： 选中该程序后，在右下角打开【编辑】菜单键，再选择【属性】，打开后可以看到程序的一般说明、信息模块和参数等信息，如下图所示…阅读更多...SpringBoot智能物流管理系统开发指南2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...网络资源模板--Android Studio 实现俄罗斯方块游戏App目录 
一、项目演示 
二、项目测试环境 
三、项目详情 四、完整的项目源码  一、项目演示 网络资源模板--基于Android studio 实现的俄罗斯方块游戏 二、项目测试环境 三、项目详情 
首页 这段代码实现了一个Android应用中的选择活动&amp;#xff08;SelectActivity&amp;#xff09;。以…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:50 +0000</pubDate>
    </item>
    <item>
      <title>一文了解本地 OSS 可视化工具</title>
      <link>https://www.ppmy.cn/news/1541111.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维一文了解本地 OSS 可视化工具news/2025/11/1 1:18:48/🍉CSDN叶庭云：https://yetingyun.blog.csdn.net/“丰富的本地 OSS 可视化工具” 通常指的是功能强大且用户友好的图形界面软件，它们在本地计算机上运行，旨在可视化和管理对象存储服务（简称 OSS）。这些工具能显著提升用户体验，使用户能够更直观地查看、管理以及操作存储在 OSS 中的数据和资源。以下是对这一概念的深入阐述：1. 对象存储服务（OSS）简介：对象存储服务是一种用于存储大量非结构化数据（如文本、图片、音频、视频、日志文件等）的云存储解决方案。常见的 OSS 包括：阿里云 OSS华为云对象存储服务（Object Storage Service, OBS）Amazon S3Google Cloud StorageMicrosoft Azure Blob Storage2. 本地 OSS 可视化工具的功能：这些工具通常包含以下核心功能：图形用户界面（GUI）：提供直观的操作界面，让用户无需依赖命令行即可轻松浏览和管理存储桶（Buckets）及对象（Objects）。文件上传与下载：简化了文件的上传和下载流程，同时支持批量操作，提升效率。数据管理：支持存储桶和对象的创建、删除、重命名，以及权限管理和访问控制。数据可视化：利用图表、统计信息等直观方式，展示存储使用情况、数据分布等关键信息。集成与同步：与本地文件系统无缝同步，支持自动备份和实时同步机制，确保数据安全与一致性。安全性管理：集成了加密、身份验证和访问日志等安全功能，保障数据的安全性和合规性。3. 常见的本地 OSS 可视化工具示例：ell Studio 是一款本地开源工具，支持提示词版本控制、监控追踪及 OSS 可视化。通过该工具，大模型提示词的优化过程变得可追溯，且能在需要时轻松回滚至先前版本。Cyberduck：支持阿里云 OSS、Amazon S3 等多种云存储服务，拥有友好的用户界面和丰富的功能。CloudBerry Explorer（现更名为 MSP360 Explorer）：功能强大，广泛支持多种对象存储服务，尤其适合企业用户。DragonDisk：作为一款免费的 S3 客户端，它同时支持阿里云 OSS 及其他兼容 S3 的服务。S3 Browser：专为 Amazon S3 设计，但灵活配置后也可用于其他兼容 S3 的对象存储服务。4. 使用场景：开发与测试‌：开发人员能高效利用这些工具，迅速上传、下载及管理测试数据。‌数据管理‌：企业借助可视化工具，轻松监控并管理庞大的数据存储，从而优化存储资源利用。‌备份与恢复‌：简化流程，确保数据的安全备份与快速恢复，保障数据的完整性与可用性。5. 优势：易用性：无需精通复杂的命令行操作，有效降低了使用门槛。效率提升：借助图形界面与自动化功能，显著提升了数据管理的效率。可视化分析：该功能使用户能够更直观地理解并深入分析存储数据，从而助力其做出更优决策。6. 选择建议：选择适合的本地 OSS 可视化工具时，可综合考虑以下关键因素：‌兼容性‌：首要确认该工具是否支持您当前使用的 OSS 服务，以确保无缝集成。‌功能需求‌：根据实际需求挑选，如是否提供批量操作、安全管理等核心功能。‌用户界面‌：优选界面友好、操作简便的工具，以提升工作效率和用户体验。‌成本考量‌：结合预算，权衡免费与付费工具的性价比，做出合理选择。总体而言，本地丰富的 OSS 可视化工具为用户提供了既便捷又高效的数据管理与可视化手段，使用户能够轻松应对对象存储服务中的数据操作。这些工具凭借直观的图形用户界面和强大的功能，极大地简化了数据管理流程，有效提升了工作效率，并广泛应用于开发、企业数据管理、备份恢复等多种实际业务场景中。http://www.ppmy.cn/news/1541111.html相关文章Flink窗口分配器WindowAssigner前言 
Flink 数据流经过 keyBy 分组后&amp;#xff0c;下一步就是 WindowAssigner。 
WindowAssigner 定义了 stream 中的元素如何被分发到各个窗口&amp;#xff0c;元素可以被分发到一个或多个窗口中&amp;#xff0c;Flink 内置了常用的窗口分配器&amp;#xff0c;包括&amp;#xff1a;tumbling wi…阅读更多...点菜问题(北京大学考研机试题01背包)北大网络实验室经常有活动需要叫外卖&amp;#xff0c;但是每次叫外卖的报销经费的总额最大为 CC 元&amp;#xff0c;有 NN 种菜可以点&amp;#xff0c;经过长时间的点菜&amp;#xff0c;网络实验室对于每种菜 ii 都有一个量化的评价分数&amp;#xff08;表示这个菜可口程度&amp;#xff09;&amp;#xff0c;…阅读更多...基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell 所需依赖Word水印Pdf水印——&amp;#xff08; 注意 pdf 存在找不到字体的问题&amp;#xff09;Excel水印 所需依赖 &lt;dependency&gt;&lt;groupId&gt;com.aspose&lt;/groupId&gt;&lt;artifactId&gt;aspose-pdf&lt;/artifactId&amp;g…阅读更多...vue3学习记录-transitionvue3学习记录-transition 1.基础用法2.自定义css名2.1用法2.2 和 Animate.css一起使用 3. transition的生命周期钩子4.appear属性5.使用 Key Attribute 过渡 1.基础用法 是一个内置组件&amp;#xff0c;这意味着它在任意别的组件中都可以被使用&amp;#xff0c;无需注册。它可以将进入和…阅读更多...KUKA机器人选定程序时提示“选择非法”的处理方法KUKA机器人选定程序时提示“选择非法”的处理方法 如下图所示，选中某个程序，点击选定时， 系统提示：选择非法， 具体处理方法可参考以下内容： 选中该程序后，在右下角打开【编辑】菜单键，再选择【属性】，打开后可以看到程序的一般说明、信息模块和参数等信息，如下图所示…阅读更多...SpringBoot智能物流管理系统开发指南2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...网络资源模板--Android Studio 实现俄罗斯方块游戏App目录 
一、项目演示 
二、项目测试环境 
三、项目详情 四、完整的项目源码  一、项目演示 网络资源模板--基于Android studio 实现的俄罗斯方块游戏 二、项目测试环境 三、项目详情 
首页 这段代码实现了一个Android应用中的选择活动&amp;#xff08;SelectActivity&amp;#xff09;。以…阅读更多...HttpURLConnection和OkHttp的特点HttpURLConnection与OkHttp概述及个人倾向性分析 
在Java和Android开发中&amp;#xff0c;HttpURLConnection与OkHttp都是用于处理HTTP请求的库&amp;#xff0c;它们在功能、性能、易用性等方面各有千秋。本文将详细阐述两者的特点&amp;#xff0c;并结合个人使用经验&amp;#xff0c;表达我对哪…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:48 +0000</pubDate>
    </item>
    <item>
      <title>Flink窗口分配器WindowAssigner</title>
      <link>https://www.ppmy.cn/news/1541110.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Flink窗口分配器WindowAssignernews/2025/11/1 1:18:47/前言Flink 数据流经过 keyBy 分组后，下一步就是 WindowAssigner。WindowAssigner 定义了 stream 中的元素如何被分发到各个窗口，元素可以被分发到一个或多个窗口中，Flink 内置了常用的窗口分配器，包括：tumbling windows、 sliding windows、 session windows 和 global windows。除了 global windows ，其它分配器都是基于时间来分发数据的。当然，你也可以继承 WindowAssigner 抽象类实现自定义的窗口分配逻辑。WindowAssigner先看一下 WindowAssigner 抽象类的定义：@PublicEvolvingpublicabstractclassWindowAssigner&lt;T,WextendsWindow&gt;implementsSerializable{privatestaticfinallongserialVersionUID=1L;publicWindowAssigner(){}publicabstractCollection&lt;W&gt;assignWindows(Tvar1,longvar2,WindowAssignerContextvar4);publicTrigger&lt;T,W&gt;getDefaultTrigger(){returnthis.getDefaultTrigger(newStreamExecutionEnvironment());}/** @deprecated */@DeprecatedpublicabstractTrigger&lt;T,W&gt;getDefaultTrigger(StreamExecutionEnvironmentvar1);publicabstractTypeSerializer&lt;W&gt;getWindowSerializer(ExecutionConfigvar1);publicabstractbooleanisEventTime();@PublicEvolvingpublicabstractstaticclassWindowAssignerContext{publicWindowAssignerContext(){}publicabstractlonggetCurrentProcessingTime();}}四个方法，作用如下：assignWindows 将元素 element 分发到一个或多个窗口，返回值是窗口集合getDefaultTrigger 返回默认的窗口触发器 TriggergetWindowSerializer 返回窗口序列化器（窗口也要在算子间传输）isEventTime 是否基于事件时间语义Flink 内置的 WindowAssigner 实现类关系图如下：首先，可以按照基于何种时间语义划分出三大类：基于事件时间语义基于处理时间语义不基于时间语义 --&gt; GlobalWindows在基于时间语义的大类下面，又可以按照时间窗口算法划分为三个具体实现：滚动窗口分配算法 tumbling windows滑动窗口分配算法 sliding windows会话窗口分配算法 session windows定义窗口Window窗口对象被 Flink 统一封装为抽象类org.apache.flink.streaming.api.windowing.windows.Window，Flink 内置了两种实现，分别是：TimeWindow 基于时间范围的窗口，包含开始时间戳和结束时间戳GlobalWindow 全局窗口，与时间无关的窗口如果内置的这两种窗口无法满足你的需求，你也可以自定义窗口。需要注意的是，窗口本身是要在算子间传输的，所以你在自定义窗口的同时，还必须提供一个窗口序列化器，以便于 Flink 可以将你的窗口对象序列化传输。如下示例，我们定义了一个基于数字范围的 NumberWindow，可以将一个数字划分到对应的数字范围窗口内。publicclassNumberWindowextendsWindow{privatefinalintmin;privatefinalintmax;publicNumberWindow(intmin,intmax){this.min=min;this.max=max;}publicintgetMin(){returnmin;}publicintgetMax(){returnmax;}@Overridepublicbooleanequals(Objecto){if(this==o)returntrue;if(o==null||getClass()!=o.getClass())returnfalse;NumberWindowthat=(NumberWindow)o;returnmin==that.min&amp;&amp;max==that.max;}@OverridepublicinthashCode(){returnObjects.hash(min,max);}@OverridepubliclongmaxTimestamp(){returnLong.MAX_VALUE;}}Window 实现还必须配套一个序列化器，主要是实现 两个int变量到窗口对象的转换。publicstaticclassSerializerextendsTypeSerializerSingleton&lt;NumberWindow&gt;{@OverridepublicbooleanisImmutableType(){returntrue;}@OverridepublicNumberWindowcreateInstance(){returnnewNumberWindow(0,0);}@OverridepublicNumberWindowcopy(NumberWindownumberWindow){returnnumberWindow;}@OverridepublicNumberWindowcopy(NumberWindownumberWindow,NumberWindowt1){returnnumberWindow;}@OverridepublicintgetLength(){return8;}@Overridepublicvoidserialize(NumberWindownumberWindow,DataOutputViewdataOutputView)throwsIOException{dataOutputView.writeInt(numberWindow.getMin());dataOutputView.writeInt(numberWindow.getMax());}@OverridepublicNumberWindowdeserialize(DataInputViewdataInputView)throwsIOException{returnnewNumberWindow(dataInputView.readInt(),dataInputView.readInt());}@OverridepublicNumberWindowdeserialize(NumberWindownumberWindow,DataInputViewdataInputView)throwsIOException{returnthis.deserialize(dataInputView);}@Overridepublicvoidcopy(DataInputViewdataInputView,DataOutputViewdataOutputView)throwsIOException{dataOutputView.writeInt(dataInputView.readInt());dataOutputView.writeInt(dataInputView.readInt());}@OverridepublicTypeSerializerSnapshot&lt;NumberWindow&gt;snapshotConfiguration(){returnnewTimeWindowSerializerSnapshot();}publicstaticfinalclassTimeWindowSerializerSnapshotextendsSimpleTypeSerializerSnapshot&lt;NumberWindow&gt;{publicTimeWindowSerializerSnapshot(){super(Serializer::new);}}}自定义WindowAssigner窗口对象定义好了，接下来就是定义窗口分配对象。简单原则，我们把数字划分为三个窗口，分别是：小数窗口、中位数窗口、大数窗口。如下示例，继承 WindowAssigner 类，重写 assignWindows 方法，把数字划分到对应的窗口中。publicstaticclassMyWindowAssignerextendsWindowAssigner&lt;Integer,NumberWindow&gt;{privatefinalintstartingMedian;privatefinalintstartingLarge;publicMyWindowAssigner(intstartingMedian,intstartingLarge){this.startingMedian=startingMedian;this.startingLarge=startingLarge;}@OverridepublicCollection&lt;NumberWindow&gt;assignWindows(Integerelement,longtimestamp,WindowAssignerContextwindowAssignerContext){// 将数字划分到 小数、中位数、大数 窗口NumberWindowwindow;if(element&lt;startingMedian){window=newNumberWindow(Integer.MIN_VALUE,startingMedian-1);}elseif(element&lt;startingLarge){window=newNumberWindow(startingMedian,startingLarge-1);}else{window=newNumberWindow(startingLarge,Integer.MAX_VALUE);}returnList.of(window);}@OverridepublicTrigger&lt;Integer,NumberWindow&gt;getDefaultTrigger(StreamExecutionEnvironmentstreamExecutionEnvironment){returnnull;}@OverridepublicTypeSerializer&lt;NumberWindow&gt;getWindowSerializer(ExecutionConfigexecutionConfig){returnnewNumberWindow.Serializer();}@OverridepublicbooleanisEventTime(){returnfalse;}}把流程串起来窗口对象和窗口分配的逻辑都有了，接下来就是把整个流程给串起来。如下示例程序，我们定义了一个一秒内生成10个一百以内随机数的数据源Source，然后将这些数字流分为一组，并为其指定我们自定义的 MyWindowAssigner 窗口分配策略，策略中划分了三个窗口，数字小于20的归为小数一档、20到80的归为中位数一档、大于80的归为大数一档，根本数字分配对应的窗口。然后我们自定义了 Trigger，当窗口内积攒的数字达到十个，就触发窗口计算并关闭窗口。最终 ProcessWindowFunction 打印窗口内的数字并求和。publicstaticvoidmain(String[]args)throwsException{StreamExecutionEnvironmentenvironment=StreamExecutionEnvironment.getExecutionEnvironment();environment.addSource(newSourceFunction&lt;Integer&gt;(){@Overridepublicvoidrun(SourceContext&lt;Integer&gt;sourceContext)throwsException{while(true){Threads.sleep(100);sourceContext.collect(ThreadLocalRandom.current().nextInt(100));}}@Overridepublicvoidcancel(){}}).keyBy(i-&gt;"all").window(newMyWindowAssigner(20,80)).trigger(newTrigger&lt;Integer,NumberWindow&gt;(){@OverridepublicTriggerResultonElement(Integerelement,longtimestamp,NumberWindownumberWindow,TriggerContexttriggerContext)throwsException{ValueState&lt;Integer&gt;countState=triggerContext.getPartitionedState(newValueStateDescriptor&lt;&gt;("count",Integer.class));Integercount=Optional.ofNullable(countState.value()).orElse(0)+1;if(count&lt;10){countState.update(count);returnTriggerResult.CONTINUE;}countState.update(0);returnTriggerResult.FIRE_AND_PURGE;}@OverridepublicTriggerResultonProcessingTime(longtimestamp,NumberWindownumberWindow,TriggerContexttriggerContext)throwsException{returnnull;}@OverridepublicTriggerResultonEventTime(longtimestamp,NumberWindownumberWindow,TriggerContexttriggerContext)throwsException{returnnull;}@Overridepublicvoidclear(NumberWindownumberWindow,TriggerContexttriggerContext)throwsException{}}).process(newProcessWindowFunction&lt;Integer,Object,String,NumberWindow&gt;(){@Overridepublicvoidprocess(Stringkey,ProcessWindowFunction&lt;Integer,Object,String,NumberWindow&gt;.Context context,Iterable&lt;Integer&gt;iterable,Collector&lt;Object&gt;collector)throwsException{StringBuilderbuilder=newStringBuilder("["+context.window().getMin()+" - "+context.window().getMax()+"] [");intsum=0;for(Integervalue:iterable){builder.append(value+",");sum+=value;}builder.append("] sum="+sum);System.err.println(builder.toString());}});environment.execute();}运行 Flink 作业，控制台输出：[20-79][30,32,24,66,63,37,]sum=252[20-79][71,48,41,55,75,79,]sum=369[80-2147483647][99,90,88,98,85,99,]sum=559[20-79][74,30,56,70,36,78,]sum=344尾巴Flink 的 WindowAssigner 在数据处理中发挥着关键作用。它决定了如何将源源不断的数据流切分成不同的窗口，以便进行有针对性的聚合、计算和分析。通过合理配置 WindowAssigner，我们能够根据时间、数量或自定义的逻辑来划分数据，灵活地适应各种业务场景。这使得 Flink 能够对海量的实时数据进行高效且精准的处理，帮助我们从数据中提取有价值的信息和洞察。http://www.ppmy.cn/news/1541110.html相关文章点菜问题(北京大学考研机试题01背包)北大网络实验室经常有活动需要叫外卖&amp;#xff0c;但是每次叫外卖的报销经费的总额最大为 CC 元&amp;#xff0c;有 NN 种菜可以点&amp;#xff0c;经过长时间的点菜&amp;#xff0c;网络实验室对于每种菜 ii 都有一个量化的评价分数&amp;#xff08;表示这个菜可口程度&amp;#xff09;&amp;#xff0c;…阅读更多...基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell 所需依赖Word水印Pdf水印——&amp;#xff08; 注意 pdf 存在找不到字体的问题&amp;#xff09;Excel水印 所需依赖 &lt;dependency&gt;&lt;groupId&gt;com.aspose&lt;/groupId&gt;&lt;artifactId&gt;aspose-pdf&lt;/artifactId&amp;g…阅读更多...vue3学习记录-transitionvue3学习记录-transition 1.基础用法2.自定义css名2.1用法2.2 和 Animate.css一起使用 3. transition的生命周期钩子4.appear属性5.使用 Key Attribute 过渡 1.基础用法 是一个内置组件&amp;#xff0c;这意味着它在任意别的组件中都可以被使用&amp;#xff0c;无需注册。它可以将进入和…阅读更多...KUKA机器人选定程序时提示“选择非法”的处理方法KUKA机器人选定程序时提示“选择非法”的处理方法 如下图所示，选中某个程序，点击选定时， 系统提示：选择非法， 具体处理方法可参考以下内容： 选中该程序后，在右下角打开【编辑】菜单键，再选择【属性】，打开后可以看到程序的一般说明、信息模块和参数等信息，如下图所示…阅读更多...SpringBoot智能物流管理系统开发指南2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...网络资源模板--Android Studio 实现俄罗斯方块游戏App目录 
一、项目演示 
二、项目测试环境 
三、项目详情 四、完整的项目源码  一、项目演示 网络资源模板--基于Android studio 实现的俄罗斯方块游戏 二、项目测试环境 三、项目详情 
首页 这段代码实现了一个Android应用中的选择活动&amp;#xff08;SelectActivity&amp;#xff09;。以…阅读更多...HttpURLConnection和OkHttp的特点HttpURLConnection与OkHttp概述及个人倾向性分析 
在Java和Android开发中&amp;#xff0c;HttpURLConnection与OkHttp都是用于处理HTTP请求的库&amp;#xff0c;它们在功能、性能、易用性等方面各有千秋。本文将详细阐述两者的特点&amp;#xff0c;并结合个人使用经验&amp;#xff0c;表达我对哪…阅读更多...计算机网络基本架构示例2一、企业内部网络架构 在一个中型企业中&amp;#xff0c;通常会有以下的网络架构&amp;#xff1a; - 核心层&amp;#xff1a;由高性能的核心交换机组成&amp;#xff0c;负责快速转发大量数据。例如采用具有高带宽和冗余功能的三层交换机&amp;#xff0c;确保整个网络的稳定运行。它连接着各个部门的…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:47 +0000</pubDate>
    </item>
    <item>
      <title>点菜问题(北京大学考研机试题01背包)</title>
      <link>https://www.ppmy.cn/news/1541109.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维点菜问题(北京大学考研机试题01背包)news/2025/11/1 1:18:46/北大网络实验室经常有活动需要叫外卖，但是每次叫外卖的报销经费的总额最大为 CC 元，有 NN 种菜可以点，经过长时间的点菜，网络实验室对于每种菜 ii 都有一个量化的评价分数（表示这个菜可口程度），为 ViVi，每种菜的价格为 PiPi, 问如何选择各种菜，使得在报销额度范围内能使点到的菜的总评价分数最大。注意：由于需要营养多样化，每种菜只能点一次。输入格式输入的第一行有两个整数 CC 和 NN，CC 代表总共能够报销的额度， NN 代表能点菜的数目。接下来的 NN 行每行包括两个整数 PiPi 和 ViVi，分别表示第 ii 道菜的价格和评价分数。输出格式输出共一行，一个整数，表示在报销额度范围内，所点的菜能够得到的最大评价分数。数据范围1≤C≤10001≤C≤1000,1≤N≤1001≤N≤100,1≤Pi,Vi≤1001≤Pi,Vi≤100输入样例：90 4
20 25
30 20
40 50
10 18输出样例：95#include&lt;bits/stdc++.h&gt;
using namespace std;
const int N = 1010;
int f[N][N];
int c,n;
int p[N],v[N];
int main()
{cin&gt;&gt;c&gt;&gt;n;for(int i=1;i&lt;=n;i++) cin&gt;&gt;p[i],cin&gt;&gt;v[i];for(int i=1;i&lt;=n;i++){for(int j=1;j&lt;=c;j++){f[i][j]=f[i-1][j];if(j&gt;=p[i]) f[i][j]=max(f[i-1][j],f[i-1][j-p[i]]+v[i]);}}cout&lt;&lt;f[n][c];return 0;
}http://www.ppmy.cn/news/1541109.html相关文章基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell 所需依赖Word水印Pdf水印——&amp;#xff08; 注意 pdf 存在找不到字体的问题&amp;#xff09;Excel水印 所需依赖 &lt;dependency&gt;&lt;groupId&gt;com.aspose&lt;/groupId&gt;&lt;artifactId&gt;aspose-pdf&lt;/artifactId&amp;g…阅读更多...vue3学习记录-transitionvue3学习记录-transition 1.基础用法2.自定义css名2.1用法2.2 和 Animate.css一起使用 3. transition的生命周期钩子4.appear属性5.使用 Key Attribute 过渡 1.基础用法 是一个内置组件&amp;#xff0c;这意味着它在任意别的组件中都可以被使用&amp;#xff0c;无需注册。它可以将进入和…阅读更多...KUKA机器人选定程序时提示“选择非法”的处理方法KUKA机器人选定程序时提示“选择非法”的处理方法 如下图所示，选中某个程序，点击选定时， 系统提示：选择非法， 具体处理方法可参考以下内容： 选中该程序后，在右下角打开【编辑】菜单键，再选择【属性】，打开后可以看到程序的一般说明、信息模块和参数等信息，如下图所示…阅读更多...SpringBoot智能物流管理系统开发指南2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...网络资源模板--Android Studio 实现俄罗斯方块游戏App目录 
一、项目演示 
二、项目测试环境 
三、项目详情 四、完整的项目源码  一、项目演示 网络资源模板--基于Android studio 实现的俄罗斯方块游戏 二、项目测试环境 三、项目详情 
首页 这段代码实现了一个Android应用中的选择活动&amp;#xff08;SelectActivity&amp;#xff09;。以…阅读更多...HttpURLConnection和OkHttp的特点HttpURLConnection与OkHttp概述及个人倾向性分析 
在Java和Android开发中&amp;#xff0c;HttpURLConnection与OkHttp都是用于处理HTTP请求的库&amp;#xff0c;它们在功能、性能、易用性等方面各有千秋。本文将详细阐述两者的特点&amp;#xff0c;并结合个人使用经验&amp;#xff0c;表达我对哪…阅读更多...计算机网络基本架构示例2一、企业内部网络架构 在一个中型企业中&amp;#xff0c;通常会有以下的网络架构&amp;#xff1a; - 核心层&amp;#xff1a;由高性能的核心交换机组成&amp;#xff0c;负责快速转发大量数据。例如采用具有高带宽和冗余功能的三层交换机&amp;#xff0c;确保整个网络的稳定运行。它连接着各个部门的…阅读更多...Git的原理和使用（二）1. git的版本回退 之前我们也提到过&amp;#xff0c;Git 能够管理⽂件的历史版本&amp;#xff0c;这也是版本控制器重要的能⼒。如果有⼀天你发现 之前前的⼯作做的出现了很⼤的问题&amp;#xff0c;需要在某个特定的历史版本重新开始&amp;#xff0c;这个时候&amp;#xff0c;就需要版本 回退的功能…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:46 +0000</pubDate>
    </item>
    <item>
      <title>基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell</title>
      <link>https://www.ppmy.cn/news/1541108.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维基于Aspose依赖添加自定义文本水印——Word、Pdf、Cellnews/2025/11/1 1:18:45/基于Aspose依赖添加自定义文本水印——Word、Pdf、Cell所需依赖Word水印Pdf水印——（ 注意 pdf 存在找不到字体的问题）Excel水印所需依赖&lt;dependency&gt;&lt;groupId&gt;com.aspose&lt;/groupId&gt;&lt;artifactId&gt;aspose-pdf&lt;/artifactId&gt;&lt;version&gt;22.11&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;com.aspose&lt;/groupId&gt;&lt;artifactId&gt;aspose-cells&lt;/artifactId&gt;&lt;version&gt;22.12&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;com.aspose&lt;/groupId&gt;&lt;artifactId&gt;aspose-slides&lt;/artifactId&gt;&lt;version&gt;22.11&lt;/version&gt;&lt;classifier&gt;jdk16&lt;/classifier&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;com.aspose&lt;/groupId&gt;&lt;artifactId&gt;aspose-words&lt;/artifactId&gt;&lt;version&gt;22.12&lt;/version&gt;&lt;classifier&gt;jdk17&lt;/classifier&gt;&lt;/dependency&gt;Word水印// 先获取文件流 （这边先随意读取文件流）InputStreamin=newFileInputStream("E:/demo/demo.docx");// 注意document包，每种类型都有一个documentcom.aspose.words.Documentdoc=newcom.aspose.words.Document(in);TextWatermarkOptionstextWatermarkOptions=newTextWatermarkOptions();textWatermarkOptions.setFontFamily("宋体");textWatermarkOptions.setFontSize(24f);textWatermarkOptions.setColor(java.awt.Color.RED);textWatermarkOptions.setLayout(WatermarkLayout.DIAGONAL);textWatermarkOptions.isSemitrasparent(false);doc.getWatermark().setText("水印内容",textWatermarkOptions);ByteArrayOutputStreamout=newByteArrayOutputStream();doc.save(out,com.aspose.words.SaveFormat.DOCX);out.close();// 输出流用于下载returnout.toByteArray();Pdf水印——（ 注意 pdf 存在找不到字体的问题）// 先获取文件流 （这边先随意读取文件流）InputStreamin=newFileInputStream("E:/demo/demo.pdf");// 注意document包，每种类型都有一个documentcom.aspose.pdf.Documentdoc=newcom.aspose.pdf.Document(in);FormattedTextformattedText=newFormattedText("水印内容",java.awt.Color.RED,FontStyle.HelveticaBold,EncodingType.Identity_h,true,24f);for(Pagepage:doc.getPages()){WatermarkArtifactartifact=newWatermarkArtifact();artifact.setText(formattedText);artifact.getTextState().setFont(FontRepository.findFont(getFontName("宋体"),true));artifact.setArtifactHorizontalAlignment(HorizontalAlignment.Center);artifact.setArtifactVerticalAlignment(VerticalAlignment.Center);artifact.setRotation(45);// 设置旋转角度artifact.setOpacity(0.9);// 设置透明度artifact.setBackground(true);page.getArtifacts().add(artifact);}ByteArrayOutputStreamout=newByteArrayOutputStream();doc.save(out,com.aspose.pdf.SaveFormat.Pdf);out.close();returnout.toByteArray();// 注意 pdf 存在找不到字体的问题 因为字体库是以文件名查找 而不是字体名privatestaticStringgetFontName(Stringfont){switch(font.trim().toLowerCase()){case"宋体":return"simsun";case"微软雅黑":return"simhei";default:returnfont;}}Excel水印// 先获取文件流 （这边先随意读取文件流）InputStreamin=newFileInputStream("E:/demo/demo.xls");// 注意document包，每种类型都有一个documentWorkbookworkbook=newWorkbook(in);for(Objectworksheet:workbook.getWorksheets()){Worksheetsheet=(Worksheet)worksheet;intcoloums=sheet.getCells().getColumns().getCount();introws=sheet.getCells().getRows().getCount();com.aspose.cells.Shapewordart=sheet.getShapes().addTextEffect(MsoPresetTextEffect.TEXT_EFFECT_1,"水印内容","宋体",24f,true,false,rows,rows/2,coloums/2,0,100,800);MsoFillFormatwordArtFormat=wordart.getFillFormat();wordArtFormat.setTransparency(0.9);intr=java.awt.Color.getRed();intg=java.awt.Color.getGreen();intb=java.awt.Color.getBlue();wordArtFormat.setForeColor(com.aspose.cells.Color.fromArgb(r,g,b));wordart.setHasLine(false);wordart.setLocked(true);wordart.setLockedProperty(ShapeLockType.SELECTION,true);wordart.setLockedProperty(ShapeLockType.SHAPE_TYPE,true);wordart.setLockedProperty(ShapeLockType.MOVE,true);wordart.setLockedProperty(ShapeLockType.RESIZE,true);wordart.setLockedProperty(ShapeLockType.TEXT,true);}ByteArrayOutputStreamout=newByteArrayOutputStream();workbook.save(out,com.aspose.cells.SaveFormat.XLSX);out.close();returnout.toByteArray();http://www.ppmy.cn/news/1541108.html相关文章vue3学习记录-transitionvue3学习记录-transition 1.基础用法2.自定义css名2.1用法2.2 和 Animate.css一起使用 3. transition的生命周期钩子4.appear属性5.使用 Key Attribute 过渡 1.基础用法 是一个内置组件&amp;#xff0c;这意味着它在任意别的组件中都可以被使用&amp;#xff0c;无需注册。它可以将进入和…阅读更多...KUKA机器人选定程序时提示“选择非法”的处理方法KUKA机器人选定程序时提示“选择非法”的处理方法 如下图所示，选中某个程序，点击选定时， 系统提示：选择非法， 具体处理方法可参考以下内容： 选中该程序后，在右下角打开【编辑】菜单键，再选择【属性】，打开后可以看到程序的一般说明、信息模块和参数等信息，如下图所示…阅读更多...SpringBoot智能物流管理系统开发指南2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...网络资源模板--Android Studio 实现俄罗斯方块游戏App目录 
一、项目演示 
二、项目测试环境 
三、项目详情 四、完整的项目源码  一、项目演示 网络资源模板--基于Android studio 实现的俄罗斯方块游戏 二、项目测试环境 三、项目详情 
首页 这段代码实现了一个Android应用中的选择活动&amp;#xff08;SelectActivity&amp;#xff09;。以…阅读更多...HttpURLConnection和OkHttp的特点HttpURLConnection与OkHttp概述及个人倾向性分析 
在Java和Android开发中&amp;#xff0c;HttpURLConnection与OkHttp都是用于处理HTTP请求的库&amp;#xff0c;它们在功能、性能、易用性等方面各有千秋。本文将详细阐述两者的特点&amp;#xff0c;并结合个人使用经验&amp;#xff0c;表达我对哪…阅读更多...计算机网络基本架构示例2一、企业内部网络架构 在一个中型企业中&amp;#xff0c;通常会有以下的网络架构&amp;#xff1a; - 核心层&amp;#xff1a;由高性能的核心交换机组成&amp;#xff0c;负责快速转发大量数据。例如采用具有高带宽和冗余功能的三层交换机&amp;#xff0c;确保整个网络的稳定运行。它连接着各个部门的…阅读更多...Git的原理和使用（二）1. git的版本回退 之前我们也提到过&amp;#xff0c;Git 能够管理⽂件的历史版本&amp;#xff0c;这也是版本控制器重要的能⼒。如果有⼀天你发现 之前前的⼯作做的出现了很⼤的问题&amp;#xff0c;需要在某个特定的历史版本重新开始&amp;#xff0c;这个时候&amp;#xff0c;就需要版本 回退的功能…阅读更多...【Qt】信号和槽——信号和槽的概念、信号和槽的使用、信号和槽的优缺点、自定义信号和槽、信号和槽的断开文章目录 Qt1. 信号和槽的概念2. 信号和槽的使用3. 信号和槽的优缺点4. 自定义信号和槽5. 信号和槽的断开 Qt 1. 信号和槽的概念 信号是什么&amp;#xff1a; 在Linux中&amp;#xff0c;我们知道信号是一种异步的事件通知机制&amp;#xff0c;用于通知进程某个事件已经发生。它是进程间通信…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:45 +0000</pubDate>
    </item>
    <item>
      <title>vue3学习记录-transition</title>
      <link>https://www.ppmy.cn/news/1541107.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维vue3学习记录-transitionnews/2025/11/1 1:18:44/vue3学习记录-transition1.基础用法2.自定义css名2.1用法2.2 和 Animate.css一起使用3. transition的生命周期钩子4.appear属性5.使用 Key Attribute 过渡1.基础用法是一个内置组件，这意味着它在任意别的组件中都可以被使用，无需注册。它可以将进入和离开动画应用到通过默认插槽传递给它的元素或组件上。进入或离开可以由以下的条件之一触发：由 v-if 所触发的切换由 v-show 所触发的切换由特殊元素 切换的动态组件改变特殊的 key 属性基本上就是用在“改变”组件中，Vue 会自动检测元素的插入、删除或更新，触发相应的过渡效果。&lt;script setup&gt;import{ref}from'vue';constflag=ref(true);&lt;/script&gt;&lt;template&gt;&lt;el-button @click="flag = !flag"&gt;switch&lt;/el-button&gt;&lt;transition name="fade"&gt;&lt;divclass="box"v-if="flag"&gt;&lt;/div&gt;&lt;/transition&gt;&lt;/template&gt;&lt;style lang="scss"scoped&gt;.box{width:200px;height:200px;background-color:aqua;}.fade-enter-from{width:0;height:0;}.fade-enter-active{transition:all1s ease;}.fade-enter-to{width:200px;height:200px;}.fade-leave-from{width:200px;height:200px;}.fade-leave-active{transition:all1s ease;}.fade-leave-to{width:0;height:0;}&lt;/style&gt;用transition标签把div包裹，标签加上个name属性，这样vue就会提供了 6 个 CSS 类名（如 name属性-enter-from, name属性-enter-active, name属性-enter-to 等），方便定义不同阶段的样式。如果不写name属性的话，vue默认提供的css类名是(如 v-enter-from, v-enter-active, v-enter-to 等)2.自定义css名2.1用法你也可以向 传递以下的 props 来指定自定义的过渡 class：enter-from-classenter-active-classenter-to-classleave-from-classleave-active-classleave-to-class&lt;transition name="fade"enter-from-class="v-e-from"enter-active-class="v-e-active"enter-to-class="v-e-to"leave-from-class="v-l-from"leave-active-class="v-l-active"leave-to-class="v-l-to"&gt;&lt;divclass="box"v-if="flag"&gt;&lt;/div&gt;&lt;/transition&gt;.v-e-from{width:0;height:0;}.v-e-active{transition:all1s ease;}.v-e-to{width:200px;height:200px;}.v-l-from{width:200px;height:200px;}.v-l-active{transition:all1s ease;}.v-l-to{width:0;height:0;}可以达到一样的效果2.2 和 Animate.css一起使用下载依赖npm install animate.css --save//引入import'animate.css';//使用&lt;transition name="fade"enter-active-class="animate__animated animate__bounce"&gt;&lt;divclass="box"v-if="flag"&gt;&lt;/div&gt;&lt;/transition&gt;不用再自己写css样式也能达到动画效果了。你可以通过向 组件传入 duration prop 来显式指定过渡的持续时间 (以毫秒为单位)&lt;Transition:duration="550"&gt;...&lt;/Transition&gt;如果有必要的话，你也可以用对象的形式传入，分开指定进入和离开所需的时间：&lt;Transition:duration="{ enter: 500, leave: 800 }"&gt;...&lt;/Transition&gt;3. transition的生命周期钩子&lt;Transition@before-enter="onBeforeEnter"@enter="onEnter"@after-enter="onAfterEnter"@enter-cancelled="onEnterCancelled"@before-leave="onBeforeLeave"@leave="onLeave"@after-leave="onAfterLeave"@leave-cancelled="onLeaveCancelled"&gt;&lt;!--...--&gt;&lt;/Transition&gt;// 在元素被插入到 DOM 之前被调用// 用这个来设置元素的 "enter-from" 状态functiononBeforeEnter(el){}// 在元素被插入到 DOM 之后的下一帧被调用// 用这个来开始进入动画functiononEnter(el,done){// 调用回调函数 done 表示过渡结束// 如果与 CSS 结合使用，则这个回调是可选参数done()}// 当进入过渡完成时调用。functiononAfterEnter(el){}// 当进入过渡在完成之前被取消时调用//例如，切换过快的话functiononEnterCancelled(el){}// 在 leave 钩子之前调用// 大多数时候，你应该只会用到 leave 钩子functiononBeforeLeave(el){}// 在离开过渡开始时调用// 用这个来开始离开动画functiononLeave(el,done){// 调用回调函数 done 表示过渡结束// 如果与 CSS 结合使用，则这个回调是可选参数done()}// 在离开过渡完成、// 且元素已从 DOM 中移除时调用functiononAfterLeave(el){}// 仅在 v-show 过渡中可用functiononLeaveCancelled(el){}举个例子，使用这些钩子搭配gsap来创建一个更复杂的动画效果，一个带有"弹跳"效果的淡入淡出动画。&lt;template&gt;&lt;button @click="show = !show"&gt;Toggle&lt;/button&gt;&lt;transition@before-enter="beforeEnter"@enter="enter"@after-enter="afterEnter"@before-leave="beforeLeave"@leave="leave"@after-leave="afterLeave"&gt;&lt;div v-if="show"class="box"&gt;Hello Vue3!&lt;/div&gt;&lt;/transition&gt;&lt;/template&gt;&lt;script setup&gt;import{ref}from'vue';importgsapfrom'gsap';constshow=ref(false);constbeforeEnter=(el)=&gt;{el.style.opacity=0;el.style.transform='scale(0.8)';};constenter=(el,done)=&gt;{gsap.to(el,{duration:0.5,opacity:1,scale:1,ease:'elastic.out(1, 0.5)',onComplete:done});};constafterEnter=(el)=&gt;{console.log('Enter animation completed');};constbeforeLeave=(el)=&gt;{el.style.opacity=1;el.style.transform='scale(1)';};constleave=(el,done)=&gt;{gsap.to(el,{duration:0.5,opacity:0,scale:0.8,ease:'back.in(1.5)',onComplete:done});};constafterLeave=(el)=&gt;{console.log('Leave animation completed');};&lt;/script&gt;&lt;style scoped&gt;.box{width:200px;height:100px;background-color:#42b883;display:flex;justify-content:center;align-items:center;color:white;font-size:18px;border-radius:8px;}&lt;/style&gt;可以使用钩子来实现动画，当然也可以做些其他的事情。4.appear属性在某个节点初次渲染时应用一个过渡效果，即不用点击就可以自动渲染一个动画。&lt;template&gt;&lt;button @click="show = !show"&gt;Toggle&lt;/button&gt;&lt;Transition appear&gt;&lt;div v-if="show"class="box"&gt;Hello Vue3!&lt;/div&gt;&lt;/Transition&gt;&lt;/template&gt;&lt;script setup&gt;import{ref}from'vue';constshow=ref(true);&lt;/script&gt;&lt;style scoped&gt;.box{width:200px;height:100px;background-color:#42b883;display:flex;justify-content:center;align-items:center;color:white;font-size:18px;border-radius:8px;}.v-enter-active,.v-leave-active{transition:all1s ease;}.v-enter-from,.v-leave-to{opacity:0;transform:scale(0.8);}.v-enter-to,.v-leave-from{opacity:1;transform:scale(1);}.v-enter-active1{transition:all5s ease;}.v-enter-to1{opacity:1;transform:scale(1);background-color:lightcoral;}.v-enter-from1{opacity:1;transform:scale(0.5);background-color:lightgreen;}&lt;/style&gt;如果只加appear属性，效果默认的是v-enter-from，v-enter-active，v-enter-to；注意这里的v-if绑定的布尔值要为true；&lt;template&gt;&lt;button @click="show = !show"&gt;Toggle&lt;/button&gt;&lt;Transition appear appear-from-class="v-enter-from1"appear-active-class="v-enter-active1"appear-to-class="v-enter-to1"&gt;&lt;div v-if="show"class="box"&gt;Hello Vue3!&lt;/div&gt;&lt;/Transition&gt;&lt;/template&gt;&lt;script setup&gt;import{ref}from'vue';constshow=ref(true);&lt;/script&gt;&lt;style scoped&gt;.box{width:200px;height:100px;background-color:#42b883;display:flex;justify-content:center;align-items:center;color:white;font-size:18px;border-radius:8px;}.v-enter-active1{transition:all5s ease;}.v-enter-to1{opacity:1;transform:scale(1);background-color:lightcoral;}.v-enter-from1{opacity:1;transform:scale(0.5);background-color:lightgreen;}&lt;/style&gt;还可以指定appear-from-class， appear-active-class，appear-to-class属性名5.使用 Key Attribute 过渡有时为了触发过渡，你需要强制重新渲染 DOM 元素。以计数器组件为例：&lt;script setup&gt;import{ref}from'vue';constcount=ref(0);setInterval(()=&gt;count.value++,1000);&lt;/script&gt;&lt;template&gt;&lt;Transition&gt;&lt;span:key="count"&gt;{{count}}&lt;/span&gt;&lt;/Transition&gt;&lt;/template&gt;如果不使用 key attribute，则只有文本节点会被更新，因此不会发生过渡。但是，有了 key 属性，Vue 就知道在 count 改变时创建一个新的 span 元素，因此 Transition 组件有两个不同的元素在它们之间进行过渡。http://www.ppmy.cn/news/1541107.html相关文章KUKA机器人选定程序时提示“选择非法”的处理方法KUKA机器人选定程序时提示“选择非法”的处理方法 如下图所示，选中某个程序，点击选定时， 系统提示：选择非法， 具体处理方法可参考以下内容： 选中该程序后，在右下角打开【编辑】菜单键，再选择【属性】，打开后可以看到程序的一般说明、信息模块和参数等信息，如下图所示…阅读更多...SpringBoot智能物流管理系统开发指南2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...网络资源模板--Android Studio 实现俄罗斯方块游戏App目录 
一、项目演示 
二、项目测试环境 
三、项目详情 四、完整的项目源码  一、项目演示 网络资源模板--基于Android studio 实现的俄罗斯方块游戏 二、项目测试环境 三、项目详情 
首页 这段代码实现了一个Android应用中的选择活动&amp;#xff08;SelectActivity&amp;#xff09;。以…阅读更多...HttpURLConnection和OkHttp的特点HttpURLConnection与OkHttp概述及个人倾向性分析 
在Java和Android开发中&amp;#xff0c;HttpURLConnection与OkHttp都是用于处理HTTP请求的库&amp;#xff0c;它们在功能、性能、易用性等方面各有千秋。本文将详细阐述两者的特点&amp;#xff0c;并结合个人使用经验&amp;#xff0c;表达我对哪…阅读更多...计算机网络基本架构示例2一、企业内部网络架构 在一个中型企业中&amp;#xff0c;通常会有以下的网络架构&amp;#xff1a; - 核心层&amp;#xff1a;由高性能的核心交换机组成&amp;#xff0c;负责快速转发大量数据。例如采用具有高带宽和冗余功能的三层交换机&amp;#xff0c;确保整个网络的稳定运行。它连接着各个部门的…阅读更多...Git的原理和使用（二）1. git的版本回退 之前我们也提到过&amp;#xff0c;Git 能够管理⽂件的历史版本&amp;#xff0c;这也是版本控制器重要的能⼒。如果有⼀天你发现 之前前的⼯作做的出现了很⼤的问题&amp;#xff0c;需要在某个特定的历史版本重新开始&amp;#xff0c;这个时候&amp;#xff0c;就需要版本 回退的功能…阅读更多...【Qt】信号和槽——信号和槽的概念、信号和槽的使用、信号和槽的优缺点、自定义信号和槽、信号和槽的断开文章目录 Qt1. 信号和槽的概念2. 信号和槽的使用3. 信号和槽的优缺点4. 自定义信号和槽5. 信号和槽的断开 Qt 1. 信号和槽的概念 信号是什么&amp;#xff1a; 在Linux中&amp;#xff0c;我们知道信号是一种异步的事件通知机制&amp;#xff0c;用于通知进程某个事件已经发生。它是进程间通信…阅读更多...生活中的感悟喜怒不形于色 
以前一直觉得做人要做本我&amp;#xff0c;该笑就笑该怒就怒。但慢慢发现&amp;#xff0c;这样可能不太好。 
暂且不谈别人会感知你的真实想法&amp;#xff0c;就单说一点&amp;#xff0c;表情是否会引起别人的误判&amp;#xff1f;表情除了开心和愤怒&amp;#xff0c;还有很多&amp;#xff0…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:44 +0000</pubDate>
    </item>
    <item>
      <title>KUKA机器人选定程序时提示“选择非法”的处理方法</title>
      <link>https://www.ppmy.cn/news/1541106.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维KUKA机器人选定程序时提示“选择非法”的处理方法news/2025/11/1 1:18:43/KUKA机器人选定程序时提示“选择非法”的处理方法如下图所示，选中某个程序，点击选定时，系统提示：选择非法，具体处理方法可参考以下内容：选中该程序后，在右下角打开【编辑】菜单键，再选择【属性】，打开后可以看到程序的一般说明、信息模块和参数等信息，如下图所示，选择中间的“信息模块”，查看可视化是否勾选☑️，如下图所示，http://www.ppmy.cn/news/1541106.html相关文章SpringBoot智能物流管理系统开发指南2相关技术 
2.1 MYSQL数据库 MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统&amp;#xff0c;它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等&amp;#xff0c;非常…阅读更多...网络资源模板--Android Studio 实现俄罗斯方块游戏App目录 
一、项目演示 
二、项目测试环境 
三、项目详情 四、完整的项目源码  一、项目演示 网络资源模板--基于Android studio 实现的俄罗斯方块游戏 二、项目测试环境 三、项目详情 
首页 这段代码实现了一个Android应用中的选择活动&amp;#xff08;SelectActivity&amp;#xff09;。以…阅读更多...HttpURLConnection和OkHttp的特点HttpURLConnection与OkHttp概述及个人倾向性分析 
在Java和Android开发中&amp;#xff0c;HttpURLConnection与OkHttp都是用于处理HTTP请求的库&amp;#xff0c;它们在功能、性能、易用性等方面各有千秋。本文将详细阐述两者的特点&amp;#xff0c;并结合个人使用经验&amp;#xff0c;表达我对哪…阅读更多...计算机网络基本架构示例2一、企业内部网络架构 在一个中型企业中&amp;#xff0c;通常会有以下的网络架构&amp;#xff1a; - 核心层&amp;#xff1a;由高性能的核心交换机组成&amp;#xff0c;负责快速转发大量数据。例如采用具有高带宽和冗余功能的三层交换机&amp;#xff0c;确保整个网络的稳定运行。它连接着各个部门的…阅读更多...Git的原理和使用（二）1. git的版本回退 之前我们也提到过&amp;#xff0c;Git 能够管理⽂件的历史版本&amp;#xff0c;这也是版本控制器重要的能⼒。如果有⼀天你发现 之前前的⼯作做的出现了很⼤的问题&amp;#xff0c;需要在某个特定的历史版本重新开始&amp;#xff0c;这个时候&amp;#xff0c;就需要版本 回退的功能…阅读更多...【Qt】信号和槽——信号和槽的概念、信号和槽的使用、信号和槽的优缺点、自定义信号和槽、信号和槽的断开文章目录 Qt1. 信号和槽的概念2. 信号和槽的使用3. 信号和槽的优缺点4. 自定义信号和槽5. 信号和槽的断开 Qt 1. 信号和槽的概念 信号是什么&amp;#xff1a; 在Linux中&amp;#xff0c;我们知道信号是一种异步的事件通知机制&amp;#xff0c;用于通知进程某个事件已经发生。它是进程间通信…阅读更多...生活中的感悟喜怒不形于色 
以前一直觉得做人要做本我&amp;#xff0c;该笑就笑该怒就怒。但慢慢发现&amp;#xff0c;这样可能不太好。 
暂且不谈别人会感知你的真实想法&amp;#xff0c;就单说一点&amp;#xff0c;表情是否会引起别人的误判&amp;#xff1f;表情除了开心和愤怒&amp;#xff0c;还有很多&amp;#xff0…阅读更多...keras的内部的模块有哪些? (自用便签)AI回答, 什么时候忘了回来看看阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:43 +0000</pubDate>
    </item>
    <item>
      <title>SpringBoot智能物流管理系统开发指南</title>
      <link>https://www.ppmy.cn/news/1541105.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维SpringBoot智能物流管理系统开发指南news/2025/11/1 1:18:42/2相关技术2.1 MYSQL数据库MySQL是一个真正的多用户、多线程SQL数据库服务器。 是基于SQL的客户/服务器模式的关系数据库管理系统，它的有点有有功能强大、使用简单、管理方便、安全可靠性高、运行速度快、多线程、跨平台性、完全网络化、稳定性等，非常适用于Web站点或者其他应用软件的数据库后端的开发工作。此外，用户可利用许多语言编写访问MySQL数据库的程序。作为开放源代码运动的产物之一，MySQL关系数据库管理系统越来越受到人们的青睐，应用范围也越来越广。速度和易用性使MySQL特别适用于Web站点或应用软件的数据库后端的开发工作。MYSQL数据库具有以下特点：1、C和C ++中使用和测试，以确保源代码的编译器的便携性和灵活性。2、支持多种操作系统AIX的，FreeBSD下，HP-UX，Linux和Mac OS中，Novell公司的Netware，OpenBSD系统，OS/2裹时，Solaris，Windows等。3、提供了用于不同的编程语言的API。编程语言，如C, C ++，Python和Java的，的Perl，PHP，埃菲尔铁塔，Ruby和Tcl的。4、以及使用的CPU资源来支持多线程。5、算法优化查询SQL，切实提高搜索速度。6、网络上的客户端和服务器可以用来编程任何独立的编程环境，也有中国，GB2312，BIG5，日文写作，一般基金，用于支持多国语言，并且可以嵌入在数据表和其他软件shift_jis访问柱可以用作的名称。7、TCP / IP，ODBC和JDBC数据库，并提供连接到其他。8、管理工具的管理，控制和优化数据库的操作。9、可以数以千万计的记录在一个大的数据库。2.2 B/S结构B/S架构是一种基于互联网系统的软件系统开发架构，是现如今在软件系统开发中采用非常大量的一种软件系统结构。现如今B/S架构已经被大量使用，打破了C/S结构的结构，给基于网络结构的软件系统提供了良好的支持。B/S架构伴随着计算机网络技术发展而逐步的发展和更新。伴随着互联网的进一步发展，就要求大多数的管理系统要求不仅仅可以在一台电脑上使用，同时可以在接入互联网的其他电脑也可以使用对系统进行操作和使用。在这样的背景下基于B/S架构的软件系统设计方法得到了越来越大量的使用，基础部分也在不断的更新。B/S架构是利用操作系统中的浏览器来进行使用的，不是一种窗体软件系统，不需要在使用系统的电脑上进行安装。B/S架构的运行方式是在远程的服务器上把开发的软件系统部署在远程的服务器上，在部署好软件系统之后就可以实现在任何接入互联网的电脑上访问部署好的软件系统。B/S架构给使用管理系统的用户带来极大的便利。在三层体系结构的B/S（Browser/Server，浏览器/服务器结构）系统中，用户可以通过浏览器向分布在网络上的众多服务器发出请求。B/S系统极大地简化了客户机的工作量，客户机上只需要安装、配置少量的客户端运行软件即可，服务器将担负大量的工作，对数据库的访问以及应用程序的执行都将由服务器来完成。B/S架构的不断成熟，主要使用WWW浏览器技术，结合多种浏览器脚本语言，用通用浏览器需要实现原本复杂的专有软件来实现的强大功能，并节约了开发成本，是一种新的软件架构。B/S系统包括：表示逻辑层，控制逻辑层，数据展现层，三层是相对独立又相互关联。2.3 Spring Boot框架简介Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。SpringBoot可以与经典的Java开发工具一起使用或者作为命令行工具安装。无论如何，需要JavaSDK1.6或者更高版本，本项目用到的是JDK1.8版本。4系统概要设计4.1概述本系统采用B/S结构(Browser/Server,浏览器/服务器结构)和基于Web服务两种模式，是一个适用于Internet环境下的模型结构。只要用户能连上Internet,便可以在任何时间、任何地点使用。系统工作原理图如图4-1所示：图4-1系统工作原理图4.2系统结构本系统是基于B/S架构的网站系统，设计的功能结构图如下图所示：图4-2功能结构图4.3.数据库设计4.3.1数据库实体概念设计的目标是设计出反映某个组织部门信息需求的数据库系统概念模式，数据库系统的概念模式独立于数据库系统的逻辑结构、独立于数据库管理系统（DBMS）、独立于计算机系统。概念模式的设计方法是在需求分析的基础上，用概念数据模型（例如E-R模型）表示数据及数据之间的相互联系，设计出反映用户信息需求和处理需求的数据库系统概念模式。概念设计的目标是准确描述应用领域的信息模式，支持用户的各种应用，这样既容易转换为数据库系统逻辑模式，又容易为用户理解。数据库系统概念模式是面向现实世界的数据模型，不能直接用于数据库系统的实现。在此阶段，用户可以参与和评价数据库系统的设计，从而有利于保证数据库系统的设计与用户的需求相吻合。在概念模式的设计中，E-R模型法是最常见的设计方法。本系统的E-R图如下图所示：（1）员工信息的实体属性图如下：图4.12 员工信息实体属性图（2）店主信息实体属性图如图4.13所示：图4.13 店主信息实体属性图（3）部门分类信息实体属性图如图4.14所示：图4.14 部门分类信息实体属性图4.3.2数据库设计表智能物流管理系统需要后台数据库，下面介绍数据库中的各个表的详细信息：表4.1 部门分类字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间leixing varchar(200) 是 NULL 类型表4.2 店主字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间dianzhuzhanghao varchar(200) 否 店主账号mima varchar(200) 否 密码dianzhuxingming varchar(200) 否 店主姓名xingbie varchar(200) 是 NULL 性别lianxidianhua varchar(200) 是 NULL 联系电话youxiang varchar(200) 是 NULL 邮箱shenfenzheng varchar(200) 是 NULL 身份证tupian varchar(200) 是 NULL 图片表4.3 订单信息字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间dingdanbianhao varchar(200) 是 NULL 订单编号mendianmingcheng varchar(200) 是 NULL 门店名称dingdanzhonglei varchar(200) 是 NULL 订单种类pinming varchar(200) 是 NULL 品名jingzhong varchar(200) 是 NULL 净重shifadi varchar(200) 是 NULL 始发地mudedi varchar(200) 是 NULL 目的地kehubeizhu longtext 是 NULL 客户备注zhanghao varchar(200) 是 NULL 账号gukexingming varchar(200) 是 NULL 顾客姓名sfsh varchar(200) 是 否 是否审核shhf longtext 是 NULL 审核回复表4.4 工作日志字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间gonghao varchar(200) 是 NULL 工号yuangongxingming varchar(200) 是 NULL 员工姓名bumen varchar(200) 是 NULL 部门dianzhuzhanghao varchar(200) 是 NULL 店主账号mendianmingcheng varchar(200) 是 NULL 门店名称gongzuoxiangmu varchar(200) 是 NULL 工作项目gongzuoneirong longtext 是 NULL 工作内容wanchengzhuangkuang varchar(200) 是 NULL 完成状况daijiejuewenti longtext 是 NULL 待解决问题gongzuozongjie longtext 是 NULL 工作总结beizhu longtext 是 NULL 备注riqi date 是 NULL 日期sfsh varchar(200) 是 否 是否审核shhf longtext 是 NULL 审核回复表4.5 顾客字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间zhanghao varchar(200) 否 账号mima varchar(200) 否 密码gukexingming varchar(200) 否 顾客姓名xingbie varchar(200) 是 NULL 性别shouji varchar(200) 是 NULL 手机youxiang varchar(200) 是 NULL 邮箱shenfenzheng varchar(200) 是 NULL 身份证dizhi varchar(200) 是 NULL 地址tupian varchar(200) 是 NULL 图片表4.6 门店信息字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间mendianmingcheng varchar(200) 是 NULL 门店名称mendianweizhi varchar(200) 是 NULL 门店位置mendianjieshao longtext 是 NULL 门店介绍mendiantupian varchar(200) 是 NULL 门店图片chuangjianriqi date 是 NULL 创建日期dianzhuzhanghao varchar(200) 是 NULL 店主账号lianxidianhua varchar(200) 是 NULL 联系电话sfsh varchar(200) 是 否 是否审核shhf longtext 是 NULL 审核回复表4.7 门店员工字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间gonghao varchar(200) 是 NULL 工号yuangongxingming varchar(200) 是 NULL 员工姓名xingbie varchar(200) 是 NULL 性别bumen varchar(200) 是 NULL 部门shouji varchar(200) 是 NULL 手机shenfenzheng varchar(200) 是 NULL 身份证gerenjianli varchar(200) 是 NULL 个人简历zhaopian varchar(200) 是 NULL 照片dianzhuzhanghao varchar(200) 是 NULL 店主账号dianzhuxingming varchar(200) 是 NULL 店主姓名表4.8 管理员表字段 类型 空 默认 注释id (主键) bigint(20) 否 主键username varchar(100) 否 用户名password varchar(100) 否 密码role varchar(100) 是 管理员 角色addtime timestamp 否 CURRENT_TIMESTAMP 新增时间表4.9 员工字段 类型 空 默认 注释id (主键) bigint(20) 否 主键addtime timestamp 否 CURRENT_TIMESTAMP 创建时间gonghao varchar(200) 否 工号mima varchar(200) 否 密码yuangongxingming varchar(200) 否 员工姓名xingbie varchar(200) 是 NULL 性别mendianmingcheng varchar(200) 是 NULL 门店名称bumen varchar(200) 是 NULL 部门shouji varchar(200) 是 NULL 手机shenfenzheng varchar(200) 是 NULL 身份证tupian varchar(200) 是 NULL 图片http://www.ppmy.cn/news/1541105.html相关文章网络资源模板--Android Studio 实现俄罗斯方块游戏App目录 
一、项目演示 
二、项目测试环境 
三、项目详情 四、完整的项目源码  一、项目演示 网络资源模板--基于Android studio 实现的俄罗斯方块游戏 二、项目测试环境 三、项目详情 
首页 这段代码实现了一个Android应用中的选择活动&amp;#xff08;SelectActivity&amp;#xff09;。以…阅读更多...HttpURLConnection和OkHttp的特点HttpURLConnection与OkHttp概述及个人倾向性分析 
在Java和Android开发中&amp;#xff0c;HttpURLConnection与OkHttp都是用于处理HTTP请求的库&amp;#xff0c;它们在功能、性能、易用性等方面各有千秋。本文将详细阐述两者的特点&amp;#xff0c;并结合个人使用经验&amp;#xff0c;表达我对哪…阅读更多...计算机网络基本架构示例2一、企业内部网络架构 在一个中型企业中&amp;#xff0c;通常会有以下的网络架构&amp;#xff1a; - 核心层&amp;#xff1a;由高性能的核心交换机组成&amp;#xff0c;负责快速转发大量数据。例如采用具有高带宽和冗余功能的三层交换机&amp;#xff0c;确保整个网络的稳定运行。它连接着各个部门的…阅读更多...Git的原理和使用（二）1. git的版本回退 之前我们也提到过&amp;#xff0c;Git 能够管理⽂件的历史版本&amp;#xff0c;这也是版本控制器重要的能⼒。如果有⼀天你发现 之前前的⼯作做的出现了很⼤的问题&amp;#xff0c;需要在某个特定的历史版本重新开始&amp;#xff0c;这个时候&amp;#xff0c;就需要版本 回退的功能…阅读更多...【Qt】信号和槽——信号和槽的概念、信号和槽的使用、信号和槽的优缺点、自定义信号和槽、信号和槽的断开文章目录 Qt1. 信号和槽的概念2. 信号和槽的使用3. 信号和槽的优缺点4. 自定义信号和槽5. 信号和槽的断开 Qt 1. 信号和槽的概念 信号是什么&amp;#xff1a; 在Linux中&amp;#xff0c;我们知道信号是一种异步的事件通知机制&amp;#xff0c;用于通知进程某个事件已经发生。它是进程间通信…阅读更多...生活中的感悟喜怒不形于色 
以前一直觉得做人要做本我&amp;#xff0c;该笑就笑该怒就怒。但慢慢发现&amp;#xff0c;这样可能不太好。 
暂且不谈别人会感知你的真实想法&amp;#xff0c;就单说一点&amp;#xff0c;表情是否会引起别人的误判&amp;#xff1f;表情除了开心和愤怒&amp;#xff0c;还有很多&amp;#xff0…阅读更多...keras的内部的模块有哪些? (自用便签)AI回答, 什么时候忘了回来看看阅读更多...LeetCode总结-滑动窗口与双指针一、定长滑动窗口 例题&amp;#xff1a; 
1456.定长子串中元音的最大数目 1263 
643.子数组最大平均数 I  
1343.大小为K且平均值大于等于阈值的子数组数目 1317 
2090.半径为k的子数组平均值 1358 
2379.得到K个黑块的最少涂色次数 1360 二、不定长滑动窗口 
不定长滑动窗口主要分…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:42 +0000</pubDate>
    </item>
    <item>
      <title>网络资源模板--Android Studio 实现俄罗斯方块游戏App</title>
      <link>https://www.ppmy.cn/news/1541104.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维网络资源模板--Android Studio 实现俄罗斯方块游戏Appnews/2025/11/1 1:18:41/目录一、项目演示二、项目测试环境三、项目详情四、完整的项目源码一、项目演示网络资源模板--基于Android studio 实现的俄罗斯方块游戏二、项目测试环境三、项目详情首页这段代码实现了一个Android应用中的选择活动（`SelectActivity`）。以下是功能总结：1. **布局和视图**：在`onCreate`方法中，设置了活动的布局，并初始化了五个`ImageView`（`grade1`至`grade5`），它们代表不同的等级选择。2. **点击监听**：为每个`ImageView`设置了点击监听器，所有等级图标的点击都会调用`onClick`方法。3. **启动新活动**：在`onClick`方法中，根据点击的视图ID，将相应的等级信息（1到5）通过`Intent`传递给`MainActivity`，然后启动这个活动。总的来说，这个活动让用户可以选择不同的等级，并将选择结果传递到主活动中。package com.example.tetris;import androidx.appcompat.app.AppCompatActivity;import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.ImageView;public class SelectActivity extends AppCompatActivity implements View.OnClickListener {ImageView grade1;ImageView grade2;ImageView grade3;ImageView grade4;ImageView grade5;@Overridepublic void onCreate(Bundle bundle) {super.onCreate(bundle);setContentView(R.layout.activity_select);this.grade1 = (ImageView) findViewById(R.id.grade1);this.grade2 = (ImageView) findViewById(R.id.grade2);this.grade3 = (ImageView) findViewById(R.id.grade3);this.grade4 = (ImageView) findViewById(R.id.grade4);this.grade5 = (ImageView) findViewById(R.id.grade5);this.grade1.setOnClickListener(this);this.grade2.setOnClickListener(this);this.grade3.setOnClickListener(this);this.grade4.setOnClickListener(this);this.grade5.setOnClickListener(this);}public void onClick(View view) {Intent intent = new Intent(this, MainActivity.class);switch (view.getId()) {case R.id.grade1:intent.putExtra("grade", 1);break;case R.id.grade2:intent.putExtra("grade", 2);break;case R.id.grade3:intent.putExtra("grade", 3);break;case R.id.grade4:intent.putExtra("grade", 4);break;case R.id.grade5:intent.putExtra("grade", 5);break;}startActivity(intent);}
}这段代码主要实现了一个简单的Tetris（俄罗斯方块）游戏的一些核心功能。以下是主要功能总结：1. **清空下一个方块列表**：- `nextTetrisList` 被清空，然后根据下一个方块的形状，将对应的颜色添加到列表中。如果位置为空，则添加0表示空白。2. **适配器设置**：- 创建 `BlockAdapter`，将 `nextTetrisList` 作为数据源并设置给下一个方块的视图，用于显示下一个即将出现的方块。3. **计时器管理**：- 创建并管理计时器，定期发送更新消息以更新游戏状态。在暂停和继续游戏时，能够启动和停止计时器。4. **游戏暂停/继续功能**：- `pause()` 方法实现了切换暂停状态，更新按钮文本和禁用/启用控制按钮。5. **方块向下移动及消行逻辑**：- `stopDown()` 方法处理方块向下移动，更新方块状态，并检查行是否满。如果满行，则增加分数，向上移动下方行，并清空顶部行。6. **游戏结束逻辑**：- 检查顶部行是否为空，若不为空则结束游戏，并更新最高分记录。7. **随机方块状态更新**：- 生成下一个随机方块和颜色，并调用方法更新下一个方块的显示。这段代码实现了俄罗斯方块游戏的基本功能，但可以考虑提高可读性、增加错误处理、模块化设计和增强用户界面反馈等改进建议。// 清空下一个方块列表this.nextTetrisList.clear();for (int i3 = 0; i3 &lt; 4; i3++) {for (int i4 = 0; i4 &lt; 4; i4++) {// 根据下一个方块的形状添加颜色到列表if (((1 &lt;&lt; i4) &amp; StateFang.shape[this.nextRand][i3]) != 0) {this.nextTetrisList.add(Integer.valueOf(this.nextRandColor)); // 添加颜色} else {this.nextTetrisList.add(0); // 空白位置}}}// 创建下一个方块的适配器，并设置给下一个方块的视图BlockAdapter blockAdapter3 = new BlockAdapter(this, this.nextTetrisList, R.layout.item_adapter);this.nextTetrisAdapter = blockAdapter3;this.nextTetrisView.setAdapter((ListAdapter) blockAdapter3); // 设置适配器// 打印当前随机形状的日志String str2 = this.TAG;Log.i(str2, this.rand + "");// 创建计时器，定时发送消息以更新游戏状态Timer timer2 = new Timer();this.timer = timer2;timer2.schedule(new TimerTask() {public void run() {MainActivity.this.handler.sendEmptyMessage(0); // 定时发送更新消息}}, 0, (long) this.timeInterval); // 设置定时任务，开始时立即执行，每隔 timeInterval 毫秒执行一次}private void pause() {// 切换暂停状态boolean z = !this.isPause;this.isPause = z;if (z) { // 如果现在是暂停状态stopTimer(); // 停止计时器this.pausebtn.setText("继续"); // 将按钮文本改为“继续”this.leftMove.setEnabled(false); // 禁用左移按钮this.rightMove.setEnabled(false); // 禁用右移按钮this.rotateMove.setEnabled(false); // 禁用旋转按钮this.downMove.setEnabled(false); // 禁用下移按钮return;}startTimer(); // 启动计时器this.pausebtn.setText("暂停"); // 将按钮文本改为“暂停”this.leftMove.setEnabled(true); // 启用左移按钮this.rightMove.setEnabled(true); // 启用右移按钮this.rotateMove.setEnabled(true); // 启用旋转按钮this.downMove.setEnabled(true); // 启用下移按钮}private void startTimer() {// 如果计时器为空，初始化计时器if (this.timer == null) {this.timer = new Timer();}// 安排一个计时任务this.timer.schedule(new TimerTask() {public void run() {MainActivity.this.handler.sendEmptyMessage(0); // 发送消息以更新游戏状态}}, 0, (long) this.timeInterval); // 从0毫秒开始，每隔timeInterval毫秒执行}private void stopTimer() {// 停止计时器Timer timer2 = this.timer;if (timer2 != null) {timer2.cancel(); // 取消计时器this.timer = null; // 将计时器设置为null}}@Overridepublic void onDestroy() {super.onDestroy();stopTimer(); // 在销毁活动时停止计时器}public void stopDown() {// 向下移动方块，处理消行逻辑int i = 3; // 从第三行开始while (true) {if (i &lt; 0) {break; // 如果行数小于0，退出循环}int i2 = this.position[0] + i; // 计算方块的当前位置if (i2 &gt;= 0 &amp;&amp; StateFang.shape[this.rand][i] != 0) { // 如果当前行有效且方块形状不为空int[] iArr = this.allBlock; // 获取所有方块的数组iArr[i2] = iArr[i2] + leftMath(StateFang.shape[this.rand][i], this.position[1]); // 更新当前行的状态for (int i3 = 0; i3 &lt; this.xSize; i3++) {// 更新当前行的颜色if (((1 &lt;&lt; i3) &amp; leftMath(StateFang.shape[this.rand][i], this.position[1])) != 0) {this.blockColor[i2][i3] = this.randColor; // 设置颜色}}}i--; // 行数递减}int i4 = this.ySize - 1; // 从最后一行开始检查while (i4 &gt;= 0) {if (this.allBlock[i4] == 1023) { // 如果该行满了this.score++; // 增加分数this.scoreTextView.setText("分数：" + this.score); // 更新分数显示for (int i5 = i4 - 1; i5 &gt;= 0; i5--) {// 向上移动方块int[] iArr2 = this.allBlock;int i6 = i5 + 1;iArr2[i6] = iArr2[i5]; // 移动行for (int i7 = 0; i7 &lt; this.xSize; i7++) {// 更新颜色int[][] iArr3 = this.blockColor;iArr3[i6][i7] = iArr3[i5][i7];}}this.allBlock[0] = 0; // 清空顶部行for (int i8 = 0; i8 &lt; this.xSize; i8++) {this.blockColor[0][i8] = 0; // 清空颜色}} else {i4--; // 行数递减}}if (this.allBlock[0] != 0) { // 如果顶部行不为空if (this.score &gt; this.highestScore) { // 如果当前分数高于最高分this.cacheUtils.getValue("highestScore" + this.grade, this.score + ""); // 更新最高分this.highestScore = this.score; // 更新最高分变量this.maxScoreTextView.setText("最高分：" + this.highestScore); // 更新显示this.scoreTextView.setText("分数：" + this.score); // 更新分数显示}gameOver(); // 结束游戏}// 更新随机方块状态this.rand = this.nextRand;this.position[0] = StateFang.initPosition[this.rand][1]; // 设置新方块的位置this.position[1] = StateFang.initPosition[this.rand][0];this.randColor = this.nextRandColor; // 设置新方块的颜色this.nextRand = this.random.nextInt(19); // 生成下一个随机方块this.nextRandColor = this.random.nextInt(5) + 1; // 生成下一个随机颜色nextTetrisShow(); // 更新下一个方块的显示Log.i(this.TAG, this.rand + ""); // 日志记录当前方块}四、完整的项目源码👇👇👇👇👇快捷获取方式👇👇👇👇👇http://www.ppmy.cn/news/1541104.html相关文章HttpURLConnection和OkHttp的特点HttpURLConnection与OkHttp概述及个人倾向性分析 
在Java和Android开发中&amp;#xff0c;HttpURLConnection与OkHttp都是用于处理HTTP请求的库&amp;#xff0c;它们在功能、性能、易用性等方面各有千秋。本文将详细阐述两者的特点&amp;#xff0c;并结合个人使用经验&amp;#xff0c;表达我对哪…阅读更多...计算机网络基本架构示例2一、企业内部网络架构 在一个中型企业中&amp;#xff0c;通常会有以下的网络架构&amp;#xff1a; - 核心层&amp;#xff1a;由高性能的核心交换机组成&amp;#xff0c;负责快速转发大量数据。例如采用具有高带宽和冗余功能的三层交换机&amp;#xff0c;确保整个网络的稳定运行。它连接着各个部门的…阅读更多...Git的原理和使用（二）1. git的版本回退 之前我们也提到过&amp;#xff0c;Git 能够管理⽂件的历史版本&amp;#xff0c;这也是版本控制器重要的能⼒。如果有⼀天你发现 之前前的⼯作做的出现了很⼤的问题&amp;#xff0c;需要在某个特定的历史版本重新开始&amp;#xff0c;这个时候&amp;#xff0c;就需要版本 回退的功能…阅读更多...【Qt】信号和槽——信号和槽的概念、信号和槽的使用、信号和槽的优缺点、自定义信号和槽、信号和槽的断开文章目录 Qt1. 信号和槽的概念2. 信号和槽的使用3. 信号和槽的优缺点4. 自定义信号和槽5. 信号和槽的断开 Qt 1. 信号和槽的概念 信号是什么&amp;#xff1a; 在Linux中&amp;#xff0c;我们知道信号是一种异步的事件通知机制&amp;#xff0c;用于通知进程某个事件已经发生。它是进程间通信…阅读更多...生活中的感悟喜怒不形于色 
以前一直觉得做人要做本我&amp;#xff0c;该笑就笑该怒就怒。但慢慢发现&amp;#xff0c;这样可能不太好。 
暂且不谈别人会感知你的真实想法&amp;#xff0c;就单说一点&amp;#xff0c;表情是否会引起别人的误判&amp;#xff1f;表情除了开心和愤怒&amp;#xff0c;还有很多&amp;#xff0…阅读更多...keras的内部的模块有哪些? (自用便签)AI回答, 什么时候忘了回来看看阅读更多...LeetCode总结-滑动窗口与双指针一、定长滑动窗口 例题&amp;#xff1a; 
1456.定长子串中元音的最大数目 1263 
643.子数组最大平均数 I  
1343.大小为K且平均值大于等于阈值的子数组数目 1317 
2090.半径为k的子数组平均值 1358 
2379.得到K个黑块的最少涂色次数 1360 二、不定长滑动窗口 
不定长滑动窗口主要分…阅读更多...阿里字节技术管理岗位面试要求在阿里巴巴等互联网公司&amp;#xff0c;技术管理岗&amp;#xff08;如技术团队负责人 TL 或 P8/P9 级别的职位&amp;#xff09;面试具有较高的技术要求和管理能力的考核。面试的问题和侧重点通常包括技术深度、架构设计、团队管理、项目推动等多方面。以下是一些常见的面试问题类型、侧重点…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:42 +0000</pubDate>
    </item>
    <item>
      <title>HttpURLConnection和OkHttp的特点</title>
      <link>https://www.ppmy.cn/news/1541103.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维HttpURLConnection和OkHttp的特点news/2025/11/1 1:18:40/HttpURLConnection与OkHttp概述及个人倾向性分析在Java和Android开发中，HttpURLConnection与OkHttp都是用于处理HTTP请求的库，它们在功能、性能、易用性等方面各有千秋。本文将详细阐述两者的特点，并结合个人使用经验，表达我对哪个库更倾向使用的看法。一、HttpURLConnection概述HttpURLConnection是Java标准库中内置的HTTP客户端，其存在于java.net包中。作为一个多用途、轻量级的HTTP客户端，HttpURLConnection提供了一套较为简洁的API，允许开发者通过URL进行网络请求。以下是对HttpURLConnection的详细分析：灵活性：HttpURLConnection由于是Java标准库的一部分，因此具有高度的灵活性。开发者可以直接操作底层的网络连接，实现各种自定义的需求。它允许开发者设置请求方法（如GET、POST）、请求头、连接超时等参数，提供了较为精细的控制。简单易用：尽管HttpURLConnection的功能强大，但其API设计相对简单，易于上手。开发者可以通过简单的几行代码，就能实现基本的网络请求功能。官方支持：作为Java标准库的一部分，HttpURLConnection得到了官方的持续支持和维护。这意味着随着Java版本的更新，HttpURLConnection也会不断改进和优化。功能限制：然而，HttpURLConnection在功能上相对有限。它不支持连接池、缓存等高级功能，需要开发者自行实现这些功能。此外，在处理大数据量或频繁的网络请求时，HttpURLConnection的性能可能不如一些第三方库。兼容性：HttpURLConnection在不同版本的Android系统上存在一些差异。在Android 2.2之前，HttpURLConnection存在一些已知的bug，如关闭InputStream会导致连接池失效等。因此，在开发Android应用时，需要注意这些兼容性问题。二、OkHttp概述OkHttp是一个独立的HTTP客户端库，它提供了比HttpURLConnection更加强大和灵活的功能。以下是对OkHttp的详细分析：强大的功能：OkHttp支持自定义的缓存策略、连接池管理、GZIP压缩等高级功能。这些功能大大提高了网络请求的性能和可靠性。OkHttp还支持同步和异步两种请求方式，方便开发者根据实际需求进行选择。易用性：OkHttp的API设计简洁明了，易于上手。开发者可以通过简单的配置和调用，就能实现复杂的网络请求功能。OkHttp还提供了丰富的错误处理和日志记录功能，方便开发者进行调试和排错。高性能：OkHttp通过连接池和复用等技术，大大降低了网络连接的开销和时间。它还支持HTTP/2和SPDY等协议，进一步提高了网络请求的速度和效率。广泛的支持：OkHttp支持Android 2.3及以上版本和Java JDK 1.7及以上版本，因此可以在不同的平台上进行开发。OkHttp还得到了谷歌的推荐和广泛使用，在社区中具有良好的口碑和影响力。扩展性：OkHttp提供了丰富的扩展点，允许开发者根据自己的需求进行定制和扩展。例如，开发者可以通过实现Interceptor接口来拦截和修改请求和响应。三、HttpURLConnection与OkHttp的对比功能对比：HttpURLConnection提供了基本的HTTP请求功能，但缺乏连接池、缓存等高级功能。OkHttp则提供了丰富的功能，如自定义缓存策略、连接池管理、GZIP压缩等，可以满足各种复杂的需求。性能对比：在处理大数据量或频繁的网络请求时，OkHttp的性能通常优于HttpURLConnection。OkHttp通过连接池和复用等技术，降低了网络连接的开销和时间。易用性对比：HttpURLConnection的API设计相对简单，但功能有限，可能需要开发者自行实现一些高级功能。OkHttp的API设计简洁明了，且提供了丰富的功能，因此更易于上手和使用。兼容性对比：HttpURLConnection在不同版本的Android系统上存在一些差异和已知的bug。OkHttp则在不同的平台上具有良好的兼容性和稳定性。四、个人使用经验及倾向性分析在多年的Java和Android开发中，我分别使用了HttpURLConnection和OkHttp这两个库进行网络请求。以下是我对这两个库的使用经验和倾向性分析：HttpURLConnection的使用经验：在早期的开发中，我主要使用HttpURLConnection进行网络请求。当时，我对网络请求的需求相对简单，主要关注功能的实现和代码的简洁性。在使用HttpURLConnection的过程中，我发现其API设计相对简单，易于上手。但是，随着需求的增加和复杂度的提高，我开始感受到HttpURLConnection在功能上的限制。例如，在处理大数据量或频繁的网络请求时，HttpURLConnection的性能和稳定性不如预期。OkHttp的使用经验：为了解决HttpURLConnection在功能和性能上的限制，我开始尝试使用OkHttp进行网络请求。在使用OkHttp的过程中，我深刻感受到了其强大的功能和优异的性能。OkHttp提供了丰富的功能，如自定义缓存策略、连接池管理、GZIP压缩等，这些功能大大提高了网络请求的性能和可靠性。同时，OkHttp的API设计简洁明了，易于上手和使用。此外，OkHttp还提供了丰富的错误处理和日志记录功能，方便我进行调试和排错。这些特性大大提高了我的开发效率和代码质量。倾向性分析：基于以上的使用经验，我更倾向于使用OkHttp进行网络请求。首先，OkHttp提供了丰富的功能和优异的性能，可以满足各种复杂的需求。在处理大数据量或频繁的网络请求时，OkHttp的性能和稳定性明显优于HttpURLConnection。其次，OkHttp的API设计简洁明了，易于上手和使用。这降低了我的学习成本和维护成本。最后，OkHttp得到了谷歌的推荐和广泛使用，在社区中具有良好的口碑和影响力。这意味着我可以获得更多的支持和资源来解决开发中遇到的问题。五、结论综上所述，HttpURLConnection和OkHttp都是用于处理HTTP请求的库，它们在功能、性能、易用性等方面各有千秋。然而，在我的个人使用经验中，OkHttp以其强大的功能、优异的性能和简洁明了的API设计赢得了我的青睐。因此，在未来的开发中，我将更倾向于使用OkHttp进行网络请求。当然，对于具体的项目而言，开发者还需要根据实际需求和技术栈来选择合适的库。http://www.ppmy.cn/news/1541103.html相关文章计算机网络基本架构示例2一、企业内部网络架构 在一个中型企业中&amp;#xff0c;通常会有以下的网络架构&amp;#xff1a; - 核心层&amp;#xff1a;由高性能的核心交换机组成&amp;#xff0c;负责快速转发大量数据。例如采用具有高带宽和冗余功能的三层交换机&amp;#xff0c;确保整个网络的稳定运行。它连接着各个部门的…阅读更多...Git的原理和使用（二）1. git的版本回退 之前我们也提到过&amp;#xff0c;Git 能够管理⽂件的历史版本&amp;#xff0c;这也是版本控制器重要的能⼒。如果有⼀天你发现 之前前的⼯作做的出现了很⼤的问题&amp;#xff0c;需要在某个特定的历史版本重新开始&amp;#xff0c;这个时候&amp;#xff0c;就需要版本 回退的功能…阅读更多...【Qt】信号和槽——信号和槽的概念、信号和槽的使用、信号和槽的优缺点、自定义信号和槽、信号和槽的断开文章目录 Qt1. 信号和槽的概念2. 信号和槽的使用3. 信号和槽的优缺点4. 自定义信号和槽5. 信号和槽的断开 Qt 1. 信号和槽的概念 信号是什么&amp;#xff1a; 在Linux中&amp;#xff0c;我们知道信号是一种异步的事件通知机制&amp;#xff0c;用于通知进程某个事件已经发生。它是进程间通信…阅读更多...生活中的感悟喜怒不形于色 
以前一直觉得做人要做本我&amp;#xff0c;该笑就笑该怒就怒。但慢慢发现&amp;#xff0c;这样可能不太好。 
暂且不谈别人会感知你的真实想法&amp;#xff0c;就单说一点&amp;#xff0c;表情是否会引起别人的误判&amp;#xff1f;表情除了开心和愤怒&amp;#xff0c;还有很多&amp;#xff0…阅读更多...keras的内部的模块有哪些? (自用便签)AI回答, 什么时候忘了回来看看阅读更多...LeetCode总结-滑动窗口与双指针一、定长滑动窗口 例题&amp;#xff1a; 
1456.定长子串中元音的最大数目 1263 
643.子数组最大平均数 I  
1343.大小为K且平均值大于等于阈值的子数组数目 1317 
2090.半径为k的子数组平均值 1358 
2379.得到K个黑块的最少涂色次数 1360 二、不定长滑动窗口 
不定长滑动窗口主要分…阅读更多...阿里字节技术管理岗位面试要求在阿里巴巴等互联网公司&amp;#xff0c;技术管理岗&amp;#xff08;如技术团队负责人 TL 或 P8/P9 级别的职位&amp;#xff09;面试具有较高的技术要求和管理能力的考核。面试的问题和侧重点通常包括技术深度、架构设计、团队管理、项目推动等多方面。以下是一些常见的面试问题类型、侧重点…阅读更多...双机架构（Dual Machine Architecture）双机架构&amp;#xff08;Dual Machine Architecture&amp;#xff09;是指利用两台服务器或计算机来实现系统的高可用性和容错能力的架构。它常用于关键任务系统中&amp;#xff0c;以保证当一台服务器出现故障时&amp;#xff0c;另一台服务器可以接管任务&amp;#xff0c;确保系统的连续运行。 
双机…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:41 +0000</pubDate>
    </item>
    <item>
      <title>计算机网络基本架构示例2</title>
      <link>https://www.ppmy.cn/news/1541102.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维计算机网络基本架构示例2news/2025/11/1 1:18:39/一、企业内部网络架构在一个中型企业中，通常会有以下的网络架构：- 核心层：由高性能的核心交换机组成，负责快速转发大量数据。例如采用具有高带宽和冗余功能的三层交换机，确保整个网络的稳定运行。它连接着各个部门的汇聚交换机。- 汇聚层：每个部门可能会有一台汇聚交换机，将来自该部门各个工作区域的接入交换机的数据进行汇总。比如研发部门的汇聚交换机，连接着该部门不同项目组的接入交换机。- 接入层：在各个办公室、工作区域分布着接入交换机，为员工的电脑、打印机等设备提供网络连接。例如每个办公室的墙上可能会有一个小型接入交换机，员工的电脑通过网线连接到这个交换机上。二、校园网络架构- 核心层：校园网络的核心通常是一台或多台大型核心交换机，它们连接着各个教学楼、图书馆、实验室等区域的汇聚交换机。这些核心交换机具有高速的数据传输能力和强大的路由功能。- 汇聚层：每个教学楼可能会有一台汇聚交换机，负责将该楼内各个教室、办公室的接入交换机的数据进行汇总。例如在教学楼的设备间里，汇聚交换机连接着各个楼层的接入交换机。- 接入层：教室、实验室和办公室内会有接入交换机，为学生和教师的电脑、投影仪等设备提供网络连接。比如在教室里，接入交换机可以连接学生的笔记本电脑和教师的教学电脑。三、数据中心网络架构- 核心层：由高端的核心路由器和交换机组成，负责高速转发大量的数据流量。这些设备通常具有极高的性能和可靠性，以确保数据中心的稳定运行。- 汇聚层：连接着服务器机柜的接入交换机和核心层设备。汇聚交换机通常具有较高的端口密度和带宽，以便连接大量的服务器。- 接入层：服务器机柜中的服务器通过接入交换机连接到网络。这些接入交换机通常具有较低的端口密度，但能够提供高速的网络连接给服务器。http://www.ppmy.cn/news/1541102.html相关文章Git的原理和使用（二）1. git的版本回退 之前我们也提到过&amp;#xff0c;Git 能够管理⽂件的历史版本&amp;#xff0c;这也是版本控制器重要的能⼒。如果有⼀天你发现 之前前的⼯作做的出现了很⼤的问题&amp;#xff0c;需要在某个特定的历史版本重新开始&amp;#xff0c;这个时候&amp;#xff0c;就需要版本 回退的功能…阅读更多...【Qt】信号和槽——信号和槽的概念、信号和槽的使用、信号和槽的优缺点、自定义信号和槽、信号和槽的断开文章目录 Qt1. 信号和槽的概念2. 信号和槽的使用3. 信号和槽的优缺点4. 自定义信号和槽5. 信号和槽的断开 Qt 1. 信号和槽的概念 信号是什么&amp;#xff1a; 在Linux中&amp;#xff0c;我们知道信号是一种异步的事件通知机制&amp;#xff0c;用于通知进程某个事件已经发生。它是进程间通信…阅读更多...生活中的感悟喜怒不形于色 
以前一直觉得做人要做本我&amp;#xff0c;该笑就笑该怒就怒。但慢慢发现&amp;#xff0c;这样可能不太好。 
暂且不谈别人会感知你的真实想法&amp;#xff0c;就单说一点&amp;#xff0c;表情是否会引起别人的误判&amp;#xff1f;表情除了开心和愤怒&amp;#xff0c;还有很多&amp;#xff0…阅读更多...keras的内部的模块有哪些? (自用便签)AI回答, 什么时候忘了回来看看阅读更多...LeetCode总结-滑动窗口与双指针一、定长滑动窗口 例题&amp;#xff1a; 
1456.定长子串中元音的最大数目 1263 
643.子数组最大平均数 I  
1343.大小为K且平均值大于等于阈值的子数组数目 1317 
2090.半径为k的子数组平均值 1358 
2379.得到K个黑块的最少涂色次数 1360 二、不定长滑动窗口 
不定长滑动窗口主要分…阅读更多...阿里字节技术管理岗位面试要求在阿里巴巴等互联网公司&amp;#xff0c;技术管理岗&amp;#xff08;如技术团队负责人 TL 或 P8/P9 级别的职位&amp;#xff09;面试具有较高的技术要求和管理能力的考核。面试的问题和侧重点通常包括技术深度、架构设计、团队管理、项目推动等多方面。以下是一些常见的面试问题类型、侧重点…阅读更多...双机架构（Dual Machine Architecture）双机架构&amp;#xff08;Dual Machine Architecture&amp;#xff09;是指利用两台服务器或计算机来实现系统的高可用性和容错能力的架构。它常用于关键任务系统中&amp;#xff0c;以保证当一台服务器出现故障时&amp;#xff0c;另一台服务器可以接管任务&amp;#xff0c;确保系统的连续运行。 
双机…阅读更多...文本数据可视化文字是传递信息最常用的载体。在当前这个信息爆炸的时代，人们接收信息的速度已经小于信息产生的速度，尤其是文本信息。当大段大段的文字摆在面前，已经很少有耐心去认真把它读完，经常是先找文中的图片来看。这一方面说明人们对图形的接受程度比枯燥的文字要高很多，另一方面…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:40 +0000</pubDate>
    </item>
    <item>
      <title>Git的原理和使用（二）</title>
      <link>https://www.ppmy.cn/news/1541101.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Git的原理和使用（二）news/2025/11/1 1:18:38/1. git的版本回退之前我们也提到过，Git 能够管理⽂件的历史版本，这也是版本控制器重要的能⼒。如果有⼀天你发现 之前前的⼯作做的出现了很⼤的问题，需要在某个特定的历史版本重新开始，这个时候，就需要版本 回退的功能了。 执⾏ git reset 命令⽤于回退版本，可以指定退回某⼀次提交的版本。要解释⼀下“回退”本质是 要将版本库中的内容进⾏回退，⼯作区或暂存区是否回退由命令参数决定：当前我们的readme文件：hello git                                           v1.0shenmengyao he yuanyiqi             v2.0git reset指令格式：git reset [--soft | --mixed | --hard] [HEAD] ，其本质是回退的是版本库的内容；如上图直接回退到第一个版本，但是我们现在想回到第二个版本的时候，指令如下：输入最开始的commit id；我们虽然进行回退到最初版本，但是依旧能够复原，主要是能够知道并使用最开始和最末尾的版本号，但是一旦服务器突然关闭或者清屏，导致我们回到最初版本之后没有后期版本的commit id；我们就使用git reflog；该指令能够看出我们的提交命令，前面的黄色部分就是commit id，虽然有点短，但是我们依旧可以使用这些数字id来回退到我们希望的版本；值得说的是，Git 的版本回退速度⾮常快，因为 Git 在内部有个指向当前分⽀（此处是master）的 HEAD 指针， refs/heads/master ⽂件⾥保存当前 master 分⽀的最新 commit id 。当我们在回退版本的时候，Git 仅仅是给 refs/heads/master 中存储⼀个特定的version，可以简单理解 成如下⽰意图所以我们的所谓版本回退仅仅是master指向不同的commit id，每一个id都对应一个git对象，里面都存的是是文件的内容；2. 撤销修改情况⼀：对于⼯作区的代码，还没有 add情况二：已经 add ，但没有 commit情况三：已经 add ，并且也 commit 了如下图所示：情况一：1、手动操作2、git checkout -- Readme如下所示：情况二：git reset HEAD Readme，回退到当前版本，就是暂存区和当前的版本库保持一致，此时只有工作区还有内容；接下来使用：git checkout --   Readme，使得工作区也变干净；情况三：git reset --hard Headme^回退到上一个版本；3.删除操作1、rm file3该命令指示将工作区中的文件进行删除；2、将该删除操作添加到暂存区中：git add file33、将该删除操作提交到版本库中：git commit -m "delete file3"简化步骤到两步：1、git rm file22、提交4.分支管理4.1 分支理解分⽀就 是科幻电影⾥⾯的平⾏宇宙，当你正在电脑前努⼒学习 C++ 的时候，另⼀个你正在另⼀个平⾏宇宙⾥ 努⼒学习 JAVA。如果两个平⾏宇宙互不⼲扰，那对现在的你也没啥影响。不过，在某个时间点，两个平⾏宇宙合并 了，结果，你既学会了 C++ ⼜学会了 JAVA对于git的树形结构，head指针指向master分支如下：head指针指向master分支，master指向当前该分支（主线）最新一次git提交的commit id（git对象的索引）上；4.2 创建分支在新创建的分支上进行提交内容，最后合并该分支；git branch//查看当前本地仓库的分支；head指针不仅可以指向master分支，也可以指向其他分支，head指向的分支才是当前工作的分支；git branch dev1、创建dev分支；此时我们的指针依旧指向的master分支；tree .git // 查看当前的分支：此时刚创建完成dev分支后，master和dev两个分支都指向的最新提交的git对象；2、切换到dev分支git checkout dev此时head指向的是dev分支；我们在dev分支中修改readme文件，添加提交操作之后，切换到master分支，观察readme文件，发现和之前的文件相比没有发生变化；接着切换到dev分支，我们的提交文件操作确实成功了，点击查看dev分支指向的idcat .git/refs/heads/dev查看当前索引所在的信息：当前分支节点和前分支节点关系如下：3、合并查看当前所在分支并确保在master分支上；合并指令：git merge dev此时我们的master里面存储的dev分支提交的id，合并之后该id进入到master里面了；4.3 删除分支git branch -d dev//我们只能在master分支上来进行删除其他分支的操作；4.4 分支冲突首先在master分支对进行修改为aaa master；其次切换到dev分支进行修改aaa dev；然后在master分支上进行提交，此时我们不知道提交完成后保留那一句？一行指令完成创建和切换分支：git checkout -b dev1此时的本地仓库的分支如下所示：开始合并：我们发现会有报错信息；上面两部分代码是冲突代码，所以才会放在特殊符号里面；git没办法帮我们解决这两部分代码，所以只能自己手动解决；在master分支上打开该文件进行删除不必要的文件，如上图所示：此时我们依旧要进行add和commit操作；此时的仓库分支如下所示：此时master分支指向合并之后最新提交的一次id；但是dev1指向的id依旧是之前dev最新提交的一次id；当出现merge冲突的时候，只能进行手动操作解决，且最后还要进行一次add和commit操作；git log --graph --pretty=oneline --abbrev-commit//该指令查看不同分支进行一些列操作的图状记录：其中红色部分是master分支；ps：to be continued！！！本文封面来自snh48的杨冰怡！！！http://www.ppmy.cn/news/1541101.html相关文章【Qt】信号和槽——信号和槽的概念、信号和槽的使用、信号和槽的优缺点、自定义信号和槽、信号和槽的断开文章目录 Qt1. 信号和槽的概念2. 信号和槽的使用3. 信号和槽的优缺点4. 自定义信号和槽5. 信号和槽的断开 Qt 1. 信号和槽的概念 信号是什么&amp;#xff1a; 在Linux中&amp;#xff0c;我们知道信号是一种异步的事件通知机制&amp;#xff0c;用于通知进程某个事件已经发生。它是进程间通信…阅读更多...生活中的感悟喜怒不形于色 
以前一直觉得做人要做本我&amp;#xff0c;该笑就笑该怒就怒。但慢慢发现&amp;#xff0c;这样可能不太好。 
暂且不谈别人会感知你的真实想法&amp;#xff0c;就单说一点&amp;#xff0c;表情是否会引起别人的误判&amp;#xff1f;表情除了开心和愤怒&amp;#xff0c;还有很多&amp;#xff0…阅读更多...keras的内部的模块有哪些? (自用便签)AI回答, 什么时候忘了回来看看阅读更多...LeetCode总结-滑动窗口与双指针一、定长滑动窗口 例题&amp;#xff1a; 
1456.定长子串中元音的最大数目 1263 
643.子数组最大平均数 I  
1343.大小为K且平均值大于等于阈值的子数组数目 1317 
2090.半径为k的子数组平均值 1358 
2379.得到K个黑块的最少涂色次数 1360 二、不定长滑动窗口 
不定长滑动窗口主要分…阅读更多...阿里字节技术管理岗位面试要求在阿里巴巴等互联网公司&amp;#xff0c;技术管理岗&amp;#xff08;如技术团队负责人 TL 或 P8/P9 级别的职位&amp;#xff09;面试具有较高的技术要求和管理能力的考核。面试的问题和侧重点通常包括技术深度、架构设计、团队管理、项目推动等多方面。以下是一些常见的面试问题类型、侧重点…阅读更多...双机架构（Dual Machine Architecture）双机架构&amp;#xff08;Dual Machine Architecture&amp;#xff09;是指利用两台服务器或计算机来实现系统的高可用性和容错能力的架构。它常用于关键任务系统中&amp;#xff0c;以保证当一台服务器出现故障时&amp;#xff0c;另一台服务器可以接管任务&amp;#xff0c;确保系统的连续运行。 
双机…阅读更多...文本数据可视化文字是传递信息最常用的载体。在当前这个信息爆炸的时代，人们接收信息的速度已经小于信息产生的速度，尤其是文本信息。当大段大段的文字摆在面前，已经很少有耐心去认真把它读完，经常是先找文中的图片来看。这一方面说明人们对图形的接受程度比枯燥的文字要高很多，另一方面…阅读更多...DBeaver + Oracle 数据库修改CLOB类型字段内容数据库中存在大量错误数据&amp;#xff0c; CLOB类型字段值需要批量修改&amp;#xff0c;因数据结构比较复杂&amp;#xff0c;无法做到使用常规的update语句。。。。 一、问题介绍 oracle数据库中&amp;#xff0c;clob类型字段&amp;#xff0c; 数据格式为 {“type”:“OOC”, …}, 如何使用一个sql…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:39 +0000</pubDate>
    </item>
    <item>
      <title>【Qt】信号和槽——信号和槽的概念、信号和槽的使用、信号和槽的优缺点、自定义信号和槽、信号和槽的断开</title>
      <link>https://www.ppmy.cn/news/1541100.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【Qt】信号和槽——信号和槽的概念、信号和槽的使用、信号和槽的优缺点、自定义信号和槽、信号和槽的断开news/2025/11/1 1:18:37/文章目录Qt1. 信号和槽的概念2. 信号和槽的使用3. 信号和槽的优缺点4. 自定义信号和槽5. 信号和槽的断开Qt1. 信号和槽的概念信号是什么：在Linux中，我们知道信号是一种异步的事件通知机制，用于通知进程某个事件已经发生。它是进程间通信的一种方式。回顾之前的信号的三个特点，信号由谁产生，信号的类型，信号所对应的触发事件。我们可以简单的理解：Qt中的信号其实和linux的类似，本质就是让用户进行交互，触发对应的交互事件。所以在Qt中，信号的详细解释：就是由于用户对窗口或控件进行了某些操作，导致窗口或控件产生了某个特定事件，这时 Qt 对应的窗口类会发出某个信号，以此对用户的操作做出反应。因此，信号的本质就是事件。‘’ 点击按钮、鼠标移动、鼠标按下、鼠标释放以及键盘输入… ‘’ 这些都是事件，Qt怎么样将这些信号事件通过不同的形式传递给使用者？通过函数来表示信号。槽是什么：槽（Slot）就是对信号响应的函数。槽就是一个函数，与一般的 C++ 函数是一样的，可以定义在类的任何位置（public、protected 或 private），可以具有任何参数，可以被重载，也可以被直接调用（但是不能有默认参数）。槽函数与一般的函数不同的是：槽函数可以与一个信号关联，当信号被发射时，关联的槽函数被自动执行。所以，在 Qt 中，用户和控件的每次交互过程称为一个事件，每个事件都会发出一个信号。Qt 中的所有控件都具有接收信号的能力，且一个控件可接收多个不同信号。对于接收到的每个信号，控件会做出相应响应动作。在 Qt 中，对信号做出的响应动作称之为槽。信号和槽是 Qt 特有的消息传输机制，能将相互独立的控件关联起来，通过信号和槽机制可关联起来，实现不同的效果。信号和槽的联系和区别：（1）信号和槽机制底层是通过函数间的相互调用实现的。每个信号都可以用函数来表示，称为信号函数；每个槽也可以用函数表示，称为槽函数。（2）信号函数和槽函数通常位于某个类中，和普通的成员函数相比，它们的特别之处在于：信号函数用 signals 关键字修饰，槽函数用 public slots、protected slots 或者 private slots 修饰。signals 和 slots 是 Qt 在 C++ 的基础上扩展的关键字，专门用来指明信号函数和槽函数；信号函数只需要声明，不需要定义（实现），而槽函数需要定义（实现）。信号函数的定义是 Qt 自动在编译程序之前生成的。编写 Qt应用程序的程序员无需关注。这种自动生成代码的机制称为元编程（Meta Programming）。这种操作在很多场景中都能见到。2. 信号和槽的使用在 Qt 中，QObject 类提供了一个静态成员函数 connect ()，该函数专门用来关联指定的信号函数和槽函数。关于 QObject，QObject 是 Qt 内置的父类。Qt 中提供的很多类都是直接或者间接继承自 QObject。connect() 函数原型：connect(constQObject*sender,constchar*signal,constQObject*receiver,constchar*method,Qt::ConnectionType type=Qt::AutoConnection)参数说明如下：sender：信号的发送者。signal：发送的信号（信号函数）。receiver：信号的接收者。method：接收信号的槽函数。type：用于指定关联方式，默认的关联方式为 Qt::AutoConnection，通常不需要手动设定。接下来我们使用Qt内置提供的信号和槽，来实现信号和槽的连接。代码示例：创建一个关闭按钮，点击该按钮，窗口关闭。我们创建QPushButton对象，并且调整该按钮的位置、字体大小，连接信号和槽，这里的信号是QPushButton::clicked，是Qt的内置信号，表示按下按钮后的事件，槽函数是内置的Widget::close，表示关闭这个窗口。connect(btn,&amp;QPushButton::clicked,this,&amp;Widget::close);可以理解为：如果我们按下btn按钮时，按钮向自己的父类Widget界面发送了一个信号，信号告知Widget应该执行close这个函数。运行Qt程序，我们点击图中的关闭窗口按钮。可以看到窗口被关闭了。3. 信号和槽的优缺点优点：松散耦合。信号发送者不需要知道发出的信号被哪个对象的槽函数接收，槽函数也不需要知道哪些信号关联了自己，Qt 的信号槽机制保证了信号与槽函数的调用。支持信号槽机制的类或者父类必须继承于 QObject 类。缺点：效率较低。与回调函数相比，信号和槽稍微慢一些，因为它们提供了更高的灵活性，尽管在实际应用程序中差别不大。通过信号调用的槽函数比直接调用的速度慢约 10 倍（这是定位信号的接收对象所需的开销；遍历所有关联；编组 / 解组传递的参数；多线程时，信号可能需要排队），这种调用速度对性能要求不是非常高的场景是可以忽略的，是可以满足绝大部分场景。4. 自定义信号和槽上面的信号的槽都是使用了内置的类型，当然我们也可以自定义我们的信号和槽函数：代码示例（自定义槽函数）：我们使用我们自己定义的closeWidget函数代替内置的Widget::close函数。自定义信号函数书注意：自定义信号函数必须写到 “signals” 下；返回值为 void，只需要声明，不需要实现；可以有参数，也可以发生重载。自定义槽函数注意：可以写在 “public slots”下或 “public”下；返回值为 void，需要声明，也需要实现；可以有参数，可以发生重载。按钮的按下事件和我们自定义的槽函数closeWidget连接，实现了关闭窗口的同时还可以在Qt的编译界面输出 " 窗口关闭 " 。运行Qt程序，并且点击关闭窗口。窗口成功关闭并且输出了语句。代码示例（自定义信号）：我们使用自己创建的信号和内置的close函数连接，发送信号的过程使用我们自己定义的槽函数。我们自定义了信号mySignal和槽函数closeWidget。将自定义槽函数closeWidget和按钮按下事件连接，槽函数触发事件为发送一个自定义信号mySignal；将自定义信号mySignal和内置函数Widget::close连接，this接收到了信号就关闭窗口。运行Qt程序，点击 “ 发送关闭窗口信号 ” 。槽函数成功发送信号，信号成功触发close内置槽函数，窗口关闭。5. 信号和槽的断开信号与槽的断开使用 disconnect 即可完成。disconnect 的用法和 connect 基本一致。断开了信号和槽的连接，无法关闭窗口了。http://www.ppmy.cn/news/1541100.html相关文章生活中的感悟喜怒不形于色 
以前一直觉得做人要做本我&amp;#xff0c;该笑就笑该怒就怒。但慢慢发现&amp;#xff0c;这样可能不太好。 
暂且不谈别人会感知你的真实想法&amp;#xff0c;就单说一点&amp;#xff0c;表情是否会引起别人的误判&amp;#xff1f;表情除了开心和愤怒&amp;#xff0c;还有很多&amp;#xff0…阅读更多...keras的内部的模块有哪些? (自用便签)AI回答, 什么时候忘了回来看看阅读更多...LeetCode总结-滑动窗口与双指针一、定长滑动窗口 例题&amp;#xff1a; 
1456.定长子串中元音的最大数目 1263 
643.子数组最大平均数 I  
1343.大小为K且平均值大于等于阈值的子数组数目 1317 
2090.半径为k的子数组平均值 1358 
2379.得到K个黑块的最少涂色次数 1360 二、不定长滑动窗口 
不定长滑动窗口主要分…阅读更多...阿里字节技术管理岗位面试要求在阿里巴巴等互联网公司&amp;#xff0c;技术管理岗&amp;#xff08;如技术团队负责人 TL 或 P8/P9 级别的职位&amp;#xff09;面试具有较高的技术要求和管理能力的考核。面试的问题和侧重点通常包括技术深度、架构设计、团队管理、项目推动等多方面。以下是一些常见的面试问题类型、侧重点…阅读更多...双机架构（Dual Machine Architecture）双机架构&amp;#xff08;Dual Machine Architecture&amp;#xff09;是指利用两台服务器或计算机来实现系统的高可用性和容错能力的架构。它常用于关键任务系统中&amp;#xff0c;以保证当一台服务器出现故障时&amp;#xff0c;另一台服务器可以接管任务&amp;#xff0c;确保系统的连续运行。 
双机…阅读更多...文本数据可视化文字是传递信息最常用的载体。在当前这个信息爆炸的时代，人们接收信息的速度已经小于信息产生的速度，尤其是文本信息。当大段大段的文字摆在面前，已经很少有耐心去认真把它读完，经常是先找文中的图片来看。这一方面说明人们对图形的接受程度比枯燥的文字要高很多，另一方面…阅读更多...DBeaver + Oracle 数据库修改CLOB类型字段内容数据库中存在大量错误数据&amp;#xff0c; CLOB类型字段值需要批量修改&amp;#xff0c;因数据结构比较复杂&amp;#xff0c;无法做到使用常规的update语句。。。。 一、问题介绍 oracle数据库中&amp;#xff0c;clob类型字段&amp;#xff0c; 数据格式为 {“type”:“OOC”, …}, 如何使用一个sql…阅读更多...011_django基于大数据的足球数据分析与可视化系统2024_096va8x0目录 
系统展示 
开发背景 
代码实现 
项目案例  
获取源码 博主介绍&amp;#xff1a;CodeMentor毕业设计领航者、全网关注者30W群落&amp;#xff0c;InfoQ特邀专栏作家、技术博客领航者、InfoQ新星培育计划导师、Web开发领域杰出贡献者&amp;#xff0c;博客领航之星、开发者头条/腾讯云/AW…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:38 +0000</pubDate>
    </item>
    <item>
      <title>生活中的感悟</title>
      <link>https://www.ppmy.cn/news/1541099.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维生活中的感悟news/2025/11/1 1:18:36/喜怒不形于色以前一直觉得做人要做本我，该笑就笑该怒就怒。但慢慢发现，这样可能不太好。暂且不谈别人会感知你的真实想法，就单说一点，表情是否会引起别人的误判？表情除了开心和愤怒，还有很多，大家的感知是不一样的，很少有人是微表情专家，能准确识别，一旦识别错误，就容易引发误会。我认识几个同事，常年表情一样，但是我们却能很好的沟通，而且很多历史上的人物也都推荐喜怒不形于色，必然是有好处的。除了喜怒不形于色，其实说话的语速最好也控制一下，最好能慢下来，一是可以把要说的内容在脑中过一遍，更有逻辑性，二是会显得更加沉稳，让大家更愿意倾听。至于要不要做，完全看个人，有人觉得太麻烦、太不本我，人活得要开心，这也挺好的。有的人觉得要变一变，尝试一下也不错。人情我喜欢计算机的一个原因是我可以和机器打交道，这比和人打交道简单、直接的多。和人打交道需要有很多需要思考、拿捏的地方，而我总感觉拿捏不准。但人是群居动物，总要和别人有交互，也少不了相互帮助。有些事情可以用钱解决，有些事情不太好用钱解决，或者用一定的钱并不能很好的解决。这时候就需要用到人情。人情是要还的，无论大小，总得还，这个和关系好不好没关系，主要是个公平问题。我妈妈做的就比较好。尽量不要欠很难偿还的人情，别人请你吃饭你回请，这个很简单，但如果让别人帮你摆平了很大的一件事情，人情怎么还就得好好思考了。尤其是人家在意这件事情，可能就强绑定了。不立人设，沉默是金不主动给人建议，学会惜墨如金。如果有人咨询，就正常回答，不必扩展，尽量不要给自己立人设。举个例子，如果有人有问题，正好你在某本书里看过，可以直接说这块知识，不需要提看过什么什么书、看过多少书。大部分人都普普通通，即使比别人懂一些，但可能有限，多懂的这部分也无法带来境界的完全跨越。而且人设是一种预期，凡人不可能不出错的，没有人设，做错了，可能笑笑就过去了，人非圣贤孰能无过。但是有了人设就不一样了，会和预期形成鲜明的反差，招来反噬。其实可以看看无论是李佳琦还是董宇辉，事情比较大的时候都是和大家预期不一致的时候。感觉不立人设，沉默是金，要求的事平常心，内心强大。不自以为是，谦虚的听取所有意见不自以为是、心胸广阔，谦虚的听取所有的意见。没有人会是永远正确的，包括自己。和你同层级的人，如同事、夫妻等，大家的水平大致上相差不多，倾听才能获取到更优的方案。和领导沟通，大概率领导的认识会更深刻，有助于自己的成长。**只有倾听才能避免故步自封。**至于听到的信息是否正确，需要自己再判断，但这是次一级的事情了。及时解决问题有些问题可能解决起来很困难，或者根本没思路，这些都不是问题，我们要做的第一点是直面问题，不当鸵鸟。虽然后期想明白了再处理可能会有更完善的方案，但是很多事情是将时效性的，或者时效性比最终的解决更重要，因为时效性可能代表了态度。所以有时候一些小事，但不及时处理可能会发展成大事，在这个基础上，就直接干就行，虽然处理的粗糙一点，但能避免变成大事。而且直面困难也是勇气的体现。培养子女怎么培养子女我也没有完全搞明白。我希望子女能够健康成长，希望他们有好的性格（坚韧、勤奋、正气、乐观），希望他们能明事理，最后希望他们能有人生要追求的目标。健康和性格很大程度来自于父母的基因底色，更偏向于一种无形中的影响。事理则是有形的，需要父母自己先明事理，然后能够将这些内容真正的教授给孩子，这些事理能帮他们避免走很多弯路，是很好的。http://www.ppmy.cn/news/1541099.html相关文章keras的内部的模块有哪些? (自用便签)AI回答, 什么时候忘了回来看看阅读更多...LeetCode总结-滑动窗口与双指针一、定长滑动窗口 例题&amp;#xff1a; 
1456.定长子串中元音的最大数目 1263 
643.子数组最大平均数 I  
1343.大小为K且平均值大于等于阈值的子数组数目 1317 
2090.半径为k的子数组平均值 1358 
2379.得到K个黑块的最少涂色次数 1360 二、不定长滑动窗口 
不定长滑动窗口主要分…阅读更多...阿里字节技术管理岗位面试要求在阿里巴巴等互联网公司&amp;#xff0c;技术管理岗&amp;#xff08;如技术团队负责人 TL 或 P8/P9 级别的职位&amp;#xff09;面试具有较高的技术要求和管理能力的考核。面试的问题和侧重点通常包括技术深度、架构设计、团队管理、项目推动等多方面。以下是一些常见的面试问题类型、侧重点…阅读更多...双机架构（Dual Machine Architecture）双机架构&amp;#xff08;Dual Machine Architecture&amp;#xff09;是指利用两台服务器或计算机来实现系统的高可用性和容错能力的架构。它常用于关键任务系统中&amp;#xff0c;以保证当一台服务器出现故障时&amp;#xff0c;另一台服务器可以接管任务&amp;#xff0c;确保系统的连续运行。 
双机…阅读更多...文本数据可视化文字是传递信息最常用的载体。在当前这个信息爆炸的时代，人们接收信息的速度已经小于信息产生的速度，尤其是文本信息。当大段大段的文字摆在面前，已经很少有耐心去认真把它读完，经常是先找文中的图片来看。这一方面说明人们对图形的接受程度比枯燥的文字要高很多，另一方面…阅读更多...DBeaver + Oracle 数据库修改CLOB类型字段内容数据库中存在大量错误数据&amp;#xff0c; CLOB类型字段值需要批量修改&amp;#xff0c;因数据结构比较复杂&amp;#xff0c;无法做到使用常规的update语句。。。。 一、问题介绍 oracle数据库中&amp;#xff0c;clob类型字段&amp;#xff0c; 数据格式为 {“type”:“OOC”, …}, 如何使用一个sql…阅读更多...011_django基于大数据的足球数据分析与可视化系统2024_096va8x0目录 
系统展示 
开发背景 
代码实现 
项目案例  
获取源码 博主介绍&amp;#xff1a;CodeMentor毕业设计领航者、全网关注者30W群落&amp;#xff0c;InfoQ特邀专栏作家、技术博客领航者、InfoQ新星培育计划导师、Web开发领域杰出贡献者&amp;#xff0c;博客领航之星、开发者头条/腾讯云/AW…阅读更多...Hbase 几种scan方式在 HBase 中&amp;#xff0c;有多种方式进行数据扫描&amp;#xff08;scan&amp;#xff09;&amp;#xff0c;每种方式具有不同的功能和用途。下面是几种常用的 HBase 扫描方式&amp;#xff1a; 
1. 全表扫描&amp;#xff08;Full Table Scan&amp;#xff09; 描述&amp;#xff1a;这是最基本的扫描方式&amp;#xff…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:37 +0000</pubDate>
    </item>
    <item>
      <title>keras的内部的模块有哪些? (自用便签)</title>
      <link>https://www.ppmy.cn/news/1541098.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维keras的内部的模块有哪些? (自用便签)news/2025/11/1 1:18:35/AI回答, 什么时候忘了回来看看http://www.ppmy.cn/news/1541098.html相关文章LeetCode总结-滑动窗口与双指针一、定长滑动窗口 例题&amp;#xff1a; 
1456.定长子串中元音的最大数目 1263 
643.子数组最大平均数 I  
1343.大小为K且平均值大于等于阈值的子数组数目 1317 
2090.半径为k的子数组平均值 1358 
2379.得到K个黑块的最少涂色次数 1360 二、不定长滑动窗口 
不定长滑动窗口主要分…阅读更多...阿里字节技术管理岗位面试要求在阿里巴巴等互联网公司&amp;#xff0c;技术管理岗&amp;#xff08;如技术团队负责人 TL 或 P8/P9 级别的职位&amp;#xff09;面试具有较高的技术要求和管理能力的考核。面试的问题和侧重点通常包括技术深度、架构设计、团队管理、项目推动等多方面。以下是一些常见的面试问题类型、侧重点…阅读更多...双机架构（Dual Machine Architecture）双机架构&amp;#xff08;Dual Machine Architecture&amp;#xff09;是指利用两台服务器或计算机来实现系统的高可用性和容错能力的架构。它常用于关键任务系统中&amp;#xff0c;以保证当一台服务器出现故障时&amp;#xff0c;另一台服务器可以接管任务&amp;#xff0c;确保系统的连续运行。 
双机…阅读更多...文本数据可视化文字是传递信息最常用的载体。在当前这个信息爆炸的时代，人们接收信息的速度已经小于信息产生的速度，尤其是文本信息。当大段大段的文字摆在面前，已经很少有耐心去认真把它读完，经常是先找文中的图片来看。这一方面说明人们对图形的接受程度比枯燥的文字要高很多，另一方面…阅读更多...DBeaver + Oracle 数据库修改CLOB类型字段内容数据库中存在大量错误数据&amp;#xff0c; CLOB类型字段值需要批量修改&amp;#xff0c;因数据结构比较复杂&amp;#xff0c;无法做到使用常规的update语句。。。。 一、问题介绍 oracle数据库中&amp;#xff0c;clob类型字段&amp;#xff0c; 数据格式为 {“type”:“OOC”, …}, 如何使用一个sql…阅读更多...011_django基于大数据的足球数据分析与可视化系统2024_096va8x0目录 
系统展示 
开发背景 
代码实现 
项目案例  
获取源码 博主介绍&amp;#xff1a;CodeMentor毕业设计领航者、全网关注者30W群落&amp;#xff0c;InfoQ特邀专栏作家、技术博客领航者、InfoQ新星培育计划导师、Web开发领域杰出贡献者&amp;#xff0c;博客领航之星、开发者头条/腾讯云/AW…阅读更多...Hbase 几种scan方式在 HBase 中&amp;#xff0c;有多种方式进行数据扫描&amp;#xff08;scan&amp;#xff09;&amp;#xff0c;每种方式具有不同的功能和用途。下面是几种常用的 HBase 扫描方式&amp;#xff1a; 
1. 全表扫描&amp;#xff08;Full Table Scan&amp;#xff09; 描述&amp;#xff1a;这是最基本的扫描方式&amp;#xff…阅读更多...ruoyi同时支持mysql+sqlserver+oracle+postgresql需求背景 
最近需要一个小demo，项目中需要同时连接sqlserver和mysql数据库。 操作教程 
1、pom.xml 
-- 修改common/pom.xml&lt;!-- 动态数据源 --&gt;
&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;/groupId&gt;&lt;artifactId&gt;dynamic-datasource-spring-boot-star…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:36 +0000</pubDate>
    </item>
    <item>
      <title>LeetCode总结-滑动窗口与双指针</title>
      <link>https://www.ppmy.cn/news/1541096.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维LeetCode总结-滑动窗口与双指针news/2025/11/1 1:18:34/一、定长滑动窗口例题：1456.定长子串中元音的最大数目 1263643.子数组最大平均数 I1343.大小为K且平均值大于等于阈值的子数组数目 13172090.半径为k的子数组平均值 13582379.得到K个黑块的最少涂色次数 1360二、不定长滑动窗口不定长滑动窗口主要分为三类：求最长子数组，求最短子数组，求子数组个数2.1 求最长/最大一般题目都有至多的要求。最多出现一次，可以用boolean数组代替hashset；最多出现两次及以上，可以用int数组代替hashset。s由英文字母、数字、符号和空格组成，数组长度为128；s仅由小写英文字母组成，数组长度为26。例题：3.无重复字符的最长子串3090.每个字符最多出现两次的最长子字符串  13291493.删掉一个元素以后全为1的最长子数组  1423http://www.ppmy.cn/news/1541096.html相关文章阿里字节技术管理岗位面试要求在阿里巴巴等互联网公司&amp;#xff0c;技术管理岗&amp;#xff08;如技术团队负责人 TL 或 P8/P9 级别的职位&amp;#xff09;面试具有较高的技术要求和管理能力的考核。面试的问题和侧重点通常包括技术深度、架构设计、团队管理、项目推动等多方面。以下是一些常见的面试问题类型、侧重点…阅读更多...双机架构（Dual Machine Architecture）双机架构&amp;#xff08;Dual Machine Architecture&amp;#xff09;是指利用两台服务器或计算机来实现系统的高可用性和容错能力的架构。它常用于关键任务系统中&amp;#xff0c;以保证当一台服务器出现故障时&amp;#xff0c;另一台服务器可以接管任务&amp;#xff0c;确保系统的连续运行。 
双机…阅读更多...文本数据可视化文字是传递信息最常用的载体。在当前这个信息爆炸的时代，人们接收信息的速度已经小于信息产生的速度，尤其是文本信息。当大段大段的文字摆在面前，已经很少有耐心去认真把它读完，经常是先找文中的图片来看。这一方面说明人们对图形的接受程度比枯燥的文字要高很多，另一方面…阅读更多...DBeaver + Oracle 数据库修改CLOB类型字段内容数据库中存在大量错误数据&amp;#xff0c; CLOB类型字段值需要批量修改&amp;#xff0c;因数据结构比较复杂&amp;#xff0c;无法做到使用常规的update语句。。。。 一、问题介绍 oracle数据库中&amp;#xff0c;clob类型字段&amp;#xff0c; 数据格式为 {“type”:“OOC”, …}, 如何使用一个sql…阅读更多...011_django基于大数据的足球数据分析与可视化系统2024_096va8x0目录 
系统展示 
开发背景 
代码实现 
项目案例  
获取源码 博主介绍&amp;#xff1a;CodeMentor毕业设计领航者、全网关注者30W群落&amp;#xff0c;InfoQ特邀专栏作家、技术博客领航者、InfoQ新星培育计划导师、Web开发领域杰出贡献者&amp;#xff0c;博客领航之星、开发者头条/腾讯云/AW…阅读更多...Hbase 几种scan方式在 HBase 中&amp;#xff0c;有多种方式进行数据扫描&amp;#xff08;scan&amp;#xff09;&amp;#xff0c;每种方式具有不同的功能和用途。下面是几种常用的 HBase 扫描方式&amp;#xff1a; 
1. 全表扫描&amp;#xff08;Full Table Scan&amp;#xff09; 描述&amp;#xff1a;这是最基本的扫描方式&amp;#xff…阅读更多...ruoyi同时支持mysql+sqlserver+oracle+postgresql需求背景 
最近需要一个小demo，项目中需要同时连接sqlserver和mysql数据库。 操作教程 
1、pom.xml 
-- 修改common/pom.xml&lt;!-- 动态数据源 --&gt;
&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;/groupId&gt;&lt;artifactId&gt;dynamic-datasource-spring-boot-star…阅读更多...音频分割：长语音音频 分割为 短语音音频 - python 实现在做语音任务时&amp;#xff0c;有是会用到的语音音频是长音频&amp;#xff0c;这就需要我们将长音频分割为短音频。 该示例将声音的音量和静默时间结合作为语音的分割条件。 使用音量和静默时间结合的分割条件&amp;#xff0c;能够比较好的进行自然断句&amp;#xff0c;不会话语没有说完就切断…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:34 +0000</pubDate>
    </item>
    <item>
      <title>阿里字节技术管理岗位面试要求</title>
      <link>https://www.ppmy.cn/news/1541095.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维阿里字节技术管理岗位面试要求news/2025/11/1 1:18:32/在阿里巴巴等互联网公司，技术管理岗（如技术团队负责人 TL 或 P8/P9 级别的职位）面试具有较高的技术要求和管理能力的考核。面试的问题和侧重点通常包括技术深度、架构设计、团队管理、项目推动等多方面。以下是一些常见的面试问题类型、侧重点以及面试技巧。面试常见问题类型技术架构设计设计一个高可用、高并发的系统架构，如何确保服务的扩展性、可维护性。大规模系统的性能优化策略，如何从架构角度提升系统性能。微服务架构设计，如何拆分单体应用，如何处理服务间的依赖和调用问题。数据存储与数据库优化设计，如何设计分布式存储系统，如何保障数据一致性。算法与数据结构算法题目，如常见的排序、查找、图的遍历、动态规划等经典题目。数据结构设计与应用场景，如哈希表、链表、队列、栈、二叉树、红黑树等。如何在实际项目中应用算法解决性能瓶颈，例如数据库的查询优化，缓存策略设计。项目管理与团队领导如何带领团队完成一个大型复杂项目的从0到1的过程。在项目进展受阻时，如何协调资源、解决冲突，推动项目顺利进行。如何进行人员培养和梯队建设，如何激励团队成员提高技术能力。如何制定合理的项目目标，分配任务，并监控执行进度。跨部门协作与沟通能力如何处理与其他技术团队的协作问题，跨部门资源的争取和协调。面对需求方不断变化的需求，如何处理好产品、运营和技术团队的冲突。如何与上级汇报、沟通，如何与下属进行任务分配和绩效管理。业务理解与技术结合如何通过技术方案支撑业务增长，如何平衡业务需求与技术实现的复杂度。针对某个特定业务场景设计解决方案，例如电商平台的秒杀系统如何设计。如何结合技术创新帮助公司实现业务的可持续增长。故障处理与排查讨论一次生产事故，你如何进行定位、分析和处理，如何防止问题复现。在系统出现大规模故障时的应急处理预案设计与落地。技术趋势与架构选型如何看待当前的技术趋势，如云原生、容器化、DevOps、区块链等技术的实际应用场景。针对某些特定技术选型（如数据库、缓存系统），如何评估其优缺点，选择合适的解决方案。面试中的重点考察领域技术深度和广度面试者需要展示出对技术的深刻理解，尤其是对于大规模分布式系统的设计经验。技术管理岗不仅仅要求单一领域的精通，还需要具备广泛的技术知识，能够在不同场景下做出合理的技术选型。解决问题的思路与能力面试官会通过具体的技术问题和实际场景问题，考察你的分析能力、决策能力，以及在复杂情况下的应对方式。如何拆解问题，逐步解决，是考核面试者逻辑思维和解决问题能力的关键。项目经验与结果导向面试官会特别关注候选人过去的项目经验，尤其是在关键项目中的角色、贡献和最终结果。候选人不仅需要描述项目的技术实现，还要展示项目带来的业务价值、团队成长等影响。领导力与管理能力作为技术管理岗，领导力至关重要。如何带领技术团队完成目标，如何激发团队士气，以及如何进行团队人才的培养，都是考核的重点。对业务的理解仅仅拥有技术能力是不够的，互联网公司的技术管理岗要求候选人对公司业务有深入理解，能够站在公司战略高度思考技术方案，确保技术推动业务增长。面试技巧展示真实项目经验在回答问题时，尽量通过自己真实经历的项目进行讲解，而不是泛泛而谈。突出自己在其中的贡献，以及项目的最终成效。强调技术方案的设计思路、遇到的挑战和最终结果，尤其是如何解决技术与业务的平衡问题。逻辑清晰、条理分明在回答问题时，要思路清晰，结构化表达。可以遵循"问题背景-解决方案-预期结果-实际结果"的逻辑顺序，帮助面试官理解你的思路。展现管理与领导力强调你在团队管理和项目推动中的角色。尤其是在复杂项目中的领导力，如如何调动资源、解决团队间的分歧，以及推动项目最终交付。展现业务敏感度在回答技术问题时，不能只关注技术本身，还要思考技术背后的业务逻辑。展示你对公司业务的深刻理解，以及如何通过技术推动业务发展。准备系统设计和架构题这类问题在技术管理岗面试中尤为常见。可以准备几个你比较熟悉的大型系统架构案例，思考其性能优化、容错机制、扩展性设计等方面。相关案例阿里巴巴的P8面试：重点考察候选人在大规模分布式系统设计上的能力。面试官可能会让你设计一个淘宝的推荐系统，要求在高并发的情况下保证实时性和稳定性。你需要展示对微服务架构、分布式存储、缓存设计的深刻理解。腾讯的技术团队管理岗面试：腾讯非常重视团队合作和跨部门协作能力。在面试中可能会有场景题，比如如何在公司多个业务团队之间调和技术冲突，推动项目上线。这考验候选人的沟通和管理能力。字节跳动的TL面试：注重候选人对技术趋势的理解和项目推动能力。字节跳动的技术面试往往涉及如何结合大数据、AI等前沿技术来解决业务问题，要求你具备较强的技术创新能力和对前沿技术的敏锐度。http://www.ppmy.cn/news/1541095.html相关文章双机架构（Dual Machine Architecture）双机架构&amp;#xff08;Dual Machine Architecture&amp;#xff09;是指利用两台服务器或计算机来实现系统的高可用性和容错能力的架构。它常用于关键任务系统中&amp;#xff0c;以保证当一台服务器出现故障时&amp;#xff0c;另一台服务器可以接管任务&amp;#xff0c;确保系统的连续运行。 
双机…阅读更多...文本数据可视化文字是传递信息最常用的载体。在当前这个信息爆炸的时代，人们接收信息的速度已经小于信息产生的速度，尤其是文本信息。当大段大段的文字摆在面前，已经很少有耐心去认真把它读完，经常是先找文中的图片来看。这一方面说明人们对图形的接受程度比枯燥的文字要高很多，另一方面…阅读更多...DBeaver + Oracle 数据库修改CLOB类型字段内容数据库中存在大量错误数据&amp;#xff0c; CLOB类型字段值需要批量修改&amp;#xff0c;因数据结构比较复杂&amp;#xff0c;无法做到使用常规的update语句。。。。 一、问题介绍 oracle数据库中&amp;#xff0c;clob类型字段&amp;#xff0c; 数据格式为 {“type”:“OOC”, …}, 如何使用一个sql…阅读更多...011_django基于大数据的足球数据分析与可视化系统2024_096va8x0目录 
系统展示 
开发背景 
代码实现 
项目案例  
获取源码 博主介绍&amp;#xff1a;CodeMentor毕业设计领航者、全网关注者30W群落&amp;#xff0c;InfoQ特邀专栏作家、技术博客领航者、InfoQ新星培育计划导师、Web开发领域杰出贡献者&amp;#xff0c;博客领航之星、开发者头条/腾讯云/AW…阅读更多...Hbase 几种scan方式在 HBase 中&amp;#xff0c;有多种方式进行数据扫描&amp;#xff08;scan&amp;#xff09;&amp;#xff0c;每种方式具有不同的功能和用途。下面是几种常用的 HBase 扫描方式&amp;#xff1a; 
1. 全表扫描&amp;#xff08;Full Table Scan&amp;#xff09; 描述&amp;#xff1a;这是最基本的扫描方式&amp;#xff…阅读更多...ruoyi同时支持mysql+sqlserver+oracle+postgresql需求背景 
最近需要一个小demo，项目中需要同时连接sqlserver和mysql数据库。 操作教程 
1、pom.xml 
-- 修改common/pom.xml&lt;!-- 动态数据源 --&gt;
&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;/groupId&gt;&lt;artifactId&gt;dynamic-datasource-spring-boot-star…阅读更多...音频分割：长语音音频 分割为 短语音音频 - python 实现在做语音任务时&amp;#xff0c;有是会用到的语音音频是长音频&amp;#xff0c;这就需要我们将长音频分割为短音频。 该示例将声音的音量和静默时间结合作为语音的分割条件。 使用音量和静默时间结合的分割条件&amp;#xff0c;能够比较好的进行自然断句&amp;#xff0c;不会话语没有说完就切断…阅读更多...华为od面试手撕代码真题题型3——二分查找二分查找 
1 非减序列查找目标值 思路&amp;#xff1a;直接使用闭区间二分查找&amp;#xff0c;闭区间二分查找优点&amp;#xff0c;若查找的数不在&amp;#xff0c;返回的是插入位置 
public int searchBin20241020(int[] nums, int target){int n  nums.length;int left  0, right  n - 1;whi…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:33 +0000</pubDate>
    </item>
    <item>
      <title>双机架构（Dual Machine Architecture）</title>
      <link>https://www.ppmy.cn/news/1541094.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维双机架构（Dual Machine Architecture）news/2025/11/1 1:18:31/双机架构（Dual Machine Architecture）是指利用两台服务器或计算机来实现系统的高可用性和容错能力的架构。它常用于关键任务系统中，以保证当一台服务器出现故障时，另一台服务器可以接管任务，确保系统的连续运行。双机架构的常见类型主备模式（Active/Standby）在主备模式下，通常有一台服务器处于主服务器（Active）的状态，处理所有的业务和请求；另一台服务器处于备服务器（Standby）状态，不处理业务，只进行同步。当主服务器发生故障时，备服务器会自动接管任务，保证系统的正常运行。特点：容错能力强：可以快速切换到备服务器，减少宕机时间。资源利用率低：备服务器大部分时间处于待机状态，资源利用不高。主主模式（Active/Active）在主主模式下，两台服务器都处于活动状态，共同处理业务和请求。这种模式下，负载可以均衡分配到两台服务器上，充分利用硬件资源。当其中一台服务器发生故障时，另一台服务器会接管它的业务。特点：资源利用率高：两台服务器同时工作，负载均衡。切换速度快：一台服务器故障时，另一台已经在工作，可以迅速接管任务。双机热备份（Hot Standby）这是主备模式的一种变体，备服务器会实时同步主服务器的数据，并且可以快速接管主服务器的任务。特点：快速切换：因为备服务器时刻保持同步，可以在主服务器出现故障后立即接管。实时同步：主备之间的数据更新是实时进行的，确保数据的一致性。双机冷备份（Cold Standby）在冷备份模式中，备服务器在正常情况下处于关闭状态，只有当主服务器发生故障时才会手动启动备服务器。特点：成本低：备服务器在故障发生前不需要运行，节省资源。切换慢：故障发生时需要手动干预，可能导致较长的宕机时间。双机架构的关键要素心跳检测（Heartbeat）双机架构通常使用心跳机制来监测两台服务器的状态。主服务器和备服务器会通过网络定期交换“心跳信号”，以确认彼此的运行状态。如果备服务器检测不到主服务器的心跳信号，就会认为主服务器发生故障，从而自动接管业务。数据同步为了确保备服务器接管业务时数据一致，主服务器和备服务器需要进行数据同步。常见的同步机制有：实时同步：通过同步服务（如 DRBD）或数据库复制，实时将主服务器的数据更新到备服务器。定时同步：定期将主服务器的数据备份并传输到备服务器。故障切换（Failover）当主服务器发生故障时，系统会自动切换到备服务器，确保业务连续性。故障切换通常是自动化的，不需要人工干预。切换后，备服务器会承担主服务器的所有职责，直到主服务器恢复。恢复切换（Failback）当主服务器恢复正常后，可以将业务切换回主服务器，这个过程称为恢复切换。恢复切换可以是自动的，也可以是手动执行的。双机架构的应用场景数据库系统在双机架构下，主服务器处理数据库的读写请求，备服务器实时同步数据。当主服务器发生故障时，备服务器可以快速接管数据库服务，保证数据不丢失且服务不中断。Web 服务器双机架构可以用于 Web 应用的高可用性配置，确保网站即使在服务器故障的情况下仍然保持在线状态。通常会通过负载均衡器和双机架构共同实现 Web 服务的冗余。企业核心业务系统金融系统、ERP 系统等对可用性要求极高的应用场景中，双机架构可以为业务的连续性提供保障。电信系统电信运营商的核心系统采用双机架构以确保通信网络的高可用性和容错能力。双机架构的优缺点优点高可用性：即使发生单点故障，系统仍然可以正常运行。自动切换：大多数情况下可以实现故障的自动切换，减少人为干预和宕机时间。数据安全：通过数据同步机制，确保备服务器始终拥有最新数据。缺点成本高：需要两台服务器，增加了硬件成本和维护成本。配置复杂：为了实现高可用性，需要配置复杂的心跳检测、数据同步和切换策略。资源浪费（主备模式）：备服务器大部分时间处于待机状态，无法充分利用其计算资源。总结双机架构是一种常见的高可用性解决方案，广泛应用于数据库、Web 服务、金融等需要保证业务连续性的场景。它通过心跳检测、数据同步、故障切换等机制，确保当一台服务器出现问题时，另一台服务器能够立即接管，最大限度减少宕机时间。http://www.ppmy.cn/news/1541094.html相关文章文本数据可视化文字是传递信息最常用的载体。在当前这个信息爆炸的时代，人们接收信息的速度已经小于信息产生的速度，尤其是文本信息。当大段大段的文字摆在面前，已经很少有耐心去认真把它读完，经常是先找文中的图片来看。这一方面说明人们对图形的接受程度比枯燥的文字要高很多，另一方面…阅读更多...DBeaver + Oracle 数据库修改CLOB类型字段内容数据库中存在大量错误数据&amp;#xff0c; CLOB类型字段值需要批量修改&amp;#xff0c;因数据结构比较复杂&amp;#xff0c;无法做到使用常规的update语句。。。。 一、问题介绍 oracle数据库中&amp;#xff0c;clob类型字段&amp;#xff0c; 数据格式为 {“type”:“OOC”, …}, 如何使用一个sql…阅读更多...011_django基于大数据的足球数据分析与可视化系统2024_096va8x0目录 
系统展示 
开发背景 
代码实现 
项目案例  
获取源码 博主介绍&amp;#xff1a;CodeMentor毕业设计领航者、全网关注者30W群落&amp;#xff0c;InfoQ特邀专栏作家、技术博客领航者、InfoQ新星培育计划导师、Web开发领域杰出贡献者&amp;#xff0c;博客领航之星、开发者头条/腾讯云/AW…阅读更多...Hbase 几种scan方式在 HBase 中&amp;#xff0c;有多种方式进行数据扫描&amp;#xff08;scan&amp;#xff09;&amp;#xff0c;每种方式具有不同的功能和用途。下面是几种常用的 HBase 扫描方式&amp;#xff1a; 
1. 全表扫描&amp;#xff08;Full Table Scan&amp;#xff09; 描述&amp;#xff1a;这是最基本的扫描方式&amp;#xff…阅读更多...ruoyi同时支持mysql+sqlserver+oracle+postgresql需求背景 
最近需要一个小demo，项目中需要同时连接sqlserver和mysql数据库。 操作教程 
1、pom.xml 
-- 修改common/pom.xml&lt;!-- 动态数据源 --&gt;
&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;/groupId&gt;&lt;artifactId&gt;dynamic-datasource-spring-boot-star…阅读更多...音频分割：长语音音频 分割为 短语音音频 - python 实现在做语音任务时&amp;#xff0c;有是会用到的语音音频是长音频&amp;#xff0c;这就需要我们将长音频分割为短音频。 该示例将声音的音量和静默时间结合作为语音的分割条件。 使用音量和静默时间结合的分割条件&amp;#xff0c;能够比较好的进行自然断句&amp;#xff0c;不会话语没有说完就切断…阅读更多...华为od面试手撕代码真题题型3——二分查找二分查找 
1 非减序列查找目标值 思路&amp;#xff1a;直接使用闭区间二分查找&amp;#xff0c;闭区间二分查找优点&amp;#xff0c;若查找的数不在&amp;#xff0c;返回的是插入位置 
public int searchBin20241020(int[] nums, int target){int n  nums.length;int left  0, right  n - 1;whi…阅读更多...腾讯云上基于 Apache Pulsar 的大规模生产实践导语 
Pulsar Meetup 2024 北京站已经成功落下帷幕。在本次盛会中&amp;#xff0c;腾讯云的高级工程师韩明泽和王震江为与会者带来了精彩的演讲。他们围绕多网接入、集群迁移以及高可用最佳实践这三大核心议题&amp;#xff0c;深入剖析了《腾讯云上基于 Apache Pulsar 的大规模生产实践…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:32 +0000</pubDate>
    </item>
    <item>
      <title>文本数据可视化</title>
      <link>https://www.ppmy.cn/news/1541093.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维文本数据可视化news/2025/11/1 1:18:30/文字是传递信息最常用的载体。在当前这个信息爆炸的时代，人们接收信息的速度已经小于信息产生的速度，尤其是文本信息。当大段大段的文字摆在面前，已经很少有耐心去认真把它读完，经常是先找文中的图片来看。这一方面说明人们对图形的接受程度比枯燥的文字要高很多，另一方面说明人们急需一种更高效的信息接收方式，文本可视化正是解药良方。「一图胜千言」我们从小就有体会，教材里的解释图、自己笔记里总结的知识结构图，一直到现在经常用的思维导图等，其实都是简单、实用的文本可视化。本文将简单介绍文本可视化的基础概念，然后重点通过各类文本可视化的案例来阐述可视化之美（多图，不过为了学到知识这点流量不算什么）。为什么要文本数据可视化虽然一般这种讲必要性的段落很多人都略过不看，虽然文本可视化的必要性大家用脚趾头估计都能想到，但我还是稍微说一说吧。文本可视化的作用有以下四点：理解 - 理解主旨组织 - 组织、分类信息比较 - 对比文档信息关联 - 关联文本的 pattern 和其他信息http://www.ppmy.cn/news/1541093.html相关文章DBeaver + Oracle 数据库修改CLOB类型字段内容数据库中存在大量错误数据&amp;#xff0c; CLOB类型字段值需要批量修改&amp;#xff0c;因数据结构比较复杂&amp;#xff0c;无法做到使用常规的update语句。。。。 一、问题介绍 oracle数据库中&amp;#xff0c;clob类型字段&amp;#xff0c; 数据格式为 {“type”:“OOC”, …}, 如何使用一个sql…阅读更多...011_django基于大数据的足球数据分析与可视化系统2024_096va8x0目录 
系统展示 
开发背景 
代码实现 
项目案例  
获取源码 博主介绍&amp;#xff1a;CodeMentor毕业设计领航者、全网关注者30W群落&amp;#xff0c;InfoQ特邀专栏作家、技术博客领航者、InfoQ新星培育计划导师、Web开发领域杰出贡献者&amp;#xff0c;博客领航之星、开发者头条/腾讯云/AW…阅读更多...Hbase 几种scan方式在 HBase 中&amp;#xff0c;有多种方式进行数据扫描&amp;#xff08;scan&amp;#xff09;&amp;#xff0c;每种方式具有不同的功能和用途。下面是几种常用的 HBase 扫描方式&amp;#xff1a; 
1. 全表扫描&amp;#xff08;Full Table Scan&amp;#xff09; 描述&amp;#xff1a;这是最基本的扫描方式&amp;#xff…阅读更多...ruoyi同时支持mysql+sqlserver+oracle+postgresql需求背景 
最近需要一个小demo，项目中需要同时连接sqlserver和mysql数据库。 操作教程 
1、pom.xml 
-- 修改common/pom.xml&lt;!-- 动态数据源 --&gt;
&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;/groupId&gt;&lt;artifactId&gt;dynamic-datasource-spring-boot-star…阅读更多...音频分割：长语音音频 分割为 短语音音频 - python 实现在做语音任务时&amp;#xff0c;有是会用到的语音音频是长音频&amp;#xff0c;这就需要我们将长音频分割为短音频。 该示例将声音的音量和静默时间结合作为语音的分割条件。 使用音量和静默时间结合的分割条件&amp;#xff0c;能够比较好的进行自然断句&amp;#xff0c;不会话语没有说完就切断…阅读更多...华为od面试手撕代码真题题型3——二分查找二分查找 
1 非减序列查找目标值 思路&amp;#xff1a;直接使用闭区间二分查找&amp;#xff0c;闭区间二分查找优点&amp;#xff0c;若查找的数不在&amp;#xff0c;返回的是插入位置 
public int searchBin20241020(int[] nums, int target){int n  nums.length;int left  0, right  n - 1;whi…阅读更多...腾讯云上基于 Apache Pulsar 的大规模生产实践导语 
Pulsar Meetup 2024 北京站已经成功落下帷幕。在本次盛会中&amp;#xff0c;腾讯云的高级工程师韩明泽和王震江为与会者带来了精彩的演讲。他们围绕多网接入、集群迁移以及高可用最佳实践这三大核心议题&amp;#xff0c;深入剖析了《腾讯云上基于 Apache Pulsar 的大规模生产实践…阅读更多...【D3.js in Action 3 精译_035】4.1 D3 中的坐标轴的创建（下篇）：坐标轴与轴标签的具体实现当前内容所在位置&amp;#xff08;可进入专栏查看其他译好的章节内容&amp;#xff09; 第一部分 D3.js 基础知识 第一章 D3.js 简介&amp;#xff08;已完结&amp;#xff09; 1.1 何为 D3.js&amp;#xff1f;1.2 D3 生态系统——入门须知1.3 数据可视化最佳实践&amp;#xff08;上&amp;#xff09;1.3 数据可…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:30 +0000</pubDate>
    </item>
    <item>
      <title>DBeaver + Oracle 数据库修改CLOB类型字段内容</title>
      <link>https://www.ppmy.cn/news/1541092.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维DBeaver + Oracle 数据库修改CLOB类型字段内容news/2025/11/1 1:18:29/数据库中存在大量错误数据， CLOB类型字段值需要批量修改，因数据结构比较复杂，无法做到使用常规的update语句。。。。一、问题介绍oracle数据库中，clob类型字段， 数据格式为 {“type”:“OOC”, …}, 如何使用一个sql将 OOC改成OOS？在 Oracle 数据库中，对于 CLOB 类型的字段，通常无法像 VARCHAR2 那样简单地使用 UPDATE 语句中的字符串替换函数（如 REPLACE）来直接更新其中的内容。然而，Oracle 提供了 DBMS_LOB 包和 REGEXP_REPLACE 函数，允许我们处理和修改 CLOB 数据。假设你有一个表 my_table，其中包含一个 CLOB 字段 my_clob_column，并且你想要将 CLOB 中所有的 “type”:“OOC” 替换为 “type”:“OOS”。二、SQL可以使用 REGEXP_REPLACE 函数来替换其中的部分内容。下面是一个示例 SQL 来完成这个操作：UPDATEmy_tableSETmy_clob_column=REGEXP_REPLACE(my_clob_column,'"type":"OOC"','"type":"OOS"')WHEREREGEXP_LIKE(my_clob_column,'"type":"OOC"');解释：REGEXP_REPLACE：使用正则表达式替换字符串中的匹配部分。匹配 “type”:“OOC”，并将其替换为"type":“OOS”。WHERE 子句：为了提高效率，我们添加了 WHERE 子句，确保只有包含 “type”:“OOC”的行才会被更新。这是通过 REGEXP_LIKE 函数来匹配那些包含该子字符串的记录。注意事项性能问题：CLOB 类型的数据可以非常大，因此在处理较大的数据时可能会影响性能。建议在更新大量记录时，使用批量更新的方式或者提前备份数据。测试和备份：在实际执行前，建议先对少量数据进行测试，确保更新逻辑正确。此外，修改 CLOB 数据前，最好进行备份，防止出现意外的数据丢失。http://www.ppmy.cn/news/1541092.html相关文章011_django基于大数据的足球数据分析与可视化系统2024_096va8x0目录 
系统展示 
开发背景 
代码实现 
项目案例  
获取源码 博主介绍&amp;#xff1a;CodeMentor毕业设计领航者、全网关注者30W群落&amp;#xff0c;InfoQ特邀专栏作家、技术博客领航者、InfoQ新星培育计划导师、Web开发领域杰出贡献者&amp;#xff0c;博客领航之星、开发者头条/腾讯云/AW…阅读更多...Hbase 几种scan方式在 HBase 中&amp;#xff0c;有多种方式进行数据扫描&amp;#xff08;scan&amp;#xff09;&amp;#xff0c;每种方式具有不同的功能和用途。下面是几种常用的 HBase 扫描方式&amp;#xff1a; 
1. 全表扫描&amp;#xff08;Full Table Scan&amp;#xff09; 描述&amp;#xff1a;这是最基本的扫描方式&amp;#xff…阅读更多...ruoyi同时支持mysql+sqlserver+oracle+postgresql需求背景 
最近需要一个小demo，项目中需要同时连接sqlserver和mysql数据库。 操作教程 
1、pom.xml 
-- 修改common/pom.xml&lt;!-- 动态数据源 --&gt;
&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;/groupId&gt;&lt;artifactId&gt;dynamic-datasource-spring-boot-star…阅读更多...音频分割：长语音音频 分割为 短语音音频 - python 实现在做语音任务时&amp;#xff0c;有是会用到的语音音频是长音频&amp;#xff0c;这就需要我们将长音频分割为短音频。 该示例将声音的音量和静默时间结合作为语音的分割条件。 使用音量和静默时间结合的分割条件&amp;#xff0c;能够比较好的进行自然断句&amp;#xff0c;不会话语没有说完就切断…阅读更多...华为od面试手撕代码真题题型3——二分查找二分查找 
1 非减序列查找目标值 思路&amp;#xff1a;直接使用闭区间二分查找&amp;#xff0c;闭区间二分查找优点&amp;#xff0c;若查找的数不在&amp;#xff0c;返回的是插入位置 
public int searchBin20241020(int[] nums, int target){int n  nums.length;int left  0, right  n - 1;whi…阅读更多...腾讯云上基于 Apache Pulsar 的大规模生产实践导语 
Pulsar Meetup 2024 北京站已经成功落下帷幕。在本次盛会中&amp;#xff0c;腾讯云的高级工程师韩明泽和王震江为与会者带来了精彩的演讲。他们围绕多网接入、集群迁移以及高可用最佳实践这三大核心议题&amp;#xff0c;深入剖析了《腾讯云上基于 Apache Pulsar 的大规模生产实践…阅读更多...【D3.js in Action 3 精译_035】4.1 D3 中的坐标轴的创建（下篇）：坐标轴与轴标签的具体实现当前内容所在位置&amp;#xff08;可进入专栏查看其他译好的章节内容&amp;#xff09; 第一部分 D3.js 基础知识 第一章 D3.js 简介&amp;#xff08;已完结&amp;#xff09; 1.1 何为 D3.js&amp;#xff1f;1.2 D3 生态系统——入门须知1.3 数据可视化最佳实践&amp;#xff08;上&amp;#xff09;1.3 数据可…阅读更多...量化策略交易之PTrade量化软件如何获取逐笔委托行情！get_individual_entrustget_individual_entrust– 获取逐笔委托行情 
get_individual_entrust(stocksNone, data_count50, start_pos0, search_direction1, is_dictFalse) 
使用场景 
该函数在交易模块可用 
接口说明 
该接口用于获取当日逐笔委托行情数据。 
注意事项&amp;#xff1a; 1、沪深市场都有逐…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:30 +0000</pubDate>
    </item>
    <item>
      <title>011_django基于大数据的足球数据分析与可视化系统2024_096va8x0</title>
      <link>https://www.ppmy.cn/news/1541091.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维011_django基于大数据的足球数据分析与可视化系统2024_096va8x0news/2025/11/1 1:18:28/目录系统展示开发背景代码实现项目案例获取源码博主介绍：CodeMentor毕业设计领航者、全网关注者30W+群落，InfoQ特邀专栏作家、技术博客领航者、InfoQ新星培育计划导师、Web开发领域杰出贡献者，博客领航之星、开发者头条/腾讯云/AWS/Wired等平台优选内容创作者、深耕Web开发与学生毕业设计实战指导，与高校教育者/资深讲师/行业专家深度对话🤝技术专长：Spring Framework、Angular、MyBatis、HTML5+CSS3、Servlet、Ruby on Rails、Node.js、Rust、网络爬虫、数据可视化、微信小程序、iOS应用开发、云计算、边缘计算、自然语言处理等项目的规划与实施。核心服务：无偿功能蓝图构思、项目启动报告、任务规划书、阶段评估演示文稿、系统功能落地、代码实现与优化、学术论文定制指导、论文精炼与重组、长期答辩筹备咨询、Zoom在线一对一深度解析答辩要点、模拟答辩实战彩排、以及代码逻辑与架构设计深度剖析。🍅文末获取源码联系🍅👇🏻 精彩专栏推荐订阅👇🏻 不然下次找不到哟Java项目精品实战案例《100套》Java微信小程序项目实战《100套》大数据项目实战《100套》Python项目实战《100套》感兴趣的可以先收藏起来，还有大家在毕设选题，项目以及论文编写等相关问题都可以给我留言咨询，希望帮助更多的人系统展示开发背景基于大数据的足球数据分析与可视化系统是一种利用现代信息技术手段对足球比赛数据进行深度分析和直观展示的工具。该系统通过整合和分析大量的足球数据，为球队管理、球员评估、战术制定以及足球爱好者观赛体验提供了强大的支持。基于大数据的足球数据分析与可视化系统具有多方面的功能特点和优势：数据采集与整合：系统能够从多个数据源获取足球比赛数据，包括官方赛事网站、体育数据提供商等。这些数据涵盖了比赛结果、球员表现、球队战术等多个方面。通过对不同格式和结构的数据进行清洗、转换和整合，确保数据的准确性和一致性。数据分析模块：运用Python的数据分析库和算法，对足球数据进行深入分析。这包括球队表现分析、球员数据分析、比赛战术分析等。通过对数据的挖掘，可以揭示隐藏在数据背后的规律和趋势，为足球领域的相关人员提供决策支持。可视化展示：借助Django框架构建的Web应用，将分析结果以图表、图形和动态交互界面的形式呈现给用户。用户可以直观地理解数据，快速获取关键信息，无需具备专业的数据分析知识。实时数据更新：系统具备实时数据更新功能，能够及时获取最新的比赛结果和球员数据，保证分析结果的时效性和准确性。用户可以随时了解足球赛事的最新动态。用户交互功能：提供用户交互功能，允许用户根据自己的需求选择特定的球队或球员进行分析和查看。同时，用户可以设置关注的指标和参数，定制个性化的数据分析报告和可视化图表，提高了系统的实用性和用户体验。个性化定制服务：用户可以根据自己的兴趣和需求进行个性化设置，获取符合自己关注点的数据分析结果和可视化报告，提高了系统的实用性和用户体验。高效的Web开发：Django框架提供了高效的Web开发模式，使得系统具有良好的扩展性、安全性和稳定性，能够快速构建功能完善的足球数据分析与可视化平台。综上所述，基于大数据的足球数据分析与可视化系统通过整合多种先进技术，实现了对足球比赛数据的全面管理和深度分析，并通过大屏可视化界面，将分析结果直观展示给用户。该系统不仅为足球爱好者提供了丰富的数据支持，也为教练和俱乐部提供了科学的决策依据，具有重要的应用价值和推广前景。代码实现import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns# 读取CSV文件
data = pd.read_csv('football_data.csv')# 查看数据的前几行
print(data.head())# 计算每个球队的平均进球数
team_goals = data.groupby('team')['goals'].mean()
print(team_goals)# 绘制球队平均进球数柱状图
plt.figure(figsize=(10, 6))
sns.barplot(x=team_goals.index, y=team_goals.values)
plt.title('Average Goals per Team')
plt.xlabel('Team')
plt.ylabel('Average Goals')
plt.show()项目案例获取源码大家点赞、收藏、关注、评论啦 、查看👇🏻获取联系方式👇🏻http://www.ppmy.cn/news/1541091.html相关文章Hbase 几种scan方式在 HBase 中&amp;#xff0c;有多种方式进行数据扫描&amp;#xff08;scan&amp;#xff09;&amp;#xff0c;每种方式具有不同的功能和用途。下面是几种常用的 HBase 扫描方式&amp;#xff1a; 
1. 全表扫描&amp;#xff08;Full Table Scan&amp;#xff09; 描述&amp;#xff1a;这是最基本的扫描方式&amp;#xff…阅读更多...ruoyi同时支持mysql+sqlserver+oracle+postgresql需求背景 
最近需要一个小demo，项目中需要同时连接sqlserver和mysql数据库。 操作教程 
1、pom.xml 
-- 修改common/pom.xml&lt;!-- 动态数据源 --&gt;
&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;/groupId&gt;&lt;artifactId&gt;dynamic-datasource-spring-boot-star…阅读更多...音频分割：长语音音频 分割为 短语音音频 - python 实现在做语音任务时&amp;#xff0c;有是会用到的语音音频是长音频&amp;#xff0c;这就需要我们将长音频分割为短音频。 该示例将声音的音量和静默时间结合作为语音的分割条件。 使用音量和静默时间结合的分割条件&amp;#xff0c;能够比较好的进行自然断句&amp;#xff0c;不会话语没有说完就切断…阅读更多...华为od面试手撕代码真题题型3——二分查找二分查找 
1 非减序列查找目标值 思路&amp;#xff1a;直接使用闭区间二分查找&amp;#xff0c;闭区间二分查找优点&amp;#xff0c;若查找的数不在&amp;#xff0c;返回的是插入位置 
public int searchBin20241020(int[] nums, int target){int n  nums.length;int left  0, right  n - 1;whi…阅读更多...腾讯云上基于 Apache Pulsar 的大规模生产实践导语 
Pulsar Meetup 2024 北京站已经成功落下帷幕。在本次盛会中&amp;#xff0c;腾讯云的高级工程师韩明泽和王震江为与会者带来了精彩的演讲。他们围绕多网接入、集群迁移以及高可用最佳实践这三大核心议题&amp;#xff0c;深入剖析了《腾讯云上基于 Apache Pulsar 的大规模生产实践…阅读更多...【D3.js in Action 3 精译_035】4.1 D3 中的坐标轴的创建（下篇）：坐标轴与轴标签的具体实现当前内容所在位置&amp;#xff08;可进入专栏查看其他译好的章节内容&amp;#xff09; 第一部分 D3.js 基础知识 第一章 D3.js 简介&amp;#xff08;已完结&amp;#xff09; 1.1 何为 D3.js&amp;#xff1f;1.2 D3 生态系统——入门须知1.3 数据可视化最佳实践&amp;#xff08;上&amp;#xff09;1.3 数据可…阅读更多...量化策略交易之PTrade量化软件如何获取逐笔委托行情！get_individual_entrustget_individual_entrust– 获取逐笔委托行情 
get_individual_entrust(stocksNone, data_count50, start_pos0, search_direction1, is_dictFalse) 
使用场景 
该函数在交易模块可用 
接口说明 
该接口用于获取当日逐笔委托行情数据。 
注意事项&amp;#xff1a; 1、沪深市场都有逐…阅读更多...电商API：定义、功能、特点及广泛应用场景解析电商API的定义 
电商API&amp;#xff08;Electronic Commerce Application Programming Interface&amp;#xff09;是电子商务平台提供给开发者和商家的一种技术接口&amp;#xff0c;它允许第三方应用程序访问和操作平台的数据和服务。简单来说&amp;#xff0c;电商API就是一套预定义的规则和协…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:29 +0000</pubDate>
    </item>
    <item>
      <title>Hbase 几种scan方式</title>
      <link>https://www.ppmy.cn/news/1541090.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Hbase 几种scan方式news/2025/11/1 1:18:28/在 HBase 中，有多种方式进行数据扫描（scan），每种方式具有不同的功能和用途。下面是几种常用的 HBase 扫描方式：1. 全表扫描（Full Table Scan）描述：这是最基本的扫描方式，可以读取整个表的数据。示例：Scanscan=newScan();ResultScannerresultScanner=table.getScanner(scan);for(Resultresult:resultScanner){// 处理每一行结果}2. 条件扫描（Filtered Scan）描述：通过设置条件过滤器，只读取符合条件的数据行。这可以提高查询效率，减少数据传输量。示例：Scanscan=newScan();Filterfilter=newSingleColumnValueFilter("cf","qualifier",CompareOp.EQUAL,"value");scan.setFilter(filter);ResultScannerresultScanner=table.getScanner(scan);3. 范围扫描（Range Scan）描述：在扫描时指定一个行键的范围，扫描特定范围内的数据行。这对于只需获取部分数据的情况非常有用。示例：Scanscan=newScan();scan.setStartRow(Bytes.toBytes("startRowKey"));scan.setStopRow(Bytes.toBytes("endRowKey"));ResultScannerresultScanner=table.getScanner(scan);4. 列限定扫描（Column Family and Qualifier Scan）描述：在扫描时，可以指定只返回特定列族和列修饰符的结果，从而减少不必要的数据传输。示例：Scanscan=newScan();scan.addColumn("cf".getBytes(),"qualifier".getBytes());ResultScannerresultScanner=table.getScanner(scan);5. 版本扫描（Versioned Scan）描述：HBase 支持存储多个版本的数据。通过设置版本号，用户可以扫描特定版本的数据。示例：Scanscan=newScan();scan.setMaxVersions(3);// 获取最新的 3 个版本ResultScannerresultScanner=table.getScanner(scan);6. 快照扫描（Snapshot Scan）描述：扫描 HBase 表的快照，读取某一时刻的数据状态。示例：Scanscan=newScan();scan.setSnapshot("snapshot_name");// 设置快照名ResultScannerresultScanner=table.getScanner(scan);7. 异步扫描（Asynchronous Scan）描述：通过使用异步 API，允许在非阻塞的方式下进行数据扫描，适用于高并发场景。示例：使用 HBase 1.x 及以上版本的 Async API。http://www.ppmy.cn/news/1541090.html相关文章ruoyi同时支持mysql+sqlserver+oracle+postgresql需求背景 
最近需要一个小demo，项目中需要同时连接sqlserver和mysql数据库。 操作教程 
1、pom.xml 
-- 修改common/pom.xml&lt;!-- 动态数据源 --&gt;
&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;/groupId&gt;&lt;artifactId&gt;dynamic-datasource-spring-boot-star…阅读更多...音频分割：长语音音频 分割为 短语音音频 - python 实现在做语音任务时&amp;#xff0c;有是会用到的语音音频是长音频&amp;#xff0c;这就需要我们将长音频分割为短音频。 该示例将声音的音量和静默时间结合作为语音的分割条件。 使用音量和静默时间结合的分割条件&amp;#xff0c;能够比较好的进行自然断句&amp;#xff0c;不会话语没有说完就切断…阅读更多...华为od面试手撕代码真题题型3——二分查找二分查找 
1 非减序列查找目标值 思路&amp;#xff1a;直接使用闭区间二分查找&amp;#xff0c;闭区间二分查找优点&amp;#xff0c;若查找的数不在&amp;#xff0c;返回的是插入位置 
public int searchBin20241020(int[] nums, int target){int n  nums.length;int left  0, right  n - 1;whi…阅读更多...腾讯云上基于 Apache Pulsar 的大规模生产实践导语 
Pulsar Meetup 2024 北京站已经成功落下帷幕。在本次盛会中&amp;#xff0c;腾讯云的高级工程师韩明泽和王震江为与会者带来了精彩的演讲。他们围绕多网接入、集群迁移以及高可用最佳实践这三大核心议题&amp;#xff0c;深入剖析了《腾讯云上基于 Apache Pulsar 的大规模生产实践…阅读更多...【D3.js in Action 3 精译_035】4.1 D3 中的坐标轴的创建（下篇）：坐标轴与轴标签的具体实现当前内容所在位置&amp;#xff08;可进入专栏查看其他译好的章节内容&amp;#xff09; 第一部分 D3.js 基础知识 第一章 D3.js 简介&amp;#xff08;已完结&amp;#xff09; 1.1 何为 D3.js&amp;#xff1f;1.2 D3 生态系统——入门须知1.3 数据可视化最佳实践&amp;#xff08;上&amp;#xff09;1.3 数据可…阅读更多...量化策略交易之PTrade量化软件如何获取逐笔委托行情！get_individual_entrustget_individual_entrust– 获取逐笔委托行情 
get_individual_entrust(stocksNone, data_count50, start_pos0, search_direction1, is_dictFalse) 
使用场景 
该函数在交易模块可用 
接口说明 
该接口用于获取当日逐笔委托行情数据。 
注意事项&amp;#xff1a; 1、沪深市场都有逐…阅读更多...电商API：定义、功能、特点及广泛应用场景解析电商API的定义 
电商API&amp;#xff08;Electronic Commerce Application Programming Interface&amp;#xff09;是电子商务平台提供给开发者和商家的一种技术接口&amp;#xff0c;它允许第三方应用程序访问和操作平台的数据和服务。简单来说&amp;#xff0c;电商API就是一套预定义的规则和协…阅读更多...【优选算法】（第四十四篇）目录 ⻜地的数量&amp;#xff08;medium&amp;#xff09; 
题目解析 
讲解算法原理 
编写代码 
地图中的最⾼点&amp;#xff08;medium&amp;#xff09; 
题目解析 
讲解算法原理 
编写代码 ⻜地的数量&amp;#xff08;medium&amp;#xff09; 
题目解析 
1.题目链接&amp;#xff1a;. - 力扣&amp;#xff08;Le…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:28 +0000</pubDate>
    </item>
    <item>
      <title>ruoyi同时支持mysql+sqlserver+oracle+postgresql</title>
      <link>https://www.ppmy.cn/news/1541089.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维ruoyi同时支持mysql+sqlserver+oracle+postgresqlnews/2025/11/1 1:18:27/需求背景最近需要一个小demo，项目中需要同时连接sqlserver和mysql数据库。操作教程1、pom.xml-- 修改common/pom.xml&lt;!-- 动态数据源 --&gt;
&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;/groupId&gt;&lt;artifactId&gt;dynamic-datasource-spring-boot-starter&lt;/artifactId&gt;&lt;version&gt;4.3.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;!--SQLServer连接--&gt;
&lt;dependency&gt;&lt;groupId&gt;com.microsoft.sqlserver&lt;/groupId&gt;&lt;artifactId&gt;mssql-jdbc&lt;/artifactId&gt;&lt;version&gt;8.2.2.jre8&lt;/version&gt;
&lt;/dependency&gt;
&lt;!-- Mysql驱动包 --&gt;
&lt;dependency&gt;&lt;groupId&gt;mysql&lt;/groupId&gt;&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;!-- oracle驱动包 --&gt;
&lt;dependenchttp://www.ppmy.cn/news/1541089.html相关文章音频分割：长语音音频 分割为 短语音音频 - python 实现在做语音任务时&amp;#xff0c;有是会用到的语音音频是长音频&amp;#xff0c;这就需要我们将长音频分割为短音频。 该示例将声音的音量和静默时间结合作为语音的分割条件。 使用音量和静默时间结合的分割条件&amp;#xff0c;能够比较好的进行自然断句&amp;#xff0c;不会话语没有说完就切断…阅读更多...华为od面试手撕代码真题题型3——二分查找二分查找 
1 非减序列查找目标值 思路&amp;#xff1a;直接使用闭区间二分查找&amp;#xff0c;闭区间二分查找优点&amp;#xff0c;若查找的数不在&amp;#xff0c;返回的是插入位置 
public int searchBin20241020(int[] nums, int target){int n  nums.length;int left  0, right  n - 1;whi…阅读更多...腾讯云上基于 Apache Pulsar 的大规模生产实践导语 
Pulsar Meetup 2024 北京站已经成功落下帷幕。在本次盛会中&amp;#xff0c;腾讯云的高级工程师韩明泽和王震江为与会者带来了精彩的演讲。他们围绕多网接入、集群迁移以及高可用最佳实践这三大核心议题&amp;#xff0c;深入剖析了《腾讯云上基于 Apache Pulsar 的大规模生产实践…阅读更多...【D3.js in Action 3 精译_035】4.1 D3 中的坐标轴的创建（下篇）：坐标轴与轴标签的具体实现当前内容所在位置&amp;#xff08;可进入专栏查看其他译好的章节内容&amp;#xff09; 第一部分 D3.js 基础知识 第一章 D3.js 简介&amp;#xff08;已完结&amp;#xff09; 1.1 何为 D3.js&amp;#xff1f;1.2 D3 生态系统——入门须知1.3 数据可视化最佳实践&amp;#xff08;上&amp;#xff09;1.3 数据可…阅读更多...量化策略交易之PTrade量化软件如何获取逐笔委托行情！get_individual_entrustget_individual_entrust– 获取逐笔委托行情 
get_individual_entrust(stocksNone, data_count50, start_pos0, search_direction1, is_dictFalse) 
使用场景 
该函数在交易模块可用 
接口说明 
该接口用于获取当日逐笔委托行情数据。 
注意事项&amp;#xff1a; 1、沪深市场都有逐…阅读更多...电商API：定义、功能、特点及广泛应用场景解析电商API的定义 
电商API&amp;#xff08;Electronic Commerce Application Programming Interface&amp;#xff09;是电子商务平台提供给开发者和商家的一种技术接口&amp;#xff0c;它允许第三方应用程序访问和操作平台的数据和服务。简单来说&amp;#xff0c;电商API就是一套预定义的规则和协…阅读更多...【优选算法】（第四十四篇）目录 ⻜地的数量&amp;#xff08;medium&amp;#xff09; 
题目解析 
讲解算法原理 
编写代码 
地图中的最⾼点&amp;#xff08;medium&amp;#xff09; 
题目解析 
讲解算法原理 
编写代码 ⻜地的数量&amp;#xff08;medium&amp;#xff09; 
题目解析 
1.题目链接&amp;#xff1a;. - 力扣&amp;#xff08;Le…阅读更多...LTD助力经营数字化，浙商数智营销学堂开讲入站营销新理念在10月18日下午&amp;#xff0c;杭州电子商务研究院精心策划并成功举办了首期“浙商数智营销学堂”。这场盛会在创业氛围浓郁的浙商大创业园好望院内拉开帷幕&amp;#xff0c;吸引了来自全国各地的30多位企业家、高管代表共襄盛举。 赵浩兴院长 赵浩兴院长代表杭州电子商务研究院致开幕…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:27 +0000</pubDate>
    </item>
    <item>
      <title>音频分割：长语音音频 分割为 短语音音频 - python 实现</title>
      <link>https://www.ppmy.cn/news/1541088.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维音频分割：长语音音频 分割为 短语音音频 - python 实现news/2025/11/1 1:18:25/在做语音任务时，有是会用到的语音音频是长音频，这就需要我们将长音频分割为短音频。该示例将声音的音量和静默时间结合作为语音的分割条件。使用音量和静默时间结合的分割条件，能够比较好的进行自然断句，不会话语没有说完就切断音频。按照 python 库：pip install pydub具体实现代码如下：#-*-coding:utf-8-*-
# date:2024-10
# Author: DataBall - XIAN
# Function: 长音频分割为短音频from pydub import AudioSegment
from pydub.silence import split_on_silence
import os
import wave
import shutil
# 初始化
chunks_path = "./short_audio/" # 保存分割段音频的保存路径
audiopath = "audio/test_long.wav"
audiotype = 'wav' # 音频类型
print("audiopath:",audiopath)
# 读入音频
sound = AudioSegment.from_file(audiopath, format=audiotype)
'''根据 音量 和 静默 时间长度 条件进行音频分割示例：音量阈值 -25 dB ， 静默阈值：300ms
'''
chunks = split_on_silence(sound,min_silence_len=300,silence_thresh=-25)# 保存分割后的短音频
print('开始保存')
for i in range(len(chunks)):new = chunks[i]save_name = "{}{}.{}".format(chunks_path,i,audiotype)new.export(save_name, format=audiotype)​​助力快速掌握数据集的信息和使用方式。数据可以如此美好http://www.ppmy.cn/news/1541088.html相关文章华为od面试手撕代码真题题型3——二分查找二分查找 
1 非减序列查找目标值 思路&amp;#xff1a;直接使用闭区间二分查找&amp;#xff0c;闭区间二分查找优点&amp;#xff0c;若查找的数不在&amp;#xff0c;返回的是插入位置 
public int searchBin20241020(int[] nums, int target){int n  nums.length;int left  0, right  n - 1;whi…阅读更多...腾讯云上基于 Apache Pulsar 的大规模生产实践导语 
Pulsar Meetup 2024 北京站已经成功落下帷幕。在本次盛会中&amp;#xff0c;腾讯云的高级工程师韩明泽和王震江为与会者带来了精彩的演讲。他们围绕多网接入、集群迁移以及高可用最佳实践这三大核心议题&amp;#xff0c;深入剖析了《腾讯云上基于 Apache Pulsar 的大规模生产实践…阅读更多...【D3.js in Action 3 精译_035】4.1 D3 中的坐标轴的创建（下篇）：坐标轴与轴标签的具体实现当前内容所在位置&amp;#xff08;可进入专栏查看其他译好的章节内容&amp;#xff09; 第一部分 D3.js 基础知识 第一章 D3.js 简介&amp;#xff08;已完结&amp;#xff09; 1.1 何为 D3.js&amp;#xff1f;1.2 D3 生态系统——入门须知1.3 数据可视化最佳实践&amp;#xff08;上&amp;#xff09;1.3 数据可…阅读更多...量化策略交易之PTrade量化软件如何获取逐笔委托行情！get_individual_entrustget_individual_entrust– 获取逐笔委托行情 
get_individual_entrust(stocksNone, data_count50, start_pos0, search_direction1, is_dictFalse) 
使用场景 
该函数在交易模块可用 
接口说明 
该接口用于获取当日逐笔委托行情数据。 
注意事项&amp;#xff1a; 1、沪深市场都有逐…阅读更多...电商API：定义、功能、特点及广泛应用场景解析电商API的定义 
电商API&amp;#xff08;Electronic Commerce Application Programming Interface&amp;#xff09;是电子商务平台提供给开发者和商家的一种技术接口&amp;#xff0c;它允许第三方应用程序访问和操作平台的数据和服务。简单来说&amp;#xff0c;电商API就是一套预定义的规则和协…阅读更多...【优选算法】（第四十四篇）目录 ⻜地的数量&amp;#xff08;medium&amp;#xff09; 
题目解析 
讲解算法原理 
编写代码 
地图中的最⾼点&amp;#xff08;medium&amp;#xff09; 
题目解析 
讲解算法原理 
编写代码 ⻜地的数量&amp;#xff08;medium&amp;#xff09; 
题目解析 
1.题目链接&amp;#xff1a;. - 力扣&amp;#xff08;Le…阅读更多...LTD助力经营数字化，浙商数智营销学堂开讲入站营销新理念在10月18日下午&amp;#xff0c;杭州电子商务研究院精心策划并成功举办了首期“浙商数智营销学堂”。这场盛会在创业氛围浓郁的浙商大创业园好望院内拉开帷幕&amp;#xff0c;吸引了来自全国各地的30多位企业家、高管代表共襄盛举。 赵浩兴院长 赵浩兴院长代表杭州电子商务研究院致开幕…阅读更多...[笔记] 关于CreateProcessWithLogonW函数创建进程函数介绍 
https://learn.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-createprocesswithlogonw 
BOOL CreateProcessWithLogonW([in]                LPCWSTR               lpUsername,[in, optional]      LPCWSTR               lpDomain,[in]             …阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:26 +0000</pubDate>
    </item>
    <item>
      <title>华为od面试手撕代码真题题型3——二分查找</title>
      <link>https://www.ppmy.cn/news/1541087.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维华为od面试手撕代码真题题型3——二分查找news/2025/11/1 1:18:25/二分查找1 非减序列查找目标值思路：直接使用闭区间二分查找，闭区间二分查找优点，若查找的数不在，返回的是插入位置publicintsearchBin20241020(int[]nums,inttarget){intn=nums.length;intleft=0,right=n-1;while(left&lt;=right){intmid=left+(right-left)/2;if(nums[mid]&lt;target){left=mid+1;}else{right=mid-1;}}returnleft;}2 在排序数组中查找元素的第一个和最后一个位置34. 在排序数组中查找元素的第一个和最后一个位置 - 力扣（LeetCode）这里可以看一下：二分查找 红蓝染色法_哔哩哔哩_bilibili 这位up的讲解，讲的很到位 ，看完能知道 &gt;= &gt; &lt; &lt;= 之间的转换。对这题至关重要publicint[]searchRange(int[]nums,inttarget){intstart=binsearch(nums,target);//&gt;= 注意整数中 &gt;x 可转成 &gt;=x+1；&lt;x 可转成 (&gt;=x)-1; &lt;=x 可转成 (&gt;x)-1 ==&gt; (&gt;=x+1)-1if(start==nums.length||nums[start]!=target){returnnewint[]{-1,-1};}intend=binsearch(nums,target+1)-1;//&lt;=returnnewint[]{start,end};}publicintbinsearch(int[]nums,inttarget){intleft=0,right=nums.length-1;while(left&lt;=right){intmid=left+(right-left)/2;if(nums[mid]&lt;target){left=mid+1;}else{right=mid-1;}}returnleft;}http://www.ppmy.cn/news/1541087.html相关文章腾讯云上基于 Apache Pulsar 的大规模生产实践导语 
Pulsar Meetup 2024 北京站已经成功落下帷幕。在本次盛会中&amp;#xff0c;腾讯云的高级工程师韩明泽和王震江为与会者带来了精彩的演讲。他们围绕多网接入、集群迁移以及高可用最佳实践这三大核心议题&amp;#xff0c;深入剖析了《腾讯云上基于 Apache Pulsar 的大规模生产实践…阅读更多...【D3.js in Action 3 精译_035】4.1 D3 中的坐标轴的创建（下篇）：坐标轴与轴标签的具体实现当前内容所在位置&amp;#xff08;可进入专栏查看其他译好的章节内容&amp;#xff09; 第一部分 D3.js 基础知识 第一章 D3.js 简介&amp;#xff08;已完结&amp;#xff09; 1.1 何为 D3.js&amp;#xff1f;1.2 D3 生态系统——入门须知1.3 数据可视化最佳实践&amp;#xff08;上&amp;#xff09;1.3 数据可…阅读更多...量化策略交易之PTrade量化软件如何获取逐笔委托行情！get_individual_entrustget_individual_entrust– 获取逐笔委托行情 
get_individual_entrust(stocksNone, data_count50, start_pos0, search_direction1, is_dictFalse) 
使用场景 
该函数在交易模块可用 
接口说明 
该接口用于获取当日逐笔委托行情数据。 
注意事项&amp;#xff1a; 1、沪深市场都有逐…阅读更多...电商API：定义、功能、特点及广泛应用场景解析电商API的定义 
电商API&amp;#xff08;Electronic Commerce Application Programming Interface&amp;#xff09;是电子商务平台提供给开发者和商家的一种技术接口&amp;#xff0c;它允许第三方应用程序访问和操作平台的数据和服务。简单来说&amp;#xff0c;电商API就是一套预定义的规则和协…阅读更多...【优选算法】（第四十四篇）目录 ⻜地的数量&amp;#xff08;medium&amp;#xff09; 
题目解析 
讲解算法原理 
编写代码 
地图中的最⾼点&amp;#xff08;medium&amp;#xff09; 
题目解析 
讲解算法原理 
编写代码 ⻜地的数量&amp;#xff08;medium&amp;#xff09; 
题目解析 
1.题目链接&amp;#xff1a;. - 力扣&amp;#xff08;Le…阅读更多...LTD助力经营数字化，浙商数智营销学堂开讲入站营销新理念在10月18日下午&amp;#xff0c;杭州电子商务研究院精心策划并成功举办了首期“浙商数智营销学堂”。这场盛会在创业氛围浓郁的浙商大创业园好望院内拉开帷幕&amp;#xff0c;吸引了来自全国各地的30多位企业家、高管代表共襄盛举。 赵浩兴院长 赵浩兴院长代表杭州电子商务研究院致开幕…阅读更多...[笔记] 关于CreateProcessWithLogonW函数创建进程函数介绍 
https://learn.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-createprocesswithlogonw 
BOOL CreateProcessWithLogonW([in]                LPCWSTR               lpUsername,[in, optional]      LPCWSTR               lpDomain,[in]             …阅读更多...特征交叉03 LHUC (PPNet)LHUC 只能用于精排。 
多目标模型中的神经网络可以用全连接网络 、深度交叉网络 或者LHUC等。 语音识别中的LHUC 
说话者的特征, 例如id 做embadding 。LHUC中出现的神经网络有多个全连接层&amp;#xff0c;最后一个全连接层的激活函数是sigmoid *2&amp;#xff0c;单独作用到每一个元素…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:25 +0000</pubDate>
    </item>
    <item>
      <title>腾讯云上基于 Apache Pulsar 的大规模生产实践</title>
      <link>https://www.ppmy.cn/news/1541086.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维腾讯云上基于 Apache Pulsar 的大规模生产实践news/2025/11/1 1:18:24/导语Pulsar Meetup 2024 北京站已经成功落下帷幕。在本次盛会中，腾讯云的高级工程师韩明泽和王震江为与会者带来了精彩的演讲。他们围绕多网接入、集群迁移以及高可用最佳实践这三大核心议题，深入剖析了《腾讯云上基于 Apache Pulsar 的大规模生产实践》，为听众呈现了一场知识与经验交织的盛宴。作者介绍王震江腾讯研发工程师，负责腾讯云 TDMQ for Apache Pulsar 商业化开发，开源社区爱好者韩明泽腾讯高级工程师，负责腾讯云 TDMQ for Apache Pulsar 商业化开发拥有7年消息队列开发经验，熟练掌握 Pulsar、 Kafka、RocketMQ 等主流消息队列Apache Pulsar/BookKeeper/Zookeeper contributor，RoP maintainer多网络接入网络介绍云环境中，我们常遇到三种网络类型：内网、VPC（虚拟私有云）以及公网。若 VPC 和公网需要访问集群，则必须通过网络寻址功能实现 IP 映射，从而打通这些网络。在以往的方案中，这一步骤是通过 AdvertisedListeners+ListenerName 来完成的，它负责将每个 IP 映射文件存放在 Broker 集群里。然而，这种方法带来了三个显著的问题。首先，配置过程变得相当复杂。由于每个接入点都对应一个 IP 映射，随着接入点的不断增加，这些映射文件会变得异常庞大，管理起来极为不便。同时，每个 Broker 所对应的文件可能并不一致，这进一步加剧了配置的复杂性。其次，这种架构导致了职责的混淆。Broker 本应专注于消息的收发过程，但在此架构下，它还需承担网络寻址的职责，这使得其职责变得模糊不清。最后，这种方法的维护成本也相对较高。配置文件频繁变动，修改起来既麻烦又容易出错。而且，如果不同节点之间的数据不一致，导致整体维护难度很大。路由寻址针对上述挑战，我们创新性地提出了路由寻址方案。这一改进方案的核心在于引入 LookupService 来执行路由寻址任务，通过数据库，集中管理和维护网络映射和寻址信息。路由寻址方案带来了四大显著优势：● 架构简化：从下图可以看出，整个系统结构更加简洁明了，避免了不必要的复杂性。● 职责明确：在此方案下，Broker 得以专注于其核心任务——消息的收发，而无需再承担网络寻址的职责，实现了有效的解耦。● 运维便捷：运维团队只需专注于管理工作，无需与 Broker 进行繁琐的交互，从而大大降低了运维成本和复杂性。● 扩展性强：这一优势在多集群管理或集群迁移时尤为明显，它确保了业务的稳定性和连续性，为系统的未来发展奠定了坚实基础。综上所述，路由寻址方案的提出，不仅有效解决了原有方案中的问题，还带来了诸多优势，为系统的优化和升级提供了有力支持。集群迁移产品形态TDMQ Pulsar 主要有三种典型的产品形态。第一种是 Broker 共享，Bookie 共享，这种的产品形态成本比较低，但是存在一些问题，主要面临隔离性问题和稳定性问题。第二种是 Broker 独占，Bookie 独占，这种形态下，计算层、存储层资源独占。这种形态优点是隔离性好，缺点是成本相对较高第三种是 Broker 独占，Bookie 共享。这种形态综合考虑了稳定性和成本，算是一种折中的方案。三种形态并无明显的优劣之分，更多的是要结合实际的应用场景做出选择。整体架构我们最初采用的都是共享的产品形态。但是，随着用户规模增加，对产品的稳定性提出更高的要求，共享形态并不能很好的满足业务的诉求。他们需要从共享模式迁移到更为适合的后两种模式。这时，集群迁移问题便随之而来。为了应对这一挑战，我们精心设计了集群迁移方案，该方案主要包含以下四个关键步骤：● 元数据同步● 数据同步（GEO）● 订阅进度同步（GEO+补偿）● 切换集群（Unload+寻址调整）订阅进度说明整体的集群迁移实现逻辑比较简单。主要的难点在于订阅进度的同步上。在使用社区 GEO 方案进行订阅进度同步时，我们发现存在一些问题。GEO 中的订阅进度只会同步 MarkDeletePosition，这样，会导致订阅进度并不完整。因为 Pulsar 中，订阅进度是由两部分组成的。这意味着，在实际迁移的过程中，用户可能会遇到消息大量重复处理的情况。进度同步为了解决集群迁移过程中可能出现的消息重复消费问题，我们创新性地提出了一个补偿方案。1、 我们会在同步消息到目标集群的时候，在消息的元数据中，携带原集群的消息 ID。2、 我们会将原集群中的订阅进度（MarkDeletePosition和IndividuallyDeleteMessages）同步到目标集群。3、 当消费者迁移到目标集群后。在目标集群中，读取消息之后，如果消息是来自原集群，那我们将原集群中的消息 ID 和原集群的订阅集群进行比对，如果判断消息已经在原集群中消费完成，我们就将消息过滤掉，不再投递给消费者。通过上面的机制，我们有效解决了消费进度同步不完整的问题。高可用最佳实践如今，公司对 TDMQ Pulsar 集群的基本要求已经远远超越了单点故障的防范，而是至少需要具备可用区级别的容错能力。更进一步，对集群能力乃至跨地域能力的需求也日益增长。在此，我们将重点聚焦于可用区维度的探讨。特别是在存储层面，副本的分布策略显得尤为重要。可用区容灾在高可用存储系统中，副本分布是确保数据可靠性和系统稳定性的关键环节。其中，机架感知和跨可用区分布是副本分布策略的重要方面。机架感知机架感知是指系统能够识别并感知到不同服务器所在的机架，从而在分配副本时尽量将副本分散到不同的机架上。这样做的好处是，当某个机架出现故障时，其他机架上的副本仍然可用，保证了数据的可靠性和系统的稳定性。跨可用区分布跨可用区分布是指将副本分散到不同的可用区（如不同的地理区域或数据中心）。这样做可以进一步提高数据的可靠性和系统的容错性。当某个可用区出现故障时，其他可用区上的副本可以接管并提供服务，确保系统的持续运行。在实现跨可用区分布时，通常需要配置相关的参数来开启机架感知和跨可用区分布功能。这些配置通常包括指定副本的数量、分布方式以及可用区的选择等。注意事项尽管副本分布策略可以显著提高系统的可靠性和稳定性，但在实际执行过程中，仍需注意以下几点：● 副本恢复过程的数据保证在副本恢复过程中，需要保证剩余的副本数量大于等于w-a+1（w是写副本数，a是确认副本数）。这是为了确保在恢复过程中，即使出现部分副本丢失或不可用的情况，仍然有足够的副本可以恢复数据，保证数据的不丢失和高可靠性。● 处理数据堆积和读取策略在某些情况下，可能会出现数据堆积和读取策略不当的问题。例如，当某个副本节点出现故障时，如果是读堆积消息，可能会导致读取速度变慢。因为读取的时候，默认是轮询读取每个副本节点，当读取到故障节点的时候，会出现超时的情况，造成读取性能明显下降。为了解决这个问题，可以优化读取策略或开启粘性读开关，使系统在选择读取节点时更加智能和高效。最佳实践在3可用区和2可用区下，既能满足数据高可靠，又能满足服务可用性的部署形态。地域容灾除了副本分布策略外，容灾能力也是确保系统高可用性的重要方面。容灾能力是指系统在出现故障或灾难时能够快速恢复并提供服务的能力。在实现容灾能力时，通常需要建立异地备份集群并定期同步数据。当主集群出现故障时，可以切换到备份集群提供服务。同时，还需要建立相应的运营切换机制和消息堆积处理机制以确保系统的持续运行和数据的一致性。综上所述，高可用存储层的副本分布策略及注意事项是确保系统可靠性和稳定性的重要环节。在实际应用中，需要根据具体的业务场景和需求来选择合适的策略并注意相关的注意事项以确保系统的正常运行和数据的安全性。总结展望未来，我们将继续致力于优化 Apache Pulsar 在腾讯云上的应用，不断提升系统的性能、稳定性和可用性。我们将持续关注用户需求，不断推出更多创新性的解决方案，以满足用户在不同场景下的需求。同时，我们也将积极参与开源社区的建设，与更多开发者共同推动 Apache Pulsar 的发展，为消息队列技术的进步贡献我们的力量。http://www.ppmy.cn/news/1541086.html相关文章【D3.js in Action 3 精译_035】4.1 D3 中的坐标轴的创建（下篇）：坐标轴与轴标签的具体实现当前内容所在位置&amp;#xff08;可进入专栏查看其他译好的章节内容&amp;#xff09; 第一部分 D3.js 基础知识 第一章 D3.js 简介&amp;#xff08;已完结&amp;#xff09; 1.1 何为 D3.js&amp;#xff1f;1.2 D3 生态系统——入门须知1.3 数据可视化最佳实践&amp;#xff08;上&amp;#xff09;1.3 数据可…阅读更多...量化策略交易之PTrade量化软件如何获取逐笔委托行情！get_individual_entrustget_individual_entrust– 获取逐笔委托行情 
get_individual_entrust(stocksNone, data_count50, start_pos0, search_direction1, is_dictFalse) 
使用场景 
该函数在交易模块可用 
接口说明 
该接口用于获取当日逐笔委托行情数据。 
注意事项&amp;#xff1a; 1、沪深市场都有逐…阅读更多...电商API：定义、功能、特点及广泛应用场景解析电商API的定义 
电商API&amp;#xff08;Electronic Commerce Application Programming Interface&amp;#xff09;是电子商务平台提供给开发者和商家的一种技术接口&amp;#xff0c;它允许第三方应用程序访问和操作平台的数据和服务。简单来说&amp;#xff0c;电商API就是一套预定义的规则和协…阅读更多...【优选算法】（第四十四篇）目录 ⻜地的数量&amp;#xff08;medium&amp;#xff09; 
题目解析 
讲解算法原理 
编写代码 
地图中的最⾼点&amp;#xff08;medium&amp;#xff09; 
题目解析 
讲解算法原理 
编写代码 ⻜地的数量&amp;#xff08;medium&amp;#xff09; 
题目解析 
1.题目链接&amp;#xff1a;. - 力扣&amp;#xff08;Le…阅读更多...LTD助力经营数字化，浙商数智营销学堂开讲入站营销新理念在10月18日下午&amp;#xff0c;杭州电子商务研究院精心策划并成功举办了首期“浙商数智营销学堂”。这场盛会在创业氛围浓郁的浙商大创业园好望院内拉开帷幕&amp;#xff0c;吸引了来自全国各地的30多位企业家、高管代表共襄盛举。 赵浩兴院长 赵浩兴院长代表杭州电子商务研究院致开幕…阅读更多...[笔记] 关于CreateProcessWithLogonW函数创建进程函数介绍 
https://learn.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-createprocesswithlogonw 
BOOL CreateProcessWithLogonW([in]                LPCWSTR               lpUsername,[in, optional]      LPCWSTR               lpDomain,[in]             …阅读更多...特征交叉03 LHUC (PPNet)LHUC 只能用于精排。 
多目标模型中的神经网络可以用全连接网络 、深度交叉网络 或者LHUC等。 语音识别中的LHUC 
说话者的特征, 例如id 做embadding 。LHUC中出现的神经网络有多个全连接层&amp;#xff0c;最后一个全连接层的激活函数是sigmoid *2&amp;#xff0c;单独作用到每一个元素…阅读更多...Solon 3.0 新特性：HttpUtils 了解一下Solon 3.0 引入一个叫 HttpUtils 小插件&amp;#xff0c;这是一个简单的同步 HTTP 客户端&amp;#xff0c;基于 URLConnection 适配&amp;#xff08;也支持切换为 OkHttp 适配&amp;#xff09;。使得编写 HTTP 客户端代码更加直观和易于阅读。 
使用 URLConnection 适配时&amp;#xff08;大小为 40…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:24 +0000</pubDate>
    </item>
    <item>
      <title>【D3.js in Action 3 精译_035】4.1 D3 中的坐标轴的创建（下篇）：坐标轴与轴标签的具体实现</title>
      <link>https://www.ppmy.cn/news/1541085.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【D3.js in Action 3 精译_035】4.1 D3 中的坐标轴的创建（下篇）：坐标轴与轴标签的具体实现news/2025/11/1 1:18:23/当前内容所在位置（可进入专栏查看其他译好的章节内容）第一部分 D3.js 基础知识第一章 D3.js 简介（已完结）1.1 何为 D3.js？1.2 D3 生态系统——入门须知1.3 数据可视化最佳实践（上）1.3 数据可视化最佳实践（下）1.4 本章小结第二章 DOM 的操作方法（已完结）2.1 第一个 D3 可视化图表2.2 环境准备2.3 用 D3 选中页面元素2.4 向选择集添加元素2.5 用 D3 设置与修改元素属性2.6 用 D3 设置与修改元素样式2.7 本章小结第三章 数据的处理（已完结）3.1 理解数据3.2 准备数据3.3 将数据绑定到 DOM 元素3.3.1 利用数据给 DOM 属性动态赋值3.4 让数据适应屏幕3.4.1 比例尺简介（上篇）3.4.2 线性比例尺（中篇）3.4.2.1 基于 Mocha 测试 D3 线性比例尺（DIY 实战）3.4.3 分段比例尺（下篇）3.4.3.1 使用 Observable 在线绘制 D3 条形图（DIY 实战）3.5 加注图表标签（上篇）3.5.1 人物专访：Krisztina Szűcs（下篇）3.6 本章小结第四章 直线、曲线与弧线的绘制✔️4.1 坐标轴的创建（上篇）4.1.1 D3 中的边距约定（中篇）4.1.2 坐标轴的生成（中篇）4.1.2.1 比例尺的声明（中篇）4.1.2.2 坐标轴的添加（下篇）✔️4.1.2.3 轴标签的添加（下篇）✔️4.2 D3 折线图的绘制（精译中 ⏳）文章目录4.1.2 坐标轴的生成 Generating axes1 比例尺的声明 Declaring the scales2 坐标轴的添加 Appending the axes ✔️3 轴标签的添加 Adding axis labels ✔️《D3.js in Action》全新第三版封面译者按上一篇我们完成了折线图比例尺的定义，它们是为本篇将要实现的坐标轴做铺垫。D3 坐标轴的相关知识点是 D3 基础知识中的重中之重，是后续定制各种可视化效果的前提。让我们跟着作者的思路，一口气拿下这块高地！4.1.2 坐标轴的生成 Generating axes（详见本专栏 【第 034 篇】）1 比例尺的声明 Declaring the scales（详见本专栏 【第 034 篇】）2 坐标轴的添加 Appending the axes ✔️两个比例尺的初始化完毕后，接下来添加坐标轴。D3 有四个坐标轴生成器：axisTop()、axisRight()、axisBottom()和axisLeft()，分别用于创建顶部、右侧、底部及左侧的坐标轴。它们都归属于d3-axis模块。上一节提过，坐标轴生成器函数接受一个比例尺作为参数。例如创建折线图的底部坐标轴，就该调用axisBottom()生成器，并将比例尺xScale作为参数传入，因为该比例尺负责分配底部坐标轴上的数据。然后将结果赋给常量bottomAxis：constbottomAxis=d3.axisBottom(xScale);坐标轴生成器负责将构成坐标轴的各要素组装到一起，为了让这些要素渲染到屏幕上，还需要调用 D3 选择集上的call()方法。在下列代码片段中，注意观察选择集innerChart的用法：在调用坐标轴生成器前我们先添加了一个类名为axis-x的分组元素，以便后续给坐标轴定位并设计样式。constbottomAxis=d3.axisBottom(xScale);innerChart.append("g").attr("class","axis-x").call(bottomAxis);然后在浏览器中查看生成的坐标轴效果。默认情况下，D3 坐标轴会出现在选择集的原点位置，本例中即为内部图表的左上角，如图 4.6 所示。此时可以通过平移坐标轴所在的 SVG 分组元素将其移动到图表底部。顺便强调一下：在分组元素上设置的样式变换会被旗下所有子元素继承。以下代码片段中，包含坐标轴元素的分组元素向下平移，平移量为内部图表的高度值：constbottomAxis=d3.axisBottom(xScale);innerChart.append("g").attr("class","axis-x").attr("transform",`translate(0,${innerHeight})`).call(bottomAxis);【图 4.6 默认情况下，D3 坐标轴会在选择集的原点位置生成，即内部图表的左上角位置。需要通过平移操作定位到目标位置。】另一个需要调整的是坐标轴上的标签格式。默认情况下，D3 会根据定义域自动设置轴标签格式，在屏幕上渲染出相应的小时、天数、月份及年份标签。但默认格式未必是我们想要的效果。为此，D3 提供了多种方式来更改标签格式。先来看一下，x轴已经有了二月到十二月的标签，唯独没有一月份的。考虑到您所在的时区，数据集中的最早日期未必就是一月一日的零点，这样 D3 就无法将其视为首月的起点；又由于数据集不是动态的，硬编码一个变量firstDate代表最早日期不失为一个合理的解决方案。它可以通过JavaScript的Date()构造函数实现。在以下代码片段中，firstDate的值改为了一个Date()日期，并指定了年份（2021）、月份（00，月份索引值从零开始）以及日期（01），同时指定了小时、分钟及秒数（0, 0, 0）：constfirstDate=newDate(2021,00,01,0,0,0);constlastDate=d3.max(data,d=&gt;d.date);constxScale=d3.scaleTime().domain([firstDate,lastDate]).range([0,innerWidth]);保存项目后，会看到 1 月 1 日的位置有了一个轴标签；但该标签只显示了 2021 年，如图 4.7 所示。这没不能算错，因为Fri Jan 01 2021 00:00:00对应的就是 2021 年年初位置，只是我们想换成一个显示月份的标签。【图 4.7 默认情况下，D3 会自动调整轴标签上的时间格式。本例中 2021 年 1 月 1 日为一年的起点。这本身并没有错，但就可读性而言不是很理想。】还可以使用d3-axis模块下的axis.tickFormat()方法来设置轴标签的格式。刻度线（Ticks）是上述坐标轴上的短竖线。它们通常伴随刻度标签一同显示，但也可以不显示。假设我们想要的刻度标签格式为月份的缩写形式。在 D3 中可以使用d3-time-format模块下的d3.timeFormat()方法来设置格式。该方法接受一个格式字符串作为参数，月份名称的缩写对应格式字符串为%b。这些格式的完整列表可以在该模块的官方文档中进行查看（译注：详见官方文档：https://d3js.org/d3-time-format#locale_format）。以下代码片段通过底部坐标轴的选择集链式调用了tickFormat()方法，并将时间格式作为参数传入，最终效果如图 4.8 所示。constbottomAxis=d3.axisBottom(xScale).tickFormat(d3.timeFormat("%b"));【图 4.8 将底部轴的标签格式设为月份缩写形式的效果图】这样就设置好了日期标签的格式，每个标签都是各月的第一天，效果还不错。还可以再进一步，将标签放在两个刻度之间来提高可读性，表示每月是从前一个时间刻度延伸至后一个时间刻度。要调整刻度标签的位置，首先得选中它们。打开浏览器的检查工具（Inspector），仔细查看 D3 生成的 SVG 坐标轴元素，会看到一个类名为domain的path元素。它在定义域的上方绘制了一条水平线段。该路径元素还包含两个外部刻度线，即图形两端的短竖线，如图 4.9 所示。而坐标轴的每个刻度与刻度标签则由一条短竖线和文本元素构成，并统一放在一个类名为tick的 SVG 分组元素内。这些 SVG 分组元素通过沿坐标轴方向的平移量来确定各刻度线与标签文本的方位。坐标轴生成器所创建的 SVG 元素标签及样式类均由 D3 的公共 API 接口控制。我们可以利用这些接口来自定义坐标轴的外观。【图 4.9 构成坐标轴的 SVG 元素示意图】了解了坐标轴的结构，就可以通过选择器".axis-x text"选中x轴的所有标签，即axis-x样式类下的所有文本元素。然后进行如下调整：利用其y属性将文本元素下移10px，以进一步提高可读性；再将其font-family设置为之前用过的Roboto，因为 D3 会默认将axis的font-family改为sans-serif，从而阻断了文本标签对项目根节点的字体样式的继承。最后再将字号增大到14px。出于分离关注点原则（separation of concerns）的考虑，以下示例代码中的最后两个样式最好通过 CSS 样式表来设置。但这里使用 D3 来简化问题：d3.selectAll(".axis-x text").attr("y","10px").style("font-family","Roboto, sans-serif").style("font-size","14px");为了将月份标签在对应的刻度间居中显示，这里需要调整x的属性值。由于每个月的天数不尽相同（28 到 31 天不等），我们需要找出各标签当月第一天与下月第一天的中间位置。同时需要注意，D3 已经在g.asix-x分组元素上将text-anchor属性自动设为了"middle"。由于 D3 绑定到各标签的日期数据对应该月第一天，以下代码片段中，我们利用JavaScript的getMonth()方法获取到当前月份。该方法返回一个介于 0 到 11 之间的整数值，分别代表一到十二月。然后将月份加一并通过Date()构造出一个新的JavaScript日期值。我们在第三章学过，回调函数里的第一个参数，通常命名为d，代表绑定数据集中的每一个数据项，类似于遍历数据时用到的forEach()方法。最后，再用xScale求出本月一号与下个月一号之间的中间距离。完成后的坐标轴效果将如图 4.10 所示（第 2 ~ 6 行）：d3.selectAll(".axis-x text").attr("x",d=&gt;{constcurrentMonth=d;constnextMonth=newDate(2021,currentMonth.getMonth()+1,1);return(xScale(nextMonth)-xScale(currentMonth))/2;}).attr("y","10px").style("font-family","Roboto, sans-serif").style("font-size","14px");【图 4.10 让月份标签居中显示的 x 坐标轴效果图】以上代码涉及很多操作，想必已经让您对自定义 D3 坐标轴的不同方法有了一个大致的了解。接着再来为折线图添加y坐标轴，它的实现要简单得多。由于y轴靠左显示，这里用到的坐标轴生成器为d3.axisLeft()，同时将yScale比例尺作为参数传入，并将结果赋给一个常量leftAxis：constleftAxis=d3.axisLeft(yScale);类似地，想要将坐标轴添加到内部绘图区，需要在内部图表的选择集上添加一个分组元素，并指定一个样式类axis-y：（第 2 ~ 4 行）constleftAxis=d3.axisLeft(yScale);innerChart.append("g").attr("class","axis-y").call(leftAxis);保存设置后将看到y轴已经定位好了无需平移，如图 4.11 所示。剩下的工作就是设置标签的字体并增大字号。以下代码片段先选中样式类axis-y下的所有 SVG 文本元素，然后通过x属性令其向左稍作平移，以便提高可读性；之后再分别设置其font-family和font-size属性：d3.selectAll(".axis-y text").attr("x","-5px").style("font-family","Roboto, sans-serif").style("font-size","14px");【图 4.11 完成设置后的 x 坐标轴与 y 坐标轴效果图】您可能也注意到了两个轴标签在设置font-family和font-size时存在重复代码。在学习阶段，这样写并不算什么大问题；要是在专业项目环境下，则应当尽量避免像这样的代码冗余。除了前面提过的使用 CSS 样式表来统一设置外，还可以使用组合选择器，如以下代码所示（第 1 行）：d3.selectAll(".axis-x text, .axis-y text").style("font-family","Roboto, sans-serif").style("font-size","14px");3 轴标签的添加 Adding axis labels ✔️实现了折线图的坐标轴后，还有一件事需要完成——添加轴标签——它可以帮助读者更好地理解我们的图表。x轴上的刻度标签不言而喻，但y轴则不然：虽然读者知道它们的取值范围在 0 到 90 之间，但可能并不知道它们的含义是什么。这时就需要通过设置轴标签来解决这个问题。在 D3 项目中，标签就是 SVG 文本元素。因此只需将文本元素添加到 SVG 容器中即可。轴标签的内容就设为"Temperature (°F)"，然后将其垂直坐标指定到距离 SVG 容器原点20px的位置：svg.append("text").text("Temperature (°F)").attr("y",20);大功告成！您本地的折线图效果此时应该如图 4.12 所示。【图 4.12 完成设置后的坐标轴及轴标签效果图】下一节我们将实现折线图的绘制。http://www.ppmy.cn/news/1541085.html相关文章量化策略交易之PTrade量化软件如何获取逐笔委托行情！get_individual_entrustget_individual_entrust– 获取逐笔委托行情 
get_individual_entrust(stocksNone, data_count50, start_pos0, search_direction1, is_dictFalse) 
使用场景 
该函数在交易模块可用 
接口说明 
该接口用于获取当日逐笔委托行情数据。 
注意事项&amp;#xff1a; 1、沪深市场都有逐…阅读更多...电商API：定义、功能、特点及广泛应用场景解析电商API的定义 
电商API&amp;#xff08;Electronic Commerce Application Programming Interface&amp;#xff09;是电子商务平台提供给开发者和商家的一种技术接口&amp;#xff0c;它允许第三方应用程序访问和操作平台的数据和服务。简单来说&amp;#xff0c;电商API就是一套预定义的规则和协…阅读更多...【优选算法】（第四十四篇）目录 ⻜地的数量&amp;#xff08;medium&amp;#xff09; 
题目解析 
讲解算法原理 
编写代码 
地图中的最⾼点&amp;#xff08;medium&amp;#xff09; 
题目解析 
讲解算法原理 
编写代码 ⻜地的数量&amp;#xff08;medium&amp;#xff09; 
题目解析 
1.题目链接&amp;#xff1a;. - 力扣&amp;#xff08;Le…阅读更多...LTD助力经营数字化，浙商数智营销学堂开讲入站营销新理念在10月18日下午&amp;#xff0c;杭州电子商务研究院精心策划并成功举办了首期“浙商数智营销学堂”。这场盛会在创业氛围浓郁的浙商大创业园好望院内拉开帷幕&amp;#xff0c;吸引了来自全国各地的30多位企业家、高管代表共襄盛举。 赵浩兴院长 赵浩兴院长代表杭州电子商务研究院致开幕…阅读更多...[笔记] 关于CreateProcessWithLogonW函数创建进程函数介绍 
https://learn.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-createprocesswithlogonw 
BOOL CreateProcessWithLogonW([in]                LPCWSTR               lpUsername,[in, optional]      LPCWSTR               lpDomain,[in]             …阅读更多...特征交叉03 LHUC (PPNet)LHUC 只能用于精排。 
多目标模型中的神经网络可以用全连接网络 、深度交叉网络 或者LHUC等。 语音识别中的LHUC 
说话者的特征, 例如id 做embadding 。LHUC中出现的神经网络有多个全连接层&amp;#xff0c;最后一个全连接层的激活函数是sigmoid *2&amp;#xff0c;单独作用到每一个元素…阅读更多...Solon 3.0 新特性：HttpUtils 了解一下Solon 3.0 引入一个叫 HttpUtils 小插件&amp;#xff0c;这是一个简单的同步 HTTP 客户端&amp;#xff0c;基于 URLConnection 适配&amp;#xff08;也支持切换为 OkHttp 适配&amp;#xff09;。使得编写 HTTP 客户端代码更加直观和易于阅读。 
使用 URLConnection 适配时&amp;#xff08;大小为 40…阅读更多...Redis Search系列 - 第六讲 基准测试 - Redis Search VS. MongoDB VS. ElasticSearch目录 一、引言二、Redis Search 2.x版本的性能提升三、Redis Search VS. MongoDB VS. ElasticSearch3.1 测试环境3.2 100%写 - 基准测试3.3 100%读 - 基准测试3.4 混合读/写/搜索 - 基准测试2.5 搜索延迟分析3.6 读延迟分析3.7 写延迟分析3.8 Redis Search VS. ElasticSearch3.…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:23 +0000</pubDate>
    </item>
    <item>
      <title>量化策略交易之PTrade量化软件如何获取逐笔委托行情！get_individual_entrust</title>
      <link>https://www.ppmy.cn/news/1541084.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维量化策略交易之PTrade量化软件如何获取逐笔委托行情！get_individual_entrustnews/2025/11/1 1:18:21/get_individual_entrust– 获取逐笔委托行情get_individual_entrust(stocks=None, data_count=50, start_pos=0, search_direction=1, is_dict=False)使用场景该函数在交易模块可用接口说明该接口用于获取当日逐笔委托行情数据。注意事项：1、沪深市场都有逐笔委托数据；2、逐笔委托，逐笔成交数据需开通level2行情才能获取到数据，否则无数据返回；参数stocks: 默认为当前股票池中代码列表(list[str])；data_count: 数据条数，默认为50，最大为200(int)；start_pos: 起始位置，默认为0(int)；search_direction: 搜索方向（1向前，2向后），默认为1(int)；is_dict: 返回类型（False-Panel; True-dict），默认为False(bool)；返回当入参is_dict为False时，正常返回Pandas.panel对象，异常时返回None。Items axis: 股票代码列表(str)；Major_axis axis: 数据索引为自然数列(DataFrame)；Minor_axis axis: 包含以下信息：business_time: 时间戳毫秒级(str:numpy.int64)；hq_px: 价格(str:numpy.float64)；business_amount: 委托数量(str:numpy.int64)；order_no: 委托编号(str:numpy.int64)；business_direction: 委托方向，0:卖，1:买，2:借入，3:出借(str:numpy.int64)；trans_kind: 委托类别，深圳市场(1:市价委托，2:限价委托，3:本方最优)，上海市场(4:增加订单 5:删除订单)(str:numpy.int64)；当入参is_dict为True时，返回dict类型数据。返回的数据格式如下：{股票代码(str): [[时间戳毫秒级(int), 价格(float), 委托数量(int), 委托编号(int), 委托方向(int)], ...], "fields": ["business_time", "hq_px", "business_amount", "order_no", "business_direction", "trans_kind"]}{"600570.SS": [[20220913105747848, 36.16, 700, 5383145, 0, 4], ...], "fields": ["business_time", "hq_px", "business_amount", "order_no", "business_direction", "trans_kind"]}示例def initialize(context):g.security = "000001.SZ"set_universe(g.security)def handle_data(context, data):# 获取当前股票池逐笔委托数据entrust = get_individual_entrust()log.info(entrust)# 获取指定股票列表逐笔委托数据entrust = get_individual_entrust(["000002.SZ", "000032.SZ"])log.info(entrust)# 获取委托量if entrust is not None:business_amount = entrust["000002.SZ"]["business_amount"]log.info("逐笔数据的委托量为：%s" % business_amount)http://www.ppmy.cn/news/1541084.html相关文章电商API：定义、功能、特点及广泛应用场景解析电商API的定义 
电商API&amp;#xff08;Electronic Commerce Application Programming Interface&amp;#xff09;是电子商务平台提供给开发者和商家的一种技术接口&amp;#xff0c;它允许第三方应用程序访问和操作平台的数据和服务。简单来说&amp;#xff0c;电商API就是一套预定义的规则和协…阅读更多...【优选算法】（第四十四篇）目录 ⻜地的数量&amp;#xff08;medium&amp;#xff09; 
题目解析 
讲解算法原理 
编写代码 
地图中的最⾼点&amp;#xff08;medium&amp;#xff09; 
题目解析 
讲解算法原理 
编写代码 ⻜地的数量&amp;#xff08;medium&amp;#xff09; 
题目解析 
1.题目链接&amp;#xff1a;. - 力扣&amp;#xff08;Le…阅读更多...LTD助力经营数字化，浙商数智营销学堂开讲入站营销新理念在10月18日下午&amp;#xff0c;杭州电子商务研究院精心策划并成功举办了首期“浙商数智营销学堂”。这场盛会在创业氛围浓郁的浙商大创业园好望院内拉开帷幕&amp;#xff0c;吸引了来自全国各地的30多位企业家、高管代表共襄盛举。 赵浩兴院长 赵浩兴院长代表杭州电子商务研究院致开幕…阅读更多...[笔记] 关于CreateProcessWithLogonW函数创建进程函数介绍 
https://learn.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-createprocesswithlogonw 
BOOL CreateProcessWithLogonW([in]                LPCWSTR               lpUsername,[in, optional]      LPCWSTR               lpDomain,[in]             …阅读更多...特征交叉03 LHUC (PPNet)LHUC 只能用于精排。 
多目标模型中的神经网络可以用全连接网络 、深度交叉网络 或者LHUC等。 语音识别中的LHUC 
说话者的特征, 例如id 做embadding 。LHUC中出现的神经网络有多个全连接层&amp;#xff0c;最后一个全连接层的激活函数是sigmoid *2&amp;#xff0c;单独作用到每一个元素…阅读更多...Solon 3.0 新特性：HttpUtils 了解一下Solon 3.0 引入一个叫 HttpUtils 小插件&amp;#xff0c;这是一个简单的同步 HTTP 客户端&amp;#xff0c;基于 URLConnection 适配&amp;#xff08;也支持切换为 OkHttp 适配&amp;#xff09;。使得编写 HTTP 客户端代码更加直观和易于阅读。 
使用 URLConnection 适配时&amp;#xff08;大小为 40…阅读更多...Redis Search系列 - 第六讲 基准测试 - Redis Search VS. MongoDB VS. ElasticSearch目录 一、引言二、Redis Search 2.x版本的性能提升三、Redis Search VS. MongoDB VS. ElasticSearch3.1 测试环境3.2 100%写 - 基准测试3.3 100%读 - 基准测试3.4 混合读/写/搜索 - 基准测试2.5 搜索延迟分析3.6 读延迟分析3.7 写延迟分析3.8 Redis Search VS. ElasticSearch3.…阅读更多...程序员的浪漫之给对象爬数据，没想到过程中竟然被写接口的老哥字段命名给秀到了！目录 一、序言二、分析需求三、找数据分析字段四、建个表开爬数据五、结语 一、序言 
最近对象转了销售岗&amp;#xff0c;她的领导布置了项任务&amp;#xff0c;一周要找500个对标客户的联系电话。看她又上天眼查、企查查、爱企查&amp;#xff0c;还上各种采购平台手动抄采购负责人的信息和…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:22 +0000</pubDate>
    </item>
    <item>
      <title>电商API：定义、功能、特点及广泛应用场景解析</title>
      <link>https://www.ppmy.cn/news/1541083.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维电商API：定义、功能、特点及广泛应用场景解析news/2025/11/1 1:18:20/电商API的定义电商API（Electronic Commerce Application Programming Interface）是电子商务平台提供给开发者和商家的一种技术接口，它允许第三方应用程序访问和操作平台的数据和服务。简单来说，电商API就是一套预定义的规则和协议，使得不同的软件系统之间能够进行数据交换和通信，特别是在电子商务领域。电商API的功能电商API在电商领域的功能非常广泛，主要包括以下几个方面：商品管理：允许开发者获取商品信息、管理商品库存、更新商品价格等。订单处理：支持创建新订单、查询订单状态、修改订单信息、处理退换货等。用户管理：用于管理用户信息、验证用户身份、处理用户登录和注销等。支付集成：集成各类支付方式，处理支付请求、查询支付状态、处理退款和结算等。物流跟踪：提供物流信息的查询和跟踪功能，帮助商家和消费者实时了解订单配送状态。营销推广：支持发送营销信息、管理优惠券和促销活动、分析用户行为等。数据分析：收集和分析销售数据、用户行为、流量等，为商家提供商业分析支持。电商API的特点标准化：电商API遵循一定的标准和协议，使得不同系统之间的数据交换变得可能。安全性：通过认证和授权机制，确保数据的安全和隐私。灵活性：允许开发者根据自己的需求定制数据请求和操作。扩展性：随着业务的发展，API可以轻松扩展以支持更多的功能和服务。实时性：API可以提供实时数据，帮助商家快速响应市场变化。电商API的应用场景电商API在电商领域的应用场景非常广泛，包括但不限于以下几个方面：电商平台与商家之间的数据同步：通过商品API和订单API，电商平台可以实时获取商家的商品信息和订单数据，实现数据的同步和更新。支付与结算：通过支付API，电商平台可以与支付机构进行对接，实现支付请求的处理和结算工作。物流跟踪与配送：通过物流API，电商平台可以实时查询物流信息，跟踪包裹状态，并与物流服务商进行协同配送。个性化推荐与营销：通过营销API和用户API，电商平台可以分析用户行为数据，实现个性化推荐和精准营销。跨境电商与国际贸易：通过跨境电商API，电商平台可以实现跨国界的商品交易和支付结算工作，促进国际贸易的发展。总结电商API作为连接电商平台、商家、物流服务商、支付机构等各方的重要桥梁，为电商领域的创新和发展提供了强大的技术支持。通过合理使用和调用电商API，可以极大地提高业务效率，促进创新，并为商家提供更多的商业机会http://www.ppmy.cn/news/1541083.html相关文章【优选算法】（第四十四篇）目录 ⻜地的数量&amp;#xff08;medium&amp;#xff09; 
题目解析 
讲解算法原理 
编写代码 
地图中的最⾼点&amp;#xff08;medium&amp;#xff09; 
题目解析 
讲解算法原理 
编写代码 ⻜地的数量&amp;#xff08;medium&amp;#xff09; 
题目解析 
1.题目链接&amp;#xff1a;. - 力扣&amp;#xff08;Le…阅读更多...LTD助力经营数字化，浙商数智营销学堂开讲入站营销新理念在10月18日下午&amp;#xff0c;杭州电子商务研究院精心策划并成功举办了首期“浙商数智营销学堂”。这场盛会在创业氛围浓郁的浙商大创业园好望院内拉开帷幕&amp;#xff0c;吸引了来自全国各地的30多位企业家、高管代表共襄盛举。 赵浩兴院长 赵浩兴院长代表杭州电子商务研究院致开幕…阅读更多...[笔记] 关于CreateProcessWithLogonW函数创建进程函数介绍 
https://learn.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-createprocesswithlogonw 
BOOL CreateProcessWithLogonW([in]                LPCWSTR               lpUsername,[in, optional]      LPCWSTR               lpDomain,[in]             …阅读更多...特征交叉03 LHUC (PPNet)LHUC 只能用于精排。 
多目标模型中的神经网络可以用全连接网络 、深度交叉网络 或者LHUC等。 语音识别中的LHUC 
说话者的特征, 例如id 做embadding 。LHUC中出现的神经网络有多个全连接层&amp;#xff0c;最后一个全连接层的激活函数是sigmoid *2&amp;#xff0c;单独作用到每一个元素…阅读更多...Solon 3.0 新特性：HttpUtils 了解一下Solon 3.0 引入一个叫 HttpUtils 小插件&amp;#xff0c;这是一个简单的同步 HTTP 客户端&amp;#xff0c;基于 URLConnection 适配&amp;#xff08;也支持切换为 OkHttp 适配&amp;#xff09;。使得编写 HTTP 客户端代码更加直观和易于阅读。 
使用 URLConnection 适配时&amp;#xff08;大小为 40…阅读更多...Redis Search系列 - 第六讲 基准测试 - Redis Search VS. MongoDB VS. ElasticSearch目录 一、引言二、Redis Search 2.x版本的性能提升三、Redis Search VS. MongoDB VS. ElasticSearch3.1 测试环境3.2 100%写 - 基准测试3.3 100%读 - 基准测试3.4 混合读/写/搜索 - 基准测试2.5 搜索延迟分析3.6 读延迟分析3.7 写延迟分析3.8 Redis Search VS. ElasticSearch3.…阅读更多...程序员的浪漫之给对象爬数据，没想到过程中竟然被写接口的老哥字段命名给秀到了！目录 一、序言二、分析需求三、找数据分析字段四、建个表开爬数据五、结语 一、序言 
最近对象转了销售岗&amp;#xff0c;她的领导布置了项任务&amp;#xff0c;一周要找500个对标客户的联系电话。看她又上天眼查、企查查、爱企查&amp;#xff0c;还上各种采购平台手动抄采购负责人的信息和…阅读更多...基于SSM机场网上订票系统的设计管理员账户功能包括&amp;#xff1a;系统首页&amp;#xff0c;个人中心&amp;#xff0c;用户管理&amp;#xff0c;机票信息管理&amp;#xff0c;订单信息管理&amp;#xff0c;机场广告管理&amp;#xff0c;系统管理 
前台账号功能包括&amp;#xff1a;系统首页&amp;#xff0c;个人中心&amp;#xff0c;机票信息&amp;#xf…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:20 +0000</pubDate>
    </item>
    <item>
      <title>【优选算法】（第四十四篇）</title>
      <link>https://www.ppmy.cn/news/1541082.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【优选算法】（第四十四篇）news/2025/11/1 1:18:19/目录⻜地的数量（medium）题目解析讲解算法原理编写代码地图中的最⾼点（medium）题目解析讲解算法原理编写代码⻜地的数量（medium）题目解析1.题目链接：. - 力扣（LeetCode）2.题目描述给你⼀个⼤⼩为 m x n 的⼆进制矩阵 grid ，其中 0 表⽰⼀个海洋单元格、 1 表⽰⼀个陆地单元格。⼀次移动是指从⼀个陆地单元格⾛到另⼀个相邻（上、下、左、右）的陆地单元格或跨过 grid 的边界。返回⽹格中⽆法在任意次数的移动中离开⽹格边界的陆地单元格的数量。⽰例1：输⼊：grid=[[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]输出：3解释：有三个1被0包围。⼀个1没有被包围，因为它在边界上。⽰例2：输⼊：grid=[[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]输出：0解释：所有1都在边界上或可以到达边界。提⽰：◦ m == grid.length◦ n == grid[i].length◦ 1 &lt;= m, n &lt;= 500◦ grid[i][j] 的值为 0 或 1讲解算法原理解法：算法思路：正难则反：从边上的 1 开始搜索，把与边上 1 相连的联通区域全部标记⼀下；然后再遍历⼀遍矩阵，看看哪些位置的 1 没有被标记即可标记的时候，可以⽤「多源 bfs 」解决。编写代码c++算法代码：class Solution
{int dx[4] = {0, 0, 1, -1};int dy[4] = {1, -1, 0, 0};
public:int numEnclaves(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {int m = grid.size(), n = grid[0].size();vector&lt;vector&lt;bool&gt;&gt; vis(m, vector&lt;bool&gt;(n));queue&lt;pair&lt;int, int&gt;&gt; q;// 1. 把边上的 1 加⼊到队列中for(int i = 0; i &lt; m; i++)for(int j = 0; j &lt; n; j++)if(i == 0 || i == m - 1 || j == 0 || j == n - 1){if(grid[i][j] == 1){q.push({i, j});vis[i][j] = true;}}// 2. 多源 bfswhile(q.size()){auto [a, b] = q.front();q.pop();for(int i = 0; i &lt; 4; i++){int x = a + dx[i], y = b + dy[i];if(x &gt;= 0 &amp;&amp; x &lt; m &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; n &amp;&amp; grid[x][y] == 1 &amp;&amp; 
!vis[x][y]){vis[x][y] = true;q.push({x, y});}}}// 3. 统计结果int ret = 0;for(int i = 0; i &lt; m; i++)for(int j = 0; j &lt; n; j++)if(grid[i][j] == 1 &amp;&amp; !vis[i][j])ret++;return ret;}
};java算法代码：class Solution
{int[] dx = {0, 0, 1, -1};int[] dy = {1, -1, 0, 0};public int numEnclaves(int[][] grid) {int m = grid.length, n = grid[0].length;boolean[][] vis = new boolean[m][n];Queue&lt;int[]&gt; q = new LinkedList&lt;&gt;();// 1. 把边上的 1 全部加⼊到队列中for(int i = 0; i &lt; m; i++)for(int j = 0; j &lt; n; j++)if(i == 0 || i == m - 1 || j == 0 || j == n - 1){if(grid[i][j] == 1){q.add(new int[]{i, j});vis[i][j] = true;}}// 2. 多源 bfswhile(!q.isEmpty()){int[] t = q.poll();int a = t[0], b = t[1];for(int i = 0; i &lt; 4; i++){int x = a + dx[i], y = b + dy[i];if(x &gt;= 0 &amp;&amp; x &lt; m &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; n &amp;&amp; grid[x][y] == 1 &amp;&amp; 
!vis[x][y]){q.add(new int[]{x, y});vis[x][y] = true;}}}// 3. 提取结果int ret = 0;for(int i = 0; i &lt; m; i++)for(int j = 0; j &lt; n; j++)if(grid[i][j] == 1 &amp;&amp; !vis[i][j])ret++;return ret;}
}地图中的最⾼点（medium）题目解析1.题目链接：. - 力扣（LeetCode）2.题目描述给你⼀个⼤⼩为 m x n 的整数矩阵 isWater ，它代表了⼀个由陆地和⽔域单元格组成的地图。• 如果 isWater[i][j] == 0 ，格⼦ (i, j) 是⼀个陆地格⼦。• 如果 isWater[i][j] == 1 ，格⼦ (i, j) 是⼀个⽔域格⼦。你需要按照如下规则给每个单元格安排⾼度：• 每个格⼦的⾼度都必须是⾮负的。• 如果⼀个格⼦是⽔域，那么它的⾼度必须为 0 。• 任意相邻的格⼦⾼度差⾄多为 1 。当两个格⼦在正东、南、西、北⽅向上相互紧挨着，就称它们为相邻的格⼦。（也就是说它们有⼀条公共边）找到⼀种安排⾼度的⽅案，使得矩阵中的最⾼⾼度值最⼤。请你返回⼀个⼤⼩为 m x n 的整数矩阵 height ，其中 height[i][j] 是格⼦ (i, j) 的⾼度。如果有多种解法，请返回任意⼀个。⽰例1：输⼊：isWater=[[0,1],[0,0]]输出：[[1,0],[2,1]]解释：上图展⽰了给各个格⼦安排的⾼度。蓝⾊格⼦是⽔域格，绿⾊格⼦是陆地格。⽰例2：输⼊：isWater=[[0,0,1],[1,0,0],[0,0,0]]输出：[[1,1,0],[0,1,1],[1,2,2]]解释：所有安排⽅案中，最⾼可⾏⾼度为2。任意安排⽅案中，只要最⾼⾼度为2且符合上述规则的，都为可⾏⽅案。提⽰：◦ m == isWater.length◦ n == isWater[i].length◦ 1 &lt;= m, n &lt;= 1000◦ isWater[i][j] 要么是 0 ，要么是 1 。◦ ⾄少有1个⽔域格⼦。讲解算法原理解法：算法思路：01矩阵的变型题，直接⽤多源bfs解决即可。编写代码c++算法代码：class Solution
{int dx[4] = {0, 0, 1, -1};int dy[4] = {1, -1, 0, 0};
public:vector&lt;vector&lt;int&gt;&gt; highestPeak(vector&lt;vector&lt;int&gt;&gt;&amp; isWater) {int m = isWater.size(), n = isWater[0].size();vector&lt;vector&lt;int&gt;&gt; dist(m, vector&lt;int&gt;(n, -1));queue&lt;pair&lt;int, int&gt;&gt; q;// 1. 把所有的源点加⼊到队列⾥⾯for(int i = 0; i &lt; m; i++)for(int j = 0; j &lt; n; j++)if(isWater[i][j]){dist[i][j] = 0;q.push({i, j});}// 2. 多源 bfswhile(q.size()){auto [a, b] = q.front(); q.pop();for(int i = 0; i &lt; 4; i++){int x = a + dx[i], y = b + dy[i];if(x &gt;= 0 &amp;&amp; x &lt; m &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; n &amp;&amp; dist[x][y] == -1){dist[x][y] = dist[a][b] + 1;q.push({x, y});}}}return dist;}
};java算法代码：class Solution
{int[] dx = {0, 0, -1, 1};int[] dy = {1, -1, 0, 0};public int[][] highestPeak(int[][] isWater) {int m = isWater.length, n = isWater[0].length;int[][] dist = new int[m][n];for(int i = 0; i &lt; m; i++)for(int j = 0; j &lt; n; j++)dist[i][j] = -1;Queue&lt;int[]&gt; q = new LinkedList&lt;&gt;();// 1. 所有的源点加⼊到队列⾥⾯for(int i = 0; i &lt; m; i++)for(int j = 0; j &lt; n; j++)if(isWater[i][j] == 1){q.add(new int[]{i, j});dist[i][j] = 0;}// 2. 多源 bfswhile(!q.isEmpty()){int[] t = q.poll();int a = t[0], b = t[1];for(int i = 0; i &lt; 4; i++){int x = a + dx[i], y = b + dy[i];if(x &gt;= 0 &amp;&amp; x &lt; m &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; n &amp;&amp; dist[x][y] == -1){dist[x][y] = dist[a][b] + 1;q.add(new int[]{x, y});}}}return dist;}
}http://www.ppmy.cn/news/1541082.html相关文章LTD助力经营数字化，浙商数智营销学堂开讲入站营销新理念在10月18日下午&amp;#xff0c;杭州电子商务研究院精心策划并成功举办了首期“浙商数智营销学堂”。这场盛会在创业氛围浓郁的浙商大创业园好望院内拉开帷幕&amp;#xff0c;吸引了来自全国各地的30多位企业家、高管代表共襄盛举。 赵浩兴院长 赵浩兴院长代表杭州电子商务研究院致开幕…阅读更多...[笔记] 关于CreateProcessWithLogonW函数创建进程函数介绍 
https://learn.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-createprocesswithlogonw 
BOOL CreateProcessWithLogonW([in]                LPCWSTR               lpUsername,[in, optional]      LPCWSTR               lpDomain,[in]             …阅读更多...特征交叉03 LHUC (PPNet)LHUC 只能用于精排。 
多目标模型中的神经网络可以用全连接网络 、深度交叉网络 或者LHUC等。 语音识别中的LHUC 
说话者的特征, 例如id 做embadding 。LHUC中出现的神经网络有多个全连接层&amp;#xff0c;最后一个全连接层的激活函数是sigmoid *2&amp;#xff0c;单独作用到每一个元素…阅读更多...Solon 3.0 新特性：HttpUtils 了解一下Solon 3.0 引入一个叫 HttpUtils 小插件&amp;#xff0c;这是一个简单的同步 HTTP 客户端&amp;#xff0c;基于 URLConnection 适配&amp;#xff08;也支持切换为 OkHttp 适配&amp;#xff09;。使得编写 HTTP 客户端代码更加直观和易于阅读。 
使用 URLConnection 适配时&amp;#xff08;大小为 40…阅读更多...Redis Search系列 - 第六讲 基准测试 - Redis Search VS. MongoDB VS. ElasticSearch目录 一、引言二、Redis Search 2.x版本的性能提升三、Redis Search VS. MongoDB VS. ElasticSearch3.1 测试环境3.2 100%写 - 基准测试3.3 100%读 - 基准测试3.4 混合读/写/搜索 - 基准测试2.5 搜索延迟分析3.6 读延迟分析3.7 写延迟分析3.8 Redis Search VS. ElasticSearch3.…阅读更多...程序员的浪漫之给对象爬数据，没想到过程中竟然被写接口的老哥字段命名给秀到了！目录 一、序言二、分析需求三、找数据分析字段四、建个表开爬数据五、结语 一、序言 
最近对象转了销售岗&amp;#xff0c;她的领导布置了项任务&amp;#xff0c;一周要找500个对标客户的联系电话。看她又上天眼查、企查查、爱企查&amp;#xff0c;还上各种采购平台手动抄采购负责人的信息和…阅读更多...基于SSM机场网上订票系统的设计管理员账户功能包括&amp;#xff1a;系统首页&amp;#xff0c;个人中心&amp;#xff0c;用户管理&amp;#xff0c;机票信息管理&amp;#xff0c;订单信息管理&amp;#xff0c;机场广告管理&amp;#xff0c;系统管理 
前台账号功能包括&amp;#xff1a;系统首页&amp;#xff0c;个人中心&amp;#xff0c;机票信息&amp;#xf…阅读更多...js 鼠标拖动canvas画布功能点&amp;#xff1a; 
鼠标拖拽canvas画布移动鼠标检测rect鼠标检测circle 
代码 
&lt;!DOCTYPE html&gt;
&lt;html lang"en"&gt;&lt;head&gt;&lt;meta charset"UTF-8" /&gt;&lt;meta name"viewport" content"widthdevice-width, initial-sc…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:20 +0000</pubDate>
    </item>
    <item>
      <title>LTD助力经营数字化，浙商数智营销学堂开讲入站营销新理念</title>
      <link>https://www.ppmy.cn/news/1541081.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维LTD助力经营数字化，浙商数智营销学堂开讲入站营销新理念news/2025/11/1 1:18:18/在10月18日下午，杭州电子商务研究院精心策划并成功举办了首期“浙商数智营销学堂”。这场盛会在创业氛围浓郁的浙商大创业园好望院内拉开帷幕，吸引了来自全国各地的30多位企业家、高管代表共襄盛举。赵浩兴院长赵浩兴院长代表杭州电子商务研究院致开幕辞，他不仅对远道而来的嘉宾表示热烈的欢迎，还深入阐述了研究院的创立初衷、崇高使命以及近年来在数字化营销、电子商务2.0、跨境电商等多个领域的辉煌成就。庞伟老师特邀嘉宾庞伟老师以“数智时代B2B企业如何建设应对不确定性的营销体系”为主题，从文化、流程、技术、制度、组织等多个维度进行了详细讲解。王钦老师另一位重量级嘉宾王钦老师则聚焦于“生意表达是获取线索的超级杠杆”，他深入浅出地剖析了营销的六大环节、六大伏击动作以及生意表达的五个层次，阐述了生意表达是一切数字化营销活动的开始，是一切流量的抓手，同时为在场企业家们提供了宝贵的实战经验。副院长徐一帆老师活动高潮部分由副院长徐一帆老师担纲，他以“B2B企业数字化营销让客户找上门”为主题，围绕LTD“从引导到成交（Lead to deal）”的理论体系构建、线索获取、客户旅程、订单、复购的流程及途径、案例分享做了详细的介绍,帮助现场与直播端的企业家透过现象看清营销和互联网的本质，积极推动企业能重视自己的私域--数字化官网的建设，通过产品运营、内容运营、市场运营获得销售线索。实现销售自动化，让客户自己找上门，提升销售效率、降低营销成本、构建数智营销体系“生意表达好、业务进系统、客户找上门、销售自动化、服务在线化”形成闭环，为企业营销提供了完整的一揽子解决方案！此次活动虽然筹备时间紧迫，但三位老师的三个多小时的精彩分享却赢得了阵阵掌声，大家听得是意犹未尽。活动结束，参加活动的学员围着老师展开了热烈的讨论。大家一致表示，希望今后多举办这样的活动，能为企业营销提供更多更新的解决方案！http://www.ppmy.cn/news/1541081.html相关文章[笔记] 关于CreateProcessWithLogonW函数创建进程函数介绍 
https://learn.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-createprocesswithlogonw 
BOOL CreateProcessWithLogonW([in]                LPCWSTR               lpUsername,[in, optional]      LPCWSTR               lpDomain,[in]             …阅读更多...特征交叉03 LHUC (PPNet)LHUC 只能用于精排。 
多目标模型中的神经网络可以用全连接网络 、深度交叉网络 或者LHUC等。 语音识别中的LHUC 
说话者的特征, 例如id 做embadding 。LHUC中出现的神经网络有多个全连接层&amp;#xff0c;最后一个全连接层的激活函数是sigmoid *2&amp;#xff0c;单独作用到每一个元素…阅读更多...Solon 3.0 新特性：HttpUtils 了解一下Solon 3.0 引入一个叫 HttpUtils 小插件&amp;#xff0c;这是一个简单的同步 HTTP 客户端&amp;#xff0c;基于 URLConnection 适配&amp;#xff08;也支持切换为 OkHttp 适配&amp;#xff09;。使得编写 HTTP 客户端代码更加直观和易于阅读。 
使用 URLConnection 适配时&amp;#xff08;大小为 40…阅读更多...Redis Search系列 - 第六讲 基准测试 - Redis Search VS. MongoDB VS. ElasticSearch目录 一、引言二、Redis Search 2.x版本的性能提升三、Redis Search VS. MongoDB VS. ElasticSearch3.1 测试环境3.2 100%写 - 基准测试3.3 100%读 - 基准测试3.4 混合读/写/搜索 - 基准测试2.5 搜索延迟分析3.6 读延迟分析3.7 写延迟分析3.8 Redis Search VS. ElasticSearch3.…阅读更多...程序员的浪漫之给对象爬数据，没想到过程中竟然被写接口的老哥字段命名给秀到了！目录 一、序言二、分析需求三、找数据分析字段四、建个表开爬数据五、结语 一、序言 
最近对象转了销售岗&amp;#xff0c;她的领导布置了项任务&amp;#xff0c;一周要找500个对标客户的联系电话。看她又上天眼查、企查查、爱企查&amp;#xff0c;还上各种采购平台手动抄采购负责人的信息和…阅读更多...基于SSM机场网上订票系统的设计管理员账户功能包括&amp;#xff1a;系统首页&amp;#xff0c;个人中心&amp;#xff0c;用户管理&amp;#xff0c;机票信息管理&amp;#xff0c;订单信息管理&amp;#xff0c;机场广告管理&amp;#xff0c;系统管理 
前台账号功能包括&amp;#xff1a;系统首页&amp;#xff0c;个人中心&amp;#xff0c;机票信息&amp;#xf…阅读更多...js 鼠标拖动canvas画布功能点&amp;#xff1a; 
鼠标拖拽canvas画布移动鼠标检测rect鼠标检测circle 
代码 
&lt;!DOCTYPE html&gt;
&lt;html lang"en"&gt;&lt;head&gt;&lt;meta charset"UTF-8" /&gt;&lt;meta name"viewport" content"widthdevice-width, initial-sc…阅读更多...Rust编程语言变量的所有权（ownership）文章目录 什么是所有权所有权规则转让所有权变量与数据交互的方式(一):移动变量与数据交互的方式(二):克隆只在栈上的数据:拷贝所有权与函数返回值与作用域引用和借用可变引用悬垂引用（Dangling References）引用的规则什么是所有权 
所有权（ownership）是Rust 的核心功能之一…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:19 +0000</pubDate>
    </item>
    <item>
      <title>[笔记] 关于CreateProcessWithLogonW函数创建进程</title>
      <link>https://www.ppmy.cn/news/1541080.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维[笔记] 关于CreateProcessWithLogonW函数创建进程news/2025/11/1 1:18:17/函数介绍https://learn.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-createprocesswithlogonwBOOLCreateProcessWithLogonW([in]LPCWSTR               lpUsername,[in,optional]LPCWSTR               lpDomain,[in]LPCWSTR               lpPassword,[in]DWORD                 dwLogonFlags,[in,optional]LPCWSTR               lpApplicationName,[in,out,optional]LPWSTR                lpCommandLine,[in]DWORD                 dwCreationFlags,[in,optional]LPVOID                lpEnvironment,[in,optional]LPCWSTR               lpCurrentDirectory,[in]LPSTARTUPINFOW        lpStartupInfo,[out]LPPROCESS_INFORMATION lpProcessInformation);几种使用方法使用存在的账号信息创建进程使用空网络账号信息创建进程所以即使账号信息实际不存在也可以创建进程，只是无权访问网络资源if(!CreateProcessWithLogonW(L"MalseclogonUser",L"MalseclogonDomain",L"MalseclogonPwd",LOGON_NETCREDENTIALS_ONLY,NULL,cmdline,0,NULL,NULL,&amp;startInfo,&amp;procInfo)){printf("CreateProcessWithLogonW() failed with error code %d \n",GetLastError());}else{// the returned handles in procInfo are wrong and duped into the spoofed parent process, so we can't close handles or wait for process end.printf("Spoofed process %S created correctly as child of PID %d using CreateProcessWithLogonW()!",cmdline,pid);}http://www.ppmy.cn/news/1541080.html相关文章特征交叉03 LHUC (PPNet)LHUC 只能用于精排。 
多目标模型中的神经网络可以用全连接网络 、深度交叉网络 或者LHUC等。 语音识别中的LHUC 
说话者的特征, 例如id 做embadding 。LHUC中出现的神经网络有多个全连接层&amp;#xff0c;最后一个全连接层的激活函数是sigmoid *2&amp;#xff0c;单独作用到每一个元素…阅读更多...Solon 3.0 新特性：HttpUtils 了解一下Solon 3.0 引入一个叫 HttpUtils 小插件&amp;#xff0c;这是一个简单的同步 HTTP 客户端&amp;#xff0c;基于 URLConnection 适配&amp;#xff08;也支持切换为 OkHttp 适配&amp;#xff09;。使得编写 HTTP 客户端代码更加直观和易于阅读。 
使用 URLConnection 适配时&amp;#xff08;大小为 40…阅读更多...Redis Search系列 - 第六讲 基准测试 - Redis Search VS. MongoDB VS. ElasticSearch目录 一、引言二、Redis Search 2.x版本的性能提升三、Redis Search VS. MongoDB VS. ElasticSearch3.1 测试环境3.2 100%写 - 基准测试3.3 100%读 - 基准测试3.4 混合读/写/搜索 - 基准测试2.5 搜索延迟分析3.6 读延迟分析3.7 写延迟分析3.8 Redis Search VS. ElasticSearch3.…阅读更多...程序员的浪漫之给对象爬数据，没想到过程中竟然被写接口的老哥字段命名给秀到了！目录 一、序言二、分析需求三、找数据分析字段四、建个表开爬数据五、结语 一、序言 
最近对象转了销售岗&amp;#xff0c;她的领导布置了项任务&amp;#xff0c;一周要找500个对标客户的联系电话。看她又上天眼查、企查查、爱企查&amp;#xff0c;还上各种采购平台手动抄采购负责人的信息和…阅读更多...基于SSM机场网上订票系统的设计管理员账户功能包括&amp;#xff1a;系统首页&amp;#xff0c;个人中心&amp;#xff0c;用户管理&amp;#xff0c;机票信息管理&amp;#xff0c;订单信息管理&amp;#xff0c;机场广告管理&amp;#xff0c;系统管理 
前台账号功能包括&amp;#xff1a;系统首页&amp;#xff0c;个人中心&amp;#xff0c;机票信息&amp;#xf…阅读更多...js 鼠标拖动canvas画布功能点&amp;#xff1a; 
鼠标拖拽canvas画布移动鼠标检测rect鼠标检测circle 
代码 
&lt;!DOCTYPE html&gt;
&lt;html lang"en"&gt;&lt;head&gt;&lt;meta charset"UTF-8" /&gt;&lt;meta name"viewport" content"widthdevice-width, initial-sc…阅读更多...Rust编程语言变量的所有权（ownership）文章目录 什么是所有权所有权规则转让所有权变量与数据交互的方式(一):移动变量与数据交互的方式(二):克隆只在栈上的数据:拷贝所有权与函数返回值与作用域引用和借用可变引用悬垂引用（Dangling References）引用的规则什么是所有权 
所有权（ownership）是Rust 的核心功能之一…阅读更多...ARAIM在航空领域的重要性及其面临的主要挑战笔者这篇博客主要目的是总结目前ARAIM技术面临的主要问题&amp;#xff0c;为做高级接收机自主完好性的小伙伴提供论文创新点思路。对于研究方向迷茫的小伙伴可以参考ARAIM目前存在的主要问题&amp;#xff0c;展开相关研究&amp;#xff0c;希望该博客对读者有所帮助。 
1.全球卫星导航系统发…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:18 +0000</pubDate>
    </item>
    <item>
      <title>特征交叉03 LHUC (PPNet)</title>
      <link>https://www.ppmy.cn/news/1541079.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维特征交叉03 LHUC (PPNet)news/2025/11/1 1:18:16/LHUC 只能用于精排。多目标模型中的神经网络可以用全连接网络 、深度交叉网络 或者LHUC等。语音识别中的LHUC说话者的特征, 例如id 做embadding 。LHUC中出现的神经网络有多个全连接层，最后一个全连接层的激活函数是sigmoid *2，单独作用到每一个元素上，从而输出向量的元素都介于0-2之间。这样的变化，会放大某些特征，缩小另一些特征，实现个性化。两个输出向量的形状必须一致。推荐系统排序模型中的LHUChttp://www.ppmy.cn/news/1541079.html相关文章Solon 3.0 新特性：HttpUtils 了解一下Solon 3.0 引入一个叫 HttpUtils 小插件&amp;#xff0c;这是一个简单的同步 HTTP 客户端&amp;#xff0c;基于 URLConnection 适配&amp;#xff08;也支持切换为 OkHttp 适配&amp;#xff09;。使得编写 HTTP 客户端代码更加直观和易于阅读。 
使用 URLConnection 适配时&amp;#xff08;大小为 40…阅读更多...Redis Search系列 - 第六讲 基准测试 - Redis Search VS. MongoDB VS. ElasticSearch目录 一、引言二、Redis Search 2.x版本的性能提升三、Redis Search VS. MongoDB VS. ElasticSearch3.1 测试环境3.2 100%写 - 基准测试3.3 100%读 - 基准测试3.4 混合读/写/搜索 - 基准测试2.5 搜索延迟分析3.6 读延迟分析3.7 写延迟分析3.8 Redis Search VS. ElasticSearch3.…阅读更多...程序员的浪漫之给对象爬数据，没想到过程中竟然被写接口的老哥字段命名给秀到了！目录 一、序言二、分析需求三、找数据分析字段四、建个表开爬数据五、结语 一、序言 
最近对象转了销售岗&amp;#xff0c;她的领导布置了项任务&amp;#xff0c;一周要找500个对标客户的联系电话。看她又上天眼查、企查查、爱企查&amp;#xff0c;还上各种采购平台手动抄采购负责人的信息和…阅读更多...基于SSM机场网上订票系统的设计管理员账户功能包括&amp;#xff1a;系统首页&amp;#xff0c;个人中心&amp;#xff0c;用户管理&amp;#xff0c;机票信息管理&amp;#xff0c;订单信息管理&amp;#xff0c;机场广告管理&amp;#xff0c;系统管理 
前台账号功能包括&amp;#xff1a;系统首页&amp;#xff0c;个人中心&amp;#xff0c;机票信息&amp;#xf…阅读更多...js 鼠标拖动canvas画布功能点&amp;#xff1a; 
鼠标拖拽canvas画布移动鼠标检测rect鼠标检测circle 
代码 
&lt;!DOCTYPE html&gt;
&lt;html lang"en"&gt;&lt;head&gt;&lt;meta charset"UTF-8" /&gt;&lt;meta name"viewport" content"widthdevice-width, initial-sc…阅读更多...Rust编程语言变量的所有权（ownership）文章目录 什么是所有权所有权规则转让所有权变量与数据交互的方式(一):移动变量与数据交互的方式(二):克隆只在栈上的数据:拷贝所有权与函数返回值与作用域引用和借用可变引用悬垂引用（Dangling References）引用的规则什么是所有权 
所有权（ownership）是Rust 的核心功能之一…阅读更多...ARAIM在航空领域的重要性及其面临的主要挑战笔者这篇博客主要目的是总结目前ARAIM技术面临的主要问题&amp;#xff0c;为做高级接收机自主完好性的小伙伴提供论文创新点思路。对于研究方向迷茫的小伙伴可以参考ARAIM目前存在的主要问题&amp;#xff0c;展开相关研究&amp;#xff0c;希望该博客对读者有所帮助。 
1.全球卫星导航系统发…阅读更多...Axure使用教程，产品经理如何用Axure制作一份高质量高保真的OA办公管理系统原型?附源文件下载OA办公管理系统&amp;#xff08;Office Automation Management System&amp;#xff09;是通过现代计算机和通信技术&amp;#xff0c;将办公过程中的信息、数据和流程进行自动化处理&amp;#xff0c;以提高工作效率、降低成本的一套系统。构建OA办公管理系统涉及多个步骤&amp;#xff0c;以下是一个概…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:16 +0000</pubDate>
    </item>
    <item>
      <title>Solon 3.0 新特性：HttpUtils 了解一下</title>
      <link>https://www.ppmy.cn/news/1541078.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Solon 3.0 新特性：HttpUtils 了解一下news/2025/11/1 1:18:15/Solon 3.0 引入一个叫 HttpUtils 小插件，这是一个简单的同步 HTTP 客户端，基于 URLConnection 适配（也支持切换为 OkHttp 适配）。使得编写 HTTP 客户端代码更加直观和易于阅读。使用 URLConnection 适配时（大小为 40KB 左右）。默认使用 OkHttp 适配时（大小为 3.1MB 左右）。当引入 okhttp 包时，自动切换为 okhttp 适配。一、请求操作HEAD 请求并返回 status codeintcode=HttpUtils.http("http://localhost:8080/hello").head();GET 请求并返回 body stringStringbody=HttpUtils.http("http://localhost:8080/hello").get();GET 请求并返回 body as bean//for BeanBookbook=HttpUtils.http("http://localhost:8080/book?bookId=1").getAs(Book.class);二、提交操作PUT、PATCH、DELETE 数据提交，与 POST 相同。POST 请求并返回 body stirng (x-www-form-urlencoded)//x-www-form-urlencodedStringbody=HttpUtils.http("http://localhost:8080/hello").data("name","world").post();POST 请求并返回 body stirng (form-data)//form-dataStringbody=HttpUtils.http("http://localhost:8080/hello").data("name","world").post(true);// useMultipart//form-data :: upload-fileStringbody=HttpUtils.http("http://localhost:8080/hello").data("name",newFile("/data/demo.jpg")).post(true);// useMultipartPOST 请求并返回 body stirng (body-raw)//body-jsonStringbody=HttpUtils.http("http://localhost:8080/hello").bodyOfJson("{\"name\":\"world\"}").post();POST 请求并返回 body as bean (body-raw)//for BeanResultbody=HttpUtils.http("http://localhost:8080/book").bodyOfBean(book)//会通过 serializer 指定 contentType；默认为 json serializer.postAs(Result.class);//for Bean generic typeResult&lt;User&gt;body=HttpUtils.http("http://localhost:8080/book").bodyOfBean(book).postAs(newResult&lt;User&gt;(){}.getClass());//通过临时类构建泛型（或别的方式）三、高级操作获取完整的响应（用完要关闭）try(HttpResponseresp=HttpUtils.http("http://localhost:8080/hello").data("name","world").exec("POST")){intcode=resp.code();Stringhead=resp.header("Demo-Header");Stringbody=resp.bodyAsString();Booksbody=resp.bodyAsBean(Books.class);}配置序列化器。默认为 json，比如改为 fury；或者自己定义。FuryBytesSerializerserializer=newFuryBytesSerializer();Resultbody=HttpUtils.http("http://localhost:8080/book").serializer(serializer).bodyOfBean(book).postAs(Result.class);四、总结HttpUtils 的几个小优点：简单的 API。主要就是简单！也很小巧。支持自动序列化（使用了 solon serializer 接口规范；忆适配的序列化插件可直接用）支持泛型http://www.ppmy.cn/news/1541078.html相关文章Redis Search系列 - 第六讲 基准测试 - Redis Search VS. MongoDB VS. ElasticSearch目录 一、引言二、Redis Search 2.x版本的性能提升三、Redis Search VS. MongoDB VS. ElasticSearch3.1 测试环境3.2 100%写 - 基准测试3.3 100%读 - 基准测试3.4 混合读/写/搜索 - 基准测试2.5 搜索延迟分析3.6 读延迟分析3.7 写延迟分析3.8 Redis Search VS. ElasticSearch3.…阅读更多...程序员的浪漫之给对象爬数据，没想到过程中竟然被写接口的老哥字段命名给秀到了！目录 一、序言二、分析需求三、找数据分析字段四、建个表开爬数据五、结语 一、序言 
最近对象转了销售岗&amp;#xff0c;她的领导布置了项任务&amp;#xff0c;一周要找500个对标客户的联系电话。看她又上天眼查、企查查、爱企查&amp;#xff0c;还上各种采购平台手动抄采购负责人的信息和…阅读更多...基于SSM机场网上订票系统的设计管理员账户功能包括&amp;#xff1a;系统首页&amp;#xff0c;个人中心&amp;#xff0c;用户管理&amp;#xff0c;机票信息管理&amp;#xff0c;订单信息管理&amp;#xff0c;机场广告管理&amp;#xff0c;系统管理 
前台账号功能包括&amp;#xff1a;系统首页&amp;#xff0c;个人中心&amp;#xff0c;机票信息&amp;#xf…阅读更多...js 鼠标拖动canvas画布功能点&amp;#xff1a; 
鼠标拖拽canvas画布移动鼠标检测rect鼠标检测circle 
代码 
&lt;!DOCTYPE html&gt;
&lt;html lang"en"&gt;&lt;head&gt;&lt;meta charset"UTF-8" /&gt;&lt;meta name"viewport" content"widthdevice-width, initial-sc…阅读更多...Rust编程语言变量的所有权（ownership）文章目录 什么是所有权所有权规则转让所有权变量与数据交互的方式(一):移动变量与数据交互的方式(二):克隆只在栈上的数据:拷贝所有权与函数返回值与作用域引用和借用可变引用悬垂引用（Dangling References）引用的规则什么是所有权 
所有权（ownership）是Rust 的核心功能之一…阅读更多...ARAIM在航空领域的重要性及其面临的主要挑战笔者这篇博客主要目的是总结目前ARAIM技术面临的主要问题&amp;#xff0c;为做高级接收机自主完好性的小伙伴提供论文创新点思路。对于研究方向迷茫的小伙伴可以参考ARAIM目前存在的主要问题&amp;#xff0c;展开相关研究&amp;#xff0c;希望该博客对读者有所帮助。 
1.全球卫星导航系统发…阅读更多...Axure使用教程，产品经理如何用Axure制作一份高质量高保真的OA办公管理系统原型?附源文件下载OA办公管理系统&amp;#xff08;Office Automation Management System&amp;#xff09;是通过现代计算机和通信技术&amp;#xff0c;将办公过程中的信息、数据和流程进行自动化处理&amp;#xff0c;以提高工作效率、降低成本的一套系统。构建OA办公管理系统涉及多个步骤&amp;#xff0c;以下是一个概…阅读更多...手写模拟Spring的基本功能文章目录 1. Spring的基本功能2. 容器启动 容器启动&amp;#xff0c;即创建容器对象并赋予配置对象3. BeanDefinition扫描4. Bean的生命周期5. 单例Bean与多例Bean6. 依赖注入7. AOP8. Aware 回调9. 初始化10. BeanPostProcessor附录&amp;#xff1a; 1. Spring的基本功能 2. 容器启动 …阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:15 +0000</pubDate>
    </item>
    <item>
      <title>Redis Search系列 - 第六讲 基准测试 - Redis Search VS. MongoDB VS. ElasticSearch</title>
      <link>https://www.ppmy.cn/news/1541077.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Redis Search系列 - 第六讲 基准测试 - Redis Search VS. MongoDB VS. ElasticSearchnews/2025/11/1 1:18:14/目录一、引言二、Redis Search 2.x版本的性能提升三、Redis Search VS. MongoDB VS. ElasticSearch3.1 测试环境3.2 100%写 - 基准测试3.3 100%读 - 基准测试3.4 混合读/写/搜索 - 基准测试2.5 搜索延迟分析3.6 读延迟分析3.7 写延迟分析3.8 Redis Search VS. ElasticSearch3.9 总结一、引言本基准测试参考自Redis官方博客，本文仅做汇总说明，具体原文可参见：https://redis.io/blog/redisjson-public-preview-performance-benchmarking/二、Redis Search 2.x版本的性能提升索引了590万篇维基百科摘要，并运行了一个全文搜索查询面板（详情参见这里），不难发现：Redis Search 2.2（结合Redis JSON）比之前的版本快1.7倍，且每个新版本都在持续优化从v2.0升级到v2.2，将得到更快的写/读/搜索具体统计结果参见下面2张图：三、Redis Search VS. MongoDB VS. ElasticSearch3.1 测试环境基础环境说明均采用m5d.8xlarge虚拟机，带有本地ssd，每组压测均由四个虚拟机组成：一个客户端 + 三个数据库服务器。基准测试客户机和数据库服务器都运行在单独的m5d.8xlarge实例，并放置在最佳网络条件下，这些实例均位于同一可用区内，实现了稳态分析所需的低延迟和稳定的网络性能。测试集群说明存储集群组成索引MongoDB 5.0.3三成员副本集（Primary-Secondary-Secondary）在搜索字段上创建了文本索引（TEXT），以支持文本搜索查询ElasticSearch 7.1515个分片设置，启用查询缓存，使用RAID 0阵列的2个本地NVMe SSD预先创建索引Redis Search 2.2Redis JSON 2.0OSS Redis Cluster v6.2.6，27个分片均匀分布在三个节点上，加载了Redis Search 2.2和Redis JSON 2.0 OSS模块预先创建索引测试框架https://github.com/RedisJSON/RedisJSON/tree/master/tests/benchmarkshttps://github.com/RediSearch/ftsb/blob/master/docs/enwiki-abstract-benchmark/description.mdhttps://github.com/RediSearch/ftsb/blob/master/docs/nyc_taxis-benchmark/description.mdhttps://github.com/brianfrankcooper/YCSB/pull/15773.2 100%写 - 基准测试结合延迟和吞吐量的综合提升：Redis JSON比Mongodb快5.4倍比Elastic Search在单独写方面快200倍99%的Redis请求在不到1.5ms的时间内完成。注：Redis JSON是三种方案中唯一在每次写入时自动更新索引的解决方案，其他均是异步更新索引，需要等待一段时间后才能检索到数据具体统计结果如下图：3.3 100%读 - 基准测试注：此处的读可以理解为根据key直接读取文档，而不是执行全文检索结合延迟和吞吐量的综合提升：Redis JSON比MongoDB快12.7倍比Elastic Search快500倍3.4 混合读/写/搜索 - 基准测试实际应用程序的工作负载几乎总是混合了读、写和搜索查询。因此，当混合工作负载接近饱和时，理解由此产生的混合工作负载吞吐量曲线就更加重要了。作为起点，我们考虑了65%搜索和35%读取的场景，这代表了一个常见的现实场景，在这个场景中，我们执行的搜索/查询比直接读取更多。65%的搜索、35%的读取和0%的更新的初始组合也使ElasticSearch和Redis JSON的吞吐量相等，后续不断切换YCSB工作负载中搜索/读取/更新之间的比率以匹配测试需求。在每个测试变量中，我们都添加了10%的写操作，并以相同的比例降低了搜索和读取百分比。这些测试变化的目标是了解每个产品如何处理数据的实时更新，我们认为这是事实上的架构目标，即写入立即提交到索引，读取总是最新的。搜索场景分页查询，双字全文检索，结果按数字属性排序a paginated two-word query match, sorted by a numeric field结合对比结果如下：Redis JSON： 持续更新数据并增加写入比例不会影响读取或搜索性能，反而会提高整体吞吐量。ElasticSearch：随着更新比例从0%增加到50%，吞吐量（Ops/sec）从10k下降到2.1k（降低5倍），性能受到显著影响，读取和搜索速度变慢。MongoDB：搜索性能比Redis JSON和ElasticSearch慢两个数量级，最大吞吐量为424 Ops/sec，而Redis JSON为16k Ops/sec。综合所有混合负载测试Redis JSON在混合工作负载下的吞吐量比MongoDB高50.8倍，比ElasticSearch高7倍。Redis JSON的操作延迟比MongoDB低91倍，比ElasticSearch低23.7倍。总结：Redis Search几乎不受更新比例影响，吞吐量稳步提升，三者中性能最高；ElasticSearch受到更新比例的显著影响，随着更新比例的提高，读取和搜索速度变慢；MongoDB性能整体最差（比RedisSearch、ElasticSearch慢2个数据级）。具体测试统计结果如下图：2.5 搜索延迟分析注：延迟即耗时，即请求平均耗时在下图中，显示了搜索测试吞吐量为250ops/sec时从p0到p9999的延迟百分位数：Mongodb DB的表现都远远落后于ElasticSearch和Redis JSON。对比ElasticSearch与Redis JSON，很明显ElasticSearch容易受到更高延迟的影响，这很可能是由垃圾收集（GC）触发或搜索查询缓存丢失引起的。Redis JSON的p99低于2.61ms，而Elastic Search的p99则达到了10.28ms。3.6 读延迟分析在下图中，显示了读测试吞吐量为250ops/sec时从p0到p9999的延迟百分位数：Redis JSON是在所有分析的延迟百分位数中保持亚毫秒级延迟的唯一解决方案。在p99时，Redis JSON的延迟为0.23ms，其次是MongoDB的5.01ms， ElasticSearch的10.49ms。3.7 写延迟分析在下图中，显示了写测试吞吐量为250ops/sec时从p0到p9999的延迟百分位数：MongoDB和Redis JSON即使在p99时也保持着亚毫秒级的延迟。Elastic Search显示出很高的尾部延迟（&gt;10ms），很可能是由于与Elastic Search的搜索峰值相同的原因（GC）。3.8 Redis Search VS. ElasticSearch只关注ElasticSearch和Redis JSON，同时保持6K ops/sec的可持续负载，我们可以观察到：在读和更新（写）时ElasticSearch和Redis JSON（更稳定的方案）的读取和更新模式仍然跟之前250 ops/sec时的压测差不多。在读时，Redis JSON的p99为3ms，而ElasticSerach的p99为162ms。在更新时，Redis JSON的p99为3ms，而ElasticSearch的p99为167ms。在搜索时Elastic Search和Redis JSON以一位数的p50延迟开始（Redis JSON的p50延迟为1.13ms，而Elastic Search的p50延迟为2.79ms）在较高的百分位数上，Elastic Search付出了GC触发和查询缓存丢失的代价，这在&gt;= p90百分位数上可以清楚地看到。Redis JSON（更高效）的p99保持在33ms以下，而在Elastic Search上，p99保持在163ms，是前者的5倍。具体测试结果参见下图：3.9 总结测试项RedisSearchElasticSearchMongoDB结果对比100%写吞吐量：69672/秒平均耗时：0.341毫秒吞吐量：7911/秒平均耗时：7.818毫秒吞吐量：37985/秒平均耗时：1.001毫秒Redis JSON比MongoDB快5.4倍比ElasticSearch在单独写方面快200倍99%的Redis请求在不到1.5ms的时间内完成100%读吞吐量：178364/秒平均耗时：0.172毫秒吞吐量：11281/秒平均耗时：5.578毫秒吞吐量：62933/秒平均耗时：0.768毫秒Redis JSON比MongoDB快12.7倍比ElasticSearch快500倍混合读/写/搜索持续更新数据并增加写入比例不会影响读取或搜索性能，反而会提高整体吞吐量（从10k到16k）。随着更新比例从0%增加到50%，吞吐量（Ops/sec）从10k下降到2.1k（降低5倍），性能受到显著影响，读取和搜索速度变慢。搜索性能比Redis JSON和ElasticSearch慢两个数量级，最大吞吐量为424 Ops/sec，而Redis JSON为16k Ops/sec。Redis JSON在混合工作负载下的吞吐量比MongoDB高50.8倍，比ElasticSearch高7倍。Redis JSON的操作延迟比MongoDB低91倍，比ElasticSearch低23.7倍。Redis Search几乎不受更新比例影响，吞吐量稳步提升，三者中性能最高；ElasticSearch受到更新比例的显著影响，随着更新比例的提高，读取和搜索速度变慢；MongoDB性能整体最差（比RedisSearch、ElasticSearch慢2个数量级）。优劣势对比：RedisSearch的优势在于其在所有测试项中都表现出色，具有最高的吞吐量和最低的延迟，几乎不受更新比例的影响。ElasticSearch的劣势在于其性能随着更新比例的增加显著下降，读写操作的延迟较高。MongoDB的劣势在于其整体性能最差，无论是读、写还是混合操作，吞吐量和延迟都远不及RedisSearch和ElasticSearch。http://www.ppmy.cn/news/1541077.html相关文章程序员的浪漫之给对象爬数据，没想到过程中竟然被写接口的老哥字段命名给秀到了！目录 一、序言二、分析需求三、找数据分析字段四、建个表开爬数据五、结语 一、序言 
最近对象转了销售岗&amp;#xff0c;她的领导布置了项任务&amp;#xff0c;一周要找500个对标客户的联系电话。看她又上天眼查、企查查、爱企查&amp;#xff0c;还上各种采购平台手动抄采购负责人的信息和…阅读更多...基于SSM机场网上订票系统的设计管理员账户功能包括&amp;#xff1a;系统首页&amp;#xff0c;个人中心&amp;#xff0c;用户管理&amp;#xff0c;机票信息管理&amp;#xff0c;订单信息管理&amp;#xff0c;机场广告管理&amp;#xff0c;系统管理 
前台账号功能包括&amp;#xff1a;系统首页&amp;#xff0c;个人中心&amp;#xff0c;机票信息&amp;#xf…阅读更多...js 鼠标拖动canvas画布功能点&amp;#xff1a; 
鼠标拖拽canvas画布移动鼠标检测rect鼠标检测circle 
代码 
&lt;!DOCTYPE html&gt;
&lt;html lang"en"&gt;&lt;head&gt;&lt;meta charset"UTF-8" /&gt;&lt;meta name"viewport" content"widthdevice-width, initial-sc…阅读更多...Rust编程语言变量的所有权（ownership）文章目录 什么是所有权所有权规则转让所有权变量与数据交互的方式(一):移动变量与数据交互的方式(二):克隆只在栈上的数据:拷贝所有权与函数返回值与作用域引用和借用可变引用悬垂引用（Dangling References）引用的规则什么是所有权 
所有权（ownership）是Rust 的核心功能之一…阅读更多...ARAIM在航空领域的重要性及其面临的主要挑战笔者这篇博客主要目的是总结目前ARAIM技术面临的主要问题&amp;#xff0c;为做高级接收机自主完好性的小伙伴提供论文创新点思路。对于研究方向迷茫的小伙伴可以参考ARAIM目前存在的主要问题&amp;#xff0c;展开相关研究&amp;#xff0c;希望该博客对读者有所帮助。 
1.全球卫星导航系统发…阅读更多...Axure使用教程，产品经理如何用Axure制作一份高质量高保真的OA办公管理系统原型?附源文件下载OA办公管理系统&amp;#xff08;Office Automation Management System&amp;#xff09;是通过现代计算机和通信技术&amp;#xff0c;将办公过程中的信息、数据和流程进行自动化处理&amp;#xff0c;以提高工作效率、降低成本的一套系统。构建OA办公管理系统涉及多个步骤&amp;#xff0c;以下是一个概…阅读更多...手写模拟Spring的基本功能文章目录 1. Spring的基本功能2. 容器启动 容器启动&amp;#xff0c;即创建容器对象并赋予配置对象3. BeanDefinition扫描4. Bean的生命周期5. 单例Bean与多例Bean6. 依赖注入7. AOP8. Aware 回调9. 初始化10. BeanPostProcessor附录&amp;#xff1a; 1. Spring的基本功能 2. 容器启动 …阅读更多...Ajax：跨域、防抖和节流、HTTP协议在善意的“双向奔赴”中&amp;#xff0c;每个普通人都如星辰&amp;#xff0c;微小但释放着自己的光芒&amp;#xff0c;交织成灿烂的星河 文章目录 跨域防抖和节流HTTP协议HTP状态码以及代表意义错误代码的影响移动的小天使 跨域 
同源策略 概念&amp;#xff1a;协议&amp;#xff0c;域名&amp;#xff0c…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:14 +0000</pubDate>
    </item>
    <item>
      <title>程序员的浪漫之给对象爬数据，没想到过程中竟然被写接口的老哥字段命名给秀到了！</title>
      <link>https://www.ppmy.cn/news/1541076.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维程序员的浪漫之给对象爬数据，没想到过程中竟然被写接口的老哥字段命名给秀到了！news/2025/11/1 1:18:13/目录一、序言二、分析需求三、找数据分析字段四、建个表开爬数据五、结语一、序言最近对象转了销售岗，她的领导布置了项任务，一周要找500个对标客户的联系电话。看她又上天眼查、企查查、爱企查，还上各种采购平台手动抄采购负责人的信息和中标信息。作为一名平时喜欢爬来爬去的技术人，心里突然冒出一个想法，哥直接写个程序帮你一下把数据给爬下来。男人的话，就如弦上的箭，正所谓开弓没有回头箭，既然牛逼都吹出来了，熬夜咱也得把数据给倒腾出来。都说从入门到精通，从爬虫到爬坟，别人都用Python爬，今天咱用Java爬。二、分析需求平时在公司同事是产品经理，今天对象成为我的临时产品经理，既然要做产品，咱得先了解需求。在对象的一波描述和想法输出后，作为身经百战的程序dog瞬间秒懂她要什么数据。首先是咱得知道有哪些招标项目，以及项目的发布时间，如下图：除了这些招标项目信息，咱还必须得了解，这个项目的采购价和联系人信息，点击详情既可以看到，如下：当然，还有中标后的交易信息，用于分析有哪些竞争对手，如下：知道信息在哪后，基本思路出来了：分页爬取所有招标公告列表，并批量落库。根据招标公告分页列表里的数据，查询详情信息。捞出公告详情里采购部门的联系人信息、中标交易信息并落库。三、找数据分析字段好家伙，点开页面源码一看，熟悉前端的同学们都知道，这玩意一看就是Vue写的单页面应用。如果是服务端渲染的页面，还得找节点信息，解析html。既然是Vue应用那就好办了，前后端完全分离，直接找数据接口即可。接口还是挺容易找的，重点是得找哪个字段对应哪些信息。说实话，这个字段命名是真的离谱，比如ggLeiXing，就是公告类型，还有tbrName，就是投标人名称。刚开始我还以为是什么特别的单词。仔细一看，这字段命名不就是拼音首字母命名吗？我估摸着写这些接口的程序dog要么英文是真的不行，要么是偷懒了，不过我估计这个网站也是外包给别人的，当然程序猿和网页一个能跑就完事。我们再看看查详情信息的接口，看到这玩意是个GET请求，而且还带了些参数，这个参数一看咱就知道是从上面的那个公告分页列表里捞出来的。接下来就是各种对字段，分析字段格式，还有哪些字段可能为空。当然在这里采了一个很大的坑，这个详情接口的ggLeiXing字段值和分页列表返回的字段值对不上，也是研究了半天才发现，这家伙用的是分页列表里的ggXingZhi这个字段。真是程序猿坑程序猿啊，不专业的程序猿更是离谱到家，这里吐槽一下写接口的哥们，为了这个字段我是多熬夜了20分钟。四、建个表开爬数据这里设计两张表，一张是分页数据表，用于保存项目信息和请求详情接口的那些个参数，另外一张就是详情表。createtable`t_purchase_overview`(`id`bigintprimarykeyauto_incrementcomment'主键',`project_no`varchar(32)notnulldefault''comment'项目编号',`project_name`varchar(64)notnulldefault''comment'项目名称',`publish_time`datetimenullcomment'发布时间',`gg_guid`varchar(128)notnulldefault''comment'公告GUID',`gg_type`tinyintnulldefault0comment'公告类型',`bd_guid`varchar(128)notnulldefault''comment'标的GUID',`guid`varchar(128)notnulldefault''comment'GUID',`data_source`tinyintnulldefault0comment'数据源: 0-"app/home/detail", 1-"app/etl/detail"',`create_time`datetimenotnulldefaultcurrent_timestampcomment'创建时间',`update_time`datetimenullcomment'更新时间')comment'采购数据概览(分页信息)';createindex`idx_tpo_project_no`ont_purchase_overview(project_no);createtable`t_purchase_bulletin`(`id`bigintprimarykeyauto_incrementcomment'主键',`project_no`varchar(32)notnulldefault''comment'项目编号',`project_name`varchar(64)notnulldefault''comment'项目名称',`publish_time`datetimenullcomment'公告发布时间',`price`decimal(15,2)notnulldefault0comment'招标价格',`purchase_company`varchar(32)nullcomment'采购单位',`company_address`varchar(128)nullcomment'采购单位地址',`contact_name`varchar(8)nullcomment'联系人',`contact_phone`varchar(36)nullcomment'联系电话',`trans_info`varchar(1024)nullcomment'成交信息(JSON)格式',`create_time`datetimenotnulldefaultcurrent_timestampcomment'创建时间',`update_time`datetimenullcomment'更新时间')comment'采购公告信息(详情)';createindex`idx_tpb_create_time`ont_purchase_bulletin(create_time);createindex`idx_tpb_publish_time`ont_purchase_bulletin(publish_time);有了表，找对了字段，代码逻辑其实真的非常简单，这次特性把JDK升级到了17，体验了下新特性。先爬取列表数据，这里循环拉取下批量数据，批量保存，几秒就搞定，如下：再爬一下详情数据，这里有待优化，毕竟有1000多条数据，又要网络请求，又要入库，多线程跑批会更快。如下：五、结语爬完之后，写了条SQL导成Excel交给了对象，当时说几个小时能搞定的活，愣是搞了一大晚上，看来还是不能夸下海口啊。男人吹牛逼也得先估一下工期，不然立下军令状容易跪榴莲。对象leader说的每周去平台找500个电话，这次通过技术手段一次性搞了1700多个，缓解了3周找电话的压力。重点是爬虫写好后，后面可以一键拉取最新数据，也许这就是技术的价值吧。当然，爬虫虽好，但咱不能去爬取一些隐私数据，不然容易面向监狱编程，刑得通。http://www.ppmy.cn/news/1541076.html相关文章基于SSM机场网上订票系统的设计管理员账户功能包括&amp;#xff1a;系统首页&amp;#xff0c;个人中心&amp;#xff0c;用户管理&amp;#xff0c;机票信息管理&amp;#xff0c;订单信息管理&amp;#xff0c;机场广告管理&amp;#xff0c;系统管理 
前台账号功能包括&amp;#xff1a;系统首页&amp;#xff0c;个人中心&amp;#xff0c;机票信息&amp;#xf…阅读更多...js 鼠标拖动canvas画布功能点&amp;#xff1a; 
鼠标拖拽canvas画布移动鼠标检测rect鼠标检测circle 
代码 
&lt;!DOCTYPE html&gt;
&lt;html lang"en"&gt;&lt;head&gt;&lt;meta charset"UTF-8" /&gt;&lt;meta name"viewport" content"widthdevice-width, initial-sc…阅读更多...Rust编程语言变量的所有权（ownership）文章目录 什么是所有权所有权规则转让所有权变量与数据交互的方式(一):移动变量与数据交互的方式(二):克隆只在栈上的数据:拷贝所有权与函数返回值与作用域引用和借用可变引用悬垂引用（Dangling References）引用的规则什么是所有权 
所有权（ownership）是Rust 的核心功能之一…阅读更多...ARAIM在航空领域的重要性及其面临的主要挑战笔者这篇博客主要目的是总结目前ARAIM技术面临的主要问题&amp;#xff0c;为做高级接收机自主完好性的小伙伴提供论文创新点思路。对于研究方向迷茫的小伙伴可以参考ARAIM目前存在的主要问题&amp;#xff0c;展开相关研究&amp;#xff0c;希望该博客对读者有所帮助。 
1.全球卫星导航系统发…阅读更多...Axure使用教程，产品经理如何用Axure制作一份高质量高保真的OA办公管理系统原型?附源文件下载OA办公管理系统&amp;#xff08;Office Automation Management System&amp;#xff09;是通过现代计算机和通信技术&amp;#xff0c;将办公过程中的信息、数据和流程进行自动化处理&amp;#xff0c;以提高工作效率、降低成本的一套系统。构建OA办公管理系统涉及多个步骤&amp;#xff0c;以下是一个概…阅读更多...手写模拟Spring的基本功能文章目录 1. Spring的基本功能2. 容器启动 容器启动&amp;#xff0c;即创建容器对象并赋予配置对象3. BeanDefinition扫描4. Bean的生命周期5. 单例Bean与多例Bean6. 依赖注入7. AOP8. Aware 回调9. 初始化10. BeanPostProcessor附录&amp;#xff1a; 1. Spring的基本功能 2. 容器启动 …阅读更多...Ajax：跨域、防抖和节流、HTTP协议在善意的“双向奔赴”中&amp;#xff0c;每个普通人都如星辰&amp;#xff0c;微小但释放着自己的光芒&amp;#xff0c;交织成灿烂的星河 文章目录 跨域防抖和节流HTTP协议HTP状态码以及代表意义错误代码的影响移动的小天使 跨域 
同源策略 概念&amp;#xff1a;协议&amp;#xff0c;域名&amp;#xff0c…阅读更多...大数据-178 Elasticsearch Query - Java API 索引操作  文档操作点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:13 +0000</pubDate>
    </item>
    <item>
      <title>基于SSM机场网上订票系统的设计</title>
      <link>https://www.ppmy.cn/news/1541075.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维基于SSM机场网上订票系统的设计news/2025/11/1 1:18:12/管理员账户功能包括：系统首页，个人中心，用户管理，机票信息管理，订单信息管理，机场广告管理，系统管理前台账号功能包括：系统首页，个人中心，机票信息，机场广告，系统公告开发系统：Windows架构模式：SSMJDK版本：Java JDK1.8开发工具：IDEA(推荐)数据库版本： mysql5.7数据库可视化工具： navicat服务器：SpringBoot自带 apache tomcat主要技术：Java,Spring,mybatis,mysql,jquery,htmlhttp://www.ppmy.cn/news/1541075.html相关文章js 鼠标拖动canvas画布功能点&amp;#xff1a; 
鼠标拖拽canvas画布移动鼠标检测rect鼠标检测circle 
代码 
&lt;!DOCTYPE html&gt;
&lt;html lang"en"&gt;&lt;head&gt;&lt;meta charset"UTF-8" /&gt;&lt;meta name"viewport" content"widthdevice-width, initial-sc…阅读更多...Rust编程语言变量的所有权（ownership）文章目录 什么是所有权所有权规则转让所有权变量与数据交互的方式(一):移动变量与数据交互的方式(二):克隆只在栈上的数据:拷贝所有权与函数返回值与作用域引用和借用可变引用悬垂引用（Dangling References）引用的规则什么是所有权 
所有权（ownership）是Rust 的核心功能之一…阅读更多...ARAIM在航空领域的重要性及其面临的主要挑战笔者这篇博客主要目的是总结目前ARAIM技术面临的主要问题&amp;#xff0c;为做高级接收机自主完好性的小伙伴提供论文创新点思路。对于研究方向迷茫的小伙伴可以参考ARAIM目前存在的主要问题&amp;#xff0c;展开相关研究&amp;#xff0c;希望该博客对读者有所帮助。 
1.全球卫星导航系统发…阅读更多...Axure使用教程，产品经理如何用Axure制作一份高质量高保真的OA办公管理系统原型?附源文件下载OA办公管理系统&amp;#xff08;Office Automation Management System&amp;#xff09;是通过现代计算机和通信技术&amp;#xff0c;将办公过程中的信息、数据和流程进行自动化处理&amp;#xff0c;以提高工作效率、降低成本的一套系统。构建OA办公管理系统涉及多个步骤&amp;#xff0c;以下是一个概…阅读更多...手写模拟Spring的基本功能文章目录 1. Spring的基本功能2. 容器启动 容器启动&amp;#xff0c;即创建容器对象并赋予配置对象3. BeanDefinition扫描4. Bean的生命周期5. 单例Bean与多例Bean6. 依赖注入7. AOP8. Aware 回调9. 初始化10. BeanPostProcessor附录&amp;#xff1a; 1. Spring的基本功能 2. 容器启动 …阅读更多...Ajax：跨域、防抖和节流、HTTP协议在善意的“双向奔赴”中&amp;#xff0c;每个普通人都如星辰&amp;#xff0c;微小但释放着自己的光芒&amp;#xff0c;交织成灿烂的星河 文章目录 跨域防抖和节流HTTP协议HTP状态码以及代表意义错误代码的影响移动的小天使 跨域 
同源策略 概念&amp;#xff1a;协议&amp;#xff0c;域名&amp;#xff0c…阅读更多...大数据-178 Elasticsearch Query - Java API 索引操作  文档操作点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...uniapp 获取签名证书 SHA1 自有证书签名打包1.登录你的Dcloud 账户 
2.找到我的应用菜单 3.点开某个应用 4.查看证书详情&amp;#xff0c;里面有SHA1 和别名&amp;#xff0c;密码&amp;#xff0c;下载证书用于云打包&amp;#xff0c;可以选择自有证书&amp;#xff0c;输入别名&amp;#xff0c;密码打包阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:12 +0000</pubDate>
    </item>
    <item>
      <title>js 鼠标拖动canvas画布</title>
      <link>https://www.ppmy.cn/news/1541074.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维js 鼠标拖动canvas画布news/2025/11/1 1:18:11/功能点：鼠标拖拽canvas画布移动鼠标检测rect鼠标检测circle代码&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="UTF-8" /&gt;&lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;&lt;title&gt;鼠标移动画布-事件检测&lt;/title&gt;&lt;style&gt;html,body {margin: 0;padding: 0;height: 100%;width: 100%;overflow: hidden;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;canvas id="canvas"&gt;&lt;/canvas&gt;&lt;script&gt;const canvas = document.getElementById('canvas');const { clientWidth: width, clientHeight: height } = document.body;canvas.width = width;canvas.height = height;const ctx = canvas.getContext('2d');// 储累积的偏移量let totalOffsetX = 0;let totalOffsetY = 0;// 缩放系数let scale = 1;// 图形数据const shapes = [{type: 'rect',x: 100,y: 100,width: 20,height: 20,strokeStyle: '#000',fillStyle: '#f00',},{type: 'circle',x: 200,y: 200,radius: 10,strokeStyle: '#000',fillStyle: '#0f0',},{type: 'polyline',points: [{ x: 200, y: 100 },{ x: 150, y: 100 },{ x: 200, y: 150 },],strokeStyle: '#000',fillStyle: '#00f',},];function render(offsetX, offsetY) {// 绘制时需要使用beginPath，否则无法使用clearRect清空画布ctx.clearRect(0, 0, width, height);ctx.fillStyle = '#999';ctx.fillRect(0, 0, width, height);ctx.fill();ctx.translate(totalOffsetX, totalOffsetY);ctx.scale(scale, scale);shapes.forEach((shape) =&gt; {const { type, x, y, width, height, radius, points } = shape;ctx.fillStyle = shape.fillStyle;ctx.beginPath();if (type === 'rect') {ctx.fillRect(x, y, width, height);} else if (type === 'circle') {ctx.arc(x, y, radius, 0, Math.PI * 2);} else if (type === 'polyline') {ctx.moveTo(points[0].x, points[0].y);points.slice(1).forEach((point) =&gt; {ctx.lineTo(point.x, point.y);});ctx.closePath();}ctx.fill();});ctx.resetTransform();}render();canvas.addEventListener('mousedown', onMouseDown);canvas.addEventListener('mousemove', onMouseMove);canvas.addEventListener('mouseup', onMouseUp);canvas.addEventListener('mouseleave', onMouseLeave);canvas.addEventListener('wheel', onWheel);let isMouseDown = false;let startX, startY;function onMouseDown(e) {canvas.style.cursor = 'grab';isMouseDown = true;startX = e.offsetX;startY = e.offsetY;}function onMouseMove(e) {isShapePoint(e);if (isMouseDown) {totalOffsetX += e.offsetX - startX;totalOffsetY += e.offsetY - startY;startX = e.offsetX;startY = e.offsetY;requestAnimationFrame(render);}}function onMouseUp(e) {isMouseDown = false;}function onMouseLeave(e) {isMouseDown = false;}function onWheel(e) {// 缩放，最大5倍，最小0.2倍if (e.deltaY === -100) {if (scale + 0.1 &gt; 5) return;// 放大scale += 0.1;} else {if (scale - 0.1 &lt;= 0.2) return;// 缩小scale -= 0.1;}requestAnimationFrame(render);}// 检测设备function isShapePoint(e) {const { offsetX, offsetY } = e;let check = false;shapes.forEach((shape) =&gt; {// 检测rectif (shape.type === 'rect') {const { type, x, y, width, height } = shape;const transformedX = (offsetX - totalOffsetX) / scale;const transformedY = (offsetY - totalOffsetY) / scale;if (transformedX &gt;= x &amp;&amp;transformedX &lt;= x + width &amp;&amp;transformedY &gt;= y &amp;&amp;transformedY &lt;= y + height) {check = true;}} else if (shape.type === 'circle') {// 检测圆形const { x, y, radius } = shape;const transformedX = (offsetX - totalOffsetX) / scale;const transformedY = (offsetY - totalOffsetY) / scale;const circleX = x;const circleY = y;// 计算光标与圆心的距离const distance = Math.sqrt((transformedX - circleX) ** 2 + (transformedY - circleY) ** 2);if (radius &gt;= distance) {check = true;}} else if (shape.type === 'polyline') {const { points: polygon } = shape;let inside = false;const transformedX = (offsetX - totalOffsetX) / scale;const transformedY = (offsetY - totalOffsetY) / scale;for (let i = 0, j = polygon.length - 1;i &lt; polygon.length;j = i++) {const xi = polygon[i].x,yi = polygon[i].y;const xj = polygon[j].x,yj = polygon[j].y;const intersect =yi &gt; transformedY !== yj &gt; transformedY &amp;&amp;transformedX &lt;((xj - xi) * (transformedY - yi)) / (yj - yi) + xi;if (intersect) {inside = !inside;if (inside) {check = true;} else {check = false;}}}}});if (check) {canvas.style.cursor = 'move';} else {canvas.style.cursor = 'grab';}}&lt;/script&gt;&lt;/body&gt;
&lt;/html&gt;http://www.ppmy.cn/news/1541074.html相关文章Rust编程语言变量的所有权（ownership）文章目录 什么是所有权所有权规则转让所有权变量与数据交互的方式(一):移动变量与数据交互的方式(二):克隆只在栈上的数据:拷贝所有权与函数返回值与作用域引用和借用可变引用悬垂引用（Dangling References）引用的规则什么是所有权 
所有权（ownership）是Rust 的核心功能之一…阅读更多...ARAIM在航空领域的重要性及其面临的主要挑战笔者这篇博客主要目的是总结目前ARAIM技术面临的主要问题&amp;#xff0c;为做高级接收机自主完好性的小伙伴提供论文创新点思路。对于研究方向迷茫的小伙伴可以参考ARAIM目前存在的主要问题&amp;#xff0c;展开相关研究&amp;#xff0c;希望该博客对读者有所帮助。 
1.全球卫星导航系统发…阅读更多...Axure使用教程，产品经理如何用Axure制作一份高质量高保真的OA办公管理系统原型?附源文件下载OA办公管理系统&amp;#xff08;Office Automation Management System&amp;#xff09;是通过现代计算机和通信技术&amp;#xff0c;将办公过程中的信息、数据和流程进行自动化处理&amp;#xff0c;以提高工作效率、降低成本的一套系统。构建OA办公管理系统涉及多个步骤&amp;#xff0c;以下是一个概…阅读更多...手写模拟Spring的基本功能文章目录 1. Spring的基本功能2. 容器启动 容器启动&amp;#xff0c;即创建容器对象并赋予配置对象3. BeanDefinition扫描4. Bean的生命周期5. 单例Bean与多例Bean6. 依赖注入7. AOP8. Aware 回调9. 初始化10. BeanPostProcessor附录&amp;#xff1a; 1. Spring的基本功能 2. 容器启动 …阅读更多...Ajax：跨域、防抖和节流、HTTP协议在善意的“双向奔赴”中&amp;#xff0c;每个普通人都如星辰&amp;#xff0c;微小但释放着自己的光芒&amp;#xff0c;交织成灿烂的星河 文章目录 跨域防抖和节流HTTP协议HTP状态码以及代表意义错误代码的影响移动的小天使 跨域 
同源策略 概念&amp;#xff1a;协议&amp;#xff0c;域名&amp;#xff0c…阅读更多...大数据-178 Elasticsearch Query - Java API 索引操作  文档操作点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...uniapp 获取签名证书 SHA1 自有证书签名打包1.登录你的Dcloud 账户 
2.找到我的应用菜单 3.点开某个应用 4.查看证书详情&amp;#xff0c;里面有SHA1 和别名&amp;#xff0c;密码&amp;#xff0c;下载证书用于云打包&amp;#xff0c;可以选择自有证书&amp;#xff0c;输入别名&amp;#xff0c;密码打包阅读更多...Linux网络编程（六）-TCP协议服务端及代码实现1.概述 
在讲述了那么多以后我们终于来到了代码阶段的讲解了&amp;#xff0c;先放一张流程图便于大家理解。接着会为大家讲述具体的实现过程。 通过上图我们可以看到一个完整的Socket网络通信&amp;#xff0c;是有客户端和服务端两部分代码组成的&amp;#xff0c;即两个程序&amp;#xff08;你发…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:11 +0000</pubDate>
    </item>
    <item>
      <title>Rust编程语言变量的所有权（ownership）</title>
      <link>https://www.ppmy.cn/news/1541073.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Rust编程语言变量的所有权（ownership）news/2025/11/1 1:18:10/文章目录什么是所有权所有权规则转让所有权变量与数据交互的方式(一):移动变量与数据交互的方式(二):克隆只在栈上的数据:拷贝所有权与函数返回值与作用域引用和借用可变引用悬垂引用（Dangling References）引用的规则什么是所有权所有权（ownership）是Rust 的核心功能之一。所有程序都必须管理其运行时使用计算机内存的方式。Rust 则选择通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。如果违反了任何这些规则，程序都不能编译。在运行时，所有权系统的任何功能都不会减慢程序。所有权就是一个东西属不属于你，你有没有权力随意处理它，比如送人，比如扔掉。Rust 语言中每一值都有一个对应的变量，这个变量就成为这个值的所有者。从某些方面说，定义一个变量就是为这个变量和它存储的数据定义一种所有者管理，声明这个值由这个变量所有。例如，对于let age = 30这条语句，相当于声明30这个值由变量age所有所有权规则首先，让我们看一下所有权的规则。当我们通过举例说明时，请谨记这些规则：http://www.ppmy.cn/news/1541073.html相关文章ARAIM在航空领域的重要性及其面临的主要挑战笔者这篇博客主要目的是总结目前ARAIM技术面临的主要问题&amp;#xff0c;为做高级接收机自主完好性的小伙伴提供论文创新点思路。对于研究方向迷茫的小伙伴可以参考ARAIM目前存在的主要问题&amp;#xff0c;展开相关研究&amp;#xff0c;希望该博客对读者有所帮助。 
1.全球卫星导航系统发…阅读更多...Axure使用教程，产品经理如何用Axure制作一份高质量高保真的OA办公管理系统原型?附源文件下载OA办公管理系统&amp;#xff08;Office Automation Management System&amp;#xff09;是通过现代计算机和通信技术&amp;#xff0c;将办公过程中的信息、数据和流程进行自动化处理&amp;#xff0c;以提高工作效率、降低成本的一套系统。构建OA办公管理系统涉及多个步骤&amp;#xff0c;以下是一个概…阅读更多...手写模拟Spring的基本功能文章目录 1. Spring的基本功能2. 容器启动 容器启动&amp;#xff0c;即创建容器对象并赋予配置对象3. BeanDefinition扫描4. Bean的生命周期5. 单例Bean与多例Bean6. 依赖注入7. AOP8. Aware 回调9. 初始化10. BeanPostProcessor附录&amp;#xff1a; 1. Spring的基本功能 2. 容器启动 …阅读更多...Ajax：跨域、防抖和节流、HTTP协议在善意的“双向奔赴”中&amp;#xff0c;每个普通人都如星辰&amp;#xff0c;微小但释放着自己的光芒&amp;#xff0c;交织成灿烂的星河 文章目录 跨域防抖和节流HTTP协议HTP状态码以及代表意义错误代码的影响移动的小天使 跨域 
同源策略 概念&amp;#xff1a;协议&amp;#xff0c;域名&amp;#xff0c…阅读更多...大数据-178 Elasticsearch Query - Java API 索引操作  文档操作点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...uniapp 获取签名证书 SHA1 自有证书签名打包1.登录你的Dcloud 账户 
2.找到我的应用菜单 3.点开某个应用 4.查看证书详情&amp;#xff0c;里面有SHA1 和别名&amp;#xff0c;密码&amp;#xff0c;下载证书用于云打包&amp;#xff0c;可以选择自有证书&amp;#xff0c;输入别名&amp;#xff0c;密码打包阅读更多...Linux网络编程（六）-TCP协议服务端及代码实现1.概述 
在讲述了那么多以后我们终于来到了代码阶段的讲解了&amp;#xff0c;先放一张流程图便于大家理解。接着会为大家讲述具体的实现过程。 通过上图我们可以看到一个完整的Socket网络通信&amp;#xff0c;是有客户端和服务端两部分代码组成的&amp;#xff0c;即两个程序&amp;#xff08;你发…阅读更多...Android TextView实现一串文字特定几个字改变颜色遇到一个需求&amp;#xff0c;让Android端实现给定一个字符串指定下标的几个字颜色与其他字颜色不一致。 主要是用ForegroundColorSpan这个API来传入颜色值&amp;#xff0c;用SpannableString来设置指定索引下标的字的颜色值。 这里通过给定一个输入文字描述框&amp;#xff0c;要求输入指定…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:10 +0000</pubDate>
    </item>
    <item>
      <title>ARAIM在航空领域的重要性及其面临的主要挑战</title>
      <link>https://www.ppmy.cn/news/1541072.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维ARAIM在航空领域的重要性及其面临的主要挑战news/2025/11/1 1:18:09/笔者这篇博客主要目的是总结目前ARAIM技术面临的主要问题，为做高级接收机自主完好性的小伙伴提供论文创新点思路。对于研究方向迷茫的小伙伴可以参考ARAIM目前存在的主要问题，展开相关研究，希望该博客对读者有所帮助。1.全球卫星导航系统发展背景全球导航卫星系统（GNSS）已经彻底改变了全球范围内的定位、导航和授时服务，从军事起源发展到关键的民用基础设施。GNSS由围绕地球运行的卫星星座组成，高度从大约19,100到23,200公里不等，具体取决于星座，广播授时信号，地面接收机使用这些信号通过后方交会计算它们的位置。目前的全球导航卫星系统包括美国的GPS、俄罗斯的GLONASS、欧盟的伽利略和中国的北斗，以及日本的QZSS和印度的NavIC等区域系统。这种多星座环境增强了覆盖、准确性和弹性。随着可见卫星数增多，即使在遮挡环境中，用户也可以实现可靠的定位，在有利的条件下，可以实现厘米级的精度。多星座的冗余确保了可用性，这对安全关键型应用至关重要，同时促进了多系统互操作性并减少了对任何单一系统的依赖。GNSS多系统可实现航空和自动驾驶车辆的高完整性应用，在这些应用中，精确定位至关重要。然而，随着卫星数增多带来了新的挑战，包括复杂的信号环境需要先进的算法来处理多源数据。对于安全关键应用来说，GNSS的完整性和可靠性至关重要，这促进了高级接收机自主完整性监测（ARAIM）等技术的发展，以利用多星座优势，同时确保关键操作的高完整性水平。考虑这些复杂性和机遇对于提高ARAIM性能至关重要，特别是通过多星座环境下的动态卫星排序（DSR）等方法。2.完好性在航空应用中的重要性航空导航系统的完好性对安全至关重要，可确保在导航数据不可信时及时发出警告。这是至关重要的，因为在位置、速度或时间上的错误可能会造成灾难性的后果，尤其是在像进近和着陆这样的关键阶段。完好性监测可以防止这些错误，为飞行员和自动化系统提供可靠的数据。完好性还可以提高运营效率，使航空公司能够优化航线，减少燃油消耗，提高准点率，特别是在拥挤的空域。它支持全天候操作，允许飞机在低能见度条件下执行精确进近，从而最大限度地减少延误和取消。法规遵从性要求严格的导航系统完整性标准，这对于基于gnss的导航认证至关重要。完整性系统必须检测不可靠的导航解决方案，并排除错误的测量，以保持服务的连续性。他们计算保护级别，位置误差的统计界限，与警报限制进行比较，以确保安全。由于卫星导航的复杂性，以及卫星故障、信号异常、电离层干扰、多径效应、接收机故障和干扰等潜在破坏，确保GNSS的完整性具有挑战性。ARAIM通过利用多星座GNSS解决这些挑战，在没有大量地面基础设施的情况下提供独立的基于飞机的完好性监测。ARAIM计划支持决策高度低至200英尺（lvb -200）的精密进近，显著提高安全性和效率。随着航空变得更加自主，完好性的重要性日益增加，需要改进监控技术，以应对网络威胁和新技术等挑战。对ARAIM的改进，如动态卫星排序方法，旨在进一步提高空中航行的安全性和效率。3.ARAIM在多星座环境下的挑战ARAIM显著增强了对多星座环境的GNSS完好性监测，这对航空至关重要。它通过利用多星座、双频GNSS来扩展传统的RAIM，提供几个关键特性：多星座支持，处理来自多个GNSS星座的信号，增强可用性。双频操作：减少电离层误差，提高精度。高级故障检测和排除：对卫星测量故障进行检测和排除。灵活的体系结构：自主操作或合并外部完整性数据。支持严格的性能：实现决策高度低至200英尺（LPV-200）的精确方法。ARAIM有两个组成部分：用于处理GNSS数据的机载算法和用于完好性参数和星座状态的完好性支持消息（ISM）。它使用假设方法来预测最坏情况下的错误（保护级别）来处理多种故障模式。ARAIM计算横向和垂直制导的水平保护级（HPL）和垂直保护级（VPL）。尽管具有先进的功能，但由于卫星和星座数量的增加，ARAIM增加了计算复杂性，导致更多的故障模式。ISM参数，如卫星和星座的故障概率和用户距离精度（URA），直接影响所考虑的故障模式。虽然GNSS扩展带来了好处，但它在信号处理和效率方面带来了挑战，特别是对于航空等高完整性应用。主要挑战包括：故障模式的加速增长：更多的卫星迅速增加了潜在的故障模式，计算多子集解决方案增加了需求。计算复杂性：较多的故障模式需要大量的计算、应变保护等级计算和实时处理。实时处理限制：载荷的增加对航空领域的快速完整性评估提出了挑战。平衡效率和完整性：在保持完整性的同时管理计算负载。ISM参数多变：过高会增加故障模式的复杂性。故障检测和排除（FDE）：由于故障组合较多，排除故障测量实际上更加困难。星座多样性：集成不同的系统会增加复杂性。为了在多星座环境中有效实施ARAIM，确保资源受限系统的高完整性，必须解决这些挑战。http://www.ppmy.cn/news/1541072.html相关文章Axure使用教程，产品经理如何用Axure制作一份高质量高保真的OA办公管理系统原型?附源文件下载OA办公管理系统&amp;#xff08;Office Automation Management System&amp;#xff09;是通过现代计算机和通信技术&amp;#xff0c;将办公过程中的信息、数据和流程进行自动化处理&amp;#xff0c;以提高工作效率、降低成本的一套系统。构建OA办公管理系统涉及多个步骤&amp;#xff0c;以下是一个概…阅读更多...手写模拟Spring的基本功能文章目录 1. Spring的基本功能2. 容器启动 容器启动&amp;#xff0c;即创建容器对象并赋予配置对象3. BeanDefinition扫描4. Bean的生命周期5. 单例Bean与多例Bean6. 依赖注入7. AOP8. Aware 回调9. 初始化10. BeanPostProcessor附录&amp;#xff1a; 1. Spring的基本功能 2. 容器启动 …阅读更多...Ajax：跨域、防抖和节流、HTTP协议在善意的“双向奔赴”中&amp;#xff0c;每个普通人都如星辰&amp;#xff0c;微小但释放着自己的光芒&amp;#xff0c;交织成灿烂的星河 文章目录 跨域防抖和节流HTTP协议HTP状态码以及代表意义错误代码的影响移动的小天使 跨域 
同源策略 概念&amp;#xff1a;协议&amp;#xff0c;域名&amp;#xff0c…阅读更多...大数据-178 Elasticsearch Query - Java API 索引操作  文档操作点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...uniapp 获取签名证书 SHA1 自有证书签名打包1.登录你的Dcloud 账户 
2.找到我的应用菜单 3.点开某个应用 4.查看证书详情&amp;#xff0c;里面有SHA1 和别名&amp;#xff0c;密码&amp;#xff0c;下载证书用于云打包&amp;#xff0c;可以选择自有证书&amp;#xff0c;输入别名&amp;#xff0c;密码打包阅读更多...Linux网络编程（六）-TCP协议服务端及代码实现1.概述 
在讲述了那么多以后我们终于来到了代码阶段的讲解了&amp;#xff0c;先放一张流程图便于大家理解。接着会为大家讲述具体的实现过程。 通过上图我们可以看到一个完整的Socket网络通信&amp;#xff0c;是有客户端和服务端两部分代码组成的&amp;#xff0c;即两个程序&amp;#xff08;你发…阅读更多...Android TextView实现一串文字特定几个字改变颜色遇到一个需求&amp;#xff0c;让Android端实现给定一个字符串指定下标的几个字颜色与其他字颜色不一致。 主要是用ForegroundColorSpan这个API来传入颜色值&amp;#xff0c;用SpannableString来设置指定索引下标的字的颜色值。 这里通过给定一个输入文字描述框&amp;#xff0c;要求输入指定…阅读更多...Mysql 和MongoDB用户访问权限问题Mysql 
刚给二线运维排查了一个问题&amp;#xff0c;Mysql安装完可用&amp;#xff0c;且可用navicat连接&amp;#xff0c;项目中通过127.0.0.1去连数据库报错了。错误是access denied for user ‘root’localhost,排查思路 
1. 密码是否正确 
&amp;#xff08;不需要重置。到Mysql的安装目录下找…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:09 +0000</pubDate>
    </item>
    <item>
      <title>Axure使用教程，产品经理如何用Axure制作一份高质量高保真的OA办公管理系统原型?附源文件下载</title>
      <link>https://www.ppmy.cn/news/1541071.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Axure使用教程，产品经理如何用Axure制作一份高质量高保真的OA办公管理系统原型?附源文件下载news/2025/11/1 1:18:08/OA办公管理系统（Office Automation Management System）是通过现代计算机和通信技术，将办公过程中的信息、数据和流程进行自动化处理，以提高工作效率、降低成本的一套系统。构建OA办公管理系统涉及多个步骤，以下是一个概括性的指南：所有元件均可复用，可作为管理端原型设计模板，按照实际项目需求进行功能拓展。有需要的话可分享源文件。源文件格式:rp文件、HTML文件。可部署服务器。包含源文件可二次开发修改编辑。软件版本：Axure8.1兼容Axure9.0 、Axure10.0 墨刀、pixso都可以使用。Axure电脑端源文件演示及下载地址：Axurehttps://4kv43m.axshare.com需求分析明确业务需求：首先，需要明确企业对于OA办公管理系统的具体需求，包括哪些业务流程需要自动化、哪些数据需要集中管理、哪些部门需要协同工作等。用户调研：通过访谈、问卷调查等方式，收集企业内部用户对于OA系统的期望和需求，确保系统能够满足用户的实际需求。系统规划确定功能模块：根据需求分析的结果，确定OA系统需要包含哪些功能模块，如文件管理、流程管理、会议管理、协同办公、知识管理、人事管理、财务管理等。设计系统架构：规划系统的整体架构，包括前端界面、后端逻辑、数据库设计、网络安全等方面的内容。使用Axure制作OA（Office Automation）办公管理系统原型的详细步骤流程可以归纳为以下几个主要阶段：一、项目准备阶段需求分析：明确OA办公管理系统的核心功能和用户需求。确定系统需要包含哪些模块，如组织、员工管理、考勤、薪资、社保公积金、绩效、招聘、审批、会议室预定、车辆申请、新闻发布、公告管理、合同库、文档库、固定资产管理、培训等。OA办公管理系统的需求分析是构建高效、协同办公环境的关键步骤。以下是对OA办公管理系统需求分析的详细阐述：业务需求概述OA办公管理系统旨在通过自动化处理办公流程、集中管理企业信息和数据，以及促进内部协作和沟通，从而提高企业的工作效率和管理水平。该系统应涵盖企业日常办公的各个方面，如工作台 、日程待办、组织架构、员工管理、员工档案、入职离职管理、转正人事调动、考勤班次、打卡记录、假期规则、考勤表、薪酬体系、薪资核算、工资条、审批管理、审批表单、招聘候选、职位管理、简历设置、绩效考核、绩效设置、考核模板、考核计划、指标评分明细、面谈绩效、社保公积金、参保方案、参保账单、会议室预订、用车还车、资产管理、领用退库、借用归还、调拨盘点、文档库、新闻公告、合同管理、入职培训、课程管理等等所有元件均可复用，可作为管理端原型设计模板，按照实际项目需求进行功能拓展。有需要的话可分享源文件。经典案例参考在构建OA办公管理系统时，可以参考一些经典案例，如钉钉、企业微信、飞书等。这些系统不仅功能丰富、用户体验良好，而且具有较高的市场认可度和用户满意度。通过参考这些案例，可以了解行业内的最佳实践和流行趋势，为系统设计和开发提供有益的借鉴。整体内容页面架构-目录大纲二、具体需求分析协作与沟通即时通讯：提供即时消息传递功能，支持文字、语音、视频等多种通讯方式，方便员工快速交流。邮件管理：集成邮件系统，实现邮件的发送、接收、管理等功能，提高工作效率。日程安排与会议管理：支持员工个人及团队的日程安排，考勤打卡、自动提醒会议、任务等事项；会议管理功能应包括会议预约、会议通知、会议记录等。工作流程管理自定义流程：允许企业根据自身需求自定义各类工作流程，如请假、报销、采购等。流程审批：实现流程的电子化审批，减少纸质文件流转，提高工作效率。系统应支持多级审批、条件审批等复杂审批逻辑。任务分配与跟踪：将工作任务分配给相关人员，并跟踪任务进度，确保任务按时完成。自定义流程：允许企业根据自身需求自定义各类工作流程文件管理集中存储：提供一个集中的文件管理平台，方便员工存储、共享和查找文件。版本控制：支持文件的版本控制功能，确保文件在修改过程中的一致性和可追溯性。权限管理：根据员工角色和职责设置文件访问权限，保障文件的安全性。信息统计与报表数据统计：收集和分析企业运营过程中的各类数据，如员工考勤、工作绩效等。报表生成：自动生成各类报表和图表，为管理层提供决策支持。收集和分析企业运营过程中的各类数据，如员工考勤、工作绩效等移动办公移动设备支持：支持手机、平板电脑等移动设备的访问和使用，员工可以随时随地处理工作。离线访问：提供离线访问功能，确保在网络不稳定或无法连接时仍能处理工作。所有元件均可复用，可作为管理端原型设计模板，按照实际项目需求进行功能拓展。有需要的话可分享源文件。源文件格式:rp文件、HTML文件。可部署服务器。包含源文件可二次开发修改编辑。软件版本：Axure8.1兼容Axure9.0 、Axure10.0 墨刀、pixso都可以使用。Axure手机端源文件演示及下载地址：Axurehttps://ualpt2.axshare.com安全性与稳定性数据加密：对系统中的敏感数据进行加密存储和传输，防止数据泄露。访问控制：采用多种认证方式（如用户名/密码、生物识别等）和细粒度的授权功能，确保只有授权用户才能访问系统。系统备份与恢复：定期进行系统备份，确保在数据丢失或系统故障时能够快速恢复。扩展性与定制化模块化设计：采用模块化设计，方便企业根据实际需求选择和使用功能模块。API接口：提供丰富的API接口，方便与其他系统进行集成和扩展。定制化服务：提供定制化服务，根据企业特殊需求进行个性化定制。三、结论OA办公管理系统的需求分析是构建高效、协同办公环境的基础。通过深入分析企业的业务需求、员工需求以及技术需求，可以设计出符合企业实际情况的OA系统，从而提高企业的工作效率和管理水平。同时，在需求分析过程中还需要充分考虑系统的安全性、稳定性、扩展性和定制化需求，以确保系统能够长期稳定运行并满足企业未来的发展需求。原型设计规划：根据需求分析结果，规划原型设计的整体框架和页面结构。确定原型设计将包含哪些页面和交互元素。二、界面设计阶段创建项目：打开Axure RP软件，创建一个新项目，并设置项目的名称、保存路径等基本信息。设计母版和全局元素：创建母版（Master），用于定义全局性的页面元素，如页眉、页脚、导航栏等。这些元素将在多个页面中重复使用，提高设计效率并保持界面的一致性。设计页面布局：根据规划，逐一设计各个页面的布局。使用Axure RP提供的工具（如矩形、文本框、图片等）来构建页面元素。添加交互元素：在页面中添加按钮、链接、表单等交互元素。设置这些元素的交互属性，如点击事件、鼠标悬停效果等。三、交互设计阶段交互事件（Events）交互事件是指在用户与界面进行交互时触发的动作或行为。Axure中常见的交互事件包括：点击事件（Click）：当用户点击某个元素时触发的事件，常用于模拟按钮点击、链接跳转等交互行为。鼠标悬停事件（Mouse Hover）：当用户将鼠标悬停在某个元素上时触发的事件，常用于显示更多信息、触发下拉菜单等交互效果。输入事件（Input）：当用户在文本框等输入元素中输入内容时触发的事件，常用于模拟用户输入、验证表单等交互行为。页面加载事件（Page Load）：当页面加载完成后触发的事件，常用于模拟页面的初始状态、数据加载等。此外，还有双击（Double Click）、右击（Right Click）、按下（On Down）、松开（On Up）等事件可供选择，这些事件提供了更丰富的交互可能性。交互动作（Actions）交互动作（Actions）交互动作是指在交互事件触发后执行的操作。Axure中提供了多种交互动作，包括但不限于：显示/隐藏元素：通过交互动作控制元素的显示和隐藏，以实现一些交互效果，比如展开/折叠菜单、显示/隐藏弹出窗口等。跳转到页面：在交互事件触发后跳转到其他页面，模拟页面之间的导航和流程。更改元素属性：修改元素的属性，比如改变文本内容、更改背景颜色、调整大小等。滚动到位置：控制页面滚动到指定的位置，以便展示更多内容或帮助用户定位到特定区域。设置面板状态：在动态面板中，可以通过设置面板状态来改变面板的显示内容或布局。设置交互动作和事件的步骤选择要添加交互的元素：在Axure的画布上，选择你想要添加交互的元素，比如一个按钮或文本框。打开交互面板：在Axure的顶部菜单中，找到“交互”（Interactions）面板并打开它。新建交互：在交互面板中，点击“新建交互”（New Interaction）按钮，然后选择你想要设置的事件类型，比如“点击”（Click）。添加动作：在选择事件后，下方的动作列表会自动打开。从列表中选择你想要执行的动作，比如“显示/隐藏”（Show/Hide）某个元素或“跳转到页面”（Open Link in Current Window）。设置动作属性：对于每个动作，你都需要设置一些属性来指定动作的具体行为。比如，如果你选择了“显示/隐藏”动作，你需要指定要显示或隐藏的元素。保存并预览：完成设置后，点击“确定”按钮保存交互。然后，你可以通过预览功能来查看交互的效果。注意事项在设置交互时，要确保元素的命名清晰、易于理解，以便在后续的设计和开发过程中能够方便地引用和修改。交互动作和事件的设置要遵循用户的使用习惯和产品的逻辑流程，以确保用户能够顺畅地使用产品。在进行复杂的交互设计时，可以利用Axure的动态面板（Dynamic Panel）功能来组织和管理元素的状态和布局。通过以上步骤和注意事项，你可以在Axure中灵活地设置各种交互动作和事件，以模拟真实的产品交互体验。预览和调整：使用Axure RP的预览功能来测试原型的交互效果。根据测试结果，对原型进行必要的调整和优化。四、评审和迭代阶段内部评审：组织团队成员对原型进行内部评审，收集反馈意见。根据反馈意见，对原型进行必要的修改和完善。用户测试：邀请目标用户参与原型测试，了解他们对系统的真实需求和反馈。根据用户测试的结果，对原型进行进一步的迭代和优化。文档化：编写原型设计文档，详细记录原型的设计思路、页面结构、交互逻辑等信息。文档将作为后续开发和维护的重要参考依据。五、发布和维护阶段发布原型：将原型导出为HTML格式或其他可分享的格式，并发布到内部平台或外部网站上供相关人员查看和使用。维护和更新：根据业务发展和用户需求的变化，对原型进行定期的维护和更新。保持原型与实际业务需求的一致性。通过以上步骤，你可以使用Axure RP制作出一个功能完善、交互流畅的OA办公管理系统原型。需要注意的是，原型设计是一个迭代和优化的过程，需要不断地根据用户反馈和业务需求进行调整和完善。六、系统开发选择开发技术：根据系统规划，选择合适的开发技术，包括编程语言、数据库系统、开发工具等。编码实现：开发人员根据系统规划和设计文档，进行编码实现。在这一阶段，需要确保代码质量，遵循软件开发的最佳实践。集成测试：在系统开发过程中，需要进行单元测试、集成测试等，确保各个模块能够正常工作，并且模块之间能够正确交互。七、系统部署环境准备：搭建系统运行的软硬件环境，包括服务器、数据库、网络设备等。系统安装：将开发完成的OA系统安装到服务器上，并进行必要的配置。用户培训：对企业内部用户进行系统使用培训，确保用户能够熟练使用系统。八、系统运维日常维护：定期对系统进行维护，包括数据备份、安全检查、性能优化等。版本升级：根据用户需求和技术发展，对系统进行版本升级，增加新功能或修复已知问题。技术支持：为用户提供技术支持服务，解决用户在使用过程中遇到的问题。综上所述，构建OA办公管理系统需要经历需求分析、系统规划、系统开发、系统部署、系统运维等多个阶段。在构建过程中，需要充分考虑企业的实际需求和技术能力，选择合适的开发技术和方案，确保系统能够满足企业的业务需求和用户体验要求。感谢您的阅读，希望能帮到您，OA办公管理系统原型所有元件均可复用，可作为管理端原型设计模板，按照实际项目需求进行功能拓展。有需要的话可分享源文件。所有元件均可复用，可作为管理端原型设计模板，按照实际项目需求进行功能拓展。有需要的话可分享源文件。源文件格式:rp文件、HTML文件。可部署服务器。包含源文件可二次开发修改编辑。软件版本：Axure8.1兼容Axure9.0 、Axure10.0 墨刀、pixso都可以使用。Axure源文件演示及下载地址：Axurehttps://4kv43m.axshare.comhttp://www.ppmy.cn/news/1541071.html相关文章手写模拟Spring的基本功能文章目录 1. Spring的基本功能2. 容器启动 容器启动&amp;#xff0c;即创建容器对象并赋予配置对象3. BeanDefinition扫描4. Bean的生命周期5. 单例Bean与多例Bean6. 依赖注入7. AOP8. Aware 回调9. 初始化10. BeanPostProcessor附录&amp;#xff1a; 1. Spring的基本功能 2. 容器启动 …阅读更多...Ajax：跨域、防抖和节流、HTTP协议在善意的“双向奔赴”中&amp;#xff0c;每个普通人都如星辰&amp;#xff0c;微小但释放着自己的光芒&amp;#xff0c;交织成灿烂的星河 文章目录 跨域防抖和节流HTTP协议HTP状态码以及代表意义错误代码的影响移动的小天使 跨域 
同源策略 概念&amp;#xff1a;协议&amp;#xff0c;域名&amp;#xff0c…阅读更多...大数据-178 Elasticsearch Query - Java API 索引操作  文档操作点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...uniapp 获取签名证书 SHA1 自有证书签名打包1.登录你的Dcloud 账户 
2.找到我的应用菜单 3.点开某个应用 4.查看证书详情&amp;#xff0c;里面有SHA1 和别名&amp;#xff0c;密码&amp;#xff0c;下载证书用于云打包&amp;#xff0c;可以选择自有证书&amp;#xff0c;输入别名&amp;#xff0c;密码打包阅读更多...Linux网络编程（六）-TCP协议服务端及代码实现1.概述 
在讲述了那么多以后我们终于来到了代码阶段的讲解了&amp;#xff0c;先放一张流程图便于大家理解。接着会为大家讲述具体的实现过程。 通过上图我们可以看到一个完整的Socket网络通信&amp;#xff0c;是有客户端和服务端两部分代码组成的&amp;#xff0c;即两个程序&amp;#xff08;你发…阅读更多...Android TextView实现一串文字特定几个字改变颜色遇到一个需求&amp;#xff0c;让Android端实现给定一个字符串指定下标的几个字颜色与其他字颜色不一致。 主要是用ForegroundColorSpan这个API来传入颜色值&amp;#xff0c;用SpannableString来设置指定索引下标的字的颜色值。 这里通过给定一个输入文字描述框&amp;#xff0c;要求输入指定…阅读更多...Mysql 和MongoDB用户访问权限问题Mysql 
刚给二线运维排查了一个问题&amp;#xff0c;Mysql安装完可用&amp;#xff0c;且可用navicat连接&amp;#xff0c;项目中通过127.0.0.1去连数据库报错了。错误是access denied for user ‘root’localhost,排查思路 
1. 密码是否正确 
&amp;#xff08;不需要重置。到Mysql的安装目录下找…阅读更多...流批一体计算引擎-17-[Flink]中的Table API常用算子文章目录 1 概述&amp;示例1.1 data.csv1.2 代码示例2 操作算子2.1 扫描、投影和过滤2.1.1 from_path【流批】2.1.2 from_elements【流批】2.1.3 select【流批】2.1.4 alias【流批】2.1.5 where【流批】2.1.6 filter【流批】2.2 列操作2.2.1 add_columns【流批】2.2.2 add_or_re…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:08 +0000</pubDate>
    </item>
    <item>
      <title>手写模拟Spring的基本功能</title>
      <link>https://www.ppmy.cn/news/1541070.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维手写模拟Spring的基本功能news/2025/11/1 1:18:07/文章目录1. Spring的基本功能2. 容器启动+ 容器启动，即创建容器对象并赋予配置对象3. BeanDefinition扫描4. Bean的生命周期5. 单例Bean与多例Bean6. 依赖注入7. AOP8. Aware 回调9. 初始化10. BeanPostProcessor附录：1. Spring的基本功能2. 容器启动+ 容器启动，即创建容器对象并赋予配置对象// 自定义的 IOC 容器对象GyhApplicationContextgyhApplicationContext=newGyhApplicationContext(AppConfig.class);3. BeanDefinition扫描对于基于注解的方式，会在构造方法中扫描 @ConponentScan 的 value 值对应其下的所有类对应的.class文件（存在于out文件夹下）将 扫描到的bean信息（Class, scope）封装至BeanDefinition对象中并由 一个 Map (beanDefinitionMap) 保存beanName ---&gt; BeanDefinition4. Bean的生命周期在createBean中：利用 Bean 的空构造器通过反射创建设置对象属性（伴随着依赖注入）执行前置处理器执行初始化方法执行后置处理器调用使用执行 destory 方法5. 单例Bean与多例Bean对于单例Bean是在初始化容器时（扫描过程中）创建并由 一个 Map（singletonObjects）管理 beanName —&gt; beanInstance对于多例Bean是在 getBean() 方法中实时创建的6. 依赖注入在 createBean 方法中，扫描所有 bean 被 @Autowire 标注的属性为其注入容器中的 bean若当前容器中还没有所依赖bean，则会创建该bean，然后再注入7. AOPspring是基于动态代理初始化后，通过动态代理生成实现了指定接口的代理类使用了AOP对应的 bean 会被代理类的对象所替换8. Aware 回调对应自定义的bean的类实现了Spring中指定的 Aware接口。可以在创建 bean 的过程中被检索到，并在定制的顺序中执行 Aware接口中定义的方法（即调用bean中实现的Aware接口的方法）9. 初始化是spring的Aware接口中的一种，spring会检索实现了InitializationBean接口的 Bean。在创建这些bean是会调用其实现的afterPropertiesSet方法10. BeanPostProcessor后置处理器，也是Aware回调接口中的一种，其定义的前置与后置方法会被用在所有bean的创建过程中附录：GyhApplicationContextpackagecom.gyh.spring;importcom.gyh.service.UserService;importjava.io.File;importjava.lang.reflect.Field;importjava.lang.reflect.InvocationTargetException;importjava.net.URL;importjava.util.ArrayList;importjava.util.List;importjava.util.Map;importjava.util.concurrent.ConcurrentHashMap;/*** @author Gao YongHao* @version 1.0* 模拟Spring的javaConfig的容器启动方式*/publicclassGyhApplicationContext{privateClass&lt;?&gt;configClass;// 用于保存Bean对象的信息（class 对象， 作用域信息）privateConcurrentHashMap&lt;String,BeanDefinition&gt;beanDefinitionMap=newConcurrentHashMap&lt;&gt;();// 用于保存单例的对象privateConcurrentHashMap&lt;String,Object&gt;singletonObjects=newConcurrentHashMap&lt;&gt;();// 用于保存 BeanPostProcessor 的集合privateList&lt;BeanPostProcessor&gt;beanPostProcessors=newArrayList&lt;&gt;();publicGyhApplicationContext(Class&lt;?&gt;configClass){this.configClass=configClass;// 扫描，单例的对象被直接创建，多例的对象在使用时创建if(configClass.isAnnotationPresent(ComponentScan.class)){ComponentScanannotation=configClass.getAnnotation(ComponentScan.class);StringpackagePath=annotation.value();// 扫描路径 "com.gyh.service"packagePath=packagePath.replace(".","/");// 在 out 文件夹中定位 .class 文件的路径ClassLoaderclassLoader=GyhApplicationContext.class.getClassLoader();URLresource=classLoader.getResource(packagePath);Filefile=newFile(resource.getFile());//            System.out.println(file);// 如果是文件夹if(file.isDirectory()){File[]files=file.listFiles();for(Filef:files){StringabsolutePath=f.getAbsolutePath();// 筛选出 .class 结尾的字节码文件if(absolutePath.endsWith(".class")){StringloadClassPath=absolutePath.substring(absolutePath.indexOf("com"),absolutePath.indexOf(".class"));loadClassPath=loadClassPath.replace("\\",".");// loadClassPath == "com\gyh\service\UserService"//                        System.out.println(loadClassPath);try{// 利用类加载器加载指定文件夹下的 .class 文件Class&lt;?&gt;aClass=classLoader.loadClass(loadClassPath);// 查看是否有标注 Bean 对应的的注解if(aClass.isAnnotationPresent(Component.class)){// 扫描出实现了 BeanPostProcessor 的 bean，将其实例化对象放置于 集合 中if(BeanPostProcessor.class.isAssignableFrom(aClass)){beanPostProcessors.add((BeanPostProcessor)aClass.newInstance());}// 设置的Bean名称（若为""或null）则设置为首字母小写的类名StringbeanName=aClass.getAnnotation(Component.class).value();if("".equals(beanName)){beanName=aClass.getSimpleName().substring(0,1).toLowerCase()+aClass.getSimpleName().substring(1);}// 创建保存Bean信息的对象BeanDefinitionbeanDefinition=newBeanDefinition();beanDefinition.setType(aClass);// 该对象类型if(aClass.isAnnotationPresent(Scope.class)){Scopeannotation1=aClass.getAnnotation(Scope.class);Stringvalue=annotation1.value();beanDefinition.setScope(value);}else{// 默认是单例的beanDefinition.setScope("Singleton");}// 放置于 beanDefinitionMap 中管理beanDefinitionMap.put(beanName,beanDefinition);}// 填充单例对象for(Map.Entry&lt;String,BeanDefinition&gt;s:beanDefinitionMap.entrySet()){BeanDefinitionvalue=s.getValue();if(value.getScope().equals("Singleton")){// 存有依赖注入的单例对象生成singletonObjects.put(s.getKey(),createBean(s.getKey(),value));}}}catch(Exceptione){e.printStackTrace();}}}}}}/*** 创建Bean对象，** @param beanName       bean 对象名称* @param beanDefinition bean 对象的信息* @return*/publicObjectcreateBean(StringbeanName,BeanDefinitionbeanDefinition){Class&lt;?&gt;type=beanDefinition.getType();Objecto=null;try{o=type.getConstructor().newInstance();// 依赖注入// 遍历属性对属性进行依赖注入for(Fieldf:type.getDeclaredFields()){if(f.isAnnotationPresent(Autowired.class)){f.setAccessible(true);// 关闭访问权限// 将容器中管理的bean注入到该属性中（可能先于当前类创建，也可能后于当前类创建）f.set(o,getBean(beanName,type));}}// 回调机制，查看当前的Bean是否实现了指定的接口// 如果实现则执行相关方法（BeanPostProcessor即是如此实现）if(oinstanceofBeanNameAware){((BeanNameAware)o).setBeanName(beanName);}for(BeanPostProcessorb:beanPostProcessors){b.beforePostProcess(beanName,o);}// 初始化也使用回调实现// 基于AOP会在后置处理器中创建 bean 的动态代理对象，并封装切面逻辑for(BeanPostProcessorb:beanPostProcessors){b.afterPostProcess(beanName,o);}}catch(NoSuchMethodExceptione){e.printStackTrace();}catch(IllegalAccessExceptione){e.printStackTrace();}catch(InstantiationExceptione){e.printStackTrace();}catch(InvocationTargetExceptione){e.printStackTrace();}returno;}/*** 用于返回 Bean 对象的方法** @param beanName Bean 的名称* @param clazz    Bean 对应的 Class 对象* @param &lt;T&gt;* @return*/public&lt;T&gt;TgetBean(StringbeanName,Class&lt;T&gt;clazz){BeanDefinitionbeanDefinition=beanDefinitionMap.get(beanName);if(beanDefinition==null){thrownewNullPointerException();}else{Stringscope=beanDefinition.getScope();if(scope.equals("Singleton")){// 从单例池中获取对象Objecto=singletonObjects.get(beanName);if(o==null){// 对应依赖注入时可能会用到o=createBean(beanName,beanDefinition);singletonObjects.put(beanName,o);// 放入单例池中}return(T)o;}else{// 多例则实时创建Objecto=null;try{o=beanDefinition.getType().newInstance();}catch(InstantiationExceptione){e.printStackTrace();}catch(IllegalAccessExceptione){e.printStackTrace();}return(T)o;}}}}http://www.ppmy.cn/news/1541070.html相关文章Ajax：跨域、防抖和节流、HTTP协议在善意的“双向奔赴”中&amp;#xff0c;每个普通人都如星辰&amp;#xff0c;微小但释放着自己的光芒&amp;#xff0c;交织成灿烂的星河 文章目录 跨域防抖和节流HTTP协议HTP状态码以及代表意义错误代码的影响移动的小天使 跨域 
同源策略 概念&amp;#xff1a;协议&amp;#xff0c;域名&amp;#xff0c…阅读更多...大数据-178 Elasticsearch Query - Java API 索引操作  文档操作点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...uniapp 获取签名证书 SHA1 自有证书签名打包1.登录你的Dcloud 账户 
2.找到我的应用菜单 3.点开某个应用 4.查看证书详情&amp;#xff0c;里面有SHA1 和别名&amp;#xff0c;密码&amp;#xff0c;下载证书用于云打包&amp;#xff0c;可以选择自有证书&amp;#xff0c;输入别名&amp;#xff0c;密码打包阅读更多...Linux网络编程（六）-TCP协议服务端及代码实现1.概述 
在讲述了那么多以后我们终于来到了代码阶段的讲解了&amp;#xff0c;先放一张流程图便于大家理解。接着会为大家讲述具体的实现过程。 通过上图我们可以看到一个完整的Socket网络通信&amp;#xff0c;是有客户端和服务端两部分代码组成的&amp;#xff0c;即两个程序&amp;#xff08;你发…阅读更多...Android TextView实现一串文字特定几个字改变颜色遇到一个需求&amp;#xff0c;让Android端实现给定一个字符串指定下标的几个字颜色与其他字颜色不一致。 主要是用ForegroundColorSpan这个API来传入颜色值&amp;#xff0c;用SpannableString来设置指定索引下标的字的颜色值。 这里通过给定一个输入文字描述框&amp;#xff0c;要求输入指定…阅读更多...Mysql 和MongoDB用户访问权限问题Mysql 
刚给二线运维排查了一个问题&amp;#xff0c;Mysql安装完可用&amp;#xff0c;且可用navicat连接&amp;#xff0c;项目中通过127.0.0.1去连数据库报错了。错误是access denied for user ‘root’localhost,排查思路 
1. 密码是否正确 
&amp;#xff08;不需要重置。到Mysql的安装目录下找…阅读更多...流批一体计算引擎-17-[Flink]中的Table API常用算子文章目录 1 概述&amp;示例1.1 data.csv1.2 代码示例2 操作算子2.1 扫描、投影和过滤2.1.1 from_path【流批】2.1.2 from_elements【流批】2.1.3 select【流批】2.1.4 alias【流批】2.1.5 where【流批】2.1.6 filter【流批】2.2 列操作2.2.1 add_columns【流批】2.2.2 add_or_re…阅读更多...13 django管理系统 - 注册与登录 - 中间件控制访问去管理员列表中&amp;#xff0c;获取刚才登录的用户session&amp;#xff1a; 
用户发来请求&amp;#xff0c;获取cookie随机字符串&amp;#xff0c;拿着随机字符串&amp;#xff0c;看看session中有没有 
通过request.session.get("user_info")来获取 def admin_list(request):# 获取当前登…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:07 +0000</pubDate>
    </item>
    <item>
      <title>Ajax：跨域、防抖和节流、HTTP协议</title>
      <link>https://www.ppmy.cn/news/1541069.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Ajax：跨域、防抖和节流、HTTP协议news/2025/11/1 1:18:06/在善意的“双向奔赴”中，每个普通人都如星辰，微小但释放着自己的光芒，交织成灿烂的星河文章目录跨域防抖和节流HTTP协议HTP状态码以及代表意义错误代码的影响移动的小天使跨域同源策略概念：协议，域名，端口都一样协议：例如 http或者https域名：例如 www.bai.com端口：http协议默认端口是80，https默认端口是443两个非同源的URL带来的影响无法读取非同源网页的cookie、LocalStorage和IndexedDB无法接触非同源网页的dom无法向非同源地址发送ajax请求 (可以去请求，浏览器会阻止接收结果)跨域概念：违反了同源策略的ajax请求实现跨域JSONP步骤随便准备一个函数，用于接收服务器返回的结果函数要有一个形参，形参就是服务器返回的结果定义一个script标签，标签的src指向接口地址必须执行callback函数，函数的值是前面准备好的函数名原理：当请求接口之后，接口返回一段调用函数的代码，调用的函数(就是我们准备好的函数)就是向接口发送请求时携带的callback函数安装第三方包CORS (跨资源共享)服务器代理用node.js中间件代理跨域Access-Control-Allow-Origin: '*'防抖和节流防抖概念：防抖策略是当事件被触发后，延迟n秒在执行回调，如果在n秒内事件又被触发，则重新计时实现步骤设置var timer = null放抖动的timer判断timer是否为null，如果不为null则清除定时器设置定时器，约定一段时间后执行某些功能函数节流概念：节流策略可以减少一段时间内事件的触发频率 (减少事件内部代码的执行次数)实现步骤设置节流阀var timer = null事件内部判断timer，如果timer不为null (说明有一个定时器正在执行)，则return设置定时器，在定时器内部编写程序代码，并且打开节流阀timer = null总结防抖：如果事件被频繁触发，防抖能保证只有最后一次触发生效，前面N多次的触发都会被忽略节流：如果事件被频繁触发，节流能够减少事件触发的频率，因此，节流是有选择性的执行一部分事件HTTP协议概念：HTTP是超文本传输协议，协议规定了客户端与服务器交互数据时，数据的格式请求消息请求行 (请求方式、请求的url、协议的版本)请求头 (由多行键值对组成)Content-Type告诉服务器提交的数据是什么格式的User-Agent告诉服务器发送到请求的浏览器是什么浏览器请求体 (提交的数据就是请求体 GET方式没有请求体，POST方式才有请求体)响应消息响应行 (协议及版本)响应头 (Content-Type:application/json;charset=utf-8服务器告诉浏览器返回的数据是什么格式的)响应体 (返回的主要内容就是返回的数据，可以在network-&gt;请求-&gt;response查看)HTP状态码以及代表意义200：请求成功201：添加成功304：请求的资源没有改变 (去缓存中取数据即可)400：请求的格式不对 (最有可能得原因是请求参数写错了)404：请求的资源不存在 (url地址可能错误)500：服务器内部错误错误代码的影响分类解析代码时的错误 (语法、词法错误)运行代码时的错误 (调用函数等等)错误对当前script代码段的影响解析代码时的错误会导致整个script代码全部瘫痪运行代码时的错误会导致错误之前的代码能够执行，错误之后的代码不能执行注意：两个没有关系的script代码段前一个script代码段无论发生什么都不会影响后面的script代码段移动的小天使&lt;!DOCTYPEhtml&gt;&lt;htmllang="zh-CN"&gt;&lt;head&gt;&lt;metacharset="UTF-8"&gt;&lt;metaname="viewport"content="width=device-width, initial-scale=1.0"&gt;&lt;title&gt;Document&lt;/title&gt;&lt;scriptsrc="jquery.js"&gt;&lt;/script&gt;&lt;style&gt;img{position:absolute;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;imgsrc="angel.gif"alt=""&gt;&lt;script&gt;// 1.设置节流阀vartimer=null// 2.事件内部,判断timer,如果不为null(说明有一个定时器正在执行),return$(document).on('mousemove',function(e){if(timer!=null){return}// 3.设置定时器,定时器内部,编写程序代码.并且打开节流阀 (timer = null)timer=setTimeout(function(){varx=e.pageX// 鼠标距离页面左边的位置vary=e.pageY// 鼠标距离页面上边的位置// 设置img的位置$('img').css({left:x+'px',top:y+'px'})console.log('今天星期三')// 重置timer为null,相当于打开节流阀timer=null},30)})&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;http://www.ppmy.cn/news/1541069.html相关文章大数据-178 Elasticsearch Query - Java API 索引操作  文档操作点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...uniapp 获取签名证书 SHA1 自有证书签名打包1.登录你的Dcloud 账户 
2.找到我的应用菜单 3.点开某个应用 4.查看证书详情&amp;#xff0c;里面有SHA1 和别名&amp;#xff0c;密码&amp;#xff0c;下载证书用于云打包&amp;#xff0c;可以选择自有证书&amp;#xff0c;输入别名&amp;#xff0c;密码打包阅读更多...Linux网络编程（六）-TCP协议服务端及代码实现1.概述 
在讲述了那么多以后我们终于来到了代码阶段的讲解了&amp;#xff0c;先放一张流程图便于大家理解。接着会为大家讲述具体的实现过程。 通过上图我们可以看到一个完整的Socket网络通信&amp;#xff0c;是有客户端和服务端两部分代码组成的&amp;#xff0c;即两个程序&amp;#xff08;你发…阅读更多...Android TextView实现一串文字特定几个字改变颜色遇到一个需求&amp;#xff0c;让Android端实现给定一个字符串指定下标的几个字颜色与其他字颜色不一致。 主要是用ForegroundColorSpan这个API来传入颜色值&amp;#xff0c;用SpannableString来设置指定索引下标的字的颜色值。 这里通过给定一个输入文字描述框&amp;#xff0c;要求输入指定…阅读更多...Mysql 和MongoDB用户访问权限问题Mysql 
刚给二线运维排查了一个问题&amp;#xff0c;Mysql安装完可用&amp;#xff0c;且可用navicat连接&amp;#xff0c;项目中通过127.0.0.1去连数据库报错了。错误是access denied for user ‘root’localhost,排查思路 
1. 密码是否正确 
&amp;#xff08;不需要重置。到Mysql的安装目录下找…阅读更多...流批一体计算引擎-17-[Flink]中的Table API常用算子文章目录 1 概述&amp;示例1.1 data.csv1.2 代码示例2 操作算子2.1 扫描、投影和过滤2.1.1 from_path【流批】2.1.2 from_elements【流批】2.1.3 select【流批】2.1.4 alias【流批】2.1.5 where【流批】2.1.6 filter【流批】2.2 列操作2.2.1 add_columns【流批】2.2.2 add_or_re…阅读更多...13 django管理系统 - 注册与登录 - 中间件控制访问去管理员列表中&amp;#xff0c;获取刚才登录的用户session&amp;#xff1a; 
用户发来请求&amp;#xff0c;获取cookie随机字符串&amp;#xff0c;拿着随机字符串&amp;#xff0c;看看session中有没有 
通过request.session.get("user_info")来获取 def admin_list(request):# 获取当前登…阅读更多...安装和简单使用Milvus安装和简单使用Milvus 
1 介绍 
Milvus是国产的高性能分布式向量数据库。 
# Milvus官网
https://milvus.io/# 安装文档
https://milvus.io/docs/install-overview.md# Python的对应关系和接口文档
https://milvus.io/api-reference/pymilvus/v2.4.x/About.md2 安装Milvus 
2.1…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:06 +0000</pubDate>
    </item>
    <item>
      <title>大数据-178 Elasticsearch Query - Java API 索引操作  文档操作</title>
      <link>https://www.ppmy.cn/news/1541068.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维大数据-178 Elasticsearch Query - Java API 索引操作  文档操作news/2025/11/1 1:18:05/点一下关注吧！！！非常感谢！！持续更新！！！目前已经更新到了：Hadoop（已更完）HDFS（已更完）MapReduce（已更完）Hive（已更完）Flume（已更完）Sqoop（已更完）Zookeeper（已更完）HBase（已更完）Redis （已更完）Kafka（已更完）Spark（已更完）Flink（已更完）ClickHouse（已更完）Kudu（已更完）Druid（已更完）Kylin（已更完）Elasticsearch（正在更新…）章节内容上节我们完成了如下的内容：聚合分析指标聚合桶聚合索引操作创建索引：创建索引是存储数据的第一步。在 Elasticsearch 中，索引相当于关系数据库中的表。创建索引时，你可以指定映射（Mapping），定义字段类型（如 text、keyword、date、geo_point 等）。可以通过 Java API 传递索引设置（Settings）和映射来灵活定义索引的结构。获取索引信息：通过 Java API 可以获取现有索引的详细信息，例如索引的元数据、字段映射、分片数量、副本数量等。这有助于用户分析和优化索引的性能。索引存在性检查：在执行某些操作之前，检查索引是否存在是常见需求。例如，在插入数据前确保索引已经创建，或在删除索引之前确认它的存在性。删除索引：删除不再需要的索引可以节省磁盘空间。需要小心的是，删除索引会清除该索引中的所有数据，操作不可逆，因此通常建议在执行此操作前进行备份。更新索引设置：当集群扩展或数据增长时，你可能需要动态调整索引的分片数量或副本数量。Java API 提供了修改索引设置的功能，可以对现有索引进行优化调整。文档操作插入文档：文档是 Elasticsearch 中的最小数据存储单元，类似于关系数据库中的行。每个文档以 JSON 格式存储在索引中。通过 Java API，可以向特定索引插入单个文档，并指定文档的 ID（如果不指定，Elasticsearch 会自动生成一个 ID）。获取文档：Java API 可以根据文档 ID 从索引中获取单个文档，返回的结果会包含文档的元数据信息，如 _id、_index、_version 等。获取文档操作通常用于精确查询和显示某个特定数据。更新文档：更新文档时，Elasticsearch 并不会直接修改原始文档，而是通过创建一个新版本的文档来完成。Java API 支持部分更新（Partial Update），即只更新文档中的某些字段，而不必重新提交整个文档。删除文档：删除文档同样基于文档 ID 进行操作。如果文档需要从集群中移除，可以通过 Java API 进行删除操作。此外，删除文档时也可以基于查询条件进行批量删除。批量操作：在处理大量文档时，批量操作（Bulk API）非常重要。Java API 提供了批量插入、更新、删除文档的功能，可以提高大规模数据处理的效率。批量操作通常应用于数据迁移、批量更新、或者从其他系统同步数据到 Elasticsearch。文件工程IDEA新建Maven工程，开始对Elasticsearch的学习。由于重复度很高，这里就跳过了，大家自行创建即可。导入依赖&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;projectxmlns="http://maven.apache.org/POM/4.0.0"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;groupId&gt;org.example&lt;/groupId&gt;&lt;artifactId&gt;study-es&lt;/artifactId&gt;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;properties&gt;&lt;maven.compiler.source&gt;17&lt;/maven.compiler.source&gt;&lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt;&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&lt;/properties&gt;&lt;dependencies&gt;&lt;dependency&gt;&lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;&lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;&lt;version&gt;7.3.0&lt;/version&gt;&lt;exclusions&gt;&lt;exclusion&gt;&lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;&lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;&lt;/exclusion&gt;&lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;&lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;&lt;version&gt;7.3.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;junit&lt;/groupId&gt;&lt;artifactId&gt;junit&lt;/artifactId&gt;&lt;version&gt;4.12&lt;/version&gt;&lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.testng&lt;/groupId&gt;&lt;artifactId&gt;testng&lt;/artifactId&gt;&lt;version&gt;6.14.3&lt;/version&gt;&lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;&lt;artifactId&gt;log4j-core&lt;/artifactId&gt;&lt;version&gt;2.11.1&lt;/version&gt;&lt;/dependency&gt;&lt;/dependencies&gt;&lt;/project&gt;配置文件我们要在Resource目录下，新建 log4j2.xml&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;Configurationstatus="WARN"&gt;&lt;Appenders&gt;&lt;Consolename="Console"target="SYSTEM_OUT"&gt;&lt;PatternLayoutpattern="%d{yyyy-mm-dd HH:mm:ss} [%t] %-5p %c{1}:%L - %msg%n"/&gt;&lt;/Console&gt;&lt;/Appenders&gt;&lt;Loggers&gt;&lt;Rootlevel="info"&gt;&lt;AppenderRefref="Console"/&gt;&lt;/Root&gt;&lt;/Loggers&gt;&lt;/Configuration&gt;创建Clientpackageicu.wzk;importorg.apache.http.HttpHost;importorg.elasticsearch.client.RestClient;importorg.elasticsearch.client.RestClientBuilder;importorg.elasticsearch.client.RestHighLevelClient;importorg.junit.After;importorg.junit.Before;importjava.io.IOException;publicclassElasticsearchTest{RestHighLevelClientclient;@Beforepublicvoidinit()throwsException{RestClientBuilderbuilder=RestClient.builder(newHttpHost("h121.wzk.icu",9200,"http"),newHttpHost("h122.wzk.icu",9200,"http"),newHttpHost("h123.wzk.icu",9200,"http"));finalRestHighLevelClienthighLevelClient=newRestHighLevelClient(builder);System.out.println(highLevelClient.cluster().toString());client=highLevelClient;}@Afterpublicvoiddestroy()throwsIOException{if(null!=client){client.close();}}}索引操作创建索引JSON方式@TestpublicvoidcreateIndex()throwsException{finalCreateIndexRequestindexRequest=newCreateIndexRequest("wzk-icu-es-test");// mapping 信息// mapping 信息Stringmapping="{\n"+"  \"settings\": {},\n"+"  \"mappings\": {\n"+"    \"properties\": {\n"+"      \"description\": {\n"+"        \"type\": \"text\",\n"+"        \"analyzer\": \"ik_max_word\"\n"+"      },\n"+"      \"name\": {\n"+"        \"type\": \"text\"\n"+"      },\n"+"      \"pic\": {\n"+"        \"type\": \"text\",\n"+"        \"index\": false\n"+"      },\n"+"      \"studymodel\": {\n"+"        \"type\": \"text\"\n"+"      }\n"+"    }\n"+"  }\n"+"}";indexRequest.source(mapping,XContentType.JSON);// 创建索引CreateIndexResponseindexResponse=client.indices().create(indexRequest,RequestOptions.DEFAULT);booleanacknowledged=indexResponse.isAcknowledged();System.out.println("创建结果: "+acknowledged);}执行结果如下图所示，创建成功！我们通过 Elasticsearch-Head 工具，可以看到如下的内容：对象方式@TestpublicvoidcreateIndex2()throwsException{CreateIndexRequestcreateIndexRequest=newCreateIndexRequest("wzk-icu-es-2");createIndexRequest.settings(Settings.builder().put("index.number_of_shards",5).put("index.number_of_replicas",1).build());// 指定 mappingXContentBuilderxContentBuilder=XContentFactory.jsonBuilder();xContentBuilder.startObject();xContentBuilder.startObject("properties");xContentBuilder.startObject("description").field("type","text").field("analyzer","ik_max_word").endObject();xContentBuilder.startObject("name").field("type","text").endObject();xContentBuilder.startObject("pic").field("type","text").field("index","false").endObject();xContentBuilder.startObject("studymodel").field("type","text").endObject();xContentBuilder.endObject();xContentBuilder.endObject();// mapping塞进去createIndexRequest.mapping(xContentBuilder);finalCreateIndexResponsecreateIndexResponse=client.indices().create(createIndexRequest,RequestOptions.DEFAULT);booleanacknowledged=createIndexResponse.isAcknowledged();System.out.println("创建结果2: "+acknowledged);}执行的结果的如下图所示：Elasticsearch-Head 查看，可以看到刚才创建的ES索引，分片的分布情况如下：删除索引@TestpublicvoiddeleteIndex()throwsException{DeleteIndexRequestdeleteRequest=newDeleteIndexRequest("wzk-icu-es-test");AcknowledgedResponsedeleteResponse=client.indices().delete(deleteRequest,RequestOptions.DEFAULT);booleanacknowledged=deleteResponse.isAcknowledged();System.out.println("删除索引: "+acknowledged);}执行结果如下图所示：对应的Elasticsearch-Head查看，可以看到索引已经移除了：文档操作添加文档@TestpublicvoidaddDoc()throwsException{IndexRequestindexRequest=newIndexRequest("wzk-icu-es-2").id("1");Stringstr=" {\n"+" \"name\": \"spark添加文档\",\n"+" \"description\": \"spark技术栈\",\n"+" \"studymodel\":\"online\",\n"+" \"pic\": \"http://www.baidu.com\"\n"+" }";indexRequest.source(str,XContentType.JSON);// 新增IndexResponseindex=client.index(indexRequest,RequestOptions.DEFAULT);System.out.println("新增的结果:"+index.status());}执行代码的结果如下图所示：查询文档@TestpublicvoidgetDoc()throwsException{GetRequestgetRequest=newGetRequest("wzk-icu-es-2");getRequest.id("1");GetResponsegetResponse=client.get(getRequest,RequestOptions.DEFAULT);Map&lt;String,Object&gt;sourceMap=getResponse.getSourceAsMap();System.out.println("查询结果:"+sourceMap);}执行结果如下图：查询所有@TestpublicvoidgetAllDoc()throwsException{SearchRequestsearchRequest=newSearchRequest();// 指定索引searchRequest.indices("wzk-icu-es-2");SearchSourceBuildersourceBuilder=newSearchSourceBuilder();sourceBuilder.query(QueryBuilders.matchAllQuery());searchRequest.source(sourceBuilder);SearchResponsesearchResponse=client.search(searchRequest,RequestOptions.DEFAULT);RestStatusstatus=searchResponse.status();System.out.println("查询结果状态: "+status);SearchHitshits=searchResponse.getHits();SearchHit[]hits1=hits.getHits();for(SearchHitsh:hits1){System.out.println("---");Map&lt;String,Object&gt;map=sh.getSourceAsMap();System.out.println("查询的结果: "+map);}}执行的结果如下图所示：http://www.ppmy.cn/news/1541068.html相关文章uniapp 获取签名证书 SHA1 自有证书签名打包1.登录你的Dcloud 账户 
2.找到我的应用菜单 3.点开某个应用 4.查看证书详情&amp;#xff0c;里面有SHA1 和别名&amp;#xff0c;密码&amp;#xff0c;下载证书用于云打包&amp;#xff0c;可以选择自有证书&amp;#xff0c;输入别名&amp;#xff0c;密码打包阅读更多...Linux网络编程（六）-TCP协议服务端及代码实现1.概述 
在讲述了那么多以后我们终于来到了代码阶段的讲解了&amp;#xff0c;先放一张流程图便于大家理解。接着会为大家讲述具体的实现过程。 通过上图我们可以看到一个完整的Socket网络通信&amp;#xff0c;是有客户端和服务端两部分代码组成的&amp;#xff0c;即两个程序&amp;#xff08;你发…阅读更多...Android TextView实现一串文字特定几个字改变颜色遇到一个需求&amp;#xff0c;让Android端实现给定一个字符串指定下标的几个字颜色与其他字颜色不一致。 主要是用ForegroundColorSpan这个API来传入颜色值&amp;#xff0c;用SpannableString来设置指定索引下标的字的颜色值。 这里通过给定一个输入文字描述框&amp;#xff0c;要求输入指定…阅读更多...Mysql 和MongoDB用户访问权限问题Mysql 
刚给二线运维排查了一个问题&amp;#xff0c;Mysql安装完可用&amp;#xff0c;且可用navicat连接&amp;#xff0c;项目中通过127.0.0.1去连数据库报错了。错误是access denied for user ‘root’localhost,排查思路 
1. 密码是否正确 
&amp;#xff08;不需要重置。到Mysql的安装目录下找…阅读更多...流批一体计算引擎-17-[Flink]中的Table API常用算子文章目录 1 概述&amp;示例1.1 data.csv1.2 代码示例2 操作算子2.1 扫描、投影和过滤2.1.1 from_path【流批】2.1.2 from_elements【流批】2.1.3 select【流批】2.1.4 alias【流批】2.1.5 where【流批】2.1.6 filter【流批】2.2 列操作2.2.1 add_columns【流批】2.2.2 add_or_re…阅读更多...13 django管理系统 - 注册与登录 - 中间件控制访问去管理员列表中&amp;#xff0c;获取刚才登录的用户session&amp;#xff1a; 
用户发来请求&amp;#xff0c;获取cookie随机字符串&amp;#xff0c;拿着随机字符串&amp;#xff0c;看看session中有没有 
通过request.session.get("user_info")来获取 def admin_list(request):# 获取当前登…阅读更多...安装和简单使用Milvus安装和简单使用Milvus 
1 介绍 
Milvus是国产的高性能分布式向量数据库。 
# Milvus官网
https://milvus.io/# 安装文档
https://milvus.io/docs/install-overview.md# Python的对应关系和接口文档
https://milvus.io/api-reference/pymilvus/v2.4.x/About.md2 安装Milvus 
2.1…阅读更多...解析带有MyBatis语法的SQL字符串，获取最终的可执行SQL有一个带有mybatis语法的sql语句&amp;#xff0c;如下&amp;#xff1a; 
select * from cfg_export_template where id  #{id} &lt;if testid ! null&gt; AND 1  1 &lt;/if&gt;需求是将sql和占位符相关的数据丢给mybatis&amp;#xff0c;获取到最终可执行的SQL。 解决思路&amp;#xff1a; 1、像…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:05 +0000</pubDate>
    </item>
    <item>
      <title>uniapp 获取签名证书 SHA1 自有证书签名打包</title>
      <link>https://www.ppmy.cn/news/1541067.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维uniapp 获取签名证书 SHA1 自有证书签名打包news/2025/11/1 1:18:04/1.登录你的Dcloud 账户2.找到我的应用菜单3.点开某个应用4.查看证书详情，里面有SHA1 和别名，密码，下载证书用于云打包，可以选择自有证书，输入别名，密码打包http://www.ppmy.cn/news/1541067.html相关文章Linux网络编程（六）-TCP协议服务端及代码实现1.概述 
在讲述了那么多以后我们终于来到了代码阶段的讲解了&amp;#xff0c;先放一张流程图便于大家理解。接着会为大家讲述具体的实现过程。 通过上图我们可以看到一个完整的Socket网络通信&amp;#xff0c;是有客户端和服务端两部分代码组成的&amp;#xff0c;即两个程序&amp;#xff08;你发…阅读更多...Android TextView实现一串文字特定几个字改变颜色遇到一个需求&amp;#xff0c;让Android端实现给定一个字符串指定下标的几个字颜色与其他字颜色不一致。 主要是用ForegroundColorSpan这个API来传入颜色值&amp;#xff0c;用SpannableString来设置指定索引下标的字的颜色值。 这里通过给定一个输入文字描述框&amp;#xff0c;要求输入指定…阅读更多...Mysql 和MongoDB用户访问权限问题Mysql 
刚给二线运维排查了一个问题&amp;#xff0c;Mysql安装完可用&amp;#xff0c;且可用navicat连接&amp;#xff0c;项目中通过127.0.0.1去连数据库报错了。错误是access denied for user ‘root’localhost,排查思路 
1. 密码是否正确 
&amp;#xff08;不需要重置。到Mysql的安装目录下找…阅读更多...流批一体计算引擎-17-[Flink]中的Table API常用算子文章目录 1 概述&amp;示例1.1 data.csv1.2 代码示例2 操作算子2.1 扫描、投影和过滤2.1.1 from_path【流批】2.1.2 from_elements【流批】2.1.3 select【流批】2.1.4 alias【流批】2.1.5 where【流批】2.1.6 filter【流批】2.2 列操作2.2.1 add_columns【流批】2.2.2 add_or_re…阅读更多...13 django管理系统 - 注册与登录 - 中间件控制访问去管理员列表中&amp;#xff0c;获取刚才登录的用户session&amp;#xff1a; 
用户发来请求&amp;#xff0c;获取cookie随机字符串&amp;#xff0c;拿着随机字符串&amp;#xff0c;看看session中有没有 
通过request.session.get("user_info")来获取 def admin_list(request):# 获取当前登…阅读更多...安装和简单使用Milvus安装和简单使用Milvus 
1 介绍 
Milvus是国产的高性能分布式向量数据库。 
# Milvus官网
https://milvus.io/# 安装文档
https://milvus.io/docs/install-overview.md# Python的对应关系和接口文档
https://milvus.io/api-reference/pymilvus/v2.4.x/About.md2 安装Milvus 
2.1…阅读更多...解析带有MyBatis语法的SQL字符串，获取最终的可执行SQL有一个带有mybatis语法的sql语句&amp;#xff0c;如下&amp;#xff1a; 
select * from cfg_export_template where id  #{id} &lt;if testid ! null&gt; AND 1  1 &lt;/if&gt;需求是将sql和占位符相关的数据丢给mybatis&amp;#xff0c;获取到最终可执行的SQL。 解决思路&amp;#xff1a; 1、像…阅读更多...R语言绘制Venn图(文氏图、温氏图、维恩图、范氏图、韦恩图)Venn图&amp;#xff0c;又称文氏图&amp;#xff0c;标题中其他名字也是它的别称&amp;#xff0c;由封闭圆形组成&amp;#xff0c;代表不同集合。圆形重叠部分表示集合交集&amp;#xff0c;非重叠处为独有元素。在生物学、统计学等领域广泛应用&amp;#xff0c;可展示不同数据集相似性与差异&amp;#xff0c;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:04 +0000</pubDate>
    </item>
    <item>
      <title>Linux网络编程（六）-TCP协议服务端及代码实现</title>
      <link>https://www.ppmy.cn/news/1541066.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Linux网络编程（六）-TCP协议服务端及代码实现news/2025/11/1 1:18:03/1.概述在讲述了那么多以后我们终于来到了代码阶段的讲解了，先放一张流程图便于大家理解。接着会为大家讲述具体的实现过程。通过上图我们可以看到一个完整的Socket网络通信，是有客户端和服务端两部分代码组成的，即两个程序（你发给我，我接收；我发给你，你接收）组成。左侧为客户端，右侧为服务端。每一步都是由Socket为我们封装好的函数实现，简单说，我们只需要弄明白每一步的作用和使用方法即可。本章我们先着重讲解服务端的每一步，TCP服务端调用的函数依次是**socket( )、bind( )、listen( )、accept( )、recv( )、send( )、closesocket( )，**我们会逐一详细的介绍每一个函数的作用及用法。除此之外，我们还会为大家介绍一下服务端和客户端都会用到的WSAStartup( )函数，在windows系统中我们需要这个函数来以指明 WinSock 规范的版本。以及WSACleanup函数，这个函数用来终止对Socket字库的使用。2.WSAStartup函数上一节我们介绍了客户端与服务端相互通信的模型图，每一步都有具体的函数实现，但需要明白的是，使用这些函数之前，在Windows系统下，需要先调用WSAStartup函数进行必要的初始化，才可以顺利的进行，而使用WSAStartup函数又需要事先先包含对应的头文件winsock2.h及静态库ws2_32.lib文件（在windows环境下）具体如下：函数功能：用于初始化Socket编程，指明Windows系统中Socket( )版本依赖静态库库：ws2_32.lib需要用#pragma命令包含，即：#pragma comment(lib,"ws2_32.lib")    //表示链接Ws2_32.lib这个库。ws2_32.lib是Winsock2的库文件。函数原型：int WSAStartup(WORD wVersionRequested, LPWSADATA lpWSAData);返回值类型：整型返回值:成功返回0，失败返回-1参数说明：第一个参数wVersionRequested为 WinSock 规范的版本号它的类型WORD,所以要用MAKEWORD( )宏函数对它的版本号进行转换。低字节为主版本号，高字节为副版本号。代码示例：wVersionRequired=MAKEWORD(1,2)   //即主版本号是1，副版本号位2，那么它表示的就是调用WinSock 1.2版本。     现在我们一般用2.2版本 ，即MAKEWORD(1,2)第二个参数lpWSAData 为指向 WSAData 结构体的指针。其定义原型如下：typedef struct WSAData {WORD        wVersion;    //ws2_32.dll 建议我们使用的版本号WORD        wHighVersion;    //ws2_32.dll 支持的最高版本号
#ifdef _WIN64unsigned short iMaxSockets;     //2.0以后不再使用unsigned short iMaxUdpDg;     //2.0以后不再使用char        *lpVendorInfo;     //2.0以后不再使用char        szDescription[WSADESCRIPTION_LEN+1];  //一个以 null 结尾的字符串，用来说明 ws2_32.dll 的实现以及厂商信息char        szSystemStatus[WSASYS_STATUS_LEN+1];  //一个以 null 结尾的字符串，用来说明 ws2_32.dll 的状态以及配置信息
#elsechar        szDescription[WSADESCRIPTION_LEN+1];   //32位版本，同上char        szSystemStatus[WSASYS_STATUS_LEN+1];   //32位版本，同上unsigned short iMaxSockets;    //32位版本，同上unsigned short iMaxUdpDg;    //32位版本，同上char        *lpVendorInfo;    32位版本，同上
#endif
} WSADATA, *LPWSADATA;怎么样，看清楚真实面貌了吧，因此我们只需要包含头文件、静态库，然后完善这两个参数，传入WSAStartup调用即可。当然，完整可编译的代码，则需要将以上代码放入main函数中，并且包含对应的头文件及相对应的静态库，使用方式如下：//www.dotcpp.com
#include &lt;stdio.h&gt;
#include &lt;winsock2.h&gt;
#pragma comment (lib, "ws2_32.lib")int main()
{
WSADATA wsaData;
WSAStartup( MAKEWORD(2, 2), &amp;wsaData); //目前建议使用最新2.2版本//以下为测试信息，打印相应的数值用于测试
printf("wVersion: %d.%d\\n", LOBYTE(wsaData.wVersion), HIBYTE(wsaData.wVersion));
printf("wHighVersion: %d.%d\\n", LOBYTE(wsaData.wHighVersion), HIBYTE(wsaData.wHighVersion));
printf("szDescription: %s\\n", wsaData.szDescription);
printf("szSystemStatus: %s\\n", wsaData.szSystemStatus);return 0;
}大家可以实行上机试验。在介绍完WSAStartup函数后我们就要按顺序讲解socket( )、bind( )、listen( )、accept( )、recv( )、send( )、closesocket( )这些函数了。3.Socket函数如下图所示，是Socket通信的原理图，左侧为服务端，右侧是客户端，可以看到服务端的步骤要多一些，客户端将在后面讲解。本节开始将从左侧服务端第一步开始逐步讲解，本步骤目标为创建一个套接字，其返回值为后面的步骤使用。下面我们开始正式进入Socket通信的第一步，这一步无论是客户端还是服务端都是需要的第一步，因此大家认真思考。函数功能：创建套接字头文件：#include &lt;winsock2.h&gt;函数原型：int socket( int af, int type, int protocol);返回值类型：整型返回值:成功返回非负值，表示套接字的文件描述符，失败返回-1，通常返回-1错误很可能是没有执行 WSAStartup初始化导致！参数说明：第一个参数af指明了协议族，通常用AF_INET、AF_INET6、AF_LOCAL等。AF表示地址族，选择 AF_INET 的目的就是使用 IPv4 进行通信。因为 IPv4 使用 32 位地址，相比 IPv6 的 128 位来说，计算更快，便于用于局域网通信。第二个参数type是Socket类型，常用的Socket类型我们之前已经介绍过了分别是SOCK_STREAM和SOCK_DGRAM因为我们要写的是TCP Socket编程所以我们使用SOCK_STREAM。第三个参数protocol表示传输协议一般取为0。因为一般情况下有了 domain和 type 两个参数就可以创建套接字了，操作系统会自动推演出协议类型，除非遇到这样的情况：有两种不同的协议支持同一种地址类型和数据传输类型。如果我们不指明使用哪种协议，操作系统是没办法自动推演的。调用socket函数整体代码的实现：**int** sockfd=socket(AF_INET,SOCK_STREAM,0);//建立套接字显而易见的，那么UDP的写法则为：sockfd=socket(AF_INET, SOCK_DGRAM,0);4.Bind函数在完成第一步创建套接字，分配了一个Socket描述符后，服务端的第二步就是使用在这个描述符用Bind绑定Bind()系统调用的主要用处：服务器向系统注册它的众所周知的地址。面向连接和无连接的服务器在接受客户的请求之前都必须做这一步。客户可为自己注册一个特定的地址，以便服务器可以用这个有效的地址送回响应。函数功能：将监听套接字绑定到本地地址和端口上。头文件：#include &lt;winsock2.h&gt;函数原型：int bind(int sockfd, const struct sockaddr_in *addr, int addrlen);返回值类型：整型返回值:成功返回非负值，失败返回-1，最常见的错误一般是端口被占用。需要注意的是，在Linux系统中，1024以下的端口都需要root权限的程序才可以绑定参数说明：第一个参数sockfd为上一步创建socket时的返回值。第二个参数addr 为 sockaddr 结构体变量的指针。该类型的定义原型如下：struct sockaddr_in {short   sin_family;    //协议族，与前面Socket函数中提到的一样，我们这里使用AF_INETu_short sin_port;        //端口号，需要struct in_addr sin_addr;    //IP地址，需要使用网络序char    sin_zero[8];    //没有实际意义,只是为了跟SOCKADDR结构在内存中对齐
};第三个参数addrlen为addr 变量的大小，可由 sizeof() 计算得出。调用bind函数整体代码的参考代码struct sockaddr_in serv_addr    //创建结构体变量
servaddr.sin_family=AF_INET;    //sin_family指代协议族和前面讲述socket()的第一个参数的含义相同，取值也需跟socke函数第一个参数值一样。
servaddr.sin_port=htons(2000);    //sin_port存储端口号（使用网络字节顺序，对于htons()函数我们还有单独一章的说明，2000这个端口转换为网络字节序列。
//理论上端口号的取值范围为是0到65536，但0到1023的端口一般由系统分配给特定的服务程序，比如Web 服务的端口号为 80所以我们的程序要尽量在 1024~65536 之间分配端口号。servaddr.sin_addr.s_addr=inet_addr("127.0.0.1");    //将iP地址127.0.0.1也就是本机地址转换为十进制bind(sockfd,(sockaddr*)&amp;servaddr,sizeof(servaddr));    // 将套接字绑定到本地地址和端口上。5.listen函数接着，在完成bind函数之后，服务端接下来就可以用listen函数监听了，用于监听是否有客户端连接它，以便存储多个用户的连接建立请求，listen函数具体如下：函数功能：让socket进入被动监听状态。什么是被动监听呢，是指当没有客户端请求时，socket处于“沉睡”中，只有当接收到客户端请求时，socket才会被“叫醒”来响应请求。头文件：#include &lt;winsock2.h&gt;函数原型：int listen(int sockfd, intqueue_length);返回值类型：整型返回值:成功返回0，失败返回-1参数说明：第一个参数为第一步sockfd创建socket时的返回值，套接字的描述符。第二个参数queue_length用于指定接收队列的长度，也就是在Server程序调用accept函数之前最大允许进入的连接请求数，多余的连接请求将被拒绝，典型取值为5。listen(sockfd,5);//监听sockfd为创建套接字时的返回值。6.accept函数在listen监听到有新客户端时，就可以用accept函数响应客户的连接请求，建立与客户端的连接。产生一个新的socket描述符来描述该连接，这个连接用来与发起该连接请求的客户交换数据。函数功能：接收客户端连接请求头文件：#include &lt;winsock2.h&gt;函数原型：int accept(int sockfd, struct sockaddr *addr, int *addrlen);返回值类型：整型返回值:成功返回非负值，失败返回-1参数说明：sockfd为建立socket函数返回的值。addr为 sockaddr 结构体变量的指针，这个参数是指针类型，是向外传内容的，即addr将在函数调用后填入对方(客户端)的地址信息，如对方的IP、端口等。addrlen为 addr变量的大小，可由 sizeof() 计算得出。调用accept函数整体代码的实现：struct sockaddr_in clientaddr//创建客户端地址结构体int aID;//用来接收accept函数返回值aID=accept(sockfd,(sockaddr*)&amp;clientaddr,&amp;sizeof( clientaddr));//等待接收客户连接请求7.recv函数函数功能：接收客户端或服务端传来的数据,也就是客户端和服务端都要用到头文件：#include &lt;winsock2.h&gt;函数原型：int recv(int aID, char *buf, int len, int flags);返回值类型：整型返回值:返回值小于0,socket报错。返回值等于0没有接收到数据，返回值大于0成功，返回值即为接收到的数据长度参数说明：第一个参数aID，表示连接成功的套接字描述符。注意：这一步对于服务端而言是上一步accept的返回值；对于客户端而言是connect的返回值，并非是第一步socket创建套接字的返回值，请大家理解不要搞混！第二个参数buf，就是为要接收的数据所在的缓冲区地址，也就是一个空的字符数组的首地址，这里放结果。第三个参数len为要接收数据的字节数。第四个参数flags为发送数据时的附带标记 ，一般情况下设置为0。但可以选择下列设置:MSG_DONTROUTE：表示不使用指定路由，对send、sendto有效MSG_PEEK：对recv, recvfrom有效，表示读出网络数据后不清除已读的数据MSG_OOB：对发送接收都有效，表示发送或接受加急数据调用recv函数整体代码的实现：需要注意的是，recv缺省是阻塞函数，直到收到信息或出错才会返回。char recBuf[200];//定义一个字符串用来保存客户端发来的数据
recv(aID,recBuf,200,0);//接收来自客户端或服务端的数据8.send函数与是recv一样，有收就会有发，发送内容对应send函数，也是从服务端accept后或客户端connect后就可以用的函数，其说明如下：函数功能：发送服务端或客户端的数据头文件：#include &lt;winsock2.h&gt;函数原型：int send(int aID, const char *buf, int len, int flags);返回值类型：整型返回值:返回值小于0,socket报错。返回值等于0对方调用了close API来关闭连接，返回值大于0成功，返回值为发送的的数据长度参数说明：第一个参数aID，表示连接成功的套接字描述符。注意：这一步对于服务端而言是上一步accept的返回值；对于客户端而言是connect的返回值，并非是第一步socket创建套接字的返回值，请大家理解不要搞混！第二个参数buf为要发送的数据所在的缓冲区地址，即一个已经存好内容的字符数组第三个参数len为要发送的数据的实际字节数+1。第四个参数flags为发送数据时的附带标记 ，一般情况下设置为0。但可以选择下列设置:MSG_DONTROUTE：表示不使用指定路由，对send、sendto有效MSG_PEEK：对recv, recvfrom有效，表示读出网络数据后不清除已读的数据MSG_OOB：对发送接收都有效，表示发送或接受加急数据调用send函数整体代码的实现：char sendBuf[200];//定义一个数组用来保存发送的数据
send(aID,sendBuf,strlen(sendBuf)+1,0);//用来发送服务端或客户端的数据与recv同样，send函数缺省也是阻塞函数，直到发送完毕或出错才会返回。需要注意，如果函数返回值与参数len不相等，则剩余未发送的信息需要再次发送。9.closesocket函数一旦决定要停止通信，就要关闭套接字，释放资源，则需要调用closesocket函数进行其函数介绍如下：函数功能：与socket函数功能相反关闭套接字头文件：#include &lt;winsock2.h&gt;函数原型：int closesocket(int aID);返回值类型：整型参数说明：aID为接收客户端请求的返回值。调用closesocket函数整体代码的实现：closesocket(aID);10.WSACleanup函数一旦程序结束需要停止Socket库的使用，需要调用WSACleanup函数，这一步和最开始的WSACleanup是对应的。函数功能用于终止对So：cket字库的使用。库链接：#pragma comment(lib,"ws2_32.lib")表示链接Ws2_32.lib这个库。 ws2_32.lib是Winsock2的库文件。函数原型：int PASCAL FAR WSACleanup (void)。返回值类型：整型返回值:成功返回0参数说明：无参数因此调用WSACleanup函数也很简单，如下：WSACleanup();11.Socket服务端完整参考代码前面讲解了Socket通信中服务端的每一步功能作用及实现，而重点是多个步骤在一起时，上下文 函数之间的信息传递需要我们理解，如SOCKADDR_IN的结构体、各个SOCKET描述符等参数，以及在此基础之上改进得到的希望的实际效果（如需要不停的接受消息、发送消息）下面我们将所有步骤串联在一起，提供一个可以连续接收客户端信息的服务端程序，完整代码供大家参考：#include &lt;winsock2.h&gt;
#include &lt;stdio.h&gt;
#pragma comment(lib,"ws2_32.lib")
int main()
{WSADATA wsaData;WSAStartup( MAKEWORD(2, 2), &amp;wsaData); //目前建议使用最新2.2版本SOCKET serSocket=socket(AF_INET,SOCK_STREAM,0);//创建了可识别套接字if(serSocket!=-1){printf("成功创建套接字！%d\\n",serSocket);  }//需要绑定的参数，主要是本地的socket的一些信息。SOCKADDR_IN addr;addr.sin_family=AF_INET;addr.sin_addr.S_un.S_addr=htonl(INADDR_ANY);//ip地址addr.sin_port=htons(12345);//绑定端口bind(serSocket,(SOCKADDR*)&amp;addr,sizeof(SOCKADDR));//绑定完成listen(serSocket,5);//其中第二个参数代表能够接收的最多的连接数printf("等待客户端...\\n");SOCKADDR_IN clientsocket;int len=sizeof(SOCKADDR);//第二次握手，通过accept来接受对方的套接字的信息SOCKET serConn=accept(serSocket,(SOCKADDR*)&amp;clientsocket,&amp;len);//如果这里不是accept而是conection的话。。就会不断的监听if(serConn){printf("监听到新的客户端...\\n");}while (1){char sendBuf[100];sprintf(sendBuf,"welcome %s to here",inet_ntoa(clientsocket.sin_addr));//找对对应的IP并且将这行字打印到那里//发送信息send(serConn,sendBuf,strlen(sendBuf)+1,0);char receiveBuf[100];//接收int RecvLen;RecvLen=recv(serConn,receiveBuf,100,0);if(RecvLen!=-1)printf("%d %s\\n",RecvLen,receiveBuf);elsebreak;}closesocket(serConn);//关闭WSACleanup();//释放资源的操作return 0;
}因为暂时没有客户端连接，运行后为等待效果状态，效果如下：​http://www.ppmy.cn/news/1541066.html相关文章Android TextView实现一串文字特定几个字改变颜色遇到一个需求&amp;#xff0c;让Android端实现给定一个字符串指定下标的几个字颜色与其他字颜色不一致。 主要是用ForegroundColorSpan这个API来传入颜色值&amp;#xff0c;用SpannableString来设置指定索引下标的字的颜色值。 这里通过给定一个输入文字描述框&amp;#xff0c;要求输入指定…阅读更多...Mysql 和MongoDB用户访问权限问题Mysql 
刚给二线运维排查了一个问题&amp;#xff0c;Mysql安装完可用&amp;#xff0c;且可用navicat连接&amp;#xff0c;项目中通过127.0.0.1去连数据库报错了。错误是access denied for user ‘root’localhost,排查思路 
1. 密码是否正确 
&amp;#xff08;不需要重置。到Mysql的安装目录下找…阅读更多...流批一体计算引擎-17-[Flink]中的Table API常用算子文章目录 1 概述&amp;示例1.1 data.csv1.2 代码示例2 操作算子2.1 扫描、投影和过滤2.1.1 from_path【流批】2.1.2 from_elements【流批】2.1.3 select【流批】2.1.4 alias【流批】2.1.5 where【流批】2.1.6 filter【流批】2.2 列操作2.2.1 add_columns【流批】2.2.2 add_or_re…阅读更多...13 django管理系统 - 注册与登录 - 中间件控制访问去管理员列表中&amp;#xff0c;获取刚才登录的用户session&amp;#xff1a; 
用户发来请求&amp;#xff0c;获取cookie随机字符串&amp;#xff0c;拿着随机字符串&amp;#xff0c;看看session中有没有 
通过request.session.get("user_info")来获取 def admin_list(request):# 获取当前登…阅读更多...安装和简单使用Milvus安装和简单使用Milvus 
1 介绍 
Milvus是国产的高性能分布式向量数据库。 
# Milvus官网
https://milvus.io/# 安装文档
https://milvus.io/docs/install-overview.md# Python的对应关系和接口文档
https://milvus.io/api-reference/pymilvus/v2.4.x/About.md2 安装Milvus 
2.1…阅读更多...解析带有MyBatis语法的SQL字符串，获取最终的可执行SQL有一个带有mybatis语法的sql语句&amp;#xff0c;如下&amp;#xff1a; 
select * from cfg_export_template where id  #{id} &lt;if testid ! null&gt; AND 1  1 &lt;/if&gt;需求是将sql和占位符相关的数据丢给mybatis&amp;#xff0c;获取到最终可执行的SQL。 解决思路&amp;#xff1a; 1、像…阅读更多...R语言绘制Venn图(文氏图、温氏图、维恩图、范氏图、韦恩图)Venn图&amp;#xff0c;又称文氏图&amp;#xff0c;标题中其他名字也是它的别称&amp;#xff0c;由封闭圆形组成&amp;#xff0c;代表不同集合。圆形重叠部分表示集合交集&amp;#xff0c;非重叠处为独有元素。在生物学、统计学等领域广泛应用&amp;#xff0c;可展示不同数据集相似性与差异&amp;#xff0c;…阅读更多...企业电子印章主要通过以下几种方式进行防伪企业电子印章主要通过以下几种方式进行防伪&amp;#xff1a; 
一、数字证书和加密技术 
数字证书认证 企业电子印章依托数字证书&amp;#xff0c;数字证书由权威的第三方数字认证机构颁发&amp;#xff0c;确保了印章使用者的身份真实性。 数字证书如同企业在数字世界的身份证&amp;#xff0c;包…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:03 +0000</pubDate>
    </item>
    <item>
      <title>Android TextView实现一串文字特定几个字改变颜色</title>
      <link>https://www.ppmy.cn/news/1541065.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Android TextView实现一串文字特定几个字改变颜色news/2025/11/1 1:18:02/遇到一个需求，让Android端实现给定一个字符串指定下标的几个字颜色与其他字颜色不一致。主要是用ForegroundColorSpan这个API来传入颜色值，用SpannableString来设置指定索引下标的字的颜色值。这里通过给定一个输入文字描述框，要求输入指定下标，输入格式类似于1,3,4,6。输入数字，同时用英文逗号隔开，只要点击按钮提交以后，则来改变显示的字体颜色。布局文件如下所示：&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"xmlns:app="http://schemas.android.com/apk/res-auto"xmlns:tools="http://schemas.android.com/tools"android:layout_width="match_parent"android:layout_height="match_parent"tools:context=".MainActivity"&gt;&lt;EditTextandroid:id="@+id/edit_num"android:layout_width="match_parent"android:layout_height="wrap_content"android:hint="输入下标（例如 1,3,5）"tools:ignore="MissingConstraints"&gt;&lt;/EditText&gt;&lt;Buttonandroid:id="@+id/submit"android:text="提交"android:layout_width="wrap_content"android:layout_height="wrap_content"app:layout_constraintBottom_toBottomOf="parent"app:layout_constraintEnd_toEndOf="parent"app:layout_constraintHorizontal_bias="0.467"app:layout_constraintStart_toStartOf="parent"app:layout_constraintTop_toTopOf="@+id/edit_num"app:layout_constraintVertical_bias="0.26"tools:ignore="MissingConstraints"&gt;&lt;/Button&gt;&lt;TextViewandroid:id="@+id/text_view"android:layout_width="wrap_content"android:layout_height="wrap_content"android:text="HelloWorld"app:layout_constraintBottom_toBottomOf="parent"app:layout_constraintEnd_toEndOf="parent"app:layout_constraintStart_toStartOf="parent"app:layout_constraintTop_toTopOf="parent" /&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;MainActivity如下所示：import android.graphics.Color
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.text.Spannable
import android.text.SpannableString
import android.text.style.ForegroundColorSpan
import android.widget.Button
import android.widget.EditText
import android.widget.TextViewclass MainActivity : AppCompatActivity() {override fun onCreate(savedInstanceState: Bundle?) {super.onCreate(savedInstanceState)setContentView(R.layout.activity_main)val indexInput = findViewById&lt;EditText&gt;(R.id.edit_num)val textView = findViewById&lt;TextView&gt;(R.id.text_view)val buttonSubmit = findViewById&lt;Button&gt;(R.id.submit)val originalText = "HelloWorld  测试文字颜色变化"// 初始化显示原始文本textView.text = originalTextbuttonSubmit.setOnClickListener {val s = indexInput.textval strArray = s?.toString()val indexArray = strArray?.split(",")val len = indexArray?.size ?: 20val indexNumArray = IntArray(len){0}// 创建 SpannableStringval spannableString = SpannableString(originalText)indexArray?.let {for (i in indexArray.indices) {indexNumArray[i] = Integer.parseInt(indexArray[i])val idx = indexNumArray[i]// 检查下标是否有效，避免越界错误if (idx in originalText.indices) {// 为每个字符创建一个新的 ForegroundColorSpanval redColorSpan = ForegroundColorSpan(Color.RED)spannableString.setSpan(redColorSpan,idx,idx + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)}}}textView.text = spannableString}}
}其中这里有个需要注意的是：如果需要多次变更字体颜色，需要把ForegroundColorSpan设置在循环体内。如果把ForegroundColorSpan放在循环体外，则只有最后一个字会生效。错误示例如下：val redColorSpan = ForegroundColorSpan(Color.RED)indexArray?.let {for (i in indexArray.indices) {indexNumArray[i] = Integer.parseInt(indexArray[i])val idx = indexNumArray[i]spannableString.setSpan(redColorSpan, idx, idx + 1, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)  // 第index个字}}问题原因：你在循环中对每个字符的位置都应用了相同的ForegroundColorSpan（红色），并且每次调用setSpan时，该Span会替换之前的位置上的Span，导致只有最后一个字符保持红色。解决方案：为了解决这个问题，确保为每个字符应用不同的颜色时不要覆盖先前的Span。可以通过创建一个新的ForegroundColorSpan实例，并在每次setSpan时分别应用。关键更改：确保每次setSpan使用新的ForegroundColorSpan对象：在每次循环中创建一个新的ForegroundColorSpan实例，确保不会覆盖先前的颜色设置。下标校验：在setSpan之前，确保你所提供的下标值是合法的，避免越界问题（idx in 0 until originalText.length）。IntArray 初始化：使用IntArray来存储转换后的下标值，并确保在处理时进行合理的范围检查。效果：当用户输入下标（例如1,3,5），然后点击按钮时，指定下标的字符将正确变为红色，不会再出现只有最后一个字符变色的情况。http://www.ppmy.cn/news/1541065.html相关文章Mysql 和MongoDB用户访问权限问题Mysql 
刚给二线运维排查了一个问题&amp;#xff0c;Mysql安装完可用&amp;#xff0c;且可用navicat连接&amp;#xff0c;项目中通过127.0.0.1去连数据库报错了。错误是access denied for user ‘root’localhost,排查思路 
1. 密码是否正确 
&amp;#xff08;不需要重置。到Mysql的安装目录下找…阅读更多...流批一体计算引擎-17-[Flink]中的Table API常用算子文章目录 1 概述&amp;示例1.1 data.csv1.2 代码示例2 操作算子2.1 扫描、投影和过滤2.1.1 from_path【流批】2.1.2 from_elements【流批】2.1.3 select【流批】2.1.4 alias【流批】2.1.5 where【流批】2.1.6 filter【流批】2.2 列操作2.2.1 add_columns【流批】2.2.2 add_or_re…阅读更多...13 django管理系统 - 注册与登录 - 中间件控制访问去管理员列表中&amp;#xff0c;获取刚才登录的用户session&amp;#xff1a; 
用户发来请求&amp;#xff0c;获取cookie随机字符串&amp;#xff0c;拿着随机字符串&amp;#xff0c;看看session中有没有 
通过request.session.get("user_info")来获取 def admin_list(request):# 获取当前登…阅读更多...安装和简单使用Milvus安装和简单使用Milvus 
1 介绍 
Milvus是国产的高性能分布式向量数据库。 
# Milvus官网
https://milvus.io/# 安装文档
https://milvus.io/docs/install-overview.md# Python的对应关系和接口文档
https://milvus.io/api-reference/pymilvus/v2.4.x/About.md2 安装Milvus 
2.1…阅读更多...解析带有MyBatis语法的SQL字符串，获取最终的可执行SQL有一个带有mybatis语法的sql语句&amp;#xff0c;如下&amp;#xff1a; 
select * from cfg_export_template where id  #{id} &lt;if testid ! null&gt; AND 1  1 &lt;/if&gt;需求是将sql和占位符相关的数据丢给mybatis&amp;#xff0c;获取到最终可执行的SQL。 解决思路&amp;#xff1a; 1、像…阅读更多...R语言绘制Venn图(文氏图、温氏图、维恩图、范氏图、韦恩图)Venn图&amp;#xff0c;又称文氏图&amp;#xff0c;标题中其他名字也是它的别称&amp;#xff0c;由封闭圆形组成&amp;#xff0c;代表不同集合。圆形重叠部分表示集合交集&amp;#xff0c;非重叠处为独有元素。在生物学、统计学等领域广泛应用&amp;#xff0c;可展示不同数据集相似性与差异&amp;#xff0c;…阅读更多...企业电子印章主要通过以下几种方式进行防伪企业电子印章主要通过以下几种方式进行防伪&amp;#xff1a; 
一、数字证书和加密技术 
数字证书认证 企业电子印章依托数字证书&amp;#xff0c;数字证书由权威的第三方数字认证机构颁发&amp;#xff0c;确保了印章使用者的身份真实性。 数字证书如同企业在数字世界的身份证&amp;#xff0c;包…阅读更多...wpf grid 的用法WPF中的Grid是一种布局控件&amp;#xff0c;可用于将子控件按照行和列的方式排列。 
以下是Grid控件的用法&amp;#xff1a; 
在XAML文件中&amp;#xff0c;添加一个Grid控件&amp;#xff1a; 
&lt;Grid&gt;
&lt;/Grid&gt;在Grid控件中&amp;#xff0c;添加行和列定义&amp;#xff1a; 
&lt;Grid&gt;&lt;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:02 +0000</pubDate>
    </item>
    <item>
      <title>Mysql 和MongoDB用户访问权限问题</title>
      <link>https://www.ppmy.cn/news/1541064.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Mysql 和MongoDB用户访问权限问题news/2025/11/1 1:18:01/Mysql刚给二线运维排查了一个问题，Mysql安装完可用，且可用navicat连接，项目中通过127.0.0.1去连数据库报错了。错误是access denied for user ‘root’@localhost,排查思路1. 密码是否正确（不需要重置。到Mysql的安装目录下找到my.ini,在Mysqld 后添加skip-grant-tables，这样可不用密码登陆。eg: mysql -uroot -p; ）1. 进入mysql安装目录，找到my.ini
2. 在[mysqld] 后面敲入：skip-grant-tables
3. 重启服务， net stop mysqld；net start msyqld
4.  通过命令进行密码修改：alter user root@'localhost' identified by 'testByZl*!1234';
5. 删除掉my.ini中添加的skip-grant-tables; 并完成mysql重启，参考3步即可2.授权问题数据库安装好，建完用户后，需要对用户进行权限授予，目的是让用户对数据库有一系列执行操作，包括但不限于DDL语句和SQL语句。授权通常用到下面语句GRANT ALL PRIVILEGES ON *.* TO 'usrname'@'localhost' IDENTIFIED BY 'password';
FLUSH PRIVILEGES;今天遇到的问题是第二个问题导致的。未授权，解决该问题用到的语句为GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'  IDENTIFIED BY 'password';
FLUSH PRIVILEGES;接下来说一下%和localhost区别【本地主机限制】grant all privileges on.to ‘usename’@‘localhost’和【任意主机允许】grant all privileges on.to ‘usename’@‘%’它两区别在于 第一个连接为本地主机限制，用户仅被 授权从本地主机(即Mysql所在的服务器)访问数据 库。这种限制用于提高数据库的安全性。 第二个连接%是通配符，表示用户可以从八喜何IP地址访问数据库，允许远程客户端访问数据库。Mongo 连接报 Authentication failedMongo创建好后，也是需要给用户授权的，不然只是单独create user后访问库也会报Authentication failed。下面创建用户及授权用户大致整理如下所示：Mongo 创建用户use calamity
db.createUser({user: "calamity",pwd: "Gq40H1%44W%44nHy",roles: [ { role: "readWrite", db: "calamity" }]}
)mongo 授权用户需要组当前用户授予admin库的只读权限，这样才能通过admin库进行业务库的授权。因些需要执行以下语句db.grantRolesToUser("calamity",[{ role: "read", db: "admin" }]
)Mongo库restore操作需要测试数据，导了个tar包，打开看都是bson、json 文件，需要把相应的文件copy到mongo 安装路径下的db下面，可以通过mongorestore执行。我先是把tar包解压缩了，然后将其目录下文件转成.gz文件，然后执行了mongoresote命令。分别如下所示：1.tar 解压缩tar -xvf calamity.tar2. 转在gz文件之所以有这步，是因为这前存的restore命令是针对.gz文件的，懒于重新编辑命令，所以闭着眼睛执行了这步操作gzip -r calamity  # calamity是解tar后的文件夹 -r 是说将其下的所有文件打成gz3. mongorestore执行mongorestore --uri="mongodb://calamity:Gq40H1%44W%44nHy@ip1:27017,ip2:27017,ip3:27017/?replicaSet=rs0&amp;authSource=calamity"  -d calamity  /home/data/db --gzip其它 mongorestoe 其它命令参考//压缩备份
mongodump -u csms -p Sh%2523mkaJaaa11 --authenticationDatabase csms -d csms -o /home/backup --gzip
mongodump -u csms -p csms --authenticationDatabase csms -d csms -c  zl.position_history_202212 -o /home/backup --gzip//恢复还原
mongorestore -u csms -p Sh%2523mkaJaaa11 --authenticationDatabase csms -d csms  /home/backup/csms --gzip
mongorestore --uri="mongodb://admin:Sh%2523mkaJaaa11 @192.168.1.1:27027192.168.1.12:27027,192.168.1.13:27027/?authSource=admin&amp;replicaSet=dev_rs0" -d csms_lgyz  /home/backup/csms --gzip
mongorestore --uri="mongodb://admin:Sh%2523mkaJaaa11 @192.168.1.1:27027192.168.1.12:27027,192.168.1.13:27027/?authSource=admin&amp;replicaSet=dev_rs0" -d csms_lgyz -c cmss.analog_minute_his_202307  /home/backup/csms/cmss.analog_minute_his_202307.bson.gz --gziphttp://www.ppmy.cn/news/1541064.html相关文章流批一体计算引擎-17-[Flink]中的Table API常用算子文章目录 1 概述&amp;示例1.1 data.csv1.2 代码示例2 操作算子2.1 扫描、投影和过滤2.1.1 from_path【流批】2.1.2 from_elements【流批】2.1.3 select【流批】2.1.4 alias【流批】2.1.5 where【流批】2.1.6 filter【流批】2.2 列操作2.2.1 add_columns【流批】2.2.2 add_or_re…阅读更多...13 django管理系统 - 注册与登录 - 中间件控制访问去管理员列表中&amp;#xff0c;获取刚才登录的用户session&amp;#xff1a; 
用户发来请求&amp;#xff0c;获取cookie随机字符串&amp;#xff0c;拿着随机字符串&amp;#xff0c;看看session中有没有 
通过request.session.get("user_info")来获取 def admin_list(request):# 获取当前登…阅读更多...安装和简单使用Milvus安装和简单使用Milvus 
1 介绍 
Milvus是国产的高性能分布式向量数据库。 
# Milvus官网
https://milvus.io/# 安装文档
https://milvus.io/docs/install-overview.md# Python的对应关系和接口文档
https://milvus.io/api-reference/pymilvus/v2.4.x/About.md2 安装Milvus 
2.1…阅读更多...解析带有MyBatis语法的SQL字符串，获取最终的可执行SQL有一个带有mybatis语法的sql语句&amp;#xff0c;如下&amp;#xff1a; 
select * from cfg_export_template where id  #{id} &lt;if testid ! null&gt; AND 1  1 &lt;/if&gt;需求是将sql和占位符相关的数据丢给mybatis&amp;#xff0c;获取到最终可执行的SQL。 解决思路&amp;#xff1a; 1、像…阅读更多...R语言绘制Venn图(文氏图、温氏图、维恩图、范氏图、韦恩图)Venn图&amp;#xff0c;又称文氏图&amp;#xff0c;标题中其他名字也是它的别称&amp;#xff0c;由封闭圆形组成&amp;#xff0c;代表不同集合。圆形重叠部分表示集合交集&amp;#xff0c;非重叠处为独有元素。在生物学、统计学等领域广泛应用&amp;#xff0c;可展示不同数据集相似性与差异&amp;#xff0c;…阅读更多...企业电子印章主要通过以下几种方式进行防伪企业电子印章主要通过以下几种方式进行防伪&amp;#xff1a; 
一、数字证书和加密技术 
数字证书认证 企业电子印章依托数字证书&amp;#xff0c;数字证书由权威的第三方数字认证机构颁发&amp;#xff0c;确保了印章使用者的身份真实性。 数字证书如同企业在数字世界的身份证&amp;#xff0c;包…阅读更多...wpf grid 的用法WPF中的Grid是一种布局控件&amp;#xff0c;可用于将子控件按照行和列的方式排列。 
以下是Grid控件的用法&amp;#xff1a; 
在XAML文件中&amp;#xff0c;添加一个Grid控件&amp;#xff1a; 
&lt;Grid&gt;
&lt;/Grid&gt;在Grid控件中&amp;#xff0c;添加行和列定义&amp;#xff1a; 
&lt;Grid&gt;&lt;…阅读更多...Uptime Kuma: 全面的开源网站监控解决方案在当今数字化时代,网站和服务的可用性对于企业和个人来说至关重要。Uptime Kuma作为一款功能强大的开源监控工具,为用户提供了全面的网站和服务监控解决方案。本文将深入介绍Uptime Kuma的特性、安装方法以及更新维护,帮助读者了解这一优秀的监控工具。 
主要特性 
Uptime Kuma…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:01 +0000</pubDate>
    </item>
    <item>
      <title>流批一体计算引擎-17-[Flink]中的Table API常用算子</title>
      <link>https://www.ppmy.cn/news/1541063.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维流批一体计算引擎-17-[Flink]中的Table API常用算子news/2025/11/1 1:18:00/文章目录1 概述&amp;示例1.1 data.csv1.2 代码示例2 操作算子2.1 扫描、投影和过滤2.1.1 from_path【流批】2.1.2 from_elements【流批】2.1.3 select【流批】2.1.4 alias【流批】2.1.5 where【流批】2.1.6 filter【流批】2.2 列操作2.2.1 add_columns【流批】2.2.2 add_or_replace_columns【流批】2.2.3 drop_columns【流批】2.2.4 rename_columns【流批】2.3 聚合2.3.1 GroupBy【流批结果更新】2.3.2 GroupBy Window【流批】2.3.3 Over Window【流批】2.3.4 Distinct Aggregation 【流批结果更新】2.3.5 Distinct【流批结果更新】2.4 连接2.4.1 Inner Join【流批】2.4.2 Outer Join【流批结果更新】3 参考附录Table API是批处理和流处理的统一的关系型API。Table API的查询不需要修改代码就可以采用批输入或流输入来运行。Table API是SQL语言的超集，并且是针对Apache Flink专门设计的。Table API集成了Scala，Java和Python语言的API。Table API的查询是使用Java，Scala或Python语言嵌入的风格定义的，有诸如自动补全和语法校验的IDE支持，而不是像普通SQL一样使用字符串类型的值来指定查询。1 概述&amp;示例Table API支持Scala, Java和Python语言。Scala语言的Table API利用了Scala表达式；Java语言的Table API支持DSL表达式和解析并转换为等价表达式的字符串；Python语言的Table API仅支持解析并转换为等价表达式的字符串。下面的例子展示了 Scala、Java 和 Python 语言的 Table API 的不同之处。表程序是在批环境下执行的。程序扫描了 Orders 表，通过字段 a 进行分组，并计算了每组结果的行数。1.1 data.csvlily,20,30,"2http://www.ppmy.cn/news/1541063.html相关文章13 django管理系统 - 注册与登录 - 中间件控制访问去管理员列表中&amp;#xff0c;获取刚才登录的用户session&amp;#xff1a; 
用户发来请求&amp;#xff0c;获取cookie随机字符串&amp;#xff0c;拿着随机字符串&amp;#xff0c;看看session中有没有 
通过request.session.get("user_info")来获取 def admin_list(request):# 获取当前登…阅读更多...安装和简单使用Milvus安装和简单使用Milvus 
1 介绍 
Milvus是国产的高性能分布式向量数据库。 
# Milvus官网
https://milvus.io/# 安装文档
https://milvus.io/docs/install-overview.md# Python的对应关系和接口文档
https://milvus.io/api-reference/pymilvus/v2.4.x/About.md2 安装Milvus 
2.1…阅读更多...解析带有MyBatis语法的SQL字符串，获取最终的可执行SQL有一个带有mybatis语法的sql语句&amp;#xff0c;如下&amp;#xff1a; 
select * from cfg_export_template where id  #{id} &lt;if testid ! null&gt; AND 1  1 &lt;/if&gt;需求是将sql和占位符相关的数据丢给mybatis&amp;#xff0c;获取到最终可执行的SQL。 解决思路&amp;#xff1a; 1、像…阅读更多...R语言绘制Venn图(文氏图、温氏图、维恩图、范氏图、韦恩图)Venn图&amp;#xff0c;又称文氏图&amp;#xff0c;标题中其他名字也是它的别称&amp;#xff0c;由封闭圆形组成&amp;#xff0c;代表不同集合。圆形重叠部分表示集合交集&amp;#xff0c;非重叠处为独有元素。在生物学、统计学等领域广泛应用&amp;#xff0c;可展示不同数据集相似性与差异&amp;#xff0c;…阅读更多...企业电子印章主要通过以下几种方式进行防伪企业电子印章主要通过以下几种方式进行防伪&amp;#xff1a; 
一、数字证书和加密技术 
数字证书认证 企业电子印章依托数字证书&amp;#xff0c;数字证书由权威的第三方数字认证机构颁发&amp;#xff0c;确保了印章使用者的身份真实性。 数字证书如同企业在数字世界的身份证&amp;#xff0c;包…阅读更多...wpf grid 的用法WPF中的Grid是一种布局控件&amp;#xff0c;可用于将子控件按照行和列的方式排列。 
以下是Grid控件的用法&amp;#xff1a; 
在XAML文件中&amp;#xff0c;添加一个Grid控件&amp;#xff1a; 
&lt;Grid&gt;
&lt;/Grid&gt;在Grid控件中&amp;#xff0c;添加行和列定义&amp;#xff1a; 
&lt;Grid&gt;&lt;…阅读更多...Uptime Kuma: 全面的开源网站监控解决方案在当今数字化时代,网站和服务的可用性对于企业和个人来说至关重要。Uptime Kuma作为一款功能强大的开源监控工具,为用户提供了全面的网站和服务监控解决方案。本文将深入介绍Uptime Kuma的特性、安装方法以及更新维护,帮助读者了解这一优秀的监控工具。 
主要特性 
Uptime Kuma…阅读更多...dbt-codegen: dbt自动生成模板代码dbt项目采用工程化思维&amp;#xff0c;数据模型分层实现&amp;#xff0c;支持描述模型文档和测试&amp;#xff0c;非常适合大型数据工程项目。但也需要用户编写大量yaml描述文件&amp;#xff0c;这个过程非常容易出错且无聊。主要表现&amp;#xff1a; 
手工为dbt模型编写yaml文件&amp;#xff0c;这过…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:18:00 +0000</pubDate>
    </item>
    <item>
      <title>13 django管理系统 - 注册与登录 - 中间件控制访问</title>
      <link>https://www.ppmy.cn/news/1541062.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维13 django管理系统 - 注册与登录 - 中间件控制访问news/2025/11/1 1:17:59/去管理员列表中，获取刚才登录的用户session：用户发来请求，获取cookie随机字符串，拿着随机字符串，看看session中有没有通过request.session.get("user_info")来获取def admin_list(request):# 获取当前登录用户信息info = request.session.get('user_info')print("info is...", info)# return HttpResponse("admin_list is ok")# 查询所有的数据queryset = models.Admin.objects.using("default").all()# 创建分页对象page_obj = Pagination(request, queryset)form = AdminModelForm()# context = {#     "queryset": queryset,#     "form": form# }context = {"form": form,"queryset": page_obj.page_queryset,  # 分完页的数据"page_html": page_obj.html(),  # 分页后的页码}return render(request, 'admin_list.html', context)访问下管理员列表界面，看看输出的info是什么可以看到session确实是被获取到了。所以，如果用户没有登录，则返回登录界面，不给他直接进入部门列表界面或者管理员界面。def admin_list(request):# 获取当前登录用户信息info = request.session.get('user_info')print("info is...", info)# 如果用户没有登录，则跳转到登录页面if not info:return redirect("/account/login/")# return HttpResponse("admin_list is ok")# 查询所有的数据queryset = models.Admin.objects.using("default").all()# 创建分页对象page_obj = Pagination(request, queryset)form = AdminModelForm()# context = {#     "queryset": queryset,#     "form": form# }context = {"form": form,"queryset": page_obj.page_queryset,  # 分完页的数据"page_html": page_obj.html(),  # 分页后的页码}return render(request, 'admin_list.html', context)我们把cookie清除，看看能不能直接访问部门列表界面或者管理员列表界面可以看到，当我们直接访问管理员列表，直接跳转登录界面。类似的，如果有其他视图，则在所有的视图函数上，统一加上这个判断。但是一个个加的话，贼烦。使用中间件来实现。首先创建middleware文件夹，创建auth.pyfrom django.utils.deprecation import MiddlewareMixinclass AuthMiddlewareMixin(MiddlewareMixin):def process_request(self, request):print("MW 进来了")def process_response(self, request, response):print("MW 走了")return response然后在settings注册MIDDLEWARE = ["django.middleware.security.SecurityMiddleware","django.contrib.sessions.middleware.SessionMiddleware","django.middleware.common.CommonMiddleware","django.middleware.csrf.CsrfViewMiddleware","django.contrib.auth.middleware.AuthenticationMiddleware","django.contrib.messages.middleware.MessageMiddleware","django.middleware.clickjacking.XFrameOptionsMiddleware","app01.middleware.auth.AuthMiddlewareMixin",
]修改业务逻辑# 继承中间件类
from django.shortcuts import redirect
from django.utils.deprecation import MiddlewareMixinclass AuthMiddlewareMixin(MiddlewareMixin):def process_request(self, request):# 0 在做读取访问用户的session之前，要先过滤掉那么不需要登录就能访问的界面if request.path_info in ["/account/login/","/account/logout/",]:return None# 1 读取当前访问用户的session，如果能读取到，那么说明用户曾经登陆过，那么就可以继续往下执行；info_dict = request.session.get('user_info')if info_dict:return None# 2 如果没有读取到，则提示用户进行登录else:# return HttpResponse("请先登录")return redirect('/account/login/')def process_response(self, request, response):print("process_response。。。。")return response把原来的获取信息注释掉def admin_list(request):# # 获取当前登录用户信息# info = request.session.get('user_info')# print("info is...", info)# # 如果用户没有登录，则跳转到登录页面# if not info:#     return redirect("/account/login/")# return HttpResponse("admin_list is ok")# 查询所有的数据queryset = models.Admin.objects.using("default").all()# 创建分页对象page_obj = Pagination(request, queryset)form = AdminModelForm()# context = {#     "queryset": queryset,#     "form": form# }context = {"form": form,"queryset": page_obj.page_queryset,  # 分完页的数据"page_html": page_obj.html(),  # 分页后的页码}return render(request, 'admin_list.html', context)可以看到，当我们直接访问管理员列表，直接跳转登录界面。http://www.ppmy.cn/news/1541062.html相关文章安装和简单使用Milvus安装和简单使用Milvus 
1 介绍 
Milvus是国产的高性能分布式向量数据库。 
# Milvus官网
https://milvus.io/# 安装文档
https://milvus.io/docs/install-overview.md# Python的对应关系和接口文档
https://milvus.io/api-reference/pymilvus/v2.4.x/About.md2 安装Milvus 
2.1…阅读更多...解析带有MyBatis语法的SQL字符串，获取最终的可执行SQL有一个带有mybatis语法的sql语句&amp;#xff0c;如下&amp;#xff1a; 
select * from cfg_export_template where id  #{id} &lt;if testid ! null&gt; AND 1  1 &lt;/if&gt;需求是将sql和占位符相关的数据丢给mybatis&amp;#xff0c;获取到最终可执行的SQL。 解决思路&amp;#xff1a; 1、像…阅读更多...R语言绘制Venn图(文氏图、温氏图、维恩图、范氏图、韦恩图)Venn图&amp;#xff0c;又称文氏图&amp;#xff0c;标题中其他名字也是它的别称&amp;#xff0c;由封闭圆形组成&amp;#xff0c;代表不同集合。圆形重叠部分表示集合交集&amp;#xff0c;非重叠处为独有元素。在生物学、统计学等领域广泛应用&amp;#xff0c;可展示不同数据集相似性与差异&amp;#xff0c;…阅读更多...企业电子印章主要通过以下几种方式进行防伪企业电子印章主要通过以下几种方式进行防伪&amp;#xff1a; 
一、数字证书和加密技术 
数字证书认证 企业电子印章依托数字证书&amp;#xff0c;数字证书由权威的第三方数字认证机构颁发&amp;#xff0c;确保了印章使用者的身份真实性。 数字证书如同企业在数字世界的身份证&amp;#xff0c;包…阅读更多...wpf grid 的用法WPF中的Grid是一种布局控件&amp;#xff0c;可用于将子控件按照行和列的方式排列。 
以下是Grid控件的用法&amp;#xff1a; 
在XAML文件中&amp;#xff0c;添加一个Grid控件&amp;#xff1a; 
&lt;Grid&gt;
&lt;/Grid&gt;在Grid控件中&amp;#xff0c;添加行和列定义&amp;#xff1a; 
&lt;Grid&gt;&lt;…阅读更多...Uptime Kuma: 全面的开源网站监控解决方案在当今数字化时代,网站和服务的可用性对于企业和个人来说至关重要。Uptime Kuma作为一款功能强大的开源监控工具,为用户提供了全面的网站和服务监控解决方案。本文将深入介绍Uptime Kuma的特性、安装方法以及更新维护,帮助读者了解这一优秀的监控工具。 
主要特性 
Uptime Kuma…阅读更多...dbt-codegen: dbt自动生成模板代码dbt项目采用工程化思维&amp;#xff0c;数据模型分层实现&amp;#xff0c;支持描述模型文档和测试&amp;#xff0c;非常适合大型数据工程项目。但也需要用户编写大量yaml描述文件&amp;#xff0c;这个过程非常容易出错且无聊。主要表现&amp;#xff1a; 
手工为dbt模型编写yaml文件&amp;#xff0c;这过…阅读更多...【Golang】Go语言web框架Gin响应客户端有哪些方式✨✨ 欢迎大家来到景天科技苑✨✨ 
&amp;#x1f388;&amp;#x1f388; 养成好习惯&amp;#xff0c;先赞后看哦~&amp;#x1f388;&amp;#x1f388; &amp;#x1f3c6; 作者简介&amp;#xff1a;景天科技苑 &amp;#x1f3c6;《头衔》&amp;#xff1a;大厂架构师&amp;#xff0c;华为云开发者社区专家博主&amp;#xff0c;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:59 +0000</pubDate>
    </item>
    <item>
      <title>安装和简单使用Milvus</title>
      <link>https://www.ppmy.cn/news/1541061.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维安装和简单使用Milvusnews/2025/11/1 1:17:58/安装和简单使用Milvus1 介绍Milvus是国产的高性能分布式向量数据库。# Milvus官网
https://milvus.io/# 安装文档
https://milvus.io/docs/install-overview.md# Python的对应关系和接口文档
https://milvus.io/api-reference/pymilvus/v2.4.x/About.md2 安装Milvus2.1 安装数据库# 下载shell脚本
wget https://github.com/milvus-io/milvus/releases/download/v2.4.13/milvus-standalone-docker-compose.yml -O docker-compose.yml# 执行命令
docker-compose -f milvus-standalone-docker-compose.yml up -d# 查看容器
docker ps | grep milvus修改认证权限# Milvus的配置目录，一般不用
# 下载milvus.yaml文件
# 下载地址
https://raw.githubusercontent.com/milvus-io/milvus/v2.4.13/configs/milvus.yaml# 修改milvus.yaml文件
...
common:
...security:# 修改milvus.yaml中的下面参数为: trueauthorizationEnabled: false
...# 在milvus-standalone-docker-compose.yml中添加共享数据卷
...# 安装milvusstandalone:container_name: milvus-standalone...volumes:# Milvus的配置目录，将修改后的文件放在下面即可- /home/milvus/milvus/configs/milvus.yaml:/milvus/configs/milvus.yaml...milvus-standalone-docker-compose.ymlversion:'3.5'services:# 安装etcdetcd:container_name:milvus-etcdimage:quay.io/coreos/etcd:v3.5.5restart:alwaysenvironment:-ETCD_AUTO_COMPACTION_MODE=revision-ETCD_AUTO_COMPACTION_RETENTION=1000-ETCD_QUOTA_BACKEND_BYTES=4294967296-ETCD_SNAPSHOT_COUNT=50000volumes:-/home/milvus/etcd:/etcdcommand:etcd-advertise-client-urls=http://127.0.0.1:2379-listen-client-urls http://0.0.0.0:2379--data-dir /etcdhealthcheck:test:["CMD","etcdctl","endpoint","health"]interval:30stimeout:20sretries:3# 安装miniominio:container_name:milvus-minioimage:minio/minio:RELEASE.2023-03-20T20-16-18Zrestart:alwaysenvironment:MINIO_ACCESS_KEY:minioadminMINIO_SECRET_KEY:minioadminports:-"9001:9001"-"9000:9000"volumes:-/home/milvus/minio:/minio_datacommand:minio server /minio_data--console-address ":9001"healthcheck:test:["CMD","curl","-f","http://localhost:9000/minio/health/live"]interval:30stimeout:20sretries:3# 安装milvusstandalone:container_name:milvus-standaloneimage:milvusdb/milvus:v2.4.13restart:alwayscommand:["milvus","run","standalone"]security_opt:-seccomp:unconfinedenvironment:ETCD_ENDPOINTS:etcd:2379MINIO_ADDRESS:minio:9000volumes:# Milvus的配置目录，可以不配置# 下载地址：https://raw.githubusercontent.com/milvus-io/milvus/v2.4.13/configs/milvus.yaml# common:#  security:#    # 修改milvus.yaml中的下面参数为: true#    authorizationEnabled: false-/home/milvus/milvus/configs/milvus.yaml:/milvus/configs/milvus.yaml# Milvus的数据目录-/home/milvus/milvus/data:/var/lib/milvushealthcheck:test:["CMD","curl","-f","http://localhost:9091/healthz"]interval:30sstart_period:90stimeout:20sretries:3ports:-"19530:19530"-"9091:9091"depends_on:-"etcd"-"minio"networks:default:name:milvus2.2 安装工具⚠️ 注意：attu和Mivus有版本对应关系。docker run -itd \
--name milvus-attu \
--restart always \
-p 3000:3000 \
zilliz/attu:v2.4.8访问attu# 访问地址
http://192.168.108.160:3000/#/# 访问成功后输入Milvus的地址和端口号即可
# Mlivus的默认账号/密码：root/Milvus
192.168.108.160:195303 使用Milvus3.1 安装依赖# 注意有版本对应关系
pip install pymilvus==2.4.8 -i https://pypi.tuna.tsinghua.edu.cn/simple3.2 简单使用importjsonfrompymilvusimportMilvusClient,FieldSchema,DataTypefromsentence_transformersimportSentenceTransformerdb_name="test_db"collection_name="test_collection"defcreate_db():# 连接Milvusclient_tmp=MilvusClient(uri="http://192.168.108.160:19530",# 默认的账号和密码token="root:Milvus",# 连接默认数据库db_name="default")# 创建数据库client_tmp.create_database(db_name)defcreate_collection():# 连接Milvusclient=MilvusClient(uri="http://192.168.108.160:19530",# 默认的账号和密码token="root:Milvus",db_name=db_name# db_name="default")# 创建集合# 判断索引是否存在ifclient.has_collection(collection_name=collection_name):# 删除集合client.drop_collection(collection_name=collection_name)# 1 设置schemaschema_config=MilvusClient.create_schema(auto_id=False,enable_dynamic_field=True,)# 2 设置索引index_params_config=client.prepare_index_params()# 设置主键schema_config.add_field(field_name="id",datatype=DataType.INT64,is_primary=True)index_params_config.add_index(field_name="id",# 索引设置标量index_type="STL_SORT")# 设置评分类型schema_config.add_field(field_name="score",datatype=DataType.FLOAT)# 设置字符类型schema_config.add_field(field_name="summary",datatype=DataType.VARCHAR,max_length=300)# 设置向量schema_config.add_field(field_name="vector",datatype=DataType.FLOAT_VECTOR,dim=384)index_params_config.add_index(field_name="vector",index_type="AUTOINDEX",metric_type="COSINE")# 创建索引client.create_collection(collection_name=collection_name,# 设置schemaschema=schema_config,index_params=index_params_config,# 自动编号auto_id=True,# 开启自动动态属性enable_dynamic_field=True)defadd_data_vec():# 连接Milvusclient=MilvusClient(uri="http://192.168.108.160:19530",# 默认的账号和密码token="root:Milvus",db_name=db_name)# 生成向量model=SentenceTransformer(model_name_or_path="E:/model/sentencetransformers/all-MiniLM-L6-v2")# 句子列表sentences=["This framework generates embeddings for each input sentence","Sentences are passed as a list of string.","The quick brown fox jumps over the lazy dog.",]# 注意：all-MiniLM-L6-v2的输出维度是384sentence_embeddings=model.encode(sentences)# 向量列表data_list=list()# 打印嵌入模型i=0forsentence,embeddinginzip(sentences,sentence_embeddings):print("Sentence:",sentence)print("Embedding:",embedding)data_item=dict()data_item["id"]=idata_item["score"]=0.1data_item["summary"]=sentencedata_item["vector"]=embedding.tolist()print(data_item)data_list.append(data_item)# 增加编号i=i+1# 设置索引名称res=client.insert(collection_name=collection_name,data=data_list)# 返回值print(res)passdefquery_data():# 连接Milvusclient=MilvusClient(uri="http://192.168.108.160:19530",# 默认的账号和密码token="root:Milvus",db_name=db_name)# 生成向量model=SentenceTransformer(model_name_or_path="E:/model/sentencetransformers/all-MiniLM-L6-v2")sentence_embeddings=model.encode("my dog")res=client.search(collection_name=collection_name,# 设置向量# 例子： data = [ [0.3580376395471989, -0.6023495712049978, ……] ]data=[sentence_embeddings.tolist()],# 最大返回值数量limit=5,# 设置搜索参数search_params={"metric_type":"COSINE","params":{}},# 设置实体中输出的参数output_fields=["score","summary"])print(res)# 美化输出的缩进量：indent=4result=json.dumps(res,indent=4)print(result)if__name__=='__main__':# 1 创建数据库# create_db()# 2 创建集合# create_collection()# 3 添加向量# add_data_vec()# 4 查询数据query_data()截图http://www.ppmy.cn/news/1541061.html相关文章解析带有MyBatis语法的SQL字符串，获取最终的可执行SQL有一个带有mybatis语法的sql语句&amp;#xff0c;如下&amp;#xff1a; 
select * from cfg_export_template where id  #{id} &lt;if testid ! null&gt; AND 1  1 &lt;/if&gt;需求是将sql和占位符相关的数据丢给mybatis&amp;#xff0c;获取到最终可执行的SQL。 解决思路&amp;#xff1a; 1、像…阅读更多...R语言绘制Venn图(文氏图、温氏图、维恩图、范氏图、韦恩图)Venn图&amp;#xff0c;又称文氏图&amp;#xff0c;标题中其他名字也是它的别称&amp;#xff0c;由封闭圆形组成&amp;#xff0c;代表不同集合。圆形重叠部分表示集合交集&amp;#xff0c;非重叠处为独有元素。在生物学、统计学等领域广泛应用&amp;#xff0c;可展示不同数据集相似性与差异&amp;#xff0c;…阅读更多...企业电子印章主要通过以下几种方式进行防伪企业电子印章主要通过以下几种方式进行防伪&amp;#xff1a; 
一、数字证书和加密技术 
数字证书认证 企业电子印章依托数字证书&amp;#xff0c;数字证书由权威的第三方数字认证机构颁发&amp;#xff0c;确保了印章使用者的身份真实性。 数字证书如同企业在数字世界的身份证&amp;#xff0c;包…阅读更多...wpf grid 的用法WPF中的Grid是一种布局控件&amp;#xff0c;可用于将子控件按照行和列的方式排列。 
以下是Grid控件的用法&amp;#xff1a; 
在XAML文件中&amp;#xff0c;添加一个Grid控件&amp;#xff1a; 
&lt;Grid&gt;
&lt;/Grid&gt;在Grid控件中&amp;#xff0c;添加行和列定义&amp;#xff1a; 
&lt;Grid&gt;&lt;…阅读更多...Uptime Kuma: 全面的开源网站监控解决方案在当今数字化时代,网站和服务的可用性对于企业和个人来说至关重要。Uptime Kuma作为一款功能强大的开源监控工具,为用户提供了全面的网站和服务监控解决方案。本文将深入介绍Uptime Kuma的特性、安装方法以及更新维护,帮助读者了解这一优秀的监控工具。 
主要特性 
Uptime Kuma…阅读更多...dbt-codegen: dbt自动生成模板代码dbt项目采用工程化思维&amp;#xff0c;数据模型分层实现&amp;#xff0c;支持描述模型文档和测试&amp;#xff0c;非常适合大型数据工程项目。但也需要用户编写大量yaml描述文件&amp;#xff0c;这个过程非常容易出错且无聊。主要表现&amp;#xff1a; 
手工为dbt模型编写yaml文件&amp;#xff0c;这过…阅读更多...【Golang】Go语言web框架Gin响应客户端有哪些方式✨✨ 欢迎大家来到景天科技苑✨✨ 
&amp;#x1f388;&amp;#x1f388; 养成好习惯&amp;#xff0c;先赞后看哦~&amp;#x1f388;&amp;#x1f388; &amp;#x1f3c6; 作者简介&amp;#xff1a;景天科技苑 &amp;#x1f3c6;《头衔》&amp;#xff1a;大厂架构师&amp;#xff0c;华为云开发者社区专家博主&amp;#xff0c;…阅读更多...基于SpringBoot的旅游网站的设计与实现作者&amp;#xff1a;计算机学长阿伟 开发技术&amp;#xff1a;SpringBoot、SSM、Vue、MySQL、ElementUI等&amp;#xff0c;“文末源码”。 系统展示 【2024最新】基于JavaSpringBootVueMySQL的&amp;#xff0c;前后端分离。 
开发语言&amp;#xff1a;Java数据库&amp;#xff1a;MySQL技术&amp;#xff1a;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:58 +0000</pubDate>
    </item>
    <item>
      <title>解析带有MyBatis语法的SQL字符串，获取最终的可执行SQL</title>
      <link>https://www.ppmy.cn/news/1541060.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维解析带有MyBatis语法的SQL字符串，获取最终的可执行SQLnews/2025/11/1 1:17:57/有一个带有mybatis语法的sql语句，如下：select*from cfg_export_template where id=#{id}&lt;iftest='id != null'&gt;AND1=1&lt;/if&gt;需求是将sql和占位符相关的数据丢给mybatis，获取到最终可执行的SQL。解决思路：1、像if、where等动态标签跟#{}这种占位符不一样，动态标签是mybatis是通过xml的结构去解析的，因为我们拿到手的是字符串，如果直接丢给mybats是无法将这些动态标签进行解析的。所以需要构建成xml格式去处理。参考方法getExecutableSql2、对于#{}这类的占位符在Mybatis预编译语句后会被?所替换，可以使用ParameterHandler去获取到最终的可执行SQL。参考方法replaceParameterspublicclassMyBatisDynamicSqlExecutor{privateSqlSessionFactorysqlSessionFactory;publicMyBatisDynamicSqlExecutor(SqlSessionFactorysqlSessionFactory){this.sqlSessionFactory=sqlSessionFactory;}/*** 执行传递的SQL 预编译后，返回最终可执行的SQL* @param dynamicSql* @param params* @return*/publicStringgetExecutableSql(StringdynamicSql,Map&lt;String,Object&gt;params)throwsSQLException{//对字符串中的符号转义dynamicSql=StringEscapeUtils.escapeXml10(dynamicSql);params.put("sql",dynamicSql);Configurationconfiguration=sqlSessionFactory.getConfiguration();Stringxml="&lt;select&gt;"+dynamicSql+"&lt;/select&gt;";XPathParserparser=newXPathParser(xml);List&lt;XNode&gt;xNodes=parser.evalNodes("select|insert|update|delete");BoundSqlboundSql=null;if(xNodes!=null&amp;&amp;xNodes.size()!=0){if(xNodes.size()&gt;1){thrownewRuntimeException("只能解析一句sql");}else{LanguageDriverlangDriver=configuration.getLanguageDriver((Class)null);XNodenode=(XNode)xNodes.get(0);SqlSourcesqlSource=langDriver.createSqlSource(configuration,node,(Class)null);boundSql=sqlSource.getBoundSql(params);}}else{thrownewRuntimeException("找不到sql语句");}// 获取SQL并替换参数returnreplaceParameters(boundSql,params,boundSql.getSql().substring(0,boundSql.getSql().indexOf(" ")));}/*** 使用ParameterHandler替换参数* @param boundSql* @param params* @param queryMethod 查询方式 select/delete...* @return* @throws SQLException*/privateStringreplaceParameters(BoundSqlboundSql,Map&lt;String,Object&gt;params,StringqueryMethod)throwsSQLException{//  获取配置和MappedStatementConfigurationconfiguration=sqlSessionFactory.getConfiguration();MappedStatementmappedStatement=configuration.getMappedStatement("cn.com.fssg.platform.modules.engine.mapper.DynamicMapper.executeDynamicSql");// 创建ParameterHandlerParameterHandlerparameterHandler=newDefaultParameterHandler(mappedStatement,params,boundSql);Connectionconnection=configuration.getEnvironment().getDataSource().getConnection();PreparedStatementps=connection.prepareStatement(boundSql.getSql());parameterHandler.setParameters(ps);// 获取PreparedStatement的最终SQL,这里PreparedStatement已经注入了参数StringpreparedSql=ps.toString();// 去掉PreparedStatement前缀，保留实际的SQL部分,假设SQL是从select开始intsqlIndex=preparedSql.indexOf(queryMethod);returnpreparedSql.substring(sqlIndex);}}http://www.ppmy.cn/news/1541060.html相关文章R语言绘制Venn图(文氏图、温氏图、维恩图、范氏图、韦恩图)Venn图&amp;#xff0c;又称文氏图&amp;#xff0c;标题中其他名字也是它的别称&amp;#xff0c;由封闭圆形组成&amp;#xff0c;代表不同集合。圆形重叠部分表示集合交集&amp;#xff0c;非重叠处为独有元素。在生物学、统计学等领域广泛应用&amp;#xff0c;可展示不同数据集相似性与差异&amp;#xff0c;…阅读更多...企业电子印章主要通过以下几种方式进行防伪企业电子印章主要通过以下几种方式进行防伪&amp;#xff1a; 
一、数字证书和加密技术 
数字证书认证 企业电子印章依托数字证书&amp;#xff0c;数字证书由权威的第三方数字认证机构颁发&amp;#xff0c;确保了印章使用者的身份真实性。 数字证书如同企业在数字世界的身份证&amp;#xff0c;包…阅读更多...wpf grid 的用法WPF中的Grid是一种布局控件&amp;#xff0c;可用于将子控件按照行和列的方式排列。 
以下是Grid控件的用法&amp;#xff1a; 
在XAML文件中&amp;#xff0c;添加一个Grid控件&amp;#xff1a; 
&lt;Grid&gt;
&lt;/Grid&gt;在Grid控件中&amp;#xff0c;添加行和列定义&amp;#xff1a; 
&lt;Grid&gt;&lt;…阅读更多...Uptime Kuma: 全面的开源网站监控解决方案在当今数字化时代,网站和服务的可用性对于企业和个人来说至关重要。Uptime Kuma作为一款功能强大的开源监控工具,为用户提供了全面的网站和服务监控解决方案。本文将深入介绍Uptime Kuma的特性、安装方法以及更新维护,帮助读者了解这一优秀的监控工具。 
主要特性 
Uptime Kuma…阅读更多...dbt-codegen: dbt自动生成模板代码dbt项目采用工程化思维&amp;#xff0c;数据模型分层实现&amp;#xff0c;支持描述模型文档和测试&amp;#xff0c;非常适合大型数据工程项目。但也需要用户编写大量yaml描述文件&amp;#xff0c;这个过程非常容易出错且无聊。主要表现&amp;#xff1a; 
手工为dbt模型编写yaml文件&amp;#xff0c;这过…阅读更多...【Golang】Go语言web框架Gin响应客户端有哪些方式✨✨ 欢迎大家来到景天科技苑✨✨ 
&amp;#x1f388;&amp;#x1f388; 养成好习惯&amp;#xff0c;先赞后看哦~&amp;#x1f388;&amp;#x1f388; &amp;#x1f3c6; 作者简介&amp;#xff1a;景天科技苑 &amp;#x1f3c6;《头衔》&amp;#xff1a;大厂架构师&amp;#xff0c;华为云开发者社区专家博主&amp;#xff0c;…阅读更多...基于SpringBoot的旅游网站的设计与实现作者&amp;#xff1a;计算机学长阿伟 开发技术&amp;#xff1a;SpringBoot、SSM、Vue、MySQL、ElementUI等&amp;#xff0c;“文末源码”。 系统展示 【2024最新】基于JavaSpringBootVueMySQL的&amp;#xff0c;前后端分离。 
开发语言&amp;#xff1a;Java数据库&amp;#xff1a;MySQL技术&amp;#xff1a;…阅读更多...HTTP和RPC通信协议在软件开发中&amp;#xff0c;通信协议扮演着关键的角色&amp;#xff0c;它们定义了不同系统或组件之间进行通信的规则和方式。HTTP&amp;#xff08;Hypertext Transfer Protocol&amp;#xff09;和RPC&amp;#xff08;Remote Procedure Call Protocol&amp;#xff09;是两种常见的通信协议。然而RPC 和…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:57 +0000</pubDate>
    </item>
    <item>
      <title>R语言绘制Venn图(文氏图、温氏图、维恩图、范氏图、韦恩图)</title>
      <link>https://www.ppmy.cn/news/1541059.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维R语言绘制Venn图(文氏图、温氏图、维恩图、范氏图、韦恩图)news/2025/11/1 1:17:56/Venn图，又称文氏图，标题中其他名字也是它的别称，由封闭圆形组成，代表不同集合。圆形重叠部分表示集合交集，非重叠处为独有元素。在生物学、统计学等领域广泛应用，可展示不同数据集相似性与差异，辅助逻辑分析。以直观方式呈现复杂集合关系，是有力的可视化工具。0x01 使用VennDiagram包这里绘制venn图需要用到venn.diagram()函数。一、函数用法及参数说明venn.diagram(x, filename, disable.logging = FALSE, height = 3000, width = 3000, resolution = 500, imagetype = "tiff", units = "px", compression = "lzw", na = "stop", main = NULL, sub = NULL, main.pos = c(0.5, 1.05), main.fontface = "plain", main.fontfamily = "serif", main.col = "black", main.cex = 1, main.just = c(0.5, 1), sub.pos = c(0.5, 1.05), sub.fontface = "plain", sub.fontfamily = "serif", sub.col = "black", sub.cex = 1, sub.just = c(0.5, 1), category.names = names(x), force.unique = TRUE, print.mode = "raw", sigdigs = 3, direct.area = FALSE, area.vector = 0, hyper.test = FALSE, total.population = NULL, lower.tail = TRUE,...)1 基本输入参数x：一个列表，其中每个元素对应韦恩图中的一个集合，可以是向量（如整数、字符等）。2 输出设置参数2.1filename：图像输出的文件名，如果为NULL，则返回一个绘图对象本身。2.2disable.logging：布尔值，用于禁用日志文件输出并改为在控制台打印。2.3imagetype：图像格式的指定，如 “tiff”、“png” 或 “svg” 等。3 图形尺寸和分辨率参数3.1height：整数，给出输出图形的高度，单位由units参数指定。3.2width：整数，给出输出图形的宽度，单位由units参数指定。3.3resolution：最终图形的分辨率，以 DPI 为单位。3.4units：最终图形的尺寸单位，如 “px”。4 压缩和缺失值处理参数4.1compression：如果图像格式是 TIFF，此参数指定压缩算法，如 “lzw”。4.2na：处理缺失值的方法，可选 “none”、“stop”、“remove”。5 标题和副标题参数5.1main：字符，给出韦恩图的主标题。5.2sub：字符，给出韦恩图的副标题。5.3main.pos：长度为 2 的向量，指示主标题的位置（x,y）。5.4main.fontface：字符，给出主标题的字体样式（font style）。5.5main.fontfamily：字符，给出主标题的字体类型（font type）。5.6main.col：字符，给出主标题的颜色。5.7main.cex：数字，给出主标题的字体大小（cex）。5.8main.just：长度为 2 的向量，指示主标题的水平和垂直对齐方式。5.9sub.pos：长度为 2 的向量，指示副标题的位置（x,y）。5.10sub.fontface：字符，给出副标题的字体样式。5.11sub.fontfamily：字符，给出副标题的字体类型。5.12sub.col：字符，副标题的颜色。5.13sub.cex：数字，给出副标题的字体大小。5.14sub.just：长度为 2 的向量，指示副标题的水平和垂直对齐方式。6 类别名称和数据处理参数6.1category.names：允许使用绘图语法指定类别名称。6.2force.unique：逻辑值，指定是否仅使用输入列表中每个元素的唯一元素，默认为FALSE。6.3print.mode：可以是 “raw” 或 “percent”，决定数字的打印格式，也可以是一个向量，用于指定多种打印模式。6.4sigdigs：如果print.mode中有元素是 “percent”，则此参数指定保留的有效数字位数。7 面积和超几何检验参数7.1direct.area：布尔值，如果为true，则直接将area.vector参数中的值分配给相应区域的面积，仅在清楚向量中每个位置对应哪个区域时使用。7.2area.vector：当direct.area为true时使用，是对应区域的面积向量。7.3hyper.test：如果韦恩图只有两个类别且total.population不为NULL，则执行超几何检验并添加到副标题中。7.4total.population：当hyper.test为true时使用，是总群体大小。7.5lower.tail：逻辑值，默认为TRUE，如果为TRUE，则概率为P[X &lt;= x]，否则为P[X &gt; x]。8 图形调整参数8.1lwd：1、2、3、4、5 的数字向量，给出每个圆的周长宽度。8.2lty：1、2、3、4、5 的数字向量，给出每个圆的虚线样式。8.3col：1、2、3、4、5 的字符向量，给出每个圆的周长颜色。8.4fill：1、2、3、4、5 的字符向量，给出每个圆的区域颜色。8.5alpha：1、2、3、4、5 的数字向量，给出每个圆的区域透明度。8.6label.col：1、2、3、4、5 的字符向量，给出每个区域标签的颜色（长度基于集合数量）。8.7cex：1、2、3、4、5 的数字向量，给出每个区域标签的大小（长度基于集合数量）。8.8fontface：1、2、3、4、5 的字符向量，给出每个区域标签的字体样式（长度基于集合数量）。8.9fontfamily：1、2、3、4、5 的字符向量，给出每个区域标签的字体类型（长度基于集合数量）。8.10cat.pos：1、2、3、4、5 的数字向量，给出每个类别名称沿圆的位置（角度），0 在 12 点钟方向。8.11cat.dist：1、2、3、4、5 的数字向量，给出每个类别名称距圆边缘的距离（以 npc 单位），可以为负数。8.12cat.cex：1、2、3、4、5 的数字向量，给出每个类别名称的大小。8.13cat.col：1、2、3、4、5 的字符向量，给出每个类别名称的颜色。8.14cat.fontface：1、2、3、4、5 的字符向量，给出每个类别名称的字体样式。8.15cat.fontfamily：1、2、3、4、5 的字符向量，给出每个类别名称的字体类型。8.16cat.just：基于集合数量长度为 1/2/3/4 的数字向量列表，每个向量长度为 2，指示每个类别名称的水平和垂直对齐方式。8.17cat.default.pos：1、2、3 的字符之一，为 “outer” 或 “text”，用于指定类别名称的默认位置（cat.pos 和 cat.dist 的处理方式不同）。8.18cat.prompts：2 的数字，布尔值，指示是否显示类别名称定位的帮助文本。8.19margin：1、2、3、4、5 的数字，给出图形周围的空白量（以网格单位）。8.20rotation.degree：1、2、3、4、5 的数字，给出整个图形的旋转度数。8.21rotation.centre：1、2、3、4、5 的长度为 2 的数字向量，指示旋转中心（x,y）。8.22rotation：3 的数字，给出三集合韦恩图的顺时针旋转（1、2 或 3）。8.23reverse：3 的逻辑值，沿三集合韦恩图的中央垂直轴对称反射。与rotation结合使用以生成所有可能的集合顺序。8.24euler.d：2、3 的逻辑值，为二集合和三集合韦恩图启用欧拉图（具有可移动圆圈的韦恩图）。8.25scaled：2、3 的逻辑值，为二集合和某些三集合欧拉图启用缩放。（必须为true才能启用此功能）。8.26sep.dist：2、3 的数字，控制某些二集合或三集合欧拉图中不同圆圈之间的分离距离。8.27offset：2、3 的数字，介于 0 和 1 之间，给出在包含类型的二集合欧拉图和某些类似的三集合欧拉图中较小圆圈的偏移量。8.28inverted：2 的逻辑值，沿其二集合韦恩图的垂直轴翻转（与reverse不同）。8.29ext.text：2 的逻辑值，当区域较小时允许外部文本标签。8.30ext.percent：2 的数字向量（长度为 3），指示部分区域必须小于的比例以触发外部文本放置。元素允许对第一区域、第二区域和交叉区域进行单独控制。8.31ext.pos：2 的数字向量（长度为 1 或 2），给出沿圆的外部区域标签的位置（角度），0（默认）在 12 点钟方向。8.32ext.line.lwd：2 的数字，连接到外部文本的线的宽度。8.33ext.line.lty：2 的数字，连接外部区域标签到其锚点的线的虚线样式。8.34ext.dist：2 的数字向量（长度为 1 或 2），指示外部线的长度（使用负值缩短线）。8.35ext.length：2 的数字向量（长度为 1 或 2），指示从锚点到文本绘制的外部线的比例。二、准备工作# 安装 VennDiagram 包，如果已经安装过可以省略这一步install.packages("VennDiagram")# 加载 VennDiagram 包以使用其函数library(VennDiagram)三、绘制并直接输出本地#设置工作目录setwd("d:/")# 创建一个包含两个集合的列表，集合 A 为 1 到 150 的整数，集合 B 为 121 到 170 的整数l&lt;-list(A=1:150,B=121:170)# 使用 venn.diagram 函数绘制两个集合的韦恩图，并将结果保存为名为 "VennDiagram-1.png" 的图片文件venn.diagram(l,filename="VennDiagram-1.png")四、绘制简单的韦恩图（不保存）# 创建一个包含四个集合的列表，集合 A 为 1 到 150 的整数，集合 B 为 121 到 170 的整数，集合 C 为 75 到 234 的整数，集合 D 为 23 到 190 的整数ll&lt;-list(A=1:150,B=121:170,c=75:234,D=23:190)# 使用 venn.diagram 函数绘制四个集合的韦恩图，filename 设置为 NULL 表示不保存为文件，而是将结果存储在一个对象中venn2&lt;-venn.diagram(ll,filename=NULL)# 使用 grid.draw 函数在当前图形设备上绘制存储在 venn2 对象中的韦恩图grid.draw(venn2)五、调整和美化# 创建一个包含四个集合的列表，集合 A 为 1 到 150 的整数，集合 B 为 121 到 170 的整数，集合 C 为 75 到 234 的整数，集合 D 为 23 到 190 的整数lll&lt;-list(A=1:150,B=121:170,c=75:234,D=23:190)# 定义填充颜色向量，分别对应四个集合的填充颜色fill_colors&lt;-c("cornflowerblue","green","yellow","darkorchid1")# 定义类别颜色向量，用于设置四个集合的类别名称颜色cat_col&lt;-c("darkblue","darkgreen","orange","darkorchid4")# 使用 venn.diagram 函数绘制四个集合的韦恩图，filename 设置为 NULL 表示不保存为文件，而是将结果存储在一个对象中# 参数说明：#   lll：包含四个集合的列表，用于绘制韦恩图#   filename = NULL：不保存为文件，而是返回一个绘图对象#   col = "black"：韦恩图的边框颜色为黑色#   fill = fill_colors：使用定义的填充颜色向量为四个集合的区域填充颜色#   alpha = 0.4：设置区域的透明度为 0.4#   cat.col = cat_col：使用定义的类别颜色向量设置四个集合的类别名称颜色#   cat.cex = 1.5：设置类别名称的字体大小为 1.5#   rotation.degree = 0：不进行旋转#   lwd = 3：设置边框宽度为 3#   lty = 4：设置边框的线型为 4venn3&lt;-venn.diagram(lll,filename=NULL,col="black",fill=fill_colors,alpha=0.4,cat.col=cat_col,cat.cex=1.5,rotation.degree=0,lwd=3,lty=4)# 使用 grid.draw 函数在当前图形设备上绘制存储在 venn3 对象中的韦恩图grid.draw(venn3)0x02 使用venneuler包一、错误解决我在安装包时，出现了如下错误信息（如未遇到该情况可忽略该解决方式）：&gt;library(venneuler)载入需要的程序包：rJava
Error:package or namespace load failedfor‘rJava’:loadNamespace()里算'rJava'时.onLoad失败了，详细内容：调用:fun(libname,pkgname)错误:JAVA_HOME cannot be determined from the Registry
错误:无法载入程序包‘rJava’这个错误通常是由于无法正确找到 Java 安装路径导致的。首先确保你的系统上安装了 Java。你可以在命令行中输入 java -version 来检查 Java 是否安装以及查看其版本信息。如果出现如图的提示，则表示系统里面没有安装Java，则需要通过下载安装Java，错误即可得到解决。Java官网地址：https://www.java.com/zh-CN/二、函数用法及参数说明venneuler(combinations, weights,...)1combinations：可以是以下几种形式之一：字符向量：指定不相交的类组合，类名之间用 “&amp;” 字符分隔，例如c("A","B","A&amp;B")。命名的数值向量：名称指定类组合，值指定权重，例如c(A=1, B=2, "A&amp;B"=0.5)。两列的字符矩阵：指定元素到集合的映射，第一列是元素，第二列是集合名称，此时weights参数被忽略。逻辑矩阵或数值矩阵：矩阵的列代表集合，行中的非零值（对于逻辑矩阵）或真值（对于数值矩阵）表示共同出现，行的权重对于逻辑矩阵为 1，对于数值矩阵为行和。为了方便，也可以传递数据框，它将被强制转换为矩阵。2weights：如果combinations是字符向量，那么这个参数指定相关的权重。在其他情况下被忽略。返回值返回一个VennDiagram类的对象，包含以下组件：1centers：圆的中心（列是 x 和 y 坐标）。2diameters：圆的直径。3colors：圆的颜色，取值在 0 到 1 之间。4labels：圆的标签。5residuals：残差（输入交集区域与拟合交集区域之间的百分比差异）。6stress：解的应力值。7stress01：基于随机数据的应力的 0.01 临界值。8stress05：基于随机数据的应力的 0.05 临界值。三、准备工作# 安装 venneuler 包install.packages("venneuler")# 加载 venneuler 包以使用其函数library(venneuler)#加载rJava包以使用其函数library(rJava)四、绘制韦恩图已知集合的具体元素分布情况通过矩阵形式明确地表示元素与集合的关系可以这样表达：# 创建一个数据框并转换为矩阵m&lt;-as.matrix(data.frame(A=c(1.5,0.2,0.4,0,0),B=c(0,0.2,0,1,0),C=c(0,0,0.3,0,1)))# 使用 venneuler 函数根据矩阵 m 计算韦恩图或欧拉图，并将结果存储在 v 中v&lt;-venneuler(m)# 使用 plot 函数绘制由 venneuler 函数生成的韦恩图对象 vplot(v)而已知集合及其交集的权重情况，而不需要具体的元素分布信息可以这样表达：# 创建一个韦恩图对象 vd，通过 venneuler 函数传入命名的数值向量# 该向量指定了不同集合组合及其对应的权重# 集合 A 的权重为 0.3，集合 B 的权重为 0.5，集合 C 的权重为 0.7# 集合 A 和 B 的交集权重为 0.1，集合 B 和 C 的交集权重为 0.2，集合 A、B 和 C 的交集权重为 0.1vd&lt;-venneuler(c(A=0.3,B=0.5,C=0.7,"A&amp;B"=0.1,"B&amp;C"=0.2,"A&amp;B&amp;C"=0.1))# 使用 plot 函数绘制由 venneuler 函数生成的韦恩图对象 vdplot(vd)http://www.ppmy.cn/news/1541059.html相关文章企业电子印章主要通过以下几种方式进行防伪企业电子印章主要通过以下几种方式进行防伪&amp;#xff1a; 
一、数字证书和加密技术 
数字证书认证 企业电子印章依托数字证书&amp;#xff0c;数字证书由权威的第三方数字认证机构颁发&amp;#xff0c;确保了印章使用者的身份真实性。 数字证书如同企业在数字世界的身份证&amp;#xff0c;包…阅读更多...wpf grid 的用法WPF中的Grid是一种布局控件&amp;#xff0c;可用于将子控件按照行和列的方式排列。 
以下是Grid控件的用法&amp;#xff1a; 
在XAML文件中&amp;#xff0c;添加一个Grid控件&amp;#xff1a; 
&lt;Grid&gt;
&lt;/Grid&gt;在Grid控件中&amp;#xff0c;添加行和列定义&amp;#xff1a; 
&lt;Grid&gt;&lt;…阅读更多...Uptime Kuma: 全面的开源网站监控解决方案在当今数字化时代,网站和服务的可用性对于企业和个人来说至关重要。Uptime Kuma作为一款功能强大的开源监控工具,为用户提供了全面的网站和服务监控解决方案。本文将深入介绍Uptime Kuma的特性、安装方法以及更新维护,帮助读者了解这一优秀的监控工具。 
主要特性 
Uptime Kuma…阅读更多...dbt-codegen: dbt自动生成模板代码dbt项目采用工程化思维&amp;#xff0c;数据模型分层实现&amp;#xff0c;支持描述模型文档和测试&amp;#xff0c;非常适合大型数据工程项目。但也需要用户编写大量yaml描述文件&amp;#xff0c;这个过程非常容易出错且无聊。主要表现&amp;#xff1a; 
手工为dbt模型编写yaml文件&amp;#xff0c;这过…阅读更多...【Golang】Go语言web框架Gin响应客户端有哪些方式✨✨ 欢迎大家来到景天科技苑✨✨ 
&amp;#x1f388;&amp;#x1f388; 养成好习惯&amp;#xff0c;先赞后看哦~&amp;#x1f388;&amp;#x1f388; &amp;#x1f3c6; 作者简介&amp;#xff1a;景天科技苑 &amp;#x1f3c6;《头衔》&amp;#xff1a;大厂架构师&amp;#xff0c;华为云开发者社区专家博主&amp;#xff0c;…阅读更多...基于SpringBoot的旅游网站的设计与实现作者&amp;#xff1a;计算机学长阿伟 开发技术&amp;#xff1a;SpringBoot、SSM、Vue、MySQL、ElementUI等&amp;#xff0c;“文末源码”。 系统展示 【2024最新】基于JavaSpringBootVueMySQL的&amp;#xff0c;前后端分离。 
开发语言&amp;#xff1a;Java数据库&amp;#xff1a;MySQL技术&amp;#xff1a;…阅读更多...HTTP和RPC通信协议在软件开发中&amp;#xff0c;通信协议扮演着关键的角色&amp;#xff0c;它们定义了不同系统或组件之间进行通信的规则和方式。HTTP&amp;#xff08;Hypertext Transfer Protocol&amp;#xff09;和RPC&amp;#xff08;Remote Procedure Call Protocol&amp;#xff09;是两种常见的通信协议。然而RPC 和…阅读更多...MongoDB未授权访问mongodb未授权访问漏洞 复现 
MongoDB[//]: # (忙够DB)是一种流行的开源文档数据库管理系统&amp;#xff08;DBMS&amp;#xff09;&amp;#xff0c;基于分布式文件存储的数据库属于NoSQL数据库的一种。 
开启MongoDB服务时不添加任何参数时,默认是没有权限验证的 登录的用户可以通过默认端口…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:56 +0000</pubDate>
    </item>
    <item>
      <title>企业电子印章主要通过以下几种方式进行防伪</title>
      <link>https://www.ppmy.cn/news/1541058.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维企业电子印章主要通过以下几种方式进行防伪news/2025/11/1 1:17:54/企业电子印章主要通过以下几种方式进行防伪：一、数字证书和加密技术数字证书认证企业电子印章依托数字证书，数字证书由权威的第三方数字认证机构颁发，确保了印章使用者的身份真实性。数字证书如同企业在数字世界的身份证，包含了企业的名称、组织机构代码等关键信息，只有通过严格的身份验证流程才能获得。当企业使用电子印章时，系统会自动验证数字证书的有效性，确保印章的使用是经过授权的。加密技术保障电子印章采用先进的加密技术，对印章图像和相关数据进行加密处理。加密后的信息难以被篡改和伪造，即使被非法获取，也无法解读其内容。常见的加密算法有对称加密和非对称加密，它们共同为电子印章的安全性提供了坚实的保障。二、时间戳和数字签名1.时间戳验证电子印章在使用时会加盖时间戳，时间戳记录了印章使用的准确时间。时间戳由可信的时间源提供，具有法律效力。通过时间戳可以追溯印章的使用时间，防止印章被提前或事后加盖。如果有人试图伪造印章使用时间，时间戳的不可篡改特性将使其无法得逞。2.数字签名技术企业在使用电子印章时会生成数字签名，数字签名是一种基于密码学的技术，用于验证印章使用者的身份和印章内容的完整性。数字签名是通过对印章数据进行特定的算法运算生成的，具有唯一性和不可伪造性。接收方可以通过验证数字签名来确认印章的真实性和完整性，确保印章没有被篡改。三、区块链技术应用1.分布式存储防篡改一些电子印章系统采用区块链技术，将印章的使用记录存储在区块链上。区块链是一种分布式账本技术，数据被存储在多个节点上，任何单一节点的篡改都无法影响整个区块链的真实性。这样可以确保印章的使用记录不可篡改，为印章的防伪提供了更高级别的保障。2.智能合约自动执行区块链上的智能合约可以自动执行印章使用的规则和流程，确保印章的使用符合法律法规和企业内部的规定。智能合约可以对印章的使用权限、使用范围等进行限制，防止印章被滥用。四、管理和监控机制1.严格的权限管理企业电子印章系统通常设有严格的权限管理机制，只有经过授权的人员才能使用电子印章。不同的人员可能具有不同的权限级别，例如审批、盖章、查看等，从而有效地防止了印章被非法使用。2.实时监控和审计电子印章系统可以对印章的使用情况进行实时监控，记录每一次印章的使用时间、使用者、使用目的等信息。企业可以通过审计功能对印章的使用情况进行审查，及时发现异常情况并采取相应的措施。总之，企业电子印章通过数字证书、加密技术、时间戳、数字签名、区块链技术以及严格的管理和监控机制等多种方式进行防伪，确保了电子印章的安全性和可靠性。http://www.ppmy.cn/news/1541058.html相关文章wpf grid 的用法WPF中的Grid是一种布局控件&amp;#xff0c;可用于将子控件按照行和列的方式排列。 
以下是Grid控件的用法&amp;#xff1a; 
在XAML文件中&amp;#xff0c;添加一个Grid控件&amp;#xff1a; 
&lt;Grid&gt;
&lt;/Grid&gt;在Grid控件中&amp;#xff0c;添加行和列定义&amp;#xff1a; 
&lt;Grid&gt;&lt;…阅读更多...Uptime Kuma: 全面的开源网站监控解决方案在当今数字化时代,网站和服务的可用性对于企业和个人来说至关重要。Uptime Kuma作为一款功能强大的开源监控工具,为用户提供了全面的网站和服务监控解决方案。本文将深入介绍Uptime Kuma的特性、安装方法以及更新维护,帮助读者了解这一优秀的监控工具。 
主要特性 
Uptime Kuma…阅读更多...dbt-codegen: dbt自动生成模板代码dbt项目采用工程化思维&amp;#xff0c;数据模型分层实现&amp;#xff0c;支持描述模型文档和测试&amp;#xff0c;非常适合大型数据工程项目。但也需要用户编写大量yaml描述文件&amp;#xff0c;这个过程非常容易出错且无聊。主要表现&amp;#xff1a; 
手工为dbt模型编写yaml文件&amp;#xff0c;这过…阅读更多...【Golang】Go语言web框架Gin响应客户端有哪些方式✨✨ 欢迎大家来到景天科技苑✨✨ 
&amp;#x1f388;&amp;#x1f388; 养成好习惯&amp;#xff0c;先赞后看哦~&amp;#x1f388;&amp;#x1f388; &amp;#x1f3c6; 作者简介&amp;#xff1a;景天科技苑 &amp;#x1f3c6;《头衔》&amp;#xff1a;大厂架构师&amp;#xff0c;华为云开发者社区专家博主&amp;#xff0c;…阅读更多...基于SpringBoot的旅游网站的设计与实现作者&amp;#xff1a;计算机学长阿伟 开发技术&amp;#xff1a;SpringBoot、SSM、Vue、MySQL、ElementUI等&amp;#xff0c;“文末源码”。 系统展示 【2024最新】基于JavaSpringBootVueMySQL的&amp;#xff0c;前后端分离。 
开发语言&amp;#xff1a;Java数据库&amp;#xff1a;MySQL技术&amp;#xff1a;…阅读更多...HTTP和RPC通信协议在软件开发中&amp;#xff0c;通信协议扮演着关键的角色&amp;#xff0c;它们定义了不同系统或组件之间进行通信的规则和方式。HTTP&amp;#xff08;Hypertext Transfer Protocol&amp;#xff09;和RPC&amp;#xff08;Remote Procedure Call Protocol&amp;#xff09;是两种常见的通信协议。然而RPC 和…阅读更多...MongoDB未授权访问mongodb未授权访问漏洞 复现 
MongoDB[//]: # (忙够DB)是一种流行的开源文档数据库管理系统&amp;#xff08;DBMS&amp;#xff09;&amp;#xff0c;基于分布式文件存储的数据库属于NoSQL数据库的一种。 
开启MongoDB服务时不添加任何参数时,默认是没有权限验证的 登录的用户可以通过默认端口…阅读更多...Concat2NodeEncoder（lrgb文件中的encoders文件中的composition.py）该代码实现了一个自定义的节点编码器 Concat2NodeEncoder，用于将两个独立的节点编码器的输出结果连接起来。这个类的设计目的是将两个编码器的功能结合起来，以丰富节点特征的表示。通过将 encoder1 和 encoder2 的输出拼接，可以在保留原始特征的同时，加入其他形式的位置编码…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:54 +0000</pubDate>
    </item>
    <item>
      <title>wpf grid 的用法</title>
      <link>https://www.ppmy.cn/news/1541057.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维wpf grid 的用法news/2025/11/1 1:17:53/WPF中的Grid是一种布局控件，可用于将子控件按照行和列的方式排列。以下是Grid控件的用法：在XAML文件中，添加一个Grid控件：&lt;Grid&gt;
&lt;/Grid&gt;在Grid控件中，添加行和列定义：&lt;Grid&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="Auto"/&gt;&lt;RowDefinition Height="*"/&gt;&lt;/Grid.RowDefinitions&gt;&lt;Grid.ColumnDefinitions&gt;&lt;ColumnDefinition Width="Auto"/&gt;&lt;ColumnDefinition Width="*"/&gt;&lt;/Grid.ColumnDefinitions&gt;
&lt;/Grid&gt;在上面的例子中，Grid定义了两行和两列。行和列可以使用特定的值来定义大小，如"Auto"表示根据内容自动调整大小，"*"表示占用剩余空间的大小。将子控件添加到Grid中，并设置其位置：&lt;Grid&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="Auto"/&gt;&lt;RowDefinition Height="*"/&gt;&lt;/Grid.RowDefinitions&gt;&lt;Grid.ColumnDefinitions&gt;&lt;ColumnDefinition Width="Auto"/&gt;&lt;ColumnDefinition Width="*"/&gt;&lt;/Grid.ColumnDefinitions&gt;&lt;Button Grid.Row="0" Grid.Column="0" Content="Button 1"/&gt;&lt;Button Grid.Row="0" Grid.Column="1" Content="Button 2"/&gt;&lt;Button Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Content="Button 3"/&gt;
&lt;/Grid&gt;在上面的例子中，三个Button控件被添加到Grid中，并通过Grid.Row和Grid.Column属性来设置它们的位置。Grid.ColumnSpan属性可以指定控件跨越的列数。通过Grid控件，可以很灵活地布局子控件，使其按照行和列的方式排列，以实现更复杂的布局效果。1、功能最强大，布局最灵活的容器，将区域划分不同大小网格2、主要属性配置:基本属性:行定义:RowDefinitions-&gt;RowDefinition(Height:*/auto/数字)列定义:ColumnDefinitions-&gt;ColumnDefinition(Width:*/auto/数字)尺寸共享:Grid.IsSharedSizeScope="True”配合行/列中的SharedSizeGroup属性附加属性:Grid.Row/Grid.Column3使用场景:无处不在c0下面是我写的一段代码&lt;Window x:Class="kongjian.MainWindow"xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"xmlns:d="http://schemas.microsoft.com/expression/blend/2008"xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"xmlns:local="clr-namespace:kongjian"mc:Ignorable="d"Title="MainWindow" Height="450" Width="800"&gt;&lt;Grid&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="100"&gt;&lt;/RowDefinition&gt;&lt;RowDefinition&gt;&lt;/RowDefinition&gt;&lt;/Grid.RowDefinitions&gt;&lt;Grid Grid.Row="0" Background="red"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition/&gt;&lt;RowDefinition/&gt;&lt;/Grid.RowDefinitions&gt;&lt;Grid.ColumnDefinitions&gt;&lt;ColumnDefinition/&gt;&lt;ColumnDefinition/&gt;&lt;/Grid.ColumnDefinitions&gt;&lt;Border Background="Green" Width="20" Height="10" Grid.Column="2" Grid.RowSpan="2"/&gt;&lt;GridSplitter HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="20" Background="red"/&gt;&lt;/Grid&gt;&lt;Grid Grid.Row="1" Background="Green"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition/&gt;&lt;RowDefinition/&gt;&lt;RowDefinition/&gt;&lt;/Grid.RowDefinitions&gt;&lt;Grid.ColumnDefinitions&gt;&lt;ColumnDefinition/&gt;&lt;ColumnDefinition/&gt;&lt;/Grid.ColumnDefinitions&gt;&lt;/Grid&gt;&lt;/Grid&gt;
&lt;/Window&gt;界面如下：http://www.ppmy.cn/news/1541057.html相关文章Uptime Kuma: 全面的开源网站监控解决方案在当今数字化时代,网站和服务的可用性对于企业和个人来说至关重要。Uptime Kuma作为一款功能强大的开源监控工具,为用户提供了全面的网站和服务监控解决方案。本文将深入介绍Uptime Kuma的特性、安装方法以及更新维护,帮助读者了解这一优秀的监控工具。 
主要特性 
Uptime Kuma…阅读更多...dbt-codegen: dbt自动生成模板代码dbt项目采用工程化思维&amp;#xff0c;数据模型分层实现&amp;#xff0c;支持描述模型文档和测试&amp;#xff0c;非常适合大型数据工程项目。但也需要用户编写大量yaml描述文件&amp;#xff0c;这个过程非常容易出错且无聊。主要表现&amp;#xff1a; 
手工为dbt模型编写yaml文件&amp;#xff0c;这过…阅读更多...【Golang】Go语言web框架Gin响应客户端有哪些方式✨✨ 欢迎大家来到景天科技苑✨✨ 
&amp;#x1f388;&amp;#x1f388; 养成好习惯&amp;#xff0c;先赞后看哦~&amp;#x1f388;&amp;#x1f388; &amp;#x1f3c6; 作者简介&amp;#xff1a;景天科技苑 &amp;#x1f3c6;《头衔》&amp;#xff1a;大厂架构师&amp;#xff0c;华为云开发者社区专家博主&amp;#xff0c;…阅读更多...基于SpringBoot的旅游网站的设计与实现作者&amp;#xff1a;计算机学长阿伟 开发技术&amp;#xff1a;SpringBoot、SSM、Vue、MySQL、ElementUI等&amp;#xff0c;“文末源码”。 系统展示 【2024最新】基于JavaSpringBootVueMySQL的&amp;#xff0c;前后端分离。 
开发语言&amp;#xff1a;Java数据库&amp;#xff1a;MySQL技术&amp;#xff1a;…阅读更多...HTTP和RPC通信协议在软件开发中&amp;#xff0c;通信协议扮演着关键的角色&amp;#xff0c;它们定义了不同系统或组件之间进行通信的规则和方式。HTTP&amp;#xff08;Hypertext Transfer Protocol&amp;#xff09;和RPC&amp;#xff08;Remote Procedure Call Protocol&amp;#xff09;是两种常见的通信协议。然而RPC 和…阅读更多...MongoDB未授权访问mongodb未授权访问漏洞 复现 
MongoDB[//]: # (忙够DB)是一种流行的开源文档数据库管理系统&amp;#xff08;DBMS&amp;#xff09;&amp;#xff0c;基于分布式文件存储的数据库属于NoSQL数据库的一种。 
开启MongoDB服务时不添加任何参数时,默认是没有权限验证的 登录的用户可以通过默认端口…阅读更多...Concat2NodeEncoder（lrgb文件中的encoders文件中的composition.py）该代码实现了一个自定义的节点编码器 Concat2NodeEncoder，用于将两个独立的节点编码器的输出结果连接起来。这个类的设计目的是将两个编码器的功能结合起来，以丰富节点特征的表示。通过将 encoder1 和 encoder2 的输出拼接，可以在保留原始特征的同时，加入其他形式的位置编码…阅读更多...基于MATLAB的实现垃圾分类Matlab源码【图像识别】基于卷积神经⽹络&amp;#xff08;CNN&amp;#xff09;实现垃圾分类Matlab 
源码 
⼀、垃圾分类 
如何通过垃圾分类管理&amp;#xff0c;最⼤限度地实现垃圾资源利⽤&amp;#xff0c;减少垃圾处置量&amp;#xff0c;改善⽣存环境质量&amp;#xff0c;是当前世界各国共同关注的迫切问题之⼀。…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:53 +0000</pubDate>
    </item>
    <item>
      <title>Uptime Kuma: 全面的开源网站监控解决方案</title>
      <link>https://www.ppmy.cn/news/1541056.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Uptime Kuma: 全面的开源网站监控解决方案news/2025/11/1 1:17:52/在当今数字化时代,网站和服务的可用性对于企业和个人来说至关重要。Uptime Kuma作为一款功能强大的开源监控工具,为用户提供了全面的网站和服务监控解决方案。本文将深入介绍Uptime Kuma的特性、安装方法以及更新维护,帮助读者了解这一优秀的监控工具。主要特性Uptime Kuma提供了丰富的功能,满足各种监控需求:多协议监控:支持HTTP(s)、TCP、Ping、DNS记录、Push等多种监控方式。关键词和JSON查询监控:可以监控网页内容中的特定关键词或JSON响应。丰富的通知渠道:支持Telegram、Discord、Slack等90多种通知服务。响应式界面:提供美观、快速的用户界面,操作体验出色。多语言支持:适应不同地区用户的需求。状态页面:可创建多个状态页面,并支持自定义域名映射。监控图表:提供Ping图表等可视化数据展示。SSL证书信息:监控并展示网站SSL证书的详细信息。代理支持:可通过代理进行监控,增加灵活性。双因素认证:提高账户安全性。短间隔监控:支持20秒间隔的频繁监控。这些特性使Uptime Kuma成为一个全面而强大的监控工具,能够满足个人用户到企业级用户的各种需求。安装方法Uptime Kuma提供了多种安装方式,以适应不同用户的需求。Docker安装对于喜欢使用容器化部署的用户,Docker安装是最简单的方式:docker run -d --restarthttp://www.ppmy.cn/news/1541056.html相关文章dbt-codegen: dbt自动生成模板代码dbt项目采用工程化思维&amp;#xff0c;数据模型分层实现&amp;#xff0c;支持描述模型文档和测试&amp;#xff0c;非常适合大型数据工程项目。但也需要用户编写大量yaml描述文件&amp;#xff0c;这个过程非常容易出错且无聊。主要表现&amp;#xff1a; 
手工为dbt模型编写yaml文件&amp;#xff0c;这过…阅读更多...【Golang】Go语言web框架Gin响应客户端有哪些方式✨✨ 欢迎大家来到景天科技苑✨✨ 
&amp;#x1f388;&amp;#x1f388; 养成好习惯&amp;#xff0c;先赞后看哦~&amp;#x1f388;&amp;#x1f388; &amp;#x1f3c6; 作者简介&amp;#xff1a;景天科技苑 &amp;#x1f3c6;《头衔》&amp;#xff1a;大厂架构师&amp;#xff0c;华为云开发者社区专家博主&amp;#xff0c;…阅读更多...基于SpringBoot的旅游网站的设计与实现作者&amp;#xff1a;计算机学长阿伟 开发技术&amp;#xff1a;SpringBoot、SSM、Vue、MySQL、ElementUI等&amp;#xff0c;“文末源码”。 系统展示 【2024最新】基于JavaSpringBootVueMySQL的&amp;#xff0c;前后端分离。 
开发语言&amp;#xff1a;Java数据库&amp;#xff1a;MySQL技术&amp;#xff1a;…阅读更多...HTTP和RPC通信协议在软件开发中&amp;#xff0c;通信协议扮演着关键的角色&amp;#xff0c;它们定义了不同系统或组件之间进行通信的规则和方式。HTTP&amp;#xff08;Hypertext Transfer Protocol&amp;#xff09;和RPC&amp;#xff08;Remote Procedure Call Protocol&amp;#xff09;是两种常见的通信协议。然而RPC 和…阅读更多...MongoDB未授权访问mongodb未授权访问漏洞 复现 
MongoDB[//]: # (忙够DB)是一种流行的开源文档数据库管理系统&amp;#xff08;DBMS&amp;#xff09;&amp;#xff0c;基于分布式文件存储的数据库属于NoSQL数据库的一种。 
开启MongoDB服务时不添加任何参数时,默认是没有权限验证的 登录的用户可以通过默认端口…阅读更多...Concat2NodeEncoder（lrgb文件中的encoders文件中的composition.py）该代码实现了一个自定义的节点编码器 Concat2NodeEncoder，用于将两个独立的节点编码器的输出结果连接起来。这个类的设计目的是将两个编码器的功能结合起来，以丰富节点特征的表示。通过将 encoder1 和 encoder2 的输出拼接，可以在保留原始特征的同时，加入其他形式的位置编码…阅读更多...基于MATLAB的实现垃圾分类Matlab源码【图像识别】基于卷积神经⽹络&amp;#xff08;CNN&amp;#xff09;实现垃圾分类Matlab 
源码 
⼀、垃圾分类 
如何通过垃圾分类管理&amp;#xff0c;最⼤限度地实现垃圾资源利⽤&amp;#xff0c;减少垃圾处置量&amp;#xff0c;改善⽣存环境质量&amp;#xff0c;是当前世界各国共同关注的迫切问题之⼀。…阅读更多...使用CSS3实现loading效果效果展示 具体实现 
示例完全是使用 htmlCSS3 实现&amp;#xff0c;主要是用到了 CSS3 的animate和animate-delay属性。 
html 代码如下&amp;#xff1a; 
&lt;div class"container"&gt;&lt;span style"--i:0"&gt;&lt;/span&gt;&lt;span style"--i:1"&gt;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:52 +0000</pubDate>
    </item>
    <item>
      <title>dbt-codegen: dbt自动生成模板代码</title>
      <link>https://www.ppmy.cn/news/1541055.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维dbt-codegen: dbt自动生成模板代码news/2025/11/1 1:17:50/dbt项目采用工程化思维，数据模型分层实现，支持描述模型文档和测试，非常适合大型数据工程项目。但也需要用户编写大量yaml描述文件，这个过程非常容易出错且无聊。主要表现：手工为dbt模型编写yaml文件，这过程可能会导致错误和拼写失误。手工编写yaml文件非常耗时，特别是在包括很多模型的大型项目中。当数据模型发生变化时，更新yaml文件可能是一件令人头痛的事情。确保所有yaml文件看起来一致，并遵循相同的最佳实践具有挑战性。dbt-codegen简介dbt-lab提供了 dbt-codegen工具包，实现一组宏，用于dbt代码并在命令行中输出结果。Codegen旨在为dbt模型自动生成YAML文件，解决与手动创建文件的痛点挑战。Codegen是如何解决这些问题的：Codegen自动化YAML文件创建的整个过程。它基于dbt模型生成YAML配置，减少了手动干预的需要。这大大节省了时间，并最大限度地减少了错误的风险。通过自动生成YAML文件，Codegen确保了所有dbt模型的一致性和标准化。它遵循预定义的规则和模板，消除了配置差异的可能性。Codegen具有高度可扩展性，允许你有效地管理许多dbt模型。随着数据转换需求的增长，Codegen适应规模，为处理众多模型和配置提供无缝解决方案。实现过程如下：Codegen通过分析dbt模型并提取相关信息以生成YAML文件，过程包括：Codegen分析dbt模型，提取列名、数据类型和关系等细节。然后基于分析结果生成YAML配置，包括模型、列和关系。Codegen应用预定义模板，确保标准化配置和一致性，最终输出是一组可以在dbt项目中使用的YAML文件配置信息。完整功能列表：generate_source (source)generate_base_model (source)create_base_models (source)base_model_creation (source)generate_model_yaml (source)generate_model_import_ctes (source)dbt-codegen实战我们看到该包可用于为源和模型列表生成YAML，此外还可以用于为源的基本模型生成SQL。下面介绍几个常用的代码生成功能。读者可以在上文介绍的入门项目中测试。安装packages:-package:dbt-labs/dbt_utilsversion:1.3.0-package:dbt-labs/codegenversion:0.12.1运行dbt deps安装包。安装成功后，包文件将被安装到dbt_packages目录下。示例1： 生成schema.yml在命令行运行，直接输出到控制台：dbt run-operation generate_source --args'schema_name: shop'# 多个参数dbt run-operation generate_source --args'{"schema_name": "shop", "database_name": "raw", "table_names":["table_1", "table_2"]}'也可以直接输出到文件：dbt --quiet run-operation generate_source --args'{"table_names": ["orders"]}'&gt;models/staging/jaffle_shop/_sources.yml还可以编码方式执行，拷贝宏代码至DBT项目中, 因为是一次性任务，可以放置analysis 目录下, 然后编译代码：{{ codegen.generate_source('raw_jaffle_shop') }}
# 包括多个参数
{{ codegen.generate_source(schema_name= 'jaffle_shop', database_name= 'raw') }}生成结果大致如下：version:2sources:-name:shopdatabase:rawschema:shoptables:-name:customersdescription:""-name:ordersdescription:""-name:paymentsdescription:""示例2： 生成模型yaml文件model_names(required): The model(s) you wish to generate YAML for.upstream_descriptions(optional, default=False): Whether you want to include descriptions for identical column names from upstream models and sources.include_data_types(optional, default=True): Whether you want to add data types to your model column definitions.dbt run-operation generate_model_yaml --args '{"model_names": ["customers"]}'生成结果：version:2models:-name:customersdescription:""columns:-name:customer_iddata_type:integerdescription:""-name:customer_namedata_type:textdescription:""当然也可以在analyse模型中编码方式生成：{{ codegen.generate_model_yaml(model_names=['customers']
) }}还可以使用辅助函数代码。Get_models并指定一个目录和/或前缀，以获得所有匹配模型的列表，这些模型将被传递到model_names列表中。{% set models_to_generate = codegen.get_models(directory='marts', prefix='fct_') %}
{{ codegen.generate_model_yaml(model_names = models_to_generate
) }}助手方法可以在源码中找到，请参考下面截图：总结本文介绍dbt-codegen工具，它可以帮助我们快速生成dbt模型描述文件、生成源等代码。我们介绍多种生成方式，包括命令行和分析模型代码等，有想法的读者还可以考虑编写vscode插件实现。更多示例及详细文档，可以参照官方文档。http://www.ppmy.cn/news/1541055.html相关文章【Golang】Go语言web框架Gin响应客户端有哪些方式✨✨ 欢迎大家来到景天科技苑✨✨ 
&amp;#x1f388;&amp;#x1f388; 养成好习惯&amp;#xff0c;先赞后看哦~&amp;#x1f388;&amp;#x1f388; &amp;#x1f3c6; 作者简介&amp;#xff1a;景天科技苑 &amp;#x1f3c6;《头衔》&amp;#xff1a;大厂架构师&amp;#xff0c;华为云开发者社区专家博主&amp;#xff0c;…阅读更多...基于SpringBoot的旅游网站的设计与实现作者&amp;#xff1a;计算机学长阿伟 开发技术&amp;#xff1a;SpringBoot、SSM、Vue、MySQL、ElementUI等&amp;#xff0c;“文末源码”。 系统展示 【2024最新】基于JavaSpringBootVueMySQL的&amp;#xff0c;前后端分离。 
开发语言&amp;#xff1a;Java数据库&amp;#xff1a;MySQL技术&amp;#xff1a;…阅读更多...HTTP和RPC通信协议在软件开发中&amp;#xff0c;通信协议扮演着关键的角色&amp;#xff0c;它们定义了不同系统或组件之间进行通信的规则和方式。HTTP&amp;#xff08;Hypertext Transfer Protocol&amp;#xff09;和RPC&amp;#xff08;Remote Procedure Call Protocol&amp;#xff09;是两种常见的通信协议。然而RPC 和…阅读更多...MongoDB未授权访问mongodb未授权访问漏洞 复现 
MongoDB[//]: # (忙够DB)是一种流行的开源文档数据库管理系统&amp;#xff08;DBMS&amp;#xff09;&amp;#xff0c;基于分布式文件存储的数据库属于NoSQL数据库的一种。 
开启MongoDB服务时不添加任何参数时,默认是没有权限验证的 登录的用户可以通过默认端口…阅读更多...Concat2NodeEncoder（lrgb文件中的encoders文件中的composition.py）该代码实现了一个自定义的节点编码器 Concat2NodeEncoder，用于将两个独立的节点编码器的输出结果连接起来。这个类的设计目的是将两个编码器的功能结合起来，以丰富节点特征的表示。通过将 encoder1 和 encoder2 的输出拼接，可以在保留原始特征的同时，加入其他形式的位置编码…阅读更多...基于MATLAB的实现垃圾分类Matlab源码【图像识别】基于卷积神经⽹络&amp;#xff08;CNN&amp;#xff09;实现垃圾分类Matlab 
源码 
⼀、垃圾分类 
如何通过垃圾分类管理&amp;#xff0c;最⼤限度地实现垃圾资源利⽤&amp;#xff0c;减少垃圾处置量&amp;#xff0c;改善⽣存环境质量&amp;#xff0c;是当前世界各国共同关注的迫切问题之⼀。…阅读更多...使用CSS3实现loading效果效果展示 具体实现 
示例完全是使用 htmlCSS3 实现&amp;#xff0c;主要是用到了 CSS3 的animate和animate-delay属性。 
html 代码如下&amp;#xff1a; 
&lt;div class"container"&gt;&lt;span style"--i:0"&gt;&lt;/span&gt;&lt;span style"--i:1"&gt;…阅读更多...HarmonyOS NEXT 应用开发实战(六、组件导航Navigation使用详解)在鸿蒙应用开发中&amp;#xff0c;Navigation 组件是实现界面间导航的重要工具。本文将介绍如何使用 Navigation 组件实现页面跳转及参数传递&amp;#xff0c;确保你能轻松构建具有良好用户体验的应用。 当前HarmonyOS支持两套路由机制&amp;#xff08;Navigation和Router&amp;#xff09;&amp;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:51 +0000</pubDate>
    </item>
    <item>
      <title>【Golang】Go语言web框架Gin响应客户端有哪些方式</title>
      <link>https://www.ppmy.cn/news/1541054.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【Golang】Go语言web框架Gin响应客户端有哪些方式news/2025/11/1 1:17:49/✨✨ 欢迎大家来到景天科技苑✨✨🎈🎈 养成好习惯，先赞后看哦~🎈🎈🏆 作者简介：景天科技苑🏆《头衔》：大厂架构师，华为云开发者社区专家博主，阿里云开发者社区专家博主，CSDN全栈领域优质创作者，掘金优秀博主，51CTO博客专家等。🏆《博客》：Python全栈，Golang开发，PyQt5和Tkinter桌面开发，小程序开发，人工智能，js逆向，App逆向，网络系统安全，数据分析，Django，fastapi，flask等框架，云原生K8S，linux，shell脚本等实操经验，网站搭建，数据库等分享。所属的专栏：Go语言开发零基础到高阶实战景天的主页：景天科技苑文章目录Gin框架响应客户端方式一、响应html页面1、我们首先定义一个存放模板文件的`templates`文件夹2、让程序进行页面渲染和加载3、通过请求来响应页面4、启动测试5、静态文件处理二、响应字符串数据三、响应类型为JSON1. 返回普通数据类型2. 返回结构体(1) 不带JSON标签的结构体(2) 带JSON标签的结构体(3) 忽略某些字段(4) 返回map(5) 返回结构体切片四、响应类型为XML和YAML1. 响应类型为XML2. 响应类型为YAMLGin框架响应客户端方式Gin是一个用Go语言编写的web框架。它是一个类似于martini但拥有更好性能的API框架, 由于使用了httprouter，速度提高了近40倍。如果你是性能和高效的追求者, 你会爱上Gin。Gin框架支持多种响应类型，包括字符串、JSON、XML和YAML等。一、响应html页面响应页面，就跟我们直接用http编程时的模板渲染差不多1、我们首先定义一个存放模板文件的templates文件夹然后在其内部按照业务分别定义一个posts文件夹和一个users文件夹。 两个文件夹中分别有posts/posts.html文件和users/users.html文件。users/users.html&lt;!DOCTYPEhtml&gt;&lt;htmllang="en"&gt;&lt;head&gt;&lt;metacharset="UTF-8"&gt;&lt;title&gt;我的Go页面&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;users 感谢大家来到景天科技苑 Go语言全栈课&lt;/h1&gt;获取传入的数据：
{{.msg}}&lt;/body&gt;&lt;/html&gt;posts/posts.html&lt;!DOCTYPEhtml&gt;&lt;htmllang="en"&gt;&lt;head&gt;&lt;metacharset="UTF-8"&gt;&lt;title&gt;我的Go页面&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;posts 感谢大家来到景天科技苑 Go语言全栈课&lt;/h1&gt;获取传入的数据：
{{.msg}}&lt;/body&gt;&lt;/html&gt;2、让程序进行页面渲染和加载Gin框架中使用 LoadHTMLGlob()或者 LoadHTMLFiles()方法进行HTML模板渲染LoadHTMLGlob(pattern string)：这个方法接受一个模式（pattern），通常是一个通配符（如"*.html"），用于匹配目录中的所有HTML模板文件。它会加载指定目录下所有匹配该模式的文件作为模板。这种方式适合于项目中模板文件较多，且都存放在同一个目录下的情况。LoadHTMLFiles(files …string)：这个方法接受一个文件名列表，你可以显式地指定要加载的HTML模板文件。它允许你加载项目中分散在不同目录的模板文件，或者只加载特定的几个模板文件。这种方式提供了更细粒度的控制，你可以精确选择哪些模板文件被加载。//指定html模版路径，这个方法接受一个模式（pattern），通常是一个通配符（如"*.html"），用于匹配目录中的所有HTML模板文件。// func (engine *Engine) LoadHTMLGlob(pattern string)ginServer.LoadHTMLGlob("templates/*/*")//使用ginServer.LoadHTMLFiles() 这个方法接受一个文件名列表，你可以显式地指定要加载的HTML模板文件。// func (engine *Engine) LoadHTMLFiles(files ...string)//这种方式需要把文件名都列出来//ginServer.LoadHTMLFiles("templates/posts/posts.html", "templates/users/posts.html")// localhost:8088/hello// 处理请求的函数 *gin.ContextginServer.GET("/posts/index",func(c*gin.Context){//响应html页面使用c.HTML()c.HTML(http.StatusOK,"posts.html",gin.H{"msg":"这是后台posts路径返回的数据"})})//再写个路径ginServer.GET("/users/index",func(c*gin.Context){//响应html页面使用c.HTML()c.HTML(http.StatusOK,"users.html",gin.H{"msg":"这是后台users路径返回的数据"})})3、通过请求来响应页面使用c.HTML()方法，并需要加载HTML模板文件。packagemainimport("github.com/gin-gonic/gin""net/http")funcmain(){//以生产模式运行//gin.SetMode(gin.ReleaseMode)// 创建gin服务，创建一个默认的路由引擎ginServer。然后可以根据ginServer.GET，ginServer.ROST，ginServer.DELETE等内置函数处理客户端发来的http请求。ginServer:=gin.Default()//指定html模版路径，这个方法接受一个模式（pattern），通常是一个通配符（如"*.html"），用于匹配目录中的所有HTML模板文件。// func (engine *Engine) LoadHTMLGlob(pattern string)ginServer.LoadHTMLGlob("templates/*")//使用ginServer.LoadHTMLFiles() 这个方法接受一个文件名列表，你可以显式地指定要加载的HTML模板文件。// func (engine *Engine) LoadHTMLFiles(files ...string)//这种方式需要把文件名都列出来//ginServer.LoadHTMLFiles("templates/posts/index.html", "templates/users/index.html")// localhost:8088/hello// 处理请求的函数 *gin.ContextginServer.GET("/posts/index",func(c*gin.Context){//响应html页面使用c.HTML()c.HTML(http.StatusOK,"index.tmpl",gin.H{"msg":"这是后台posts路径返回的数据"})})//再写个路径ginServer.GET("/users/index",func(c*gin.Context){//响应html页面使用c.HTML()c.HTML(http.StatusOK,"index.tmpl",gin.H{"msg":"这是后台users路径返回的数据"})})// 启动HTTP服务,可以修改端口。默认是8080端口err:=ginServer.Run(":8088")iferr!=nil{return}}4、启动测试5、静态文件处理当我们渲染的HTML文件中引用了静态文件时，我们只需要按照以下方式在渲染页面前调用gin.Static方法即可。ginServer.Static(url string, path string)url：URL前缀，客户端通过这个前缀来访问静态文件。path：静态文件所在的目录路径。Gin 会将这个目录下的文件映射到指定的URL前缀下。文件结构packagemainimport("github.com/gin-gonic/gin""net/http")funcmain(){//以生产模式运行//gin.SetMode(gin.ReleaseMode)// 创建gin服务，创建一个默认的路由引擎ginServer。然后可以根据ginServer.GET，ginServer.ROST，ginServer.DELETE等内置函数处理客户端发来的http请求。ginServer:=gin.Default()//指定html模版路径，这个方法接受一个模式（pattern），通常是一个通配符（如"*.html"），用于匹配目录中的所有HTML模板文件。// func (engine *Engine) LoadHTMLGlob(pattern string)//ginServer.LoadHTMLGlob("templates/*/*")//使用ginServer.LoadHTMLFiles() 这个方法接受一个文件名列表，你可以显式地指定要加载的HTML模板文件。// func (engine *Engine) LoadHTMLFiles(files ...string)//这种方式需要把文件名都列出来ginServer.LoadHTMLFiles("templates/posts/posts.html","templates/users/users.html")// 处理请求的函数 *gin.ContextginServer.GET("/posts/index",func(c*gin.Context){//响应html页面使用c.HTML()c.HTML(http.StatusOK,"posts.html",gin.H{"msg":"这是后台posts路径返回的数据"})})//再写个路径ginServer.GET("/users/index",func(c*gin.Context){//响应html页面使用c.HTML()c.HTML(http.StatusOK,"users.html",gin.H{"msg":"这是后台users路径返回的数据"})})// 静态资源//引入css样式文件 这样需要访问静态资源的时候只需要在域名后面加上/static   就能访问当前staticData目录下的静态资源// 例如，如果客户端请求 /static/css/main.css，Gin会尝试从 ./staticData/css/main.css 文件中提供内容。ginServer.Static("/static","staticData")// 启动HTTP服务,可以修改端口。默认是8080端口err:=ginServer.Run(":8088")iferr!=nil{return}}前端html因日css静态文件&lt;!DOCTYPEhtml&gt;&lt;htmllang="en"&gt;&lt;head&gt;&lt;metacharset="UTF-8"&gt;&lt;title&gt;我的Go页面&lt;/title&gt;&lt;linkrel="stylesheet"href="/static/css/main.css"&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;posts 感谢大家来到景天科技苑 Go语言全栈课&lt;/h1&gt;获取传入的数据：
{{.msg}}&lt;/body&gt;&lt;/html&gt;浏览器请求，可见css样式生效二、响应字符串数据Gin框架可以很方便地返回字符串类型的响应。以下是一个返回字符串响应的示例：packagemainimport("net/http""github.com/gin-gonic/gin")funcStringResponse(c*gin.Context){c.String(http.StatusOK,"This is string response")}funcmain(){r:=gin.Default()r.GET("/string",StringResponse)r.Run(":8080")}在这个示例中，定义了一个StringResponse函数，用于处理/string路径的GET请求。当客户端请求这个路径时，服务器会返回字符串"This is string response"。三、响应类型为JSONGin框架支持将结构体或map类型的数据转换为JSON格式的响应。1. 返回普通数据类型packagemainimport("github.com/gin-gonic/gin")funcmain(){// 创建gin服务,创建一个默认的路由引擎ginServer。然后可以根据ginServer.GET，ginServer.ROST，ginServer.DELETE等内置函数处理客户端发来的http请求。ginServer:=gin.Default()// localhost:8088/hello// 处理请求的函数 *gin.ContextginServer.GET("/hello",func(c*gin.Context){// c.JSON：响应给客户端JSON格式的数据 func (c *Context) JSON(code int, obj any)// gin.H : 参数 key value// gin.H 是一个便捷的快捷方式，你也可以直接使用 map[string]interface{} 来代替它c.JSON(200,gin.H{"message":"Hello world!"})})// 启动HTTP服务,可以修改端口。默认是8080端口ginServer.Run(":8088")}2. 返回结构体(1) 不带JSON标签的结构体packagemainimport("github.com/gin-gonic/gin""net/http")funcJsonResponse(c*gin.Context){// 定义的结构体不带json标签typeUserInfostruct{UserNamestringAgeint}user:=UserInfo{UserName:"jingtian",Age:20}// 这里直接将不带标签的结构体返回c.JSON(http.StatusOK,user)}funcmain(){r:=gin.Default()r.GET("/json",JsonResponse)r.Run(":8080")}在这个示例中，定义了一个UserInfo结构体，并将其实例化为user变量。然后，使用c.JSON(http.StatusOK, user)语句将user变量转换为JSON格式的响应返回给客户端。响应的json字段名称就是结构体原本字段名(2) 带JSON标签的结构体有时，我们希望结构体字段在JSON响应中使用不同的名称。这时，可以使用结构体标签（struct tag）来实现。定义结构体的时候，带上json标签，标签可以与结构体字段不一样，这样当我们返回结构体的时候，返回的json字段是标签字段packagemainimport("github.com/gin-gonic/gin""net/http")funcJsonResponse(c*gin.Context){// 定义结构体的时候，带上json标签，标签可以与结构体字段不一样，这样当我们返回结构体的时候，返回的json字段是标签字段typeUserInfostruct{UserNamestring`json:"user_name"`Ageint`json:"age"`}user:=UserInfo{UserName:"景天带标签",Age:20}c.JSON(http.StatusOK,user)}funcmain(){r:=gin.Default()r.GET("/json",JsonResponse)r.Run(":8080")}结构体的字段时username 而我们返回的json字符串中是我们定义的标签user_name在这个示例中，UserInfo结构体的字段使用了json标签，指定了在JSON响应中使用的名称。因此，返回的JSON响应为{“user_name”:“json”,“age”:20}。(3) 忽略某些字段有时，我们可能不希望将结构体的所有字段都包含在JSON响应中。这时，可以使用-标签来忽略某些字段。忽略该字段 使用- 标签 这样，响应的json中就不包含该字段packagemainimport("github.com/gin-gonic/gin""net/http")funcJsonResponse(c*gin.Context){typeUserInfostruct{UserNamestring`json:"user_name"`Ageint`json:"age"`Passwordstring`json:"-"`// 忽略该字段  使用- 标签  这样，响应的json中就不包含该字段}user:=UserInfo{UserName:"景天忽略字段",Age:20,Password:"secret"}c.JSON(http.StatusOK,user)}funcmain(){r:=gin.Default()r.GET("/json",JsonResponse)r.Run(":8080")}在这个示例中，Password字段使用了-标签，因此它不会被包含在JSON响应中。(4) 返回map除了结构体之外，还可以使用map类型的数据来生成JSON响应。packagemainimport("github.com/gin-gonic/gin""net/http")funcJsonResponse(c*gin.Context){// 定义mapdata:=map[string]interface{}{"user_name":"景天map","age":20,}//直接将map返回c.JSON(http.StatusOK,data)}funcmain(){r:=gin.Default()r.GET("/json",JsonResponse)r.Run(":8080")}(5) 返回结构体切片有时候我们需要返回一个切片，里面是一个个的结构体packagemainimport("github.com/gin-gonic/gin")funcmain(){// 创建gin服务ginServer:=gin.Default()// localhost:8080/hello// 处理请求的函数 *gin.ContextginServer.GET("/hello",func(c*gin.Context){//定义结构体typeUserstruct{Usernamestring`json:"username"`Passwordstring`json:"password"`}//定义User类型的切片users:=make([]User,2)//给切片赋值users[0]=User{"景天哥","123456"}users[1]=User{"赵日天","895456"}//响应结构体切片c.JSON(200,users)})// 启动HTTP服务,可以修改端口ginServer.Run(":8088")}四、响应类型为XML和YAML除了JSON之外，Gin框架还支持将数据转换为XML和YAML格式的响应。以下是一些示例：1. 响应类型为XMLpackagemainimport("encoding/xml""github.com/gin-gonic/gin""net/http")funcXmlResponse(c*gin.Context){typeUserInfostruct{XMLName  xml.Name`xml:"user"`UserNamestring`xml:"user_name"`Ageint`xml:"age"`}user:=UserInfo{UserName:"xml",Age:30}// 使用c.XML返回xml格式c.XML(http.StatusOK,user)}funcmain(){r:=gin.Default()r.GET("/xml",XmlResponse)r.Run(":8080")}注意：在这个示例中，需要使用encoding/xml包来处理XML数据。由于篇幅限制，这里省略了导入包的语句。2. 响应类型为YAMLpackagemainimport("github.com/gin-gonic/gin""gopkg.in/yaml.v3""net/http")funcYamlResponse(c*gin.Context){typeUserInfostruct{UserNamestring`yaml:"user_name"`Ageint`yaml:"age"`}user:=UserInfo{UserName:"yaml",Age:40}//yaml序列化// func Marshal(in interface{}) (out []byte, err error)data,err:=yaml.Marshal(user)iferr!=nil{c.JSON(http.StatusInternalServerError,gin.H{"error":err.Error()})return}// 通过c.Data响应为yaml数据c.Data(http.StatusOK,"application/x-yaml",data)}funcmain(){r:=gin.Default()r.GET("/yaml",YamlResponse)r.Run(":8080")}在这个示例中，使用了gopkg.in/yaml.v3包（需要安装这个包）来处理YAML数据。yaml.Marshal(user)函数将user变量转换为YAML格式的字节数组，然后使用c.Data方法将字节数组作为响应返回给客户端。同时，设置了响应头Content-Type为application/x-yaml，以指示客户端这是一个YAML格式的响应。浏览器访问该url就会下载yaml文件http://www.ppmy.cn/news/1541054.html相关文章基于SpringBoot的旅游网站的设计与实现作者&amp;#xff1a;计算机学长阿伟 开发技术&amp;#xff1a;SpringBoot、SSM、Vue、MySQL、ElementUI等&amp;#xff0c;“文末源码”。 系统展示 【2024最新】基于JavaSpringBootVueMySQL的&amp;#xff0c;前后端分离。 
开发语言&amp;#xff1a;Java数据库&amp;#xff1a;MySQL技术&amp;#xff1a;…阅读更多...HTTP和RPC通信协议在软件开发中&amp;#xff0c;通信协议扮演着关键的角色&amp;#xff0c;它们定义了不同系统或组件之间进行通信的规则和方式。HTTP&amp;#xff08;Hypertext Transfer Protocol&amp;#xff09;和RPC&amp;#xff08;Remote Procedure Call Protocol&amp;#xff09;是两种常见的通信协议。然而RPC 和…阅读更多...MongoDB未授权访问mongodb未授权访问漏洞 复现 
MongoDB[//]: # (忙够DB)是一种流行的开源文档数据库管理系统&amp;#xff08;DBMS&amp;#xff09;&amp;#xff0c;基于分布式文件存储的数据库属于NoSQL数据库的一种。 
开启MongoDB服务时不添加任何参数时,默认是没有权限验证的 登录的用户可以通过默认端口…阅读更多...Concat2NodeEncoder（lrgb文件中的encoders文件中的composition.py）该代码实现了一个自定义的节点编码器 Concat2NodeEncoder，用于将两个独立的节点编码器的输出结果连接起来。这个类的设计目的是将两个编码器的功能结合起来，以丰富节点特征的表示。通过将 encoder1 和 encoder2 的输出拼接，可以在保留原始特征的同时，加入其他形式的位置编码…阅读更多...基于MATLAB的实现垃圾分类Matlab源码【图像识别】基于卷积神经⽹络&amp;#xff08;CNN&amp;#xff09;实现垃圾分类Matlab 
源码 
⼀、垃圾分类 
如何通过垃圾分类管理&amp;#xff0c;最⼤限度地实现垃圾资源利⽤&amp;#xff0c;减少垃圾处置量&amp;#xff0c;改善⽣存环境质量&amp;#xff0c;是当前世界各国共同关注的迫切问题之⼀。…阅读更多...使用CSS3实现loading效果效果展示 具体实现 
示例完全是使用 htmlCSS3 实现&amp;#xff0c;主要是用到了 CSS3 的animate和animate-delay属性。 
html 代码如下&amp;#xff1a; 
&lt;div class"container"&gt;&lt;span style"--i:0"&gt;&lt;/span&gt;&lt;span style"--i:1"&gt;…阅读更多...HarmonyOS NEXT 应用开发实战(六、组件导航Navigation使用详解)在鸿蒙应用开发中&amp;#xff0c;Navigation 组件是实现界面间导航的重要工具。本文将介绍如何使用 Navigation 组件实现页面跳转及参数传递&amp;#xff0c;确保你能轻松构建具有良好用户体验的应用。 当前HarmonyOS支持两套路由机制&amp;#xff08;Navigation和Router&amp;#xff09;&amp;…阅读更多...SpringCloud-持久层框架MyBatis Plus的使用与原理详解在现代微服务架构中&amp;#xff0c;SpringCloud 是一个非常流行的解决方案。而在数据库操作层面&amp;#xff0c;MyBatis Plus 作为 MyBatis 的增强工具&amp;#xff0c;能够简化开发&amp;#xff0c;提升效率&amp;#xff0c;特别是在开发企业级应用和分布式系统时尤为有用。本文将详细介绍 MyBat…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:50 +0000</pubDate>
    </item>
    <item>
      <title>基于SpringBoot的旅游网站的设计与实现</title>
      <link>https://www.ppmy.cn/news/1541053.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维基于SpringBoot的旅游网站的设计与实现news/2025/11/1 1:17:48/作者：计算机学长阿伟开发技术：SpringBoot、SSM、Vue、MySQL、ElementUI等，“文末源码”。系统展示【2024最新】基于Java+SpringBoot+Vue+MySQL的，前后端分离。开发语言：Java数据库：MySQL技术：SpringBoot、Vue、Mybaits Plus、ELementUI工具：IDEA/Ecilpse、Navicat、Maven界面效果后台系统部分页面效果前台系统部分页面效果项目描述这是一个旅游网站的设计布局，其主要功能是为用户提供全面的旅游服务。整个网站以蓝色为主色调，设计简洁大方，易于用户操作。首页作为入口，展示了网站的核心功能和服务。个人中心则提供了用户的个人信息管理功能，方便用户随时查看和修改自己的资料。用户管理模块则负责对用户进行管理和审核，确保网站的安全性。线路分类管理、旅游线路管理和最新线路管理则共同构成了网站的旅游线路服务，为用户提供丰富多样的旅游线路选择和最新的线路信息。系统管理模块负责网站的日常维护和运营，确保网站的稳定性和可靠性。订单管理则为用户提供了便捷的订单管理功能，让用户可以轻松管理自己的旅游订单。功能介绍首页：展示网站的核心功能和服务，方便用户快速了解网站。个人中心：提供用户的个人信息管理功能，包括查看和修改资料等。用户管理：对用户进行管理和审核，确保网站的安全性。线路分类管理：对旅游线路进行分类管理，方便用户查找和选择。旅游线路管理：提供丰富的旅游线路选择，满足用户的旅游需求。最新线路管理：展示最新的旅游线路信息，让用户随时掌握最新的旅游动态。系统管理：负责网站的日常维护和运营，确保网站的稳定性和可靠性。订单管理：提供便捷的订单管理功能，让用户可以轻松管理自己的旅游订单。获取源码点赞关注、私信具体名称、源码不免费哦！http://www.ppmy.cn/news/1541053.html相关文章HTTP和RPC通信协议在软件开发中&amp;#xff0c;通信协议扮演着关键的角色&amp;#xff0c;它们定义了不同系统或组件之间进行通信的规则和方式。HTTP&amp;#xff08;Hypertext Transfer Protocol&amp;#xff09;和RPC&amp;#xff08;Remote Procedure Call Protocol&amp;#xff09;是两种常见的通信协议。然而RPC 和…阅读更多...MongoDB未授权访问mongodb未授权访问漏洞 复现 
MongoDB[//]: # (忙够DB)是一种流行的开源文档数据库管理系统&amp;#xff08;DBMS&amp;#xff09;&amp;#xff0c;基于分布式文件存储的数据库属于NoSQL数据库的一种。 
开启MongoDB服务时不添加任何参数时,默认是没有权限验证的 登录的用户可以通过默认端口…阅读更多...Concat2NodeEncoder（lrgb文件中的encoders文件中的composition.py）该代码实现了一个自定义的节点编码器 Concat2NodeEncoder，用于将两个独立的节点编码器的输出结果连接起来。这个类的设计目的是将两个编码器的功能结合起来，以丰富节点特征的表示。通过将 encoder1 和 encoder2 的输出拼接，可以在保留原始特征的同时，加入其他形式的位置编码…阅读更多...基于MATLAB的实现垃圾分类Matlab源码【图像识别】基于卷积神经⽹络&amp;#xff08;CNN&amp;#xff09;实现垃圾分类Matlab 
源码 
⼀、垃圾分类 
如何通过垃圾分类管理&amp;#xff0c;最⼤限度地实现垃圾资源利⽤&amp;#xff0c;减少垃圾处置量&amp;#xff0c;改善⽣存环境质量&amp;#xff0c;是当前世界各国共同关注的迫切问题之⼀。…阅读更多...使用CSS3实现loading效果效果展示 具体实现 
示例完全是使用 htmlCSS3 实现&amp;#xff0c;主要是用到了 CSS3 的animate和animate-delay属性。 
html 代码如下&amp;#xff1a; 
&lt;div class"container"&gt;&lt;span style"--i:0"&gt;&lt;/span&gt;&lt;span style"--i:1"&gt;…阅读更多...HarmonyOS NEXT 应用开发实战(六、组件导航Navigation使用详解)在鸿蒙应用开发中&amp;#xff0c;Navigation 组件是实现界面间导航的重要工具。本文将介绍如何使用 Navigation 组件实现页面跳转及参数传递&amp;#xff0c;确保你能轻松构建具有良好用户体验的应用。 当前HarmonyOS支持两套路由机制&amp;#xff08;Navigation和Router&amp;#xff09;&amp;…阅读更多...SpringCloud-持久层框架MyBatis Plus的使用与原理详解在现代微服务架构中&amp;#xff0c;SpringCloud 是一个非常流行的解决方案。而在数据库操作层面&amp;#xff0c;MyBatis Plus 作为 MyBatis 的增强工具&amp;#xff0c;能够简化开发&amp;#xff0c;提升效率&amp;#xff0c;特别是在开发企业级应用和分布式系统时尤为有用。本文将详细介绍 MyBat…阅读更多...C# OnnxRuntime yolo11 pest detection目录 
介绍 
效果 
模型信息 
项目 
代码 
下载 介绍 
官网地址&amp;#xff1a;GitHub - ultralytics/ultralytics: Ultralytics YOLO11 &amp;#x1f680; 
YoloV11&amp;#xff08;You Only Look Once V11&amp;#xff09;是一种计算机视觉算法&amp;#xff0c;用于目标检测。它是由 Joseph Redm…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:48 +0000</pubDate>
    </item>
    <item>
      <title>HTTP和RPC通信协议</title>
      <link>https://www.ppmy.cn/news/1541052.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维HTTP和RPC通信协议news/2025/11/1 1:17:47/在软件开发中，通信协议扮演着关键的角色，它们定义了不同系统或组件之间进行通信的规则和方式。HTTP（Hypertext Transfer Protocol）和RPC（Remote Procedure Call Protocol）是两种常见的通信协议。然而RPC 和 HTTP 并不是同一个维度的两个概念。只不过都可以作为远程调用的，所以经常拿来对比。HTTPHTTP被译为超文本传输协议，就是一种传输协议。HTTP工作原理HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。以下是 HTTP 请求/响应的步骤：客户端连接到Web服务器一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如，http://www.baidu.com。发送HTTP请求通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。服务器接受请求并返回HTTP响应Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。释放连接TCP连接若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;客户端浏览器解析HTML内容客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：1. 浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;2. 解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;3. 浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;4. 服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;5. 释放 TCP连接;6. 浏览器将该 html 文本并显示内容;RPCRPC 被译为远程过程调用。一种解释：RPC 本质上不算是协议，而是一种调用方式，而像 gRPC 和 Thrift 这样的具体实现，才是协议，它们是实现了 RPC 调用的协议。要想实现 RPC 通常需要包含传输协议和序列化协议的实现。一个通俗的描述是：客户端在不知道调用细节的情况下，调用存在于远程计算机上的某个对象，就像调用本地应用程序中的对象一样。比较正式的描述是：一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC基于TCP协议，客服端与服务端需要进行三次握手完成可靠连接，第四步进行数据传输。因为TCP是数据传输层，传输协议需要服务器统一编写，进行二进制传输，依赖序列化和反序列化规则，对于大部分应用需要灵活变动数据则不适用，RPC常用于Socket连接或一些基本不变动的传输格式数据，减少数据变动带来的开发成本。建立Socket连接至少需要一对套接字，其中一个运行于客户端，称为ClientSocket ，另一个运行于服务器端，称为ServerSocket ，套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。另外一种解释：RPC是一种进程间通信方式，是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。通俗的说法就是：比如说现在有两台服务器A和B，一个应用部署在A服务器上，另一个应用部署在B服务器上，如果A应用想要调用B应用提供的方法，由于他们不在一台机器下，也就是说它们不在一个JVM内存空间中，是无法直接调用的，需要通过网络进行调用，那这个调用过程就叫做RPC。RPC两个核心模块：通讯，序列化。注意：无论是何种类型的数据，最终都需要序列化转换成二进制流在网络上进行传输，数据的发送方需要将对象序列化转换为二进制流，而数据的接收方则需要把二进制流反序列化为对象。RPC框架在RPC框架中主要有三个角色：Provider、Consumer和Registry。如下图所示：​Server：暴露服务的服务提供方；Client：调用远程服务的服务消费方；Registry：服务注册与发现的注册中心。实现RPC需要用到的技术一个成熟的RPC框架需要考虑的问题有很多，这里只介绍实现一个远程调用需要用到的基本技术，感兴趣的朋友可以找一些开源的RPC框架代码来看下。动态代理生成client stub和server stub需要用到Java动态代理技术，我们可以使用JDK原生的动态代理机制，可以使用一些开源字节码工具框架，如：CgLib、Javassist等。序列化为了能在网络上传输和接收Java对象，我们需要对它进行序列化和反序列化操作。可以使用Java原生的序列化机制，但是效率非常低，推荐使用一些开源的、成熟的序列化技术，例如：protobuf、Thrift、hessian、Kryo、Msgpack。NIO当前很多RPC框架都直接基于netty这一IO通信框架，比如阿里巴巴的HSF、dubbo，Hadoop Avro，推荐使用Netty作为底层通信框架。服务注册中心可选技术：Redis、Zookeeper、ConsulRPC和HTTP的区别方式相同点不同特性速度难度通信协议应用场景RPC都是客户端发起请求，服务端响应RPC需要满足像调用本地服务一样调用远程服务，也就是对调用过程在API层面进行封装RPC更加透明，对用户方便。RPC需要在API层面进行封装，限制了开发的语言环境RPC速度比HTTP快，底层都是TCP，HTTP消息往往比较臃肿，但是可以采用gzip压缩RPC实现有点儿复杂，HTTP相对比较简单RPC使用二进制协议HTTP都是客户端发起请求，服务端响应Http协议没有这样的要求，因此请求、响应等细节需要我们自己去实现HTTP方式更加灵活，没有规定API和语言，跨语言，跨平台HTTP使用文本协议微服务，强调独立，自治，灵活。RPC限制较多，因此微服务框架中，一般都会采用基于HTTP的rest风格服务最本质的区别，就是 RPC 主要是基于 TCP/IP 协议的，而 HTTP 服务主要是基于 HTTP 协议的。我们都知道 HTTP 协议是在传输层协议 TCP 之上的，从效率来看的话，RPC 当然是要更胜一筹啦。调用方式不同：HTTP接口通过URL（Uniform Resource Locator，统一资源定位符，是全球互联网上标识和定位资源的标准格式。URL不仅提供了资源的位置，还可以包含其他信息，比如访问协议、主机名、端口号、路径和查询参数等。它是Web访问的基本组成部分，使得用户可以方便地访问所需的信息）进行调用，RPC接口通过函数调用进行调用。通信方式不同：RPC是一种进程间通信方式。双方建立链接后,一个进程可以直接调用另一个进程的函数。HTTP是一种客户端和服务器之间的请求-响应模式。客户端发送请求,服务器返回响应,两者连接后立即断开。Spring Cloud 远程调用为啥要采用 HTTP，而不是 RPCSpringCloud开启Web服务依赖于内部封装的Tomcat容器，而今信息飞速发展，适应大流量的微服务，采用Tomcat处理HTTP请求，开发者编写json作为资源传输，服务器做出相应的响应，可以更加的灵活处理业务数据，而HTTP协议是跨平台的，符合微服务B/C数据交互的方式，可以的一套服务器对应移动H5、App、小程序提供服务。1.HTTP的跨平台与灵活性HTTP作为互联网上的通用协议，具有天然的跨平台特性。无论是Web应用、移动App、还是小程序，都可以通过HTTP协议与服务器进行通信。在微服务架构中，这种跨平台能力尤为重要，因为它允许一套服务同时支持多种客户端的访问。而RPC虽然能够实现远程调用，但通常基于特定的协议（如TCP），这在一定程度上限制了其跨平台的能力。2.HTTP的易用性与广泛性HTTP协议简单易用，拥有广泛的工具和库支持。开发者可以使用各种现成的HTTP客户端和服务器库来构建微服务系统，无需从头开始实现复杂的通信协议。相比之下，RPC虽然能够提供更高效的远程调用方式，但其实现通常较为复杂，需要开发者编写额外的序列化和反序列化代码，以及处理网络通信的细节。3.SpringCloud的集成优势SpringCloud为开发者提供了一套完整的微服务解决方案，包括服务注册与发现、负载均衡、断路器、智能路由等功能。这些功能大多基于HTTP协议进行通信，使得SpringCloud在集成HTTP服务时具有天然的优势。例如，SpringCloud中的Feign客户端和Zuul网关都是基于HTTP协议实现的，它们能够轻松地与HTTP服务进行交互，而无需额外的配置或转换。4.HTTP的扩展性与标准化HTTP协议具有良好的扩展性，可以通过添加HTTP头或更改请求体来携带额外的信息。这种灵活性使得HTTP能够适应各种复杂的业务需求。同时，HTTP协议也是标准化的，这意味着不同的系统和平台都能够理解和处理HTTP请求和响应。相比之下，RPC协议通常是私有的，不同的RPC框架之间可能存在兼容性问题。结论：微服务强调独立，自治，灵活。RPC限制较多，因此微服务框架中，一般都会采用基于HTTP的rest风格服务。http://www.ppmy.cn/news/1541052.html相关文章MongoDB未授权访问mongodb未授权访问漏洞 复现 
MongoDB[//]: # (忙够DB)是一种流行的开源文档数据库管理系统&amp;#xff08;DBMS&amp;#xff09;&amp;#xff0c;基于分布式文件存储的数据库属于NoSQL数据库的一种。 
开启MongoDB服务时不添加任何参数时,默认是没有权限验证的 登录的用户可以通过默认端口…阅读更多...Concat2NodeEncoder（lrgb文件中的encoders文件中的composition.py）该代码实现了一个自定义的节点编码器 Concat2NodeEncoder，用于将两个独立的节点编码器的输出结果连接起来。这个类的设计目的是将两个编码器的功能结合起来，以丰富节点特征的表示。通过将 encoder1 和 encoder2 的输出拼接，可以在保留原始特征的同时，加入其他形式的位置编码…阅读更多...基于MATLAB的实现垃圾分类Matlab源码【图像识别】基于卷积神经⽹络&amp;#xff08;CNN&amp;#xff09;实现垃圾分类Matlab 
源码 
⼀、垃圾分类 
如何通过垃圾分类管理&amp;#xff0c;最⼤限度地实现垃圾资源利⽤&amp;#xff0c;减少垃圾处置量&amp;#xff0c;改善⽣存环境质量&amp;#xff0c;是当前世界各国共同关注的迫切问题之⼀。…阅读更多...使用CSS3实现loading效果效果展示 具体实现 
示例完全是使用 htmlCSS3 实现&amp;#xff0c;主要是用到了 CSS3 的animate和animate-delay属性。 
html 代码如下&amp;#xff1a; 
&lt;div class"container"&gt;&lt;span style"--i:0"&gt;&lt;/span&gt;&lt;span style"--i:1"&gt;…阅读更多...HarmonyOS NEXT 应用开发实战(六、组件导航Navigation使用详解)在鸿蒙应用开发中&amp;#xff0c;Navigation 组件是实现界面间导航的重要工具。本文将介绍如何使用 Navigation 组件实现页面跳转及参数传递&amp;#xff0c;确保你能轻松构建具有良好用户体验的应用。 当前HarmonyOS支持两套路由机制&amp;#xff08;Navigation和Router&amp;#xff09;&amp;…阅读更多...SpringCloud-持久层框架MyBatis Plus的使用与原理详解在现代微服务架构中&amp;#xff0c;SpringCloud 是一个非常流行的解决方案。而在数据库操作层面&amp;#xff0c;MyBatis Plus 作为 MyBatis 的增强工具&amp;#xff0c;能够简化开发&amp;#xff0c;提升效率&amp;#xff0c;特别是在开发企业级应用和分布式系统时尤为有用。本文将详细介绍 MyBat…阅读更多...C# OnnxRuntime yolo11 pest detection目录 
介绍 
效果 
模型信息 
项目 
代码 
下载 介绍 
官网地址&amp;#xff1a;GitHub - ultralytics/ultralytics: Ultralytics YOLO11 &amp;#x1f680; 
YoloV11&amp;#xff08;You Only Look Once V11&amp;#xff09;是一种计算机视觉算法&amp;#xff0c;用于目标检测。它是由 Joseph Redm…阅读更多...大模型之三十二-语音合成TTS(coqui) 之二 fine-tune在 大模型之三十-语音合成TTS(coqui)[shichaog CSDN]中提到了xttsv2的fine-tune。 
数据情况&amp;#xff1a; 
我是从bilibili up主小Lin说提取了一些视频&amp;#xff0c;然后进行了重新的fine-tune。 
训练结果 
如下图所示&amp;#xff0c;上面波形幅度较大的是xttsv2原始模型的结果&amp;am…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:47 +0000</pubDate>
    </item>
    <item>
      <title>MongoDB未授权访问</title>
      <link>https://www.ppmy.cn/news/1541051.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维MongoDB未授权访问news/2025/11/1 1:17:46/mongodb未授权访问漏洞 复现MongoDB[//]: # (忙够DB)是一种流行的开源文档数据库管理系统（DBMS），基于分布式文件存储的数据库属于NoSQL数据库的一种。开启MongoDB服务时不添加任何参数时,默认是没有权限验证的 登录的用户可以通过默认端口27017无需密码对数据库任意操作（增、删、改、查高危动作）而且可以远程访问数据库漏洞原理未授权访问的根本原因就在于启动Mongodb的时候未设置auth无权限验证Docker开启环境镜像仓库中拉取漏洞镜像docker pull mongo利用此镜像mongo运行一个MongoDB容器，并将容器的27017端口映射到主机的27017端口容器的名称为mongodbdocker run -d -p 27017:27017 --name mongodb mongoIP+端口访问成功将docker开启的27017端口映射在物理机的27917使用下面的命令并且管理员运行netsh interface portproxy add v4tov4 listenport=27917 listenaddress=0.0.0.0 connectport=27017 connectaddress=172.17.0.2MSF使用漏洞扫描模块配置相关信息就能够连接上了，看着很简单 但是我不行啊use auxiliary/scanner/mongodb/mongodb_loginshow  optionsset rhosts  192.168.4.128set  threads  15exploit漏洞修复在admin数据库中增加用户，设置复杂的密码；配置文件/etc/mongod.conf中，设置auth=true;配置文件/etc/mongod.conf中，设置bind_ip=127.0.0.1原始是0.0.0.0 代表允许其他主机连接修改默认端口27019http://www.ppmy.cn/news/1541051.html相关文章Concat2NodeEncoder（lrgb文件中的encoders文件中的composition.py）该代码实现了一个自定义的节点编码器 Concat2NodeEncoder，用于将两个独立的节点编码器的输出结果连接起来。这个类的设计目的是将两个编码器的功能结合起来，以丰富节点特征的表示。通过将 encoder1 和 encoder2 的输出拼接，可以在保留原始特征的同时，加入其他形式的位置编码…阅读更多...基于MATLAB的实现垃圾分类Matlab源码【图像识别】基于卷积神经⽹络&amp;#xff08;CNN&amp;#xff09;实现垃圾分类Matlab 
源码 
⼀、垃圾分类 
如何通过垃圾分类管理&amp;#xff0c;最⼤限度地实现垃圾资源利⽤&amp;#xff0c;减少垃圾处置量&amp;#xff0c;改善⽣存环境质量&amp;#xff0c;是当前世界各国共同关注的迫切问题之⼀。…阅读更多...使用CSS3实现loading效果效果展示 具体实现 
示例完全是使用 htmlCSS3 实现&amp;#xff0c;主要是用到了 CSS3 的animate和animate-delay属性。 
html 代码如下&amp;#xff1a; 
&lt;div class"container"&gt;&lt;span style"--i:0"&gt;&lt;/span&gt;&lt;span style"--i:1"&gt;…阅读更多...HarmonyOS NEXT 应用开发实战(六、组件导航Navigation使用详解)在鸿蒙应用开发中&amp;#xff0c;Navigation 组件是实现界面间导航的重要工具。本文将介绍如何使用 Navigation 组件实现页面跳转及参数传递&amp;#xff0c;确保你能轻松构建具有良好用户体验的应用。 当前HarmonyOS支持两套路由机制&amp;#xff08;Navigation和Router&amp;#xff09;&amp;…阅读更多...SpringCloud-持久层框架MyBatis Plus的使用与原理详解在现代微服务架构中&amp;#xff0c;SpringCloud 是一个非常流行的解决方案。而在数据库操作层面&amp;#xff0c;MyBatis Plus 作为 MyBatis 的增强工具&amp;#xff0c;能够简化开发&amp;#xff0c;提升效率&amp;#xff0c;特别是在开发企业级应用和分布式系统时尤为有用。本文将详细介绍 MyBat…阅读更多...C# OnnxRuntime yolo11 pest detection目录 
介绍 
效果 
模型信息 
项目 
代码 
下载 介绍 
官网地址&amp;#xff1a;GitHub - ultralytics/ultralytics: Ultralytics YOLO11 &amp;#x1f680; 
YoloV11&amp;#xff08;You Only Look Once V11&amp;#xff09;是一种计算机视觉算法&amp;#xff0c;用于目标检测。它是由 Joseph Redm…阅读更多...大模型之三十二-语音合成TTS(coqui) 之二 fine-tune在 大模型之三十-语音合成TTS(coqui)[shichaog CSDN]中提到了xttsv2的fine-tune。 
数据情况&amp;#xff1a; 
我是从bilibili up主小Lin说提取了一些视频&amp;#xff0c;然后进行了重新的fine-tune。 
训练结果 
如下图所示&amp;#xff0c;上面波形幅度较大的是xttsv2原始模型的结果&amp;am…阅读更多...Synchronized是非公平锁吗？那么如何体现？锁能降级吗？1. synchronized 是非公平锁吗&amp;#xff1f; 
是的&amp;#xff0c;synchronized 是非公平锁。 
什么是非公平锁&amp;#xff1f; 
非公平锁意味着线程获取锁的顺序并不一定按照先后到达的顺序&amp;#xff0c;也就是说&amp;#xff0c;后来的线程有可能插队&amp;#xff0c;优先获取锁。这种机制可以…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:46 +0000</pubDate>
    </item>
    <item>
      <title>Concat2NodeEncoder（lrgb文件中的encoders文件中的composition.py）</title>
      <link>https://www.ppmy.cn/news/1541050.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Concat2NodeEncoder（lrgb文件中的encoders文件中的composition.py）news/2025/11/1 1:17:45/该代码实现了一个自定义的节点编码器Concat2NodeEncoder，用于将两个独立的节点编码器的输出结果连接起来。这个类的设计目的是将两个编码器的功能结合起来，以丰富节点特征的表示。通过将encoder1和encoder2的输出拼接，可以在保留原始特征的同时，加入其他形式的位置编码或其他特征处理。from lrgb.encoders.composition import Concat2NodeEncoderimport torchclass Concat2NodeEncoder(torch.nn.Module):"""Encoder that concatenates two node encoders."""def __init__(self, enc1_cls, enc2_cls, in_dim, emb_dim, enc2_dim_pe):super().__init__()# PE dims can only be gathered once the cfg is loaded.self.encoder1 = enc1_cls(in_dim=in_dim, emb_dim=emb_dim - enc2_dim_pe)self.encoder2 = enc2_cls(in_dim=in_dim, emb_dim=emb_dim, expand_x=False)def forward(self, x, pestat):x = self.encoder1(x, pestat)x = self.encoder2(x, pestat)return x1.Concat2NodeEncoder类定义与初始化class Concat2NodeEncoder(torch.nn.Module):"""Encoder that concatenates two node encoders."""http://www.ppmy.cn/news/1541050.html相关文章基于MATLAB的实现垃圾分类Matlab源码【图像识别】基于卷积神经⽹络&amp;#xff08;CNN&amp;#xff09;实现垃圾分类Matlab 
源码 
⼀、垃圾分类 
如何通过垃圾分类管理&amp;#xff0c;最⼤限度地实现垃圾资源利⽤&amp;#xff0c;减少垃圾处置量&amp;#xff0c;改善⽣存环境质量&amp;#xff0c;是当前世界各国共同关注的迫切问题之⼀。…阅读更多...使用CSS3实现loading效果效果展示 具体实现 
示例完全是使用 htmlCSS3 实现&amp;#xff0c;主要是用到了 CSS3 的animate和animate-delay属性。 
html 代码如下&amp;#xff1a; 
&lt;div class"container"&gt;&lt;span style"--i:0"&gt;&lt;/span&gt;&lt;span style"--i:1"&gt;…阅读更多...HarmonyOS NEXT 应用开发实战(六、组件导航Navigation使用详解)在鸿蒙应用开发中&amp;#xff0c;Navigation 组件是实现界面间导航的重要工具。本文将介绍如何使用 Navigation 组件实现页面跳转及参数传递&amp;#xff0c;确保你能轻松构建具有良好用户体验的应用。 当前HarmonyOS支持两套路由机制&amp;#xff08;Navigation和Router&amp;#xff09;&amp;…阅读更多...SpringCloud-持久层框架MyBatis Plus的使用与原理详解在现代微服务架构中&amp;#xff0c;SpringCloud 是一个非常流行的解决方案。而在数据库操作层面&amp;#xff0c;MyBatis Plus 作为 MyBatis 的增强工具&amp;#xff0c;能够简化开发&amp;#xff0c;提升效率&amp;#xff0c;特别是在开发企业级应用和分布式系统时尤为有用。本文将详细介绍 MyBat…阅读更多...C# OnnxRuntime yolo11 pest detection目录 
介绍 
效果 
模型信息 
项目 
代码 
下载 介绍 
官网地址&amp;#xff1a;GitHub - ultralytics/ultralytics: Ultralytics YOLO11 &amp;#x1f680; 
YoloV11&amp;#xff08;You Only Look Once V11&amp;#xff09;是一种计算机视觉算法&amp;#xff0c;用于目标检测。它是由 Joseph Redm…阅读更多...大模型之三十二-语音合成TTS(coqui) 之二 fine-tune在 大模型之三十-语音合成TTS(coqui)[shichaog CSDN]中提到了xttsv2的fine-tune。 
数据情况&amp;#xff1a; 
我是从bilibili up主小Lin说提取了一些视频&amp;#xff0c;然后进行了重新的fine-tune。 
训练结果 
如下图所示&amp;#xff0c;上面波形幅度较大的是xttsv2原始模型的结果&amp;am…阅读更多...Synchronized是非公平锁吗？那么如何体现？锁能降级吗？1. synchronized 是非公平锁吗&amp;#xff1f; 
是的&amp;#xff0c;synchronized 是非公平锁。 
什么是非公平锁&amp;#xff1f; 
非公平锁意味着线程获取锁的顺序并不一定按照先后到达的顺序&amp;#xff0c;也就是说&amp;#xff0c;后来的线程有可能插队&amp;#xff0c;优先获取锁。这种机制可以…阅读更多...python的Django框架入门Django是一个开源的Python Web开发框架&amp;#xff0c;遵循MTV&amp;#xff08;Model-Template-View&amp;#xff0c;模型-模板-视图&amp;#xff09;架构&amp;#xff0c;是一个全功能的Web框架&amp;#xff0c;Django的模块化设计允许开发者通过添加自定义插件、使用第三方库等方式来增强其功能。 
一…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:46 +0000</pubDate>
    </item>
    <item>
      <title>基于MATLAB的实现垃圾分类Matlab源码</title>
      <link>https://www.ppmy.cn/news/1541049.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维基于MATLAB的实现垃圾分类Matlab源码news/2025/11/1 1:17:44/【图像识别】基于卷积神经⽹络（CNN）实现垃圾分类Matlab源码⼀、垃圾分类如何通过垃圾分类管理，最⼤限度地实现垃圾资源利⽤，减少垃圾处置量，改善⽣存环境质量，是当前世界各国共同关注的迫切问题之⼀。根据国家制定的统⼀标准，现在⽣活垃圾被⼴泛分为四类，分别是可回收物、餐厨垃圾、有害垃圾和其他垃圾。可回收物表⽰适宜回收和资源利⽤的垃圾，主要包括废纸、塑料、玻璃、⾦属和布料五⼤类，⽤蓝⾊垃圾容器收集，通过综合处理回收利⽤。餐厨垃圾包括剩菜剩饭、⾻头、菜根菜叶、果⽪等⾷品类废物，⽤绿⾊垃圾容器收集等等。但是随着深度学习技术的发展，为了简单⾼效地对⽣活垃圾进⾏识别分类,本篇⽂章将实现⼀种基于卷积神经⽹络的垃圾分类识别⽅法。该⽅法只需要对图像进⾏简单的预处理,CNN模型便能够⾃动提取图像特征且池化过程能够减少参数数量,降低计算的复杂度,实验结果表明卷积神经⽹络,能克服传统图像分类算法的诸多缺点，当然更为复杂的模型等待⼤家去实验研究。但是⽬前认为采⽤VGG或者global 池化⽅式可能效果更好⼀点。⼆、卷积神经⽹络CNN卷积神经⽹络（Convolutional Neural Networks / CNNs / ConvNets）与普通神经⽹络⾮常相似，它们都由具有可学习的权重和偏置常量(biases)的神经元组成。每个神经元都接收⼀些输⼊，并做⼀些点积计算，输出是每个分类的分数，普通神经⽹络⾥的⼀些计算技巧到这⾥依旧适⽤。所以哪⾥不同呢？卷积神经⽹络默认输⼊是图像，可以让我们把特定的性质编码⼊⽹络结构，使是我们的前馈函数更加有效率，并减少了⼤量参数。具有三维体积的神经元(3D volumes of neurons)卷积神经⽹络利⽤输⼊是图⽚的特点，把神经元设计成三个维度 ： width, height, depth(注意这个depth不是神经⽹络的深度，⽽是⽤来描述神经元的) 。⽐如输⼊的图⽚⼤⼩是 32 × 32 × 3 (rgb)，那么输⼊神经元就也具有 32×32×3 的维度。下⾯是图解：传统神经⽹络卷积神经⽹络⼀个卷积神经⽹络由很多层组成，它们的输⼊是三维的，输出也是三维的，有的层有参数，有的层不需要参数。Layers used to build ConvNets卷积神经⽹络通常包含以下⼏种层：卷积层（Convolutional layer），卷积神经⽹路中每层卷积层由若⼲卷积单元组成，每个卷积单元的参数都是通过反向传播算法优化得到的。卷积运算的⽬的是提取输⼊的不同特征，第⼀层卷积层可能只能提取⼀些低级的特征如边缘、线条和⾓等层级，更多层的⽹络能从低级特征中迭代提取更复杂的特征。线性整流层（Rectified Linear Units layer, ReLU layer），这⼀层神经的活性化函数（Activation function）使⽤线性整流（Rectified Linear Units, ReLU）。池化层（Pooling layer），通常在卷积层之后会得到维度很⼤的特征，将特征切成⼏个区域，取其最⼤值或平均值，得到新的、维度较⼩的特征。全连接层（ Fully-Connected layer）, 把所有局部特征结合变成全局特征，⽤来计算最后每⼀类的得分。⼀个卷积神经⽹络各层应⽤：卷积层（Convolutional layer）局部感知（Local Connectivity）普通神经⽹络把输⼊层和隐含层进⾏“全连接(Full Connected)“的设计。从计算的⾓度来讲，相对较⼩的图像从整幅图像中计算特征是可⾏的。但是，如果是更⼤的图像（如 96x96 的图像），要通过这种全联通⽹络的这种⽅法来学习整幅图像上的特征，从计算⾓度⽽⾔，将变得⾮常耗时。你需要设计 10 的 4 次⽅（=10000）个输⼊单元，假设你要学习 100 个特征，那么就有 10 的 6 次⽅个参数需要去学习。与 28x28 的⼩块图像相⽐较， 96x96 的图像使⽤前向输送或者后向传导的计算⽅式，计算过程也会慢 10 的 2 次⽅（=100）倍。卷积层解决这类问题的⼀种简单⽅法是对隐含单元和输⼊单元间的连接加以限制：每个隐含单元仅仅只能连接输⼊单元的⼀部分。例如，每个隐含单元仅仅连接输⼊图像的⼀⼩⽚相邻区域。（对于不同于图像输⼊的输⼊形式，也会有⼀些特别的连接到单隐含层的输⼊信号“连接区域”选择⽅式。如⾳频作为⼀种信号输⼊⽅式，⼀个隐含单元所需要连接的输⼊单元的⼦集，可能仅仅是⼀段⾳频输⼊所对应的某个时间段上的信号。)每个隐含单元连接的输⼊区域⼤⼩叫r神经元的感受野(receptive field)。由于卷积层的神经元也是三维的，所以也具有深度。卷积层的参数包含⼀系列过滤器（filter），每个过滤器训练⼀个深度，有⼏个过滤器输出单元就具有多少深度。具体如下图所⽰，样例输⼊单元⼤⼩是32×32×3, 输出单元的深度是5, 对于输出单元不同深度的同⼀位置，与输⼊图⽚连接的区域是相同的，但是参数（过滤器）不同。虽然每个输出单元只是连接输⼊的⼀部分，但是值的计算⽅法是没有变的，都是权重和输⼊的点积，然后加上偏置，这点与普通神经⽹络是⼀样的，如下图所⽰：空间排列（Spatial arrangement）⼀个输出单元的⼤⼩有以下三个量控制：depth, stride 和 zero-padding。深度(depth) : 顾名思义，它控制输出单元的深度，也就是filter的个数，连接同⼀块区域的神经元个数。⼜名：depth column 步幅(stride)：它控制在同⼀深度的相邻两个隐含单元，与他们相连接的输⼊区域的距离。如果步幅很⼩（⽐如 stride = 1）的话，相邻隐含单元的输⼊区域的重叠部分会很多; 步幅很⼤则重叠区域变少。补零(zero-padding) ： 我们可以通过在输⼊单元周围补零来改变输⼊单元整体⼤⼩，从⽽控制输出单元的空间⼤⼩。我们先定义⼏个符号：: 输⼊单元的⼤⼩（宽或⾼）: 感受野(receptive field): 步幅（stride）: 补零（zero-padding)的数量: 深度，输出单元的深度则可以⽤以下公式计算⼀个维度（宽或⾼）内⼀个输出单元⾥可以有⼏个隐藏单元：如果计算结果不是⼀个整数，则说明现有参数不能正好适合输⼊，步幅（stride）设置的不合适，或者需要补零，证明略，下⾯⽤⼀个例⼦来说明⼀下。这是⼀个⼀维的例⼦，左边模型输⼊单元有5个，即, 边界各补了⼀个零，即，步幅是1， 即，感受野是3，因为每个输出隐藏单元连接3个输⼊单元，即，根据上⾯公式可以计算出输出隐藏单元的个数是：，与图⽰吻合。右边那个模型是把步幅变为2，其余不变，可以算出输出⼤⼩为：，也与图⽰吻合。若把步幅改为3，则公式不能整除，说明步幅为3不能恰好吻合输⼊单元⼤⼩。另外，⽹络的权重在图的右上⾓，计算⽅法和普通神经⽹路⼀样。参数共享(Parameter Sharing)应⽤参数共享可以⼤量减少参数数量，参数共享基于⼀个假设：如果图像中的⼀点（x1, y1）包含的特征很重要，那么它应该和图像中的另⼀点（x2, y2）⼀样重要。换种说法，我们把同⼀深度的平⾯叫做深度切⽚(depth slice)（(e.g. a volume of size [55x55x96] has 96 depth slices, each of size [55x55])），那么同⼀个切⽚应该共享同⼀组权重和偏置。我们仍然可以使⽤梯度下降的⽅法来学习这些权值，只需要对原始算法做⼀些⼩的改动， 这⾥共享权值的梯度是所有共享参数的梯度的总和。我们不禁会问为什么要权重共享呢？⼀⽅⾯，重复单元能够对特征进⾏识别，⽽不考虑它在可视域中的位置。另⼀⽅⾯，权值共享使得我们能更有效的进⾏特征抽取，因为它极⼤的减少了需要学习的⾃由变量的个数。通过控制模型的规模，卷积⽹络对视觉问题可以具有很好的泛化能⼒。卷积（Convolution）如果应⽤参数共享的话，实际上每⼀层计算的操作就是输⼊层和权重的卷积！这也就是卷积神经⽹络名字的由来。先抛开卷积这个概念不管。为简便起见，考虑⼀个⼤⼩为5×5的图像，和⼀个3×3的卷积核。这⾥的卷积核共有9个参数，就记为 吧。这种情况下，卷积核实际上有9个神经元，他们的输出⼜组成⼀个3×3的矩阵，称为特征图。第⼀个神经元连接到图像的第⼀个3×3的局部，第⼆个神经元则连接到第⼆个局部（注意，有重叠！就跟你的⽬光扫视时也是连续扫视⼀样）。具体如下图所⽰。图的上⽅是第⼀个神经元的输出，下⽅是第⼆个神经元的输出。每个神经元的运算依旧是需要注意的是，平时我们在运算时，习惯使⽤ 这种写法，但事实上，我们这⾥使⽤的是 。现在我们回忆⼀下离散卷积运算。假设有⼆维离散函数 , ， 那么它们的卷积定义为现在发现了吧！上⾯例⼦中的9个神经元均完成输出后，实际上等价于图像和卷积核的卷积操作！Numpy examples下⾯⽤numpy的代码具体的说明⼀下上⾯的概念和公式等。假设输⼊存储在⼀个numpy array X⾥，那么：* 位于 (x, y) 的 depth column 是 X[x, y, :]* 深度为 d 的 depth slice 是 X[:, :, d]假设X的⼤⼩是X.shape: (11,11,4)，并且不⽤补零（P ＝ 0），过滤器（感受野）⼤⼩F ＝ 5，步幅为2（S＝ 2）。那么输出单元的空间⼤⼩应该为 (11 - 5) / 2 + 1 = 4，即宽和⾼都为4 。假设输出存储在 V 中，那么它的计算⽅式应该为：V[0,0,0] = np.sum(X[:5,:5,:] * W0) + b0V[1,0,0] = np.sum(X[2:7,:5,:] * W0) + b0V[2,0,0] = np.sum(X[4:9,:5,:] * W0) + b0V[3,0,0] = np.sum(X[6:11,:5,:] * W0) + b0V[0,0,1] = np.sum(X[:5,:5,:] * W1) + b1V[1,0,1] = np.sum(X[2:7,:5,:] * W1) + b1V[2,0,1] = np.sum(X[4:9,:5,:] * W1) + b1V[3,0,1] = np.sum(X[6:11,:5,:] * W1) + b1V[0,1,1] = np.sum(X[:5,2:7,:] * W1) + b1V[2,3,1] = np.sum(X[4:9,6:11,:] * W1) + b1注意在numpy中 * 表⽰两个数组对应元素相乘。卷积层总结(Summary)接收三维输⼊需要给出4个参数（hyperparameters）：Number of filters ,their spatial extent ,the stride ,the amount of zero padding .输出⼀个三维单元 ，其中：应⽤权值共享，每个filter会产⽣ 个权重，总共 个权重和 个偏置。在输出单元，第d个深度切⽚的结果是由第d个filter 和输⼊单元做卷积运算，然后再加上偏置⽽来。池化层(Pooling Layer)池化（pool）即下采样（downsamples），⽬的是为了减少特征图。池化操作对每个深度切⽚独⽴，规模⼀般为 2＊2，相对于卷积层进⾏卷积运算，池化层进⾏的运算⼀般有以下⼏种：* 最⼤池化（Max Pooling）。取4个点的最⼤值。这是最常⽤的池化⽅法。* 均值池化（Mean Pooling）。取4个点的均值。* ⾼斯池化。借鉴⾼斯模糊的⽅法。不常⽤。* 可训练池化。训练函数 ff ，接受4个点为输⼊，出⼊1个点。不常⽤。最常见的池化层是规模为2*2， 步幅为2，对输⼊的每个深度切⽚进⾏下采样。每个MAX操作对四个数进⾏，如下图所⽰：池化操作将保存深度⼤⼩不变。如果池化层的输⼊单元⼤⼩不是⼆的整数倍，⼀般采取边缘补零（zero-padding）的⽅式补成2的倍数，然后再池化。池化层总结(Summary)接收单元⼤⼩为：需要两个参数（hyperparameters）：their spatial extent ,the stride ,输出⼤⼩：，其中：不需要引⼊新权重全连接层（Fully-connected layer）全连接层和卷积层可以相互转换：* 对于任意⼀个卷积层，要把它变成全连接层只需要把权重变成⼀个巨⼤的矩阵，其中⼤部分都是0 除了⼀些特定区块（因为局部感知），⽽且好多区块的权值还相同（由于权重共享）。* 相反地，对于任何⼀个全连接层也可以变为卷积层。⽐如，⼀个 的全连接层，输⼊层⼤⼩为 ，它可以等效为⼀个 的卷积层。换⾔之，我们把 filter size 正好设置为整个输⼊层⼤⼩。卷积神经⽹络架构Layer Patterns常见的卷积神经⽹络架构是这样的：INPUT -&gt; [[CONV -&gt; RELU]*N -&gt; POOL?]*M -&gt; [FC -&gt; RELU]*K -&gt; FC1堆叠⼏个卷积和整流层，再加⼀个池化层，重复这个模式知道图⽚已经被合并得⽐较⼩了，然后再⽤全连接层控制输出。上述表达式中 ? 意味着0次或1次，通常情况下：N &gt;= 0 &amp;&amp; N &lt;= 3, M &gt;= 0, K &gt;= 0 &amp;&amp; K &lt; 3。⽐如你可以组合出以下⼏种模式：* INPUT -&gt; FC, 实现了⼀个线性分类器， 这⾥ N = M = K = 0* INPUT -&gt; CONV -&gt; RELU -&gt; FC* INPUT -&gt; [CONV -&gt; RELU -&gt; POOL]*2 -&gt; FC -&gt; RELU -&gt; FC. Here we see that there is a single CONV layer betweenevery POOL layer.* INPUT -&gt; [CONV -&gt; RELU -&gt; CONV -&gt; RELU -&gt; POOL]*3 -&gt; [FC -&gt; RELU]*2 -&gt; FC Here we see two CONV layers stacked before every POOL layer. This is generally a good idea for larger and deeper networks, because multiple stacked CONV layers can develop more complex features of the input volume before the destructive pooling operation.Layer Sizing PatternsInput layer : 应该是2的整数次幂。⽐如32，64， 128等。Conv Layer : 使⽤⼩的过滤器（filter），, 步幅 ，如果不能恰好拟合输⼊层，还要边缘补零。如果使⽤ ，那么输出⼤⼩将与输⼊⼀样。如果⽤更⼤的过滤器（⽐如7*7），⼀般只会在紧挨着原始输⼊图⽚的卷积层才会看到。Pool Layer :三、部分代码function varargout = cnnMain(varargin)gui_Singleton = 1;gui_State = struct('gui_Name',       mfilename, ...'gui_Singleton',  gui_Singleton, ...'gui_OpeningFcn', @cnnMain_OpeningFcn, ...'gui_OutputFcn',  @cnnMain_OutputFcn, ...'gui_LayoutFcn',  [] , ...'gui_Callback',   []);if nargin &amp;&amp; ischar(varargin{1})gui_State.gui_Callback = str2func(varargin{1});endif nargout[varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});elsegui_mainfcn(gui_State, varargin{:});endfunction cnnMain_OpeningFcn(hObject, eventdata, handles, varargin)handles.output = hObject;guidata(hObject, handles);movegui(hObject,'center');function varargout = cnnMain_OutputFcn(hObject, eventdata, handles)varargout{1} = handles.output;function LPBut_Callback(hObject, eventdata, handles)[img_lp,PL]=LPLocation(handles.img_rgb);axes(handles.axes1); hold on;row = PL.row;col = PL.colplot([col(1) col(2)], [row(1) row(1)], 'g-', 'LineWidth', 3);plot([col(1) col(2)], [row(2) row(2)], 'g-', 'LineWidth', 3);plot([col(1) col(1)], [row(1) row(2)], 'g-', 'LineWidth', 3);plot([col(2) col(2)], [row(1) row(2)], 'g-', 'LineWidth', 3);hold off;axes(handles.axes2);imshow(img_lp);title('定位图', 'FontWeight', 'Bold');handles.img_lp=img_lp;guidata(hObject, handles);% --------------------------------------------------------------------function openFile_Callback(hObject, eventdata, handles)[uuu,vvv]=uigetfile({'*.jpg;*.tif;*.png;*.gif;*.BMP;*.JPEG','All Image Files'} ,'MultiSelect', 'on');%获取⼀张车牌照⽚path=strcat(vvv,uuu);%拼接图⽚路径img_rgb=imread(path);img_rgb=imresize(img_rgb,[240,320]);axes(handles.axes1);im = imread(path);imshow(img_rgb);title('原图像', 'FontWeight', 'Bold');handles.img_rgb=img_rgb;guidata(hObject, handles);function FGBut_Callback(hObject, eventdata, handles)functionPath=pwd;      %储存现有路径dataPath=strcat(functionPath,'\CNN\data');   %储存data路径cnnToolPath=strcat(functionPath,'\CNN\DeepLearnToolbox_CNN_lzbV3.0');addpath(functionPath)addpath(dataPath)addpath(cnnToolPath)[LP_word]=LPWordDivide(handles.img_lp);figurefor i=1:7subplot(1,7,i)imshow(LP_word(:,:,i));endguidata(hObject, handles);% --- Executes on button press in CNNbut.function CNNbut_Callback(hObject, eventdata, handles)functionPath=pwd;      %储存现有路径dataPath=strcat(functionPath,'\CNN\data');   %储存data路径cnnToolPath=strcat(functionPath,'\CNN\DeepLearnToolbox_CNN_lzbV3.0');addpath(functionPath)addpath(dataPath)addpath(cnnToolPath)if(~exist('trainData.mat','file')||~exist('testData.mat','file')) %检查是否有trainData、testData%数据⾃动保存在/data⽂件夹[train_x,train_y,test_x,test_y]=dataSet();   %⽣成数据elseload trainDataload testDataendif(~exist('Net.mat','file'))    %检查是否有NET%如果想要重新⽣成NET，框⿊下⼀句按F9(运⾏约20分钟)%⽹络⾃动保存在/data⽂件夹cd(functionPath)[net,err,bad]=LPNetTrain(train_x,train_y,test_x,test_y);   %训练⽹络elseload Net5_3_1.matcd(functionPath)endlp=cnnff(net,handles.LP_word);    %获得车牌字符的神经⽹络结果lplabel=lp.Y;             %获得字符的标签[word,position]=label2word(lplabel);     %转换为str,word为字符结果，position为对照标签位置set(handles.AA,'String', word);% --- Executes on button press in pushbutton4.function pushbutton4_Callback(hObject, eventdata, handles)img_gray = rgb2gray(handles.img_lp);axes(handles.axes4);imshow(img_gray);title('灰度图像', 'FontWeight', 'Bold');function pushbutton5_Callback(hObject, eventdata, handles)se=[1 1];img_bimr = imerode(handles.img_rgb, se);se = strel('rectangle',[1,5]);axes(handles.axes5);imshow(img_bimr2);title('腐蚀与膨胀', 'FontWeight', 'Bold');四、运⾏结果五、参考⽂献[1][J]. 汪洋,王⼩妮,王育新,刘畅,熊继伟,韩定良.  .[2][J]. 吴碧程,邓祥恩,张⼦憧,唐⼩煜.  .[3][J]. 吴健,陈豪,⽅武.  .http://www.ppmy.cn/news/1541049.html相关文章使用CSS3实现loading效果效果展示 具体实现 
示例完全是使用 htmlCSS3 实现&amp;#xff0c;主要是用到了 CSS3 的animate和animate-delay属性。 
html 代码如下&amp;#xff1a; 
&lt;div class"container"&gt;&lt;span style"--i:0"&gt;&lt;/span&gt;&lt;span style"--i:1"&gt;…阅读更多...HarmonyOS NEXT 应用开发实战(六、组件导航Navigation使用详解)在鸿蒙应用开发中&amp;#xff0c;Navigation 组件是实现界面间导航的重要工具。本文将介绍如何使用 Navigation 组件实现页面跳转及参数传递&amp;#xff0c;确保你能轻松构建具有良好用户体验的应用。 当前HarmonyOS支持两套路由机制&amp;#xff08;Navigation和Router&amp;#xff09;&amp;…阅读更多...SpringCloud-持久层框架MyBatis Plus的使用与原理详解在现代微服务架构中&amp;#xff0c;SpringCloud 是一个非常流行的解决方案。而在数据库操作层面&amp;#xff0c;MyBatis Plus 作为 MyBatis 的增强工具&amp;#xff0c;能够简化开发&amp;#xff0c;提升效率&amp;#xff0c;特别是在开发企业级应用和分布式系统时尤为有用。本文将详细介绍 MyBat…阅读更多...C# OnnxRuntime yolo11 pest detection目录 
介绍 
效果 
模型信息 
项目 
代码 
下载 介绍 
官网地址&amp;#xff1a;GitHub - ultralytics/ultralytics: Ultralytics YOLO11 &amp;#x1f680; 
YoloV11&amp;#xff08;You Only Look Once V11&amp;#xff09;是一种计算机视觉算法&amp;#xff0c;用于目标检测。它是由 Joseph Redm…阅读更多...大模型之三十二-语音合成TTS(coqui) 之二 fine-tune在 大模型之三十-语音合成TTS(coqui)[shichaog CSDN]中提到了xttsv2的fine-tune。 
数据情况&amp;#xff1a; 
我是从bilibili up主小Lin说提取了一些视频&amp;#xff0c;然后进行了重新的fine-tune。 
训练结果 
如下图所示&amp;#xff0c;上面波形幅度较大的是xttsv2原始模型的结果&amp;am…阅读更多...Synchronized是非公平锁吗？那么如何体现？锁能降级吗？1. synchronized 是非公平锁吗&amp;#xff1f; 
是的&amp;#xff0c;synchronized 是非公平锁。 
什么是非公平锁&amp;#xff1f; 
非公平锁意味着线程获取锁的顺序并不一定按照先后到达的顺序&amp;#xff0c;也就是说&amp;#xff0c;后来的线程有可能插队&amp;#xff0c;优先获取锁。这种机制可以…阅读更多...python的Django框架入门Django是一个开源的Python Web开发框架&amp;#xff0c;遵循MTV&amp;#xff08;Model-Template-View&amp;#xff0c;模型-模板-视图&amp;#xff09;架构&amp;#xff0c;是一个全功能的Web框架&amp;#xff0c;Django的模块化设计允许开发者通过添加自定义插件、使用第三方库等方式来增强其功能。 
一…阅读更多...后端接收参数的几种常用注解目录 
一、RequestParam 
二、RequestBody 
三、PathVariable 
四、RequestHeader 
五、RequestAttribute 
六、RequestPart 
七、Valid 
一、RequestParam 
1.作用 
用于将请求中的 查询参数 或 表单参数 绑定到方法的参数上。支持 GET 和 POST 请求。 
2.使用方法 
GetMappin…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:45 +0000</pubDate>
    </item>
    <item>
      <title>使用CSS3实现loading效果</title>
      <link>https://www.ppmy.cn/news/1541048.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维使用CSS3实现loading效果news/2025/11/1 1:17:43/效果展示具体实现示例完全是使用 html+CSS3 实现，主要是用到了 CSS3 的animate和animate-delay属性。html 代码如下：&lt;divclass="container"&gt;&lt;spanstyle="--i:0"&gt;&lt;/span&gt;&lt;spanstyle="--i:1"&gt;&lt;/span&gt;&lt;spanstyle="--i:2"&gt;&lt;/span&gt;&lt;spanstyle="--i:3"&gt;&lt;/span&gt;&lt;spanstyle="--i:4"&gt;&lt;/span&gt;&lt;spanstyle="--i:5"&gt;&lt;/span&gt;&lt;spanstyle="--i:6"&gt;&lt;/span&gt;&lt;spanstyle="--i:7"&gt;&lt;/span&gt;&lt;spanstyle="--i:8"&gt;&lt;/span&gt;&lt;spanstyle="--i:9"&gt;&lt;/span&gt;&lt;spanstyle="--i:10"&gt;&lt;/span&gt;&lt;spanstyle="--i:11"&gt;&lt;/span&gt;&lt;spanstyle="--i:12"&gt;&lt;/span&gt;&lt;spanstyle="--i:13"&gt;&lt;/span&gt;&lt;spanstyle="--i:14"&gt;&lt;/span&gt;&lt;spanstyle="--i:15"&gt;&lt;/span&gt;&lt;spanstyle="--i:16"&gt;&lt;/span&gt;&lt;spanstyle="--i:17"&gt;&lt;/span&gt;&lt;spanstyle="--i:18"&gt;&lt;/span&gt;&lt;spanstyle="--i:19"&gt;&lt;/span&gt;&lt;spanstyle="--i:20"&gt;&lt;/span&gt;&lt;spanstyle="--i:21"&gt;&lt;/span&gt;&lt;spanstyle="--i:22"&gt;&lt;/span&gt;&lt;spanstyle="--i:23"&gt;&lt;/span&gt;&lt;spanstyle="--i:24"&gt;&lt;/span&gt;&lt;spanstyle="--i:25"&gt;&lt;/span&gt;&lt;spanstyle="--i:26"&gt;&lt;/span&gt;&lt;spanstyle="--i:27"&gt;&lt;/span&gt;&lt;spanstyle="--i:28"&gt;&lt;/span&gt;&lt;spanstyle="--i:29"&gt;&lt;/span&gt;&lt;spanstyle="--i:30"&gt;&lt;/span&gt;&lt;spanstyle="--i:31"&gt;&lt;/span&gt;&lt;spanstyle="--i:32"&gt;&lt;/span&gt;&lt;spanstyle="--i:33"&gt;&lt;/span&gt;&lt;spanstyle="--i:34"&gt;&lt;/span&gt;&lt;spanstyle="--i:35"&gt;&lt;/span&gt;&lt;spanstyle="--i:36"&gt;&lt;/span&gt;&lt;spanstyle="--i:37"&gt;&lt;/span&gt;&lt;spanstyle="--i:38"&gt;&lt;/span&gt;&lt;spanstyle="--i:39"&gt;&lt;/span&gt;&lt;spanstyle="--i:40"&gt;&lt;/span&gt;&lt;spanstyle="--i:41"&gt;&lt;/span&gt;&lt;spanstyle="--i:42"&gt;&lt;/span&gt;&lt;spanstyle="--i:43"&gt;&lt;/span&gt;&lt;spanstyle="--i:44"&gt;&lt;/span&gt;&lt;spanstyle="--i:45"&gt;&lt;/span&gt;&lt;spanstyle="--i:46"&gt;&lt;/span&gt;&lt;spanstyle="--i:47"&gt;&lt;/span&gt;&lt;spanstyle="--i:48"&gt;&lt;/span&gt;&lt;spanstyle="--i:49"&gt;&lt;/span&gt;&lt;/div&gt;代码有点冗余，写了 50 个span元素，当然可以使用 javascript 去循环生成，再插入到DOM中。这段代码就是给每个span元素绑定了--i值，每个span元素就是效果中的变色部分，之所以用--i时方便在设置span元素样式时使用var(--i)变量来给span动态设置样式。CSS3 代码如下：&lt;style&gt;span{display:inline-flex;width:32px;height:6px;background-color:#2c4766;border-radius:8px;position:absolute;left:0;transform-origin:128px;transform:rotate(calc(var(--i)*(360deg / 50)));animation:animateBlink 1s linear infinite;/*执行一秒，匀速执行，循环*/animation-delay:calc((var(--i)*(1s / 50)));/*设置动画的延迟执行时间，这样就可以看到渐变的效果*/}@keyframesanimateBlink{0%{background-color:#0ef;}25%{background-color:#2c4766;}}&lt;/style&gt;这段代码总共做了两件事，设置span的旋转角度和定义animateBlink动画并绑定。旋转 span通过--i变量设置每个span元素的旋转角度，均匀分布在一个环上。设置中心点transform-origin:[&lt;x-position&gt;] [&lt;y-position&gt;] [&lt;z-position&gt;];效果如下动画这段代码就是定义了一个animateBlink动画， 循环匀速执行动画，动画完全执行一轮时间持续1s。http://www.ppmy.cn/news/1541048.html相关文章HarmonyOS NEXT 应用开发实战(六、组件导航Navigation使用详解)在鸿蒙应用开发中&amp;#xff0c;Navigation 组件是实现界面间导航的重要工具。本文将介绍如何使用 Navigation 组件实现页面跳转及参数传递&amp;#xff0c;确保你能轻松构建具有良好用户体验的应用。 当前HarmonyOS支持两套路由机制&amp;#xff08;Navigation和Router&amp;#xff09;&amp;…阅读更多...SpringCloud-持久层框架MyBatis Plus的使用与原理详解在现代微服务架构中&amp;#xff0c;SpringCloud 是一个非常流行的解决方案。而在数据库操作层面&amp;#xff0c;MyBatis Plus 作为 MyBatis 的增强工具&amp;#xff0c;能够简化开发&amp;#xff0c;提升效率&amp;#xff0c;特别是在开发企业级应用和分布式系统时尤为有用。本文将详细介绍 MyBat…阅读更多...C# OnnxRuntime yolo11 pest detection目录 
介绍 
效果 
模型信息 
项目 
代码 
下载 介绍 
官网地址&amp;#xff1a;GitHub - ultralytics/ultralytics: Ultralytics YOLO11 &amp;#x1f680; 
YoloV11&amp;#xff08;You Only Look Once V11&amp;#xff09;是一种计算机视觉算法&amp;#xff0c;用于目标检测。它是由 Joseph Redm…阅读更多...大模型之三十二-语音合成TTS(coqui) 之二 fine-tune在 大模型之三十-语音合成TTS(coqui)[shichaog CSDN]中提到了xttsv2的fine-tune。 
数据情况&amp;#xff1a; 
我是从bilibili up主小Lin说提取了一些视频&amp;#xff0c;然后进行了重新的fine-tune。 
训练结果 
如下图所示&amp;#xff0c;上面波形幅度较大的是xttsv2原始模型的结果&amp;am…阅读更多...Synchronized是非公平锁吗？那么如何体现？锁能降级吗？1. synchronized 是非公平锁吗&amp;#xff1f; 
是的&amp;#xff0c;synchronized 是非公平锁。 
什么是非公平锁&amp;#xff1f; 
非公平锁意味着线程获取锁的顺序并不一定按照先后到达的顺序&amp;#xff0c;也就是说&amp;#xff0c;后来的线程有可能插队&amp;#xff0c;优先获取锁。这种机制可以…阅读更多...python的Django框架入门Django是一个开源的Python Web开发框架&amp;#xff0c;遵循MTV&amp;#xff08;Model-Template-View&amp;#xff0c;模型-模板-视图&amp;#xff09;架构&amp;#xff0c;是一个全功能的Web框架&amp;#xff0c;Django的模块化设计允许开发者通过添加自定义插件、使用第三方库等方式来增强其功能。 
一…阅读更多...后端接收参数的几种常用注解目录 
一、RequestParam 
二、RequestBody 
三、PathVariable 
四、RequestHeader 
五、RequestAttribute 
六、RequestPart 
七、Valid 
一、RequestParam 
1.作用 
用于将请求中的 查询参数 或 表单参数 绑定到方法的参数上。支持 GET 和 POST 请求。 
2.使用方法 
GetMappin…阅读更多...第十四届单片机嵌入式蓝桥杯一、CubeMx配置 
&amp;#xff08;1&amp;#xff09;LED配置 &amp;#xff08;1&amp;#xff09;LED灯里面用到了SN74HC573ADWR锁存器&amp;#xff0c;这个锁存器有一个LE引脚,这个是我们芯片的锁存引脚&amp;#xff08;使能引脚&amp;#xff09;&amp;#xff0c;由PD2这个端口来控制的 
&amp;#xff08;2&amp;#xff…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:43 +0000</pubDate>
    </item>
    <item>
      <title>HarmonyOS NEXT 应用开发实战(六、组件导航Navigation使用详解)</title>
      <link>https://www.ppmy.cn/news/1541047.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维HarmonyOS NEXT 应用开发实战(六、组件导航Navigation使用详解)news/2025/11/1 1:17:42/在鸿蒙应用开发中，Navigation组件是实现界面间导航的重要工具。本文将介绍如何使用Navigation组件实现页面跳转及参数传递，确保你能轻松构建具有良好用户体验的应用。当前HarmonyOS支持两套路由机制（Navigation和Router），Navigation作为后续长期演进及推荐的路由选择方案，其与Router比较有不少优势。建议后续直接使用Navigation作为内部的路由方案。Navigation介绍Navigation组件通常作为页面的根容器，支持单页面、分栏和自适应三种显示模式。开发者可以使用Navigation组件提供的属性来设置页面的标题栏、工具栏、导航栏等。Navigation和Router能力对标Router路由的页面是一个@Entry修饰的Component，每一个页面都需要在main_page.json中声明。而基于Navigation的路由页面分为导航页和子页，导航页又叫Navbar，是Navigation包含的子组件，子页是NavDestination包含的子组件。业务场景NavigationRouter一多能力支持，Auto模式自适应单栏跟双栏显示不支持跳转指定页面pushPath &amp; pushDestinationpushUrl &amp; pushNameRoute跳转HSP中页面支持支持跳转HAR中页面支持支持跳转传参支持支持获取指定页面参数支持不支持传参类型传参为对象形式传参为对象形式，对象中暂不支持方法变量跳转结果回调支持支持跳转单例页面不支持支持页面返回支持支持页面返回传参支持支持返回指定路由支持支持页面返回弹窗支持，通过路由拦截实现showAlertBeforeBackPage路由替换replacePath &amp; replacePathByNamereplaceUrl &amp; replaceNameRoute路由栈清理clearclear清理指定路由removeByIndexes &amp; removeByName不支持转场动画支持支持自定义转场动画支持支持，动画类型受限屏蔽转场动画支持全局和单次支持 设置pageTransition方法duration为0geometryTransition共享元素动画支持（NavDestination之间共享）不支持页面生命周期监听UIObserver.on('navDestinationUpdate')UIObserver.on('routerPageUpdate')获取页面栈对象支持不支持路由拦截支持通过setInercption做路由拦截不支持路由栈信息查询支持getState() &amp; getLength()路由栈move操作moveToTop &amp; moveIndexToTop不支持沉浸式页面支持不支持，需通过window配置设置页面标题栏（titlebar）和工具栏（toolbar）支持不支持模态嵌套路由支持不支持Navigation简单示例主页面（首页面）示例：@Entry
@Component
struct NavigationExample {build() {Column() {Navigation() {// 中间主区域}.title("主标题") // 页面标题.mode(NavigationMode.Auto) // 显示模式：Auto（自适应）、Stack（单页显示）、Split（分栏显示）、Full（强调型标题栏）、Mini（普通型标题栏）.menus([// 顶部菜单栏]).toolBar({items: [// 底部工具栏]})}.height('100%').width('100%').backgroundColor('#F1F3F5')}
}// index.ets
@Entry
@Component
struct Index {pathStack: NavPathStack = new NavPathStack()build() {Navigation(this.pathStack) {Column() {Button('Push PageOne', { stateEffect: true, type: ButtonType.Capsule }).width('80%').height(40).margin(20).onClick(() =&gt; {this.pathStack.pushPathByName('pageOne', null)})}.width('100%').height('100%')}.title("Navigation")}
}子页示例：// PageOne.ets@Builder
export function PageOneBuilder() {PageOne()
}@Component
export struct PageOne {pathStack: NavPathStack = new NavPathStack()build() {NavDestination() {Column() {Button('回到首页', { stateEffect: true, type: ButtonType.Capsule }).width('80%').height(40).margin(20).onClick(() =&gt; {this.pathStack.clear()})}.width('100%').height('100%')}.title('PageOne').onReady((context: NavDestinationContext) =&gt; {this.pathStack = context.pathStack})}
}注意：每个子页也需要配置到系统配置文件route_map.json中（参考 系统路由配置 ）：// 工程配置文件module.json5中配置 {"routerMap": "$profile:route_map"}
// route_map.json
{"routerMap": [{"name": "pageOne","pageSourceFile": "src/main/ets/pages/PageOne.ets","buildFunction": "PageOneBuilder","data": {"description": "this is pageOne"}}]
}NavRouter介绍NavRouter是Navigation组件中的特殊子组件，通常用于与Navigation组件配合使用，它默认提供了点击响应处理，不需要开发者自定义点击事件逻辑。NavRouter组件只有两个子组件，其中第二个子组件必须是NavDestination。而NavDestination则是Navigation组件中的特殊子组件，用于显示内容页的内容。当开发者点击NavRouter组件时，会跳转到对应的NavDestination内容区。Navigation() {TextInput({ placeholder: '请输入...' }).width('90%').height(40).backgroundColor('#ffffff')List({ space: 12 }) {ForEach(this.arr, item =&gt; {ListItem() {NavRouter() {Text("NavRouter" + item).width('100%').height(72).backgroundColor(Color.White).borderRadius(36).fontSize(16).fontWeight(500).textAlign(TextAlign.Center)NavDestination() {Text(`NavDestinationContent${item}`)}.title(`NavDestinationTitle${item}`)}}})}}.title('主标题').mode(NavigationMode.Stack)//导航模式.titleMode(NavigationTitleMode.Mini)//标题模式.menus([  //设置菜单{ value: "", icon: './../../../resources/base/media/icon.png', action: () =&gt; {} },{ value: "", icon: './../../../resources/base/media/icon.png', action: () =&gt; {} }]).toolBar({ items: [  //设置工具栏{ value: 'func', icon: './../../../resources/base/media/icon.png', action: () =&gt; {} },{ value: 'func', icon: './../../../resources/base/media/icon.png', action: () =&gt; {} }] })在鸿蒙开发中，NavRouter和直接使用this.pageStack.pushDestinationByName来实现页面跳转的确可以达到相似的效果，但它们在设计理念和使用场景上有一些区别。以下是这两者之间的一些关键点和它们各自的用途：1.NavRouter的用途封装与简化：NavRouter是一个封装了导航逻辑的组件，专注于处理页面间的跳转和路由管理。它提供了一个更简洁的接口以实现页面跳转，可以让开发者更容易进行组件化开发，从而提高代码的可读性和可维护性。动态路由：在NavRouter中，可以方便地将导航逻辑和目标页面的内容结合在一起。通过NavRouter，不必手动管理目标页面的具体情况，可以直接利用组件的声明式来定义导航内容。2.this.pageStack.pushDestinationByName底层控制：使用this.pageStack.pushDestinationByName更接近底层的 API，适合需要更细粒度控制的情况。它通常适用于需要直接处理路由堆栈的场合。灵活性：虽然提供了更多的灵活性，但相应的也要求开发者自行管理跳转的状态、参数传递等，代码可能相对繁琐，尤其是在处理复杂的导航场景时。3. 何时使用NavRouter如果你的应用需要在多个组件之间频繁进行导航，并且希望维护清晰的结构和可读性，使用NavRouter是一个不错的选择。对于简单的情况，如果你的跳转逻辑不复杂，且需要直接控制页面堆栈的行为，使用this.pageStack.pushDestinationByName也完全可以。总结而言，虽然两者都可以实现页面跳转，但NavRouter提供了更高层次的抽象，更适合构建组件化的、可维护的导航结构，而this.pageStack.pushDestinationByName更适合需要底层控制的场景。选择使用哪一种方式，主要依赖于具体的开发需求和代码结构设计。简言之，NavRouter有点儿类似于折叠效果，所有内容已经拿到了，不需要再跳转到其他页面去请求，只需展开显示即可。则使用NavRouter可以完成在一个页面里实现想要的效果。Navigation使用步骤一、基本使用将Navigation组件作为基础页面的根容器，它能够管理整个页面的布局和导航。定义NavPathStack 实例，后面需要用它实现路由跳转和传参。Navigation通过页面栈对象 NavPathStack 提供的方法来操作页面，需要创建一个栈对象并传入Navigation中。以下是一个基本的Navigation组件结构示例：import { getZhiHuNews } from '../../common/api/zhihu';
import { BaseResponse,ErrorResp } from '../../common/bean/ApiTypes';
import { Log } from '../../utils/logutil'@Component
export default struct ZhiHu{@State message: string = 'Hello World';private arr: number[] = [1, 2, 3];//重要，定义NavPathStack 实例，后面需要用它实现路由跳转和传参pageStack: NavPathStack = new NavPathStack()// 组件生命周期aboutToAppear() {Log.info('ZhiHu aboutToAppear');getZhiHuNews("20241017").then((res) =&gt; {Log.debug(res.data.message)Log.debug("request","res.data.code:%{public}d",res.data.code)}).catch((err:BaseResponse&lt;ErrorResp&gt;) =&gt; {Log.debug("request","err.data.code:%d",err.data.code)Log.debug("request",err.data.message)});let list: number[] = []for (let i = 1; i &lt;= 10; i++) {list.push(i);}}// 组件生命周期aboutToDisappear() {Log.info('ZhiHu aboutToDisappear');}build() {Navigation(this.pageStack){Row() {Column({ space: 0 }) {// 标题栏Text("日报").size({ width: '100%', height: 50 }).backgroundColor("#28bff1").fontColor("#ffffff").textAlign(TextAlign.Center).fontSize("18fp")// 内容项Swiper(this.swiperController) {LazyForEach(this.data, (item: string) =&gt; {Stack({ alignContent: Alignment.Center }) {Text(item.toString()).width('100%').height(160).backgroundColor(0xAFEEEE).textAlign(TextAlign.Center).fontSize(30).zIndex(1).onClick(() =&gt; {//this.pageStack.pushPathByName("PageOne", item)this.pageStack.pushDestinationByName("PageOne", { id:"9773231" }).catch((e:Error)=&gt;{// 跳转失败，会返回错误码及错误信息console.log(`catch exception: ${JSON.stringify(e)}`)}).then(()=&gt;{// 跳转成功});})// 显示轮播图标题Text("特立独行的猫哥").padding(5).margin({ top:60 }).width('100%').height(50).textAlign(TextAlign.Center).maxLines(2).textOverflow({overflow:TextOverflow.Clip}).fontSize(20).fontColor(Color.White).opacity(100) // 设置标题的透明度 不透明度设为100%，表示完全不透明.backgroundColor('#808080AA') // 背景颜色设为透明.zIndex(2)}}, (item: string) =&gt; item)}.cachedCount(2).index(1).autoPlay(true).interval(4000).loop(true).indicatorInteractive(true).duration(1000).itemSpace(0).curve(Curve.Linear).onChange((index: number) =&gt; {console.info(index.toString())}).onGestureSwipe((index: number, extraInfo: SwiperAnimationEvent) =&gt; {console.info("index: " + index)console.info("current offset: " + extraInfo.currentOffset)}).height(160) // 设置高度List({ space: 12 }) {ForEach(this.arr, (item:string) =&gt; {ListItem() {NavRouter() {Text("NavRouter" + item).width("100%").height(72).backgroundColor('#FFFFFF').borderRadius(24).fontSize(16).fontWeight(500).textAlign(TextAlign.Center)NavDestination() {Text("NavDestinationContent" + item)}.title("NavDestinationTitle" + item)}}}, (item:string) =&gt; item)}}.size({ width: '100%', height: '100%' })}}.mode(NavigationMode.Stack).width('100%').height('100%')}
}注意：主页面使用Navigation组件作为根容器。而待跳转的子页面（目标页面），则是使用NavDestination作为根容器。二、配置系统路由表在进行页面跳转之前，需要在目录src/main/resources/base/profile中，创建文件route_map.json，手动注册跳转的页面。内容示例：{"routerMap": [{"name": "PageOne","pageSourceFile": "src/main/ets/pages/zhihu/detail/Detail.ets","buildFunction": "DetailPageBuilder","data": {"description": "this is Page Detail"}}]
}上面这个配置其实是系统路由表，从API version 12版本开始，Navigation支持系统跨模块的路由表方案，整体设计是将路由表方案下沉到系统中管理，即在需要路由的各个业务模块（HSP/HAR）中独立配置router_map.json文件，在触发路由跳转时，应用只需要通过NavPactStack进行路由跳转，此时系统会自动完成路由模块的动态加载、组件构建，并完成路由跳转功能，从而实现了开发层面的模块解耦。在这个示例中，name定义了路由名称，pageSourceFile指向页面的具体实现文件，buildFunction则指定了构建函数。开发者需确保这些字段的正确性和一致性，以便系统能正确识别和加载目标页面。路由表的基本概念在新的设计中，每个业务模块（HSP / HAR）都可以独立配置router_map.json文件。当应用触发路由跳转时，使用NavPathStack内置的接口，系统将自动处理模块的动态加载和组件构建，从而实现路由跳转功能。鸿蒙的系统路由表方案为应用开发提供了更加灵活和高效的路由管理方式。通过将路由表下沉到模块层，系统支持模块的独立配置和动态加载，不仅实现了开发层面的模块解耦，也大大简化了开发流程。对于正在进行鸿蒙应用开发来说，掌握这一机制将显著提升开发效率和应用性能。配置路由表注意事项注册正确：确保name和buildFunction与要跳转的页面一致。参数获取：在目标页面中，开发者可以使用this.pageStack.getParamByName方法获取传递的参数。路由模块解耦的优势独立性：每个业务模块可独立管理自己的路由信息，减少各模块间的相互依赖，提高开发效率。动态加载：通过系统自动处理模块的加载和组件构建，提升了应用的性能和响应速度。代码可维护性：在日后的维护中，开发者只需关注自身模块的路由配置和实现，对于系统的整体架构影响较小。路由跳转的实现使用NavPathStack进行路由跳转时，只需调用相应的方法并传递参数，系统会自动执行动态装载和跳转。例如：this.pageStack.pushDestinationByName("DetailPage", { id: "9773231" }).catch((error) =&gt; {console.error(`路由跳转失败: ${JSON.stringify(error)}`);}).then(() =&gt; {console.log("路由跳转成功");});在上述代码中，调用pushDestinationByName方法完成页面跳转，同时也可以传递必要的参数。其他一些操作还有：@Entry
@Component
struct Index {pathStack: NavPathStack = new NavPathStack()build() {// 设置NavPathStack并传入NavigationNavigation(this.pathStack) {...}.width('100%').height('100%')}.title("Navigation")
}// push page
this.pathStack.pushPath({ name: 'pageOne' })// pop page
this.pathStack.pop()
this.pathStack.popToIndex(1)
this.pathStack.popToName('pageOne')// replace page
this.pathStack.replacePath({ name: 'pageOne' })// clear all page
this.pathStack.clear()// 获取页面栈大小
let size = this.pathStack.size()// 删除栈中name为PageOne的所有页面
this.pathStack.removeByName("pageOne")// 删除指定索引的页面
this.pathStack.removeByIndexes([1,3,5])// 获取栈中所有页面name集合
this.pathStack.getAllPathName()// 获取索引为1的页面参数
this.pathStack.getParamByIndex(1)// 获取PageOne页面的参数
this.pathStack.getParamByName("pageOne")// 获取PageOne页面的索引集合
this.pathStack.getIndexByName("pageOne")
...目标页面的实现下面是目标页面DetailPage的一个简单示例：import { Log } from '../../../utils/logutil';@Builder
export function DetailPageBuilder() {DetailPage()
}@Component
export default struct DetailPage {@State message: string = 'Hello World';pageStack: NavPathStack = new NavPathStack();private pathInfo: NavPathInfo | null = null;// 组件生命周期aboutToAppear() {Log.info('Detail aboutToAppear');}// 组件生命周期aboutToDisappear() {Log.info('Detail aboutToDisappear');}build() {NavDestination() {Column({ space: 0 }) {Text("内容").width('100%').height('100%').textAlign(TextAlign.Center).fontSize("25fp")}}.title("日报详情").width('100%').height('100%').onReady(ctx =&gt; {this.pageStack = ctx.pathStack;const params = this.pageStack.getParamByName("PageOne");Log.info('接收到的参数:', params);});}
}组件生命周期与传递参数获取在DetailPage的onReady方法中，开发者可以获取到传递的参数。这里使用this.pageStack.getParamByName("PageOne")获取指定页面的参数。这样可以灵活应对数据的传递和使用。在导航页面中传递参数：使用this.pageStack.pushDestinationByName方法跳转到目标页面，并传递参数。例如：this.pageStack.pushDestinationByName("TargetPage", { id: "12345", name: "示例数据" }).catch((error) =&gt; {console.error(`路由跳转失败: ${JSON.stringify(error)}`);});import { Log } from '../../../utils/logutil';@Builder
export function TargetPageBuilder() {TargetPage();
}@Component
export default struct TargetPage {@State message: string = 'Hello from Target Page';pageStack: NavPathStack = new NavPathStack();private pathInfo: NavPathInfo | null = null;// 组件生命周期方法，页面即将出现aboutToAppear() {Log.info('TargetPage aboutToAppear');}// 组件生命周期方法，页面即将消失aboutToDisappear() {Log.info('TargetPage aboutToDisappear');}build() {NavDestination() {Column({ space: 0 }) {Text("内容").width('100%').height('100%').textAlign(TextAlign.Center).fontSize("25fp");}}.title("目标页面").width('100%').height('100%').onReady(ctx =&gt; {this.pageStack = ctx.pathStack; // 获取当前的路径栈const params = this.pageStack.getParamByName("TargetPage"); // 获取传递的参数Log.info('接收到的参数:', params);// 例如，如果传递的数据为 { id: "12345", name: "示例数据" }if (params) {const id = params.id; // 获取具体的参数值const name = params.name;Log.info(`获取到的 ID: ${id}, 名称: ${name}`);}});}
}总结通过使用Navigation组件及其相关接口，开发者可以方便地实现页面间的跳转和数据传递，从而构建丰富且流畅的用户界面。将页面逻辑与导航结构紧密结合，可以极大提升应用的可维护性和用户体验。希望本篇文章能帮助到您在鸿蒙应用开发中的导航实现。写在最后最后，推荐下笔者的业余开源app影视项目“爱影家”，推荐分享给与我一样喜欢免费观影的朋友。【注：该项目仅限于学习研究使用！请勿用于其他用途！】开源地址:爱影家app开源项目介绍及源码https://gitee.com/yyz116/imovie💖技术交流​​​​​​​其他资源文档中心--组件导航 (Navigation)(推荐)HarmonyOS：NavPathStack的详细使用说明以及示例-CSDN博客HarmonyOS Next开发学习手册——组件导航 (Navigation) (推荐)_鸿蒙 navigation-CSDN博客「HarmonyNextOS」页面路由跳转Router更换为Navigation_鸿蒙 routermap-CSDN博客CommonAppDevelopment/common/routermodule/README_AUTO_GENERATE.md · HarmonyOS-Cases/Cases - Gitee.comSystemRouterMap: 本项目提供系统路由的验证，运用系统路由表的方式，跳转到模块(HSP/HAR)的页面，可以不用配置不同跳转模块间的依赖。HarmonyOS ArkUI实战开发-页面导航（Navigation）_arkui navigation-CSDN博客【鸿蒙实战开发】基于Navigation的路由管理_navigation组件关联的路由栈提供了入栈方法-CSDN博客 OpenHarmony三方库中心仓--HMRouterhttps://juejin.cn/post/7372488623944630281如何开发一个OpenHarmony购物app导航页面-鸿蒙开发者社区-51CTO.COM鸿蒙HarmonyOS实战-ArkUI组件（Navigation）_harmonyos navigation-CSDN博客【HarmonyOS NEXT 】应用开发：ArkTS导航组件一（Navigation）_arkts navigation-CSDN博客https://zhuanlan.zhihu.com/p/1076639693http://www.ppmy.cn/news/1541047.html相关文章SpringCloud-持久层框架MyBatis Plus的使用与原理详解在现代微服务架构中&amp;#xff0c;SpringCloud 是一个非常流行的解决方案。而在数据库操作层面&amp;#xff0c;MyBatis Plus 作为 MyBatis 的增强工具&amp;#xff0c;能够简化开发&amp;#xff0c;提升效率&amp;#xff0c;特别是在开发企业级应用和分布式系统时尤为有用。本文将详细介绍 MyBat…阅读更多...C# OnnxRuntime yolo11 pest detection目录 
介绍 
效果 
模型信息 
项目 
代码 
下载 介绍 
官网地址&amp;#xff1a;GitHub - ultralytics/ultralytics: Ultralytics YOLO11 &amp;#x1f680; 
YoloV11&amp;#xff08;You Only Look Once V11&amp;#xff09;是一种计算机视觉算法&amp;#xff0c;用于目标检测。它是由 Joseph Redm…阅读更多...大模型之三十二-语音合成TTS(coqui) 之二 fine-tune在 大模型之三十-语音合成TTS(coqui)[shichaog CSDN]中提到了xttsv2的fine-tune。 
数据情况&amp;#xff1a; 
我是从bilibili up主小Lin说提取了一些视频&amp;#xff0c;然后进行了重新的fine-tune。 
训练结果 
如下图所示&amp;#xff0c;上面波形幅度较大的是xttsv2原始模型的结果&amp;am…阅读更多...Synchronized是非公平锁吗？那么如何体现？锁能降级吗？1. synchronized 是非公平锁吗&amp;#xff1f; 
是的&amp;#xff0c;synchronized 是非公平锁。 
什么是非公平锁&amp;#xff1f; 
非公平锁意味着线程获取锁的顺序并不一定按照先后到达的顺序&amp;#xff0c;也就是说&amp;#xff0c;后来的线程有可能插队&amp;#xff0c;优先获取锁。这种机制可以…阅读更多...python的Django框架入门Django是一个开源的Python Web开发框架&amp;#xff0c;遵循MTV&amp;#xff08;Model-Template-View&amp;#xff0c;模型-模板-视图&amp;#xff09;架构&amp;#xff0c;是一个全功能的Web框架&amp;#xff0c;Django的模块化设计允许开发者通过添加自定义插件、使用第三方库等方式来增强其功能。 
一…阅读更多...后端接收参数的几种常用注解目录 
一、RequestParam 
二、RequestBody 
三、PathVariable 
四、RequestHeader 
五、RequestAttribute 
六、RequestPart 
七、Valid 
一、RequestParam 
1.作用 
用于将请求中的 查询参数 或 表单参数 绑定到方法的参数上。支持 GET 和 POST 请求。 
2.使用方法 
GetMappin…阅读更多...第十四届单片机嵌入式蓝桥杯一、CubeMx配置 
&amp;#xff08;1&amp;#xff09;LED配置 &amp;#xff08;1&amp;#xff09;LED灯里面用到了SN74HC573ADWR锁存器&amp;#xff0c;这个锁存器有一个LE引脚,这个是我们芯片的锁存引脚&amp;#xff08;使能引脚&amp;#xff09;&amp;#xff0c;由PD2这个端口来控制的 
&amp;#xff08;2&amp;#xff…阅读更多...多模态技术的协同表现：从文本生成、语音合成到口型同步综合测评本文是针对多模态对话系统核心技术栈的使用效果和网络测评整理。 
测评内容基于用户体验&amp;#xff0c;侧重于从使用者角度出发&amp;#xff0c;讨论实际操作中的体验感受&amp;#xff0c;如技术的易用性、输出效果如文本的连贯性、语音的自然度、口型同步的准确性等。不涉及具体算法架构…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:42 +0000</pubDate>
    </item>
    <item>
      <title>SpringCloud-持久层框架MyBatis Plus的使用与原理详解</title>
      <link>https://www.ppmy.cn/news/1541046.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维SpringCloud-持久层框架MyBatis Plus的使用与原理详解news/2025/11/1 1:17:40/在现代微服务架构中，SpringCloud 是一个非常流行的解决方案。而在数据库操作层面，MyBatis Plus 作为 MyBatis 的增强工具，能够简化开发，提升效率，特别是在开发企业级应用和分布式系统时尤为有用。本文将详细介绍 MyBatis Plus 的使用方法、原理及其与 MyBatis 的区别。一、MyBatis Plus 简介1. MyBatis 简介MyBatis 是一个优秀的 ORM 框架，它通过 XML 或注解的方式将 Java 方法与 SQL 语句进行映射，并且可以灵活地控制 SQL 执行的各个细节，提供极高的自由度。它广泛应用于项目中，尤其是在对 SQL 语句要求比较严格的场景中。2. MyBatis Plus 介绍MyBatis Plus 是在 MyBatis 的基础上进行增强的持久层框架，专注于简化 MyBatis 的开发工作。它封装了常用的 CRUD 操作，极大地减少了开发者编写 SQL 的工作量。其目标是“更少的配置，更多的功能”，通过插件机制提供更强大的功能扩展。3. MyBatis 与 MyBatis Plus 的对比对比项MyBatisMyBatis Plus核心理念手写 SQL，灵活但需要大量的 SQL 代码自动化 CRUD，大大减少手写 SQLSQL 编写需要手动编写所有 SQL 语句提供默认 CRUD 接口，只需少量自定义 SQL复杂查询需要手动编写复杂 SQL 语句提供条件构造器，简化复杂查询操作分页需要手动编写分页逻辑内置分页插件，简化分页操作性能优化自定义 SQL 性能优化较灵活提供多种插件支持性能优化，如 SQL 执行分析插件代码生成不支持代码生成提供自动代码生成器，支持一键生成 Mapper、Service 等扩展能力通过配置扩展内置多种插件机制，支持扩展，如乐观锁、审计等通过这张对比表可以看出，MyBatis Plus 在开发效率和功能扩展上具有显著优势，尤其在企业级开发中，可以大大简化数据库操作的工作。二、MyBatis Plus 的基本使用1. 基础依赖和配置要在 SpringCloud 中使用 MyBatis Plus，首先需要在项目的pom.xml中添加 MyBatis Plus 的依赖：&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;/groupId&gt;&lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;&lt;version&gt;3.4.3.4&lt;/version&gt;&lt;/dependency&gt;接下来，在application.yml中配置数据库连接：spring:datasource:url:jdbc:mysql://localhost:3306/your_database?useSSL=falseusername:rootpassword:your_passwordmybatis-plus:mapper-locations:classpath:/mapper/*.xml2. 实体类的定义在 MyBatis Plus 中，实体类是映射数据库表的核心。在实体类中，常用@TableName和@TableId注解来映射表和主键。@Data@TableName("user")publicclassUser{@TableId(type=IdType.AUTO)privateLongid;privateStringname;privateIntegerage;privateStringemail;}3. Mapper 接口的编写Mapper 接口是 MyBatis Plus 提供的基础 CRUD 接口，继承BaseMapper就可以拥有常用的 CRUD 功能，无需额外编写 SQL。publicinterfaceUserMapperextendsBaseMapper&lt;User&gt;{}4. Service 层的实现为了更好地管理业务逻辑，通常会在 Service 层中编写业务方法。可以通过注入 Mapper 来实现对数据库的操作。@ServicepublicclassUserService{@AutowiredprivateUserMapperuserMapper;publicList&lt;User&gt;getAllUsers(){returnuserMapper.selectList(null);}publicvoidcreateUser(Useruser){userMapper.insert(user);}}三、MyBatis Plus 的高级用法1. 分页插件分页是大多数系统必备的功能。MyBatis Plus 内置分页插件，可以通过简单的配置实现高效分页。@AutowiredprivateUserMapperuserMapper;publicIPage&lt;User&gt;getUsersPage(intpageNum,intpageSize){Page&lt;User&gt;page=newPage&lt;&gt;(pageNum,pageSize);returnuserMapper.selectPage(page,null);}2. 乐观锁插件MyBatis Plus 支持乐观锁，防止多个用户同时修改同一条数据时的并发问题。可以通过在实体类上添加@Version注解来启用乐观锁功能。@Data@TableName("user")publicclassUser{@TableId(type=IdType.AUTO)privateLongid;privateStringname;privateIntegerage;privateStringemail;@VersionprivateIntegerversion;// 乐观锁版本字段}3. 多租户插件MyBatis Plus 提供了多租户插件，支持在多租户架构中为每个租户分配独立的数据空间，避免数据泄露或冲突。@ConfigurationpublicclassMybatisPlusConfig{@BeanpublicMybatisPlusInterceptormybatisPlusInterceptor(){MybatisPlusInterceptorinterceptor=newMybatisPlusInterceptor();// 多租户插件配置TenantLineInnerInterceptortenantLineInnerInterceptor=newTenantLineInnerInterceptor();interceptor.addInnerInterceptor(tenantLineInnerInterceptor);returninterceptor;}}4. 自动填充功能MyBatis Plus 支持自动填充常见字段，如创建时间、更新时间等。可以通过@TableField注解配置字段的自动填充策略。@Data@TableName("user")publicclassUser{@TableId(type=IdType.AUTO)privateLongid;privateStringname;privateIntegerage;privateStringemail;@TableField(fill=FieldFill.INSERT)privateDatecreateTime;// 自动填充创建时间@TableField(fill=FieldFill.INSERT_UPDATE)privateDateupdateTime;// 自动填充更新时间}5. 逻辑删除功能逻辑删除是一种不物理删除数据，而是通过标记删除状态的方式实现删除。MyBatis Plus 提供了逻辑删除支持，可以通过@TableLogic注解实现。@Data@TableName("user")publicclassUser{@TableId(type=IdType.AUTO)privateLongid;privateStringname;privateIntegerage;privateStringemail;@TableLogicprivateIntegerdeleted;// 逻辑删除字段}四、MyBatis Plus 原理详解MyBatis Plus 的原理是基于 MyBatis 的核心功能进行增强，主要通过插件机制和代码生成机制提供额外的功能支持。1. 基于 MyBatis 核心的增强MyBatis Plus 是对 MyBatis 的扩展和增强，在 MyBatis 的基础上引入了大量的插件和自定义功能。例如，通过扩展BaseMapper，MyBatis Plus 为所有实体类提供了基础的 CRUD 功能，开发者无需编写重复的 SQL。2. 插件机制MyBatis Plus 的插件机制非常灵活，允许开发者自定义插件，扩展 MyBatis Plus 的功能。MyBatis Plus 通过责任链模式处理多个插件请求，插件之间通过链式调用实现功能的扩展。常见的插件包括：分页插件：通过在 SQL 执行前后进行拦截，实现分页功能。多租户插件：通过在 SQL 中自动加入租户 ID 实现数据隔离。乐观锁插件：通过在 SQL 中自动加入版本号实现并发控制。3. 条件构造器MyBatis Plus 提供了条件构造器，简化了复杂 SQL 的拼装过程。条件构造器基于 Lambda 表达式，能够灵活构建动态查询条件，极大地简化了 SQL 的编写工作。QueryWrapper&lt;User&gt;queryWrapper=newQueryWrapper&lt;&gt;();queryWrapper.lambda().eq(User::getName,"Tom").ge(User::getAge,18);List&lt;User&gt;users=userMapper.selectList(queryWrapper);4. 自动代码生成器MyBatis Plus 提供了自动代码生成器，支持通过数据库表结构自动生成实体类、Mapper、Service、Controller 等层的代码，大幅减少手工编写代码的工作量。这一特性非常适合大型项目和快速迭代开发的场景。5. 动态 SQL 解析MyBatis Plus 支持动态 SQL 解析，通过注解或 XML 方式在运行时解析 SQL，生成最终的 SQL 语句。这种方式使得 SQL 编写更加灵活，能够适应复杂的业务逻辑。五、MyBatis Plus 的使用总结MyBatis Plus 在简化 MyBatis 开发工作、提升开发效率和灵活性方面表现出色。它不仅保留了 MyBatis 的强大 SQL 自定义功能，还通过插件机制和自动化工具提供了更多的扩展功能。MyBatis Plus 的核心优势：优势说明自动化 CRUD通过内置的 CRUD 接口，减少了开发者手动编写 SQL 的工作量。分页和多租户支持MyBatis Plus 内置分页和多租户插件，能够轻松处理复杂的查询场景。性能优化通过插件机制和缓存机制，MyBatis Plus 提供多种性能优化手段，保证高效的数据库操作。代码生成器自动生成常用代码，提升开发效率，加快项目开发速度。总之，MyBatis Plus 是 SpringCloud 项目中非常优秀的持久层框架。通过其丰富的功能和灵活的扩展机制，可以大幅提升开发效率，特别适用于大规模分布式系统的开发。http://www.ppmy.cn/news/1541046.html相关文章C# OnnxRuntime yolo11 pest detection目录 
介绍 
效果 
模型信息 
项目 
代码 
下载 介绍 
官网地址&amp;#xff1a;GitHub - ultralytics/ultralytics: Ultralytics YOLO11 &amp;#x1f680; 
YoloV11&amp;#xff08;You Only Look Once V11&amp;#xff09;是一种计算机视觉算法&amp;#xff0c;用于目标检测。它是由 Joseph Redm…阅读更多...大模型之三十二-语音合成TTS(coqui) 之二 fine-tune在 大模型之三十-语音合成TTS(coqui)[shichaog CSDN]中提到了xttsv2的fine-tune。 
数据情况&amp;#xff1a; 
我是从bilibili up主小Lin说提取了一些视频&amp;#xff0c;然后进行了重新的fine-tune。 
训练结果 
如下图所示&amp;#xff0c;上面波形幅度较大的是xttsv2原始模型的结果&amp;am…阅读更多...Synchronized是非公平锁吗？那么如何体现？锁能降级吗？1. synchronized 是非公平锁吗&amp;#xff1f; 
是的&amp;#xff0c;synchronized 是非公平锁。 
什么是非公平锁&amp;#xff1f; 
非公平锁意味着线程获取锁的顺序并不一定按照先后到达的顺序&amp;#xff0c;也就是说&amp;#xff0c;后来的线程有可能插队&amp;#xff0c;优先获取锁。这种机制可以…阅读更多...python的Django框架入门Django是一个开源的Python Web开发框架&amp;#xff0c;遵循MTV&amp;#xff08;Model-Template-View&amp;#xff0c;模型-模板-视图&amp;#xff09;架构&amp;#xff0c;是一个全功能的Web框架&amp;#xff0c;Django的模块化设计允许开发者通过添加自定义插件、使用第三方库等方式来增强其功能。 
一…阅读更多...后端接收参数的几种常用注解目录 
一、RequestParam 
二、RequestBody 
三、PathVariable 
四、RequestHeader 
五、RequestAttribute 
六、RequestPart 
七、Valid 
一、RequestParam 
1.作用 
用于将请求中的 查询参数 或 表单参数 绑定到方法的参数上。支持 GET 和 POST 请求。 
2.使用方法 
GetMappin…阅读更多...第十四届单片机嵌入式蓝桥杯一、CubeMx配置 
&amp;#xff08;1&amp;#xff09;LED配置 &amp;#xff08;1&amp;#xff09;LED灯里面用到了SN74HC573ADWR锁存器&amp;#xff0c;这个锁存器有一个LE引脚,这个是我们芯片的锁存引脚&amp;#xff08;使能引脚&amp;#xff09;&amp;#xff0c;由PD2这个端口来控制的 
&amp;#xff08;2&amp;#xff…阅读更多...多模态技术的协同表现：从文本生成、语音合成到口型同步综合测评本文是针对多模态对话系统核心技术栈的使用效果和网络测评整理。 
测评内容基于用户体验&amp;#xff0c;侧重于从使用者角度出发&amp;#xff0c;讨论实际操作中的体验感受&amp;#xff0c;如技术的易用性、输出效果如文本的连贯性、语音的自然度、口型同步的准确性等。不涉及具体算法架构…阅读更多...[C#][winform]基于yolov5的驾驶员抽烟打电话安全带检测系统C#源码+onnx模型+评估指标曲线+精美GUI界面【重要说明】 
该系统以opencvsharp作图像处理,onnxruntime做推理引擎&amp;#xff0c;使用CPU进行推理&amp;#xff0c;适合有显卡或者没有显卡windows x64系统均可&amp;#xff0c;不支持macOS和Linux系统&amp;#xff0c;不支持x86的windows操作系统。由于采用CPU推理&amp;#xff0c;要比GPU慢。…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:40 +0000</pubDate>
    </item>
    <item>
      <title>C# OnnxRuntime yolo11 pest detection</title>
      <link>https://www.ppmy.cn/news/1541045.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维C# OnnxRuntime yolo11 pest detectionnews/2025/11/1 1:17:39/目录介绍效果模型信息项目代码下载介绍官网地址：GitHub - ultralytics/ultralytics: Ultralytics YOLO11 🚀YoloV11（You Only Look Once V11）是一种计算机视觉算法，用于目标检测。它是由 Joseph Redmon 提出的卷积神经网（CNN）模型，是Yolo系列算法中的最新版本。YoloV11相对于前几个版本来说，主要有以下几点改进：1）更轻量级；2）更加准确；3）更快的推理速度。YoloV11相对于其他目标检测算法具有更轻量级的优势。这是因为它的核心架构检测网络使用了更多的轻量级卷积和池化层，从而将其大小缩小到仅有20MB大小。这使得它在处理较小的图像上具有显著的优势，也使得它更易于部署到基于移动设备和嵌入式设备的应用中。YoloV11在准确性方面也有了显著的提升。这是因为它引入了更多的改进和优化来提高检测性能。例如，它使用了更多的卷积层来提取更丰富的特征信息，同时还使用了更多的跳跃连接来让高层特征信息能够被直接传递到低层特征信息中，从而在物体大小和位置检测中提高了准确性。YoloV11具有更高的推理速度。这是因为它采用了一些优秀的加速技术，如SPPnet和SAM，以提高网络的能力和速度。此外，通过与其他检测算法比较，我们可以看到，YoloV11在GPU测试中的运行速度相对较快，可以在实时检测中实现准确性和速度的平衡。YoloV11是一种新型的轻量级、高精度、高速度的目标检测算法，具有广泛的应用前景，尤其是在基于嵌入式和移动设备的应用中具有巨大的潜力。效果模型信息Model Properties-------------------------date：2024-10-22T08:46:38.254437author：Ultralyticsversion：8.3.5task：detectlicense：AGPL-3.0 License (https://ultralytics.com/license)docs：https://docs.ultralytics.comstride：32batch：1imgsz：[736, 736]names：{0: 'rice leaf roller', 1: 'rice leaf caterpillar', 2: 'paddy stem maggot', 3: 'asiatic rice borer', 4: 'yellow rice borer', 5: 'rice gall midge', 6: 'Rice Stemfly', 7: 'brown plant hopper', 8: 'white backed plant hopper', 9: 'small brown plant hopper', 10: 'rice water weevil', 11: 'rice leafhopper', 12: 'grain spreader thrips', 13: 'rice shell pest', 14: 'grub', 15: 'mole cricket', 16: 'wireworm', 17: 'white margined moth', 18: 'black cutworm', 19: 'large cutworm', 20: 'yellow cutworm', 21: 'red spider', 22: 'corn borer', 23: 'army worm', 24: 'aphids', 25: 'Potosiabre vitarsis', 26: 'peach borer', 27: 'english grain aphid', 28: 'green bug', 29: 'bird cherry-oataphid', 30: 'wheat blossom midge', 31: 'penthaleus major', 32: 'longlegged spider mite', 33: 'wheat phloeothrips', 34: 'wheat sawfly', 35: 'cerodonta denticornis', 36: 'beet fly', 37: 'flea beetle', 38: 'cabbage army worm', 39: 'beet army worm', 40: 'Beet spot flies', 41: 'meadow moth', 42: 'beet weevil', 43: 'sericaorient alismots chulsky', 44: 'alfalfa weevil', 45: 'flax budworm', 46: 'alfalfa plant bug', 47: 'tarnished plant bug', 48: 'Locustoidea', 49: 'lytta polita', 50: 'legume blister beetle', 51: 'blister beetle', 52: 'therioaphis maculata Buckton', 53: 'odontothrips loti', 54: 'Thrips', 55: 'alfalfa seed chalcid', 56: 'Pieris canidia', 57: 'Apolygus lucorum', 58: 'Limacodidae', 59: 'Viteus vitifoliae', 60: 'Colomerus vitis', 61: 'Brevipoalpus lewisi McGregor', 62: 'oides decempunctata', 63: 'Polyphagotars onemus latus', 64: 'Pseudococcus comstocki Kuwana', 65: 'parathrene regalis', 66: 'Ampelophaga', 67: 'Lycorma delicatula', 68: 'Xylotrechus', 69: 'Cicadella viridis', 70: 'Miridae', 71: 'Trialeurodes vaporariorum', 72: 'Erythroneura apicalis', 73: 'Papilio xuthus', 74: 'Panonchus citri McGregor', 75: 'Phyllocoptes oleiverus ashmead', 76: 'Icerya purchasi Maskell', 77: 'Unaspis yanonensis', 78: 'Ceroplastes rubens', 79: 'Chrysomphalus aonidum', 80: 'Parlatoria zizyphus Lucus', 81: 'Nipaecoccus vastalor', 82: 'Aleurocanthus spiniferus', 83: 'Tetradacus c Bactrocera minax ', 84: 'Dacus dorsalis(Hendel)', 85: 'Bactrocera tsuneonis', 86: 'Prodenia litura', 87: 'Adristyrannus', 88: 'Phyllocnistis citrella Stainton', 89: 'Toxoptera citricidus', 90: 'Toxoptera aurantii', 91: 'Aphis citricola Vander Goot', 92: 'Scirtothrips dorsalis Hood', 93: 'Dasineura sp', 94: 'Lawana imitata Melichar', 95: 'Salurnis marginella Guerr', 96: 'Deporaus marginatus Pascoe', 97: 'Chlumetia transversa', 98: 'Mango flat beak leafhopper', 99: 'Rhytidodera bowrinii white', 100: 'Sternochetus frigidus', 101: 'Cicadellidae'}---------------------------------------------------------------Inputs-------------------------name：imagestensor：Float[1, 3, 736, 736]---------------------------------------------------------------Outputs-------------------------name：output0tensor：Float[1, 106, 11109]---------------------------------------------------------------项目代码using Microsoft.ML.OnnxRuntime;
using Microsoft.ML.OnnxRuntime.Tensors;
using OpenCvSharp;
using OpenCvSharp.Dnn;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;namespace Onnx_Demo
{public partial class Form1 : Form{public Form1(){InitializeComponent();}string fileFilter = "*.*|*.bmp;*.jpg;*.jpeg;*.tiff;*.tiff;*.png";string image_path = "";string model_path;string classer_path;public string[] class_names;public int class_num;DateTime dt1 = DateTime.Now;DateTime dt2 = DateTime.Now;int input_height;int input_width;float ratio_height;float ratio_width;InferenceSession onnx_session;int box_num;float conf_threshold;float nms_threshold;/// &lt;summary&gt;/// 选择图片/// &lt;/summary&gt;/// &lt;param name="sender"&gt;&lt;/param&gt;/// &lt;param name="e"&gt;&lt;/param&gt;private void button1_Click(object sender, EventArgs e){OpenFileDialog ofd = new OpenFileDialog();ofd.Filter = fileFilter;if (ofd.ShowDialog() != DialogResult.OK) return;pictureBox1.Image = null;image_path = ofd.FileName;pictureBox1.Image = new Bitmap(image_path);textBox1.Text = "";pictureBox2.Image = null;}/// &lt;summary&gt;/// 推理/// &lt;/summary&gt;/// &lt;param name="sender"&gt;&lt;/param&gt;/// &lt;param name="e"&gt;&lt;/param&gt;private void button2_Click(object sender, EventArgs e){if (image_path == ""){return;}button2.Enabled = false;pictureBox2.Image = null;textBox1.Text = "";Application.DoEvents();Mat image = new Mat(image_path);//图片缩放int height = image.Rows;int width = image.Cols;Mat temp_image = image.Clone();if (height &gt; input_height || width &gt; input_width){float scale = Math.Min((float)input_height / height, (float)input_width / width);OpenCvSharp.Size new_size = new OpenCvSharp.Size((int)(width * scale), (int)(height * scale));Cv2.Resize(image, temp_image, new_size);}ratio_height = (float)height / temp_image.Rows;ratio_width = (float)width / temp_image.Cols;Mat input_img = new Mat();Cv2.CopyMakeBorder(temp_image, input_img, 0, input_height - temp_image.Rows, 0, input_width - temp_image.Cols, BorderTypes.Constant, 0);//Cv2.ImShow("input_img", input_img);//输入TensorTensor&lt;float&gt; input_tensor = new DenseTensor&lt;float&gt;(new[] { 1, 3, 736, 736 });for (int y = 0; y &lt; input_img.Height; y++){for (int x = 0; x &lt; input_img.Width; x++){input_tensor[0, 0, y, x] = input_img.At&lt;Vec3b&gt;(y, x)[0] / 255f;input_tensor[0, 1, y, x] = input_img.At&lt;Vec3b&gt;(y, x)[1] / 255f;input_tensor[0, 2, y, x] = input_img.At&lt;Vec3b&gt;(y, x)[2] / 255f;}}List&lt;NamedOnnxValue&gt; input_container = new List&lt;NamedOnnxValue&gt;{NamedOnnxValue.CreateFromTensor("images", input_tensor)};//推理dt1 = DateTime.Now;var ort_outputs = onnx_session.Run(input_container).ToArray();dt2 = DateTime.Now;float[] data = Transpose(ort_outputs[0].AsTensor&lt;float&gt;().ToArray(), 4 + class_num, box_num);float[] confidenceInfo = new float[class_num];float[] rectData = new float[4];List&lt;DetectionResult&gt; detResults = new List&lt;DetectionResult&gt;();for (int i = 0; i &lt; box_num; i++){Array.Copy(data, i * (class_num + 4), rectData, 0, 4);Array.Copy(data, i * (class_num + 4) + 4, confidenceInfo, 0, class_num);float score = confidenceInfo.Max(); // 获取最大值int maxIndex = Array.IndexOf(confidenceInfo, score); // 获取最大值的位置int _centerX = (int)(rectData[0] * ratio_width);int _centerY = (int)(rectData[1] * ratio_height);int _width = (int)(rectData[2] * ratio_width);int _height = (int)(rectData[3] * ratio_height);detResults.Add(new DetectionResult(maxIndex,class_names[maxIndex],new Rect(_centerX - _width / 2, _centerY - _height / 2, _width, _height),score));}//NMSCvDnn.NMSBoxes(detResults.Select(x =&gt; x.Rect), detResults.Select(x =&gt; x.Confidence), conf_threshold, nms_threshold, out int[] indices);detResults = detResults.Where((x, index) =&gt; indices.Contains(index)).ToList();//绘制结果Mat result_image = image.Clone();foreach (DetectionResult r in detResults){Cv2.PutText(result_image, $"{r.Class}:{r.Confidence:P0}", new OpenCvSharp.Point(r.Rect.TopLeft.X, r.Rect.TopLeft.Y - 10), HersheyFonts.HersheySimplex, 1, Scalar.Red, 2);Cv2.Rectangle(result_image, r.Rect, Scalar.Red, thickness: 2);}pictureBox2.Image = new Bitmap(result_image.ToMemoryStream());textBox1.Text = "推理耗时:" + (dt2 - dt1).TotalMilliseconds + "ms";button2.Enabled = true;}/// &lt;summary&gt;///窗体加载/// &lt;/summary&gt;/// &lt;param name="sender"&gt;&lt;/param&gt;/// &lt;param name="e"&gt;&lt;/param&gt;private void Form1_Load(object sender, EventArgs e){model_path = "model/yolo11-pest-detection.onnx";//创建输出会话，用于输出模型读取信息SessionOptions options = new SessionOptions();options.LogSeverityLevel = OrtLoggingLevel.ORT_LOGGING_LEVEL_INFO;options.AppendExecutionProvider_CPU(0);// 设置为CPU上运行// 创建推理模型类，读取模型文件onnx_session = new InferenceSession(model_path, options);//model_path 为onnx模型文件的路径input_height = 736;input_width = 736;box_num = 11109;conf_threshold = 0.25f;nms_threshold = 0.5f;classer_path = "model/lable.txt";class_names = File.ReadAllLines(classer_path, Encoding.UTF8);class_num = class_names.Length;image_path = "test_img/1.jpg";pictureBox1.Image = new Bitmap(image_path);}/// &lt;summary&gt;/// 保存/// &lt;/summary&gt;/// &lt;param name="sender"&gt;&lt;/param&gt;/// &lt;param name="e"&gt;&lt;/param&gt;private void button3_Click(object sender, EventArgs e){if (pictureBox2.Image == null){return;}Bitmap output = new Bitmap(pictureBox2.Image);SaveFileDialog sdf = new SaveFileDialog();sdf.Title = "保存";sdf.Filter = "Images (*.jpg)|*.jpg|Images (*.png)|*.png|Images (*.bmp)|*.bmp|Images (*.emf)|*.emf|Images (*.exif)|*.exif|Images (*.gif)|*.gif|Images (*.ico)|*.ico|Images (*.tiff)|*.tiff|Images (*.wmf)|*.wmf";if (sdf.ShowDialog() == DialogResult.OK){switch (sdf.FilterIndex){case 1:{output.Save(sdf.FileName, ImageFormat.Jpeg);break;}case 2:{output.Save(sdf.FileName, ImageFormat.Png);break;}case 3:{output.Save(sdf.FileName, ImageFormat.Bmp);break;}case 4:{output.Save(sdf.FileName, ImageFormat.Emf);break;}case 5:{output.Save(sdf.FileName, ImageFormat.Exif);break;}case 6:{output.Save(sdf.FileName, ImageFormat.Gif);break;}case 7:{output.Save(sdf.FileName, ImageFormat.Icon);break;}case 8:{output.Save(sdf.FileName, ImageFormat.Tiff);break;}case 9:{output.Save(sdf.FileName, ImageFormat.Wmf);break;}}MessageBox.Show("保存成功，位置：" + sdf.FileName);}}private void pictureBox1_DoubleClick(object sender, EventArgs e){ShowNormalImg(pictureBox1.Image);}private void pictureBox2_DoubleClick(object sender, EventArgs e){ShowNormalImg(pictureBox2.Image);}public void ShowNormalImg(Image img){if (img == null) return;frmShow frm = new frmShow();frm.Width = Screen.PrimaryScreen.Bounds.Width;frm.Height = Screen.PrimaryScreen.Bounds.Height;if (frm.Width &gt; img.Width){frm.Width = img.Width;}if (frm.Height &gt; img.Height){frm.Height = img.Height;}bool b = frm.richTextBox1.ReadOnly;Clipboard.SetDataObject(img, true);frm.richTextBox1.ReadOnly = false;frm.richTextBox1.Paste(DataFormats.GetFormat(DataFormats.Bitmap));frm.richTextBox1.ReadOnly = b;frm.ShowDialog();}public unsafe float[] Transpose(float[] tensorData, int rows, int cols){float[] transposedTensorData = new float[tensorData.Length];fixed (float* pTensorData = tensorData){fixed (float* pTransposedData = transposedTensorData){for (int i = 0; i &lt; rows; i++){for (int j = 0; j &lt; cols; j++){int index = i * cols + j;int transposedIndex = j * rows + i;pTransposedData[transposedIndex] = pTensorData[index];}}}}return transposedTensorData;}}public class DetectionResult{public DetectionResult(int ClassId, string Class, Rect Rect, float Confidence){this.ClassId = ClassId;this.Confidence = Confidence;this.Rect = Rect;this.Class = Class;}public string Class { get; set; }public int ClassId { get; set; }public float Confidence { get; set; }public Rect Rect { get; set; }}}下载源码下载http://www.ppmy.cn/news/1541045.html相关文章大模型之三十二-语音合成TTS(coqui) 之二 fine-tune在 大模型之三十-语音合成TTS(coqui)[shichaog CSDN]中提到了xttsv2的fine-tune。 
数据情况&amp;#xff1a; 
我是从bilibili up主小Lin说提取了一些视频&amp;#xff0c;然后进行了重新的fine-tune。 
训练结果 
如下图所示&amp;#xff0c;上面波形幅度较大的是xttsv2原始模型的结果&amp;am…阅读更多...Synchronized是非公平锁吗？那么如何体现？锁能降级吗？1. synchronized 是非公平锁吗&amp;#xff1f; 
是的&amp;#xff0c;synchronized 是非公平锁。 
什么是非公平锁&amp;#xff1f; 
非公平锁意味着线程获取锁的顺序并不一定按照先后到达的顺序&amp;#xff0c;也就是说&amp;#xff0c;后来的线程有可能插队&amp;#xff0c;优先获取锁。这种机制可以…阅读更多...python的Django框架入门Django是一个开源的Python Web开发框架&amp;#xff0c;遵循MTV&amp;#xff08;Model-Template-View&amp;#xff0c;模型-模板-视图&amp;#xff09;架构&amp;#xff0c;是一个全功能的Web框架&amp;#xff0c;Django的模块化设计允许开发者通过添加自定义插件、使用第三方库等方式来增强其功能。 
一…阅读更多...后端接收参数的几种常用注解目录 
一、RequestParam 
二、RequestBody 
三、PathVariable 
四、RequestHeader 
五、RequestAttribute 
六、RequestPart 
七、Valid 
一、RequestParam 
1.作用 
用于将请求中的 查询参数 或 表单参数 绑定到方法的参数上。支持 GET 和 POST 请求。 
2.使用方法 
GetMappin…阅读更多...第十四届单片机嵌入式蓝桥杯一、CubeMx配置 
&amp;#xff08;1&amp;#xff09;LED配置 &amp;#xff08;1&amp;#xff09;LED灯里面用到了SN74HC573ADWR锁存器&amp;#xff0c;这个锁存器有一个LE引脚,这个是我们芯片的锁存引脚&amp;#xff08;使能引脚&amp;#xff09;&amp;#xff0c;由PD2这个端口来控制的 
&amp;#xff08;2&amp;#xff…阅读更多...多模态技术的协同表现：从文本生成、语音合成到口型同步综合测评本文是针对多模态对话系统核心技术栈的使用效果和网络测评整理。 
测评内容基于用户体验&amp;#xff0c;侧重于从使用者角度出发&amp;#xff0c;讨论实际操作中的体验感受&amp;#xff0c;如技术的易用性、输出效果如文本的连贯性、语音的自然度、口型同步的准确性等。不涉及具体算法架构…阅读更多...[C#][winform]基于yolov5的驾驶员抽烟打电话安全带检测系统C#源码+onnx模型+评估指标曲线+精美GUI界面【重要说明】 
该系统以opencvsharp作图像处理,onnxruntime做推理引擎&amp;#xff0c;使用CPU进行推理&amp;#xff0c;适合有显卡或者没有显卡windows x64系统均可&amp;#xff0c;不支持macOS和Linux系统&amp;#xff0c;不支持x86的windows操作系统。由于采用CPU推理&amp;#xff0c;要比GPU慢。…阅读更多...【ubuntu18.04】ubuntu18.04安装vmware-tools之后立即适应窗口为灰色，窗口不会自适应问题描述 
ubuntu18.04安装vmware-tools 点击查看&amp;#xff0c;看到立即适应窗口为灰色 
解决方案 
关闭虚拟机 
编辑此虚拟机 设置 注意        取消勾选拉伸模式 
查看可以看到所有选项可选择 注意&amp;#xff1a; 不要全屏的时候查看&amp;#xff0c;全屏看到的立即适应窗口就会显示…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:39 +0000</pubDate>
    </item>
    <item>
      <title>大模型之三十二-语音合成TTS(coqui) 之二 fine-tune</title>
      <link>https://www.ppmy.cn/news/1541044.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维大模型之三十二-语音合成TTS(coqui) 之二 fine-tunenews/2025/11/1 1:17:38/在 大模型之三十-语音合成TTS(coqui)[shichaog @CSDN]中提到了xttsv2的fine-tune。数据情况：我是从bilibili up主小Lin说提取了一些视频，然后进行了重新的fine-tune。训练结果如下图所示，上面波形幅度较大的是xttsv2原始模型的结果，第二个是fine-tune了290000 step之后的结果，因为CSDN没法直接放wav文件，上传到CSDN上了，但是不知道怎么变成了VIP资源，如果想要的，可以留言，超过10+人我做个网盘链接供大家下载。后续计划后续会训练vits模型以和xttsv2的效果做对比改进中文编码，只支持中英文以提高效率&amp;性能增加文本上下文，以合成合适情感、情境的语音http://www.ppmy.cn/news/1541044.html相关文章Synchronized是非公平锁吗？那么如何体现？锁能降级吗？1. synchronized 是非公平锁吗&amp;#xff1f; 
是的&amp;#xff0c;synchronized 是非公平锁。 
什么是非公平锁&amp;#xff1f; 
非公平锁意味着线程获取锁的顺序并不一定按照先后到达的顺序&amp;#xff0c;也就是说&amp;#xff0c;后来的线程有可能插队&amp;#xff0c;优先获取锁。这种机制可以…阅读更多...python的Django框架入门Django是一个开源的Python Web开发框架&amp;#xff0c;遵循MTV&amp;#xff08;Model-Template-View&amp;#xff0c;模型-模板-视图&amp;#xff09;架构&amp;#xff0c;是一个全功能的Web框架&amp;#xff0c;Django的模块化设计允许开发者通过添加自定义插件、使用第三方库等方式来增强其功能。 
一…阅读更多...后端接收参数的几种常用注解目录 
一、RequestParam 
二、RequestBody 
三、PathVariable 
四、RequestHeader 
五、RequestAttribute 
六、RequestPart 
七、Valid 
一、RequestParam 
1.作用 
用于将请求中的 查询参数 或 表单参数 绑定到方法的参数上。支持 GET 和 POST 请求。 
2.使用方法 
GetMappin…阅读更多...第十四届单片机嵌入式蓝桥杯一、CubeMx配置 
&amp;#xff08;1&amp;#xff09;LED配置 &amp;#xff08;1&amp;#xff09;LED灯里面用到了SN74HC573ADWR锁存器&amp;#xff0c;这个锁存器有一个LE引脚,这个是我们芯片的锁存引脚&amp;#xff08;使能引脚&amp;#xff09;&amp;#xff0c;由PD2这个端口来控制的 
&amp;#xff08;2&amp;#xff…阅读更多...多模态技术的协同表现：从文本生成、语音合成到口型同步综合测评本文是针对多模态对话系统核心技术栈的使用效果和网络测评整理。 
测评内容基于用户体验&amp;#xff0c;侧重于从使用者角度出发&amp;#xff0c;讨论实际操作中的体验感受&amp;#xff0c;如技术的易用性、输出效果如文本的连贯性、语音的自然度、口型同步的准确性等。不涉及具体算法架构…阅读更多...[C#][winform]基于yolov5的驾驶员抽烟打电话安全带检测系统C#源码+onnx模型+评估指标曲线+精美GUI界面【重要说明】 
该系统以opencvsharp作图像处理,onnxruntime做推理引擎&amp;#xff0c;使用CPU进行推理&amp;#xff0c;适合有显卡或者没有显卡windows x64系统均可&amp;#xff0c;不支持macOS和Linux系统&amp;#xff0c;不支持x86的windows操作系统。由于采用CPU推理&amp;#xff0c;要比GPU慢。…阅读更多...【ubuntu18.04】ubuntu18.04安装vmware-tools之后立即适应窗口为灰色，窗口不会自适应问题描述 
ubuntu18.04安装vmware-tools 点击查看&amp;#xff0c;看到立即适应窗口为灰色 
解决方案 
关闭虚拟机 
编辑此虚拟机 设置 注意        取消勾选拉伸模式 
查看可以看到所有选项可选择 注意&amp;#xff1a; 不要全屏的时候查看&amp;#xff0c;全屏看到的立即适应窗口就会显示…阅读更多...Android15使用Winscope使用 Winscope 跟踪窗口转换 | Android Open Source Project (google.cn) 
Winscope 是一款 Web 工具&amp;#xff0c;可以让用户在动画和转换期间和之后记录、重放和分析多个系统服务的状态。Winscope 将所有相关的系统服务状态记录在一个跟踪文件中。使用带有跟踪文件的 Winscope…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:38 +0000</pubDate>
    </item>
    <item>
      <title>Synchronized是非公平锁吗？那么如何体现？锁能降级吗？</title>
      <link>https://www.ppmy.cn/news/1541043.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Synchronized是非公平锁吗？那么如何体现？锁能降级吗？news/2025/11/1 1:17:37/1.synchronized是非公平锁吗？是的，synchronized是非公平锁。什么是非公平锁？非公平锁意味着线程获取锁的顺序并不一定按照先后到达的顺序，也就是说，后来的线程有可能插队，优先获取锁。这种机制可以减少线程切换的开销，提高系统的吞吐量。如何体现synchronized的非公平性？sychronized的非公平性体现在JVM的内部实现上。当多个线程竞争锁时，synchronized并不会按照线程请求锁的顺序来安排锁的获取，而是让竞争最激烈的线程尽快获取锁。这种设计有助于避免某些线程长期得不到锁的情况，也能加快线程获取锁的速度。2. 锁能降级吗？在synchronized机制下，锁不能降级。什么是锁降级？锁降级是指将持有的高等级锁（如写锁）降级为低等级锁（如读锁）的过程。常见于可重入锁（如ReentrantReadWriteLock）中，降级可以通过以下过程实现：持有写锁时，如果希望多个线程进行只读访问，先获取读锁再释放写锁。降级允许系统在保持一定并发性能的同时，提供必要的线程安全性。但在synchronized机制中，锁的持有要么是独占锁（写锁），要么没有持有，不支持类似读写锁的降级行为。3.synchronized的实现机制synchronized是 JVM 内置的锁机制，基于对象头的MarkWord字段，通过偏向锁、轻量级锁和重量级锁来实现对锁的优化。偏向锁：当只有一个线程竞争时，线程偏向锁住对象，几乎无性能损耗。轻量级锁：当多个线程开始竞争时，会升级为轻量级锁，通过自旋等待的方式减少上下文切换。重量级锁：当自旋等待的时间过长或线程数量增多时，锁升级为重量级锁，涉及线程阻塞和唤醒机制，性能相对较差。在synchronized中，锁升级是可以的（从偏向锁到重量级锁），但锁降级是不可用的。4. 锁的非公平性和实现的设计考量非公平锁在高并发情况下可以提升系统的吞吐量。synchronized采用非公平锁的原因是：避免线程饥饿：如果采用公平锁，会导致后续线程等待锁的时间较长，增加了线程切换的成本。提高吞吐量：非公平锁允许后来的线程有机会获取锁，减少了线程排队等待的时间，提高了锁的获取速度和系统的整体效率。5. 如何检测synchronized的非公平性可以通过设计一个多线程竞争锁的场景来观察：publicclassSynchronizedFairnessTest{privatestaticintcounter=0;publicsynchronizedstaticvoidincrement(){counter++;System.out.println(Thread.currentThread().getName()+" incremented counter to: "+counter);}publicstaticvoidmain(String[]args){Runnabletask=()-&gt;{for(inti=0;i&lt;5;i++){increment();try{Thread.sleep(50);// 模拟其他操作}catch(InterruptedExceptione){e.printStackTrace();}}};// 创建多个线程，模拟并发Threadt1=newThread(task,"Thread 1");Threadt2=newThread(task,"Thread 2");Threadt3=newThread(task,"Thread 3");t1.start();t2.start();t3.start();}}在多线程的环境下，Thread 1、Thread 2和Thread 3的执行顺序是非确定性的，因为synchronized不保证公平性。6. 业务场景和问题解决在高并发业务场景下，比如订单处理系统中多个线程同时处理订单生成操作时，synchronized非公平锁可以提高吞吐量，让高并发的请求迅速得到处理。但在某些对顺序要求严格的场景下（如日志系统、数据审计），这种非公平性可能会带来问题。因此，在需要严格控制线程获取锁顺序的场景中，可以考虑使用ReentrantLock并设置其为公平锁。http://www.ppmy.cn/news/1541043.html相关文章python的Django框架入门Django是一个开源的Python Web开发框架&amp;#xff0c;遵循MTV&amp;#xff08;Model-Template-View&amp;#xff0c;模型-模板-视图&amp;#xff09;架构&amp;#xff0c;是一个全功能的Web框架&amp;#xff0c;Django的模块化设计允许开发者通过添加自定义插件、使用第三方库等方式来增强其功能。 
一…阅读更多...后端接收参数的几种常用注解目录 
一、RequestParam 
二、RequestBody 
三、PathVariable 
四、RequestHeader 
五、RequestAttribute 
六、RequestPart 
七、Valid 
一、RequestParam 
1.作用 
用于将请求中的 查询参数 或 表单参数 绑定到方法的参数上。支持 GET 和 POST 请求。 
2.使用方法 
GetMappin…阅读更多...第十四届单片机嵌入式蓝桥杯一、CubeMx配置 
&amp;#xff08;1&amp;#xff09;LED配置 &amp;#xff08;1&amp;#xff09;LED灯里面用到了SN74HC573ADWR锁存器&amp;#xff0c;这个锁存器有一个LE引脚,这个是我们芯片的锁存引脚&amp;#xff08;使能引脚&amp;#xff09;&amp;#xff0c;由PD2这个端口来控制的 
&amp;#xff08;2&amp;#xff…阅读更多...多模态技术的协同表现：从文本生成、语音合成到口型同步综合测评本文是针对多模态对话系统核心技术栈的使用效果和网络测评整理。 
测评内容基于用户体验&amp;#xff0c;侧重于从使用者角度出发&amp;#xff0c;讨论实际操作中的体验感受&amp;#xff0c;如技术的易用性、输出效果如文本的连贯性、语音的自然度、口型同步的准确性等。不涉及具体算法架构…阅读更多...[C#][winform]基于yolov5的驾驶员抽烟打电话安全带检测系统C#源码+onnx模型+评估指标曲线+精美GUI界面【重要说明】 
该系统以opencvsharp作图像处理,onnxruntime做推理引擎&amp;#xff0c;使用CPU进行推理&amp;#xff0c;适合有显卡或者没有显卡windows x64系统均可&amp;#xff0c;不支持macOS和Linux系统&amp;#xff0c;不支持x86的windows操作系统。由于采用CPU推理&amp;#xff0c;要比GPU慢。…阅读更多...【ubuntu18.04】ubuntu18.04安装vmware-tools之后立即适应窗口为灰色，窗口不会自适应问题描述 
ubuntu18.04安装vmware-tools 点击查看&amp;#xff0c;看到立即适应窗口为灰色 
解决方案 
关闭虚拟机 
编辑此虚拟机 设置 注意        取消勾选拉伸模式 
查看可以看到所有选项可选择 注意&amp;#xff1a; 不要全屏的时候查看&amp;#xff0c;全屏看到的立即适应窗口就会显示…阅读更多...Android15使用Winscope使用 Winscope 跟踪窗口转换 | Android Open Source Project (google.cn) 
Winscope 是一款 Web 工具&amp;#xff0c;可以让用户在动画和转换期间和之后记录、重放和分析多个系统服务的状态。Winscope 将所有相关的系统服务状态记录在一个跟踪文件中。使用带有跟踪文件的 Winscope…阅读更多...数据分析-31-时间序列分析的卡尔曼滤波器平滑方法1 卡尔曼滤波器估计系统状态 
Kalman Filter（卡尔曼滤波器）算法是一种线性最小方差估计器，用于在存在噪声的情况下对随机过程或系统进行估计。它的基本思想是通过一系列的迭代步骤，不断优化对系统状态的估计。算法主要包含两个步骤：预测和更新。 
1.1 卡尔曼滤波器的原理 …阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:37 +0000</pubDate>
    </item>
    <item>
      <title>python的Django框架入门</title>
      <link>https://www.ppmy.cn/news/1541042.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维python的Django框架入门news/2025/11/1 1:17:36/Django是一个开源的Python Web开发框架，遵循MTV（Model-Template-View，模型-模板-视图）架构，是一个全功能的Web框架，Django的模块化设计允许开发者通过添加自定义插件、使用第三方库等方式来增强其功能。一、安装使用包管理器安装pip3 install django -i https://pypi.tuna.tsinghua.edu.cn/simple/二、创建项目1、在cmd下创建项目进入项目目录打开cmd窗口：django-admin startproject [项目名称]2、可视化创建项目使用pycharm创建项目：文件→新建项目→Django→配置→创建三、项目结构my_project #项目目录__init__.py #包的入口文件settings.py #项目配置文件urls.py #url访问地址配置文件wsgi.py #部署配置asgi.py #部署配置db.sqlite3 #sqlite数据库manage.py #命令行管理工具四、启动服务器python manage.py runserver [指定端口]指定ip地址访问：setting文件→设置ALLOWED_HOSTS = ['*']五、创建模块python manage.py startapp [模块名]比如创建一个名为hello的模块，将会生成以下文件：views是视图文件，Django视图是Web应用的心脏，负责接收用户的请求，处理这些请求，并返回相应的响应。它们可以是简单的函数，也可以是复杂的类。六、创建页面比如在视图下有这样一个函数：from django.http import HttpResponse#准备响应数据工具，由django提供，用于向浏览器返回数据def hello_world(request):#业务函数return HttpResponse('hello world')#向浏览器相应数据我们想要访问到它需要配置URL。配置路径有两种方法，一种是path方法，一种是include方法。path函数用于将一个URL路径映射到一个视图函数上，include函数则用于将一组URL模式包含到另一个URL配置中。path属性：route（必需）：这是一个字符串，表示URL的路径部分。Django会检查请求的URL，如果与这个路径匹配，就会调用相应的视图函数。路径中可以包含字符串格式的动态部分（例如&lt;int:id&gt;），这些部分会被提取并作为位置参数或关键字参数传递给视图函数。view（必需）：这是一个视图函数或视图类的引用。当URL匹配成功时，Django会调用这个视图函数或类的as_view()方法（对于类视图）。视图函数应该接收一个HttpRequest对象作为第一个参数，并返回一个HttpResponse对象。kwargs（可选）：这是一个字典，用于向视图函数传递额外的关键字参数。这些参数在URL匹配成功时会被传递给视图函数，与从URL中提取的动态参数一起。name（可选）：这是一个字符串，用于给URL命名。命名URL可以在模板中使用{% url 'name' %}标签进行反向解析，也可以在视图中使用reverse('name')函数进行反向解析。命名URL使得URL的维护变得更加容易，因为你可以在项目的任何地方通过名称来引用它，而不需要记住具体的路径。include函数属性：urlconf_module（必需）：这是一个Python模块或模块的路径字符串，该模块应该包含一个名为urlpatterns的列表，其中定义了要包含的URL模式。namespace（可选）：这是一个字符串，用于为包含的URL模式指定一个命名空间。命名空间在反向URL解析时非常有用，因为它可以帮助你区分不同模块中的URL，避免命名冲突。path案例：from django.urls import path
from hello.views import hello_world#引入模块函数urlpatterns = [path('hello/', hello_world),#浏览器访问地址（浏览器访问字符串，调用函数）]首先需要导入配置路径所需的path方法，在urlpatterns数组中配置，上述案例传了两个参数，一个是route参数，用于访问，第二个是view属性，表示用哪个视图。include案例：比如在某一模块下，有很多视图需要配置路径，如果单独引入根目录的urls文件比较乱，不容易维护，那么这时我们就可以在该模块下建立一个新的urls文件，命名无所谓，用来与include配合集体引入到根目录的urls文件内。视图文件：from django.http import HttpResponse#准备响应数据工具，由django提供，用于向浏览器返回数据def hello_world(request):#业务函数return HttpResponse('hello world')#向浏览器相应数据
def hello_china(request):#业务函数return HttpResponse('hello china')该模块下urls文件：from django.urls import path
from hello.views import hello_world, hello_chinaurlpatterns = [path('', hello_world,name='hello_world'),#浏览器访问地址（浏览器访问字符串，调用函数）path('china/', hello_china,name='hello_china'),]根目录下urls文件：from django.urls import path
from django.urls import include
urlpatterns = [path('hello/',include('hello.urls'))
]将写好的模块下的urls文件写入include函数中，就已经将该模块下的所有配置好路径的文件引入到根目录的urls中了。http://www.ppmy.cn/news/1541042.html相关文章后端接收参数的几种常用注解目录 
一、RequestParam 
二、RequestBody 
三、PathVariable 
四、RequestHeader 
五、RequestAttribute 
六、RequestPart 
七、Valid 
一、RequestParam 
1.作用 
用于将请求中的 查询参数 或 表单参数 绑定到方法的参数上。支持 GET 和 POST 请求。 
2.使用方法 
GetMappin…阅读更多...第十四届单片机嵌入式蓝桥杯一、CubeMx配置 
&amp;#xff08;1&amp;#xff09;LED配置 &amp;#xff08;1&amp;#xff09;LED灯里面用到了SN74HC573ADWR锁存器&amp;#xff0c;这个锁存器有一个LE引脚,这个是我们芯片的锁存引脚&amp;#xff08;使能引脚&amp;#xff09;&amp;#xff0c;由PD2这个端口来控制的 
&amp;#xff08;2&amp;#xff…阅读更多...多模态技术的协同表现：从文本生成、语音合成到口型同步综合测评本文是针对多模态对话系统核心技术栈的使用效果和网络测评整理。 
测评内容基于用户体验&amp;#xff0c;侧重于从使用者角度出发&amp;#xff0c;讨论实际操作中的体验感受&amp;#xff0c;如技术的易用性、输出效果如文本的连贯性、语音的自然度、口型同步的准确性等。不涉及具体算法架构…阅读更多...[C#][winform]基于yolov5的驾驶员抽烟打电话安全带检测系统C#源码+onnx模型+评估指标曲线+精美GUI界面【重要说明】 
该系统以opencvsharp作图像处理,onnxruntime做推理引擎&amp;#xff0c;使用CPU进行推理&amp;#xff0c;适合有显卡或者没有显卡windows x64系统均可&amp;#xff0c;不支持macOS和Linux系统&amp;#xff0c;不支持x86的windows操作系统。由于采用CPU推理&amp;#xff0c;要比GPU慢。…阅读更多...【ubuntu18.04】ubuntu18.04安装vmware-tools之后立即适应窗口为灰色，窗口不会自适应问题描述 
ubuntu18.04安装vmware-tools 点击查看&amp;#xff0c;看到立即适应窗口为灰色 
解决方案 
关闭虚拟机 
编辑此虚拟机 设置 注意        取消勾选拉伸模式 
查看可以看到所有选项可选择 注意&amp;#xff1a; 不要全屏的时候查看&amp;#xff0c;全屏看到的立即适应窗口就会显示…阅读更多...Android15使用Winscope使用 Winscope 跟踪窗口转换 | Android Open Source Project (google.cn) 
Winscope 是一款 Web 工具&amp;#xff0c;可以让用户在动画和转换期间和之后记录、重放和分析多个系统服务的状态。Winscope 将所有相关的系统服务状态记录在一个跟踪文件中。使用带有跟踪文件的 Winscope…阅读更多...数据分析-31-时间序列分析的卡尔曼滤波器平滑方法1 卡尔曼滤波器估计系统状态 
Kalman Filter（卡尔曼滤波器）算法是一种线性最小方差估计器，用于在存在噪声的情况下对随机过程或系统进行估计。它的基本思想是通过一系列的迭代步骤，不断优化对系统状态的估计。算法主要包含两个步骤：预测和更新。 
1.1 卡尔曼滤波器的原理 …阅读更多...Makefile:1954: recipe for target ‘Modules/_ssl.o‘ failed请安装ssl后，重新安装或编译Python碰到这个问题&amp;#xff0c;请重新安装openssl&amp;#xff0c;并编译安装Python源码。   
安装openssl 
sudo apt-get update sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libn…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:36 +0000</pubDate>
    </item>
    <item>
      <title>后端接收参数的几种常用注解</title>
      <link>https://www.ppmy.cn/news/1541041.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维后端接收参数的几种常用注解news/2025/11/1 1:17:34/目录一、@RequestParam二、@RequestBody三、@PathVariable四、@RequestHeader五、@RequestAttribute六、@RequestPart七、@Valid一、@RequestParam1.作用用于将请求中的查询参数或表单参数绑定到方法的参数上。支持 GET 和 POST 请求。2.使用方法@GetMapping("/search")publicResponseEntity&lt;List&lt;Item&gt;&gt;searchItems(@RequestParam(value="keyword",required=false)Stringkeyword,@RequestParam(value="page",defaultValue="1")intpage){// 业务逻辑}3.属性说明value或name：参数名，对应请求中的参数键名，变量名与参数名相同时可省略。required：是否为必需参数，默认值为true。如果设置为false，当参数缺失时，方法不会报错。defaultValue：参数的默认值，当请求中未包含该参数时使用。二、@RequestBody1.作用用于将请求体中的JSON 数据绑定到方法的参数上。常用于处理 POST、PUT、PATCH 请求。2.使用方法@PostMapping("/users")publicResponseEntity&lt;User&gt;createUser(@RequestBodyUseruser){// 业务逻辑}3.属性说明required：是否为必需参数，默认值为true。如果设置为false，当请求体为空时，参数值为null。三、@PathVariable1.作用用于将URL 路径中的变量绑定到方法的参数上。常用于 RESTful 风格的接口。2.使用方法@GetMapping("/users/{id}")publicResponseEntity&lt;User&gt;getUser(@PathVariable("id")Longid){// 业务逻辑}3.属性说明value或name：路径变量的名称，对应{}中的变量名。required：是否为必需参数，默认值为true。四、@RequestHeader1.作用用于将请求头信息绑定到方法的参数上。2.使用方法@GetMapping("/profile")publicResponseEntity&lt;User&gt;getProfile(@RequestHeader("Authorization")Stringtoken){// 业务逻辑}3.属性说明value或name：请求头的名称。required：是否为必需参数，默认值为true。defaultValue：当请求头缺失时的默认值。五、@RequestAttribute1.作用用于将请求范围内的属性绑定到方法的参数上。这些属性通常由拦截器或过滤器预先设置。2.使用方法@GetMapping("/order")publicResponseEntity&lt;Order&gt;getOrder(@RequestAttribute("userId")LonguserId){// 业务逻辑}3.属性说明value或name：属性的名称。required：是否为必需参数，默认值为true。4.示例拦截器设置：publicclassAuthInterceptorextendsHandlerInterceptorAdapter{@OverridepublicbooleanpreHandle(HttpServletRequestrequest,HttpServletResponseresponse,Objecthandler){LonguserId=// 从请求中解析用户IDrequest.setAttribute("userId",userId);returntrue;}}六、@RequestPart1.作用用于接收multipart/form-data请求中的特定部分，常用于文件上传。与@RequestParam不同，@RequestPart支持解析复杂的对象和文件。2.使用方法@PostMapping("/upload")publicResponseEntity&lt;?&gt;uploadFile(@RequestPart("file")MultipartFilefile,@RequestPart("description")Stringdescription){// 业务逻辑}3.属性说明value或name：请求部分的名称。required：是否为必需参数，默认值为true。七、@Valid1.简介作用：用于触发对参数对象的验证。使用场景：与参数对象（如实体类、DTO）配合使用。常用的验证注解包括：@NotNull：字段不能为空@NotEmpty：集合、字符串等不能为空@NotBlank：字符串不能为空白字符@Size：指定集合、数组、字符串的长度范围@Min、@Max：指定数值的最小值和最大值@Email：邮箱格式验证@Pattern：正则表达式匹配2.使用方法publicclassUserDTO{@NotBlank(message="用户名不能为空")privateStringusername;@Email(message="邮箱格式不正确")privateStringemail;@Size(min=6,max=20,message="密码长度必须在6到20位之间")privateStringpassword;// Getters and Setters}@PostMapping("/register")publicResponseEntity&lt;?&gt;register(@Valid@RequestBodyUserDTOuserDTO,BindingResultresult){if(result.hasErrors()){// 处理验证错误StringerrorMessage=result.getAllErrors().get(0).getDefaultMessage();returnResponseEntity.badRequest().body(errorMessage);}// 业务逻辑}3.异常处理BindingResult接口：用于获取验证结果，必须紧跟在被@Valid注解的参数后面。可用于判断验证是否通过，获取错误信息。全局异常处理：可以使用@ControllerAdvice和@ExceptionHandler注解，统一处理验证异常。@RestControllerAdvicepublicclassGlobalExceptionHandler{@ExceptionHandler(MethodArgumentNotValidException.class)publicResponseEntity&lt;?&gt;handleValidationException(MethodArgumentNotValidExceptionex){StringerrorMessage=ex.getBindingResult().getAllErrors().get(0).getDefaultMessage();returnResponseEntity.badRequest().body(errorMessage);}}http://www.ppmy.cn/news/1541041.html相关文章第十四届单片机嵌入式蓝桥杯一、CubeMx配置 
&amp;#xff08;1&amp;#xff09;LED配置 &amp;#xff08;1&amp;#xff09;LED灯里面用到了SN74HC573ADWR锁存器&amp;#xff0c;这个锁存器有一个LE引脚,这个是我们芯片的锁存引脚&amp;#xff08;使能引脚&amp;#xff09;&amp;#xff0c;由PD2这个端口来控制的 
&amp;#xff08;2&amp;#xff…阅读更多...多模态技术的协同表现：从文本生成、语音合成到口型同步综合测评本文是针对多模态对话系统核心技术栈的使用效果和网络测评整理。 
测评内容基于用户体验&amp;#xff0c;侧重于从使用者角度出发&amp;#xff0c;讨论实际操作中的体验感受&amp;#xff0c;如技术的易用性、输出效果如文本的连贯性、语音的自然度、口型同步的准确性等。不涉及具体算法架构…阅读更多...[C#][winform]基于yolov5的驾驶员抽烟打电话安全带检测系统C#源码+onnx模型+评估指标曲线+精美GUI界面【重要说明】 
该系统以opencvsharp作图像处理,onnxruntime做推理引擎&amp;#xff0c;使用CPU进行推理&amp;#xff0c;适合有显卡或者没有显卡windows x64系统均可&amp;#xff0c;不支持macOS和Linux系统&amp;#xff0c;不支持x86的windows操作系统。由于采用CPU推理&amp;#xff0c;要比GPU慢。…阅读更多...【ubuntu18.04】ubuntu18.04安装vmware-tools之后立即适应窗口为灰色，窗口不会自适应问题描述 
ubuntu18.04安装vmware-tools 点击查看&amp;#xff0c;看到立即适应窗口为灰色 
解决方案 
关闭虚拟机 
编辑此虚拟机 设置 注意        取消勾选拉伸模式 
查看可以看到所有选项可选择 注意&amp;#xff1a; 不要全屏的时候查看&amp;#xff0c;全屏看到的立即适应窗口就会显示…阅读更多...Android15使用Winscope使用 Winscope 跟踪窗口转换 | Android Open Source Project (google.cn) 
Winscope 是一款 Web 工具&amp;#xff0c;可以让用户在动画和转换期间和之后记录、重放和分析多个系统服务的状态。Winscope 将所有相关的系统服务状态记录在一个跟踪文件中。使用带有跟踪文件的 Winscope…阅读更多...数据分析-31-时间序列分析的卡尔曼滤波器平滑方法1 卡尔曼滤波器估计系统状态 
Kalman Filter（卡尔曼滤波器）算法是一种线性最小方差估计器，用于在存在噪声的情况下对随机过程或系统进行估计。它的基本思想是通过一系列的迭代步骤，不断优化对系统状态的估计。算法主要包含两个步骤：预测和更新。 
1.1 卡尔曼滤波器的原理 …阅读更多...Makefile:1954: recipe for target ‘Modules/_ssl.o‘ failed请安装ssl后，重新安装或编译Python碰到这个问题&amp;#xff0c;请重新安装openssl&amp;#xff0c;并编译安装Python源码。   
安装openssl 
sudo apt-get update sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libn…阅读更多...IoT工业网关的功能与特点有哪些？IoT工业网关在现代工业生产中的应用随着物联网&amp;#xff08;IoT&amp;#xff09;技术的飞速发展&amp;#xff0c;IoT工业网关作为连接物理世界与数字世界的桥梁&amp;#xff0c;正在工业领域发挥着越来越重要的作用。 
一、IoT工业网关的基本功能与特点 
1、数据聚合与预处理 
IoT工业网关的首要功能之一是数据聚合。在复杂的工…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:35 +0000</pubDate>
    </item>
    <item>
      <title>第十四届单片机嵌入式蓝桥杯</title>
      <link>https://www.ppmy.cn/news/1541040.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维第十四届单片机嵌入式蓝桥杯news/2025/11/1 1:17:33/一、CubeMx配置（1）LED配置（1）LED灯里面用到了SN74HC573ADWR锁存器，这个锁存器有一个LE引脚,这个是我们芯片的锁存引脚（使能引脚），由PD2这个端口来控制的（2）LD1~LD8这八个LED灯由PC8~PC15这八个端口控制，且因为LD左端通过300欧的电阻连到了VDD(电源的正引脚) ，若想要点亮LED灯的话，则需要给PC8~PC15低电平，这样灯才会亮，电流会从VDD顺着LED流到PC8（2）定时器配置根据题目需要配置PA1和PA7的定时器端口因为通过PA1引脚输出频率、占空比可调节的脉冲信号，所以预分频器可以不用写，就直接不分频通过PA7引脚完成脉冲捕获功能（3）按键配置（4）设置一个用于中断任务的定时器（1ms的定时器）并且使能其更新中断（5）使能中断（6）ADC配置因为题目是通过R37来调节占空比的 ，但是R37是CubeMx中的PB15，所以需要用它来配置ADC二、keil5配置（1）添加lcd文件可以看前面的csdn看看怎么要添加文件（2）添加头文件#include "lcd.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h" //字符串
#include "math.h"   //数据库（3）不要忘了开下载的魔术棒三、做题代码3.1(1)按键按下切换界面的代码【一般的】//*********************这些都是写在int main 函数外面的代码********************************//按键有关的定义uint8_t key_state=0;    //按键的模式：0，1，2，3
int keypresstime[4]={0};//一共有四个按键//按键的函数（底层）char Key_scan(void) //这里的函数要用char 不能用void 因为有返回值
{if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0))keypresstime[0]++;
//如果按键按下，就开始计时（前面有一个！是代表非0）else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)&amp;&amp;keypresstime[0]&gt;20){keypresstime[0]=0;return 1;}
//如果按键松开，而且此时的按键时长&gt;20ms（也相当于是按下的消抖）。那么按键的时间清零且此时回到按键按下前的状态else if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1))keypresstime[1]++;else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)&amp;&amp;keypresstime[1]&gt;20){keypresstime[1]=0;return 2;}else if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2))keypresstime[2]++;else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)&amp;&amp;keypresstime[2]&gt;20){keypresstime[2]=0;return 3;}else if(!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))keypresstime[3]++;else if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)&amp;&amp;keypresstime[3]&gt;20){keypresstime[3]=0;return 4;}else {keypresstime[0]=0;keypresstime[1]=0;keypresstime[2]=0;keypresstime[3]=0;} //如果什么都没发生return 0;
}//**********************************切记：一定要打开定时器********************************
HAL_TIM_Base_Start_IT(&amp;htim6);//***********************************这些是放在while循环里面的函数************************if(Flag_lcd==0)LCD_data();else if (Flag_lcd==1)LCD_para();else if (Flag_lcd==2)LCD_recd();LCD_show();//如果不添加这个的话，就没办法显示界面的内容//上面的是显示界面if(key_state==1){Flag_lcd++;Flag_lcd=Flag_lcd&gt;2?0:Flag_lcd;//如果＞2的话，那么就把Flag_lcd变成0//当然这一句也可以变成一个if循环来表达}//这个是按键按下切换界面的代码(2)按键按下切换界面的代码【最好的】其实不太理解这个底层函数的逻辑//*********************这些都是写在int main 函数外面的代码//按键有关的定义struct keys
{unsigned char judge_sta;bool key_sta;bool single_flag;bool long_flag;unsigned int key_time;
};//定义几个标志位struct keys key[4]={0,0,0};    //有四个按键//按键的底层函数（放在中断回调函数里面）void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{if(htim-&gt;Instance==TIM6)//开的中断的定时器{//按键部分key[0].key_sta=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0);key[1].key_sta=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1);key[2].key_sta=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2);key[3].key_sta=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);for(int i=0;i&lt;4;i++){switch (key[i].judge_sta){case 0:  //消抖{if(key[i].key_sta==0){key[i].judge_sta=1;key[i].key_time=0;}}break;case 1:{if(key[i].key_sta==0)  ///确定按下{key[i].judge_sta=2;}else key[i].judge_sta=0;}break;case 2:{if(key[i].key_sta==1){key[i].judge_sta=0;					if(key[i].key_time&lt;70){key[i].single_flag=1;  //单机}}else {key[i].key_time++;if(key[i].key_time&gt;70)  key[i].long_flag=1;  //长按}}break;}}}}//**********************************切记：一定要打开定时器
HAL_TIM_Base_Start_IT(&amp;htim6);//***********************************这些是放在while循环里面的函数if(Flag_lcd==0)LCD_data();else if (Flag_lcd==1)LCD_para();else if (Flag_lcd==2)LCD_recd();LCD_show();//如果不添加这个的话，就没办法显示界面的内容if(Flag_lcd==0)LCD_data();else if (Flag_lcd==1)LCD_para();else if (Flag_lcd==2)LCD_recd();LCD_show();//如果不添加这个的话，就没办法显示界面的内容3.2四、不理解的代码（1）五、出现问题的步骤(1)LCD不显示界面这个问题是因为这个频率最开始设置的是8，应该设置的频率是24（2）按键无法执行切换页面的任务按键无法执行相应的任务是因为这几个配置我最开始配置成了GPIO_Outputhttp://www.ppmy.cn/news/1541040.html相关文章多模态技术的协同表现：从文本生成、语音合成到口型同步综合测评本文是针对多模态对话系统核心技术栈的使用效果和网络测评整理。 
测评内容基于用户体验&amp;#xff0c;侧重于从使用者角度出发&amp;#xff0c;讨论实际操作中的体验感受&amp;#xff0c;如技术的易用性、输出效果如文本的连贯性、语音的自然度、口型同步的准确性等。不涉及具体算法架构…阅读更多...[C#][winform]基于yolov5的驾驶员抽烟打电话安全带检测系统C#源码+onnx模型+评估指标曲线+精美GUI界面【重要说明】 
该系统以opencvsharp作图像处理,onnxruntime做推理引擎&amp;#xff0c;使用CPU进行推理&amp;#xff0c;适合有显卡或者没有显卡windows x64系统均可&amp;#xff0c;不支持macOS和Linux系统&amp;#xff0c;不支持x86的windows操作系统。由于采用CPU推理&amp;#xff0c;要比GPU慢。…阅读更多...【ubuntu18.04】ubuntu18.04安装vmware-tools之后立即适应窗口为灰色，窗口不会自适应问题描述 
ubuntu18.04安装vmware-tools 点击查看&amp;#xff0c;看到立即适应窗口为灰色 
解决方案 
关闭虚拟机 
编辑此虚拟机 设置 注意        取消勾选拉伸模式 
查看可以看到所有选项可选择 注意&amp;#xff1a; 不要全屏的时候查看&amp;#xff0c;全屏看到的立即适应窗口就会显示…阅读更多...Android15使用Winscope使用 Winscope 跟踪窗口转换 | Android Open Source Project (google.cn) 
Winscope 是一款 Web 工具&amp;#xff0c;可以让用户在动画和转换期间和之后记录、重放和分析多个系统服务的状态。Winscope 将所有相关的系统服务状态记录在一个跟踪文件中。使用带有跟踪文件的 Winscope…阅读更多...数据分析-31-时间序列分析的卡尔曼滤波器平滑方法1 卡尔曼滤波器估计系统状态 
Kalman Filter（卡尔曼滤波器）算法是一种线性最小方差估计器，用于在存在噪声的情况下对随机过程或系统进行估计。它的基本思想是通过一系列的迭代步骤，不断优化对系统状态的估计。算法主要包含两个步骤：预测和更新。 
1.1 卡尔曼滤波器的原理 …阅读更多...Makefile:1954: recipe for target ‘Modules/_ssl.o‘ failed请安装ssl后，重新安装或编译Python碰到这个问题&amp;#xff0c;请重新安装openssl&amp;#xff0c;并编译安装Python源码。   
安装openssl 
sudo apt-get update sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libn…阅读更多...IoT工业网关的功能与特点有哪些？IoT工业网关在现代工业生产中的应用随着物联网&amp;#xff08;IoT&amp;#xff09;技术的飞速发展&amp;#xff0c;IoT工业网关作为连接物理世界与数字世界的桥梁&amp;#xff0c;正在工业领域发挥着越来越重要的作用。 
一、IoT工业网关的基本功能与特点 
1、数据聚合与预处理 
IoT工业网关的首要功能之一是数据聚合。在复杂的工…阅读更多...101 - Lecture 11课程概述 
•	汇编语言中的输出&amp;#xff08;Output in inline assembly&amp;#xff09;
•	汇编语言中的输入&amp;#xff08;Input in inline assembly&amp;#xff09;
•	printf 函数的更多细节
•	scanf 函数的更多细节
•	程序流程控制&amp;#xff08;Controlling program flow&amp;#xff…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:34 +0000</pubDate>
    </item>
    <item>
      <title>多模态技术的协同表现：从文本生成、语音合成到口型同步综合测评</title>
      <link>https://www.ppmy.cn/news/1541039.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维多模态技术的协同表现：从文本生成、语音合成到口型同步综合测评news/2025/11/1 1:17:32/本文是针对多模态对话系统核心技术栈的使用效果和网络测评整理。测评内容基于用户体验，侧重于从使用者角度出发，讨论实际操作中的体验感受，如技术的易用性、输出效果如文本的连贯性、语音的自然度、口型同步的准确性等。不涉及具体算法架构的分析，仅供参考。文本GPT千帆ClaudeTTSElevenlabs讯飞GCP（Google cloud Platform） （convai内置)lipsyncMetahumanSDKConvAI自研Audio to face对比分析文本GPTGPT全面能力比千帆更强 文字处理这块差不多GPT的知识库比较大 并且敏感词限制很少/千帆的文心有敏感词设置，发布大模型经过备案审核千帆最大的差异就是价格，千帆便宜文言文 中国文化等本土内容，千帆更头部Claude（Claude与GPT分析对比，图源网络）TTS（仅中文语音分析）Elevenlabs:有优质的台湾语调语音库，内陆语音库也还行。讯飞：不支持convAI第三方集成，需要企业对接。本身有明显的“的地得”不分得问题。GCP（Google cloud Platform）：难听（指中文）。（metahuman内置的voice ID，google和Azure，whatever，也很难听）气口不对，声调错误（阴平阳平上声去声不分），甚至会读错字LipsyncMetahuman SDK：动画总体有非常多的bug：升级了pricing plan仍然有和免费试用版一样的五秒时间限制/ 会在嘴张着的情况停止讲话/  身首分离的问题可以解决但麻烦convai自研：有audio2face runtime 百分之七八十的效果，完全免费。Audio2Face流式：（可以集成在ConvAI中）但企业版年费偏高昂综合流程：文本GPT千帆ClaudeTTSElevenlabs讯飞GCP（Google cloud Platform） （convai内置)lipsyncMetahumanSDKConvAI自研Audio to face个人用户可以使用“GPT-Elevenlabs-ConvAI”的技术栈组合。均有免费额度。企业用户要求最佳效果的技术栈组合可以参考“GPT-Elevenlabs-ConvAI-Audio to face runtime lipsync”Reallusion建议：切换音色：convai的协同表现非常好，但第三方API集成只支持Elevenlabs，需要使用付费套餐，但价格偏低廉。Monthly interaction of different pricing plans​​​​​You can use Elevenlabs voices in Convai. There are 2 ways to access Elevenlabs voices. First, your Convai plan must be a Gamer plan or higher. However, each plan has a separate ElevenLabs Interaction quota. ElevenLabs Quota is as in the screenshot I shared below. In this way, you can access ElevenLabs voices in the Character Voices section in Convai. Another method is to connect your ElevenLabs account. However, your Elevenlabs account must have a Pro plan or higher. This way you can also add custom ElevenLabs voices, and your ElevenLabs quota is the same as the quota on your account. Documentation: https://docs.convai.com/api-docs/plugins-and-integrations/elevenlabs-api-integration A small note, this way you can't use Convai's Elevenlabs voices, you need to upgrade your Convai plan. So when you connect the Elevenlabs API, everything related to Elevenlabs is connected to your Elevenlabs account.convai不支持屏蔽关键词，需要去人设设置里告诉它不说某些词语，但不是强制屏蔽。https://zh.wikipedia.org/wiki/%E6%AD%A7%E8%A7%86%E8%AF%AD可以设置口癖如“这样子哦”“有啦”“真的假的？”“不好意思”“对啊/对啦”“没关系”“还好啦”“吼”“咩”。最好需要在人设里给详细解释：“这样子哦”这是一种表示理解或回应对方说话的口头禅，常常用在对话中表达对信息的接收或共鸣感。“有啦”台湾人常用“有啦”来强调某件事的存在或发生，例如：“我有做啦！”表示自己确实做了某事。“真的假的？”表示惊讶、怀疑或不确定的回应，类似于大陆的“真的吗？”。“不好意思”这在台湾不仅用于道歉，常常也用作礼貌的开场白或表示客气。例如，在请求帮助或打扰别人时，台湾人会说“不好意思”来显得更礼貌。“对啊/对啦”用于表示同意或附和，尤其是在对方表达观点时，台湾人会用“对啊”或“对啦”来表示赞同。“没关系”表示不介意、不在意，类似于“没事”、“无所谓”。这句话在台湾人的日常对话中非常常见，用来缓解尴尬或表示宽容。“还好啦”表示某件事情还算过得去、没有太大问题，常用来回应别人对自己状态或事情的询问。“吼”语气助词，用来加重语气或表达抱怨。例如：“你怎么这样吼？”有时带有一点撒娇或不满的意思。“咩”也是语气助词，常出现在句尾，用来表达无奈或调皮的感觉，例如：“我也不知道咩。”其他建议：动态字数：在人设里一般问答的长度设置的更精简，随着问题的难度而动态放宽字数限制。（否则每个回答都回答一长段 / 困难的问题很快回答 / 简单的问题过于啰嗦的回答 都会更不像真人）眼球动画：make the AI not always look at player细微动作：change NPC animation while listening player talking/ thinking about anwser。Action：将走/跑/摊手等动作blend使用。语音情绪转换：convai集成流程支持初始情绪设定(如图），对话过程中声音情绪转变暂不支持http://www.ppmy.cn/news/1541039.html相关文章[C#][winform]基于yolov5的驾驶员抽烟打电话安全带检测系统C#源码+onnx模型+评估指标曲线+精美GUI界面【重要说明】 
该系统以opencvsharp作图像处理,onnxruntime做推理引擎&amp;#xff0c;使用CPU进行推理&amp;#xff0c;适合有显卡或者没有显卡windows x64系统均可&amp;#xff0c;不支持macOS和Linux系统&amp;#xff0c;不支持x86的windows操作系统。由于采用CPU推理&amp;#xff0c;要比GPU慢。…阅读更多...【ubuntu18.04】ubuntu18.04安装vmware-tools之后立即适应窗口为灰色，窗口不会自适应问题描述 
ubuntu18.04安装vmware-tools 点击查看&amp;#xff0c;看到立即适应窗口为灰色 
解决方案 
关闭虚拟机 
编辑此虚拟机 设置 注意        取消勾选拉伸模式 
查看可以看到所有选项可选择 注意&amp;#xff1a; 不要全屏的时候查看&amp;#xff0c;全屏看到的立即适应窗口就会显示…阅读更多...Android15使用Winscope使用 Winscope 跟踪窗口转换 | Android Open Source Project (google.cn) 
Winscope 是一款 Web 工具&amp;#xff0c;可以让用户在动画和转换期间和之后记录、重放和分析多个系统服务的状态。Winscope 将所有相关的系统服务状态记录在一个跟踪文件中。使用带有跟踪文件的 Winscope…阅读更多...数据分析-31-时间序列分析的卡尔曼滤波器平滑方法1 卡尔曼滤波器估计系统状态 
Kalman Filter（卡尔曼滤波器）算法是一种线性最小方差估计器，用于在存在噪声的情况下对随机过程或系统进行估计。它的基本思想是通过一系列的迭代步骤，不断优化对系统状态的估计。算法主要包含两个步骤：预测和更新。 
1.1 卡尔曼滤波器的原理 …阅读更多...Makefile:1954: recipe for target ‘Modules/_ssl.o‘ failed请安装ssl后，重新安装或编译Python碰到这个问题&amp;#xff0c;请重新安装openssl&amp;#xff0c;并编译安装Python源码。   
安装openssl 
sudo apt-get update sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libn…阅读更多...IoT工业网关的功能与特点有哪些？IoT工业网关在现代工业生产中的应用随着物联网&amp;#xff08;IoT&amp;#xff09;技术的飞速发展&amp;#xff0c;IoT工业网关作为连接物理世界与数字世界的桥梁&amp;#xff0c;正在工业领域发挥着越来越重要的作用。 
一、IoT工业网关的基本功能与特点 
1、数据聚合与预处理 
IoT工业网关的首要功能之一是数据聚合。在复杂的工…阅读更多...101 - Lecture 11课程概述 
•	汇编语言中的输出&amp;#xff08;Output in inline assembly&amp;#xff09;
•	汇编语言中的输入&amp;#xff08;Input in inline assembly&amp;#xff09;
•	printf 函数的更多细节
•	scanf 函数的更多细节
•	程序流程控制&amp;#xff08;Controlling program flow&amp;#xff…阅读更多...数据库作业2作业&amp;#xff1a; 建立数据库&amp;#xff1a; 建表&amp;#xff1a; 插入数据&amp;#xff1a; 查询&amp;#xff1a; 
&amp;#xff08;1&amp;#xff09;&amp;#xff1a; &amp;#xff08;2&amp;#xff09;&amp;#xff1a; &amp;#xff08;3&amp;#xff09;&amp;#xff1a; &amp;#xff08;4&amp;#xff09;&amp;#xff1a; &amp;#xf…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:33 +0000</pubDate>
    </item>
    <item>
      <title>[C#][winform]基于yolov5的驾驶员抽烟打电话安全带检测系统C#源码+onnx模型+评估指标曲线+精美GUI界面</title>
      <link>https://www.ppmy.cn/news/1541038.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维[C#][winform]基于yolov5的驾驶员抽烟打电话安全带检测系统C#源码+onnx模型+评估指标曲线+精美GUI界面news/2025/11/1 1:17:31/【重要说明】该系统以opencvsharp作图像处理,onnxruntime做推理引擎，使用CPU进行推理，适合有显卡或者没有显卡windows x64系统均可，不支持macOS和Linux系统，不支持x86的windows操作系统。由于采用CPU推理，要比GPU慢。为了适合大部分操作系统我们暂时只写了CPU推理源码，GPU推理源码后期根据需要可能会调整，目前只考虑CPU推理，主要是为了照顾现在大部分使用该源码是学生，很多人并没有显卡的电脑情况。【算法介绍】基于YOLOv5的驾驶员抽烟、打电话、安全带检测系统是一种先进的驾驶行为监测系统，旨在提高驾驶安全性。该系统利用YOLOv5算法，这是一种基于深度学习的目标检测算法，特别适用于实时目标检测任务。在驾驶员抽烟、打电话、安全带检测系统中，YOLOv5算法通过将图像分割成网格并对每个网格进行分类，同时回归框的边界框参数，从而在单个前向传递中实现目标检测。为了训练这一系统，需要构建一个包含大量标注图像的数据集，这些图像应覆盖各种驾驶环境下，司机抽烟、打电话以及未系安全带的实例。在实际应用中，该系统可以通过预置的摄像头或监控系统来实时获取图像或视频流，对输入图像进行处理和分析，通过YOLOv5模型检测驾驶员的行为，并判断是否存在抽烟、打电话或未系安全带等分心或违规行为。如果检测到这些行为，系统可以触发警报、发送通知或采取其他适当的措施，以提醒驾驶员纠正分心行为或违规行为，从而降低事故风险。此外，该系统还需要考虑隐私保护和合规性相关的问题，确保系统的合法性和有效性。通过不断优化算法性能、扩大高质量数据集规模以及在实际应用中平衡技术与法律伦理考量，该系统将在减少交通事故、保障驾驶安全方面发挥重要作用。【效果展示】【测试环境】windows10 x64系统VS2019netframework4.7.2opencvsharp4.8.0onnxruntime1.16.3【模型可以检测出类别】{0: 'cigarette', 1: 'phone', 2: 'seatbelt'}【相关数据集(非本文训练的数据集)】https://download.csdn.net/download/FL1623863129/89319046【训练信息】参数值训练集图片数11932验证集图片数2393训练map73.8%训练精度(Precision)82.2%训练召回率(Recall)69.8%验证集每个类别精度统计类别MAP0.5(单位：%)all73cigarette60phone72seatbelt87【部分实现源码】using OpenCvSharp;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;namespace FIRC
{public partial class Form1 : Form{public bool videoStart = false;//视频停止标志string weightsPath = Application.StartupPath + "\\weights";//模型目录string labelTxt= Application.StartupPath + "\\weights\\class_names.txt";//类别文件Yolov8Manager detetor = new Yolov8Manager();//推理引擎public Form1(){InitializeComponent();CheckForIllegalCrossThreadCalls = false;//线程更新控件不报错}private void LoadWeightsFromDir(){var di = new DirectoryInfo(weightsPath);foreach(var fi in di.GetFiles("*.onnx")){comboBox1.Items.Add(fi.Name);}if(comboBox1.Items.Count&gt;0){comboBox1.SelectedIndex = 0;}else{tssl_show.Text = "未找到模型,请关闭程序，放入模型到weights文件夹!";tsb_pic.Enabled = false;tsb_video.Enabled = false;tsb_camera.Enabled = false;}}private void Form1_Load(object sender, EventArgs e){LoadWeightsFromDir();//从目录加载模型}public string GetResultString(Result result){Dictionary&lt;string, int&gt; resultDict = new Dictionary&lt;string, int&gt;();for (int i = 0; i &lt; result.length; i++){if(resultDict.ContainsKey( result.classes[i]) ){resultDict[result.classes[i]]++;}else{resultDict[result.classes[i]]=1;}}var resultStr = "";foreach(var item in resultDict){resultStr += string.Format("{0}:{1}\n",item.Key,item.Value);}return resultStr;}private void tsb_pic_Click(object sender, EventArgs e){OpenFileDialog ofd = new OpenFileDialog();ofd.Filter = "*.*|*.bmp;*.jpg;*.jpeg;*.tiff;*.tiff;*.png";if (ofd.ShowDialog() != DialogResult.OK) return;tssl_show.Text = "正在检测中...";Task.Run(() =&gt; {var sw = new Stopwatch();sw.Start();Mat image = Cv2.ImRead(ofd.FileName);detetor.Confidence =Convert.ToSingle(numericUpDown1.Value);detetor.IOU = Convert.ToSingle(numericUpDown2.Value);var results=detetor.Inference(image);var resultImage = detetor.DrawImage(OpenCvSharp.Extensions.BitmapConverter.ToBitmap(image), results);sw.Stop();pb_show.Image = resultImage;tb_res.Text = GetResultString(results);tssl_show.Text = "检测已完成!总计耗时"+sw.Elapsed.TotalSeconds+"秒";});}public void VideoProcess(string videoPath){Task.Run(() =&gt; {detetor.Confidence = Convert.ToSingle(numericUpDown1.Value);detetor.IOU = Convert.ToSingle(numericUpDown2.Value);VideoCapture capture = new VideoCapture(videoPath);if (!capture.IsOpened()){tssl_show.Text="视频打开失败!";return;}Mat frame = new Mat();var sw = new Stopwatch();int fps = 0;while (videoStart){capture.Read(frame);if (frame.Empty()){Console.WriteLine("data is empty!");break;}sw.Start();var results = detetor.Inference(frame);var resultImg = detetor.DrawImage(frame,results);sw.Stop();fps = Convert.ToInt32(1 / sw.Elapsed.TotalSeconds);sw.Reset();Cv2.PutText(resultImg, "FPS=" + fps, new OpenCvSharp.Point(30, 30), HersheyFonts.HersheyComplex, 1.0, new Scalar(255, 0, 0), 3);//显示结果pb_show.Image = OpenCvSharp.Extensions.BitmapConverter.ToBitmap(resultImg);tb_res.Text = GetResultString(results);Thread.Sleep(5);}capture.Release();pb_show.Image = null;tssl_show.Text = "视频已停止!";tsb_video.Text = "选择视频";});}public void CameraProcess(int cameraIndex=0){Task.Run(() =&gt; {detetor.Confidence = Convert.ToSingle(numericUpDown1.Value);detetor.IOU = Convert.ToSingle(numericUpDown2.Value);VideoCapture capture = new VideoCapture(cameraIndex);if (!capture.IsOpened()){tssl_show.Text = "摄像头打开失败!";return;}Mat frame = new Mat();var sw = new Stopwatch();int fps = 0;while (videoStart){capture.Read(frame);if (frame.Empty()){Console.WriteLine("data is empty!");break;}sw.Start();var results = detetor.Inference(frame);var resultImg = detetor.DrawImage(frame, results);sw.Stop();fps = Convert.ToInt32(1 / sw.Elapsed.TotalSeconds);sw.Reset();Cv2.PutText(resultImg, "FPS=" + fps, new OpenCvSharp.Point(30, 30), HersheyFonts.HersheyComplex, 1.0, new Scalar(255, 0, 0), 3);//显示结果pb_show.Image = OpenCvSharp.Extensions.BitmapConverter.ToBitmap(resultImg);tb_res.Text = GetResultString(results);Thread.Sleep(5);}capture.Release();pb_show.Image = null;tssl_show.Text = "摄像头已停止!";tsb_camera.Text = "打开摄像头";});}private void tsb_video_Click(object sender, EventArgs e){if(tsb_video.Text=="选择视频"){OpenFileDialog ofd = new OpenFileDialog();ofd.Filter = "视频文件(*.*)|*.mp4;*.avi";if (ofd.ShowDialog() != DialogResult.OK) return;videoStart = true;VideoProcess(ofd.FileName);tsb_video.Text = "停止";tssl_show.Text = "视频正在检测中...";}else{videoStart = false;}}private void tsb_camera_Click(object sender, EventArgs e){if (tsb_camera.Text == "打开摄像头"){videoStart = true;CameraProcess(0);tsb_camera.Text = "停止";tssl_show.Text = "摄像头正在检测中...";}else{videoStart = false;}}private void tsb_exit_Click(object sender, EventArgs e){videoStart = false;this.Close();}private void trackBar1_Scroll(object sender, EventArgs e){numericUpDown1.Value = Convert.ToDecimal(trackBar1.Value / 100.0f);}private void trackBar2_Scroll(object sender, EventArgs e){numericUpDown2.Value = Convert.ToDecimal(trackBar2.Value / 100.0f);}private void numericUpDown1_ValueChanged(object sender, EventArgs e){trackBar1.Value = (int)(Convert.ToSingle(numericUpDown1.Value) * 100);}private void numericUpDown2_ValueChanged(object sender, EventArgs e){trackBar2.Value = (int)(Convert.ToSingle(numericUpDown2.Value) * 100);}private void comboBox1_SelectedIndexChanged(object sender, EventArgs e){tssl_show.Text="加载模型:"+comboBox1.Text;detetor.LoadWeights(weightsPath+"\\"+comboBox1.Text,labelTxt);tssl_show.Text = "模型加载已完成!";}}
}【使用步骤】使用步骤：（1）首先根据官方框架yolov5安装教程安装好yolov5环境，并安装好pyqt5（2）切换到自己安装的yolov5环境后，并切换到源码目录，执行python main.py即可运行启动界面，进行相应的操作即可【提供文件】python源码yolov5n.onnx模型（不提供pytorch模型）训练的map,P,R曲线图(在weights\results.png)测试图片（在test_img文件夹下面）【源码下载地址】https://download.csdn.net/download/FL1623863129/88540396http://www.ppmy.cn/news/1541038.html相关文章【ubuntu18.04】ubuntu18.04安装vmware-tools之后立即适应窗口为灰色，窗口不会自适应问题描述 
ubuntu18.04安装vmware-tools 点击查看&amp;#xff0c;看到立即适应窗口为灰色 
解决方案 
关闭虚拟机 
编辑此虚拟机 设置 注意        取消勾选拉伸模式 
查看可以看到所有选项可选择 注意&amp;#xff1a; 不要全屏的时候查看&amp;#xff0c;全屏看到的立即适应窗口就会显示…阅读更多...Android15使用Winscope使用 Winscope 跟踪窗口转换 | Android Open Source Project (google.cn) 
Winscope 是一款 Web 工具&amp;#xff0c;可以让用户在动画和转换期间和之后记录、重放和分析多个系统服务的状态。Winscope 将所有相关的系统服务状态记录在一个跟踪文件中。使用带有跟踪文件的 Winscope…阅读更多...数据分析-31-时间序列分析的卡尔曼滤波器平滑方法1 卡尔曼滤波器估计系统状态 
Kalman Filter（卡尔曼滤波器）算法是一种线性最小方差估计器，用于在存在噪声的情况下对随机过程或系统进行估计。它的基本思想是通过一系列的迭代步骤，不断优化对系统状态的估计。算法主要包含两个步骤：预测和更新。 
1.1 卡尔曼滤波器的原理 …阅读更多...Makefile:1954: recipe for target ‘Modules/_ssl.o‘ failed请安装ssl后，重新安装或编译Python碰到这个问题&amp;#xff0c;请重新安装openssl&amp;#xff0c;并编译安装Python源码。   
安装openssl 
sudo apt-get update sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libn…阅读更多...IoT工业网关的功能与特点有哪些？IoT工业网关在现代工业生产中的应用随着物联网&amp;#xff08;IoT&amp;#xff09;技术的飞速发展&amp;#xff0c;IoT工业网关作为连接物理世界与数字世界的桥梁&amp;#xff0c;正在工业领域发挥着越来越重要的作用。 
一、IoT工业网关的基本功能与特点 
1、数据聚合与预处理 
IoT工业网关的首要功能之一是数据聚合。在复杂的工…阅读更多...101 - Lecture 11课程概述 
•	汇编语言中的输出&amp;#xff08;Output in inline assembly&amp;#xff09;
•	汇编语言中的输入&amp;#xff08;Input in inline assembly&amp;#xff09;
•	printf 函数的更多细节
•	scanf 函数的更多细节
•	程序流程控制&amp;#xff08;Controlling program flow&amp;#xff…阅读更多...数据库作业2作业&amp;#xff1a; 建立数据库&amp;#xff1a; 建表&amp;#xff1a; 插入数据&amp;#xff1a; 查询&amp;#xff1a; 
&amp;#xff08;1&amp;#xff09;&amp;#xff1a; &amp;#xff08;2&amp;#xff09;&amp;#xff1a; &amp;#xff08;3&amp;#xff09;&amp;#xff1a; &amp;#xff08;4&amp;#xff09;&amp;#xff1a; &amp;#xf…阅读更多...训练自己的语音并生成音频fish.audioFish Speech 是一个致力于提供高质量、易用且功能强大的语音合成解决方案的开源项目。它融合了多项先进的语音合成技术&amp;#xff0c;为研究者、开发者和普通用户提供了一个功能丰富的语音合成平台。 fish.audio开发团队是我们是公认的开源SVC / TTS 项目的开创者在GitHub上拥有超…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:32 +0000</pubDate>
    </item>
    <item>
      <title>【ubuntu18.04】ubuntu18.04安装vmware-tools之后立即适应窗口为灰色，窗口不会自适应</title>
      <link>https://www.ppmy.cn/news/1541037.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【ubuntu18.04】ubuntu18.04安装vmware-tools之后立即适应窗口为灰色，窗口不会自适应news/2025/11/1 1:17:30/问题描述ubuntu18.04安装vmware-tools点击查看，看到立即适应窗口为灰色解决方案关闭虚拟机编辑此虚拟机设置注意取消勾选拉伸模式查看可以看到所有选项可选择注意：不要全屏的时候查看，全屏看到的立即适应窗口就会显示灰色http://www.ppmy.cn/news/1541037.html相关文章Android15使用Winscope使用 Winscope 跟踪窗口转换 | Android Open Source Project (google.cn) 
Winscope 是一款 Web 工具&amp;#xff0c;可以让用户在动画和转换期间和之后记录、重放和分析多个系统服务的状态。Winscope 将所有相关的系统服务状态记录在一个跟踪文件中。使用带有跟踪文件的 Winscope…阅读更多...数据分析-31-时间序列分析的卡尔曼滤波器平滑方法1 卡尔曼滤波器估计系统状态 
Kalman Filter（卡尔曼滤波器）算法是一种线性最小方差估计器，用于在存在噪声的情况下对随机过程或系统进行估计。它的基本思想是通过一系列的迭代步骤，不断优化对系统状态的估计。算法主要包含两个步骤：预测和更新。 
1.1 卡尔曼滤波器的原理 …阅读更多...Makefile:1954: recipe for target ‘Modules/_ssl.o‘ failed请安装ssl后，重新安装或编译Python碰到这个问题&amp;#xff0c;请重新安装openssl&amp;#xff0c;并编译安装Python源码。   
安装openssl 
sudo apt-get update sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libn…阅读更多...IoT工业网关的功能与特点有哪些？IoT工业网关在现代工业生产中的应用随着物联网&amp;#xff08;IoT&amp;#xff09;技术的飞速发展&amp;#xff0c;IoT工业网关作为连接物理世界与数字世界的桥梁&amp;#xff0c;正在工业领域发挥着越来越重要的作用。 
一、IoT工业网关的基本功能与特点 
1、数据聚合与预处理 
IoT工业网关的首要功能之一是数据聚合。在复杂的工…阅读更多...101 - Lecture 11课程概述 
•	汇编语言中的输出&amp;#xff08;Output in inline assembly&amp;#xff09;
•	汇编语言中的输入&amp;#xff08;Input in inline assembly&amp;#xff09;
•	printf 函数的更多细节
•	scanf 函数的更多细节
•	程序流程控制&amp;#xff08;Controlling program flow&amp;#xff…阅读更多...数据库作业2作业&amp;#xff1a; 建立数据库&amp;#xff1a; 建表&amp;#xff1a; 插入数据&amp;#xff1a; 查询&amp;#xff1a; 
&amp;#xff08;1&amp;#xff09;&amp;#xff1a; &amp;#xff08;2&amp;#xff09;&amp;#xff1a; &amp;#xff08;3&amp;#xff09;&amp;#xff1a; &amp;#xff08;4&amp;#xff09;&amp;#xff1a; &amp;#xf…阅读更多...训练自己的语音并生成音频fish.audioFish Speech 是一个致力于提供高质量、易用且功能强大的语音合成解决方案的开源项目。它融合了多项先进的语音合成技术&amp;#xff0c;为研究者、开发者和普通用户提供了一个功能丰富的语音合成平台。 fish.audio开发团队是我们是公认的开源SVC / TTS 项目的开创者在GitHub上拥有超…阅读更多...通过 Twitter Token 实现授权与操作通过 Twitter Token 实现授权与操作 
一、Twitter API 概览 
1.1 Twitter API 简介 
Twitter API 是 Twitter 公司提供的一种编程接口，它允许开发者访问 Twitter 的海量数据，包括用户信息、推文内容、关系网络等。通过这些接口，开发者可以创建应用程序，实现自动化的社交媒体…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:30 +0000</pubDate>
    </item>
    <item>
      <title>Android15使用Winscope</title>
      <link>https://www.ppmy.cn/news/1541036.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Android15使用Winscopenews/2025/11/1 1:17:28/使用 Winscope 跟踪窗口转换 | Android Open Source Project (google.cn)Winscope 是一款 Web 工具，可以让用户在动画和转换期间和之后记录、重放和分析多个系统服务的状态。Winscope 将所有相关的系统服务状态记录在一个跟踪文件中。使用带有跟踪文件的 Winscope 界面，您可以通过重放、单步执行和调试转换来针对每个动画帧检查这些服务的状态（无论是否有屏幕录制）。说的通俗一点，我感觉Winscope就是在一段时间内的每一帧，都dump一下手机中的某些信息，然后将这些信息收集起来并且以图形的方式展示，如：本文主要记录一下我本地在Android15平台上使用Winscope的情况，这个跟个人使用的平台以及环境都有很大的关系，不一定说按照我的做法就一定成功，我遇到的问题你可能没有遇到，同样你遇到的问题我可能没有遇到。1 Android15以前使用Winscope1、在开发者模式中，“Quick settings developer tiles“中，开启”Winscope trace“：2、执行复现问题的操作。3、操作完后的winscope文件在手机保存到了data/misc/wmtrace，我们一般关注比较多的是保存了SurfaceFlinger的信息，“layers_trace.winscope”文件：4、使用“prebuilts/misc/common/winscope/winscope.html”查看相关信息：通过 adb 命令捕获SurfaceFlinger跟踪记录要记录 SurfaceFlinger 的跟踪情况，请执行以下操作：1、启用跟踪：adb shell su root service call SurfaceFlinger 1025 i32 12、停用跟踪：adb shell su root service call SurfaceFlinger 1025 i32 03、获取跟踪文件：adb pull /data/misc/wmtrace/layers_trace.winscope layers_trace.winscope4、拖动到Winscope来查看layers_trace.winscope文件：这里展示一下从Launcher启动google Files的过程。2 Android15变动然而这些在Android15上已经行不通了，如果我们使用adb命令：adb shellsurootservicecall SurfaceFlinger1025i321去抓取跟踪信息，会报错：Result: Parcel(Error: 0xfffffffffffffffe"No such file or directory")原因则是Android15中SurfaceFlinger这块的逻辑已经被移除了：提示需要使用perfetto来开启layer追踪。再根据google的官网介绍：使用 Winscope 跟踪窗口转换 | Android Open Source Project (google.cn)最新的情况是“Quick settings developer tiles“下移除了”Winscope trace“，移动到了“System Tracing”中：如我的手机截图：那现在的Android15要如何使用Winscope工具呢，毕竟这个工具还挺好用的。3 Android15使用winscope首先根据google官网的指导去调试肯定是没错的，但是官网有些地方说的并不清楚，实际上去操作也遇到过很多问题，本文也参考了：android 14版本的winscope编译使用-手把手教你编译成功不报错_android wincope-CSDN博客另外我工作用的机器是windows+WSL，用的代码下载在了服务器，然后挂载到本地来查看的，实际操作起来一堆问题，虽然最后还是在本地弄好了，但这个是后话了。最开始，为了实验一下按照官方的教程是否能够成功，我用的是公司机房的电脑，ubuntu系统，并且能够连接外网，先体验一下简单难度，再挑战地狱难度。3.1 下载Android15源码repo init-u https://android.googlesource.com/platform/manifest -b android-15.0.0_r1这里只需要下载几个依赖的库就好了：repo sync development external/protobuf external/perfetto frameworks/base frameworks/libs/systemui frameworks/native frameworks/proto_logging platform_testing prebuilts/misc不同的Android版本不一样，具体是哪些库应该要看“development/tools/winscope/protos/build.js”的具体内容。3.2 导航到 Winscope 文件夹cd development/tools/winscope3.3 安装npm这里推荐用nvm安装，nvm全名node.js version management，是一个nodejs的版本管理工具：curl-o-https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bashsource~/.bashrcnvm安装的node版本比通过”apt-get“的方式更新一点：nvminstallnode查看版本号为：ukynho@user:~$ node-v
v22.9.0ukynho@user:~$ npm-v10.8.3如果使用”apt-get“安装npm，我本地安装的node版本是10.19.0，低版本的node到后续的步骤可能会出错。另外我这边查看node版本的时候，也遇到了GLIBC版本过低的错误，这一点更新到后面的解决问题的章节。3.4 安装依赖项使用以下命令安装依赖项：npm install这一步也OK，没遇到什么问题：如需查看可用命令的列表，请运行以下命令：npm run通过npm run命令查看的应该是package.json下的命令，我们重点关注build的这几个，“build:trace_processor”、“build:prod”"和"build:protos：3.5 构建所有生产和测试目标使用以下命令构建所有生产和测试目标：npm run build:prod实际上执行的也就是：&gt;npmrun build:trace_processor&amp;&amp;npmrun build:protos&amp;&amp;rm-rf dist/prod/&amp;&amp;webpack --config webpack.config.prod.js --progress&amp;&amp;cpdeps_build/trace_processor/to_be_served/* src/adb/winscope_proxy.py src/logo_light_mode.svg src/logo_dark_mode.svg src/viewers/components/rects/cube_full_shade.svg src/viewers/components/rects/cube_partial_shade.svg src/app/components/trackpad_right_click.svg src/app/components/trackpad_vertical_scroll.svg src/app/components/trackpad_horizontal_scroll.svg dist/prod/我本地的情况是，当执行到以下步骤：&gt;winscope@0.0.0 build:protos /local/sdb/android-15/development/tools/winscope&gt;node protos/build.js报错：(node:1753817)UnhandledPromiseRejectionWarning: TypeError: outSubdir.replaceAll is not afunctionat buildProtos(/local/sdb/android-15/development/tools/winscope/protos/build.js:106:32)at build(/local/sdb/android-15/development/tools/winscope/protos/build.js:30:9)(node:1753817)UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an asyncfunctionwithout a catch block, or by rejecting a promisewhichwas not handled with .catch().(rejection id:18)还有：ERRORin./src/parsers/input/perfetto/abstract_input_event_parser.ts16:440-483
Module not found: Error: Can't resolve 'protos/input/latest/json' in '/local/sdb/android-15/development/tools/winscope/src/parsers/input/perfetto'如以下截图：这个报错问chatGPT：原因就是第3步安装npm时提到的，由于我最初使用apt-get安装的node，版本号过低：只有10.19.0，而这里要求的版本要在15以上，后续换nvm安装最新版本的node就可以pass了。最终成功，显示：webpack 5.91.0 compiled with 3 warnings in 35078ms生成“dist/prod”目录：3.6 运行Winscope使用以下命令运行 Winscope：npm run start这一步也没有遇到什么问题，成功：然后Winscope页面在浏览器中打开：4 捕获追踪记录4.1 在设备上捕获跟踪记录这里是官网的介绍：在针对动画问题提交错误时，在设备上捕获跟踪记录以收集数据。所有界面跟踪记录都是通过此方法记录的，因为无法自定义配置。在 Android 设备上：1、启用开发者选项。2、选择开发者选项下的 System Tracing。3、启用收集 Winscope 跟踪记录。4、在其他下：启用在错误报告中附加录制内容。启用显示“快捷设置”功能块。5、 导航到您需要重现错误的位置。6、如需开始记录，请打开“快捷设置”，然后选择录制跟踪记录：7、仅执行重现错误所需的步骤。8、如需停止捕获，请打开“快捷设置”，然后选择停止跟踪。9、使用所列选项之一共享捕获的日志，如 Gmail、云端硬盘或 BetterBug。我本地操作下来，看到最终的“perfetto-trace”文件是保存在了“data/local/traces”目录下，如：data/local/traces/trace-MT6835-AP3A.240617.008-2024-10-15-10-33-52.perfetto-trace另外我没看到对应的视频，我个人觉得有“perfetto-trace”搭配视频就最好了，大部分情况下wm或者ime的信息啥的我不太需要，比如Transitions啥的一般看log就够了，当然特殊情况下肯定是有参考价值的。4.2 通过 Winscope 捕获跟踪记录这种方式虽然有点麻烦，但是能抓的信息却是最全，如果情况允许的，我最推荐这种。1、执行以下命令：python3 development/tools/winscope/src/adb/winscope_proxy.py生成了token：2、在Collect Traces（收集跟踪记录）界面上，点击ADB Proxy（ADB 代理）：变成了：输入token，然后点击“Connect”，选择对应的机器：然后点击“Start trace”，就可以开始记录了。最后你也可以把所有的文件下载下来查看，下载后是一个压缩包，解压后得到大概是这样的：拖到Winscope的那个网页里面就可以查看了。另外说一下这个生成状态转储文件的功能：我个人觉得也还不错，Android15上用“dumpsys SurfaceFlinger”看不到每一个Layer的具体信息了（也许还能看，我现在还没去研究），但是通过这里还是能看到：4.3 通过 adb 命令捕获跟踪记录这里重点看下SurfaceFlinger的部分，首先是官网的介绍。SurfaceFlinger 层跟踪使用 Perfetto 跟踪记录进行捕获。如需了解配置信息，请参阅跟踪配置。请参阅以下有关 SurfaceFlinger 层跟踪配置的示例：unique_session_name:"surfaceflinger_layers_active"buffers:{size_kb:63488fill_policy: RING_BUFFER}data_sources:{config{name:"android.surfaceflinger.layers"surfaceflinger_layers_config:{mode: MODE_ACTIVEtrace_flags: TRACE_FLAG_INPUTtrace_flags: TRACE_FLAG_COMPOSITIONtrace_flags: TRACE_FLAG_HWCtrace_flags: TRACE_FLAG_BUFFERStrace_flags: TRACE_FLAG_VIRTUAL_DISPLAYS}}}请参阅以下示例命令，以生成 SurfaceFlinger 层的跟踪记录：adb shell -t perfetto\-c - --txt\-o /data/misc/perfetto-traces/trace\我看了这个是比较懵逼的，最后参考了：Trace configuration - Perfetto Tracing Docs才稍微弄懂了一点，主要是看关于Android的介绍：接着是我本地的操作。1、首先将以上配置写到一个文件中：命名为config.pbtx。2、使用以下命令：catconfig.pbtx|adb shell perfetto -c - --txt -o /data/misc/perfetto-traces/test.perfetto-trace然后在适当的时候断掉：最终在“/data/misc/perfetto-traces/”目录生成名为“test”的perfetto-trace文件：但是这里的生成的文件大小是0，所以肯定是哪里有点问题的，我现在还不清楚。后续看了下perfetto官网的介绍，仿照着在配置文件中额外增加抓取时间，“duration_ms: 10000”，如：duration_ms:10000unique_session_name:"surfaceflinger_layers_active"buffers:{size_kb:63488fill_policy: RING_BUFFER}data_sources:{config{name:"android.surfaceflinger.layers"surfaceflinger_layers_config:{mode: MODE_ACTIVEtrace_flags: TRACE_FLAG_INPUTtrace_flags: TRACE_FLAG_COMPOSITIONtrace_flags: TRACE_FLAG_HWCtrace_flags: TRACE_FLAG_BUFFERStrace_flags: TRACE_FLAG_VIRTUAL_DISPLAYS}}}然后果然就可以了：拖动到Winscope中可以查看：3、最后如perfetto官网介绍的，从Android12开始，“/data/misc/perfetto-configs”可以用来存储配置文件，你也可以把自己的配置文件push到这个目录下，然后直接用命令：adb shell -t perfetto -c data/misc/perfetto-configs/config.pbtx --txt -o /data/misc/perfetto-traces/test2.perfetto-trace来生成perfetto-trace文件：我个人觉得还是自己本地写好一个配置文件，然后执行：catconfig.pbtx|adb shell perfetto -c - --txt -o /data/misc/perfetto-traces/test.perfetto-trace这种方式最简单快捷。5 分析跟踪记录这部分官网已经讲的很详细了，我这边没有遇到什么别的问题。6 问题收集如我之前所说，最开始我用的是公司机房的ubuntu系统的电脑，并且能够连接外网，所以遇到的问题还算少的。但是我最终的目的肯定是在自己自用的电脑上用的，由于我本地是windows系统+WSL，不能连外网，并且代码是下载在服务器然后挂载到本地的，所以实际上操作的时候遇到了很多其它的问题。6.1 下载源码由于不能科学上网，这里使用清华的镜像下载Android15源码：repo init-u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-15.0.0_r16.2 执行”npm run build:prod“报错卡在：fatal: unable to access'https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx.git/':Failed to connect to chromium.googlesource.com port443after134229ms: Connection timed out原因为无法连接到”https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx.git/“这一步我是真没辙，没有清华可用的镜像源替换，github上担心版本太旧可能会有问题，最后只能用手机连了公司的翻墙wifi然后分享给电脑来下载。最终本地也成功：6.3 执行”npm run start“报错报错为：WARNINGin./node_modules/three/src/Three.js
There are multiple modules with names that only differincasing.
This can lead to unexpected behavior when compiling on a filesystem with other case-semantic.
Use equal casing. Compare these module identifiers:
* javascript/esm|/mnt/d/android-15-tsinghua/development/tools/winscope/node_modules/three/src/Three.jsUsed by1module(s), i. e./mnt/d/android-15-tsinghua/development/tools/winscope/node_modules/@ephesoft/webpack.istanbul.loader/index.js??ruleSet[1].rules[0]!/mnt/d/android-15-tsinghua/development/tools/winscope/node_modules/ts-loader/index.js!/mnt/d/android-15-tsinghua/development/tools/winscope/node_modules/angular2-template-loader/index.js!/mnt/d/android-15-tsinghua/development/tools/winscope/src/app/components/timeline/mini-timeline/drawer/draggable_canvas_object_impl.ts
* javascript/esm|/mnt/d/android-15-tsinghua/development/tools/winscope/node_modules/three/src/three.jsUsed by1module(s), i. e.javascript/esm|/mnt/d/android-15-tsinghua/development/tools/winscope/node_modules/three/examples/jsm/renderers/CSS2DRenderer.js如截图：这个问了chatGPT：说实话我对这块也不太懂，chatGPT说是大小写的问题，网上查资料也说是”linux下是严格区分大小写，而windows不区分“，因此做了诸多尝试，最终发现将”development/tools/winscope/node_modules/three/examples/jsm/renderers/CSS2DRenderer.js“文件中的这里：”three“改为大写的”Three“可以成功：最终在我自用的电脑上也可以使用了：脑海中缓缓响起了”We are the champions my friends. And we’ll keep on fighting…“6.4 直接使用”index.html“行吗根据我们在Android15之前的平台上的经验，是可以直接把”prebuilts/misc/common/winscope/winscope.html“这个文件拷贝到其它地方，然后直接打开来用的，那现在对”development/tools/winscope/dist/prod/index.html“还可以用同样的操作吗？我直接将机房生成的”dist/prod“目录拷到我本地，然后直接打开”development/tools/winscope/dist/prod/index.html“后，同样是这个界面：然后我本地试了一下，大部分的文件都能拖进去解析：但是唯独”trace.perfetto-trace“不行！说实话我用Winscope主要就是看SurfaceFlinger的信息的，你哪怕功能再多，SurfaceFlinger的信息看不了对我来说等于没用，目前我本地是行不通的。不知道有没有网上的各位大佬有没有办法，如果可以的话，就能省下很多工作了。6.5 直接将别的机器的源码拷到本地可以吗既然直接将”index.html“拿过来不行，那将别的机器中配置好的源码拷贝过来可以用吗？比如我在机器A上配置好了，然后我把机器A上的源码直接拷贝到机器B上，然后直接在“development/tools/winscope”目录下执行最后一步”npm run start“可以吗？毕竟能少执行一步就少执行一步…实际上是可行的，但是根据我操作的情况，将机房中的机器A配置好的源码拷贝到机房中的机器B（同样的Ubuntu+连接外网）下是行得通的，但是拷贝到我自用的机器（Windows+WSL+不能连外网）就不行，具体现象和直接打开“index.html”是一样的，没办法查看perfetto-trace文件…时运不齐，命途多舛。6.6 GLIBC版本过低接上节，我将机器A配置好的源码拷贝到机器B上，然后在机器B上，当我使用”node -v“查看node版本的时候，遇到了GLIBC版本过低的错误：node: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.28' not found(required by node)使用”ldd --version“查看，我本地的是2.27，这里至少要2.28：这里我查找网上资料，最终使用”sudo apt-get install libc6“命令更新到版本2.35，然后问题解决：6.7 “OSError: [Errno 98] Address already in use”有的时候执行“winscope_proxy.py”：python3 winscope_proxy.py会提示：“OSError:[Errno98]Address alreadyinuse”此时执行：netstat-tunlpkill掉相应的进程：就可以了。6.8 listen EADDRINUSE: address already in use :::8080有的时候执行“npm run start”，会遇到端口被占用的情况：listen EADDRINUSE: address alreadyinuse :::8080如截图：那么执行：sudolsof-i :&lt;端口号&gt;然后kill掉相关进程就好了，如我这里的是8080端口号被占了：6.9 使用Winscope工具抓取追踪记录时报错点击“End trace后”，报错信息为：2024-10-16 10:03:14,019 - ADBProxy - ERROR - Internal error: TimeoutExpired([‘adb’, ‘-s’, ‘HAJV9TNJ9DRCBIWK’, ‘shell’], 5)如截图：这个问题我还没解决，可能跟我本地是Windows+WSL有关，我用ubuntu系统还没遇到过这个问题，不知道有没有大佬知道如何解决。7 小试牛刀 —— 闪屏问题分析现在你已经掌握了Winscope的使用方法了，可以运用到实际来解决问题了，这里看一个启动头条闪屏的问题。7.1 问题描述非冷启动头条的情况，偶尔会出现闪屏的情况，如：看这个现象：1、是Starting Window消失又出现了？2、还是Starting Window消失后过了一阵子Activity界面显示了？3、亦或是Starting Window根本就没有显示，是Activity界面消失又出现了？…可能的原因很多，单从问题场景无法得知原因。7.2 分析方式一：添加log在计算Layer可见区域的函数Output.ensureOutputLayerIfVisible中添加log，看到：1、SnapshotStartingWindow先被显示：2、然后在真正的MainActivity显示之前，SnapshotStartingWindow被隐藏了：3、最终MainActivity显示：4、正常来说，SnapshotStartingWindow应该是要等MainActivity显示了之后才隐藏的，如这份正常的log：MainActivity显示的时候SnapshotStartingWindow还在，但是出现问题的时候，是提前隐藏了。7.3 分析方式二：Winscope以上方式显而易见，我们得有一套编译过的代码以及相匹配的手机才行，有的时候你可能手头没有这些，你要重新下一套代码再去编译啥的，很花时间，再看使用Winscope如何分析问题。我这边只抓了SurfaceFlinger和视频的信息，当然也可以SurfaceFlinger和视频的信息结合着一起看，但是这样会比较卡，由于复现的时间比较长，所以我这边先查看了视频的信息，如下：上面显示的“f=…”应该是帧号的意思，那么看视频：1）、大概是在1130帧的时候，头条的相关界面（可能是StartingWindow，也可能是头条的Activity，现在还不得而知）完全消失。2）、1131帧的时候，Launcher界面也消失。3）、1135帧的时候，头条的相关界面又重新出现。再看Winscope的信息：1、由于是1130帧出现了问题，那么首先看1129帧：看视频的信息，知道此时头条的界面还在显示，从SurfaceFlinger的信息知，此时显示的是头条的StartingWindow。展开看StartingWindow：其Layer位于头条对应的Task#8之下，没毛病。2、接着是1130帧：看视频此时StartingWindow不见了，再看SurfaceFlinger的信息，头条的StartingWindow对应的可见Layer也不在了。再展开看头条对应的Task#8的信息：发现StartingWindow的WindowState啥的全被移除了。此时头条的MainActivity还没显示，但是StartingWindow已经被移除了，这个肯定是不对的。3、最后看1135帧：看视频的信息，此时头条的界面又显示出来了，从SurfaceFlinger的信息知，此时显示的是头条的真正的界面，MainActivity。根据Winscope显示的信息，我们可以和方式一添加log调试那样得出同样的结论，即StartingWindow被提前隐藏/移除了。7.4 问题原因根据以上分析，我们知道了闪屏的原因是因为StartingWindow被提前移除了，但是从Winscope上也无法再得出更多的信息了。继续打开更多相关的log开关，主要是WM_DEBUG_STARTING_WINDOW、WM_SHOW_TRANSACTIONS以及WM_SHOW_SURFACE_ALLOC，并且结合我自己的log（有没有都行），抓取一份复现问题的log进行分析：log中的信息总结如下：1、SnapshotStartingWindow窗口被添加、绘制完成以及SurfaceControl显示。2、SnapshotStartingWindow对应的Layer显示。3、头条的一个子窗口，PopupWindow，绘制完成，于是准备移除SnapshotStartingWindow，但是MainActivity的主窗口还没绘制完成。4、WMS侧发起对SnapshotStartingWindow的隐藏和销毁。5、SnapshotStartingWindow的Layer被隐藏，但是此时头条的MainActivity还没显示。6、头条MainActivity的主窗口绘制完成、显示。7、头条MainActivity主窗口对应的Layer显示。关键就在于当头条的一个子窗口，PopupWindow，绘制完成后，即触发了：ActivityRecord.onFirstWindowDrawn-&gt; ActivityRecord.removeStartingWindow-&gt; ActivityRecord.removeStartingWindowAnimation移除了SnapshotStaringWindow。但是实际上不管是看视频，还是看log，都是没找到这个PopupWindow的相关信息的，查看这个PopupWindow的信息：请求的宽是0，所以这个PopupWindow实际上是没有内容显示的，但是它绘制完成的时候，又认为此时可以移除SnapshotStartingWindow了，这肯定是不合理的。7.5 pixel现象最后看到pixel上同样可以复现，log为：原因是一样的，由于PopupWindow绘制完成，移除了SnapshotStartingWindow，而此时MainActivity的主窗口还没绘制完成，从而出现闪屏：7.6 小结从本题的分析我们可以看到，如果是用Winscope分析这个问题的话，只需要两步：1、手头任意一台能够复现问题的手机，用Winscope查看问题发生过程中的界面变化。2、打开更多log开关，然后根据log查明问题发生的原因。如果不用Winscope，那么我们的解题步骤是：1、下一套代码，添加log，编译。2、找个机器，刷和下载的代码日期相近的版本。3、将编译出的东西push到手机，然后复现问题，根据log得知问题发生过程中的界面变化。4、打开更多log开关，然后根据log查明问题发生的原因。这种问题，耗时的地方往往在于前几步，因为log中没有信息来表明每时每刻屏幕上正在发生的界面变化，如果没有Winscope的话，那么我们只能搞一套代码，添加log来调试，非常麻烦。但是Winscope也有局限性，大部分情况下我们无法只通过Winscope就知道问题原因，还是需要结合log或者其它工具来综合分析问题。http://www.ppmy.cn/news/1541036.html相关文章数据分析-31-时间序列分析的卡尔曼滤波器平滑方法1 卡尔曼滤波器估计系统状态 
Kalman Filter（卡尔曼滤波器）算法是一种线性最小方差估计器，用于在存在噪声的情况下对随机过程或系统进行估计。它的基本思想是通过一系列的迭代步骤，不断优化对系统状态的估计。算法主要包含两个步骤：预测和更新。 
1.1 卡尔曼滤波器的原理 …阅读更多...Makefile:1954: recipe for target ‘Modules/_ssl.o‘ failed请安装ssl后，重新安装或编译Python碰到这个问题&amp;#xff0c;请重新安装openssl&amp;#xff0c;并编译安装Python源码。   
安装openssl 
sudo apt-get update sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libn…阅读更多...IoT工业网关的功能与特点有哪些？IoT工业网关在现代工业生产中的应用随着物联网&amp;#xff08;IoT&amp;#xff09;技术的飞速发展&amp;#xff0c;IoT工业网关作为连接物理世界与数字世界的桥梁&amp;#xff0c;正在工业领域发挥着越来越重要的作用。 
一、IoT工业网关的基本功能与特点 
1、数据聚合与预处理 
IoT工业网关的首要功能之一是数据聚合。在复杂的工…阅读更多...101 - Lecture 11课程概述 
•	汇编语言中的输出&amp;#xff08;Output in inline assembly&amp;#xff09;
•	汇编语言中的输入&amp;#xff08;Input in inline assembly&amp;#xff09;
•	printf 函数的更多细节
•	scanf 函数的更多细节
•	程序流程控制&amp;#xff08;Controlling program flow&amp;#xff…阅读更多...数据库作业2作业&amp;#xff1a; 建立数据库&amp;#xff1a; 建表&amp;#xff1a; 插入数据&amp;#xff1a; 查询&amp;#xff1a; 
&amp;#xff08;1&amp;#xff09;&amp;#xff1a; &amp;#xff08;2&amp;#xff09;&amp;#xff1a; &amp;#xff08;3&amp;#xff09;&amp;#xff1a; &amp;#xff08;4&amp;#xff09;&amp;#xff1a; &amp;#xf…阅读更多...训练自己的语音并生成音频fish.audioFish Speech 是一个致力于提供高质量、易用且功能强大的语音合成解决方案的开源项目。它融合了多项先进的语音合成技术&amp;#xff0c;为研究者、开发者和普通用户提供了一个功能丰富的语音合成平台。 fish.audio开发团队是我们是公认的开源SVC / TTS 项目的开创者在GitHub上拥有超…阅读更多...通过 Twitter Token 实现授权与操作通过 Twitter Token 实现授权与操作 
一、Twitter API 概览 
1.1 Twitter API 简介 
Twitter API 是 Twitter 公司提供的一种编程接口，它允许开发者访问 Twitter 的海量数据，包括用户信息、推文内容、关系网络等。通过这些接口，开发者可以创建应用程序，实现自动化的社交媒体…阅读更多...PyCharm借助MobaXterm跳板机连接服务器服务器信息&amp;#xff1a; Step 1 
MovaXterm→Session→SSH输入服务器信息 Step 2 
MovaXterm→Session→SSH→Network setting→SSG gateway(jump host) 输入跳板机信息 键入密码即可 
Step 3 
MovaXterm→Tunneling→New SSH tunnel 依次输入&amp;#xff1a;A本机端口&amp;#xff0c…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:29 +0000</pubDate>
    </item>
    <item>
      <title>数据分析-31-时间序列分析的卡尔曼滤波器平滑方法</title>
      <link>https://www.ppmy.cn/news/1541035.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维数据分析-31-时间序列分析的卡尔曼滤波器平滑方法news/2025/11/1 1:17:27/1 卡尔曼滤波器估计系统状态Kalman Filter（卡尔曼滤波器）算法是一种线性最小方差估计器，用于在存在噪声的情况下对随机过程或系统进行估计。它的基本思想是通过一系列的迭代步骤，不断优化对系统状态的估计。算法主要包含两个步骤：预测和更新。1.1 卡尔曼滤波器的原理卡尔曼滤波器的递推计算包含两个阶段 ： 预测与更新。预测阶段，使 用上一时刻的最优估计，做出对当前状态的估计。更新阶段，卡尔曼滤波器利用当前状态的测量值优化预测阶段的估计值，获得状态的最优估计值，卡尔曼滤波器的递推公式如下所示：1.2 卡尔曼滤波器的核心步骤http://www.ppmy.cn/news/1541035.html相关文章Makefile:1954: recipe for target ‘Modules/_ssl.o‘ failed请安装ssl后，重新安装或编译Python碰到这个问题&amp;#xff0c;请重新安装openssl&amp;#xff0c;并编译安装Python源码。   
安装openssl 
sudo apt-get update sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libn…阅读更多...IoT工业网关的功能与特点有哪些？IoT工业网关在现代工业生产中的应用随着物联网&amp;#xff08;IoT&amp;#xff09;技术的飞速发展&amp;#xff0c;IoT工业网关作为连接物理世界与数字世界的桥梁&amp;#xff0c;正在工业领域发挥着越来越重要的作用。 
一、IoT工业网关的基本功能与特点 
1、数据聚合与预处理 
IoT工业网关的首要功能之一是数据聚合。在复杂的工…阅读更多...101 - Lecture 11课程概述 
•	汇编语言中的输出&amp;#xff08;Output in inline assembly&amp;#xff09;
•	汇编语言中的输入&amp;#xff08;Input in inline assembly&amp;#xff09;
•	printf 函数的更多细节
•	scanf 函数的更多细节
•	程序流程控制&amp;#xff08;Controlling program flow&amp;#xff…阅读更多...数据库作业2作业&amp;#xff1a; 建立数据库&amp;#xff1a; 建表&amp;#xff1a; 插入数据&amp;#xff1a; 查询&amp;#xff1a; 
&amp;#xff08;1&amp;#xff09;&amp;#xff1a; &amp;#xff08;2&amp;#xff09;&amp;#xff1a; &amp;#xff08;3&amp;#xff09;&amp;#xff1a; &amp;#xff08;4&amp;#xff09;&amp;#xff1a; &amp;#xf…阅读更多...训练自己的语音并生成音频fish.audioFish Speech 是一个致力于提供高质量、易用且功能强大的语音合成解决方案的开源项目。它融合了多项先进的语音合成技术&amp;#xff0c;为研究者、开发者和普通用户提供了一个功能丰富的语音合成平台。 fish.audio开发团队是我们是公认的开源SVC / TTS 项目的开创者在GitHub上拥有超…阅读更多...通过 Twitter Token 实现授权与操作通过 Twitter Token 实现授权与操作 
一、Twitter API 概览 
1.1 Twitter API 简介 
Twitter API 是 Twitter 公司提供的一种编程接口，它允许开发者访问 Twitter 的海量数据，包括用户信息、推文内容、关系网络等。通过这些接口，开发者可以创建应用程序，实现自动化的社交媒体…阅读更多...PyCharm借助MobaXterm跳板机连接服务器服务器信息&amp;#xff1a; Step 1 
MovaXterm→Session→SSH输入服务器信息 Step 2 
MovaXterm→Session→SSH→Network setting→SSG gateway(jump host) 输入跳板机信息 键入密码即可 
Step 3 
MovaXterm→Tunneling→New SSH tunnel 依次输入&amp;#xff1a;A本机端口&amp;#xff0c…阅读更多...离散制造和流程制造分别是什么？它们有什么区别？为何有的企业生产过程看似一气呵成&amp;#xff0c;而有的则是由多个环节组合而成&amp;#xff1f;其实这就涉及到了制造业的两种常见生产模式。 
流程制造离散制造 
那么&amp;#xff0c;在生产管理方面&amp;#xff0c;离散制造和流程制造分别有什么特点、区别呢&amp;#xff1f; 
今天&amp;#xff0…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:27 +0000</pubDate>
    </item>
    <item>
      <title>Makefile:1954: recipe for target ‘Modules/_ssl.o‘ failed请安装ssl后，重新安装或编译Python</title>
      <link>https://www.ppmy.cn/news/1541034.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Makefile:1954: recipe for target ‘Modules/_ssl.o‘ failed请安装ssl后，重新安装或编译Pythonnews/2025/11/1 1:17:25/碰到这个问题，请重新安装openssl，并编译安装Python源码。安装opensslsudo apt-get updatesudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-opensslmakemake install编译Python./configure --enable-optimizations --enable-loadable-sqlite-extensions --with-sslmake -j 8 -s # 替换8为你的CPU核心数make installhttp://www.ppmy.cn/news/1541034.html相关文章IoT工业网关的功能与特点有哪些？IoT工业网关在现代工业生产中的应用随着物联网&amp;#xff08;IoT&amp;#xff09;技术的飞速发展&amp;#xff0c;IoT工业网关作为连接物理世界与数字世界的桥梁&amp;#xff0c;正在工业领域发挥着越来越重要的作用。 
一、IoT工业网关的基本功能与特点 
1、数据聚合与预处理 
IoT工业网关的首要功能之一是数据聚合。在复杂的工…阅读更多...101 - Lecture 11课程概述 
•	汇编语言中的输出&amp;#xff08;Output in inline assembly&amp;#xff09;
•	汇编语言中的输入&amp;#xff08;Input in inline assembly&amp;#xff09;
•	printf 函数的更多细节
•	scanf 函数的更多细节
•	程序流程控制&amp;#xff08;Controlling program flow&amp;#xff…阅读更多...数据库作业2作业&amp;#xff1a; 建立数据库&amp;#xff1a; 建表&amp;#xff1a; 插入数据&amp;#xff1a; 查询&amp;#xff1a; 
&amp;#xff08;1&amp;#xff09;&amp;#xff1a; &amp;#xff08;2&amp;#xff09;&amp;#xff1a; &amp;#xff08;3&amp;#xff09;&amp;#xff1a; &amp;#xff08;4&amp;#xff09;&amp;#xff1a; &amp;#xf…阅读更多...训练自己的语音并生成音频fish.audioFish Speech 是一个致力于提供高质量、易用且功能强大的语音合成解决方案的开源项目。它融合了多项先进的语音合成技术&amp;#xff0c;为研究者、开发者和普通用户提供了一个功能丰富的语音合成平台。 fish.audio开发团队是我们是公认的开源SVC / TTS 项目的开创者在GitHub上拥有超…阅读更多...通过 Twitter Token 实现授权与操作通过 Twitter Token 实现授权与操作 
一、Twitter API 概览 
1.1 Twitter API 简介 
Twitter API 是 Twitter 公司提供的一种编程接口，它允许开发者访问 Twitter 的海量数据，包括用户信息、推文内容、关系网络等。通过这些接口，开发者可以创建应用程序，实现自动化的社交媒体…阅读更多...PyCharm借助MobaXterm跳板机连接服务器服务器信息&amp;#xff1a; Step 1 
MovaXterm→Session→SSH输入服务器信息 Step 2 
MovaXterm→Session→SSH→Network setting→SSG gateway(jump host) 输入跳板机信息 键入密码即可 
Step 3 
MovaXterm→Tunneling→New SSH tunnel 依次输入&amp;#xff1a;A本机端口&amp;#xff0c…阅读更多...离散制造和流程制造分别是什么？它们有什么区别？为何有的企业生产过程看似一气呵成&amp;#xff0c;而有的则是由多个环节组合而成&amp;#xff1f;其实这就涉及到了制造业的两种常见生产模式。 
流程制造离散制造 
那么&amp;#xff0c;在生产管理方面&amp;#xff0c;离散制造和流程制造分别有什么特点、区别呢&amp;#xff1f; 
今天&amp;#xff0…阅读更多...Electron-（三）网页报错处理与请求监听在前端开发中&amp;#xff0c;Electron 是一个强大的框架&amp;#xff0c;它允许我们使用 Web 技术构建跨平台的桌面应用程序。在开发过程中&amp;#xff0c;及时处理网页报错和监听请求是非常重要的环节。本文将详细介绍 Electron 中网页报错的日志记录、webContents 的监听事件以及如何监…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:26 +0000</pubDate>
    </item>
    <item>
      <title>IoT工业网关的功能与特点有哪些？IoT工业网关在现代工业生产中的应用</title>
      <link>https://www.ppmy.cn/news/1541033.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维IoT工业网关的功能与特点有哪些？IoT工业网关在现代工业生产中的应用news/2025/11/1 1:17:24/随着物联网（IoT）技术的飞速发展，IoT工业网关作为连接物理世界与数字世界的桥梁，正在工业领域发挥着越来越重要的作用。一、IoT工业网关的基本功能与特点1、数据聚合与预处理IoT工业网关的首要功能之一是数据聚合。在复杂的工业环境中，各种传感器和设备会产生海量的数据。IoT工业网关能够实时从多个传感器或设备中收集数据，并将其汇总成一个单一的数据流。这不仅减少了需要传输的数据量，降低了网络拥塞的风险，还提高了数据处理的速度和效率。此外，IoT工业网关还具备数据预处理的能力，可以对数据进行过滤、优化和分析，如异常检测、数据清洗和数据加密等，确保数据的准确性和安全性。2、网络优化与设备管理IoT工业网关在网络优化方面也发挥着重要作用。它能够根据网络状况和设备需求，选择最佳的传输路径和协议，以提高网络效率。例如，通过本地存储和实时上传数据，IoT工业网关可以降低带宽需求，减少数据传输的延迟。此外，IoT工业网关还支持设备注册、配置、监控和维护等功能，确保连接到网关的设备能够正常工作并及时更新固件。3、安全性保障在物联网系统中，安全性是一个不容忽视的问题。IoT工业网关必须具备强大的安全性能，以保护本地设备和远程通信的安全。它通常提供多层安全措施，包括防火墙、入侵检测、访问控制和数据加密等。这些安全措施能够有效地防止未经授权的访问和数据泄露，确保物联网系统的稳定运行。4、适应性IoT工业网关的另一个重要功能是适应性。它支持广泛的通信标准和技术，如Wi-Fi、4G/5G、以太网等。这种适应性使得IoT工业网关能够适配不同的应用场景和环境要求，实现不同设备之间的互联互通。在工业自动化等领域，IoT工业网关发挥着重要作用。二、IoT工业网关在现代工业生产中的应用1、智能制造IoT工业网关可以实现生产设备之间的互联互通，实现生产过程的自动化和智能化。通过实时采集和处理设备数据，企业可以优化生产流程，提高生产效率和质量。同时，IoT工业网关还支持远程监控和控制功能，使得企业可以实时掌握设备的运行状态，及时发现并处理设备故障，提高设备的可用性和稳定性。2、能源管理IoT工业网关可以实时监测设备的能耗情况，实现能源的优化调度和管理。通过收集和分析能耗数据，企业可以制定更加合理的能源使用计划，降低能源消耗和运营成本。同时，IoT工业网关还支持能源设备的远程监控和控制功能，使得企业可以实时掌握能源设备的运行状态，确保能源供应的稳定性和安全性。3、预测性维护可以通过分析IoT工业网关收集的设备数据，实现预测性维护。通过对设备数据的实时监测和分析，企业可以预测设备的故障和失效时间，提前进行维护和更换部件，减少设备故障对生产的影响。这不仅可以降低设备的维修成本，还可以提高设备的可靠性和稳定性。4、数据分析与优化IoT工业网关采集的数据可以用于生产数据的分析和挖掘，为企业的决策提供数据支持。通过对数据的分析和挖掘，企业可以发现生产过程中的瓶颈和问题，制定改进措施和优化方案，提高生产效率和产品质量。同时，IoT工业网关还支持与其他系统的集成和对接，实现数据的共享和协同工作。IoT工业网关作为连接物理世界与数字世界的桥梁，在现代工业生产中发挥着至关重要的作用。它不仅能够实现数据的聚合、预处理和传输，还能够优化网络性能、保障安全性、提高适应性和支持预测性维护等功能。随着技术的不断进步和应用的不断拓展，IoT工业网关将在未来工业生产中发挥更加重要的作用，推动工业领域的数字化转型和升级。http://www.ppmy.cn/news/1541033.html相关文章101 - Lecture 11课程概述 
•	汇编语言中的输出&amp;#xff08;Output in inline assembly&amp;#xff09;
•	汇编语言中的输入&amp;#xff08;Input in inline assembly&amp;#xff09;
•	printf 函数的更多细节
•	scanf 函数的更多细节
•	程序流程控制&amp;#xff08;Controlling program flow&amp;#xff…阅读更多...数据库作业2作业&amp;#xff1a; 建立数据库&amp;#xff1a; 建表&amp;#xff1a; 插入数据&amp;#xff1a; 查询&amp;#xff1a; 
&amp;#xff08;1&amp;#xff09;&amp;#xff1a; &amp;#xff08;2&amp;#xff09;&amp;#xff1a; &amp;#xff08;3&amp;#xff09;&amp;#xff1a; &amp;#xff08;4&amp;#xff09;&amp;#xff1a; &amp;#xf…阅读更多...训练自己的语音并生成音频fish.audioFish Speech 是一个致力于提供高质量、易用且功能强大的语音合成解决方案的开源项目。它融合了多项先进的语音合成技术&amp;#xff0c;为研究者、开发者和普通用户提供了一个功能丰富的语音合成平台。 fish.audio开发团队是我们是公认的开源SVC / TTS 项目的开创者在GitHub上拥有超…阅读更多...通过 Twitter Token 实现授权与操作通过 Twitter Token 实现授权与操作 
一、Twitter API 概览 
1.1 Twitter API 简介 
Twitter API 是 Twitter 公司提供的一种编程接口，它允许开发者访问 Twitter 的海量数据，包括用户信息、推文内容、关系网络等。通过这些接口，开发者可以创建应用程序，实现自动化的社交媒体…阅读更多...PyCharm借助MobaXterm跳板机连接服务器服务器信息&amp;#xff1a; Step 1 
MovaXterm→Session→SSH输入服务器信息 Step 2 
MovaXterm→Session→SSH→Network setting→SSG gateway(jump host) 输入跳板机信息 键入密码即可 
Step 3 
MovaXterm→Tunneling→New SSH tunnel 依次输入&amp;#xff1a;A本机端口&amp;#xff0c…阅读更多...离散制造和流程制造分别是什么？它们有什么区别？为何有的企业生产过程看似一气呵成&amp;#xff0c;而有的则是由多个环节组合而成&amp;#xff1f;其实这就涉及到了制造业的两种常见生产模式。 
流程制造离散制造 
那么&amp;#xff0c;在生产管理方面&amp;#xff0c;离散制造和流程制造分别有什么特点、区别呢&amp;#xff1f; 
今天&amp;#xff0…阅读更多...Electron-（三）网页报错处理与请求监听在前端开发中&amp;#xff0c;Electron 是一个强大的框架&amp;#xff0c;它允许我们使用 Web 技术构建跨平台的桌面应用程序。在开发过程中&amp;#xff0c;及时处理网页报错和监听请求是非常重要的环节。本文将详细介绍 Electron 中网页报错的日志记录、webContents 的监听事件以及如何监…阅读更多...Web3的核心概念：去中心化如何改变互联网Web3&amp;#xff0c;作为互联网的下一代技术架构&amp;#xff0c;正在重新定义用户与数据、平台之间的关系。与以往的Web2.0时代相比&amp;#xff0c;Web3的核心在于去中心化的理念&amp;#xff0c;旨在通过区块链等技术实现更高的透明度、安全性和用户控制权。 
1. 数据的掌控与隐私保护 
在W…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览10月31日日记山石防火墙NAT-NAT64餐饮不仅仅卖食物，更卖的是服务。[Chrome] [插件] 插件推荐Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统从大厂到中小公司，活下去的五个生存法则revit api 编程实现窗口缩放视图又是一年叶落时（九）【题解】Codeforces 2062F Traveling Salescatwindow下递归删除 node_modules和.nextwindow下递归删除 node_modules和.next【题解】Codeforces 2062F Traveling Salescat又是一年叶落时（九）revit api 编程实现窗口缩放视图从大厂到中小公司，活下去的五个生存法则Tauri2-Vite7Admin客户端管理后台|tauri2.9+vue3+element-plus后台系统Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 17:17:24 +0000</pubDate>
    </item>
  </channel>
</rss>
